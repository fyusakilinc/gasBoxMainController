
gasBoxMasterv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a9c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08007c7c  08007c7c  00008c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef8  08007ef8  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007ef8  08007ef8  00008ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f00  08007f00  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f00  08007f00  00008f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f04  08007f04  00008f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007f08  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f90  20000060  08007f68  00009060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ff0  08007f68  00009ff0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179aa  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003845  00000000  00000000  00020a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  00024280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c2  00000000  00000000  00025840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c64  00000000  00000000  00026902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c312  00000000  00000000  00049566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc63a  00000000  00000000  00065878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141eb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f2c  00000000  00000000  00141ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00147e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007c64 	.word	0x08007c64

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08007c64 	.word	0x08007c64

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <hw_sero_get>:


// Serviceroutine Hadware Get
// Prueft im wesentlichen auf Harwarefehlersignale
void hw_sero_get(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <hw_sero_set>:

// Serviceroutine Hadware Set
// Verwaltet die Heartbeat LED
void hw_sero_set(void)
{	if (ct_hbeat_null()==1)
 80005ee:	b580      	push	{r7, lr}
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	f001 fe31 	bl	8002258 <ct_hbeat_null>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d109      	bne.n	8000610 <hw_sero_set+0x22>
	 { set_ct_hbeat(500);
 80005fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000600:	f001 fe1a 	bl	8002238 <set_ct_hbeat>
	 HAL_GPIO_TogglePin(UC_HEARTBEAT_GPIO_Port, UC_HEARTBEAT_Pin);
 8000604:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060c:	f003 f9da 	bl	80039c4 <HAL_GPIO_TogglePin>
	}
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <u_ok>:
void hw_set_error_out(uint8_t p)
{

}

uint8_t u_ok(GPIO_TypeDef *port, uint16_t pin) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
    GPIO_PinState s = HAL_GPIO_ReadPin(port, pin);
 8000620:	887b      	ldrh	r3, [r7, #2]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f003 f99d 	bl	8003964 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	73fb      	strb	r3, [r7, #15]
    return (s == GPIO_PIN_SET) ? 1u : 0u;
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d101      	bne.n	8000638 <u_ok+0x24>
 8000634:	2301      	movs	r3, #1
 8000636:	e000      	b.n	800063a <u_ok+0x26>
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <update_uok>:

uint8_t update_uok(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	uint8_t res1 = u_ok(UC__5VOK_GPIO_Port,UC__5VOK_Pin);
 800064a:	2110      	movs	r1, #16
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <update_uok+0x38>)
 800064e:	f7ff ffe1 	bl	8000614 <u_ok>
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	uint8_t res2 = u_ok(UC__12VOK_GPIO_Port,UC__12VOK_Pin);
 8000656:	2120      	movs	r1, #32
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <update_uok+0x38>)
 800065a:	f7ff ffdb 	bl	8000614 <u_ok>
 800065e:	4603      	mov	r3, r0
 8000660:	71bb      	strb	r3, [r7, #6]
	if((res1 && res2)){
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d004      	beq.n	8000672 <update_uok+0x2e>
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <update_uok+0x2e>
		return 1;
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <update_uok+0x30>
	}
	return 0;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	48000c00 	.word	0x48000c00

08000680 <readPumpWarning>:
                      set ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

// these two functions might just need a pulse

uint8_t readPumpWarning(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	GPIO_PinState s = HAL_GPIO_ReadPin(UC_PUMP_WARNING_GPIO_Port, UC_PUMP_WARNING_Pin);
 8000686:	2110      	movs	r1, #16
 8000688:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <readPumpWarning+0x28>)
 800068a:	f003 f96b 	bl	8003964 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	return (s == GPIO_PIN_SET) ? 1u : 0u;
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d101      	bne.n	800069c <readPumpWarning+0x1c>
 8000698:	2301      	movs	r3, #1
 800069a:	e000      	b.n	800069e <readPumpWarning+0x1e>
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	48001000 	.word	0x48001000

080006ac <readPumpAlarm>:

uint8_t readPumpAlarm(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
	GPIO_PinState s = HAL_GPIO_ReadPin(UC_PUMP_ALARM_GPIO_Port, UC_PUMP_ALARM_Pin);
 80006b2:	2120      	movs	r1, #32
 80006b4:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <readPumpAlarm+0x28>)
 80006b6:	f003 f955 	bl	8003964 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	return (s == GPIO_PIN_SET) ? 1u : 0u;
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d101      	bne.n	80006c8 <readPumpAlarm+0x1c>
 80006c4:	2301      	movs	r3, #1
 80006c6:	e000      	b.n	80006ca <readPumpAlarm+0x1e>
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	48001000 	.word	0x48001000

080006d8 <delay_ms>:
	for(volatile uint32_t i=0; i<m; i++);				// volatile, damit nicht vom Compiler wegoptimiert
}

//Verz�gerung um n * 1ms
void delay_ms(uint16_t n)
{	HAL_Delay(n);
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fe57 	bl	8003398 <HAL_Delay>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	@ 0x30
 80006f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	4b50      	ldr	r3, [pc, #320]	@ (800084c <MX_GPIO_Init+0x158>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	4a4f      	ldr	r2, [pc, #316]	@ (800084c <MX_GPIO_Init+0x158>)
 8000710:	f043 0310 	orr.w	r3, r3, #16
 8000714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000716:	4b4d      	ldr	r3, [pc, #308]	@ (800084c <MX_GPIO_Init+0x158>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	f003 0310 	and.w	r3, r3, #16
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000722:	4b4a      	ldr	r3, [pc, #296]	@ (800084c <MX_GPIO_Init+0x158>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a49      	ldr	r2, [pc, #292]	@ (800084c <MX_GPIO_Init+0x158>)
 8000728:	f043 0320 	orr.w	r3, r3, #32
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b47      	ldr	r3, [pc, #284]	@ (800084c <MX_GPIO_Init+0x158>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0320 	and.w	r3, r3, #32
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b44      	ldr	r3, [pc, #272]	@ (800084c <MX_GPIO_Init+0x158>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a43      	ldr	r2, [pc, #268]	@ (800084c <MX_GPIO_Init+0x158>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b41      	ldr	r3, [pc, #260]	@ (800084c <MX_GPIO_Init+0x158>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b3e      	ldr	r3, [pc, #248]	@ (800084c <MX_GPIO_Init+0x158>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a3d      	ldr	r2, [pc, #244]	@ (800084c <MX_GPIO_Init+0x158>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b3b      	ldr	r3, [pc, #236]	@ (800084c <MX_GPIO_Init+0x158>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b38      	ldr	r3, [pc, #224]	@ (800084c <MX_GPIO_Init+0x158>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	4a37      	ldr	r2, [pc, #220]	@ (800084c <MX_GPIO_Init+0x158>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000776:	4b35      	ldr	r3, [pc, #212]	@ (800084c <MX_GPIO_Init+0x158>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	4b32      	ldr	r3, [pc, #200]	@ (800084c <MX_GPIO_Init+0x158>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	4a31      	ldr	r2, [pc, #196]	@ (800084c <MX_GPIO_Init+0x158>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078e:	4b2f      	ldr	r3, [pc, #188]	@ (800084c <MX_GPIO_Init+0x158>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, UC_PUMP_START_Pin|UC_PUMP_STOP_Pin|UC_PUMP_REMOTE_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	214c      	movs	r1, #76	@ 0x4c
 800079e:	482c      	ldr	r0, [pc, #176]	@ (8000850 <MX_GPIO_Init+0x15c>)
 80007a0:	f003 f8f8 	bl	8003994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UC_CS_SPS_OUT_Pin|UC_CS_SPS_IN_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2106      	movs	r1, #6
 80007a8:	482a      	ldr	r0, [pc, #168]	@ (8000854 <MX_GPIO_Init+0x160>)
 80007aa:	f003 f8f3 	bl	8003994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UC_HEARTBEAT_GPIO_Port, UC_HEARTBEAT_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b8:	f003 f8ec 	bl	8003994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = UC_PUMP_START_Pin|UC_PUMP_STOP_Pin|UC_PUMP_REMOTE_Pin;
 80007bc:	234c      	movs	r3, #76	@ 0x4c
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	481f      	ldr	r0, [pc, #124]	@ (8000850 <MX_GPIO_Init+0x15c>)
 80007d4:	f002 ff44 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = UC_PUMP_WARNING_Pin|UC_PUMP_ALARM_Pin;
 80007d8:	2330      	movs	r3, #48	@ 0x30
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	4819      	ldr	r0, [pc, #100]	@ (8000850 <MX_GPIO_Init+0x15c>)
 80007ec:	f002 ff38 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UC_CS_SPS_OUT_Pin|UC_CS_SPS_IN_Pin;
 80007f0:	2306      	movs	r3, #6
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4813      	ldr	r0, [pc, #76]	@ (8000854 <MX_GPIO_Init+0x160>)
 8000808:	f002 ff2a 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UC_HEARTBEAT_Pin;
 800080c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UC_HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000828:	f002 ff1a 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = UC__5VOK_Pin|UC__12VOK_Pin;
 800082c:	2330      	movs	r3, #48	@ 0x30
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	@ (8000858 <MX_GPIO_Init+0x164>)
 8000840:	f002 ff0e 	bl	8003660 <HAL_GPIO_Init>

}
 8000844:	bf00      	nop
 8000846:	3730      	adds	r7, #48	@ 0x30
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	48001000 	.word	0x48001000
 8000854:	48000400 	.word	0x48000400
 8000858:	48000c00 	.word	0x48000c00

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000860:	f002 fd29 	bl	80032b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000864:	f000 f82e 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000868:	f7ff ff44 	bl	80006f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800086c:	f001 f95a 	bl	8001b24 <MX_SPI1_Init>
  MX_UART4_Init();
 8000870:	f001 ff08 	bl	8002684 <MX_UART4_Init>
  MX_UART5_Init();
 8000874:	f001 ff52 	bl	800271c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000878:	f001 ff9c 	bl	80027b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800087c:	f001 ffe6 	bl	800284c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000880:	f002 f832 	bl	80028e8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000884:	f001 fc3a 	bl	80020fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  uart_initAll();
 8000888:	f001 fd64 	bl	8002354 <uart_initAll>
  hw_sero_set();
 800088c:	f7ff feaf 	bl	80005ee <hw_sero_set>
  remote_init();
 8000890:	f000 f948 	bl	8000b24 <remote_init>
  zentrale_init();
 8000894:	f002 fa30 	bl	8002cf8 <zentrale_init>

  delay_ms(500);
 8000898:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800089c:	f7ff ff1c 	bl	80006d8 <delay_ms>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hw_sero_get();
 80008a0:	f7ff fe9e 	bl	80005e0 <hw_sero_get>
	  remote_sero_get();
 80008a4:	f000 f976 	bl	8000b94 <remote_sero_get>
	  gb_sero_get();
 80008a8:	f000 f9a4 	bl	8000bf4 <gb_sero_get>

	  zentrale();
 80008ac:	f002 fa90 	bl	8002dd0 <zentrale>

	  hw_sero_set();
 80008b0:	f7ff fe9d 	bl	80005ee <hw_sero_set>
	  uartRB_KickTx(&usart3_rb);
 80008b4:	4802      	ldr	r0, [pc, #8]	@ (80008c0 <main+0x64>)
 80008b6:	f001 fe1d 	bl	80024f4 <uartRB_KickTx>
	  hw_sero_get();
 80008ba:	bf00      	nop
 80008bc:	e7f0      	b.n	80008a0 <main+0x44>
 80008be:	bf00      	nop
 80008c0:	20000a08 	.word	0x20000a08

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	@ 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0318 	add.w	r3, r7, #24
 80008ce:	2238      	movs	r2, #56	@ 0x38
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f006 fd36 	bl	8007344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f003 f886 	bl	80039f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008f4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fa:	2303      	movs	r3, #3
 80008fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008fe:	2301      	movs	r3, #1
 8000900:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000902:	2328      	movs	r3, #40	@ 0x28
 8000904:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000906:	2302      	movs	r3, #2
 8000908:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800090a:	2302      	movs	r3, #2
 800090c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800090e:	2302      	movs	r3, #2
 8000910:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000912:	f107 0318 	add.w	r3, r7, #24
 8000916:	4618      	mov	r0, r3
 8000918:	f003 f922 	bl	8003b60 <HAL_RCC_OscConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000922:	f000 f818 	bl	8000956 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	230f      	movs	r3, #15
 8000928:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092a:	2303      	movs	r3, #3
 800092c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2104      	movs	r1, #4
 800093e:	4618      	mov	r0, r3
 8000940:	f003 fc20 	bl	8004184 <HAL_RCC_ClockConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800094a:	f000 f804 	bl	8000956 <Error_Handler>
  }
}
 800094e:	bf00      	nop
 8000950:	3750      	adds	r7, #80	@ 0x50
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095a:	b672      	cpsid	i
}
 800095c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095e:	bf00      	nop
 8000960:	e7fd      	b.n	800095e <Error_Handler+0x8>

08000962 <priolist_push>:
uint8_t priolist_pop (priority_item prio_list[], uint8_t priolevel_header[], uint8_t *firstunused, uint8_t priolevel_data);


//--------------FUNKTIONSDEFINITIONS----------------------------
uint8_t priolist_push (priority_item prio_list[], uint8_t priolist_length,  uint8_t priolevel_header[], uint8_t *firstunused, uint8_t stack_index, uint8_t priolevel_data)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b088      	sub	sp, #32
 8000966:	af02      	add	r7, sp, #8
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	460b      	mov	r3, r1
 8000970:	72fb      	strb	r3, [r7, #11]

	uint8_t flag = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	75fb      	strb	r3, [r7, #23]

	if (*firstunused == NONEXT )            //wenn es keinen freien Platz in der prio_list gibt,
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2bff      	cmp	r3, #255	@ 0xff
 800097c:	d102      	bne.n	8000984 <priolist_push+0x22>
	{
		flag = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	75fb      	strb	r3, [r7, #23]
 8000982:	e034      	b.n	80009ee <priolist_push+0x8c>
	}
	else
	{
		switch (priolevel_data)
 8000984:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000988:	2b02      	cmp	r3, #2
 800098a:	d022      	beq.n	80009d2 <priolist_push+0x70>
 800098c:	2b02      	cmp	r3, #2
 800098e:	dc2e      	bgt.n	80009ee <priolist_push+0x8c>
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <priolist_push+0x38>
 8000994:	2b01      	cmp	r3, #1
 8000996:	d00e      	beq.n	80009b6 <priolist_push+0x54>
 8000998:	e029      	b.n	80009ee <priolist_push+0x8c>
		{
			case  PRIO_LEVEL0:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL0);
 800099a:	7af9      	ldrb	r1, [r7, #11]
 800099c:	2300      	movs	r3, #0
 800099e:	9301      	str	r3, [sp, #4]
 80009a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f000 f824 	bl	80009f8 <priolist_node_insert>
			flag = 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	75fb      	strb	r3, [r7, #23]
			break;
 80009b4:	e01b      	b.n	80009ee <priolist_push+0x8c>
			case  PRIO_LEVEL1:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL1);
 80009b6:	7af9      	ldrb	r1, [r7, #11]
 80009b8:	2301      	movs	r3, #1
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f000 f816 	bl	80009f8 <priolist_node_insert>
			flag = 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	75fb      	strb	r3, [r7, #23]
			break;
 80009d0:	e00d      	b.n	80009ee <priolist_push+0x8c>
			case  PRIO_LEVEL2:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL2);
 80009d2:	7af9      	ldrb	r1, [r7, #11]
 80009d4:	2302      	movs	r3, #2
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f000 f808 	bl	80009f8 <priolist_node_insert>
			flag = 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	75fb      	strb	r3, [r7, #23]
			break;
 80009ec:	bf00      	nop
		};
	};
	return flag;
 80009ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <priolist_node_insert>:

void priolist_node_insert(priority_item prio_list[], uint8_t priolist_length,  uint8_t priolevel_header[], uint8_t *unused_list, uint8_t stackindex, uint8_t priolevel)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	460b      	mov	r3, r1
 8000a06:	72fb      	strb	r3, [r7, #11]
	uint8_t act_index ;
	uint8_t last;

	act_index = *unused_list;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	75bb      	strb	r3, [r7, #22]
	*unused_list = prio_list[act_index].next;
 8000a0e:	7dbb      	ldrb	r3, [r7, #22]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4413      	add	r3, r2
 8000a16:	785a      	ldrb	r2, [r3, #1]
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	701a      	strb	r2, [r3, #0]
	if (priolevel_header[priolevel] == NONEXT)                //Wenn die Prioritätsliste mit dem Level0 noch leer ist,
 8000a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2bff      	cmp	r3, #255	@ 0xff
 8000a28:	d112      	bne.n	8000a50 <priolist_node_insert+0x58>
	{

		prio_list[act_index].stackindex = stackindex;
 8000a2a:	7dbb      	ldrb	r3, [r7, #22]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	4413      	add	r3, r2
 8000a32:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a36:	701a      	strb	r2, [r3, #0]
		priolevel_header[priolevel] = act_index;
 8000a38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	4413      	add	r3, r2
 8000a40:	7dba      	ldrb	r2, [r7, #22]
 8000a42:	701a      	strb	r2, [r3, #0]
		prio_list[act_index].next = NONEXT;
 8000a44:	7dbb      	ldrb	r3, [r7, #22]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	22ff      	movs	r2, #255	@ 0xff
 8000a4e:	705a      	strb	r2, [r3, #1]
	};
	if (priolevel_header[priolevel] < priolist_length)    //Wenn die Prioritätsliste schon existiert,
 8000a50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	7afa      	ldrb	r2, [r7, #11]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d926      	bls.n	8000aae <priolist_node_insert+0xb6>
	{
		prio_list[act_index].stackindex = stackindex;
 8000a60:	7dbb      	ldrb	r3, [r7, #22]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a6c:	701a      	strb	r2, [r3, #0]
		last =  priolevel_header[priolevel];                  //das erste Element der Prioritätsliste
 8000a6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	75fb      	strb	r3, [r7, #23]
		while (prio_list[last].next != NONEXT)               //Suche den Ende der Prioritätsliste, um das neue Element hineinzufügen
 8000a7a:	e005      	b.n	8000a88 <priolist_node_insert+0x90>
		{
			last = prio_list[last].next;
 8000a7c:	7dfb      	ldrb	r3, [r7, #23]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	785b      	ldrb	r3, [r3, #1]
 8000a86:	75fb      	strb	r3, [r7, #23]
		while (prio_list[last].next != NONEXT)               //Suche den Ende der Prioritätsliste, um das neue Element hineinzufügen
 8000a88:	7dfb      	ldrb	r3, [r7, #23]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	785b      	ldrb	r3, [r3, #1]
 8000a92:	2bff      	cmp	r3, #255	@ 0xff
 8000a94:	d1f2      	bne.n	8000a7c <priolist_node_insert+0x84>
		};
		prio_list[last].next = act_index;
 8000a96:	7dfb      	ldrb	r3, [r7, #23]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	7dba      	ldrb	r2, [r7, #22]
 8000aa0:	705a      	strb	r2, [r3, #1]
		prio_list[act_index].next = NONEXT;
 8000aa2:	7dbb      	ldrb	r3, [r7, #22]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	22ff      	movs	r2, #255	@ 0xff
 8000aac:	705a      	strb	r2, [r3, #1]
	};
}
 8000aae:	bf00      	nop
 8000ab0:	371c      	adds	r7, #28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <priolist_pop>:

uint8_t priolist_pop (priority_item prio_list[], uint8_t priolevel_header[], uint8_t *firstunused, uint8_t priolevel_data)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b087      	sub	sp, #28
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	70fb      	strb	r3, [r7, #3]
	uint8_t stack_index = NONEXT ;  //ungültige Wert, wenn die Prioritätsliste noch leer oder ein Fehler
 8000ac8:	23ff      	movs	r3, #255	@ 0xff
 8000aca:	75fb      	strb	r3, [r7, #23]

	if (priolevel_header[priolevel_data] != NONEXT)
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2bff      	cmp	r3, #255	@ 0xff
 8000ad6:	d01d      	beq.n	8000b14 <priolist_pop+0x5a>
	{
		uint8_t act_index = priolevel_header[priolevel_data];
 8000ad8:	78fb      	ldrb	r3, [r7, #3]
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	4413      	add	r3, r2
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	75bb      	strb	r3, [r7, #22]
		stack_index = prio_list[act_index].stackindex;
 8000ae2:	7dbb      	ldrb	r3, [r7, #22]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	4413      	add	r3, r2
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	75fb      	strb	r3, [r7, #23]
		priolevel_header[priolevel_data] = prio_list[act_index].next;
 8000aee:	7dbb      	ldrb	r3, [r7, #22]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	441a      	add	r2, r3
 8000af6:	78fb      	ldrb	r3, [r7, #3]
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	440b      	add	r3, r1
 8000afc:	7852      	ldrb	r2, [r2, #1]
 8000afe:	701a      	strb	r2, [r3, #0]

		prio_list[act_index].next = *firstunused;
 8000b00:	7dbb      	ldrb	r3, [r7, #22]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	7812      	ldrb	r2, [r2, #0]
 8000b0c:	705a      	strb	r2, [r3, #1]
		*firstunused = act_index;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7dba      	ldrb	r2, [r7, #22]
 8000b12:	701a      	strb	r2, [r3, #0]
	};

	return stack_index;
 8000b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	371c      	adds	r7, #28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <remote_init>:
void output_ascii(int32_t);
void Binary_Search(uint8_t ncmd, char* key, uint16_t *cmdindex);
void output_ascii_cmdack(uint8_t verbose_flg, uint8_t crlf_flg, uint8_t cmd_ack);

// ---- public API ----
void remote_init(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	nzeichen = 0;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <remote_init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
	state = RMT_WAIT_FOR_PAKET_START;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <remote_init+0x50>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
	lengthRx = 0;
 8000b34:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <remote_init+0x54>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
	dleFlag = 0;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <remote_init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <remote_init+0x5c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
	reply_ready = 0;
 8000b46:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <remote_init+0x60>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
	memset((void*) msg, 0, sizeof(msg));
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	2100      	movs	r1, #0
 8000b50:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <remote_init+0x64>)
 8000b52:	f006 fbf7 	bl	8007344 <memset>
	memset(bufferRx, 0, sizeof(bufferRx));
 8000b56:	220f      	movs	r2, #15
 8000b58:	2100      	movs	r1, #0
 8000b5a:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <remote_init+0x68>)
 8000b5c:	f006 fbf2 	bl	8007344 <memset>
	memset(&last_reply, 0, sizeof(last_reply));
 8000b60:	2204      	movs	r2, #4
 8000b62:	2100      	movs	r1, #0
 8000b64:	480a      	ldr	r0, [pc, #40]	@ (8000b90 <remote_init+0x6c>)
 8000b66:	f006 fbed 	bl	8007344 <memset>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000ff 	.word	0x200000ff
 8000b74:	20000000 	.word	0x20000000
 8000b78:	2000010f 	.word	0x2000010f
 8000b7c:	20000110 	.word	0x20000110
 8000b80:	20000111 	.word	0x20000111
 8000b84:	20000112 	.word	0x20000112
 8000b88:	200000f0 	.word	0x200000f0
 8000b8c:	20000100 	.word	0x20000100
 8000b90:	20000114 	.word	0x20000114

08000b94 <remote_sero_get>:

// Pull bytes from UART4 RX ring into msg[] and feed parser
void remote_sero_get(void)
{
 8000b94:	b598      	push	{r3, r4, r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	nzeichen = 0;
 8000b98:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <remote_sero_get+0x54>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
	while ((rb_rx_used(&usart3_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8000b9e:	e00e      	b.n	8000bbe <remote_sero_get+0x2a>
		msg[nzeichen++] = (uint8_t) uartRB_Getc(&usart3_rb);   // legacy getc()
 8000ba0:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <remote_sero_get+0x54>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	b2d1      	uxtb	r1, r2
 8000baa:	4a0f      	ldr	r2, [pc, #60]	@ (8000be8 <remote_sero_get+0x54>)
 8000bac:	7011      	strb	r1, [r2, #0]
 8000bae:	461c      	mov	r4, r3
 8000bb0:	480e      	ldr	r0, [pc, #56]	@ (8000bec <remote_sero_get+0x58>)
 8000bb2:	f001 fd39 	bl	8002628 <uartRB_Getc>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <remote_sero_get+0x5c>)
 8000bbc:	551a      	strb	r2, [r3, r4]
	while ((rb_rx_used(&usart3_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8000bbe:	480b      	ldr	r0, [pc, #44]	@ (8000bec <remote_sero_get+0x58>)
 8000bc0:	f001 fc71 	bl	80024a6 <rb_rx_used>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	dd04      	ble.n	8000bd4 <remote_sero_get+0x40>
 8000bca:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <remote_sero_get+0x54>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b0d      	cmp	r3, #13
 8000bd2:	d9e5      	bls.n	8000ba0 <remote_sero_get+0xc>
	}
	if (nzeichen) parse_ascii();
 8000bd4:	4b04      	ldr	r3, [pc, #16]	@ (8000be8 <remote_sero_get+0x54>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <remote_sero_get+0x4e>
 8000bde:	f000 f94d 	bl	8000e7c <parse_ascii>
}
 8000be2:	bf00      	nop
 8000be4:	bd98      	pop	{r3, r4, r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000ff 	.word	0x200000ff
 8000bec:	20000a08 	.word	0x20000a08
 8000bf0:	200000f0 	.word	0x200000f0

08000bf4 <gb_sero_get>:

// Gasbox (UART4, binary)
void gb_sero_get(void)
{
 8000bf4:	b598      	push	{r3, r4, r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    nzeichen = 0;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <gb_sero_get+0x54>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
    while ((rb_rx_used(&uart4_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8000bfe:	e00e      	b.n	8000c1e <gb_sero_get+0x2a>
        msg[nzeichen++] = (uint8_t)uartRB_Getc(&uart4_rb);
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <gb_sero_get+0x54>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	b2d1      	uxtb	r1, r2
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c48 <gb_sero_get+0x54>)
 8000c0c:	7011      	strb	r1, [r2, #0]
 8000c0e:	461c      	mov	r4, r3
 8000c10:	480e      	ldr	r0, [pc, #56]	@ (8000c4c <gb_sero_get+0x58>)
 8000c12:	f001 fd09 	bl	8002628 <uartRB_Getc>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <gb_sero_get+0x5c>)
 8000c1c:	551a      	strb	r2, [r3, r4]
    while ((rb_rx_used(&uart4_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8000c1e:	480b      	ldr	r0, [pc, #44]	@ (8000c4c <gb_sero_get+0x58>)
 8000c20:	f001 fc41 	bl	80024a6 <rb_rx_used>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	dd04      	ble.n	8000c34 <gb_sero_get+0x40>
 8000c2a:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <gb_sero_get+0x54>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b0d      	cmp	r3, #13
 8000c32:	d9e5      	bls.n	8000c00 <gb_sero_get+0xc>
    }
    if (nzeichen) parse_binary();
 8000c34:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <gb_sero_get+0x54>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <gb_sero_get+0x4e>
 8000c3e:	f000 f809 	bl	8000c54 <parse_binary>
}
 8000c42:	bf00      	nop
 8000c44:	bd98      	pop	{r3, r4, r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000ff 	.word	0x200000ff
 8000c4c:	20000558 	.word	0x20000558
 8000c50:	200000f0 	.word	0x200000f0

08000c54 <parse_binary>:
	reply_ready = 0;
	return true;
}

// ---- parser  ----
static void parse_binary(void) {
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
	uint8_t data;
	uint8_t ptr = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	71fb      	strb	r3, [r7, #7]

	do {
		switch (state) {
 8000c5e:	4b7e      	ldr	r3, [pc, #504]	@ (8000e58 <parse_binary+0x204>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	f000 80a8 	beq.w	8000db8 <parse_binary+0x164>
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	f300 80e6 	bgt.w	8000e3a <parse_binary+0x1e6>
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d030      	beq.n	8000cd4 <parse_binary+0x80>
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	f000 8098 	beq.w	8000da8 <parse_binary+0x154>
 8000c78:	e0df      	b.n	8000e3a <parse_binary+0x1e6>
		case RMT_WAIT_FOR_PAKET_START: {
			// scan for DLE 'S'
			while (ptr < nzeichen) {
				data = msg[ptr++];
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	71fa      	strb	r2, [r7, #7]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b76      	ldr	r3, [pc, #472]	@ (8000e5c <parse_binary+0x208>)
 8000c84:	5c9b      	ldrb	r3, [r3, r2]
 8000c86:	703b      	strb	r3, [r7, #0]
				if (dleFlag) {
 8000c88:	4b75      	ldr	r3, [pc, #468]	@ (8000e60 <parse_binary+0x20c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d01b      	beq.n	8000cc8 <parse_binary+0x74>
					// second control char after DLE
					if (data == RMT_DLE) {
 8000c90:	783b      	ldrb	r3, [r7, #0]
 8000c92:	2b3d      	cmp	r3, #61	@ 0x3d
 8000c94:	d103      	bne.n	8000c9e <parse_binary+0x4a>
						// interpret as literal DLE
						dleFlag = 0;
 8000c96:	4b72      	ldr	r3, [pc, #456]	@ (8000e60 <parse_binary+0x20c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e01a      	b.n	8000cd4 <parse_binary+0x80>
						// (no payload yet in WAIT state)
					} else if (data == RMT_SOT) {
 8000c9e:	783b      	ldrb	r3, [r7, #0]
 8000ca0:	2b53      	cmp	r3, #83	@ 0x53
 8000ca2:	d10d      	bne.n	8000cc0 <parse_binary+0x6c>
						// start of frame
						lengthRx = 0;
 8000ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8000e64 <parse_binary+0x210>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
						checksum = 0;
 8000caa:	4b6f      	ldr	r3, [pc, #444]	@ (8000e68 <parse_binary+0x214>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000cb0:	4b6b      	ldr	r3, [pc, #428]	@ (8000e60 <parse_binary+0x20c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
						state = RMT_READ_PAKET;
 8000cb6:	4b68      	ldr	r3, [pc, #416]	@ (8000e58 <parse_binary+0x204>)
 8000cb8:	2202      	movs	r2, #2
 8000cba:	701a      	strb	r2, [r3, #0]
						break;
 8000cbc:	bf00      	nop
					if (data == RMT_DLE)
						dleFlag = 1;
				}
			}
		}
			break;
 8000cbe:	e0bc      	b.n	8000e3a <parse_binary+0x1e6>
						dleFlag = 0;
 8000cc0:	4b67      	ldr	r3, [pc, #412]	@ (8000e60 <parse_binary+0x20c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	e005      	b.n	8000cd4 <parse_binary+0x80>
					if (data == RMT_DLE)
 8000cc8:	783b      	ldrb	r3, [r7, #0]
 8000cca:	2b3d      	cmp	r3, #61	@ 0x3d
 8000ccc:	d102      	bne.n	8000cd4 <parse_binary+0x80>
						dleFlag = 1;
 8000cce:	4b64      	ldr	r3, [pc, #400]	@ (8000e60 <parse_binary+0x20c>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
			while (ptr < nzeichen) {
 8000cd4:	4b65      	ldr	r3, [pc, #404]	@ (8000e6c <parse_binary+0x218>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	79fa      	ldrb	r2, [r7, #7]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d3cc      	bcc.n	8000c7a <parse_binary+0x26>
			break;
 8000ce0:	e0ab      	b.n	8000e3a <parse_binary+0x1e6>

		case RMT_READ_PAKET: {
			while (ptr < nzeichen) {
				data = msg[ptr++];
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	1c5a      	adds	r2, r3, #1
 8000ce6:	71fa      	strb	r2, [r7, #7]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b5c      	ldr	r3, [pc, #368]	@ (8000e5c <parse_binary+0x208>)
 8000cec:	5c9b      	ldrb	r3, [r3, r2]
 8000cee:	703b      	strb	r3, [r7, #0]

				// avoid runaway frames
				if (lengthRx > RMT_MAX_PAKET_LENGTH) {
 8000cf0:	4b5c      	ldr	r3, [pc, #368]	@ (8000e64 <parse_binary+0x210>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b0e      	cmp	r3, #14
 8000cf6:	d906      	bls.n	8000d06 <parse_binary+0xb2>
					dleFlag = 0;
 8000cf8:	4b59      	ldr	r3, [pc, #356]	@ (8000e60 <parse_binary+0x20c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
					state = RMT_WAIT_FOR_PAKET_START;
 8000cfe:	4b56      	ldr	r3, [pc, #344]	@ (8000e58 <parse_binary+0x204>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	701a      	strb	r2, [r3, #0]
					break;
 8000d04:	e057      	b.n	8000db6 <parse_binary+0x162>
				}

				if (dleFlag) {
 8000d06:	4b56      	ldr	r3, [pc, #344]	@ (8000e60 <parse_binary+0x20c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d034      	beq.n	8000d78 <parse_binary+0x124>
					if (data == RMT_DLE) {
 8000d0e:	783b      	ldrb	r3, [r7, #0]
 8000d10:	2b3d      	cmp	r3, #61	@ 0x3d
 8000d12:	d113      	bne.n	8000d3c <parse_binary+0xe8>
						// stuffed DLE as data
						dleFlag = 0;
 8000d14:	4b52      	ldr	r3, [pc, #328]	@ (8000e60 <parse_binary+0x20c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
						bufferRx[lengthRx++] = RMT_DLE;
 8000d1a:	4b52      	ldr	r3, [pc, #328]	@ (8000e64 <parse_binary+0x210>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	b2d1      	uxtb	r1, r2
 8000d22:	4a50      	ldr	r2, [pc, #320]	@ (8000e64 <parse_binary+0x210>)
 8000d24:	7011      	strb	r1, [r2, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b51      	ldr	r3, [pc, #324]	@ (8000e70 <parse_binary+0x21c>)
 8000d2a:	213d      	movs	r1, #61	@ 0x3d
 8000d2c:	5499      	strb	r1, [r3, r2]
						checksum += RMT_DLE;
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e68 <parse_binary+0x214>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	333d      	adds	r3, #61	@ 0x3d
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b4c      	ldr	r3, [pc, #304]	@ (8000e68 <parse_binary+0x214>)
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e035      	b.n	8000da8 <parse_binary+0x154>
					} else if (data == RMT_SOT) {
 8000d3c:	783b      	ldrb	r3, [r7, #0]
 8000d3e:	2b53      	cmp	r3, #83	@ 0x53
 8000d40:	d10c      	bne.n	8000d5c <parse_binary+0x108>
						// unexpected new start → restart frame
						lengthRx = 0;
 8000d42:	4b48      	ldr	r3, [pc, #288]	@ (8000e64 <parse_binary+0x210>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
						checksum = 0;
 8000d48:	4b47      	ldr	r3, [pc, #284]	@ (8000e68 <parse_binary+0x214>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000d4e:	4b44      	ldr	r3, [pc, #272]	@ (8000e60 <parse_binary+0x20c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
						state = RMT_READ_PAKET;
 8000d54:	4b40      	ldr	r3, [pc, #256]	@ (8000e58 <parse_binary+0x204>)
 8000d56:	2202      	movs	r2, #2
 8000d58:	701a      	strb	r2, [r3, #0]
						break;
 8000d5a:	e02c      	b.n	8000db6 <parse_binary+0x162>
					} else if (data == RMT_EOT) {
 8000d5c:	783b      	ldrb	r3, [r7, #0]
 8000d5e:	2b45      	cmp	r3, #69	@ 0x45
 8000d60:	d106      	bne.n	8000d70 <parse_binary+0x11c>
						// proper trailer -> parse
						state = RMT_PARSE_PAKET;
 8000d62:	4b3d      	ldr	r3, [pc, #244]	@ (8000e58 <parse_binary+0x204>)
 8000d64:	2203      	movs	r2, #3
 8000d66:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000d68:	4b3d      	ldr	r3, [pc, #244]	@ (8000e60 <parse_binary+0x20c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
						break;
 8000d6e:	e022      	b.n	8000db6 <parse_binary+0x162>
					} else {
						dleFlag = 0; // unknown after DLE -> ignore
 8000d70:	4b3b      	ldr	r3, [pc, #236]	@ (8000e60 <parse_binary+0x20c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	e017      	b.n	8000da8 <parse_binary+0x154>
					}
				} else {
					if (data == RMT_DLE) {
 8000d78:	783b      	ldrb	r3, [r7, #0]
 8000d7a:	2b3d      	cmp	r3, #61	@ 0x3d
 8000d7c:	d103      	bne.n	8000d86 <parse_binary+0x132>
						dleFlag = 1;            // next is control
 8000d7e:	4b38      	ldr	r3, [pc, #224]	@ (8000e60 <parse_binary+0x20c>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
 8000d84:	e010      	b.n	8000da8 <parse_binary+0x154>
					} else {
						bufferRx[lengthRx++] = data;
 8000d86:	4b37      	ldr	r3, [pc, #220]	@ (8000e64 <parse_binary+0x210>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	b2d1      	uxtb	r1, r2
 8000d8e:	4a35      	ldr	r2, [pc, #212]	@ (8000e64 <parse_binary+0x210>)
 8000d90:	7011      	strb	r1, [r2, #0]
 8000d92:	4619      	mov	r1, r3
 8000d94:	4a36      	ldr	r2, [pc, #216]	@ (8000e70 <parse_binary+0x21c>)
 8000d96:	783b      	ldrb	r3, [r7, #0]
 8000d98:	5453      	strb	r3, [r2, r1]
						checksum += data;
 8000d9a:	4b33      	ldr	r3, [pc, #204]	@ (8000e68 <parse_binary+0x214>)
 8000d9c:	781a      	ldrb	r2, [r3, #0]
 8000d9e:	783b      	ldrb	r3, [r7, #0]
 8000da0:	4413      	add	r3, r2
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	4b30      	ldr	r3, [pc, #192]	@ (8000e68 <parse_binary+0x214>)
 8000da6:	701a      	strb	r2, [r3, #0]
			while (ptr < nzeichen) {
 8000da8:	4b30      	ldr	r3, [pc, #192]	@ (8000e6c <parse_binary+0x218>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	79fa      	ldrb	r2, [r7, #7]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d396      	bcc.n	8000ce2 <parse_binary+0x8e>
					}
				}
			}
		}
			break;
 8000db4:	e041      	b.n	8000e3a <parse_binary+0x1e6>
 8000db6:	e040      	b.n	8000e3a <parse_binary+0x1e6>

		case RMT_PARSE_PAKET: {
			// Expect 4 payload bytes + 1 checksum (net length 5)
			if (lengthRx == 5) {
 8000db8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <parse_binary+0x210>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b05      	cmp	r3, #5
 8000dbe:	d12f      	bne.n	8000e20 <parse_binary+0x1cc>
				uint8_t cmd = bufferRx[0];
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e70 <parse_binary+0x21c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	71bb      	strb	r3, [r7, #6]
				uint8_t status = bufferRx[1];
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <parse_binary+0x21c>)
 8000dc8:	785b      	ldrb	r3, [r3, #1]
 8000dca:	717b      	strb	r3, [r7, #5]
				uint8_t pH = bufferRx[2];
 8000dcc:	4b28      	ldr	r3, [pc, #160]	@ (8000e70 <parse_binary+0x21c>)
 8000dce:	789b      	ldrb	r3, [r3, #2]
 8000dd0:	713b      	strb	r3, [r7, #4]
				uint8_t pL = bufferRx[3];
 8000dd2:	4b27      	ldr	r3, [pc, #156]	@ (8000e70 <parse_binary+0x21c>)
 8000dd4:	78db      	ldrb	r3, [r3, #3]
 8000dd6:	70fb      	strb	r3, [r7, #3]
				uint8_t cks = bufferRx[4];
 8000dd8:	4b25      	ldr	r3, [pc, #148]	@ (8000e70 <parse_binary+0x21c>)
 8000dda:	791b      	ldrb	r3, [r3, #4]
 8000ddc:	70bb      	strb	r3, [r7, #2]

				// checksum covers only the 4 payload bytes
				uint8_t sum = (uint8_t) (cmd + status + pH + pL);
 8000dde:	79ba      	ldrb	r2, [r7, #6]
 8000de0:	797b      	ldrb	r3, [r7, #5]
 8000de2:	4413      	add	r3, r2
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	793b      	ldrb	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	78fb      	ldrb	r3, [r7, #3]
 8000dee:	4413      	add	r3, r2
 8000df0:	707b      	strb	r3, [r7, #1]
				if (sum == cks) {
 8000df2:	787a      	ldrb	r2, [r7, #1]
 8000df4:	78bb      	ldrb	r3, [r7, #2]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d112      	bne.n	8000e20 <parse_binary+0x1cc>
					last_reply.cmd = cmd;
 8000dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8000e74 <parse_binary+0x220>)
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	7013      	strb	r3, [r2, #0]
					last_reply.status = status;
 8000e00:	4a1c      	ldr	r2, [pc, #112]	@ (8000e74 <parse_binary+0x220>)
 8000e02:	797b      	ldrb	r3, [r7, #5]
 8000e04:	7053      	strb	r3, [r2, #1]
					last_reply.value = ((uint16_t) pH << 8) | pL;
 8000e06:	793b      	ldrb	r3, [r7, #4]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b21a      	sxth	r2, r3
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <parse_binary+0x220>)
 8000e18:	805a      	strh	r2, [r3, #2]
					reply_ready = 1;            // make available to caller
 8000e1a:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <parse_binary+0x224>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
				}
				// else: checksum wrong -> ignore silently for now -- TODO: ERROR FLAG
			}
			// reset for next frame
			state = RMT_WAIT_FOR_PAKET_START;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <parse_binary+0x204>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
			lengthRx = 0;
 8000e26:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <parse_binary+0x210>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
			checksum = 0;
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <parse_binary+0x214>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
			dleFlag = 0;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <parse_binary+0x20c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
		}
			break;
 8000e38:	bf00      	nop
		}
	} while (ptr < nzeichen);
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <parse_binary+0x218>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	79fa      	ldrb	r2, [r7, #7]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	f4ff af0b 	bcc.w	8000c5e <parse_binary+0xa>
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	200000f0 	.word	0x200000f0
 8000e60:	20000110 	.word	0x20000110
 8000e64:	2000010f 	.word	0x2000010f
 8000e68:	20000111 	.word	0x20000111
 8000e6c:	200000ff 	.word	0x200000ff
 8000e70:	20000100 	.word	0x20000100
 8000e74:	20000114 	.word	0x20000114
 8000e78:	20000112 	.word	0x20000112

08000e7c <parse_ascii>:

// das Paket in ASCII-Format analysieren und das Paket in den Stack einfügen.
void parse_ascii(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
	volatile static uint8_t pflag=0;
	volatile static uint8_t eflag=0;

	static uint8_t negativ_zahl = 0;

	uint8_t ptr=0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	75fb      	strb	r3, [r7, #23]
	uint16_t cmd_index = BINARY_INDEX_MAX;
 8000e86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e8a:	82bb      	strh	r3, [r7, #20]


	do
	{
		// wenn es ein Zeichen in UART1 Buffer gibt und die Automate nicht im Bearbeitungszustand ist
		if ((nzeichen>0) && (a_state != proc_cmd))
 8000e8c:	4b9c      	ldr	r3, [pc, #624]	@ (8001100 <parse_ascii+0x284>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d01d      	beq.n	8000ed2 <parse_ascii+0x56>
 8000e96:	4b9b      	ldr	r3, [pc, #620]	@ (8001104 <parse_ascii+0x288>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	d018      	beq.n	8000ed2 <parse_ascii+0x56>
		{	nc=msg[ptr++];							// hole ein Zeichen aus msg-buffer
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
 8000ea2:	1c5a      	adds	r2, r3, #1
 8000ea4:	75fa      	strb	r2, [r7, #23]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b97      	ldr	r3, [pc, #604]	@ (8001108 <parse_ascii+0x28c>)
 8000eaa:	5c9b      	ldrb	r3, [r3, r2]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b97      	ldr	r3, [pc, #604]	@ (800110c <parse_ascii+0x290>)
 8000eb0:	701a      	strb	r2, [r3, #0]
			if(echo==1)								// Wenn die Kommunikationsmode im Echo-Mode ist, wird es das Zeichen direkt wieder zurückgeben.
 8000eb2:	4b97      	ldr	r3, [pc, #604]	@ (8001110 <parse_ascii+0x294>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d10d      	bne.n	8000ed8 <parse_ascii+0x5c>
			{
				char1[0]=nc;
 8000ebc:	4b93      	ldr	r3, [pc, #588]	@ (800110c <parse_ascii+0x290>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b94      	ldr	r3, [pc, #592]	@ (8001114 <parse_ascii+0x298>)
 8000ec4:	701a      	strb	r2, [r3, #0]
				uartRB_Put(&usart3_rb,char1, 1);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4992      	ldr	r1, [pc, #584]	@ (8001114 <parse_ascii+0x298>)
 8000eca:	4893      	ldr	r0, [pc, #588]	@ (8001118 <parse_ascii+0x29c>)
 8000ecc:	f001 fb58 	bl	8002580 <uartRB_Put>
			if(echo==1)								// Wenn die Kommunikationsmode im Echo-Mode ist, wird es das Zeichen direkt wieder zurückgeben.
 8000ed0:	e002      	b.n	8000ed8 <parse_ascii+0x5c>
			}
		}
		else
		nc = 0;
 8000ed2:	4b8e      	ldr	r3, [pc, #568]	@ (800110c <parse_ascii+0x290>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]

		if(strlen(cmd) > 22)					 // Ascii-Kommando darf nicht länger als 22 Zeichen.
 8000ed8:	4890      	ldr	r0, [pc, #576]	@ (800111c <parse_ascii+0x2a0>)
 8000eda:	f7ff f9ab 	bl	8000234 <strlen>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b16      	cmp	r3, #22
 8000ee2:	d90e      	bls.n	8000f02 <parse_ascii+0x86>
		{
			strcpy(cmd,"");
 8000ee4:	4b8d      	ldr	r3, [pc, #564]	@ (800111c <parse_ascii+0x2a0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
			val=0;
 8000eea:	4b8d      	ldr	r3, [pc, #564]	@ (8001120 <parse_ascii+0x2a4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
			pflag=0;
 8000ef0:	4b8c      	ldr	r3, [pc, #560]	@ (8001124 <parse_ascii+0x2a8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
			eflag=0;
 8000ef6:	4b8c      	ldr	r3, [pc, #560]	@ (8001128 <parse_ascii+0x2ac>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
			a_state = get_cmd;
 8000efc:	4b81      	ldr	r3, [pc, #516]	@ (8001104 <parse_ascii+0x288>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
		}

		switch(a_state)
 8000f02:	4b80      	ldr	r3, [pc, #512]	@ (8001104 <parse_ascii+0x288>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	f200 8340 	bhi.w	8001590 <parse_ascii+0x714>
 8000f10:	a201      	add	r2, pc, #4	@ (adr r2, 8000f18 <parse_ascii+0x9c>)
 8000f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f16:	bf00      	nop
 8000f18:	08000f29 	.word	0x08000f29
 8000f1c:	0800105d 	.word	0x0800105d
 8000f20:	08001139 	.word	0x08001139
 8000f24:	080011eb 	.word	0x080011eb
		{
			case get_cmd:
			if (((nc>=65) && (nc<=90)) || ((nc>=48) && (nc<=57)) || (nc==58) || (nc==63))
 8000f28:	4b78      	ldr	r3, [pc, #480]	@ (800110c <parse_ascii+0x290>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b40      	cmp	r3, #64	@ 0x40
 8000f30:	d904      	bls.n	8000f3c <parse_ascii+0xc0>
 8000f32:	4b76      	ldr	r3, [pc, #472]	@ (800110c <parse_ascii+0x290>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b5a      	cmp	r3, #90	@ 0x5a
 8000f3a:	d913      	bls.n	8000f64 <parse_ascii+0xe8>
 8000f3c:	4b73      	ldr	r3, [pc, #460]	@ (800110c <parse_ascii+0x290>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f44:	d904      	bls.n	8000f50 <parse_ascii+0xd4>
 8000f46:	4b71      	ldr	r3, [pc, #452]	@ (800110c <parse_ascii+0x290>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b39      	cmp	r3, #57	@ 0x39
 8000f4e:	d909      	bls.n	8000f64 <parse_ascii+0xe8>
 8000f50:	4b6e      	ldr	r3, [pc, #440]	@ (800110c <parse_ascii+0x290>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b3a      	cmp	r3, #58	@ 0x3a
 8000f58:	d004      	beq.n	8000f64 <parse_ascii+0xe8>
 8000f5a:	4b6c      	ldr	r3, [pc, #432]	@ (800110c <parse_ascii+0x290>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f62:	d109      	bne.n	8000f78 <parse_ascii+0xfc>
			{ 	char1[0] = nc;				//verkette char1 an cmd
 8000f64:	4b69      	ldr	r3, [pc, #420]	@ (800110c <parse_ascii+0x290>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b6a      	ldr	r3, [pc, #424]	@ (8001114 <parse_ascii+0x298>)
 8000f6c:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 8000f6e:	4969      	ldr	r1, [pc, #420]	@ (8001114 <parse_ascii+0x298>)
 8000f70:	486a      	ldr	r0, [pc, #424]	@ (800111c <parse_ascii+0x2a0>)
 8000f72:	f006 f9ef 	bl	8007354 <strcat>
 8000f76:	e070      	b.n	800105a <parse_ascii+0x1de>
			}
			else if ((nc == 46) && (sloppy == 1))
 8000f78:	4b64      	ldr	r3, [pc, #400]	@ (800110c <parse_ascii+0x290>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f80:	d10c      	bne.n	8000f9c <parse_ascii+0x120>
 8000f82:	4b6a      	ldr	r3, [pc, #424]	@ (800112c <parse_ascii+0x2b0>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d107      	bne.n	8000f9c <parse_ascii+0x120>
			{ 	char1[0] = 58;
 8000f8c:	4b61      	ldr	r3, [pc, #388]	@ (8001114 <parse_ascii+0x298>)
 8000f8e:	223a      	movs	r2, #58	@ 0x3a
 8000f90:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 8000f92:	4960      	ldr	r1, [pc, #384]	@ (8001114 <parse_ascii+0x298>)
 8000f94:	4861      	ldr	r0, [pc, #388]	@ (800111c <parse_ascii+0x2a0>)
 8000f96:	f006 f9dd 	bl	8007354 <strcat>
 8000f9a:	e05e      	b.n	800105a <parse_ascii+0x1de>
			}
			else if ((nc == 35)  && (sloppy == 1))
 8000f9c:	4b5b      	ldr	r3, [pc, #364]	@ (800110c <parse_ascii+0x290>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b23      	cmp	r3, #35	@ 0x23
 8000fa4:	d10c      	bne.n	8000fc0 <parse_ascii+0x144>
 8000fa6:	4b61      	ldr	r3, [pc, #388]	@ (800112c <parse_ascii+0x2b0>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d107      	bne.n	8000fc0 <parse_ascii+0x144>
			{ 	char1[0] = 63;
 8000fb0:	4b58      	ldr	r3, [pc, #352]	@ (8001114 <parse_ascii+0x298>)
 8000fb2:	223f      	movs	r2, #63	@ 0x3f
 8000fb4:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 8000fb6:	4957      	ldr	r1, [pc, #348]	@ (8001114 <parse_ascii+0x298>)
 8000fb8:	4858      	ldr	r0, [pc, #352]	@ (800111c <parse_ascii+0x2a0>)
 8000fba:	f006 f9cb 	bl	8007354 <strcat>
 8000fbe:	e04c      	b.n	800105a <parse_ascii+0x1de>
			}
			else if ((nc>=97) && (nc<=122))
 8000fc0:	4b52      	ldr	r3, [pc, #328]	@ (800110c <parse_ascii+0x290>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b60      	cmp	r3, #96	@ 0x60
 8000fc8:	d910      	bls.n	8000fec <parse_ascii+0x170>
 8000fca:	4b50      	ldr	r3, [pc, #320]	@ (800110c <parse_ascii+0x290>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b7a      	cmp	r3, #122	@ 0x7a
 8000fd2:	d80b      	bhi.n	8000fec <parse_ascii+0x170>
			{  char1[0] = (nc - 32);
 8000fd4:	4b4d      	ldr	r3, [pc, #308]	@ (800110c <parse_ascii+0x290>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	3b20      	subs	r3, #32
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b4d      	ldr	r3, [pc, #308]	@ (8001114 <parse_ascii+0x298>)
 8000fe0:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 8000fe2:	494c      	ldr	r1, [pc, #304]	@ (8001114 <parse_ascii+0x298>)
 8000fe4:	484d      	ldr	r0, [pc, #308]	@ (800111c <parse_ascii+0x2a0>)
 8000fe6:	f006 f9b5 	bl	8007354 <strcat>
 8000fea:	e036      	b.n	800105a <parse_ascii+0x1de>
			}
			else if (nc == 32)
 8000fec:	4b47      	ldr	r3, [pc, #284]	@ (800110c <parse_ascii+0x290>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b20      	cmp	r3, #32
 8000ff4:	d10b      	bne.n	800100e <parse_ascii+0x192>
			{
				if(strlen(cmd) > 0)
 8000ff6:	4b49      	ldr	r3, [pc, #292]	@ (800111c <parse_ascii+0x2a0>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 82cc 	beq.w	8001598 <parse_ascii+0x71c>
				{
					val = 0;
 8001000:	4b47      	ldr	r3, [pc, #284]	@ (8001120 <parse_ascii+0x2a4>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
					a_state = get_sign;
 8001006:	4b3f      	ldr	r3, [pc, #252]	@ (8001104 <parse_ascii+0x288>)
 8001008:	2202      	movs	r2, #2
 800100a:	701a      	strb	r2, [r3, #0]
				a_state = proc_cmd;
			}
			else
			{ if(nc != 0) strcat(cmd, "*");
			}
			break;
 800100c:	e2c4      	b.n	8001598 <parse_ascii+0x71c>
			else if ((nc == 59) || ((nc==13)  && (sloppy == 1)))
 800100e:	4b3f      	ldr	r3, [pc, #252]	@ (800110c <parse_ascii+0x290>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b3b      	cmp	r3, #59	@ 0x3b
 8001016:	d009      	beq.n	800102c <parse_ascii+0x1b0>
 8001018:	4b3c      	ldr	r3, [pc, #240]	@ (800110c <parse_ascii+0x290>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b0d      	cmp	r3, #13
 8001020:	d108      	bne.n	8001034 <parse_ascii+0x1b8>
 8001022:	4b42      	ldr	r3, [pc, #264]	@ (800112c <parse_ascii+0x2b0>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b01      	cmp	r3, #1
 800102a:	d103      	bne.n	8001034 <parse_ascii+0x1b8>
				a_state = proc_cmd;
 800102c:	4b35      	ldr	r3, [pc, #212]	@ (8001104 <parse_ascii+0x288>)
 800102e:	2204      	movs	r2, #4
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e012      	b.n	800105a <parse_ascii+0x1de>
			{ if(nc != 0) strcat(cmd, "*");
 8001034:	4b35      	ldr	r3, [pc, #212]	@ (800110c <parse_ascii+0x290>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 82ac 	beq.w	8001598 <parse_ascii+0x71c>
 8001040:	4836      	ldr	r0, [pc, #216]	@ (800111c <parse_ascii+0x2a0>)
 8001042:	f7ff f8f7 	bl	8000234 <strlen>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b34      	ldr	r3, [pc, #208]	@ (800111c <parse_ascii+0x2a0>)
 800104c:	4413      	add	r3, r2
 800104e:	4938      	ldr	r1, [pc, #224]	@ (8001130 <parse_ascii+0x2b4>)
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	8013      	strh	r3, [r2, #0]
			break;
 8001058:	e29e      	b.n	8001598 <parse_ascii+0x71c>
 800105a:	e29d      	b.n	8001598 <parse_ascii+0x71c>

			case get_sign:
				if (nc == 45)
 800105c:	4b2b      	ldr	r3, [pc, #172]	@ (800110c <parse_ascii+0x290>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b2d      	cmp	r3, #45	@ 0x2d
 8001064:	d106      	bne.n	8001074 <parse_ascii+0x1f8>
				{
					negativ_zahl = 1;
 8001066:	4b33      	ldr	r3, [pc, #204]	@ (8001134 <parse_ascii+0x2b8>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
					a_state = get_val;
 800106c:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <parse_ascii+0x288>)
 800106e:	2203      	movs	r2, #3
 8001070:	701a      	strb	r2, [r3, #0]
					break;
 8001072:	e296      	b.n	80015a2 <parse_ascii+0x726>
				}
				else if ((nc>=48) && (nc<=57) && (val < INT32_MAX))           //val < 1000000
 8001074:	4b25      	ldr	r3, [pc, #148]	@ (800110c <parse_ascii+0x290>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b2f      	cmp	r3, #47	@ 0x2f
 800107c:	d91f      	bls.n	80010be <parse_ascii+0x242>
 800107e:	4b23      	ldr	r3, [pc, #140]	@ (800110c <parse_ascii+0x290>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b39      	cmp	r3, #57	@ 0x39
 8001086:	d81a      	bhi.n	80010be <parse_ascii+0x242>
 8001088:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <parse_ascii+0x2a4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001090:	4293      	cmp	r3, r2
 8001092:	d014      	beq.n	80010be <parse_ascii+0x242>
				{	val = val * 10 + (nc-48);
 8001094:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <parse_ascii+0x2a4>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <parse_ascii+0x290>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	3b30      	subs	r3, #48	@ 0x30
 80010aa:	4413      	add	r3, r2
 80010ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001120 <parse_ascii+0x2a4>)
 80010ae:	6013      	str	r3, [r2, #0]
					pflag=1;
 80010b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <parse_ascii+0x2a8>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
					a_state = get_val;
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <parse_ascii+0x288>)
 80010b8:	2203      	movs	r2, #3
 80010ba:	701a      	strb	r2, [r3, #0]
					break;
 80010bc:	e271      	b.n	80015a2 <parse_ascii+0x726>
				}
				else if ((nc == 59) || (nc==13))
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <parse_ascii+0x290>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b3b      	cmp	r3, #59	@ 0x3b
 80010c6:	d004      	beq.n	80010d2 <parse_ascii+0x256>
 80010c8:	4b10      	ldr	r3, [pc, #64]	@ (800110c <parse_ascii+0x290>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b0d      	cmp	r3, #13
 80010d0:	d103      	bne.n	80010da <parse_ascii+0x25e>
				{
					a_state = proc_cmd;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <parse_ascii+0x288>)
 80010d4:	2204      	movs	r2, #4
 80010d6:	701a      	strb	r2, [r3, #0]
						pflag=0;
						eflag=1;
					}

				};
			break;
 80010d8:	e260      	b.n	800159c <parse_ascii+0x720>
				{	if(nc != 0)
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <parse_ascii+0x290>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 825b 	beq.w	800159c <parse_ascii+0x720>
					{	negativ_zahl = 0;
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <parse_ascii+0x2b8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
						val=0;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <parse_ascii+0x2a4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
						pflag=0;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <parse_ascii+0x2a8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
						eflag=1;
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <parse_ascii+0x2ac>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
			break;
 80010fe:	e24d      	b.n	800159c <parse_ascii+0x720>
 8001100:	200000ff 	.word	0x200000ff
 8001104:	20000001 	.word	0x20000001
 8001108:	200000f0 	.word	0x200000f0
 800110c:	20000118 	.word	0x20000118
 8001110:	200000eb 	.word	0x200000eb
 8001114:	2000011c 	.word	0x2000011c
 8001118:	20000a08 	.word	0x20000a08
 800111c:	20000120 	.word	0x20000120
 8001120:	2000013c 	.word	0x2000013c
 8001124:	20000140 	.word	0x20000140
 8001128:	20000141 	.word	0x20000141
 800112c:	200000ec 	.word	0x200000ec
 8001130:	08007c7c 	.word	0x08007c7c
 8001134:	20000142 	.word	0x20000142
			case get_val:

			if ((nc>=48) && (nc<=57) && (val < INT32_MAX))           //val < 1000000
 8001138:	4b94      	ldr	r3, [pc, #592]	@ (800138c <parse_ascii+0x510>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001140:	d91c      	bls.n	800117c <parse_ascii+0x300>
 8001142:	4b92      	ldr	r3, [pc, #584]	@ (800138c <parse_ascii+0x510>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b39      	cmp	r3, #57	@ 0x39
 800114a:	d817      	bhi.n	800117c <parse_ascii+0x300>
 800114c:	4b90      	ldr	r3, [pc, #576]	@ (8001390 <parse_ascii+0x514>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001154:	4293      	cmp	r3, r2
 8001156:	d011      	beq.n	800117c <parse_ascii+0x300>
			{ val = val * 10 + (nc-48);
 8001158:	4b8d      	ldr	r3, [pc, #564]	@ (8001390 <parse_ascii+0x514>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	461a      	mov	r2, r3
 8001166:	4b89      	ldr	r3, [pc, #548]	@ (800138c <parse_ascii+0x510>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	3b30      	subs	r3, #48	@ 0x30
 800116e:	4413      	add	r3, r2
 8001170:	4a87      	ldr	r2, [pc, #540]	@ (8001390 <parse_ascii+0x514>)
 8001172:	6013      	str	r3, [r2, #0]
				pflag=1;
 8001174:	4b87      	ldr	r3, [pc, #540]	@ (8001394 <parse_ascii+0x518>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e035      	b.n	80011e8 <parse_ascii+0x36c>
			}
			else if ((nc == 59) || (nc==13))
 800117c:	4b83      	ldr	r3, [pc, #524]	@ (800138c <parse_ascii+0x510>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b3b      	cmp	r3, #59	@ 0x3b
 8001184:	d004      	beq.n	8001190 <parse_ascii+0x314>
 8001186:	4b81      	ldr	r3, [pc, #516]	@ (800138c <parse_ascii+0x510>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b0d      	cmp	r3, #13
 800118e:	d118      	bne.n	80011c2 <parse_ascii+0x346>
			{
				if (negativ_zahl)
 8001190:	4b81      	ldr	r3, [pc, #516]	@ (8001398 <parse_ascii+0x51c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d010      	beq.n	80011ba <parse_ascii+0x33e>
				{
					if (pflag == 0)
 8001198:	4b7e      	ldr	r3, [pc, #504]	@ (8001394 <parse_ascii+0x518>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10b      	bne.n	80011ba <parse_ascii+0x33e>
					{
						negativ_zahl = 0;
 80011a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001398 <parse_ascii+0x51c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
						val=0;
 80011a8:	4b79      	ldr	r3, [pc, #484]	@ (8001390 <parse_ascii+0x514>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
						pflag=0;
 80011ae:	4b79      	ldr	r3, [pc, #484]	@ (8001394 <parse_ascii+0x518>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
						eflag=1;
 80011b4:	4b79      	ldr	r3, [pc, #484]	@ (800139c <parse_ascii+0x520>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
					}
				}
				a_state = proc_cmd;
 80011ba:	4b79      	ldr	r3, [pc, #484]	@ (80013a0 <parse_ascii+0x524>)
 80011bc:	2204      	movs	r2, #4
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	e012      	b.n	80011e8 <parse_ascii+0x36c>
			}
			else
			{
				if(nc != 0)
 80011c2:	4b72      	ldr	r3, [pc, #456]	@ (800138c <parse_ascii+0x510>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 81e9 	beq.w	80015a0 <parse_ascii+0x724>
				{	negativ_zahl = 0;
 80011ce:	4b72      	ldr	r3, [pc, #456]	@ (8001398 <parse_ascii+0x51c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
					val=0;
 80011d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001390 <parse_ascii+0x514>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
					pflag=0;
 80011da:	4b6e      	ldr	r3, [pc, #440]	@ (8001394 <parse_ascii+0x518>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
					eflag=1;
 80011e0:	4b6e      	ldr	r3, [pc, #440]	@ (800139c <parse_ascii+0x520>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
				}

			}
			break;
 80011e6:	e1db      	b.n	80015a0 <parse_ascii+0x724>
 80011e8:	e1da      	b.n	80015a0 <parse_ascii+0x724>

			case proc_cmd:

			if (eflag == 1)
 80011ea:	4b6c      	ldr	r3, [pc, #432]	@ (800139c <parse_ascii+0x520>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d103      	bne.n	80011fc <parse_ascii+0x380>
			{
				ret=CMR_MALFORMATTEDCOMMAND;
 80011f4:	4b6b      	ldr	r3, [pc, #428]	@ (80013a4 <parse_ascii+0x528>)
 80011f6:	221f      	movs	r2, #31
 80011f8:	701a      	strb	r2, [r3, #0]
 80011fa:	e19f      	b.n	800153c <parse_ascii+0x6c0>
			}
			//hier beginnt die Verarbeitung der Befehle zum Einstellen der Kommunikation
			else if (  strcmp(cmd, "VERB")== 0 )
 80011fc:	496a      	ldr	r1, [pc, #424]	@ (80013a8 <parse_ascii+0x52c>)
 80011fe:	486b      	ldr	r0, [pc, #428]	@ (80013ac <parse_ascii+0x530>)
 8001200:	f7ff f80e 	bl	8000220 <strcmp>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d12c      	bne.n	8001264 <parse_ascii+0x3e8>
			{
				if(pflag==0)
 800120a:	4b62      	ldr	r3, [pc, #392]	@ (8001394 <parse_ascii+0x518>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d103      	bne.n	800121c <parse_ascii+0x3a0>
				{
					ret=CMR_MISSINGPARAMETER;
 8001214:	4b63      	ldr	r3, [pc, #396]	@ (80013a4 <parse_ascii+0x528>)
 8001216:	220c      	movs	r2, #12
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	e18f      	b.n	800153c <parse_ascii+0x6c0>
				}
				else
				{
					switch (val)
 800121c:	4b5c      	ldr	r3, [pc, #368]	@ (8001390 <parse_ascii+0x514>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d014      	beq.n	800124e <parse_ascii+0x3d2>
 8001224:	2b02      	cmp	r3, #2
 8001226:	dc19      	bgt.n	800125c <parse_ascii+0x3e0>
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <parse_ascii+0x3b6>
 800122c:	2b01      	cmp	r3, #1
 800122e:	d007      	beq.n	8001240 <parse_ascii+0x3c4>
 8001230:	e014      	b.n	800125c <parse_ascii+0x3e0>
					{
						case 0:
						verbose =0;
 8001232:	4b5f      	ldr	r3, [pc, #380]	@ (80013b0 <parse_ascii+0x534>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001238:	4b5a      	ldr	r3, [pc, #360]	@ (80013a4 <parse_ascii+0x528>)
 800123a:	2280      	movs	r2, #128	@ 0x80
 800123c:	701a      	strb	r2, [r3, #0]
						break;
 800123e:	e17d      	b.n	800153c <parse_ascii+0x6c0>
						case 1:
						verbose =1;
 8001240:	4b5b      	ldr	r3, [pc, #364]	@ (80013b0 <parse_ascii+0x534>)
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001246:	4b57      	ldr	r3, [pc, #348]	@ (80013a4 <parse_ascii+0x528>)
 8001248:	2280      	movs	r2, #128	@ 0x80
 800124a:	701a      	strb	r2, [r3, #0]
						break;
 800124c:	e176      	b.n	800153c <parse_ascii+0x6c0>
						case 2:
						verbose  =2;
 800124e:	4b58      	ldr	r3, [pc, #352]	@ (80013b0 <parse_ascii+0x534>)
 8001250:	2202      	movs	r2, #2
 8001252:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001254:	4b53      	ldr	r3, [pc, #332]	@ (80013a4 <parse_ascii+0x528>)
 8001256:	2280      	movs	r2, #128	@ 0x80
 8001258:	701a      	strb	r2, [r3, #0]
						break;
 800125a:	e16f      	b.n	800153c <parse_ascii+0x6c0>
						default:
						ret= CMR_PARAMETERINVALID;
 800125c:	4b51      	ldr	r3, [pc, #324]	@ (80013a4 <parse_ascii+0x528>)
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
						break;
 8001262:	e16b      	b.n	800153c <parse_ascii+0x6c0>
					};
				}
			}
			else if (  strcmp(cmd, "ECHO")== 0 )
 8001264:	4953      	ldr	r1, [pc, #332]	@ (80013b4 <parse_ascii+0x538>)
 8001266:	4851      	ldr	r0, [pc, #324]	@ (80013ac <parse_ascii+0x530>)
 8001268:	f7fe ffda 	bl	8000220 <strcmp>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d122      	bne.n	80012b8 <parse_ascii+0x43c>
			{
				if(pflag==0)
 8001272:	4b48      	ldr	r3, [pc, #288]	@ (8001394 <parse_ascii+0x518>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d103      	bne.n	8001284 <parse_ascii+0x408>
				{
					ret= CMR_MISSINGPARAMETER;
 800127c:	4b49      	ldr	r3, [pc, #292]	@ (80013a4 <parse_ascii+0x528>)
 800127e:	220c      	movs	r2, #12
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	e15b      	b.n	800153c <parse_ascii+0x6c0>
				}
				else
				{
					if(val==0)
 8001284:	4b42      	ldr	r3, [pc, #264]	@ (8001390 <parse_ascii+0x514>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d106      	bne.n	800129a <parse_ascii+0x41e>
					{	echo=0;
 800128c:	4b4a      	ldr	r3, [pc, #296]	@ (80013b8 <parse_ascii+0x53c>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001292:	4b44      	ldr	r3, [pc, #272]	@ (80013a4 <parse_ascii+0x528>)
 8001294:	2280      	movs	r2, #128	@ 0x80
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	e150      	b.n	800153c <parse_ascii+0x6c0>
					}
					else if(val==1)
 800129a:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <parse_ascii+0x514>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d106      	bne.n	80012b0 <parse_ascii+0x434>
					{	echo=1;
 80012a2:	4b45      	ldr	r3, [pc, #276]	@ (80013b8 <parse_ascii+0x53c>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 80012a8:	4b3e      	ldr	r3, [pc, #248]	@ (80013a4 <parse_ascii+0x528>)
 80012aa:	2280      	movs	r2, #128	@ 0x80
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	e145      	b.n	800153c <parse_ascii+0x6c0>
					}
					else
					{
						ret= CMR_PARAMETERINVALID;
 80012b0:	4b3c      	ldr	r3, [pc, #240]	@ (80013a4 <parse_ascii+0x528>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	e141      	b.n	800153c <parse_ascii+0x6c0>
					}
				}
			}
			else if (  strcmp(cmd, "CRLF")== 0 )
 80012b8:	4940      	ldr	r1, [pc, #256]	@ (80013bc <parse_ascii+0x540>)
 80012ba:	483c      	ldr	r0, [pc, #240]	@ (80013ac <parse_ascii+0x530>)
 80012bc:	f7fe ffb0 	bl	8000220 <strcmp>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d138      	bne.n	8001338 <parse_ascii+0x4bc>
			{
				if(pflag==0)
 80012c6:	4b33      	ldr	r3, [pc, #204]	@ (8001394 <parse_ascii+0x518>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d103      	bne.n	80012d8 <parse_ascii+0x45c>
				{
					ret= CMR_MISSINGPARAMETER;
 80012d0:	4b34      	ldr	r3, [pc, #208]	@ (80013a4 <parse_ascii+0x528>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e131      	b.n	800153c <parse_ascii+0x6c0>
				}
				else
				{
					if(val==0)
 80012d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001390 <parse_ascii+0x514>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d106      	bne.n	80012ee <parse_ascii+0x472>
					{	crlf =0;
 80012e0:	4b37      	ldr	r3, [pc, #220]	@ (80013c0 <parse_ascii+0x544>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 80012e6:	4b2f      	ldr	r3, [pc, #188]	@ (80013a4 <parse_ascii+0x528>)
 80012e8:	2280      	movs	r2, #128	@ 0x80
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	e126      	b.n	800153c <parse_ascii+0x6c0>
					}
					else if(val==1)
 80012ee:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <parse_ascii+0x514>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d106      	bne.n	8001304 <parse_ascii+0x488>
					{	crlf =1;
 80012f6:	4b32      	ldr	r3, [pc, #200]	@ (80013c0 <parse_ascii+0x544>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 80012fc:	4b29      	ldr	r3, [pc, #164]	@ (80013a4 <parse_ascii+0x528>)
 80012fe:	2280      	movs	r2, #128	@ 0x80
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	e11b      	b.n	800153c <parse_ascii+0x6c0>
					}
					else if(val==2)
 8001304:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <parse_ascii+0x514>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d106      	bne.n	800131a <parse_ascii+0x49e>
					{	crlf =2;
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <parse_ascii+0x544>)
 800130e:	2202      	movs	r2, #2
 8001310:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001312:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <parse_ascii+0x528>)
 8001314:	2280      	movs	r2, #128	@ 0x80
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	e110      	b.n	800153c <parse_ascii+0x6c0>
					}
					else if(val==3)
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <parse_ascii+0x514>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d106      	bne.n	8001330 <parse_ascii+0x4b4>
					{	crlf =3;
 8001322:	4b27      	ldr	r3, [pc, #156]	@ (80013c0 <parse_ascii+0x544>)
 8001324:	2203      	movs	r2, #3
 8001326:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001328:	4b1e      	ldr	r3, [pc, #120]	@ (80013a4 <parse_ascii+0x528>)
 800132a:	2280      	movs	r2, #128	@ 0x80
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e105      	b.n	800153c <parse_ascii+0x6c0>
					}
					else
					{
						ret= CMR_PARAMETERINVALID;
 8001330:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <parse_ascii+0x528>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	e101      	b.n	800153c <parse_ascii+0x6c0>
					}
				}
			}
			else if (  strcmp(cmd, "SLOPPY")== 0 )
 8001338:	4922      	ldr	r1, [pc, #136]	@ (80013c4 <parse_ascii+0x548>)
 800133a:	481c      	ldr	r0, [pc, #112]	@ (80013ac <parse_ascii+0x530>)
 800133c:	f7fe ff70 	bl	8000220 <strcmp>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d142      	bne.n	80013cc <parse_ascii+0x550>
			{
				if(pflag==0)
 8001346:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <parse_ascii+0x518>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d103      	bne.n	8001358 <parse_ascii+0x4dc>
				{
					ret= CMR_MISSINGPARAMETER;
 8001350:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <parse_ascii+0x528>)
 8001352:	220c      	movs	r2, #12
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	e0f1      	b.n	800153c <parse_ascii+0x6c0>
				}
				else
				{
					if(val==0)
 8001358:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <parse_ascii+0x514>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d106      	bne.n	800136e <parse_ascii+0x4f2>
					{	sloppy=0;
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <parse_ascii+0x54c>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <parse_ascii+0x528>)
 8001368:	2280      	movs	r2, #128	@ 0x80
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	e0e6      	b.n	800153c <parse_ascii+0x6c0>
					}
					else if(val==1)
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <parse_ascii+0x514>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d106      	bne.n	8001384 <parse_ascii+0x508>
					{	sloppy=1;
 8001376:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <parse_ascii+0x54c>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <parse_ascii+0x528>)
 800137e:	2280      	movs	r2, #128	@ 0x80
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	e0db      	b.n	800153c <parse_ascii+0x6c0>
					}
					else
					{
						ret= CMR_PARAMETERINVALID;
 8001384:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <parse_ascii+0x528>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	e0d7      	b.n	800153c <parse_ascii+0x6c0>
 800138c:	20000118 	.word	0x20000118
 8001390:	2000013c 	.word	0x2000013c
 8001394:	20000140 	.word	0x20000140
 8001398:	20000142 	.word	0x20000142
 800139c:	20000141 	.word	0x20000141
 80013a0:	20000001 	.word	0x20000001
 80013a4:	20000143 	.word	0x20000143
 80013a8:	08007c80 	.word	0x08007c80
 80013ac:	20000120 	.word	0x20000120
 80013b0:	200000e9 	.word	0x200000e9
 80013b4:	08007c88 	.word	0x08007c88
 80013b8:	200000eb 	.word	0x200000eb
 80013bc:	08007c90 	.word	0x08007c90
 80013c0:	200000ea 	.word	0x200000ea
 80013c4:	08007c98 	.word	0x08007c98
 80013c8:	200000ec 	.word	0x200000ec
					}
				}
			}
			else if ( strcmp(cmd, "IBL") == 0 )
 80013cc:	497b      	ldr	r1, [pc, #492]	@ (80015bc <parse_ascii+0x740>)
 80013ce:	487c      	ldr	r0, [pc, #496]	@ (80015c0 <parse_ascii+0x744>)
 80013d0:	f7fe ff26 	bl	8000220 <strcmp>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10f      	bne.n	80013fa <parse_ascii+0x57e>
			{
				verbose = 2;
 80013da:	4b7a      	ldr	r3, [pc, #488]	@ (80015c4 <parse_ascii+0x748>)
 80013dc:	2202      	movs	r2, #2
 80013de:	701a      	strb	r2, [r3, #0]
				echo = 1;
 80013e0:	4b79      	ldr	r3, [pc, #484]	@ (80015c8 <parse_ascii+0x74c>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
				crlf = 3;
 80013e6:	4b79      	ldr	r3, [pc, #484]	@ (80015cc <parse_ascii+0x750>)
 80013e8:	2203      	movs	r2, #3
 80013ea:	701a      	strb	r2, [r3, #0]
				sloppy = 1;
 80013ec:	4b78      	ldr	r3, [pc, #480]	@ (80015d0 <parse_ascii+0x754>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
				ret =CMR_SUCCESSFULL;
 80013f2:	4b78      	ldr	r3, [pc, #480]	@ (80015d4 <parse_ascii+0x758>)
 80013f4:	2280      	movs	r2, #128	@ 0x80
 80013f6:	701a      	strb	r2, [r3, #0]
 80013f8:	e0a0      	b.n	800153c <parse_ascii+0x6c0>
			}
			else if (  strcmp(cmd, "") == 0 )
 80013fa:	4b71      	ldr	r3, [pc, #452]	@ (80015c0 <parse_ascii+0x744>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d103      	bne.n	800140a <parse_ascii+0x58e>
			{
				ret= CMR_SEMICOLONONLY;
 8001402:	4b74      	ldr	r3, [pc, #464]	@ (80015d4 <parse_ascii+0x758>)
 8001404:	22ff      	movs	r2, #255	@ 0xff
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e098      	b.n	800153c <parse_ascii+0x6c0>
			}
			//die anderen ASCII-Befehle werden per Binäre-Suche-Funktion eine interne Befehlnummer und ein Attribut zugeordnet
			//und in den Stack eingefügt.
			else
			{
				Binary_Search(ASCII_CMD_MAX, cmd, &cmd_index);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	461a      	mov	r2, r3
 8001410:	496b      	ldr	r1, [pc, #428]	@ (80015c0 <parse_ascii+0x744>)
 8001412:	201d      	movs	r0, #29
 8001414:	f000 fb14 	bl	8001a40 <Binary_Search>
				//uart0_puts(cmd);
				//uart0_puti(cmd_index);

				if (cmd_index != BINARY_INDEX_MAX)
 8001418:	8abb      	ldrh	r3, [r7, #20]
 800141a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800141e:	f000 808a 	beq.w	8001536 <parse_ascii+0x6ba>
				{	stack_data.cmd_sender = Q_RS232_ASCII;
 8001422:	2304      	movs	r3, #4
 8001424:	713b      	strb	r3, [r7, #4]
					stack_data.cmd_index = cmd_index;
 8001426:	8abb      	ldrh	r3, [r7, #20]
 8001428:	80fb      	strh	r3, [r7, #6]
					stack_data.cmd_ack = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	723b      	strb	r3, [r7, #8]
					stack_data.next = NONEXT;
 800142e:	23ff      	movs	r3, #255	@ 0xff
 8001430:	743b      	strb	r3, [r7, #16]
					stack_data.prio = PRIO_LEVEL1;
 8001432:	2301      	movs	r3, #1
 8001434:	747b      	strb	r3, [r7, #17]

					if (cmd_index & 1)
 8001436:	8abb      	ldrh	r3, [r7, #20]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	d06d      	beq.n	800151c <parse_ascii+0x6a0>
					{
						if (z_get_rmt() == z_rmt_rs232)
 8001440:	f001 ff04 	bl	800324c <z_get_rmt>
 8001444:	4603      	mov	r3, r0
 8001446:	2b01      	cmp	r3, #1
 8001448:	d12f      	bne.n	80014aa <parse_ascii+0x62e>
						{
							if ((pflag == 1))
 800144a:	4b63      	ldr	r3, [pc, #396]	@ (80015d8 <parse_ascii+0x75c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d116      	bne.n	8001482 <parse_ascii+0x606>
							{
								if (negativ_zahl)
 8001454:	4b61      	ldr	r3, [pc, #388]	@ (80015dc <parse_ascii+0x760>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d004      	beq.n	8001466 <parse_ascii+0x5ea>
								{
									stack_data.parameter = -val;
 800145c:	4b60      	ldr	r3, [pc, #384]	@ (80015e0 <parse_ascii+0x764>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	425b      	negs	r3, r3
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	e002      	b.n	800146c <parse_ascii+0x5f0>
								}
								else
								{ stack_data.parameter = val;
 8001466:	4b5e      	ldr	r3, [pc, #376]	@ (80015e0 <parse_ascii+0x764>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	60fb      	str	r3, [r7, #12]
								}

								stack_data.rwflg = WRITE;
 800146c:	2302      	movs	r3, #2
 800146e:	74bb      	strb	r3, [r7, #18]
								ret = stack_insert_sero(stack_data);
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001474:	f000 fcf0 	bl	8001e58 <stack_insert_sero>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	4b55      	ldr	r3, [pc, #340]	@ (80015d4 <parse_ascii+0x758>)
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	e05c      	b.n	800153c <parse_ascii+0x6c0>
								//uart0_puti(ret);
								//uart0_puti(stack_data.cmd_index);

							}
							else if(cmd_index == CMD_ERR_RESET)
 8001482:	8abb      	ldrh	r3, [r7, #20]
 8001484:	2b0b      	cmp	r3, #11
 8001486:	d10c      	bne.n	80014a2 <parse_ascii+0x626>
							{
								stack_data.parameter = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
								stack_data.rwflg = WRITE;
 800148c:	2302      	movs	r3, #2
 800148e:	74bb      	strb	r3, [r7, #18]
								ret = stack_insert_sero(stack_data);
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001494:	f000 fce0 	bl	8001e58 <stack_insert_sero>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	4b4d      	ldr	r3, [pc, #308]	@ (80015d4 <parse_ascii+0x758>)
 800149e:	701a      	strb	r2, [r3, #0]
 80014a0:	e04c      	b.n	800153c <parse_ascii+0x6c0>
							}
							else
							{
								{ ret =CMR_MISSINGPARAMETER;
 80014a2:	4b4c      	ldr	r3, [pc, #304]	@ (80015d4 <parse_ascii+0x758>)
 80014a4:	220c      	movs	r2, #12
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e048      	b.n	800153c <parse_ascii+0x6c0>
								}
							};
						}
						else
						{
							if ((cmd_index == CMD_SPC_CTL_SET) || (cmd_index == CMD_NOP))         //SPC:CTL
 80014aa:	8abb      	ldrh	r3, [r7, #20]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d002      	beq.n	80014b6 <parse_ascii+0x63a>
 80014b0:	8abb      	ldrh	r3, [r7, #20]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d12e      	bne.n	8001514 <parse_ascii+0x698>
							{

								if ((pflag == 1))
 80014b6:	4b48      	ldr	r3, [pc, #288]	@ (80015d8 <parse_ascii+0x75c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d115      	bne.n	80014ec <parse_ascii+0x670>
								{
									if (negativ_zahl)
 80014c0:	4b46      	ldr	r3, [pc, #280]	@ (80015dc <parse_ascii+0x760>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <parse_ascii+0x654>
									{
										ret = CMR_PARAMETERINVALID;
 80014c8:	4b42      	ldr	r3, [pc, #264]	@ (80015d4 <parse_ascii+0x758>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
								if ((pflag == 1))
 80014ce:	e035      	b.n	800153c <parse_ascii+0x6c0>
									}
									else
									{
										stack_data.parameter = val;
 80014d0:	4b43      	ldr	r3, [pc, #268]	@ (80015e0 <parse_ascii+0x764>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
										stack_data.rwflg = WRITE;
 80014d6:	2302      	movs	r3, #2
 80014d8:	74bb      	strb	r3, [r7, #18]
										ret = stack_insert_sero(stack_data);
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014de:	f000 fcbb 	bl	8001e58 <stack_insert_sero>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b3b      	ldr	r3, [pc, #236]	@ (80015d4 <parse_ascii+0x758>)
 80014e8:	701a      	strb	r2, [r3, #0]
								if ((pflag == 1))
 80014ea:	e027      	b.n	800153c <parse_ascii+0x6c0>
									}
								}
								else if(cmd_index == CMD_NOP)
 80014ec:	8abb      	ldrh	r3, [r7, #20]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d10c      	bne.n	800150c <parse_ascii+0x690>
								{
									stack_data.parameter = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
									stack_data.rwflg = WRITE;
 80014f6:	2302      	movs	r3, #2
 80014f8:	74bb      	strb	r3, [r7, #18]
									ret = stack_insert_sero(stack_data);
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014fe:	f000 fcab 	bl	8001e58 <stack_insert_sero>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4b33      	ldr	r3, [pc, #204]	@ (80015d4 <parse_ascii+0x758>)
 8001508:	701a      	strb	r2, [r3, #0]
								if ((pflag == 1))
 800150a:	e017      	b.n	800153c <parse_ascii+0x6c0>
								}
								else
								{
									{
										ret = CMR_MISSINGPARAMETER;
 800150c:	4b31      	ldr	r3, [pc, #196]	@ (80015d4 <parse_ascii+0x758>)
 800150e:	220c      	movs	r2, #12
 8001510:	701a      	strb	r2, [r3, #0]
								if ((pflag == 1))
 8001512:	e013      	b.n	800153c <parse_ascii+0x6c0>
									}
								};
							}
							else
							{
								ret = CMR_COMMANDDENIED;
 8001514:	4b2f      	ldr	r3, [pc, #188]	@ (80015d4 <parse_ascii+0x758>)
 8001516:	2207      	movs	r2, #7
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e00f      	b.n	800153c <parse_ascii+0x6c0>
							};
						};
					}
					else  //Lese-Operation
					{
						stack_data.parameter = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
						stack_data.rwflg = READ;
 8001520:	2301      	movs	r3, #1
 8001522:	74bb      	strb	r3, [r7, #18]
						ret = stack_insert_sero(stack_data);
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001528:	f000 fc96 	bl	8001e58 <stack_insert_sero>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	4b28      	ldr	r3, [pc, #160]	@ (80015d4 <parse_ascii+0x758>)
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	e002      	b.n	800153c <parse_ascii+0x6c0>
					};

				}
				else         //Falls cmd_index = ASCII_CMD_MAX, d.h. der Befehl ist ungültig.
				{
					ret= CMR_UNKNOWNCOMMAND;
 8001536:	4b27      	ldr	r3, [pc, #156]	@ (80015d4 <parse_ascii+0x758>)
 8001538:	2206      	movs	r2, #6
 800153a:	701a      	strb	r2, [r3, #0]
				};
			};

			if (ret != STACK_CMDINSTACK)
 800153c:	4b25      	ldr	r3, [pc, #148]	@ (80015d4 <parse_ascii+0x758>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b11      	cmp	r3, #17
 8001544:	d00b      	beq.n	800155e <parse_ascii+0x6e2>
			{
				output_ascii_cmdack(verbose, crlf, ret);
 8001546:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <parse_ascii+0x748>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4a1f      	ldr	r2, [pc, #124]	@ (80015cc <parse_ascii+0x750>)
 800154e:	7812      	ldrb	r2, [r2, #0]
 8001550:	b2d1      	uxtb	r1, r2
 8001552:	4a20      	ldr	r2, [pc, #128]	@ (80015d4 <parse_ascii+0x758>)
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f84b 	bl	80015f4 <output_ascii_cmdack>
			};

			uartRB_KickTx(&usart3_rb);
 800155e:	4821      	ldr	r0, [pc, #132]	@ (80015e4 <parse_ascii+0x768>)
 8001560:	f000 ffc8 	bl	80024f4 <uartRB_KickTx>
			strcpy(cmd,"");
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <parse_ascii+0x744>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
			val=0;
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <parse_ascii+0x764>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
			ret=0;
 8001570:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <parse_ascii+0x758>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
			pflag = 0;
 8001576:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <parse_ascii+0x75c>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
			eflag = 0;
 800157c:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <parse_ascii+0x76c>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
			negativ_zahl = 0;
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <parse_ascii+0x760>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]

			a_state = get_cmd;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <parse_ascii+0x770>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
			break;
 800158e:	e008      	b.n	80015a2 <parse_ascii+0x726>

			default:
			a_state = get_cmd;
 8001590:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <parse_ascii+0x770>)
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
			break;
 8001596:	e004      	b.n	80015a2 <parse_ascii+0x726>
			break;
 8001598:	bf00      	nop
 800159a:	e002      	b.n	80015a2 <parse_ascii+0x726>
			break;
 800159c:	bf00      	nop
 800159e:	e000      	b.n	80015a2 <parse_ascii+0x726>
			break;
 80015a0:	bf00      	nop

		//	char1[0]=nc;
		//  if(nzeichen >0)	uart1_put(char1, 1);
		//	versandstart1();

	}while ( ptr < nzeichen );
 80015a2:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <parse_ascii+0x774>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	7dfa      	ldrb	r2, [r7, #23]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	f4ff ac6e 	bcc.w	8000e8c <parse_ascii+0x10>
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	08007ca0 	.word	0x08007ca0
 80015c0:	20000120 	.word	0x20000120
 80015c4:	200000e9 	.word	0x200000e9
 80015c8:	200000eb 	.word	0x200000eb
 80015cc:	200000ea 	.word	0x200000ea
 80015d0:	200000ec 	.word	0x200000ec
 80015d4:	20000143 	.word	0x20000143
 80015d8:	20000140 	.word	0x20000140
 80015dc:	20000142 	.word	0x20000142
 80015e0:	2000013c 	.word	0x2000013c
 80015e4:	20000a08 	.word	0x20000a08
 80015e8:	20000141 	.word	0x20000141
 80015ec:	20000001 	.word	0x20000001
 80015f0:	200000ff 	.word	0x200000ff

080015f4 <output_ascii_cmdack>:

void output_ascii_cmdack(uint8_t verbose_flg, uint8_t crlf_flg, uint8_t cmd_ack)
{
 80015f4:	b5b0      	push	{r4, r5, r7, lr}
 80015f6:	b09c      	sub	sp, #112	@ 0x70
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	460b      	mov	r3, r1
 8001600:	71bb      	strb	r3, [r7, #6]
 8001602:	4613      	mov	r3, r2
 8001604:	717b      	strb	r3, [r7, #5]

	if(verbose_flg>0)
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 81e3 	beq.w	80019d4 <output_ascii_cmdack+0x3e0>
	{
		if(cmd_ack== CMR_SUCCESSFULL)
 800160e:	797b      	ldrb	r3, [r7, #5]
 8001610:	2b80      	cmp	r3, #128	@ 0x80
 8001612:	d105      	bne.n	8001620 <output_ascii_cmdack+0x2c>
		{
			uartRB_Put(&usart3_rb,">OK;", 4);
 8001614:	2204      	movs	r2, #4
 8001616:	49ba      	ldr	r1, [pc, #744]	@ (8001900 <output_ascii_cmdack+0x30c>)
 8001618:	48ba      	ldr	r0, [pc, #744]	@ (8001904 <output_ascii_cmdack+0x310>)
 800161a:	f000 ffb1 	bl	8002580 <uartRB_Put>
 800161e:	e1e8      	b.n	80019f2 <output_ascii_cmdack+0x3fe>
		}
		else if (cmd_ack==CMR_SEMICOLONONLY)
 8001620:	797b      	ldrb	r3, [r7, #5]
 8001622:	2bff      	cmp	r3, #255	@ 0xff
 8001624:	d105      	bne.n	8001632 <output_ascii_cmdack+0x3e>
		{
			uartRB_Put(&usart3_rb,";", 1);
 8001626:	2201      	movs	r2, #1
 8001628:	49b7      	ldr	r1, [pc, #732]	@ (8001908 <output_ascii_cmdack+0x314>)
 800162a:	48b6      	ldr	r0, [pc, #728]	@ (8001904 <output_ascii_cmdack+0x310>)
 800162c:	f000 ffa8 	bl	8002580 <uartRB_Put>
 8001630:	e1df      	b.n	80019f2 <output_ascii_cmdack+0x3fe>
		}
		else
		{
			if(verbose_flg==1)
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d143      	bne.n	80016c0 <output_ascii_cmdack+0xcc>
			{
				char tmp[10];
				char tmp2[12];
				sprintf(tmp,"%3.3u",(cmd_ack & 0x7F));
 8001638:	797b      	ldrb	r3, [r7, #5]
 800163a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800163e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001642:	49b2      	ldr	r1, [pc, #712]	@ (800190c <output_ascii_cmdack+0x318>)
 8001644:	4618      	mov	r0, r3
 8001646:	f005 fe5d 	bl	8007304 <siprintf>

				if(cmd_ack > 128)
 800164a:	797b      	ldrb	r3, [r7, #5]
 800164c:	2b80      	cmp	r3, #128	@ 0x80
 800164e:	d909      	bls.n	8001664 <output_ascii_cmdack+0x70>
				{
					strcpy(tmp2,">W");
 8001650:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001654:	4aae      	ldr	r2, [pc, #696]	@ (8001910 <output_ascii_cmdack+0x31c>)
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	4611      	mov	r1, r2
 800165a:	8019      	strh	r1, [r3, #0]
 800165c:	3302      	adds	r3, #2
 800165e:	0c12      	lsrs	r2, r2, #16
 8001660:	701a      	strb	r2, [r3, #0]
 8001662:	e008      	b.n	8001676 <output_ascii_cmdack+0x82>
				}
				else
				{
					strcpy(tmp2,">E");
 8001664:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001668:	4aaa      	ldr	r2, [pc, #680]	@ (8001914 <output_ascii_cmdack+0x320>)
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	4611      	mov	r1, r2
 800166e:	8019      	strh	r1, [r3, #0]
 8001670:	3302      	adds	r3, #2
 8001672:	0c12      	lsrs	r2, r2, #16
 8001674:	701a      	strb	r2, [r3, #0]
				}
				strcat(tmp2,tmp);
 8001676:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800167a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f005 fe67 	bl	8007354 <strcat>
				strcat(tmp2,";");
 8001686:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fdd2 	bl	8000234 <strlen>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001698:	4413      	add	r3, r2
 800169a:	499b      	ldr	r1, [pc, #620]	@ (8001908 <output_ascii_cmdack+0x314>)
 800169c:	461a      	mov	r2, r3
 800169e:	460b      	mov	r3, r1
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	8013      	strh	r3, [r2, #0]
				uartRB_Put(&usart3_rb,tmp2, strlen(tmp2));
 80016a4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fdc3 	bl	8000234 <strlen>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016b6:	4619      	mov	r1, r3
 80016b8:	4892      	ldr	r0, [pc, #584]	@ (8001904 <output_ascii_cmdack+0x310>)
 80016ba:	f000 ff61 	bl	8002580 <uartRB_Put>
 80016be:	e198      	b.n	80019f2 <output_ascii_cmdack+0x3fe>
			}
			else if (verbose_flg==2)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	f040 8195 	bne.w	80019f2 <output_ascii_cmdack+0x3fe>
			{
				char tmp[35];
				char tmp2[40];
				if(cmd_ack > 128)
 80016c8:	797b      	ldrb	r3, [r7, #5]
 80016ca:	2b80      	cmp	r3, #128	@ 0x80
 80016cc:	d904      	bls.n	80016d8 <output_ascii_cmdack+0xe4>
				{
					strcpy(tmp2,">W:");
 80016ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016d2:	4a91      	ldr	r2, [pc, #580]	@ (8001918 <output_ascii_cmdack+0x324>)
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e003      	b.n	80016e0 <output_ascii_cmdack+0xec>
				}
				else
				{
					strcpy(tmp2,">E:");
 80016d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016dc:	4a8f      	ldr	r2, [pc, #572]	@ (800191c <output_ascii_cmdack+0x328>)
 80016de:	601a      	str	r2, [r3, #0]
				}

				switch(cmd_ack & 0xFF)          //(cmd_ack & 0x7F)
 80016e0:	797b      	ldrb	r3, [r7, #5]
 80016e2:	2b8a      	cmp	r3, #138	@ 0x8a
 80016e4:	f000 8087 	beq.w	80017f6 <output_ascii_cmdack+0x202>
 80016e8:	2b8a      	cmp	r3, #138	@ 0x8a
 80016ea:	f300 8144 	bgt.w	8001976 <output_ascii_cmdack+0x382>
 80016ee:	2b83      	cmp	r3, #131	@ 0x83
 80016f0:	d075      	beq.n	80017de <output_ascii_cmdack+0x1ea>
 80016f2:	2b83      	cmp	r3, #131	@ 0x83
 80016f4:	f300 813f 	bgt.w	8001976 <output_ascii_cmdack+0x382>
 80016f8:	2b1f      	cmp	r3, #31
 80016fa:	dc49      	bgt.n	8001790 <output_ascii_cmdack+0x19c>
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f2c0 813a 	blt.w	8001976 <output_ascii_cmdack+0x382>
 8001702:	2b1f      	cmp	r3, #31
 8001704:	f200 8137 	bhi.w	8001976 <output_ascii_cmdack+0x382>
 8001708:	a201      	add	r2, pc, #4	@ (adr r2, 8001710 <output_ascii_cmdack+0x11c>)
 800170a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170e:	bf00      	nop
 8001710:	08001797 	.word	0x08001797
 8001714:	080017ab 	.word	0x080017ab
 8001718:	08001977 	.word	0x08001977
 800171c:	08001977 	.word	0x08001977
 8001720:	08001977 	.word	0x08001977
 8001724:	08001977 	.word	0x08001977
 8001728:	08001823 	.word	0x08001823
 800172c:	08001837 	.word	0x08001837
 8001730:	08001849 	.word	0x08001849
 8001734:	080018b1 	.word	0x080018b1
 8001738:	08001977 	.word	0x08001977
 800173c:	0800180b 	.word	0x0800180b
 8001740:	080018c5 	.word	0x080018c5
 8001744:	08001869 	.word	0x08001869
 8001748:	0800187b 	.word	0x0800187b
 800174c:	08001897 	.word	0x08001897
 8001750:	080018e1 	.word	0x080018e1
 8001754:	08001977 	.word	0x08001977
 8001758:	08001977 	.word	0x08001977
 800175c:	08001977 	.word	0x08001977
 8001760:	08001977 	.word	0x08001977
 8001764:	08001977 	.word	0x08001977
 8001768:	08001977 	.word	0x08001977
 800176c:	08001977 	.word	0x08001977
 8001770:	08001977 	.word	0x08001977
 8001774:	08001977 	.word	0x08001977
 8001778:	08001977 	.word	0x08001977
 800177c:	08001977 	.word	0x08001977
 8001780:	08001977 	.word	0x08001977
 8001784:	08001977 	.word	0x08001977
 8001788:	08001977 	.word	0x08001977
 800178c:	0800195d 	.word	0x0800195d
 8001790:	2b82      	cmp	r3, #130	@ 0x82
 8001792:	d018      	beq.n	80017c6 <output_ascii_cmdack+0x1d2>
 8001794:	e0ef      	b.n	8001976 <output_ascii_cmdack+0x382>
				{
					case CMR_COMMANDONDEMAND:
					strcpy(tmp, "No Answer!");
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4a61      	ldr	r2, [pc, #388]	@ (8001920 <output_ascii_cmdack+0x32c>)
 800179c:	ca07      	ldmia	r2, {r0, r1, r2}
 800179e:	c303      	stmia	r3!, {r0, r1}
 80017a0:	801a      	strh	r2, [r3, #0]
 80017a2:	3302      	adds	r3, #2
 80017a4:	0c12      	lsrs	r2, r2, #16
 80017a6:	701a      	strb	r2, [r3, #0]
					break;
 80017a8:	e0ef      	b.n	800198a <output_ascii_cmdack+0x396>

					case CMR_PARAMETERINVALID:
					strcpy(tmp, "Parameter Invalid!");
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	4a5d      	ldr	r2, [pc, #372]	@ (8001924 <output_ascii_cmdack+0x330>)
 80017b0:	461c      	mov	r4, r3
 80017b2:	4615      	mov	r5, r2
 80017b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b8:	682b      	ldr	r3, [r5, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	8022      	strh	r2, [r4, #0]
 80017be:	3402      	adds	r4, #2
 80017c0:	0c1b      	lsrs	r3, r3, #16
 80017c2:	7023      	strb	r3, [r4, #0]
					break;
 80017c4:	e0e1      	b.n	800198a <output_ascii_cmdack+0x396>

					case CMR_PARAMETERCLIPEDMIN:
					strcpy(tmp, "Parameter Clipped to Minimum!");
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4a57      	ldr	r2, [pc, #348]	@ (8001928 <output_ascii_cmdack+0x334>)
 80017cc:	461c      	mov	r4, r3
 80017ce:	4615      	mov	r5, r2
 80017d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017d8:	c407      	stmia	r4!, {r0, r1, r2}
 80017da:	8023      	strh	r3, [r4, #0]
					break;
 80017dc:	e0d5      	b.n	800198a <output_ascii_cmdack+0x396>

					case CMR_PARAMETERCLIPEDMAX:
					strcpy(tmp, "Parameter Clipped to Maximum!");
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	4a52      	ldr	r2, [pc, #328]	@ (800192c <output_ascii_cmdack+0x338>)
 80017e4:	461c      	mov	r4, r3
 80017e6:	4615      	mov	r5, r2
 80017e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017f0:	c407      	stmia	r4!, {r0, r1, r2}
 80017f2:	8023      	strh	r3, [r4, #0]
					break;
 80017f4:	e0c9      	b.n	800198a <output_ascii_cmdack+0x396>

					case CMR_PARAMETERADJUSTED:
					strcpy(tmp, "Parameter Adjusted!");
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4a4d      	ldr	r2, [pc, #308]	@ (8001930 <output_ascii_cmdack+0x33c>)
 80017fc:	461c      	mov	r4, r3
 80017fe:	4615      	mov	r5, r2
 8001800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	6023      	str	r3, [r4, #0]
					break;
 8001808:	e0bf      	b.n	800198a <output_ascii_cmdack+0x396>

					case CMR_WRONGPARAMETERFORMAT:
					strcpy(tmp, "Wrong Parameter Format!");
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	4a49      	ldr	r2, [pc, #292]	@ (8001934 <output_ascii_cmdack+0x340>)
 8001810:	461c      	mov	r4, r3
 8001812:	4615      	mov	r5, r2
 8001814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001818:	e895 0003 	ldmia.w	r5, {r0, r1}
 800181c:	e884 0003 	stmia.w	r4, {r0, r1}
					break;
 8001820:	e0b3      	b.n	800198a <output_ascii_cmdack+0x396>

					case CMR_UNKNOWNCOMMAND:
					strcpy(tmp, "Unknown Command!");
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	4a44      	ldr	r2, [pc, #272]	@ (8001938 <output_ascii_cmdack+0x344>)
 8001828:	461c      	mov	r4, r3
 800182a:	4615      	mov	r5, r2
 800182c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800182e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001830:	682b      	ldr	r3, [r5, #0]
 8001832:	7023      	strb	r3, [r4, #0]
					break;
 8001834:	e0a9      	b.n	800198a <output_ascii_cmdack+0x396>

					case CMR_COMMANDDENIED:
					strcpy(tmp, "Command Denied!");
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	4a40      	ldr	r2, [pc, #256]	@ (800193c <output_ascii_cmdack+0x348>)
 800183c:	461c      	mov	r4, r3
 800183e:	4613      	mov	r3, r2
 8001840:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001842:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					break;
 8001846:	e0a0      	b.n	800198a <output_ascii_cmdack+0x396>

					case CMR_COMMANDNOTSUPPORTED:
					strcpy(tmp, "Command Not Supported!");
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4a3c      	ldr	r2, [pc, #240]	@ (8001940 <output_ascii_cmdack+0x34c>)
 800184e:	461c      	mov	r4, r3
 8001850:	4615      	mov	r5, r2
 8001852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001856:	e895 0003 	ldmia.w	r5, {r0, r1}
 800185a:	6020      	str	r0, [r4, #0]
 800185c:	3404      	adds	r4, #4
 800185e:	8021      	strh	r1, [r4, #0]
 8001860:	3402      	adds	r4, #2
 8001862:	0c0b      	lsrs	r3, r1, #16
 8001864:	7023      	strb	r3, [r4, #0]
					break;
 8001866:	e090      	b.n	800198a <output_ascii_cmdack+0x396>

					case CMR_EEPROMERROR:
					strcpy(tmp, "EEPROM Error!");
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	4a35      	ldr	r2, [pc, #212]	@ (8001944 <output_ascii_cmdack+0x350>)
 800186e:	461c      	mov	r4, r3
 8001870:	4613      	mov	r3, r2
 8001872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001874:	c407      	stmia	r4!, {r0, r1, r2}
 8001876:	8023      	strh	r3, [r4, #0]
					break;
 8001878:	e087      	b.n	800198a <output_ascii_cmdack+0x396>

					case CMR_EEPWRLOCKED:
					strcpy(tmp, "EEPROM Write Lock!");
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	4a32      	ldr	r2, [pc, #200]	@ (8001948 <output_ascii_cmdack+0x354>)
 8001880:	461c      	mov	r4, r3
 8001882:	4615      	mov	r5, r2
 8001884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	8022      	strh	r2, [r4, #0]
 800188e:	3402      	adds	r4, #2
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	7023      	strb	r3, [r4, #0]
					break;
 8001894:	e079      	b.n	800198a <output_ascii_cmdack+0x396>

					case CMR_WRONGOPMODE:
					strcpy(tmp, "Wrong Operation Mode!");
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	4a2c      	ldr	r2, [pc, #176]	@ (800194c <output_ascii_cmdack+0x358>)
 800189c:	461c      	mov	r4, r3
 800189e:	4615      	mov	r5, r2
 80018a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018a8:	6020      	str	r0, [r4, #0]
 80018aa:	3404      	adds	r4, #4
 80018ac:	8021      	strh	r1, [r4, #0]
					break;
 80018ae:	e06c      	b.n	800198a <output_ascii_cmdack+0x396>

					case CMR_UNITBUSY:
					strcpy(tmp, "Unit Busy!");
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4a26      	ldr	r2, [pc, #152]	@ (8001950 <output_ascii_cmdack+0x35c>)
 80018b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80018b8:	c303      	stmia	r3!, {r0, r1}
 80018ba:	801a      	strh	r2, [r3, #0]
 80018bc:	3302      	adds	r3, #2
 80018be:	0c12      	lsrs	r2, r2, #16
 80018c0:	701a      	strb	r2, [r3, #0]
					break;
 80018c2:	e062      	b.n	800198a <output_ascii_cmdack+0x396>

					case CMR_MISSINGPARAMETER:
					strcpy(tmp, "Missing Parameter!");
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	4a22      	ldr	r2, [pc, #136]	@ (8001954 <output_ascii_cmdack+0x360>)
 80018ca:	461c      	mov	r4, r3
 80018cc:	4615      	mov	r5, r2
 80018ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d2:	682b      	ldr	r3, [r5, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	8022      	strh	r2, [r4, #0]
 80018d8:	3402      	adds	r4, #2
 80018da:	0c1b      	lsrs	r3, r3, #16
 80018dc:	7023      	strb	r3, [r4, #0]
					break;
 80018de:	e054      	b.n	800198a <output_ascii_cmdack+0x396>

					case CMR_OPTIONNOTINSTALLED:
					strcpy(tmp, "Required Option Not Installed!");
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001958 <output_ascii_cmdack+0x364>)
 80018e6:	461c      	mov	r4, r3
 80018e8:	4615      	mov	r5, r2
 80018ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018f2:	c407      	stmia	r4!, {r0, r1, r2}
 80018f4:	8023      	strh	r3, [r4, #0]
 80018f6:	3402      	adds	r4, #2
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	7023      	strb	r3, [r4, #0]
					break;
 80018fc:	e045      	b.n	800198a <output_ascii_cmdack+0x396>
 80018fe:	bf00      	nop
 8001900:	08007ca4 	.word	0x08007ca4
 8001904:	20000a08 	.word	0x20000a08
 8001908:	08007cac 	.word	0x08007cac
 800190c:	08007cb0 	.word	0x08007cb0
 8001910:	08007cb8 	.word	0x08007cb8
 8001914:	08007cbc 	.word	0x08007cbc
 8001918:	003a573e 	.word	0x003a573e
 800191c:	003a453e 	.word	0x003a453e
 8001920:	08007cc0 	.word	0x08007cc0
 8001924:	08007ccc 	.word	0x08007ccc
 8001928:	08007ce0 	.word	0x08007ce0
 800192c:	08007d00 	.word	0x08007d00
 8001930:	08007d20 	.word	0x08007d20
 8001934:	08007d34 	.word	0x08007d34
 8001938:	08007d4c 	.word	0x08007d4c
 800193c:	08007d60 	.word	0x08007d60
 8001940:	08007d70 	.word	0x08007d70
 8001944:	08007d88 	.word	0x08007d88
 8001948:	08007d98 	.word	0x08007d98
 800194c:	08007dac 	.word	0x08007dac
 8001950:	08007dc4 	.word	0x08007dc4
 8001954:	08007dd0 	.word	0x08007dd0
 8001958:	08007de4 	.word	0x08007de4

					case CMR_MALFORMATTEDCOMMAND:
					strcpy(tmp, "Malformatted Command!");
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	4a31      	ldr	r2, [pc, #196]	@ (8001a28 <output_ascii_cmdack+0x434>)
 8001962:	461c      	mov	r4, r3
 8001964:	4615      	mov	r5, r2
 8001966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800196a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800196e:	6020      	str	r0, [r4, #0]
 8001970:	3404      	adds	r4, #4
 8001972:	8021      	strh	r1, [r4, #0]
					break;
 8001974:	e009      	b.n	800198a <output_ascii_cmdack+0x396>


					default:
					sprintf(tmp,"%3.3u",(cmd_ack & 0x7F));
 8001976:	797b      	ldrb	r3, [r7, #5]
 8001978:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	492a      	ldr	r1, [pc, #168]	@ (8001a2c <output_ascii_cmdack+0x438>)
 8001982:	4618      	mov	r0, r3
 8001984:	f005 fcbe 	bl	8007304 <siprintf>
					break;
 8001988:	bf00      	nop
				}

				strcat(tmp2,tmp);
 800198a:	f107 020c 	add.w	r2, r7, #12
 800198e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f005 fcdd 	bl	8007354 <strcat>
				strcat(tmp2,";");
 800199a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fc48 	bl	8000234 <strlen>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019ac:	4413      	add	r3, r2
 80019ae:	4920      	ldr	r1, [pc, #128]	@ (8001a30 <output_ascii_cmdack+0x43c>)
 80019b0:	461a      	mov	r2, r3
 80019b2:	460b      	mov	r3, r1
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	8013      	strh	r3, [r2, #0]
				uartRB_Put(&usart3_rb,tmp2, strlen(tmp2));
 80019b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fc39 	bl	8000234 <strlen>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019ca:	4619      	mov	r1, r3
 80019cc:	4819      	ldr	r0, [pc, #100]	@ (8001a34 <output_ascii_cmdack+0x440>)
 80019ce:	f000 fdd7 	bl	8002580 <uartRB_Put>
 80019d2:	e00e      	b.n	80019f2 <output_ascii_cmdack+0x3fe>
			}
		}
	}
	else
	{
		if (cmd_ack != STACK_CMDINSTACK)
 80019d4:	797b      	ldrb	r3, [r7, #5]
 80019d6:	2b11      	cmp	r3, #17
 80019d8:	d00b      	beq.n	80019f2 <output_ascii_cmdack+0x3fe>
		{
			//if (((cmd_ack & 0x80) == CMR_SUCCESSFULL))
			if((cmd_ack == CMR_SEMICOLONONLY) || ((cmd_ack & 0x80) == CMR_SUCCESSFULL))
 80019da:	797b      	ldrb	r3, [r7, #5]
 80019dc:	2bff      	cmp	r3, #255	@ 0xff
 80019de:	d003      	beq.n	80019e8 <output_ascii_cmdack+0x3f4>
 80019e0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da04      	bge.n	80019f2 <output_ascii_cmdack+0x3fe>
				uartRB_Put(&usart3_rb,";", 1);
 80019e8:	2201      	movs	r2, #1
 80019ea:	4911      	ldr	r1, [pc, #68]	@ (8001a30 <output_ascii_cmdack+0x43c>)
 80019ec:	4811      	ldr	r0, [pc, #68]	@ (8001a34 <output_ascii_cmdack+0x440>)
 80019ee:	f000 fdc7 	bl	8002580 <uartRB_Put>

		};
	}

	if((crlf_flg & 0x01) > 0)
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	dd04      	ble.n	8001a06 <output_ascii_cmdack+0x412>
	{	//crlf_char= "\r";        //d.h. CR
		uartRB_Put(&usart3_rb,"\r", 1);
 80019fc:	2201      	movs	r2, #1
 80019fe:	490e      	ldr	r1, [pc, #56]	@ (8001a38 <output_ascii_cmdack+0x444>)
 8001a00:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <output_ascii_cmdack+0x440>)
 8001a02:	f000 fdbd 	bl	8002580 <uartRB_Put>
	}
	if((crlf_flg & 0x02) > 0)
 8001a06:	79bb      	ldrb	r3, [r7, #6]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	dd04      	ble.n	8001a1a <output_ascii_cmdack+0x426>
	{	//*crlf_char=";
		uartRB_Put(&usart3_rb,"\n", 1);
 8001a10:	2201      	movs	r2, #1
 8001a12:	490a      	ldr	r1, [pc, #40]	@ (8001a3c <output_ascii_cmdack+0x448>)
 8001a14:	4807      	ldr	r0, [pc, #28]	@ (8001a34 <output_ascii_cmdack+0x440>)
 8001a16:	f000 fdb3 	bl	8002580 <uartRB_Put>
	}
	uartRB_KickTx(&usart3_rb);
 8001a1a:	4806      	ldr	r0, [pc, #24]	@ (8001a34 <output_ascii_cmdack+0x440>)
 8001a1c:	f000 fd6a 	bl	80024f4 <uartRB_KickTx>
}
 8001a20:	bf00      	nop
 8001a22:	3770      	adds	r7, #112	@ 0x70
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bdb0      	pop	{r4, r5, r7, pc}
 8001a28:	08007e04 	.word	0x08007e04
 8001a2c:	08007cb0 	.word	0x08007cb0
 8001a30:	08007cac 	.word	0x08007cac
 8001a34:	20000a08 	.word	0x20000a08
 8001a38:	08007e1c 	.word	0x08007e1c
 8001a3c:	08007e20 	.word	0x08007e20

08001a40 <Binary_Search>:

//Die interne Befehlnummer werden für den eingegebenen Befehl zurückgeliefert.
void Binary_Search(uint8_t ncmd, char* key, uint16_t *cmdindex)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	73fb      	strb	r3, [r7, #15]
	volatile uint16_t low = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	83fb      	strh	r3, [r7, #30]
	volatile uint16_t high =  ncmd - 1;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	83bb      	strh	r3, [r7, #28]
	volatile uint16_t mid;
	volatile int sflag;
	volatile uint8_t flag = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	74fb      	strb	r3, [r7, #19]

	while ((low <= high) && (flag == 0))
 8001a60:	e045      	b.n	8001aee <Binary_Search+0xae>
	{
		mid = ((low + high) >> 1);
 8001a62:	8bfb      	ldrh	r3, [r7, #30]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	8bbb      	ldrh	r3, [r7, #28]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	105b      	asrs	r3, r3, #1
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	837b      	strh	r3, [r7, #26]
		sflag = strcmp(key, (char*)&(ASCIICmdTable[mid].cmdline));
 8001a74:	8b7b      	ldrh	r3, [r7, #26]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	2316      	movs	r3, #22
 8001a7c:	fb02 f303 	mul.w	r3, r2, r3
 8001a80:	4a27      	ldr	r2, [pc, #156]	@ (8001b20 <Binary_Search+0xe0>)
 8001a82:	4413      	add	r3, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	68b8      	ldr	r0, [r7, #8]
 8001a88:	f7fe fbca 	bl	8000220 <strcmp>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	617b      	str	r3, [r7, #20]

		if(sflag < 0)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	da12      	bge.n	8001abc <Binary_Search+0x7c>
		{
		    if(mid != 0) {
 8001a96:	8b7b      	ldrh	r3, [r7, #26]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <Binary_Search+0x6a>
		        high = mid - 1;
 8001a9e:	8b7b      	ldrh	r3, [r7, #26]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	83bb      	strh	r3, [r7, #28]
 8001aa8:	e005      	b.n	8001ab6 <Binary_Search+0x76>
		    } else {
		        if(low != 0) {
 8001aaa:	8bfb      	ldrh	r3, [r7, #30]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d028      	beq.n	8001b04 <Binary_Search+0xc4>
		            high = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	83bb      	strh	r3, [r7, #28]
		        } else {
		            break;
		        }
		    }
			flag = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	74fb      	strb	r3, [r7, #19]
 8001aba:	e018      	b.n	8001aee <Binary_Search+0xae>
		}
		else if(sflag == 0)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10e      	bne.n	8001ae0 <Binary_Search+0xa0>
		{

			*cmdindex =ASCIICmdTable[mid].cmdindex;
 8001ac2:	8b7b      	ldrh	r3, [r7, #26]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4a15      	ldr	r2, [pc, #84]	@ (8001b20 <Binary_Search+0xe0>)
 8001aca:	2316      	movs	r3, #22
 8001acc:	fb01 f303 	mul.w	r3, r1, r3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3314      	adds	r3, #20
 8001ad4:	881a      	ldrh	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	801a      	strh	r2, [r3, #0]
			flag = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	74fb      	strb	r3, [r7, #19]
 8001ade:	e006      	b.n	8001aee <Binary_Search+0xae>
		}
		else
		{
			low = mid + 1;
 8001ae0:	8b7b      	ldrh	r3, [r7, #26]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	83fb      	strh	r3, [r7, #30]
			flag = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	74fb      	strb	r3, [r7, #19]
	while ((low <= high) && (flag == 0))
 8001aee:	8bfb      	ldrh	r3, [r7, #30]
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	8bbb      	ldrh	r3, [r7, #28]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d805      	bhi.n	8001b06 <Binary_Search+0xc6>
 8001afa:	7cfb      	ldrb	r3, [r7, #19]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0af      	beq.n	8001a62 <Binary_Search+0x22>
 8001b02:	e000      	b.n	8001b06 <Binary_Search+0xc6>
		            break;
 8001b04:	bf00      	nop
		}

	};

	if (flag == 0)   //Falls die Tabelle diesen Befehl nicht enthältet,
 8001b06:	7cfb      	ldrb	r3, [r7, #19]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d103      	bne.n	8001b16 <Binary_Search+0xd6>
	{
		*cmdindex = BINARY_INDEX_MAX;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b14:	801a      	strh	r2, [r3, #0]
	};
}
 8001b16:	bf00      	nop
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	08007e2c 	.word	0x08007e2c

08001b24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b9c <MX_SPI1_Init+0x78>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b36:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b3c:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b3e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001b42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b44:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b46:	2202      	movs	r2, #2
 8001b48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b4a:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b72:	2207      	movs	r2, #7
 8001b74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <MX_SPI1_Init+0x74>)
 8001b84:	f002 ff68 	bl	8004a58 <HAL_SPI_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b8e:	f7fe fee2 	bl	8000956 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000144 	.word	0x20000144
 8001b9c:	40013000 	.word	0x40013000

08001ba0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	@ 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a17      	ldr	r2, [pc, #92]	@ (8001c1c <HAL_SPI_MspInit+0x7c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d128      	bne.n	8001c14 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bc2:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <HAL_SPI_MspInit+0x80>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc6:	4a16      	ldr	r2, [pc, #88]	@ (8001c20 <HAL_SPI_MspInit+0x80>)
 8001bc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bce:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <HAL_SPI_MspInit+0x80>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <HAL_SPI_MspInit+0x80>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	4a10      	ldr	r2, [pc, #64]	@ (8001c20 <HAL_SPI_MspInit+0x80>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <HAL_SPI_MspInit+0x80>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bf2:	23e0      	movs	r3, #224	@ 0xe0
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c02:	2305      	movs	r3, #5
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c10:	f001 fd26 	bl	8003660 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c14:	bf00      	nop
 8001c16:	3728      	adds	r7, #40	@ 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40013000 	.word	0x40013000
 8001c20:	40021000 	.word	0x40021000

08001c24 <stacks_insert_cmd>:
		mcstackindex_list[i] = mcstackindex_list_act - i;
	};
}

uint8_t stacks_insert_cmd(stack_item stack[], uint8_t stack_length, uint8_t stackindex_list[], stack_item stack_data, uint8_t *stackindexlist_act, uint8_t *stackindex)
{
 8001c24:	b082      	sub	sp, #8
 8001c26:	b490      	push	{r4, r7}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c32:	460b      	mov	r3, r1
 8001c34:	72fb      	strb	r3, [r7, #11]
	uint8_t index_tmp;
	uint8_t flag;

	if ( (*stackindexlist_act >= 0)  && (*stackindexlist_act < stack_length) )          //wenn es einen freien Platz gibt,
 8001c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	7afa      	ldrb	r2, [r7, #11]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d923      	bls.n	8001c88 <stacks_insert_cmd+0x64>
	{
		index_tmp = *stackindexlist_act;
 8001c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	75bb      	strb	r3, [r7, #22]
		*stackindex = stackindex_list[index_tmp];                    //fügt einen Element in den Stack ein
 8001c46:	7dbb      	ldrb	r3, [r7, #22]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c50:	701a      	strb	r2, [r3, #0]
		stack[*stackindex] = stack_data;
 8001c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	461c      	mov	r4, r3
 8001c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if (index_tmp == 0 )                                     //d.h. es keine leer Platz mehr im Stack nach dem Einfügen gibt.
 8001c68:	7dbb      	ldrb	r3, [r7, #22]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d103      	bne.n	8001c76 <stacks_insert_cmd+0x52>
		{
			*stackindexlist_act = NONEXT;           //NONEXT bezeichnet: der Stack ist voll, weil die negative Zahl nicht erlaubt ist.
 8001c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c70:	22ff      	movs	r2, #255	@ 0xff
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e005      	b.n	8001c82 <stacks_insert_cmd+0x5e>
		}
		else
		{
			index_tmp -=1;
 8001c76:	7dbb      	ldrb	r3, [r7, #22]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	75bb      	strb	r3, [r7, #22]
			*stackindexlist_act = index_tmp;
 8001c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c7e:	7dba      	ldrb	r2, [r7, #22]
 8001c80:	701a      	strb	r2, [r3, #0]
		};
		flag = STACK_INTSERT_OK;
 8001c82:	2314      	movs	r3, #20
 8001c84:	75fb      	strb	r3, [r7, #23]
 8001c86:	e001      	b.n	8001c8c <stacks_insert_cmd+0x68>
	}
	else //Falls der Stack voll ist,
	{
		flag = CMR_UNITBUSY;
 8001c88:	2309      	movs	r3, #9
 8001c8a:	75fb      	strb	r3, [r7, #23]
	};

	return flag;
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc90      	pop	{r4, r7}
 8001c96:	b002      	add	sp, #8
 8001c98:	4770      	bx	lr
	...

08001c9c <z_mc_stack_insert>:

uint8_t z_mc_stack_insert(stack_item stack_data, uint8_t mc_flg)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b091      	sub	sp, #68	@ 0x44
 8001ca0:	af06      	add	r7, sp, #24
 8001ca2:	463c      	mov	r4, r7
 8001ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t flag = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t push_result = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t prio_pushflg = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t stack_index = NONEXT;
 8001cba:	23ff      	movs	r3, #255	@ 0xff
 8001cbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t mc_push_enable = 0;  //=0: es ist nicht erlaubt, die Befehlen in den MC- Stack einlegen; > 1: es ist erlaubt; =1: die Befehlen aus der Zentrale;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	//=2: aus der anderen Quellen.

	stack_item stack_tmp;

	if (mc_flg)   // d.h. der Befehl ist für den MC
 8001cc6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d067      	beq.n	8001d9e <z_mc_stack_insert+0x102>
	{
		if (stack_data.cmd_sender == Q_ZENTRALE)
 8001cce:	783b      	ldrb	r3, [r7, #0]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d103      	bne.n	8001cdc <z_mc_stack_insert+0x40>
		{
			mc_push_enable = 1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001cda:	e00e      	b.n	8001cfa <z_mc_stack_insert+0x5e>
		}
		else
		{
			if (mcstack_rest_length  > 0)
 8001cdc:	4b51      	ldr	r3, [pc, #324]	@ (8001e24 <z_mc_stack_insert+0x188>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <z_mc_stack_insert+0x52>
			{
				mc_push_enable = 2;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001cec:	e005      	b.n	8001cfa <z_mc_stack_insert+0x5e>
			}
			else
			{
				mc_push_enable = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				flag = CMR_UNITBUSY;
 8001cf4:	2309      	movs	r3, #9
 8001cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			};
		};

		if (mc_push_enable > 0)
 8001cfa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8089 	beq.w	8001e16 <z_mc_stack_insert+0x17a>
		{
			push_result = stacks_insert_cmd(mc_stack, MC_STACK_SIZE, mcstackindex_list, stack_data, &mcstackindex_list_act, &stack_index);
 8001d04:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8001d08:	9304      	str	r3, [sp, #16]
 8001d0a:	4b47      	ldr	r3, [pc, #284]	@ (8001e28 <z_mc_stack_insert+0x18c>)
 8001d0c:	9303      	str	r3, [sp, #12]
 8001d0e:	466c      	mov	r4, sp
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	4a43      	ldr	r2, [pc, #268]	@ (8001e2c <z_mc_stack_insert+0x190>)
 8001d1e:	2114      	movs	r1, #20
 8001d20:	4843      	ldr	r0, [pc, #268]	@ (8001e30 <z_mc_stack_insert+0x194>)
 8001d22:	f7ff ff7f 	bl	8001c24 <stacks_insert_cmd>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			if (push_result == STACK_INTSERT_OK)
 8001d2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d30:	2b14      	cmp	r3, #20
 8001d32:	d130      	bne.n	8001d96 <z_mc_stack_insert+0xfa>
			{
				prio_pushflg = priolist_push(mc_priolist, MC_STACK_SIZE, mc_priolevel_header,  &mcpriolist_firstunused_index, stack_index, stack_data.prio);
 8001d34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d38:	7b7a      	ldrb	r2, [r7, #13]
 8001d3a:	9201      	str	r2, [sp, #4]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e34 <z_mc_stack_insert+0x198>)
 8001d40:	4a3d      	ldr	r2, [pc, #244]	@ (8001e38 <z_mc_stack_insert+0x19c>)
 8001d42:	2114      	movs	r1, #20
 8001d44:	483d      	ldr	r0, [pc, #244]	@ (8001e3c <z_mc_stack_insert+0x1a0>)
 8001d46:	f7fe fe0c 	bl	8000962 <priolist_push>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				if (prio_pushflg )
 8001d50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <z_mc_stack_insert+0xe4>
				{
					flag = STACK_CMDINSTACK;
 8001d58:	2311      	movs	r3, #17
 8001d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					if (mc_push_enable == 2)
 8001d5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d157      	bne.n	8001e16 <z_mc_stack_insert+0x17a>
					{
						if (mcstack_rest_length > 0)
 8001d66:	4b2f      	ldr	r3, [pc, #188]	@ (8001e24 <z_mc_stack_insert+0x188>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d052      	beq.n	8001e16 <z_mc_stack_insert+0x17a>
						{
							mcstack_rest_length -=1;                   //die Plätze für die Befehle aus den anderen Quelle ausser der Zentrale wird einen weniger sein.
 8001d70:	4b2c      	ldr	r3, [pc, #176]	@ (8001e24 <z_mc_stack_insert+0x188>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e24 <z_mc_stack_insert+0x188>)
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	e04a      	b.n	8001e16 <z_mc_stack_insert+0x17a>

					};
				}
				else
				{
					mcstack_pop(&stack_tmp, stack_data.prio);
 8001d80:	7b7a      	ldrb	r2, [r7, #13]
 8001d82:	f107 0310 	add.w	r3, r7, #16
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 f87f 	bl	8001e8c <mcstack_pop>
					flag = STACK_PRIOLIST_ERROR;
 8001d8e:	2313      	movs	r3, #19
 8001d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d94:	e03f      	b.n	8001e16 <z_mc_stack_insert+0x17a>
				}
			}
			else
			{
				flag = CMR_UNITBUSY;
 8001d96:	2309      	movs	r3, #9
 8001d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d9c:	e03b      	b.n	8001e16 <z_mc_stack_insert+0x17a>
		};
	}
	else //d.h. der Befehl wird an die Zentrale gesendet
	{

		push_result = stacks_insert_cmd(zentrale_stack, Z_STACK_SIZE, zstackindex_list, stack_data, &zstackindex_list_act, &stack_index);
 8001d9e:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8001da2:	9304      	str	r3, [sp, #16]
 8001da4:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <z_mc_stack_insert+0x1a4>)
 8001da6:	9303      	str	r3, [sp, #12]
 8001da8:	466c      	mov	r4, sp
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001db0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4a23      	ldr	r2, [pc, #140]	@ (8001e44 <z_mc_stack_insert+0x1a8>)
 8001db8:	211e      	movs	r1, #30
 8001dba:	4823      	ldr	r0, [pc, #140]	@ (8001e48 <z_mc_stack_insert+0x1ac>)
 8001dbc:	f7ff ff32 	bl	8001c24 <stacks_insert_cmd>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		if (push_result == STACK_INTSERT_OK)
 8001dc6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001dca:	2b14      	cmp	r3, #20
 8001dcc:	d120      	bne.n	8001e10 <z_mc_stack_insert+0x174>
		{
			prio_pushflg = priolist_push(z_priolist, Z_STACK_SIZE, z_priolevel_header, &zpriolist_firstunused_index, stack_index, stack_data.prio);
 8001dce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001dd2:	7b7a      	ldrb	r2, [r7, #13]
 8001dd4:	9201      	str	r2, [sp, #4]
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <z_mc_stack_insert+0x1b0>)
 8001dda:	4a1d      	ldr	r2, [pc, #116]	@ (8001e50 <z_mc_stack_insert+0x1b4>)
 8001ddc:	211e      	movs	r1, #30
 8001dde:	481d      	ldr	r0, [pc, #116]	@ (8001e54 <z_mc_stack_insert+0x1b8>)
 8001de0:	f7fe fdbf 	bl	8000962 <priolist_push>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			if (prio_pushflg )
 8001dea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <z_mc_stack_insert+0x15e>
			{
				flag = STACK_CMDINSTACK;
 8001df2:	2311      	movs	r3, #17
 8001df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001df8:	e00d      	b.n	8001e16 <z_mc_stack_insert+0x17a>
			}
			else
			{
				zstack_pop(&stack_tmp, stack_data.prio);
 8001dfa:	7b7a      	ldrb	r2, [r7, #13]
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f898 	bl	8001f38 <zstack_pop>
				flag = STACK_PRIOLIST_ERROR;
 8001e08:	2313      	movs	r3, #19
 8001e0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001e0e:	e002      	b.n	8001e16 <z_mc_stack_insert+0x17a>
			} ;
		}
		else
		{

			flag = CMR_UNITBUSY;
 8001e10:	2309      	movs	r3, #9
 8001e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		};
	};
	return flag;
 8001e16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	372c      	adds	r7, #44	@ 0x2c
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd90      	pop	{r4, r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200004fe 	.word	0x200004fe
 8001e28:	200004fd 	.word	0x200004fd
 8001e2c:	200004e8 	.word	0x200004e8
 8001e30:	20000388 	.word	0x20000388
 8001e34:	200000e8 	.word	0x200000e8
 8001e38:	200000e4 	.word	0x200000e4
 8001e3c:	200000b8 	.word	0x200000b8
 8001e40:	200004fc 	.word	0x200004fc
 8001e44:	200004c8 	.word	0x200004c8
 8001e48:	200001a8 	.word	0x200001a8
 8001e4c:	200000e7 	.word	0x200000e7
 8001e50:	200000e0 	.word	0x200000e0
 8001e54:	2000007c 	.word	0x2000007c

08001e58 <stack_insert_sero>:



uint8_t stack_insert_sero(stack_item stack_data)
{
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b089      	sub	sp, #36	@ 0x24
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	463c      	mov	r4, r7
 8001e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t flag = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	75fb      	strb	r3, [r7, #23]
	uint8_t mc_flg = 0;                            //bezeichnet, dass der Befehl für die Zentrale ist, wenn es 0 ist; für den MC , wenn es 1 ist.
 8001e68:	2300      	movs	r3, #0
 8001e6a:	75bb      	strb	r3, [r7, #22]

	//hier gibt es nur die Befehle für die Zentrale,

	mc_flg = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	75bb      	strb	r3, [r7, #22]
	flag = z_mc_stack_insert(stack_data, mc_flg);
 8001e70:	7dbb      	ldrb	r3, [r7, #22]
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	463b      	mov	r3, r7
 8001e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e78:	f7ff ff10 	bl	8001c9c <z_mc_stack_insert>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	75fb      	strb	r3, [r7, #23]
	return flag;
 8001e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd90      	pop	{r4, r7, pc}
	...

08001e8c <mcstack_pop>:


uint8_t mcstack_pop(stack_item *sitem, uint8_t priolevel)
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	70fb      	strb	r3, [r7, #3]
	uint8_t flag = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
	uint8_t sindex;

	sindex = priolist_pop(mc_priolist, mc_priolevel_header, &mcpriolist_firstunused_index, priolevel);
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8001f1c <mcstack_pop+0x90>)
 8001ea0:	491f      	ldr	r1, [pc, #124]	@ (8001f20 <mcstack_pop+0x94>)
 8001ea2:	4820      	ldr	r0, [pc, #128]	@ (8001f24 <mcstack_pop+0x98>)
 8001ea4:	f7fe fe09 	bl	8000aba <priolist_pop>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	73bb      	strb	r3, [r7, #14]
	if (sindex == NONEXT)  // die zu der Priorität entsprechende MCStacklist ist leer
 8001eac:	7bbb      	ldrb	r3, [r7, #14]
 8001eae:	2bff      	cmp	r3, #255	@ 0xff
 8001eb0:	d102      	bne.n	8001eb8 <mcstack_pop+0x2c>
	{
		flag = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	e02c      	b.n	8001f12 <mcstack_pop+0x86>

	}
	else
	{

			*sitem = mc_stack[sindex];
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8001f28 <mcstack_pop+0x9c>)
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	4413      	add	r3, r2
 8001ec2:	460c      	mov	r4, r1
 8001ec4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if (mcstackindex_list_act == NONEXT)
 8001eca:	4b18      	ldr	r3, [pc, #96]	@ (8001f2c <mcstack_pop+0xa0>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2bff      	cmp	r3, #255	@ 0xff
 8001ed0:	d103      	bne.n	8001eda <mcstack_pop+0x4e>
			{
				mcstackindex_list_act =0;
 8001ed2:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <mcstack_pop+0xa0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	e005      	b.n	8001ee6 <mcstack_pop+0x5a>

			}
			else
			{
				mcstackindex_list_act +=1;
 8001eda:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <mcstack_pop+0xa0>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <mcstack_pop+0xa0>)
 8001ee4:	701a      	strb	r2, [r3, #0]

			};

			mcstackindex_list[mcstackindex_list_act] = sindex;
 8001ee6:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <mcstack_pop+0xa0>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	4a10      	ldr	r2, [pc, #64]	@ (8001f30 <mcstack_pop+0xa4>)
 8001eee:	7bbb      	ldrb	r3, [r7, #14]
 8001ef0:	5453      	strb	r3, [r2, r1]

			if (mc_stack[sindex].cmd_sender != Q_ZENTRALE)
 8001ef2:	7bbb      	ldrb	r3, [r7, #14]
 8001ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f28 <mcstack_pop+0x9c>)
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4413      	add	r3, r2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d006      	beq.n	8001f0e <mcstack_pop+0x82>
			{
				mcstack_rest_length += 1;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <mcstack_pop+0xa8>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <mcstack_pop+0xa8>)
 8001f0c:	701a      	strb	r2, [r3, #0]
			};

			flag = 1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]

	};
	return flag;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd90      	pop	{r4, r7, pc}
 8001f1c:	200000e8 	.word	0x200000e8
 8001f20:	200000e4 	.word	0x200000e4
 8001f24:	200000b8 	.word	0x200000b8
 8001f28:	20000388 	.word	0x20000388
 8001f2c:	200004fd 	.word	0x200004fd
 8001f30:	200004e8 	.word	0x200004e8
 8001f34:	200004fe 	.word	0x200004fe

08001f38 <zstack_pop>:

uint8_t zstack_pop(stack_item *sitem, uint8_t priolevel)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
	uint8_t flag = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
	uint8_t sindex;
	//uint8_t indexlist_tmp;

	sindex =  priolist_pop(z_priolist, z_priolevel_header, &zpriolist_firstunused_index, priolevel);
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	4a18      	ldr	r2, [pc, #96]	@ (8001fac <zstack_pop+0x74>)
 8001f4c:	4918      	ldr	r1, [pc, #96]	@ (8001fb0 <zstack_pop+0x78>)
 8001f4e:	4819      	ldr	r0, [pc, #100]	@ (8001fb4 <zstack_pop+0x7c>)
 8001f50:	f7fe fdb3 	bl	8000aba <priolist_pop>
 8001f54:	4603      	mov	r3, r0
 8001f56:	73bb      	strb	r3, [r7, #14]

	if (sindex == NONEXT)  // die zu der Priorität entsprechende MCStacklist ist leer
 8001f58:	7bbb      	ldrb	r3, [r7, #14]
 8001f5a:	2bff      	cmp	r3, #255	@ 0xff
 8001f5c:	d102      	bne.n	8001f64 <zstack_pop+0x2c>
	{
		flag = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]
 8001f62:	e01e      	b.n	8001fa2 <zstack_pop+0x6a>

	}
	else
	{
		*sitem = zentrale_stack[sindex];
 8001f64:	7bbb      	ldrb	r3, [r7, #14]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4a13      	ldr	r2, [pc, #76]	@ (8001fb8 <zstack_pop+0x80>)
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4413      	add	r3, r2
 8001f6e:	460c      	mov	r4, r1
 8001f70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if (zstackindex_list_act == NONEXT)
 8001f76:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <zstack_pop+0x84>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2bff      	cmp	r3, #255	@ 0xff
 8001f7c:	d103      	bne.n	8001f86 <zstack_pop+0x4e>
		{
			zstackindex_list_act = 0;
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fbc <zstack_pop+0x84>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
 8001f84:	e005      	b.n	8001f92 <zstack_pop+0x5a>
		}
		else
		{
			zstackindex_list_act +=1;
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <zstack_pop+0x84>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <zstack_pop+0x84>)
 8001f90:	701a      	strb	r2, [r3, #0]
		};
		zstackindex_list[zstackindex_list_act] = sindex;
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <zstack_pop+0x84>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	4619      	mov	r1, r3
 8001f98:	4a09      	ldr	r2, [pc, #36]	@ (8001fc0 <zstack_pop+0x88>)
 8001f9a:	7bbb      	ldrb	r3, [r7, #14]
 8001f9c:	5453      	strb	r3, [r2, r1]

		flag = 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]

	};
	return flag;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}
 8001fac:	200000e7 	.word	0x200000e7
 8001fb0:	200000e0 	.word	0x200000e0
 8001fb4:	2000007c 	.word	0x2000007c
 8001fb8:	200001a8 	.word	0x200001a8
 8001fbc:	200004fc 	.word	0x200004fc
 8001fc0:	200004c8 	.word	0x200004c8

08001fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <HAL_MspInit+0x44>)
 8001fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fce:	4a0e      	ldr	r2, [pc, #56]	@ (8002008 <HAL_MspInit+0x44>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <HAL_MspInit+0x44>)
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_MspInit+0x44>)
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe6:	4a08      	ldr	r2, [pc, #32]	@ (8002008 <HAL_MspInit+0x44>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_MspInit+0x44>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ffa:	f001 fda1 	bl	8003b40 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000

0800200c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <NMI_Handler+0x4>

08002014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <HardFault_Handler+0x4>

0800201c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <MemManage_Handler+0x4>

08002024 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <BusFault_Handler+0x4>

0800202c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <UsageFault_Handler+0x4>

08002034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002062:	f001 f97b 	bl	800335c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002074:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <_sbrk+0x5c>)
 8002076:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <_sbrk+0x60>)
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002080:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <_sbrk+0x64>)
 800208a:	4a12      	ldr	r2, [pc, #72]	@ (80020d4 <_sbrk+0x68>)
 800208c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208e:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	429a      	cmp	r2, r3
 800209a:	d207      	bcs.n	80020ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800209c:	f005 f96a 	bl	8007374 <__errno>
 80020a0:	4603      	mov	r3, r0
 80020a2:	220c      	movs	r2, #12
 80020a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	e009      	b.n	80020c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b2:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	4a05      	ldr	r2, [pc, #20]	@ (80020d0 <_sbrk+0x64>)
 80020bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20020000 	.word	0x20020000
 80020cc:	00000400 	.word	0x00000400
 80020d0:	20000500 	.word	0x20000500
 80020d4:	20000ff0 	.word	0x20000ff0

080020d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <SystemInit+0x20>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <SystemInit+0x20>)
 80020e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08c      	sub	sp, #48	@ 0x30
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0320 	add.w	r3, r7, #32
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002110:	f107 030c 	add.w	r3, r7, #12
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002120:	463b      	mov	r3, r7
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800212a:	4b27      	ldr	r3, [pc, #156]	@ (80021c8 <MX_TIM1_Init+0xcc>)
 800212c:	4a27      	ldr	r2, [pc, #156]	@ (80021cc <MX_TIM1_Init+0xd0>)
 800212e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8002130:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <MX_TIM1_Init+0xcc>)
 8002132:	22a0      	movs	r2, #160	@ 0xa0
 8002134:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002136:	4b24      	ldr	r3, [pc, #144]	@ (80021c8 <MX_TIM1_Init+0xcc>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59;
 800213c:	4b22      	ldr	r3, [pc, #136]	@ (80021c8 <MX_TIM1_Init+0xcc>)
 800213e:	223b      	movs	r2, #59	@ 0x3b
 8002140:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002142:	4b21      	ldr	r3, [pc, #132]	@ (80021c8 <MX_TIM1_Init+0xcc>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002148:	4b1f      	ldr	r3, [pc, #124]	@ (80021c8 <MX_TIM1_Init+0xcc>)
 800214a:	2200      	movs	r2, #0
 800214c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214e:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <MX_TIM1_Init+0xcc>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002154:	481c      	ldr	r0, [pc, #112]	@ (80021c8 <MX_TIM1_Init+0xcc>)
 8002156:	f002 fd2a 	bl	8004bae <HAL_TIM_Base_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002160:	f7fe fbf9 	bl	8000956 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002168:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800216a:	f107 0320 	add.w	r3, r7, #32
 800216e:	4619      	mov	r1, r3
 8002170:	4815      	ldr	r0, [pc, #84]	@ (80021c8 <MX_TIM1_Init+0xcc>)
 8002172:	f002 fd73 	bl	8004c5c <HAL_TIM_ConfigClockSource>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800217c:	f7fe fbeb 	bl	8000956 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002188:	f107 030c 	add.w	r3, r7, #12
 800218c:	4619      	mov	r1, r3
 800218e:	480e      	ldr	r0, [pc, #56]	@ (80021c8 <MX_TIM1_Init+0xcc>)
 8002190:	f002 fe70 	bl	8004e74 <HAL_TIM_SlaveConfigSynchro>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800219a:	f7fe fbdc 	bl	8000956 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021aa:	463b      	mov	r3, r7
 80021ac:	4619      	mov	r1, r3
 80021ae:	4806      	ldr	r0, [pc, #24]	@ (80021c8 <MX_TIM1_Init+0xcc>)
 80021b0:	f003 f8c8 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80021ba:	f7fe fbcc 	bl	8000956 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	3730      	adds	r7, #48	@ 0x30
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000504 	.word	0x20000504
 80021cc:	40012c00 	.word	0x40012c00

080021d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <HAL_TIM_Base_MspInit+0x38>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10b      	bne.n	80021fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021e2:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <HAL_TIM_Base_MspInit+0x3c>)
 80021e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e6:	4a09      	ldr	r2, [pc, #36]	@ (800220c <HAL_TIM_Base_MspInit+0x3c>)
 80021e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80021ee:	4b07      	ldr	r3, [pc, #28]	@ (800220c <HAL_TIM_Base_MspInit+0x3c>)
 80021f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40012c00 	.word	0x40012c00
 800220c:	40021000 	.word	0x40021000

08002210 <ct_start_null>:
    if (tmp <= 0) return 1;
    else return 0;
}
// START Stoppuhr abfragen
uint8_t ct_start_null(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_start;
 8002216:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <ct_start_null+0x24>)
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <ct_start_null+0x16>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <ct_start_null+0x18>
    else return 0;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	20000550 	.word	0x20000550

08002238 <set_ct_hbeat>:

// HEARTBEAT Stoppuhr setzen
void set_ct_hbeat(uint16_t ct_hbeatval)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	80fb      	strh	r3, [r7, #6]
    ct_hbeat = ct_hbeatval;
 8002242:	4a04      	ldr	r2, [pc, #16]	@ (8002254 <set_ct_hbeat+0x1c>)
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	8013      	strh	r3, [r2, #0]

}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	20000552 	.word	0x20000552

08002258 <ct_hbeat_null>:

// HEARTBEAT Stoppuhr abfragen
uint8_t ct_hbeat_null(void)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_hbeat;
 800225e:	4b07      	ldr	r3, [pc, #28]	@ (800227c <ct_hbeat_null+0x24>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <ct_hbeat_null+0x16>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <ct_hbeat_null+0x18>
    else return 0;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	20000552 	.word	0x20000552

08002280 <ct_init_null>:

}

// INIT Stoppuhr abfragen
uint8_t ct_init_null(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_init;
 8002286:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <ct_init_null+0x24>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <ct_init_null+0x16>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <ct_init_null+0x18>
    else return 0;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	20000554 	.word	0x20000554

080022a8 <HAL_UART_RxCpltCallback>:
int16_t rb_free_rx(UartRB *p);
int16_t rb_free_tx(UartRB *p);
//----- INTERRUPT ROUTINEN ----------------------------------------------------

// Reception interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	uartRB_OnRxCplt(&uart4_rb, huart);
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4807      	ldr	r0, [pc, #28]	@ (80022d0 <HAL_UART_RxCpltCallback+0x28>)
 80022b4:	f000 f812 	bl	80022dc <uartRB_OnRxCplt>
	uartRB_OnRxCplt(&uart5_rb, huart);
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4806      	ldr	r0, [pc, #24]	@ (80022d4 <HAL_UART_RxCpltCallback+0x2c>)
 80022bc:	f000 f80e 	bl	80022dc <uartRB_OnRxCplt>
	uartRB_OnRxCplt(&usart1_rb, huart);
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4805      	ldr	r0, [pc, #20]	@ (80022d8 <HAL_UART_RxCpltCallback+0x30>)
 80022c4:	f000 f80a 	bl	80022dc <uartRB_OnRxCplt>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000558 	.word	0x20000558
 80022d4:	200006e8 	.word	0x200006e8
 80022d8:	20000878 	.word	0x20000878

080022dc <uartRB_OnRxCplt>:
	uartRB_OnTxCplt(&uart4_rb, huart);
	uartRB_OnTxCplt(&uart5_rb, huart);
	uartRB_OnTxCplt(&usart1_rb, huart);
}

void uartRB_OnRxCplt(UartRB *p, UART_HandleTypeDef *huart) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
	if (huart != p->huart)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d12d      	bne.n	800234c <uartRB_OnRxCplt+0x70>
		return;

	if (1 < rb_free_rx(p))                        // noch Platz f�r ein Zeichen?
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f8ac 	bl	800244e <rb_free_rx>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	dd19      	ble.n	8002330 <uartRB_OnRxCplt+0x54>
			{
		p->rx[p->rx_in] = p->it_rx;                      // Zeichen �bernehmen
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	895b      	ldrh	r3, [r3, #10]
 8002300:	b29b      	uxth	r3, r3
 8002302:	4619      	mov	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	440b      	add	r3, r1
 800230e:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		p->rx_in++;                                       // Zeiger weiterr�cken
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	895b      	ldrh	r3, [r3, #10]
 8002316:	b29b      	uxth	r3, r3
 8002318:	3301      	adds	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	815a      	strh	r2, [r3, #10]
		if (p->rx_in >= BUFLEN)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	895b      	ldrh	r3, [r3, #10]
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b7e      	cmp	r3, #126	@ 0x7e
 8002328:	d902      	bls.n	8002330 <uartRB_OnRxCplt+0x54>
			p->rx_in = 0;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	815a      	strh	r2, [r3, #10]
	}

	while (HAL_UART_Receive_IT(p->huart, &p->it_rx, 1) != HAL_OK) {
 8002330:	bf00      	nop
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800233c:	2201      	movs	r2, #1
 800233e:	4619      	mov	r1, r3
 8002340:	f003 f97a 	bl	8005638 <HAL_UART_Receive_IT>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f3      	bne.n	8002332 <uartRB_OnRxCplt+0x56>
 800234a:	e000      	b.n	800234e <uartRB_OnRxCplt+0x72>
		return;
 800234c:	bf00      	nop
	}
}
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <uart_initAll>:

//----- FUNKTIONSDEFINITIONEN -------------------------------------------------

/******************** RS232 ***********************/

void uart_initAll(void) {
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	uartRB_Init(&uart4_rb, &huart4, UART4_IRQn);
 8002358:	2234      	movs	r2, #52	@ 0x34
 800235a:	490a      	ldr	r1, [pc, #40]	@ (8002384 <uart_initAll+0x30>)
 800235c:	480a      	ldr	r0, [pc, #40]	@ (8002388 <uart_initAll+0x34>)
 800235e:	f000 f821 	bl	80023a4 <uartRB_Init>
	uartRB_Init(&uart5_rb, &huart5, UART5_IRQn);
 8002362:	2235      	movs	r2, #53	@ 0x35
 8002364:	4909      	ldr	r1, [pc, #36]	@ (800238c <uart_initAll+0x38>)
 8002366:	480a      	ldr	r0, [pc, #40]	@ (8002390 <uart_initAll+0x3c>)
 8002368:	f000 f81c 	bl	80023a4 <uartRB_Init>
	uartRB_Init(&usart1_rb, &huart1, USART1_IRQn);
 800236c:	2225      	movs	r2, #37	@ 0x25
 800236e:	4909      	ldr	r1, [pc, #36]	@ (8002394 <uart_initAll+0x40>)
 8002370:	4809      	ldr	r0, [pc, #36]	@ (8002398 <uart_initAll+0x44>)
 8002372:	f000 f817 	bl	80023a4 <uartRB_Init>
	uartRB_Init(&usart3_rb, &huart3, USART3_IRQn);
 8002376:	2227      	movs	r2, #39	@ 0x27
 8002378:	4908      	ldr	r1, [pc, #32]	@ (800239c <uart_initAll+0x48>)
 800237a:	4809      	ldr	r0, [pc, #36]	@ (80023a0 <uart_initAll+0x4c>)
 800237c:	f000 f812 	bl	80023a4 <uartRB_Init>
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000b98 	.word	0x20000b98
 8002388:	20000558 	.word	0x20000558
 800238c:	20000c2c 	.word	0x20000c2c
 8002390:	200006e8 	.word	0x200006e8
 8002394:	20000cc0 	.word	0x20000cc0
 8002398:	20000878 	.word	0x20000878
 800239c:	20000de8 	.word	0x20000de8
 80023a0:	20000a08 	.word	0x20000a08

080023a4 <uartRB_Init>:

void uartRB_Init(UartRB *p, UART_HandleTypeDef *huart, IRQn_Type irqn) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	4613      	mov	r3, r2
 80023b0:	71fb      	strb	r3, [r7, #7]
	p->huart = huart;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	601a      	str	r2, [r3, #0]
	p->irqn = irqn;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	79fa      	ldrb	r2, [r7, #7]
 80023bc:	711a      	strb	r2, [r3, #4]
	p->tx_in = p->tx_out = p->rx_in = p->rx_out = 0;
 80023be:	2200      	movs	r2, #0
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4611      	mov	r1, r2
 80023c4:	8199      	strh	r1, [r3, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4611      	mov	r1, r2
 80023ca:	8159      	strh	r1, [r3, #10]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4611      	mov	r1, r2
 80023d0:	8119      	strh	r1, [r3, #8]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	80da      	strh	r2, [r3, #6]
	HAL_UART_Receive_IT(p->huart, &p->it_rx, 1);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80023e0:	2201      	movs	r2, #1
 80023e2:	4619      	mov	r1, r3
 80023e4:	f003 f928 	bl	8005638 <HAL_UART_Receive_IT>
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <rb_free_tx>:

int16_t rb_free_tx(UartRB *p) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	int16_t x;
	HAL_NVIC_DisableIRQ(p->irqn);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	f001 f913 	bl	800362a <HAL_NVIC_DisableIRQ>
	x = (int16_t) p->tx_in - (int8_t) p->tx_out;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	88db      	ldrh	r3, [r3, #6]
 8002408:	b29a      	uxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	891b      	ldrh	r3, [r3, #8]
 800240e:	b29b      	uxth	r3, r3
 8002410:	b25b      	sxtb	r3, r3
 8002412:	b29b      	uxth	r3, r3
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	b29b      	uxth	r3, r3
 8002418:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 800241a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800241e:	2b00      	cmp	r3, #0
 8002420:	da03      	bge.n	800242a <rb_free_tx+0x3a>
		x += BUFLEN;
 8002422:	89fb      	ldrh	r3, [r7, #14]
 8002424:	337f      	adds	r3, #127	@ 0x7f
 8002426:	b29b      	uxth	r3, r3
 8002428:	81fb      	strh	r3, [r7, #14]
	x = BUFLEN - x;
 800242a:	89fb      	ldrh	r3, [r7, #14]
 800242c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002430:	b29b      	uxth	r3, r3
 8002432:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_EnableIRQ(p->irqn);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800243a:	4618      	mov	r0, r3
 800243c:	f001 f8e7 	bl	800360e <HAL_NVIC_EnableIRQ>
	return (uint8_t) x;
 8002440:	89fb      	ldrh	r3, [r7, #14]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	b21b      	sxth	r3, r3
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <rb_free_rx>:

int16_t rb_free_rx(UartRB *p) {
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
	int16_t x;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800245c:	4618      	mov	r0, r3
 800245e:	f001 f8e4 	bl	800362a <HAL_NVIC_DisableIRQ>
	x = p->rx_in - p->rx_out;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	895b      	ldrh	r3, [r3, #10]
 8002466:	b29a      	uxth	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	899b      	ldrh	r3, [r3, #12]
 800246c:	b29b      	uxth	r3, r3
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	b29b      	uxth	r3, r3
 8002472:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 8002474:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002478:	2b00      	cmp	r3, #0
 800247a:	da03      	bge.n	8002484 <rb_free_rx+0x36>
		x += BUFLEN;
 800247c:	89fb      	ldrh	r3, [r7, #14]
 800247e:	337f      	adds	r3, #127	@ 0x7f
 8002480:	b29b      	uxth	r3, r3
 8002482:	81fb      	strh	r3, [r7, #14]
	x = BUFLEN - x;
 8002484:	89fb      	ldrh	r3, [r7, #14]
 8002486:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800248a:	b29b      	uxth	r3, r3
 800248c:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_EnableIRQ(p->irqn);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002494:	4618      	mov	r0, r3
 8002496:	f001 f8ba 	bl	800360e <HAL_NVIC_EnableIRQ>
	return x;
 800249a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <rb_rx_used>:

int16_t rb_rx_used(const UartRB *p)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
	int16_t used;
    HAL_NVIC_DisableIRQ(p->irqn);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 f8b8 	bl	800362a <HAL_NVIC_DisableIRQ>
    used = (int16_t)p->rx_in - (int32_t)p->rx_out;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	895b      	ldrh	r3, [r3, #10]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	899b      	ldrh	r3, [r3, #12]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	81fb      	strh	r3, [r7, #14]
    if (used < 0) used += BUFLEN;
 80024cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	da03      	bge.n	80024dc <rb_rx_used+0x36>
 80024d4:	89fb      	ldrh	r3, [r7, #14]
 80024d6:	337f      	adds	r3, #127	@ 0x7f
 80024d8:	b29b      	uxth	r3, r3
 80024da:	81fb      	strh	r3, [r7, #14]
    HAL_NVIC_EnableIRQ(p->irqn);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f001 f893 	bl	800360e <HAL_NVIC_EnableIRQ>
    return used;
 80024e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <uartRB_KickTx>:

// is this correct
void uartRB_KickTx(UartRB *p) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

	if (__HAL_UART_GET_FLAG(p->huart, UART_FLAG_TC) == 0)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002508:	2b40      	cmp	r3, #64	@ 0x40
 800250a:	d134      	bne.n	8002576 <uartRB_KickTx+0x82>
		return;
	HAL_NVIC_DisableIRQ(p->irqn);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002512:	4618      	mov	r0, r3
 8002514:	f001 f889 	bl	800362a <HAL_NVIC_DisableIRQ>
// No, we still have something to transmit?
	int16_t free = rb_free_tx(p);          // how many free slots in TX ring
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ff69 	bl	80023f0 <rb_free_tx>
 800251e:	4603      	mov	r3, r0
 8002520:	81fb      	strh	r3, [r7, #14]
	int16_t tmpBuf_out = p->tx_out;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	891b      	ldrh	r3, [r3, #8]
 8002526:	b29b      	uxth	r3, r3
 8002528:	81bb      	strh	r3, [r7, #12]
	if (free < BUFLEN) {               // => there is at least 1 byte pending
 800252a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800252e:	2b7e      	cmp	r3, #126	@ 0x7e
 8002530:	dc1a      	bgt.n	8002568 <uartRB_KickTx+0x74>
		p->tx_out++;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	891b      	ldrh	r3, [r3, #8]
 8002536:	b29b      	uxth	r3, r3
 8002538:	3301      	adds	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	811a      	strh	r2, [r3, #8]
		if (p->tx_out >= BUFLEN) p->tx_out = 0;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	891b      	ldrh	r3, [r3, #8]
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b7e      	cmp	r3, #126	@ 0x7e
 8002548:	d902      	bls.n	8002550 <uartRB_KickTx+0x5c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	811a      	strh	r2, [r3, #8]
		HAL_UART_Transmit_IT(p->huart, &p->tx[tmpBuf_out], 1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002558:	3308      	adds	r3, #8
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	3306      	adds	r3, #6
 8002560:	2201      	movs	r2, #1
 8002562:	4619      	mov	r1, r3
 8002564:	f002 ffd4 	bl	8005510 <HAL_UART_Transmit_IT>
	}
	HAL_NVIC_EnableIRQ(p->irqn);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800256e:	4618      	mov	r0, r3
 8002570:	f001 f84d 	bl	800360e <HAL_NVIC_EnableIRQ>
 8002574:	e000      	b.n	8002578 <uartRB_KickTx+0x84>
		return;
 8002576:	bf00      	nop
}
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <uartRB_Put>:

uint8_t uartRB_Put(UartRB *p, const void *buf, uint8_t n) {
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	4613      	mov	r3, r2
 800258c:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(p->irqn);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002594:	4618      	mov	r0, r3
 8002596:	f001 f848 	bl	800362a <HAL_NVIC_DisableIRQ>
	const uint8_t *src = (const uint8_t *)buf;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	613b      	str	r3, [r7, #16]
	if (n > rb_free_tx(p)){
 800259e:	79fc      	ldrb	r4, [r7, #7]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7ff ff25 	bl	80023f0 <rb_free_tx>
 80025a6:	4603      	mov	r3, r0
 80025a8:	429c      	cmp	r4, r3
 80025aa:	dd07      	ble.n	80025bc <uartRB_Put+0x3c>
		HAL_NVIC_EnableIRQ(p->irqn);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f001 f82b 	bl	800360e <HAL_NVIC_EnableIRQ>
		return 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e02f      	b.n	800261c <uartRB_Put+0x9c>
	}
	for (uint8_t i = 1; i <= n; i++) {
 80025bc:	2301      	movs	r3, #1
 80025be:	75fb      	strb	r3, [r7, #23]
 80025c0:	e021      	b.n	8002606 <uartRB_Put+0x86>
		p->tx[p->tx_in] = src[i-1];
 80025c2:	7dfb      	ldrb	r3, [r7, #23]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4413      	add	r3, r2
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	88d2      	ldrh	r2, [r2, #6]
 80025ce:	b292      	uxth	r2, r2
 80025d0:	4611      	mov	r1, r2
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	440b      	add	r3, r1
 80025d8:	739a      	strb	r2, [r3, #14]
		p->tx_in = (uint8_t) ((p->tx_in + 1) % BUFLEN);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	88db      	ldrh	r3, [r3, #6]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <uartRB_Put+0xa4>)
 80025e4:	fb83 1302 	smull	r1, r3, r3, r2
 80025e8:	4413      	add	r3, r2
 80025ea:	1199      	asrs	r1, r3, #6
 80025ec:	17d3      	asrs	r3, r2, #31
 80025ee:	1ac9      	subs	r1, r1, r3
 80025f0:	460b      	mov	r3, r1
 80025f2:	01db      	lsls	r3, r3, #7
 80025f4:	1a5b      	subs	r3, r3, r1
 80025f6:	1ad1      	subs	r1, r2, r3
 80025f8:	b2cb      	uxtb	r3, r1
 80025fa:	461a      	mov	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	80da      	strh	r2, [r3, #6]
	for (uint8_t i = 1; i <= n; i++) {
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	3301      	adds	r3, #1
 8002604:	75fb      	strb	r3, [r7, #23]
 8002606:	7dfa      	ldrb	r2, [r7, #23]
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	429a      	cmp	r2, r3
 800260c:	d9d9      	bls.n	80025c2 <uartRB_Put+0x42>
	}
	HAL_NVIC_EnableIRQ(p->irqn);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fffa 	bl	800360e <HAL_NVIC_EnableIRQ>
	return 1;
 800261a:	2301      	movs	r3, #1
}
 800261c:	4618      	mov	r0, r3
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	81020409 	.word	0x81020409

08002628 <uartRB_Getc>:

uint8_t uartRB_Getc(UartRB *p) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
	uint8_t c;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fff7 	bl	800362a <HAL_NVIC_DisableIRQ>
	c = p->rx[p->rx_out];
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	899b      	ldrh	r3, [r3, #12]
 8002640:	b29b      	uxth	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800264c:	73fb      	strb	r3, [r7, #15]
	p->rx_out++;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	899b      	ldrh	r3, [r3, #12]
 8002652:	b29b      	uxth	r3, r3
 8002654:	3301      	adds	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	819a      	strh	r2, [r3, #12]
	if (p->rx_out >= BUFLEN) p->rx_out = 0;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	899b      	ldrh	r3, [r3, #12]
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b7e      	cmp	r3, #126	@ 0x7e
 8002664:	d902      	bls.n	800266c <uartRB_Getc+0x44>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	819a      	strh	r2, [r3, #12]
	HAL_NVIC_EnableIRQ(p->irqn);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002672:	4618      	mov	r0, r3
 8002674:	f000 ffcb 	bl	800360e <HAL_NVIC_EnableIRQ>
	return c;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002688:	4b22      	ldr	r3, [pc, #136]	@ (8002714 <MX_UART4_Init+0x90>)
 800268a:	4a23      	ldr	r2, [pc, #140]	@ (8002718 <MX_UART4_Init+0x94>)
 800268c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 19200;
 800268e:	4b21      	ldr	r3, [pc, #132]	@ (8002714 <MX_UART4_Init+0x90>)
 8002690:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002694:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002696:	4b1f      	ldr	r3, [pc, #124]	@ (8002714 <MX_UART4_Init+0x90>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800269c:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <MX_UART4_Init+0x90>)
 800269e:	2200      	movs	r2, #0
 80026a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002714 <MX_UART4_Init+0x90>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80026a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <MX_UART4_Init+0x90>)
 80026aa:	220c      	movs	r2, #12
 80026ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ae:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <MX_UART4_Init+0x90>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b4:	4b17      	ldr	r3, [pc, #92]	@ (8002714 <MX_UART4_Init+0x90>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ba:	4b16      	ldr	r3, [pc, #88]	@ (8002714 <MX_UART4_Init+0x90>)
 80026bc:	2200      	movs	r2, #0
 80026be:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026c0:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <MX_UART4_Init+0x90>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026c6:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <MX_UART4_Init+0x90>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80026cc:	4811      	ldr	r0, [pc, #68]	@ (8002714 <MX_UART4_Init+0x90>)
 80026ce:	f002 fecf 	bl	8005470 <HAL_UART_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80026d8:	f7fe f93d 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026dc:	2100      	movs	r1, #0
 80026de:	480d      	ldr	r0, [pc, #52]	@ (8002714 <MX_UART4_Init+0x90>)
 80026e0:	f004 fd45 	bl	800716e <HAL_UARTEx_SetTxFifoThreshold>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80026ea:	f7fe f934 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ee:	2100      	movs	r1, #0
 80026f0:	4808      	ldr	r0, [pc, #32]	@ (8002714 <MX_UART4_Init+0x90>)
 80026f2:	f004 fd7a 	bl	80071ea <HAL_UARTEx_SetRxFifoThreshold>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80026fc:	f7fe f92b 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002700:	4804      	ldr	r0, [pc, #16]	@ (8002714 <MX_UART4_Init+0x90>)
 8002702:	f004 fcfb 	bl	80070fc <HAL_UARTEx_DisableFifoMode>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800270c:	f7fe f923 	bl	8000956 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000b98 	.word	0x20000b98
 8002718:	40004c00 	.word	0x40004c00

0800271c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002720:	4b22      	ldr	r3, [pc, #136]	@ (80027ac <MX_UART5_Init+0x90>)
 8002722:	4a23      	ldr	r2, [pc, #140]	@ (80027b0 <MX_UART5_Init+0x94>)
 8002724:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 8002726:	4b21      	ldr	r3, [pc, #132]	@ (80027ac <MX_UART5_Init+0x90>)
 8002728:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800272c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800272e:	4b1f      	ldr	r3, [pc, #124]	@ (80027ac <MX_UART5_Init+0x90>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002734:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <MX_UART5_Init+0x90>)
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800273a:	4b1c      	ldr	r3, [pc, #112]	@ (80027ac <MX_UART5_Init+0x90>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002740:	4b1a      	ldr	r3, [pc, #104]	@ (80027ac <MX_UART5_Init+0x90>)
 8002742:	220c      	movs	r2, #12
 8002744:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002746:	4b19      	ldr	r3, [pc, #100]	@ (80027ac <MX_UART5_Init+0x90>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800274c:	4b17      	ldr	r3, [pc, #92]	@ (80027ac <MX_UART5_Init+0x90>)
 800274e:	2200      	movs	r2, #0
 8002750:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002752:	4b16      	ldr	r3, [pc, #88]	@ (80027ac <MX_UART5_Init+0x90>)
 8002754:	2200      	movs	r2, #0
 8002756:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002758:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <MX_UART5_Init+0x90>)
 800275a:	2200      	movs	r2, #0
 800275c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800275e:	4b13      	ldr	r3, [pc, #76]	@ (80027ac <MX_UART5_Init+0x90>)
 8002760:	2200      	movs	r2, #0
 8002762:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002764:	4811      	ldr	r0, [pc, #68]	@ (80027ac <MX_UART5_Init+0x90>)
 8002766:	f002 fe83 	bl	8005470 <HAL_UART_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002770:	f7fe f8f1 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002774:	2100      	movs	r1, #0
 8002776:	480d      	ldr	r0, [pc, #52]	@ (80027ac <MX_UART5_Init+0x90>)
 8002778:	f004 fcf9 	bl	800716e <HAL_UARTEx_SetTxFifoThreshold>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002782:	f7fe f8e8 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002786:	2100      	movs	r1, #0
 8002788:	4808      	ldr	r0, [pc, #32]	@ (80027ac <MX_UART5_Init+0x90>)
 800278a:	f004 fd2e 	bl	80071ea <HAL_UARTEx_SetRxFifoThreshold>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002794:	f7fe f8df 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002798:	4804      	ldr	r0, [pc, #16]	@ (80027ac <MX_UART5_Init+0x90>)
 800279a:	f004 fcaf 	bl	80070fc <HAL_UARTEx_DisableFifoMode>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80027a4:	f7fe f8d7 	bl	8000956 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000c2c 	.word	0x20000c2c
 80027b0:	40005000 	.word	0x40005000

080027b4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027b8:	4b22      	ldr	r3, [pc, #136]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 80027ba:	4a23      	ldr	r2, [pc, #140]	@ (8002848 <MX_USART1_UART_Init+0x94>)
 80027bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80027be:	4b21      	ldr	r3, [pc, #132]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 80027c0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80027c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 80027da:	220c      	movs	r2, #12
 80027dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027de:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e4:	4b17      	ldr	r3, [pc, #92]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027ea:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027f0:	4b14      	ldr	r3, [pc, #80]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027f6:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027fc:	4811      	ldr	r0, [pc, #68]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 80027fe:	f002 fe37 	bl	8005470 <HAL_UART_Init>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002808:	f7fe f8a5 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800280c:	2100      	movs	r1, #0
 800280e:	480d      	ldr	r0, [pc, #52]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 8002810:	f004 fcad 	bl	800716e <HAL_UARTEx_SetTxFifoThreshold>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800281a:	f7fe f89c 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800281e:	2100      	movs	r1, #0
 8002820:	4808      	ldr	r0, [pc, #32]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 8002822:	f004 fce2 	bl	80071ea <HAL_UARTEx_SetRxFifoThreshold>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800282c:	f7fe f893 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002830:	4804      	ldr	r0, [pc, #16]	@ (8002844 <MX_USART1_UART_Init+0x90>)
 8002832:	f004 fc63 	bl	80070fc <HAL_UARTEx_DisableFifoMode>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800283c:	f7fe f88b 	bl	8000956 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000cc0 	.word	0x20000cc0
 8002848:	40013800 	.word	0x40013800

0800284c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002850:	4b23      	ldr	r3, [pc, #140]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 8002852:	4a24      	ldr	r2, [pc, #144]	@ (80028e4 <MX_USART2_UART_Init+0x98>)
 8002854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002856:	4b22      	ldr	r3, [pc, #136]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 8002858:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800285c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b1e      	ldr	r3, [pc, #120]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800286a:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002876:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 8002878:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800287c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800287e:	4b18      	ldr	r3, [pc, #96]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 8002880:	2200      	movs	r2, #0
 8002882:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002884:	4b16      	ldr	r3, [pc, #88]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 8002886:	2200      	movs	r2, #0
 8002888:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800288a:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 800288c:	2200      	movs	r2, #0
 800288e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002890:	4b13      	ldr	r3, [pc, #76]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 8002892:	2200      	movs	r2, #0
 8002894:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002896:	4812      	ldr	r0, [pc, #72]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 8002898:	f002 fdea 	bl	8005470 <HAL_UART_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80028a2:	f7fe f858 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028a6:	2100      	movs	r1, #0
 80028a8:	480d      	ldr	r0, [pc, #52]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 80028aa:	f004 fc60 	bl	800716e <HAL_UARTEx_SetTxFifoThreshold>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80028b4:	f7fe f84f 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028b8:	2100      	movs	r1, #0
 80028ba:	4809      	ldr	r0, [pc, #36]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 80028bc:	f004 fc95 	bl	80071ea <HAL_UARTEx_SetRxFifoThreshold>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80028c6:	f7fe f846 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80028ca:	4805      	ldr	r0, [pc, #20]	@ (80028e0 <MX_USART2_UART_Init+0x94>)
 80028cc:	f004 fc16 	bl	80070fc <HAL_UARTEx_DisableFifoMode>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80028d6:	f7fe f83e 	bl	8000956 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000d54 	.word	0x20000d54
 80028e4:	40004400 	.word	0x40004400

080028e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028ec:	4b23      	ldr	r3, [pc, #140]	@ (800297c <MX_USART3_UART_Init+0x94>)
 80028ee:	4a24      	ldr	r2, [pc, #144]	@ (8002980 <MX_USART3_UART_Init+0x98>)
 80028f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 80028f2:	4b22      	ldr	r3, [pc, #136]	@ (800297c <MX_USART3_UART_Init+0x94>)
 80028f4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80028f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028fa:	4b20      	ldr	r3, [pc, #128]	@ (800297c <MX_USART3_UART_Init+0x94>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002900:	4b1e      	ldr	r3, [pc, #120]	@ (800297c <MX_USART3_UART_Init+0x94>)
 8002902:	2200      	movs	r2, #0
 8002904:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002906:	4b1d      	ldr	r3, [pc, #116]	@ (800297c <MX_USART3_UART_Init+0x94>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800290c:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <MX_USART3_UART_Init+0x94>)
 800290e:	220c      	movs	r2, #12
 8002910:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002912:	4b1a      	ldr	r3, [pc, #104]	@ (800297c <MX_USART3_UART_Init+0x94>)
 8002914:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002918:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800291a:	4b18      	ldr	r3, [pc, #96]	@ (800297c <MX_USART3_UART_Init+0x94>)
 800291c:	2200      	movs	r2, #0
 800291e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002920:	4b16      	ldr	r3, [pc, #88]	@ (800297c <MX_USART3_UART_Init+0x94>)
 8002922:	2200      	movs	r2, #0
 8002924:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002926:	4b15      	ldr	r3, [pc, #84]	@ (800297c <MX_USART3_UART_Init+0x94>)
 8002928:	2200      	movs	r2, #0
 800292a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800292c:	4b13      	ldr	r3, [pc, #76]	@ (800297c <MX_USART3_UART_Init+0x94>)
 800292e:	2200      	movs	r2, #0
 8002930:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002932:	4812      	ldr	r0, [pc, #72]	@ (800297c <MX_USART3_UART_Init+0x94>)
 8002934:	f002 fd9c 	bl	8005470 <HAL_UART_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 800293e:	f7fe f80a 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002942:	2100      	movs	r1, #0
 8002944:	480d      	ldr	r0, [pc, #52]	@ (800297c <MX_USART3_UART_Init+0x94>)
 8002946:	f004 fc12 	bl	800716e <HAL_UARTEx_SetTxFifoThreshold>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8002950:	f7fe f801 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002954:	2100      	movs	r1, #0
 8002956:	4809      	ldr	r0, [pc, #36]	@ (800297c <MX_USART3_UART_Init+0x94>)
 8002958:	f004 fc47 	bl	80071ea <HAL_UARTEx_SetRxFifoThreshold>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8002962:	f7fd fff8 	bl	8000956 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002966:	4805      	ldr	r0, [pc, #20]	@ (800297c <MX_USART3_UART_Init+0x94>)
 8002968:	f004 fbc8 	bl	80070fc <HAL_UARTEx_DisableFifoMode>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8002972:	f7fd fff0 	bl	8000956 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000de8 	.word	0x20000de8
 8002980:	40004800 	.word	0x40004800

08002984 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b0a8      	sub	sp, #160	@ 0xa0
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800299c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029a0:	2254      	movs	r2, #84	@ 0x54
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f004 fccd 	bl	8007344 <memset>
  if(uartHandle->Instance==UART4)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a93      	ldr	r2, [pc, #588]	@ (8002bfc <HAL_UART_MspInit+0x278>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d13c      	bne.n	8002a2e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80029b4:	2308      	movs	r3, #8
 80029b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80029b8:	2300      	movs	r3, #0
 80029ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 fdfb 	bl	80045bc <HAL_RCCEx_PeriphCLKConfig>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029cc:	f7fd ffc3 	bl	8000956 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029d0:	4b8b      	ldr	r3, [pc, #556]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d4:	4a8a      	ldr	r2, [pc, #552]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 80029d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80029da:	6593      	str	r3, [r2, #88]	@ 0x58
 80029dc:	4b88      	ldr	r3, [pc, #544]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80029e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e8:	4b85      	ldr	r3, [pc, #532]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 80029ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ec:	4a84      	ldr	r2, [pc, #528]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029f4:	4b82      	ldr	r3, [pc, #520]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 80029f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80029fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a00:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002a1a:	2305      	movs	r3, #5
 8002a1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a20:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002a24:	4619      	mov	r1, r3
 8002a26:	4877      	ldr	r0, [pc, #476]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002a28:	f000 fe1a 	bl	8003660 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a2c:	e157      	b.n	8002cde <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==UART5)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a75      	ldr	r2, [pc, #468]	@ (8002c08 <HAL_UART_MspInit+0x284>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d15d      	bne.n	8002af4 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002a38:	2310      	movs	r3, #16
 8002a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a44:	4618      	mov	r0, r3
 8002a46:	f001 fdb9 	bl	80045bc <HAL_RCCEx_PeriphCLKConfig>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002a50:	f7fd ff81 	bl	8000956 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002a54:	4b6a      	ldr	r3, [pc, #424]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a58:	4a69      	ldr	r2, [pc, #420]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a60:	4b67      	ldr	r3, [pc, #412]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6c:	4b64      	ldr	r3, [pc, #400]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a70:	4a63      	ldr	r2, [pc, #396]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002a72:	f043 0304 	orr.w	r3, r3, #4
 8002a76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a78:	4b61      	ldr	r3, [pc, #388]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a84:	4b5e      	ldr	r3, [pc, #376]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a88:	4a5d      	ldr	r2, [pc, #372]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002a8a:	f043 0308 	orr.w	r3, r3, #8
 8002a8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a90:	4b5b      	ldr	r3, [pc, #364]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002ab6:	2305      	movs	r3, #5
 8002ab8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4850      	ldr	r0, [pc, #320]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002ac4:	f000 fdcc 	bl	8003660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ac8:	2304      	movs	r3, #4
 8002aca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002ae0:	2305      	movs	r3, #5
 8002ae2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002aea:	4619      	mov	r1, r3
 8002aec:	4847      	ldr	r0, [pc, #284]	@ (8002c0c <HAL_UART_MspInit+0x288>)
 8002aee:	f000 fdb7 	bl	8003660 <HAL_GPIO_Init>
}
 8002af2:	e0f4      	b.n	8002cde <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==USART1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a45      	ldr	r2, [pc, #276]	@ (8002c10 <HAL_UART_MspInit+0x28c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d13b      	bne.n	8002b76 <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002afe:	2301      	movs	r3, #1
 8002b00:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b02:	2300      	movs	r3, #0
 8002b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 fd56 	bl	80045bc <HAL_RCCEx_PeriphCLKConfig>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_UART_MspInit+0x196>
      Error_Handler();
 8002b16:	f7fd ff1e 	bl	8000956 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b1a:	4b39      	ldr	r3, [pc, #228]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1e:	4a38      	ldr	r2, [pc, #224]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b24:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b26:	4b36      	ldr	r3, [pc, #216]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b2e:	623b      	str	r3, [r7, #32]
 8002b30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b32:	4b33      	ldr	r3, [pc, #204]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b36:	4a32      	ldr	r2, [pc, #200]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b3e:	4b30      	ldr	r3, [pc, #192]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	61fb      	str	r3, [r7, #28]
 8002b48:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b4a:	2330      	movs	r3, #48	@ 0x30
 8002b4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b62:	2307      	movs	r3, #7
 8002b64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b68:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4825      	ldr	r0, [pc, #148]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002b70:	f000 fd76 	bl	8003660 <HAL_GPIO_Init>
}
 8002b74:	e0b3      	b.n	8002cde <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==USART2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a26      	ldr	r2, [pc, #152]	@ (8002c14 <HAL_UART_MspInit+0x290>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d14b      	bne.n	8002c18 <HAL_UART_MspInit+0x294>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b80:	2302      	movs	r3, #2
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b84:	2300      	movs	r3, #0
 8002b86:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f001 fd15 	bl	80045bc <HAL_RCCEx_PeriphCLKConfig>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_UART_MspInit+0x218>
      Error_Handler();
 8002b98:	f7fd fedd 	bl	8000956 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b9c:	4b18      	ldr	r3, [pc, #96]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba0:	4a17      	ldr	r2, [pc, #92]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ba8:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb4:	4b12      	ldr	r3, [pc, #72]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb8:	4a11      	ldr	r2, [pc, #68]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 8002bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002bcc:	230f      	movs	r3, #15
 8002bce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002be4:	2307      	movs	r3, #7
 8002be6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bf4:	f000 fd34 	bl	8003660 <HAL_GPIO_Init>
}
 8002bf8:	e071      	b.n	8002cde <HAL_UART_MspInit+0x35a>
 8002bfa:	bf00      	nop
 8002bfc:	40004c00 	.word	0x40004c00
 8002c00:	40021000 	.word	0x40021000
 8002c04:	48000800 	.word	0x48000800
 8002c08:	40005000 	.word	0x40005000
 8002c0c:	48000c00 	.word	0x48000c00
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a32      	ldr	r2, [pc, #200]	@ (8002ce8 <HAL_UART_MspInit+0x364>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d15d      	bne.n	8002cde <HAL_UART_MspInit+0x35a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c22:	2304      	movs	r3, #4
 8002c24:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c26:	2300      	movs	r3, #0
 8002c28:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c2a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 fcc4 	bl	80045bc <HAL_RCCEx_PeriphCLKConfig>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 8002c3a:	f7fd fe8c 	bl	8000956 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cec <HAL_UART_MspInit+0x368>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c42:	4a2a      	ldr	r2, [pc, #168]	@ (8002cec <HAL_UART_MspInit+0x368>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c48:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c4a:	4b28      	ldr	r3, [pc, #160]	@ (8002cec <HAL_UART_MspInit+0x368>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c56:	4b25      	ldr	r3, [pc, #148]	@ (8002cec <HAL_UART_MspInit+0x368>)
 8002c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5a:	4a24      	ldr	r2, [pc, #144]	@ (8002cec <HAL_UART_MspInit+0x368>)
 8002c5c:	f043 0310 	orr.w	r3, r3, #16
 8002c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c62:	4b22      	ldr	r3, [pc, #136]	@ (8002cec <HAL_UART_MspInit+0x368>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cec <HAL_UART_MspInit+0x368>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c72:	4a1e      	ldr	r2, [pc, #120]	@ (8002cec <HAL_UART_MspInit+0x368>)
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cec <HAL_UART_MspInit+0x368>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ca0:	2307      	movs	r3, #7
 8002ca2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ca6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002caa:	4619      	mov	r1, r3
 8002cac:	4810      	ldr	r0, [pc, #64]	@ (8002cf0 <HAL_UART_MspInit+0x36c>)
 8002cae:	f000 fcd7 	bl	8003660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14;
 8002cb2:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8002cb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ccc:	2307      	movs	r3, #7
 8002cce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4806      	ldr	r0, [pc, #24]	@ (8002cf4 <HAL_UART_MspInit+0x370>)
 8002cda:	f000 fcc1 	bl	8003660 <HAL_GPIO_Init>
}
 8002cde:	bf00      	nop
 8002ce0:	37a0      	adds	r7, #160	@ 0xa0
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40004800 	.word	0x40004800
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	48001000 	.word	0x48001000
 8002cf4:	48000400 	.word	0x48000400

08002cf8 <zentrale_init>:

//-----------------FUNKTIONSDEFINITIONEN---------------------------------------

// Zentrale initialisieren.
void zentrale_init(void)
{	z_status = Z_STARTINIT;
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <zentrale_init+0x6c>)
 8002d00:	2203      	movs	r2, #3
 8002d02:	701a      	strb	r2, [r3, #0]
	z_init_done = 0;
 8002d04:	4b18      	ldr	r3, [pc, #96]	@ (8002d68 <zentrale_init+0x70>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
	z_status_tend = Z_NOP;
 8002d0a:	4b18      	ldr	r3, [pc, #96]	@ (8002d6c <zentrale_init+0x74>)
 8002d0c:	22ff      	movs	r2, #255	@ 0xff
 8002d0e:	701a      	strb	r2, [r3, #0]
	z_error_akt = 0;
 8002d10:	4917      	ldr	r1, [pc, #92]	@ (8002d70 <zentrale_init+0x78>)
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	e9c1 2300 	strd	r2, r3, [r1]
	z_error_kum = 0;
 8002d1e:	4915      	ldr	r1, [pc, #84]	@ (8002d74 <zentrale_init+0x7c>)
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t i=0; i<4; i++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	71fb      	strb	r3, [r7, #7]
 8002d30:	e00c      	b.n	8002d4c <zentrale_init+0x54>
	{
		z_chn_error_akt[i] = 0;
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	4a10      	ldr	r2, [pc, #64]	@ (8002d78 <zentrale_init+0x80>)
 8002d36:	2100      	movs	r1, #0
 8002d38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		z_chn_error_kum[i] = 0;
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002d7c <zentrale_init+0x84>)
 8002d40:	2100      	movs	r1, #0
 8002d42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<4; i++)
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	71fb      	strb	r3, [r7, #7]
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d9ef      	bls.n	8002d32 <zentrale_init+0x3a>
	}

	z_adm = 0;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <zentrale_init+0x88>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]

}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	20000e7c 	.word	0x20000e7c
 8002d68:	20000ea0 	.word	0x20000ea0
 8002d6c:	20000e7e 	.word	0x20000e7e
 8002d70:	20000e80 	.word	0x20000e80
 8002d74:	20000e88 	.word	0x20000e88
 8002d78:	20000e90 	.word	0x20000e90
 8002d7c:	20000e98 	.word	0x20000e98
 8002d80:	20000ea2 	.word	0x20000ea2

08002d84 <z_update_power_errors>:

static void z_update_power_errors(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
    // If you only have update_uok():
    if (!update_uok()) {
 8002d8a:	f7fd fc5b 	bl	8000644 <update_uok>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d117      	bne.n	8002dc4 <z_update_power_errors+0x40>
        // If you want individual bits, read pins directly (or add helpers):
        uint8_t ok5  = u_ok(UC__5VOK_GPIO_Port,  UC__5VOK_Pin);
 8002d94:	2110      	movs	r1, #16
 8002d96:	480d      	ldr	r0, [pc, #52]	@ (8002dcc <z_update_power_errors+0x48>)
 8002d98:	f7fd fc3c 	bl	8000614 <u_ok>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	71fb      	strb	r3, [r7, #7]
        uint8_t ok12 = u_ok(UC__12VOK_GPIO_Port, UC__12VOK_Pin);
 8002da0:	2120      	movs	r1, #32
 8002da2:	480a      	ldr	r0, [pc, #40]	@ (8002dcc <z_update_power_errors+0x48>)
 8002da4:	f7fd fc36 	bl	8000614 <u_ok>
 8002da8:	4603      	mov	r3, r0
 8002daa:	71bb      	strb	r3, [r7, #6]
        if (!ok5)  z_set_error(SG_ERR_U5V);
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d102      	bne.n	8002db8 <z_update_power_errors+0x34>
 8002db2:	2002      	movs	r0, #2
 8002db4:	f000 f9f8 	bl	80031a8 <z_set_error>
        if (!ok12) z_set_error(SG_ERR_U12V);
 8002db8:	79bb      	ldrb	r3, [r7, #6]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <z_update_power_errors+0x40>
 8002dbe:	2003      	movs	r0, #3
 8002dc0:	f000 f9f2 	bl	80031a8 <z_set_error>
    }
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	48000c00 	.word	0x48000c00

08002dd0 <zentrale>:

// Zentrale denken und entscheiden.
void zentrale(void)
{	// ----- DENKEN -----
 8002dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd4:	b088      	sub	sp, #32
 8002dd6:	af00      	add	r7, sp, #0

	z_update_power_errors();
 8002dd8:	f7ff ffd4 	bl	8002d84 <z_update_power_errors>

	if (readPumpAlarm()) {
 8002ddc:	f7fd fc66 	bl	80006ac <readPumpAlarm>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <zentrale+0x1c>
	    z_set_error(SG_ERR_PUMP_ALARM);
 8002de6:	2004      	movs	r0, #4
 8002de8:	f000 f9de 	bl	80031a8 <z_set_error>
	}
	if (readPumpWarning()) {
 8002dec:	f7fd fc48 	bl	8000680 <readPumpWarning>
	    //z_set_error(SG_ERR_PUMP_WARNING);
	}

	// Fehlerüberprüfung
	if (z_error_akt != 0)
 8002df0:	4ba5      	ldr	r3, [pc, #660]	@ (8003088 <zentrale+0x2b8>)
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	d002      	beq.n	8002e00 <zentrale+0x30>
		z_set_status_tend(Z_ERROR);
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f000 f9be 	bl	800317c <z_set_status_tend>

	switch(z_status)															// Je nach aktuellem Systemzustand auf Anfragen zur Zustands�nderung
 8002e00:	4ba2      	ldr	r3, [pc, #648]	@ (800308c <zentrale+0x2bc>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	2b0b      	cmp	r3, #11
 8002e08:	f200 8120 	bhi.w	800304c <zentrale+0x27c>
 8002e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <zentrale+0x44>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e45 	.word	0x08002e45
 8002e18:	0800304d 	.word	0x0800304d
 8002e1c:	08002e81 	.word	0x08002e81
 8002e20:	0800304d 	.word	0x0800304d
 8002e24:	0800304d 	.word	0x0800304d
 8002e28:	0800304d 	.word	0x0800304d
 8002e2c:	0800304d 	.word	0x0800304d
 8002e30:	0800304d 	.word	0x0800304d
 8002e34:	08002ec9 	.word	0x08002ec9
 8002e38:	08002f3f 	.word	0x08002f3f
 8002e3c:	08002fa7 	.word	0x08002fa7
 8002e40:	08002feb 	.word	0x08002feb
	{																		// reagieren
		case Z_ERROR:
			if (z_status_h != Z_ERROR)
 8002e44:	4b92      	ldr	r3, [pc, #584]	@ (8003090 <zentrale+0x2c0>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d002      	beq.n	8002e52 <zentrale+0x82>
			{// add what to do when error
				z_status_h = Z_ERROR;
 8002e4c:	4a90      	ldr	r2, [pc, #576]	@ (8003090 <zentrale+0x2c0>)
 8002e4e:	2301      	movs	r3, #1
 8002e50:	7013      	strb	r3, [r2, #0]

			// Prüfen ob die Wartezeit für einen DTC/Energy - Fehler abgelaufen ist
//			if(((z_error_kum && ((1<<SG_ERREN) + (1<<SG_ERRDTC))) != 0) && (adc7927_chk_en() != 1))
//				z_set_status_tend(Z_ERROR);

			switch(z_status_tend)												// W�nsche bez�glich einer Zustands�nderung bearbeiten
 8002e52:	4b90      	ldr	r3, [pc, #576]	@ (8003094 <zentrale+0x2c4>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d001      	beq.n	8002e5e <zentrale+0x8e>
 8002e5a:	2b09      	cmp	r3, #9
 8002e5c:	d10b      	bne.n	8002e76 <zentrale+0xa6>
			{
				case Z_STARTINIT:
				case Z_INACTIVE:
					{	if (((z_error_kum & SG_CRITICAL_ERRORS) == 0) && (z_init_done == 1))
 8002e5e:	4b8e      	ldr	r3, [pc, #568]	@ (8003098 <zentrale+0x2c8>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d103      	bne.n	8002e6e <zentrale+0x9e>
						{
							z_status = Z_COOLDOWN;
 8002e66:	4a89      	ldr	r2, [pc, #548]	@ (800308c <zentrale+0x2bc>)
 8002e68:	230c      	movs	r3, #12
 8002e6a:	7013      	strb	r3, [r2, #0]
						}
						else
						{	z_status = Z_STARTINIT;
						}
					}
					break;
 8002e6c:	e004      	b.n	8002e78 <zentrale+0xa8>
						{	z_status = Z_STARTINIT;
 8002e6e:	4a87      	ldr	r2, [pc, #540]	@ (800308c <zentrale+0x2bc>)
 8002e70:	2303      	movs	r3, #3
 8002e72:	7013      	strb	r3, [r2, #0]
					break;
 8002e74:	e000      	b.n	8002e78 <zentrale+0xa8>
				default:
					break;
 8002e76:	bf00      	nop
			}
			z_status_tend = Z_NOP;											// z_status_tend zur�cksetzen
 8002e78:	4a86      	ldr	r2, [pc, #536]	@ (8003094 <zentrale+0x2c4>)
 8002e7a:	23ff      	movs	r3, #255	@ 0xff
 8002e7c:	7013      	strb	r3, [r2, #0]
			break;
 8002e7e:	e0ec      	b.n	800305a <zentrale+0x28a>

		case Z_STARTINIT:																// Startzustand nach Einschalten des Ger�tes. Keine Fehlerbehandlung!
				if(z_status_h != Z_STARTINIT)
 8002e80:	4b83      	ldr	r3, [pc, #524]	@ (8003090 <zentrale+0x2c0>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d007      	beq.n	8002e98 <zentrale+0xc8>
				{
					z_init_done = 0;
 8002e88:	4a83      	ldr	r2, [pc, #524]	@ (8003098 <zentrale+0x2c8>)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	7013      	strb	r3, [r2, #0]
					z_clear_errors();							// Messen der Spannung an der Sicherheitsschleif aktivieren
 8002e8e:	f000 f9b9 	bl	8003204 <z_clear_errors>
					z_status_h = Z_STARTINIT;
 8002e92:	4a7f      	ldr	r2, [pc, #508]	@ (8003090 <zentrale+0x2c0>)
 8002e94:	2303      	movs	r3, #3
 8002e96:	7013      	strb	r3, [r2, #0]
				}

				if (ct_init_null())
 8002e98:	f7ff f9f2 	bl	8002280 <ct_init_null>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <zentrale+0xde>
				{
					z_init_done = 1;
 8002ea2:	4a7d      	ldr	r2, [pc, #500]	@ (8003098 <zentrale+0x2c8>)
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	7013      	strb	r3, [r2, #0]
					z_status = Z_INACTIVE;
 8002ea8:	4a78      	ldr	r2, [pc, #480]	@ (800308c <zentrale+0x2bc>)
 8002eaa:	2309      	movs	r3, #9
 8002eac:	7013      	strb	r3, [r2, #0]
				}

				switch(z_status_tend)
 8002eae:	4b79      	ldr	r3, [pc, #484]	@ (8003094 <zentrale+0x2c4>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d103      	bne.n	8002ebe <zentrale+0xee>
				{	case Z_ERROR: z_status = Z_ERROR;
 8002eb6:	4a75      	ldr	r2, [pc, #468]	@ (800308c <zentrale+0x2bc>)
 8002eb8:	2301      	movs	r3, #1
 8002eba:	7013      	strb	r3, [r2, #0]
						break;
 8002ebc:	e000      	b.n	8002ec0 <zentrale+0xf0>
					default:
						break;
 8002ebe:	bf00      	nop
				}
				z_status_tend = Z_NOP;											// z_status_tend zur�cksetzen
 8002ec0:	4a74      	ldr	r2, [pc, #464]	@ (8003094 <zentrale+0x2c4>)
 8002ec2:	23ff      	movs	r3, #255	@ 0xff
 8002ec4:	7013      	strb	r3, [r2, #0]
				break;
 8002ec6:	e0c8      	b.n	800305a <zentrale+0x28a>

		case Z_INACTIVE:														//----- System im INACTIVE-Zustand

			if(z_status_h != Z_INACTIVE)
 8002ec8:	4b71      	ldr	r3, [pc, #452]	@ (8003090 <zentrale+0x2c0>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b09      	cmp	r3, #9
 8002ece:	d017      	beq.n	8002f00 <zentrale+0x130>
			{
				//hw_set_rf(0);
				//smps_on(0);
			    z_error_kum = 0;
 8002ed0:	4972      	ldr	r1, [pc, #456]	@ (800309c <zentrale+0x2cc>)
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	e9c1 2300 	strd	r2, r3, [r1]
				for(uint8_t i=0; i<4; i++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	77fb      	strb	r3, [r7, #31]
 8002ee2:	e007      	b.n	8002ef4 <zentrale+0x124>
				{
					z_chn_error_kum[i] = 0;
 8002ee4:	7ffa      	ldrb	r2, [r7, #31]
 8002ee6:	496e      	ldr	r1, [pc, #440]	@ (80030a0 <zentrale+0x2d0>)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
				for(uint8_t i=0; i<4; i++)
 8002eee:	7ffb      	ldrb	r3, [r7, #31]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	77fb      	strb	r3, [r7, #31]
 8002ef4:	7ffb      	ldrb	r3, [r7, #31]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d9f4      	bls.n	8002ee4 <zentrale+0x114>
				}
				//hw_set_nmop(1);
				//hw_set_ledspeed(500);
				z_status_h = Z_INACTIVE;
 8002efa:	4a65      	ldr	r2, [pc, #404]	@ (8003090 <zentrale+0x2c0>)
 8002efc:	2309      	movs	r3, #9
 8002efe:	7013      	strb	r3, [r2, #0]
			}

			if (z_error_akt != 0)	z_set_status_tend(Z_ERROR);
 8002f00:	4b61      	ldr	r3, [pc, #388]	@ (8003088 <zentrale+0x2b8>)
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	d002      	beq.n	8002f10 <zentrale+0x140>
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f000 f936 	bl	800317c <z_set_status_tend>

			switch(z_status_tend)
 8002f10:	4b60      	ldr	r3, [pc, #384]	@ (8003094 <zentrale+0x2c4>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d005      	beq.n	8002f24 <zentrale+0x154>
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	dd0b      	ble.n	8002f34 <zentrale+0x164>
 8002f1c:	3b0a      	subs	r3, #10
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d808      	bhi.n	8002f34 <zentrale+0x164>
 8002f22:	e003      	b.n	8002f2c <zentrale+0x15c>
			{	case Z_ERROR: z_status = Z_ERROR;
 8002f24:	4a59      	ldr	r2, [pc, #356]	@ (800308c <zentrale+0x2bc>)
 8002f26:	2301      	movs	r3, #1
 8002f28:	7013      	strb	r3, [r2, #0]
					break;
 8002f2a:	e004      	b.n	8002f36 <zentrale+0x166>
				case Z_ACTIVE:
				case Z_START: z_status = Z_START;
 8002f2c:	4a57      	ldr	r2, [pc, #348]	@ (800308c <zentrale+0x2bc>)
 8002f2e:	230a      	movs	r3, #10
 8002f30:	7013      	strb	r3, [r2, #0]
					break;
 8002f32:	e000      	b.n	8002f36 <zentrale+0x166>
				default:
					break;
 8002f34:	bf00      	nop
			}
			z_status_tend = Z_NOP;
 8002f36:	4a57      	ldr	r2, [pc, #348]	@ (8003094 <zentrale+0x2c4>)
 8002f38:	23ff      	movs	r3, #255	@ 0xff
 8002f3a:	7013      	strb	r3, [r2, #0]
			break;
 8002f3c:	e08d      	b.n	800305a <zentrale+0x28a>


		case Z_START:																//----- System im START-Zustand

			if (z_status_h != Z_START)
 8002f3e:	4b54      	ldr	r3, [pc, #336]	@ (8003090 <zentrale+0x2c0>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b0a      	cmp	r3, #10
 8002f44:	d002      	beq.n	8002f4c <zentrale+0x17c>
			{
				//set_ct_start(2500); // was 4500
			    //smps_on(1);
				z_status_h = Z_START;
 8002f46:	4a52      	ldr	r2, [pc, #328]	@ (8003090 <zentrale+0x2c0>)
 8002f48:	230a      	movs	r3, #10
 8002f4a:	7013      	strb	r3, [r2, #0]
			}

			// Hier sollte getcheckt werde, ob alle Slaves aktiv sind!
			if ((ct_start_null() == 1) || update_uok())
 8002f4c:	f7ff f960 	bl	8002210 <ct_start_null>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d004      	beq.n	8002f60 <zentrale+0x190>
 8002f56:	f7fd fb75 	bl	8000644 <update_uok>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <zentrale+0x196>
				z_status = Z_ACTIVE;
 8002f60:	4a4a      	ldr	r2, [pc, #296]	@ (800308c <zentrale+0x2bc>)
 8002f62:	230b      	movs	r3, #11
 8002f64:	7013      	strb	r3, [r2, #0]

			if ((z_error_akt != 0) && ct_start_null()) z_set_status_tend(Z_ERROR);
 8002f66:	4b48      	ldr	r3, [pc, #288]	@ (8003088 <zentrale+0x2b8>)
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	d007      	beq.n	8002f80 <zentrale+0x1b0>
 8002f70:	f7ff f94e 	bl	8002210 <ct_start_null>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <zentrale+0x1b0>
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	f000 f8fe 	bl	800317c <z_set_status_tend>

			switch(z_status_tend)
 8002f80:	4b44      	ldr	r3, [pc, #272]	@ (8003094 <zentrale+0x2c4>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d002      	beq.n	8002f8e <zentrale+0x1be>
 8002f88:	2b09      	cmp	r3, #9
 8002f8a:	d004      	beq.n	8002f96 <zentrale+0x1c6>
			{	case Z_ERROR: z_status = Z_ERROR;
					break;
				case Z_INACTIVE: z_status = Z_INACTIVE;
					break;
				default:
					break;
 8002f8c:	e007      	b.n	8002f9e <zentrale+0x1ce>
			{	case Z_ERROR: z_status = Z_ERROR;
 8002f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800308c <zentrale+0x2bc>)
 8002f90:	2301      	movs	r3, #1
 8002f92:	7013      	strb	r3, [r2, #0]
					break;
 8002f94:	e003      	b.n	8002f9e <zentrale+0x1ce>
				case Z_INACTIVE: z_status = Z_INACTIVE;
 8002f96:	4a3d      	ldr	r2, [pc, #244]	@ (800308c <zentrale+0x2bc>)
 8002f98:	2309      	movs	r3, #9
 8002f9a:	7013      	strb	r3, [r2, #0]
					break;
 8002f9c:	bf00      	nop
			}
			z_status_tend = Z_NOP;
 8002f9e:	4a3d      	ldr	r2, [pc, #244]	@ (8003094 <zentrale+0x2c4>)
 8002fa0:	23ff      	movs	r3, #255	@ 0xff
 8002fa2:	7013      	strb	r3, [r2, #0]
			break;
 8002fa4:	e059      	b.n	800305a <zentrale+0x28a>


		case Z_ACTIVE:
			if (z_status_h != Z_ACTIVE)
 8002fa6:	4b3a      	ldr	r3, [pc, #232]	@ (8003090 <zentrale+0x2c0>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b0b      	cmp	r3, #11
 8002fac:	d002      	beq.n	8002fb4 <zentrale+0x1e4>
			{
				//hw_set_rf(1);
				z_status_h = Z_ACTIVE;
 8002fae:	4a38      	ldr	r2, [pc, #224]	@ (8003090 <zentrale+0x2c0>)
 8002fb0:	230b      	movs	r3, #11
 8002fb2:	7013      	strb	r3, [r2, #0]
			}

			if (z_error_akt != 0) z_set_status_tend(Z_ERROR);
 8002fb4:	4b34      	ldr	r3, [pc, #208]	@ (8003088 <zentrale+0x2b8>)
 8002fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	d002      	beq.n	8002fc4 <zentrale+0x1f4>
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f000 f8dc 	bl	800317c <z_set_status_tend>

			switch(z_status_tend)
 8002fc4:	4b33      	ldr	r3, [pc, #204]	@ (8003094 <zentrale+0x2c4>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d002      	beq.n	8002fd2 <zentrale+0x202>
 8002fcc:	2b09      	cmp	r3, #9
 8002fce:	d004      	beq.n	8002fda <zentrale+0x20a>
						z_status = Z_INACTIVE;
					else
						z_status = Z_COOLDOWN;
					break;
				default:
					break;
 8002fd0:	e007      	b.n	8002fe2 <zentrale+0x212>
			{	case Z_ERROR: z_status = Z_ERROR;
 8002fd2:	4a2e      	ldr	r2, [pc, #184]	@ (800308c <zentrale+0x2bc>)
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	7013      	strb	r3, [r2, #0]
					break;
 8002fd8:	e003      	b.n	8002fe2 <zentrale+0x212>
						z_status = Z_INACTIVE;
 8002fda:	4a2c      	ldr	r2, [pc, #176]	@ (800308c <zentrale+0x2bc>)
 8002fdc:	2309      	movs	r3, #9
 8002fde:	7013      	strb	r3, [r2, #0]
					break;
 8002fe0:	bf00      	nop
			}
			z_status_tend = Z_NOP;
 8002fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8003094 <zentrale+0x2c4>)
 8002fe4:	23ff      	movs	r3, #255	@ 0xff
 8002fe6:	7013      	strb	r3, [r2, #0]
			break;
 8002fe8:	e037      	b.n	800305a <zentrale+0x28a>

		case Z_COOLDOWN:
			if (z_status_h != Z_COOLDOWN)
 8002fea:	4b29      	ldr	r3, [pc, #164]	@ (8003090 <zentrale+0x2c0>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	d017      	beq.n	8003022 <zentrale+0x252>
			{
				//hw_set_rf(0);
			   // smps_on(0);
			    z_error_kum = 0;
 8002ff2:	492a      	ldr	r1, [pc, #168]	@ (800309c <zentrale+0x2cc>)
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9c1 2300 	strd	r2, r3, [r1]
				for(uint8_t i=0; i<4; i++)
 8003000:	2300      	movs	r3, #0
 8003002:	77bb      	strb	r3, [r7, #30]
 8003004:	e007      	b.n	8003016 <zentrale+0x246>
				{
					z_chn_error_kum[i] = 0;
 8003006:	7fba      	ldrb	r2, [r7, #30]
 8003008:	4925      	ldr	r1, [pc, #148]	@ (80030a0 <zentrale+0x2d0>)
 800300a:	2300      	movs	r3, #0
 800300c:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
				for(uint8_t i=0; i<4; i++)
 8003010:	7fbb      	ldrb	r3, [r7, #30]
 8003012:	3301      	adds	r3, #1
 8003014:	77bb      	strb	r3, [r7, #30]
 8003016:	7fbb      	ldrb	r3, [r7, #30]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d9f4      	bls.n	8003006 <zentrale+0x236>
				}
				//hw_set_nmop(1);
				//hw_set_ledspeed(500);
				z_status_h = Z_COOLDOWN;
 800301c:	4a1c      	ldr	r2, [pc, #112]	@ (8003090 <zentrale+0x2c0>)
 800301e:	230c      	movs	r3, #12
 8003020:	7013      	strb	r3, [r2, #0]
			}

			if (z_error_akt != 0) z_set_status_tend(Z_ERROR);
 8003022:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <zentrale+0x2b8>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	4313      	orrs	r3, r2
 800302a:	d002      	beq.n	8003032 <zentrale+0x262>
 800302c:	2001      	movs	r0, #1
 800302e:	f000 f8a5 	bl	800317c <z_set_status_tend>


			switch(z_status_tend)
 8003032:	4b18      	ldr	r3, [pc, #96]	@ (8003094 <zentrale+0x2c4>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d103      	bne.n	8003042 <zentrale+0x272>
			{	case Z_ERROR: z_status = Z_ERROR;
 800303a:	4a14      	ldr	r2, [pc, #80]	@ (800308c <zentrale+0x2bc>)
 800303c:	2301      	movs	r3, #1
 800303e:	7013      	strb	r3, [r2, #0]
					break;
 8003040:	e000      	b.n	8003044 <zentrale+0x274>
				default:
					break;
 8003042:	bf00      	nop
			}
			z_status_tend = Z_NOP;
 8003044:	4a13      	ldr	r2, [pc, #76]	@ (8003094 <zentrale+0x2c4>)
 8003046:	23ff      	movs	r3, #255	@ 0xff
 8003048:	7013      	strb	r3, [r2, #0]
			break;
 800304a:	e006      	b.n	800305a <zentrale+0x28a>

		default:
			z_status_tend = Z_NOP;
 800304c:	4a11      	ldr	r2, [pc, #68]	@ (8003094 <zentrale+0x2c4>)
 800304e:	23ff      	movs	r3, #255	@ 0xff
 8003050:	7013      	strb	r3, [r2, #0]
			z_status_h = Z_NOP;
 8003052:	4a0f      	ldr	r2, [pc, #60]	@ (8003090 <zentrale+0x2c0>)
 8003054:	23ff      	movs	r3, #255	@ 0xff
 8003056:	7013      	strb	r3, [r2, #0]
			break;
 8003058:	bf00      	nop
	}
	z_error_kum |= z_error_akt;		// Eventuell aufgetretenen neuen Fehler zur kummulierten
 800305a:	4b10      	ldr	r3, [pc, #64]	@ (800309c <zentrale+0x2cc>)
 800305c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003060:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <zentrale+0x2b8>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	ea40 0402 	orr.w	r4, r0, r2
 800306a:	ea41 0503 	orr.w	r5, r1, r3
 800306e:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <zentrale+0x2cc>)
 8003070:	e9c3 4500 	strd	r4, r5, [r3]
	z_error_akt = 0;				// Fehleranzeige für aktuell vorliegende Fehler zurücksetzen
 8003074:	4904      	ldr	r1, [pc, #16]	@ (8003088 <zentrale+0x2b8>)
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	e9c1 2300 	strd	r2, r3, [r1]

	for(uint8_t i=0; i<4; i++)
 8003082:	2300      	movs	r3, #0
 8003084:	777b      	strb	r3, [r7, #29]
 8003086:	e023      	b.n	80030d0 <zentrale+0x300>
 8003088:	20000e80 	.word	0x20000e80
 800308c:	20000e7c 	.word	0x20000e7c
 8003090:	20000e7d 	.word	0x20000e7d
 8003094:	20000e7e 	.word	0x20000e7e
 8003098:	20000ea0 	.word	0x20000ea0
 800309c:	20000e88 	.word	0x20000e88
 80030a0:	20000e98 	.word	0x20000e98
	{
		z_chn_error_kum[i] |= z_chn_error_akt[i];
 80030a4:	7f7b      	ldrb	r3, [r7, #29]
 80030a6:	4a32      	ldr	r2, [pc, #200]	@ (8003170 <zentrale+0x3a0>)
 80030a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80030ac:	7f7b      	ldrb	r3, [r7, #29]
 80030ae:	4a31      	ldr	r2, [pc, #196]	@ (8003174 <zentrale+0x3a4>)
 80030b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80030b4:	7f7b      	ldrb	r3, [r7, #29]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	b291      	uxth	r1, r2
 80030ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003170 <zentrale+0x3a0>)
 80030bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		z_chn_error_akt[i] = 0;
 80030c0:	7f7b      	ldrb	r3, [r7, #29]
 80030c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003174 <zentrale+0x3a4>)
 80030c4:	2100      	movs	r1, #0
 80030c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<4; i++)
 80030ca:	7f7b      	ldrb	r3, [r7, #29]
 80030cc:	3301      	adds	r3, #1
 80030ce:	777b      	strb	r3, [r7, #29]
 80030d0:	7f7b      	ldrb	r3, [r7, #29]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d9e6      	bls.n	80030a4 <zentrale+0x2d4>
	}

	z_error_kum &= 0xFFF0FFF;
 80030d6:	4b28      	ldr	r3, [pc, #160]	@ (8003178 <zentrale+0x3a8>)
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f022 28f0 	bic.w	r8, r2, #4026593280	@ 0xf000f000
 80030e0:	f04f 0900 	mov.w	r9, #0
 80030e4:	4b24      	ldr	r3, [pc, #144]	@ (8003178 <zentrale+0x3a8>)
 80030e6:	e9c3 8900 	strd	r8, r9, [r3]
	if(z_chn_error_kum[0] != 0)
 80030ea:	4b21      	ldr	r3, [pc, #132]	@ (8003170 <zentrale+0x3a0>)
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <zentrale+0x33a>
		z_error_kum |= (1ul << SG_ERRCH1);
 80030f2:	4b21      	ldr	r3, [pc, #132]	@ (8003178 <zentrale+0x3a8>)
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f442 3180 	orr.w	r1, r2, #65536	@ 0x10000
 80030fc:	6139      	str	r1, [r7, #16]
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	4b1d      	ldr	r3, [pc, #116]	@ (8003178 <zentrale+0x3a8>)
 8003102:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003106:	e9c3 1200 	strd	r1, r2, [r3]
	if(z_chn_error_kum[1] != 0)
 800310a:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <zentrale+0x3a0>)
 800310c:	885b      	ldrh	r3, [r3, #2]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <zentrale+0x35a>
		z_error_kum |= (1ul << SG_ERRCH2);
 8003112:	4b19      	ldr	r3, [pc, #100]	@ (8003178 <zentrale+0x3a8>)
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f442 3100 	orr.w	r1, r2, #131072	@ 0x20000
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	4b15      	ldr	r3, [pc, #84]	@ (8003178 <zentrale+0x3a8>)
 8003122:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003126:	e9c3 1200 	strd	r1, r2, [r3]
	if(z_chn_error_kum[2] != 0)
 800312a:	4b11      	ldr	r3, [pc, #68]	@ (8003170 <zentrale+0x3a0>)
 800312c:	889b      	ldrh	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <zentrale+0x37a>
		z_error_kum |= (1ul << SG_ERRCH3);
 8003132:	4b11      	ldr	r3, [pc, #68]	@ (8003178 <zentrale+0x3a8>)
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	f442 2180 	orr.w	r1, r2, #262144	@ 0x40000
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	4b0d      	ldr	r3, [pc, #52]	@ (8003178 <zentrale+0x3a8>)
 8003142:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003146:	e9c3 1200 	strd	r1, r2, [r3]
	if(z_chn_error_kum[3] != 0)
 800314a:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <zentrale+0x3a0>)
 800314c:	88db      	ldrh	r3, [r3, #6]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <zentrale+0x394>
		z_error_kum |= (1ul << SG_ERRCH4);
 8003152:	4b09      	ldr	r3, [pc, #36]	@ (8003178 <zentrale+0x3a8>)
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f442 2a00 	orr.w	sl, r2, #524288	@ 0x80000
 800315c:	469b      	mov	fp, r3
 800315e:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <zentrale+0x3a8>)
 8003160:	e9c3 ab00 	strd	sl, fp, [r3]

}
 8003164:	bf00      	nop
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800316e:	bf00      	nop
 8003170:	20000e98 	.word	0x20000e98
 8003174:	20000e90 	.word	0x20000e90
 8003178:	20000e88 	.word	0x20000e88

0800317c <z_set_status_tend>:
}

// Statuswunsch setzen
// Priorit�t:	error, inactive, start, active
void z_set_status_tend(uint8_t statnew)
{	if (z_status_tend > statnew) z_status_tend = statnew;	// nur z_status h�herer Priorit�t �bernehmen
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
 8003186:	4b07      	ldr	r3, [pc, #28]	@ (80031a4 <z_set_status_tend+0x28>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	79fa      	ldrb	r2, [r7, #7]
 800318c:	429a      	cmp	r2, r3
 800318e:	d203      	bcs.n	8003198 <z_set_status_tend+0x1c>
 8003190:	4a04      	ldr	r2, [pc, #16]	@ (80031a4 <z_set_status_tend+0x28>)
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	7013      	strb	r3, [r2, #0]
	return;
 8003196:	bf00      	nop
 8003198:	bf00      	nop
}
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000e7e 	.word	0x20000e7e

080031a8 <z_set_error>:

// Fehler an Zentrale melden
void z_set_error(uint8_t errnr)
{	if (errnr <= 63) z_error_akt |= (1ull << errnr);
 80031a8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4601      	mov	r1, r0
 80031b2:	71f9      	strb	r1, [r7, #7]
 80031b4:	79f9      	ldrb	r1, [r7, #7]
 80031b6:	293f      	cmp	r1, #63	@ 0x3f
 80031b8:	d81c      	bhi.n	80031f4 <z_set_error+0x4c>
 80031ba:	79fc      	ldrb	r4, [r7, #7]
 80031bc:	f04f 0001 	mov.w	r0, #1
 80031c0:	f04f 0100 	mov.w	r1, #0
 80031c4:	f1a4 0620 	sub.w	r6, r4, #32
 80031c8:	f1c4 0520 	rsb	r5, r4, #32
 80031cc:	fa01 f304 	lsl.w	r3, r1, r4
 80031d0:	fa00 f606 	lsl.w	r6, r0, r6
 80031d4:	4333      	orrs	r3, r6
 80031d6:	fa20 f505 	lsr.w	r5, r0, r5
 80031da:	432b      	orrs	r3, r5
 80031dc:	fa00 f204 	lsl.w	r2, r0, r4
 80031e0:	4907      	ldr	r1, [pc, #28]	@ (8003200 <z_set_error+0x58>)
 80031e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031e6:	ea42 0800 	orr.w	r8, r2, r0
 80031ea:	ea43 0901 	orr.w	r9, r3, r1
 80031ee:	4b04      	ldr	r3, [pc, #16]	@ (8003200 <z_set_error+0x58>)
 80031f0:	e9c3 8900 	strd	r8, r9, [r3]
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80031fe:	4770      	bx	lr
 8003200:	20000e80 	.word	0x20000e80

08003204 <z_clear_errors>:

void z_clear_errors(void)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
	z_error_kum = 0;
 800320a:	490e      	ldr	r1, [pc, #56]	@ (8003244 <z_clear_errors+0x40>)
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t i=0; i<4; i++)
 8003218:	2300      	movs	r3, #0
 800321a:	71fb      	strb	r3, [r7, #7]
 800321c:	e007      	b.n	800322e <z_clear_errors+0x2a>
	{
		z_chn_error_kum[i] = 0;
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	4a09      	ldr	r2, [pc, #36]	@ (8003248 <z_clear_errors+0x44>)
 8003222:	2100      	movs	r1, #0
 8003224:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<4; i++)
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	3301      	adds	r3, #1
 800322c:	71fb      	strb	r3, [r7, #7]
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d9f4      	bls.n	800321e <z_clear_errors+0x1a>
	}
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000e88 	.word	0x20000e88
 8003248:	20000e98 	.word	0x20000e98

0800324c <z_get_rmt>:
		return CMR_UNITBUSY;
	}
}

uint8_t z_get_rmt(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
	return z_ctrl_src;
 8003250:	4b03      	ldr	r3, [pc, #12]	@ (8003260 <z_get_rmt+0x14>)
 8003252:	781b      	ldrb	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20000ea1 	.word	0x20000ea1

08003264 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003264:	480d      	ldr	r0, [pc, #52]	@ (800329c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003266:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003268:	f7fe ff36 	bl	80020d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800326c:	480c      	ldr	r0, [pc, #48]	@ (80032a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800326e:	490d      	ldr	r1, [pc, #52]	@ (80032a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003270:	4a0d      	ldr	r2, [pc, #52]	@ (80032a8 <LoopForever+0xe>)
  movs r3, #0
 8003272:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003274:	e002      	b.n	800327c <LoopCopyDataInit>

08003276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800327a:	3304      	adds	r3, #4

0800327c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800327c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003280:	d3f9      	bcc.n	8003276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003282:	4a0a      	ldr	r2, [pc, #40]	@ (80032ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003284:	4c0a      	ldr	r4, [pc, #40]	@ (80032b0 <LoopForever+0x16>)
  movs r3, #0
 8003286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003288:	e001      	b.n	800328e <LoopFillZerobss>

0800328a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800328a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800328c:	3204      	adds	r2, #4

0800328e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003290:	d3fb      	bcc.n	800328a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003292:	f004 f875 	bl	8007380 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003296:	f7fd fae1 	bl	800085c <main>

0800329a <LoopForever>:

LoopForever:
    b LoopForever
 800329a:	e7fe      	b.n	800329a <LoopForever>
  ldr   r0, =_estack
 800329c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80032a8:	08007f08 	.word	0x08007f08
  ldr r2, =_sbss
 80032ac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80032b0:	20000ff0 	.word	0x20000ff0

080032b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032b4:	e7fe      	b.n	80032b4 <ADC1_2_IRQHandler>

080032b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c0:	2003      	movs	r0, #3
 80032c2:	f000 f97f 	bl	80035c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032c6:	200f      	movs	r0, #15
 80032c8:	f000 f80e 	bl	80032e8 <HAL_InitTick>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	71fb      	strb	r3, [r7, #7]
 80032d6:	e001      	b.n	80032dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032d8:	f7fe fe74 	bl	8001fc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032dc:	79fb      	ldrb	r3, [r7, #7]

}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80032f4:	4b16      	ldr	r3, [pc, #88]	@ (8003350 <HAL_InitTick+0x68>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d022      	beq.n	8003342 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80032fc:	4b15      	ldr	r3, [pc, #84]	@ (8003354 <HAL_InitTick+0x6c>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b13      	ldr	r3, [pc, #76]	@ (8003350 <HAL_InitTick+0x68>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003308:	fbb1 f3f3 	udiv	r3, r1, r3
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	4618      	mov	r0, r3
 8003312:	f000 f998 	bl	8003646 <HAL_SYSTICK_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10f      	bne.n	800333c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b0f      	cmp	r3, #15
 8003320:	d809      	bhi.n	8003336 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003322:	2200      	movs	r2, #0
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	f04f 30ff 	mov.w	r0, #4294967295
 800332a:	f000 f956 	bl	80035da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800332e:	4a0a      	ldr	r2, [pc, #40]	@ (8003358 <HAL_InitTick+0x70>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	e007      	b.n	8003346 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
 800333a:	e004      	b.n	8003346 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	e001      	b.n	8003346 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003346:	7bfb      	ldrb	r3, [r7, #15]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	2000000c 	.word	0x2000000c
 8003354:	20000004 	.word	0x20000004
 8003358:	20000008 	.word	0x20000008

0800335c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003360:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <HAL_IncTick+0x1c>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <HAL_IncTick+0x20>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4413      	add	r3, r2
 800336a:	4a03      	ldr	r2, [pc, #12]	@ (8003378 <HAL_IncTick+0x1c>)
 800336c:	6013      	str	r3, [r2, #0]
}
 800336e:	bf00      	nop
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	20000ea4 	.word	0x20000ea4
 800337c:	2000000c 	.word	0x2000000c

08003380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return uwTick;
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <HAL_GetTick+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000ea4 	.word	0x20000ea4

08003398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f7ff ffee 	bl	8003380 <HAL_GetTick>
 80033a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d004      	beq.n	80033bc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80033b2:	4b09      	ldr	r3, [pc, #36]	@ (80033d8 <HAL_Delay+0x40>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033bc:	bf00      	nop
 80033be:	f7ff ffdf 	bl	8003380 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d8f7      	bhi.n	80033be <HAL_Delay+0x26>
  {
  }
}
 80033ce:	bf00      	nop
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	2000000c 	.word	0x2000000c

080033dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003420 <__NVIC_SetPriorityGrouping+0x44>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033f8:	4013      	ands	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003404:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800340c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800340e:	4a04      	ldr	r2, [pc, #16]	@ (8003420 <__NVIC_SetPriorityGrouping+0x44>)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	60d3      	str	r3, [r2, #12]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003428:	4b04      	ldr	r3, [pc, #16]	@ (800343c <__NVIC_GetPriorityGrouping+0x18>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	f003 0307 	and.w	r3, r3, #7
}
 8003432:	4618      	mov	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	2b00      	cmp	r3, #0
 8003450:	db0b      	blt.n	800346a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	f003 021f 	and.w	r2, r3, #31
 8003458:	4907      	ldr	r1, [pc, #28]	@ (8003478 <__NVIC_EnableIRQ+0x38>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2001      	movs	r0, #1
 8003462:	fa00 f202 	lsl.w	r2, r0, r2
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	e000e100 	.word	0xe000e100

0800347c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	2b00      	cmp	r3, #0
 800348c:	db12      	blt.n	80034b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	490a      	ldr	r1, [pc, #40]	@ (80034c0 <__NVIC_DisableIRQ+0x44>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2001      	movs	r0, #1
 800349e:	fa00 f202 	lsl.w	r2, r0, r2
 80034a2:	3320      	adds	r3, #32
 80034a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034a8:	f3bf 8f4f 	dsb	sy
}
 80034ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034ae:	f3bf 8f6f 	isb	sy
}
 80034b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000e100 	.word	0xe000e100

080034c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	6039      	str	r1, [r7, #0]
 80034ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	db0a      	blt.n	80034ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	490c      	ldr	r1, [pc, #48]	@ (8003510 <__NVIC_SetPriority+0x4c>)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	0112      	lsls	r2, r2, #4
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	440b      	add	r3, r1
 80034e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034ec:	e00a      	b.n	8003504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4908      	ldr	r1, [pc, #32]	@ (8003514 <__NVIC_SetPriority+0x50>)
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	3b04      	subs	r3, #4
 80034fc:	0112      	lsls	r2, r2, #4
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	440b      	add	r3, r1
 8003502:	761a      	strb	r2, [r3, #24]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000e100 	.word	0xe000e100
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	@ 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f1c3 0307 	rsb	r3, r3, #7
 8003532:	2b04      	cmp	r3, #4
 8003534:	bf28      	it	cs
 8003536:	2304      	movcs	r3, #4
 8003538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3304      	adds	r3, #4
 800353e:	2b06      	cmp	r3, #6
 8003540:	d902      	bls.n	8003548 <NVIC_EncodePriority+0x30>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3b03      	subs	r3, #3
 8003546:	e000      	b.n	800354a <NVIC_EncodePriority+0x32>
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800354c:	f04f 32ff 	mov.w	r2, #4294967295
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43da      	mvns	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	401a      	ands	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003560:	f04f 31ff 	mov.w	r1, #4294967295
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	43d9      	mvns	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003570:	4313      	orrs	r3, r2
         );
}
 8003572:	4618      	mov	r0, r3
 8003574:	3724      	adds	r7, #36	@ 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003590:	d301      	bcc.n	8003596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003592:	2301      	movs	r3, #1
 8003594:	e00f      	b.n	80035b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003596:	4a0a      	ldr	r2, [pc, #40]	@ (80035c0 <SysTick_Config+0x40>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359e:	210f      	movs	r1, #15
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	f7ff ff8e 	bl	80034c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a8:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <SysTick_Config+0x40>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ae:	4b04      	ldr	r3, [pc, #16]	@ (80035c0 <SysTick_Config+0x40>)
 80035b0:	2207      	movs	r2, #7
 80035b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	e000e010 	.word	0xe000e010

080035c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff05 	bl	80033dc <__NVIC_SetPriorityGrouping>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	4603      	mov	r3, r0
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035e8:	f7ff ff1c 	bl	8003424 <__NVIC_GetPriorityGrouping>
 80035ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7ff ff90 	bl	8003518 <NVIC_EncodePriority>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff5f 	bl	80034c4 <__NVIC_SetPriority>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff0f 	bl	8003440 <__NVIC_EnableIRQ>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff1f 	bl	800347c <__NVIC_DisableIRQ>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ff96 	bl	8003580 <SysTick_Config>
 8003654:	4603      	mov	r3, r0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800366e:	e15a      	b.n	8003926 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	2101      	movs	r1, #1
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	fa01 f303 	lsl.w	r3, r1, r3
 800367c:	4013      	ands	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 814c 	beq.w	8003920 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b01      	cmp	r3, #1
 8003692:	d005      	beq.n	80036a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800369c:	2b02      	cmp	r3, #2
 800369e:	d130      	bne.n	8003702 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	2203      	movs	r2, #3
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036d6:	2201      	movs	r2, #1
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	f003 0201 	and.w	r2, r3, #1
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	2b03      	cmp	r3, #3
 800370c:	d017      	beq.n	800373e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	2203      	movs	r2, #3
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4013      	ands	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d123      	bne.n	8003792 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	08da      	lsrs	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3208      	adds	r2, #8
 8003752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003756:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	220f      	movs	r2, #15
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	08da      	lsrs	r2, r3, #3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3208      	adds	r2, #8
 800378c:	6939      	ldr	r1, [r7, #16]
 800378e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	2203      	movs	r2, #3
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 0203 	and.w	r2, r3, #3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80a6 	beq.w	8003920 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d4:	4b5b      	ldr	r3, [pc, #364]	@ (8003944 <HAL_GPIO_Init+0x2e4>)
 80037d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003944 <HAL_GPIO_Init+0x2e4>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6613      	str	r3, [r2, #96]	@ 0x60
 80037e0:	4b58      	ldr	r3, [pc, #352]	@ (8003944 <HAL_GPIO_Init+0x2e4>)
 80037e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ec:	4a56      	ldr	r2, [pc, #344]	@ (8003948 <HAL_GPIO_Init+0x2e8>)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	3302      	adds	r3, #2
 80037f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	220f      	movs	r2, #15
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4013      	ands	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003816:	d01f      	beq.n	8003858 <HAL_GPIO_Init+0x1f8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a4c      	ldr	r2, [pc, #304]	@ (800394c <HAL_GPIO_Init+0x2ec>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d019      	beq.n	8003854 <HAL_GPIO_Init+0x1f4>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a4b      	ldr	r2, [pc, #300]	@ (8003950 <HAL_GPIO_Init+0x2f0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d013      	beq.n	8003850 <HAL_GPIO_Init+0x1f0>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a4a      	ldr	r2, [pc, #296]	@ (8003954 <HAL_GPIO_Init+0x2f4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00d      	beq.n	800384c <HAL_GPIO_Init+0x1ec>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a49      	ldr	r2, [pc, #292]	@ (8003958 <HAL_GPIO_Init+0x2f8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d007      	beq.n	8003848 <HAL_GPIO_Init+0x1e8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a48      	ldr	r2, [pc, #288]	@ (800395c <HAL_GPIO_Init+0x2fc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_GPIO_Init+0x1e4>
 8003840:	2305      	movs	r3, #5
 8003842:	e00a      	b.n	800385a <HAL_GPIO_Init+0x1fa>
 8003844:	2306      	movs	r3, #6
 8003846:	e008      	b.n	800385a <HAL_GPIO_Init+0x1fa>
 8003848:	2304      	movs	r3, #4
 800384a:	e006      	b.n	800385a <HAL_GPIO_Init+0x1fa>
 800384c:	2303      	movs	r3, #3
 800384e:	e004      	b.n	800385a <HAL_GPIO_Init+0x1fa>
 8003850:	2302      	movs	r3, #2
 8003852:	e002      	b.n	800385a <HAL_GPIO_Init+0x1fa>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_GPIO_Init+0x1fa>
 8003858:	2300      	movs	r3, #0
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	f002 0203 	and.w	r2, r2, #3
 8003860:	0092      	lsls	r2, r2, #2
 8003862:	4093      	lsls	r3, r2
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800386a:	4937      	ldr	r1, [pc, #220]	@ (8003948 <HAL_GPIO_Init+0x2e8>)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	089b      	lsrs	r3, r3, #2
 8003870:	3302      	adds	r3, #2
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003878:	4b39      	ldr	r3, [pc, #228]	@ (8003960 <HAL_GPIO_Init+0x300>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	43db      	mvns	r3, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800389c:	4a30      	ldr	r2, [pc, #192]	@ (8003960 <HAL_GPIO_Init+0x300>)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003960 <HAL_GPIO_Init+0x300>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4013      	ands	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038c6:	4a26      	ldr	r2, [pc, #152]	@ (8003960 <HAL_GPIO_Init+0x300>)
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80038cc:	4b24      	ldr	r3, [pc, #144]	@ (8003960 <HAL_GPIO_Init+0x300>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	43db      	mvns	r3, r3
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003960 <HAL_GPIO_Init+0x300>)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003960 <HAL_GPIO_Init+0x300>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	43db      	mvns	r3, r3
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4013      	ands	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800391a:	4a11      	ldr	r2, [pc, #68]	@ (8003960 <HAL_GPIO_Init+0x300>)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	3301      	adds	r3, #1
 8003924:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	f47f ae9d 	bne.w	8003670 <HAL_GPIO_Init+0x10>
  }
}
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	371c      	adds	r7, #28
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40021000 	.word	0x40021000
 8003948:	40010000 	.word	0x40010000
 800394c:	48000400 	.word	0x48000400
 8003950:	48000800 	.word	0x48000800
 8003954:	48000c00 	.word	0x48000c00
 8003958:	48001000 	.word	0x48001000
 800395c:	48001400 	.word	0x48001400
 8003960:	40010400 	.word	0x40010400

08003964 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	887b      	ldrh	r3, [r7, #2]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
 8003980:	e001      	b.n	8003986 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003986:	7bfb      	ldrb	r3, [r7, #15]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
 80039a0:	4613      	mov	r3, r2
 80039a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039a4:	787b      	ldrb	r3, [r7, #1]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039b0:	e002      	b.n	80039b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039b2:	887a      	ldrh	r2, [r7, #2]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039d6:	887a      	ldrh	r2, [r7, #2]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4013      	ands	r3, r2
 80039dc:	041a      	lsls	r2, r3, #16
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	43d9      	mvns	r1, r3
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	400b      	ands	r3, r1
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	619a      	str	r2, [r3, #24]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d141      	bne.n	8003a8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a06:	4b4b      	ldr	r3, [pc, #300]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a12:	d131      	bne.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a14:	4b47      	ldr	r3, [pc, #284]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a1a:	4a46      	ldr	r2, [pc, #280]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a24:	4b43      	ldr	r3, [pc, #268]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a2c:	4a41      	ldr	r2, [pc, #260]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a34:	4b40      	ldr	r3, [pc, #256]	@ (8003b38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2232      	movs	r2, #50	@ 0x32
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	0c9b      	lsrs	r3, r3, #18
 8003a46:	3301      	adds	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a4a:	e002      	b.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a52:	4b38      	ldr	r3, [pc, #224]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a5e:	d102      	bne.n	8003a66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f2      	bne.n	8003a4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a66:	4b33      	ldr	r3, [pc, #204]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a72:	d158      	bne.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e057      	b.n	8003b28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a78:	4b2e      	ldr	r3, [pc, #184]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a88:	e04d      	b.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a90:	d141      	bne.n	8003b16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a92:	4b28      	ldr	r3, [pc, #160]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a9e:	d131      	bne.n	8003b04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003aa0:	4b24      	ldr	r3, [pc, #144]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aa6:	4a23      	ldr	r2, [pc, #140]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ab0:	4b20      	ldr	r3, [pc, #128]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003abe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2232      	movs	r2, #50	@ 0x32
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	4a1c      	ldr	r2, [pc, #112]	@ (8003b3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	0c9b      	lsrs	r3, r3, #18
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ad6:	e002      	b.n	8003ade <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ade:	4b15      	ldr	r3, [pc, #84]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aea:	d102      	bne.n	8003af2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f2      	bne.n	8003ad8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003af2:	4b10      	ldr	r3, [pc, #64]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003afe:	d112      	bne.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e011      	b.n	8003b28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b04:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b14:	e007      	b.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b16:	4b07      	ldr	r3, [pc, #28]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b1e:	4a05      	ldr	r2, [pc, #20]	@ (8003b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b24:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	40007000 	.word	0x40007000
 8003b38:	20000004 	.word	0x20000004
 8003b3c:	431bde83 	.word	0x431bde83

08003b40 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003b44:	4b05      	ldr	r3, [pc, #20]	@ (8003b5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4a04      	ldr	r2, [pc, #16]	@ (8003b5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b4e:	6093      	str	r3, [r2, #8]
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40007000 	.word	0x40007000

08003b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e2fe      	b.n	8004170 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d075      	beq.n	8003c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b7e:	4b97      	ldr	r3, [pc, #604]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b88:	4b94      	ldr	r3, [pc, #592]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b0c      	cmp	r3, #12
 8003b96:	d102      	bne.n	8003b9e <HAL_RCC_OscConfig+0x3e>
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d002      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x44>
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d10b      	bne.n	8003bbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	4b8d      	ldr	r3, [pc, #564]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d05b      	beq.n	8003c68 <HAL_RCC_OscConfig+0x108>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d157      	bne.n	8003c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e2d9      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc4:	d106      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x74>
 8003bc6:	4b85      	ldr	r3, [pc, #532]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a84      	ldr	r2, [pc, #528]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e01d      	b.n	8003c10 <HAL_RCC_OscConfig+0xb0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x98>
 8003bde:	4b7f      	ldr	r3, [pc, #508]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a7e      	ldr	r2, [pc, #504]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4b7c      	ldr	r3, [pc, #496]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a7b      	ldr	r2, [pc, #492]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e00b      	b.n	8003c10 <HAL_RCC_OscConfig+0xb0>
 8003bf8:	4b78      	ldr	r3, [pc, #480]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a77      	ldr	r2, [pc, #476]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b75      	ldr	r3, [pc, #468]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a74      	ldr	r2, [pc, #464]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7ff fbb2 	bl	8003380 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c20:	f7ff fbae 	bl	8003380 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	@ 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e29e      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c32:	4b6a      	ldr	r3, [pc, #424]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0xc0>
 8003c3e:	e014      	b.n	8003c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7ff fb9e 	bl	8003380 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c48:	f7ff fb9a 	bl	8003380 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	@ 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e28a      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c5a:	4b60      	ldr	r3, [pc, #384]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0xe8>
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d075      	beq.n	8003d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c76:	4b59      	ldr	r3, [pc, #356]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c80:	4b56      	ldr	r3, [pc, #344]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b0c      	cmp	r3, #12
 8003c8e:	d102      	bne.n	8003c96 <HAL_RCC_OscConfig+0x136>
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d002      	beq.n	8003c9c <HAL_RCC_OscConfig+0x13c>
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d11f      	bne.n	8003cdc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c9c:	4b4f      	ldr	r3, [pc, #316]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x154>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e25d      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb4:	4b49      	ldr	r3, [pc, #292]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	061b      	lsls	r3, r3, #24
 8003cc2:	4946      	ldr	r1, [pc, #280]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003cc8:	4b45      	ldr	r3, [pc, #276]	@ (8003de0 <HAL_RCC_OscConfig+0x280>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fb0b 	bl	80032e8 <HAL_InitTick>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d043      	beq.n	8003d60 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e249      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d023      	beq.n	8003d2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a3c      	ldr	r2, [pc, #240]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7ff fb46 	bl	8003380 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf8:	f7ff fb42 	bl	8003380 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e232      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d0a:	4b34      	ldr	r3, [pc, #208]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d16:	4b31      	ldr	r3, [pc, #196]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	061b      	lsls	r3, r3, #24
 8003d24:	492d      	ldr	r1, [pc, #180]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]
 8003d2a:	e01a      	b.n	8003d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a2a      	ldr	r2, [pc, #168]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003d32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7ff fb22 	bl	8003380 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d40:	f7ff fb1e 	bl	8003380 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e20e      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d52:	4b22      	ldr	r3, [pc, #136]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x1e0>
 8003d5e:	e000      	b.n	8003d62 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d041      	beq.n	8003df2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d01c      	beq.n	8003db0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d76:	4b19      	ldr	r3, [pc, #100]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d7c:	4a17      	ldr	r2, [pc, #92]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7ff fafb 	bl	8003380 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8e:	f7ff faf7 	bl	8003380 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e1e7      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003da0:	4b0e      	ldr	r3, [pc, #56]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0ef      	beq.n	8003d8e <HAL_RCC_OscConfig+0x22e>
 8003dae:	e020      	b.n	8003df2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db6:	4a09      	ldr	r2, [pc, #36]	@ (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7ff fade 	bl	8003380 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dc6:	e00d      	b.n	8003de4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc8:	f7ff fada 	bl	8003380 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d906      	bls.n	8003de4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e1ca      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003de4:	4b8c      	ldr	r3, [pc, #560]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ea      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 80a6 	beq.w	8003f4c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e00:	2300      	movs	r3, #0
 8003e02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e04:	4b84      	ldr	r3, [pc, #528]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_OscConfig+0x2b4>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x2b6>
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00d      	beq.n	8003e36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1a:	4b7f      	ldr	r3, [pc, #508]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1e:	4a7e      	ldr	r2, [pc, #504]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e24:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e26:	4b7c      	ldr	r3, [pc, #496]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e32:	2301      	movs	r3, #1
 8003e34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e36:	4b79      	ldr	r3, [pc, #484]	@ (800401c <HAL_RCC_OscConfig+0x4bc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d118      	bne.n	8003e74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e42:	4b76      	ldr	r3, [pc, #472]	@ (800401c <HAL_RCC_OscConfig+0x4bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a75      	ldr	r2, [pc, #468]	@ (800401c <HAL_RCC_OscConfig+0x4bc>)
 8003e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4e:	f7ff fa97 	bl	8003380 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e56:	f7ff fa93 	bl	8003380 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e183      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e68:	4b6c      	ldr	r3, [pc, #432]	@ (800401c <HAL_RCC_OscConfig+0x4bc>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d108      	bne.n	8003e8e <HAL_RCC_OscConfig+0x32e>
 8003e7c:	4b66      	ldr	r3, [pc, #408]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e82:	4a65      	ldr	r2, [pc, #404]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e8c:	e024      	b.n	8003ed8 <HAL_RCC_OscConfig+0x378>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	d110      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x358>
 8003e96:	4b60      	ldr	r3, [pc, #384]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9c:	4a5e      	ldr	r2, [pc, #376]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003e9e:	f043 0304 	orr.w	r3, r3, #4
 8003ea2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ea6:	4b5c      	ldr	r3, [pc, #368]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eac:	4a5a      	ldr	r2, [pc, #360]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003eb6:	e00f      	b.n	8003ed8 <HAL_RCC_OscConfig+0x378>
 8003eb8:	4b57      	ldr	r3, [pc, #348]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebe:	4a56      	ldr	r2, [pc, #344]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ec8:	4b53      	ldr	r3, [pc, #332]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ece:	4a52      	ldr	r2, [pc, #328]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003ed0:	f023 0304 	bic.w	r3, r3, #4
 8003ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d016      	beq.n	8003f0e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7ff fa4e 	bl	8003380 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7ff fa4a 	bl	8003380 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e138      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efe:	4b46      	ldr	r3, [pc, #280]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ed      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x388>
 8003f0c:	e015      	b.n	8003f3a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7ff fa37 	bl	8003380 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7ff fa33 	bl	8003380 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e121      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1ed      	bne.n	8003f16 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f3a:	7ffb      	ldrb	r3, [r7, #31]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f40:	4b35      	ldr	r3, [pc, #212]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f44:	4a34      	ldr	r2, [pc, #208]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003f46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f4a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d03c      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01c      	beq.n	8003f9a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f60:	4b2d      	ldr	r3, [pc, #180]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f66:	4a2c      	ldr	r2, [pc, #176]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f70:	f7ff fa06 	bl	8003380 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f78:	f7ff fa02 	bl	8003380 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e0f2      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f8a:	4b23      	ldr	r3, [pc, #140]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0ef      	beq.n	8003f78 <HAL_RCC_OscConfig+0x418>
 8003f98:	e01b      	b.n	8003fd2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003faa:	f7ff f9e9 	bl	8003380 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fb2:	f7ff f9e5 	bl	8003380 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e0d5      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fc4:	4b14      	ldr	r3, [pc, #80]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1ef      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80c9 	beq.w	800416e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b0c      	cmp	r3, #12
 8003fe6:	f000 8083 	beq.w	80040f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d15e      	bne.n	80040b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff2:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a08      	ldr	r2, [pc, #32]	@ (8004018 <HAL_RCC_OscConfig+0x4b8>)
 8003ff8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffe:	f7ff f9bf 	bl	8003380 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004004:	e00c      	b.n	8004020 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004006:	f7ff f9bb 	bl	8003380 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d905      	bls.n	8004020 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e0ab      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
 8004018:	40021000 	.word	0x40021000
 800401c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004020:	4b55      	ldr	r3, [pc, #340]	@ (8004178 <HAL_RCC_OscConfig+0x618>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1ec      	bne.n	8004006 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800402c:	4b52      	ldr	r3, [pc, #328]	@ (8004178 <HAL_RCC_OscConfig+0x618>)
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	4b52      	ldr	r3, [pc, #328]	@ (800417c <HAL_RCC_OscConfig+0x61c>)
 8004032:	4013      	ands	r3, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6a11      	ldr	r1, [r2, #32]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800403c:	3a01      	subs	r2, #1
 800403e:	0112      	lsls	r2, r2, #4
 8004040:	4311      	orrs	r1, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004046:	0212      	lsls	r2, r2, #8
 8004048:	4311      	orrs	r1, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800404e:	0852      	lsrs	r2, r2, #1
 8004050:	3a01      	subs	r2, #1
 8004052:	0552      	lsls	r2, r2, #21
 8004054:	4311      	orrs	r1, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800405a:	0852      	lsrs	r2, r2, #1
 800405c:	3a01      	subs	r2, #1
 800405e:	0652      	lsls	r2, r2, #25
 8004060:	4311      	orrs	r1, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004066:	06d2      	lsls	r2, r2, #27
 8004068:	430a      	orrs	r2, r1
 800406a:	4943      	ldr	r1, [pc, #268]	@ (8004178 <HAL_RCC_OscConfig+0x618>)
 800406c:	4313      	orrs	r3, r2
 800406e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004070:	4b41      	ldr	r3, [pc, #260]	@ (8004178 <HAL_RCC_OscConfig+0x618>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a40      	ldr	r2, [pc, #256]	@ (8004178 <HAL_RCC_OscConfig+0x618>)
 8004076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800407a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800407c:	4b3e      	ldr	r3, [pc, #248]	@ (8004178 <HAL_RCC_OscConfig+0x618>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a3d      	ldr	r2, [pc, #244]	@ (8004178 <HAL_RCC_OscConfig+0x618>)
 8004082:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004086:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7ff f97a 	bl	8003380 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004090:	f7ff f976 	bl	8003380 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e066      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a2:	4b35      	ldr	r3, [pc, #212]	@ (8004178 <HAL_RCC_OscConfig+0x618>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x530>
 80040ae:	e05e      	b.n	800416e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b0:	4b31      	ldr	r3, [pc, #196]	@ (8004178 <HAL_RCC_OscConfig+0x618>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a30      	ldr	r2, [pc, #192]	@ (8004178 <HAL_RCC_OscConfig+0x618>)
 80040b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7ff f960 	bl	8003380 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c4:	f7ff f95c 	bl	8003380 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e04c      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d6:	4b28      	ldr	r3, [pc, #160]	@ (8004178 <HAL_RCC_OscConfig+0x618>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80040e2:	4b25      	ldr	r3, [pc, #148]	@ (8004178 <HAL_RCC_OscConfig+0x618>)
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	4924      	ldr	r1, [pc, #144]	@ (8004178 <HAL_RCC_OscConfig+0x618>)
 80040e8:	4b25      	ldr	r3, [pc, #148]	@ (8004180 <HAL_RCC_OscConfig+0x620>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	60cb      	str	r3, [r1, #12]
 80040ee:	e03e      	b.n	800416e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e039      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80040fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004178 <HAL_RCC_OscConfig+0x618>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f003 0203 	and.w	r2, r3, #3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	429a      	cmp	r2, r3
 800410e:	d12c      	bne.n	800416a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	3b01      	subs	r3, #1
 800411c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411e:	429a      	cmp	r2, r3
 8004120:	d123      	bne.n	800416a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800412e:	429a      	cmp	r2, r3
 8004130:	d11b      	bne.n	800416a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800413e:	429a      	cmp	r2, r3
 8004140:	d113      	bne.n	800416a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414c:	085b      	lsrs	r3, r3, #1
 800414e:	3b01      	subs	r3, #1
 8004150:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d109      	bne.n	800416a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	3b01      	subs	r3, #1
 8004164:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d001      	beq.n	800416e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3720      	adds	r7, #32
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000
 800417c:	019f800c 	.word	0x019f800c
 8004180:	feeefffc 	.word	0xfeeefffc

08004184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e11e      	b.n	80043da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800419c:	4b91      	ldr	r3, [pc, #580]	@ (80043e4 <HAL_RCC_ClockConfig+0x260>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d910      	bls.n	80041cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b8e      	ldr	r3, [pc, #568]	@ (80043e4 <HAL_RCC_ClockConfig+0x260>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f023 020f 	bic.w	r2, r3, #15
 80041b2:	498c      	ldr	r1, [pc, #560]	@ (80043e4 <HAL_RCC_ClockConfig+0x260>)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b8a      	ldr	r3, [pc, #552]	@ (80043e4 <HAL_RCC_ClockConfig+0x260>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e106      	b.n	80043da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d073      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d129      	bne.n	8004234 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e0:	4b81      	ldr	r3, [pc, #516]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0f4      	b.n	80043da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80041f0:	f000 f99e 	bl	8004530 <RCC_GetSysClockFreqFromPLLSource>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4a7c      	ldr	r2, [pc, #496]	@ (80043ec <HAL_RCC_ClockConfig+0x268>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d93f      	bls.n	800427e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041fe:	4b7a      	ldr	r3, [pc, #488]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004212:	2b00      	cmp	r3, #0
 8004214:	d033      	beq.n	800427e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800421a:	2b00      	cmp	r3, #0
 800421c:	d12f      	bne.n	800427e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800421e:	4b72      	ldr	r3, [pc, #456]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004226:	4a70      	ldr	r2, [pc, #448]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 8004228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800422c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800422e:	2380      	movs	r3, #128	@ 0x80
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e024      	b.n	800427e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d107      	bne.n	800424c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800423c:	4b6a      	ldr	r3, [pc, #424]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0c6      	b.n	80043da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800424c:	4b66      	ldr	r3, [pc, #408]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0be      	b.n	80043da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800425c:	f000 f8ce 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8004260:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4a61      	ldr	r2, [pc, #388]	@ (80043ec <HAL_RCC_ClockConfig+0x268>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d909      	bls.n	800427e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800426a:	4b5f      	ldr	r3, [pc, #380]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004272:	4a5d      	ldr	r2, [pc, #372]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 8004274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004278:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800427a:	2380      	movs	r3, #128	@ 0x80
 800427c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800427e:	4b5a      	ldr	r3, [pc, #360]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f023 0203 	bic.w	r2, r3, #3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	4957      	ldr	r1, [pc, #348]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 800428c:	4313      	orrs	r3, r2
 800428e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004290:	f7ff f876 	bl	8003380 <HAL_GetTick>
 8004294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	e00a      	b.n	80042ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004298:	f7ff f872 	bl	8003380 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e095      	b.n	80043da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	4b4e      	ldr	r3, [pc, #312]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 020c 	and.w	r2, r3, #12
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	429a      	cmp	r2, r3
 80042be:	d1eb      	bne.n	8004298 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d023      	beq.n	8004314 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d8:	4b43      	ldr	r3, [pc, #268]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4a42      	ldr	r2, [pc, #264]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 80042de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80042f0:	4b3d      	ldr	r3, [pc, #244]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80042f8:	4a3b      	ldr	r2, [pc, #236]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 80042fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004300:	4b39      	ldr	r3, [pc, #228]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	4936      	ldr	r1, [pc, #216]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]
 8004312:	e008      	b.n	8004326 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b80      	cmp	r3, #128	@ 0x80
 8004318:	d105      	bne.n	8004326 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800431a:	4b33      	ldr	r3, [pc, #204]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	4a32      	ldr	r2, [pc, #200]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 8004320:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004324:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004326:	4b2f      	ldr	r3, [pc, #188]	@ (80043e4 <HAL_RCC_ClockConfig+0x260>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d21d      	bcs.n	8004370 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004334:	4b2b      	ldr	r3, [pc, #172]	@ (80043e4 <HAL_RCC_ClockConfig+0x260>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f023 020f 	bic.w	r2, r3, #15
 800433c:	4929      	ldr	r1, [pc, #164]	@ (80043e4 <HAL_RCC_ClockConfig+0x260>)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	4313      	orrs	r3, r2
 8004342:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004344:	f7ff f81c 	bl	8003380 <HAL_GetTick>
 8004348:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	e00a      	b.n	8004362 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434c:	f7ff f818 	bl	8003380 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e03b      	b.n	80043da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	4b20      	ldr	r3, [pc, #128]	@ (80043e4 <HAL_RCC_ClockConfig+0x260>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d1ed      	bne.n	800434c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800437c:	4b1a      	ldr	r3, [pc, #104]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4917      	ldr	r1, [pc, #92]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800439a:	4b13      	ldr	r3, [pc, #76]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	490f      	ldr	r1, [pc, #60]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ae:	f000 f825 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 80043b2:	4602      	mov	r2, r0
 80043b4:	4b0c      	ldr	r3, [pc, #48]	@ (80043e8 <HAL_RCC_ClockConfig+0x264>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	490c      	ldr	r1, [pc, #48]	@ (80043f0 <HAL_RCC_ClockConfig+0x26c>)
 80043c0:	5ccb      	ldrb	r3, [r1, r3]
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ca:	4a0a      	ldr	r2, [pc, #40]	@ (80043f4 <HAL_RCC_ClockConfig+0x270>)
 80043cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80043ce:	4b0a      	ldr	r3, [pc, #40]	@ (80043f8 <HAL_RCC_ClockConfig+0x274>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fe ff88 	bl	80032e8 <HAL_InitTick>
 80043d8:	4603      	mov	r3, r0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40022000 	.word	0x40022000
 80043e8:	40021000 	.word	0x40021000
 80043ec:	04c4b400 	.word	0x04c4b400
 80043f0:	08007e84 	.word	0x08007e84
 80043f4:	20000004 	.word	0x20000004
 80043f8:	20000008 	.word	0x20000008

080043fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004402:	4b2c      	ldr	r3, [pc, #176]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b04      	cmp	r3, #4
 800440c:	d102      	bne.n	8004414 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800440e:	4b2a      	ldr	r3, [pc, #168]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	e047      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004414:	4b27      	ldr	r3, [pc, #156]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 030c 	and.w	r3, r3, #12
 800441c:	2b08      	cmp	r3, #8
 800441e:	d102      	bne.n	8004426 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004420:	4b26      	ldr	r3, [pc, #152]	@ (80044bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	e03e      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004426:	4b23      	ldr	r3, [pc, #140]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	2b0c      	cmp	r3, #12
 8004430:	d136      	bne.n	80044a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004432:	4b20      	ldr	r3, [pc, #128]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800443c:	4b1d      	ldr	r3, [pc, #116]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	3301      	adds	r3, #1
 8004448:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b03      	cmp	r3, #3
 800444e:	d10c      	bne.n	800446a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004450:	4a1a      	ldr	r2, [pc, #104]	@ (80044bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	fbb2 f3f3 	udiv	r3, r2, r3
 8004458:	4a16      	ldr	r2, [pc, #88]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800445a:	68d2      	ldr	r2, [r2, #12]
 800445c:	0a12      	lsrs	r2, r2, #8
 800445e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	617b      	str	r3, [r7, #20]
      break;
 8004468:	e00c      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800446a:	4a13      	ldr	r2, [pc, #76]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004472:	4a10      	ldr	r2, [pc, #64]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004474:	68d2      	ldr	r2, [r2, #12]
 8004476:	0a12      	lsrs	r2, r2, #8
 8004478:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800447c:	fb02 f303 	mul.w	r3, r2, r3
 8004480:	617b      	str	r3, [r7, #20]
      break;
 8004482:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004484:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	0e5b      	lsrs	r3, r3, #25
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	3301      	adds	r3, #1
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	e001      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80044a4:	693b      	ldr	r3, [r7, #16]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	007a1200 	.word	0x007a1200

080044c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c4:	4b03      	ldr	r3, [pc, #12]	@ (80044d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044c6:	681b      	ldr	r3, [r3, #0]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000004 	.word	0x20000004

080044d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044dc:	f7ff fff0 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b06      	ldr	r3, [pc, #24]	@ (80044fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0a1b      	lsrs	r3, r3, #8
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4904      	ldr	r1, [pc, #16]	@ (8004500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40021000 	.word	0x40021000
 8004500:	08007e94 	.word	0x08007e94

08004504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004508:	f7ff ffda 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b06      	ldr	r3, [pc, #24]	@ (8004528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	0adb      	lsrs	r3, r3, #11
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4904      	ldr	r1, [pc, #16]	@ (800452c <HAL_RCC_GetPCLK2Freq+0x28>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004524:	4618      	mov	r0, r3
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40021000 	.word	0x40021000
 800452c:	08007e94 	.word	0x08007e94

08004530 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004536:	4b1e      	ldr	r3, [pc, #120]	@ (80045b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004540:	4b1b      	ldr	r3, [pc, #108]	@ (80045b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	3301      	adds	r3, #1
 800454c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d10c      	bne.n	800456e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004554:	4a17      	ldr	r2, [pc, #92]	@ (80045b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	fbb2 f3f3 	udiv	r3, r2, r3
 800455c:	4a14      	ldr	r2, [pc, #80]	@ (80045b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800455e:	68d2      	ldr	r2, [r2, #12]
 8004560:	0a12      	lsrs	r2, r2, #8
 8004562:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004566:	fb02 f303 	mul.w	r3, r2, r3
 800456a:	617b      	str	r3, [r7, #20]
    break;
 800456c:	e00c      	b.n	8004588 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800456e:	4a12      	ldr	r2, [pc, #72]	@ (80045b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	fbb2 f3f3 	udiv	r3, r2, r3
 8004576:	4a0e      	ldr	r2, [pc, #56]	@ (80045b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004578:	68d2      	ldr	r2, [r2, #12]
 800457a:	0a12      	lsrs	r2, r2, #8
 800457c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004580:	fb02 f303 	mul.w	r3, r2, r3
 8004584:	617b      	str	r3, [r7, #20]
    break;
 8004586:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004588:	4b09      	ldr	r3, [pc, #36]	@ (80045b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	0e5b      	lsrs	r3, r3, #25
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	3301      	adds	r3, #1
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80045a2:	687b      	ldr	r3, [r7, #4]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	40021000 	.word	0x40021000
 80045b4:	007a1200 	.word	0x007a1200
 80045b8:	00f42400 	.word	0x00f42400

080045bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045c4:	2300      	movs	r3, #0
 80045c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045c8:	2300      	movs	r3, #0
 80045ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8098 	beq.w	800470a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045da:	2300      	movs	r3, #0
 80045dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045de:	4b43      	ldr	r3, [pc, #268]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10d      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ea:	4b40      	ldr	r3, [pc, #256]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ee:	4a3f      	ldr	r2, [pc, #252]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80045f6:	4b3d      	ldr	r3, [pc, #244]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004602:	2301      	movs	r3, #1
 8004604:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004606:	4b3a      	ldr	r3, [pc, #232]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a39      	ldr	r2, [pc, #228]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800460c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004610:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004612:	f7fe feb5 	bl	8003380 <HAL_GetTick>
 8004616:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004618:	e009      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461a:	f7fe feb1 	bl	8003380 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d902      	bls.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	74fb      	strb	r3, [r7, #19]
        break;
 800462c:	e005      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800462e:	4b30      	ldr	r3, [pc, #192]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0ef      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d159      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004640:	4b2a      	ldr	r3, [pc, #168]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01e      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	429a      	cmp	r2, r3
 800465a:	d019      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800465c:	4b23      	ldr	r3, [pc, #140]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004666:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004668:	4b20      	ldr	r3, [pc, #128]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800466e:	4a1f      	ldr	r2, [pc, #124]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004678:	4b1c      	ldr	r3, [pc, #112]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467e:	4a1b      	ldr	r2, [pc, #108]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004688:	4a18      	ldr	r2, [pc, #96]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d016      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469a:	f7fe fe71 	bl	8003380 <HAL_GetTick>
 800469e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a0:	e00b      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a2:	f7fe fe6d 	bl	8003380 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d902      	bls.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	74fb      	strb	r3, [r7, #19]
            break;
 80046b8:	e006      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ba:	4b0c      	ldr	r3, [pc, #48]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0ec      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80046c8:	7cfb      	ldrb	r3, [r7, #19]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10b      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ce:	4b07      	ldr	r3, [pc, #28]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046dc:	4903      	ldr	r1, [pc, #12]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80046e4:	e008      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046e6:	7cfb      	ldrb	r3, [r7, #19]
 80046e8:	74bb      	strb	r3, [r7, #18]
 80046ea:	e005      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f8:	7c7b      	ldrb	r3, [r7, #17]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fe:	4ba7      	ldr	r3, [pc, #668]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004702:	4aa6      	ldr	r2, [pc, #664]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004704:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004708:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004716:	4ba1      	ldr	r3, [pc, #644]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471c:	f023 0203 	bic.w	r2, r3, #3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	499d      	ldr	r1, [pc, #628]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004738:	4b98      	ldr	r3, [pc, #608]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473e:	f023 020c 	bic.w	r2, r3, #12
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	4995      	ldr	r1, [pc, #596]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800475a:	4b90      	ldr	r3, [pc, #576]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004760:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	498c      	ldr	r1, [pc, #560]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800477c:	4b87      	ldr	r3, [pc, #540]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004782:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	4984      	ldr	r1, [pc, #528]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800479e:	4b7f      	ldr	r3, [pc, #508]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	497b      	ldr	r1, [pc, #492]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047c0:	4b76      	ldr	r3, [pc, #472]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	4973      	ldr	r1, [pc, #460]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047e2:	4b6e      	ldr	r3, [pc, #440]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	496a      	ldr	r1, [pc, #424]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004804:	4b65      	ldr	r3, [pc, #404]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	4962      	ldr	r1, [pc, #392]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004826:	4b5d      	ldr	r3, [pc, #372]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	4959      	ldr	r1, [pc, #356]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004848:	4b54      	ldr	r3, [pc, #336]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800484e:	f023 0203 	bic.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004856:	4951      	ldr	r1, [pc, #324]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800486a:	4b4c      	ldr	r3, [pc, #304]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004870:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004878:	4948      	ldr	r1, [pc, #288]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004888:	2b00      	cmp	r3, #0
 800488a:	d015      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800488c:	4b43      	ldr	r3, [pc, #268]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004892:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489a:	4940      	ldr	r1, [pc, #256]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048aa:	d105      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ac:	4b3b      	ldr	r3, [pc, #236]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4a3a      	ldr	r2, [pc, #232]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048b6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d015      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048c4:	4b35      	ldr	r3, [pc, #212]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d2:	4932      	ldr	r1, [pc, #200]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048e2:	d105      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048e4:	4b2d      	ldr	r3, [pc, #180]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4a2c      	ldr	r2, [pc, #176]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048ee:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d015      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048fc:	4b27      	ldr	r3, [pc, #156]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004902:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490a:	4924      	ldr	r1, [pc, #144]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800491a:	d105      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800491c:	4b1f      	ldr	r3, [pc, #124]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4a1e      	ldr	r2, [pc, #120]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004926:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d015      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004934:	4b19      	ldr	r3, [pc, #100]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004942:	4916      	ldr	r1, [pc, #88]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004952:	d105      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004954:	4b11      	ldr	r3, [pc, #68]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4a10      	ldr	r2, [pc, #64]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800495a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800495e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d019      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800496c:	4b0b      	ldr	r3, [pc, #44]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004972:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497a:	4908      	ldr	r1, [pc, #32]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800498a:	d109      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800498c:	4b03      	ldr	r3, [pc, #12]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	4a02      	ldr	r2, [pc, #8]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004992:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004996:	60d3      	str	r3, [r2, #12]
 8004998:	e002      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d015      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049ac:	4b29      	ldr	r3, [pc, #164]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ba:	4926      	ldr	r1, [pc, #152]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ca:	d105      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80049cc:	4b21      	ldr	r3, [pc, #132]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a20      	ldr	r2, [pc, #128]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d015      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80049e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ea:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f2:	4918      	ldr	r1, [pc, #96]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a02:	d105      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a04:	4b13      	ldr	r3, [pc, #76]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	4a12      	ldr	r2, [pc, #72]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a0e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d015      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a2a:	490a      	ldr	r1, [pc, #40]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a3a:	d105      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a3c:	4b05      	ldr	r3, [pc, #20]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4a04      	ldr	r2, [pc, #16]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a48:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000

08004a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e09d      	b.n	8004ba6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d108      	bne.n	8004a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a7a:	d009      	beq.n	8004a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	61da      	str	r2, [r3, #28]
 8004a82:	e005      	b.n	8004a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fd f878 	bl	8001ba0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ad0:	d902      	bls.n	8004ad8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	e002      	b.n	8004ade <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004adc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004ae6:	d007      	beq.n	8004af8 <HAL_SPI_Init+0xa0>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004af0:	d002      	beq.n	8004af8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3a:	ea42 0103 	orr.w	r1, r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b42:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	0c1b      	lsrs	r3, r3, #16
 8004b54:	f003 0204 	and.w	r2, r3, #4
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b74:	ea42 0103 	orr.w	r1, r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e049      	b.n	8004c54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d106      	bne.n	8004bda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7fd fafb 	bl	80021d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3304      	adds	r3, #4
 8004bea:	4619      	mov	r1, r3
 8004bec:	4610      	mov	r0, r2
 8004bee:	f000 f983 	bl	8004ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_TIM_ConfigClockSource+0x1c>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e0ee      	b.n	8004e56 <HAL_TIM_ConfigClockSource+0x1fa>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004c96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a6b      	ldr	r2, [pc, #428]	@ (8004e60 <HAL_TIM_ConfigClockSource+0x204>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	f000 80b9 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1ce>
 8004cb8:	4a69      	ldr	r2, [pc, #420]	@ (8004e60 <HAL_TIM_ConfigClockSource+0x204>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	f200 80be 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004cc0:	4a68      	ldr	r2, [pc, #416]	@ (8004e64 <HAL_TIM_ConfigClockSource+0x208>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	f000 80b1 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1ce>
 8004cc8:	4a66      	ldr	r2, [pc, #408]	@ (8004e64 <HAL_TIM_ConfigClockSource+0x208>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	f200 80b6 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004cd0:	4a65      	ldr	r2, [pc, #404]	@ (8004e68 <HAL_TIM_ConfigClockSource+0x20c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	f000 80a9 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1ce>
 8004cd8:	4a63      	ldr	r2, [pc, #396]	@ (8004e68 <HAL_TIM_ConfigClockSource+0x20c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	f200 80ae 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004ce0:	4a62      	ldr	r2, [pc, #392]	@ (8004e6c <HAL_TIM_ConfigClockSource+0x210>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	f000 80a1 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1ce>
 8004ce8:	4a60      	ldr	r2, [pc, #384]	@ (8004e6c <HAL_TIM_ConfigClockSource+0x210>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	f200 80a6 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004cf0:	4a5f      	ldr	r2, [pc, #380]	@ (8004e70 <HAL_TIM_ConfigClockSource+0x214>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	f000 8099 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1ce>
 8004cf8:	4a5d      	ldr	r2, [pc, #372]	@ (8004e70 <HAL_TIM_ConfigClockSource+0x214>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	f200 809e 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004d00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d04:	f000 8091 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1ce>
 8004d08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d0c:	f200 8096 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004d10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d14:	f000 8089 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1ce>
 8004d18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d1c:	f200 808e 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d24:	d03e      	beq.n	8004da4 <HAL_TIM_ConfigClockSource+0x148>
 8004d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d2a:	f200 8087 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d32:	f000 8086 	beq.w	8004e42 <HAL_TIM_ConfigClockSource+0x1e6>
 8004d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d3a:	d87f      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004d3c:	2b70      	cmp	r3, #112	@ 0x70
 8004d3e:	d01a      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x11a>
 8004d40:	2b70      	cmp	r3, #112	@ 0x70
 8004d42:	d87b      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004d44:	2b60      	cmp	r3, #96	@ 0x60
 8004d46:	d050      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x18e>
 8004d48:	2b60      	cmp	r3, #96	@ 0x60
 8004d4a:	d877      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004d4c:	2b50      	cmp	r3, #80	@ 0x50
 8004d4e:	d03c      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x16e>
 8004d50:	2b50      	cmp	r3, #80	@ 0x50
 8004d52:	d873      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004d54:	2b40      	cmp	r3, #64	@ 0x40
 8004d56:	d058      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x1ae>
 8004d58:	2b40      	cmp	r3, #64	@ 0x40
 8004d5a:	d86f      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004d5c:	2b30      	cmp	r3, #48	@ 0x30
 8004d5e:	d064      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x1ce>
 8004d60:	2b30      	cmp	r3, #48	@ 0x30
 8004d62:	d86b      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d060      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x1ce>
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d867      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d05c      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x1ce>
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d05a      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x1ce>
 8004d74:	e062      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d86:	f000 fabd 	bl	8005304 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	609a      	str	r2, [r3, #8]
      break;
 8004da2:	e04f      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004db4:	f000 faa6 	bl	8005304 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dc6:	609a      	str	r2, [r3, #8]
      break;
 8004dc8:	e03c      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f000 fa18 	bl	800520c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2150      	movs	r1, #80	@ 0x50
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fa71 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8004de8:	e02c      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004df6:	461a      	mov	r2, r3
 8004df8:	f000 fa37 	bl	800526a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2160      	movs	r1, #96	@ 0x60
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fa61 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8004e08:	e01c      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e16:	461a      	mov	r2, r3
 8004e18:	f000 f9f8 	bl	800520c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2140      	movs	r1, #64	@ 0x40
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fa51 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8004e28:	e00c      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f000 fa48 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8004e3a:	e003      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e40:	e000      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8004e42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	00100070 	.word	0x00100070
 8004e64:	00100050 	.word	0x00100050
 8004e68:	00100040 	.word	0x00100040
 8004e6c:	00100030 	.word	0x00100030
 8004e70:	00100020 	.word	0x00100020

08004e74 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_TIM_SlaveConfigSynchro+0x18>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e031      	b.n	8004ef0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004e9c:	6839      	ldr	r1, [r7, #0]
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f8de 	bl	8005060 <TIM_SlaveTimer_SetConfig>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e018      	b.n	8004ef0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ecc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004edc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a4c      	ldr	r2, [pc, #304]	@ (800503c <TIM_Base_SetConfig+0x144>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d017      	beq.n	8004f40 <TIM_Base_SetConfig+0x48>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f16:	d013      	beq.n	8004f40 <TIM_Base_SetConfig+0x48>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a49      	ldr	r2, [pc, #292]	@ (8005040 <TIM_Base_SetConfig+0x148>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00f      	beq.n	8004f40 <TIM_Base_SetConfig+0x48>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a48      	ldr	r2, [pc, #288]	@ (8005044 <TIM_Base_SetConfig+0x14c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <TIM_Base_SetConfig+0x48>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a47      	ldr	r2, [pc, #284]	@ (8005048 <TIM_Base_SetConfig+0x150>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_Base_SetConfig+0x48>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a46      	ldr	r2, [pc, #280]	@ (800504c <TIM_Base_SetConfig+0x154>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_Base_SetConfig+0x48>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a45      	ldr	r2, [pc, #276]	@ (8005050 <TIM_Base_SetConfig+0x158>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d108      	bne.n	8004f52 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a39      	ldr	r2, [pc, #228]	@ (800503c <TIM_Base_SetConfig+0x144>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d023      	beq.n	8004fa2 <TIM_Base_SetConfig+0xaa>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f60:	d01f      	beq.n	8004fa2 <TIM_Base_SetConfig+0xaa>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a36      	ldr	r2, [pc, #216]	@ (8005040 <TIM_Base_SetConfig+0x148>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01b      	beq.n	8004fa2 <TIM_Base_SetConfig+0xaa>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a35      	ldr	r2, [pc, #212]	@ (8005044 <TIM_Base_SetConfig+0x14c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d017      	beq.n	8004fa2 <TIM_Base_SetConfig+0xaa>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a34      	ldr	r2, [pc, #208]	@ (8005048 <TIM_Base_SetConfig+0x150>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <TIM_Base_SetConfig+0xaa>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a33      	ldr	r2, [pc, #204]	@ (800504c <TIM_Base_SetConfig+0x154>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00f      	beq.n	8004fa2 <TIM_Base_SetConfig+0xaa>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a33      	ldr	r2, [pc, #204]	@ (8005054 <TIM_Base_SetConfig+0x15c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <TIM_Base_SetConfig+0xaa>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a32      	ldr	r2, [pc, #200]	@ (8005058 <TIM_Base_SetConfig+0x160>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <TIM_Base_SetConfig+0xaa>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a31      	ldr	r2, [pc, #196]	@ (800505c <TIM_Base_SetConfig+0x164>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_Base_SetConfig+0xaa>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2c      	ldr	r2, [pc, #176]	@ (8005050 <TIM_Base_SetConfig+0x158>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d108      	bne.n	8004fb4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a18      	ldr	r2, [pc, #96]	@ (800503c <TIM_Base_SetConfig+0x144>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d013      	beq.n	8005008 <TIM_Base_SetConfig+0x110>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800504c <TIM_Base_SetConfig+0x154>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00f      	beq.n	8005008 <TIM_Base_SetConfig+0x110>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a1a      	ldr	r2, [pc, #104]	@ (8005054 <TIM_Base_SetConfig+0x15c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00b      	beq.n	8005008 <TIM_Base_SetConfig+0x110>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a19      	ldr	r2, [pc, #100]	@ (8005058 <TIM_Base_SetConfig+0x160>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d007      	beq.n	8005008 <TIM_Base_SetConfig+0x110>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a18      	ldr	r2, [pc, #96]	@ (800505c <TIM_Base_SetConfig+0x164>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_Base_SetConfig+0x110>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a13      	ldr	r2, [pc, #76]	@ (8005050 <TIM_Base_SetConfig+0x158>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d103      	bne.n	8005010 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b01      	cmp	r3, #1
 8005020:	d105      	bne.n	800502e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f023 0201 	bic.w	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	611a      	str	r2, [r3, #16]
  }
}
 800502e:	bf00      	nop
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40000400 	.word	0x40000400
 8005044:	40000800 	.word	0x40000800
 8005048:	40000c00 	.word	0x40000c00
 800504c:	40013400 	.word	0x40013400
 8005050:	40015000 	.word	0x40015000
 8005054:	40014000 	.word	0x40014000
 8005058:	40014400 	.word	0x40014400
 800505c:	40014800 	.word	0x40014800

08005060 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800507c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005080:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005092:	f023 0307 	bic.w	r3, r3, #7
 8005096:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	4a52      	ldr	r2, [pc, #328]	@ (80051f8 <TIM_SlaveTimer_SetConfig+0x198>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	f000 809a 	beq.w	80051ea <TIM_SlaveTimer_SetConfig+0x18a>
 80050b6:	4a50      	ldr	r2, [pc, #320]	@ (80051f8 <TIM_SlaveTimer_SetConfig+0x198>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	f200 8093 	bhi.w	80051e4 <TIM_SlaveTimer_SetConfig+0x184>
 80050be:	4a4f      	ldr	r2, [pc, #316]	@ (80051fc <TIM_SlaveTimer_SetConfig+0x19c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	f000 8092 	beq.w	80051ea <TIM_SlaveTimer_SetConfig+0x18a>
 80050c6:	4a4d      	ldr	r2, [pc, #308]	@ (80051fc <TIM_SlaveTimer_SetConfig+0x19c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	f200 808b 	bhi.w	80051e4 <TIM_SlaveTimer_SetConfig+0x184>
 80050ce:	4a4c      	ldr	r2, [pc, #304]	@ (8005200 <TIM_SlaveTimer_SetConfig+0x1a0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	f000 808a 	beq.w	80051ea <TIM_SlaveTimer_SetConfig+0x18a>
 80050d6:	4a4a      	ldr	r2, [pc, #296]	@ (8005200 <TIM_SlaveTimer_SetConfig+0x1a0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	f200 8083 	bhi.w	80051e4 <TIM_SlaveTimer_SetConfig+0x184>
 80050de:	4a49      	ldr	r2, [pc, #292]	@ (8005204 <TIM_SlaveTimer_SetConfig+0x1a4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	f000 8082 	beq.w	80051ea <TIM_SlaveTimer_SetConfig+0x18a>
 80050e6:	4a47      	ldr	r2, [pc, #284]	@ (8005204 <TIM_SlaveTimer_SetConfig+0x1a4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d87b      	bhi.n	80051e4 <TIM_SlaveTimer_SetConfig+0x184>
 80050ec:	4a46      	ldr	r2, [pc, #280]	@ (8005208 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d07b      	beq.n	80051ea <TIM_SlaveTimer_SetConfig+0x18a>
 80050f2:	4a45      	ldr	r2, [pc, #276]	@ (8005208 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d875      	bhi.n	80051e4 <TIM_SlaveTimer_SetConfig+0x184>
 80050f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80050fc:	d075      	beq.n	80051ea <TIM_SlaveTimer_SetConfig+0x18a>
 80050fe:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005102:	d86f      	bhi.n	80051e4 <TIM_SlaveTimer_SetConfig+0x184>
 8005104:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005108:	d06f      	beq.n	80051ea <TIM_SlaveTimer_SetConfig+0x18a>
 800510a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800510e:	d869      	bhi.n	80051e4 <TIM_SlaveTimer_SetConfig+0x184>
 8005110:	2b70      	cmp	r3, #112	@ 0x70
 8005112:	d01a      	beq.n	800514a <TIM_SlaveTimer_SetConfig+0xea>
 8005114:	2b70      	cmp	r3, #112	@ 0x70
 8005116:	d865      	bhi.n	80051e4 <TIM_SlaveTimer_SetConfig+0x184>
 8005118:	2b60      	cmp	r3, #96	@ 0x60
 800511a:	d059      	beq.n	80051d0 <TIM_SlaveTimer_SetConfig+0x170>
 800511c:	2b60      	cmp	r3, #96	@ 0x60
 800511e:	d861      	bhi.n	80051e4 <TIM_SlaveTimer_SetConfig+0x184>
 8005120:	2b50      	cmp	r3, #80	@ 0x50
 8005122:	d04b      	beq.n	80051bc <TIM_SlaveTimer_SetConfig+0x15c>
 8005124:	2b50      	cmp	r3, #80	@ 0x50
 8005126:	d85d      	bhi.n	80051e4 <TIM_SlaveTimer_SetConfig+0x184>
 8005128:	2b40      	cmp	r3, #64	@ 0x40
 800512a:	d019      	beq.n	8005160 <TIM_SlaveTimer_SetConfig+0x100>
 800512c:	2b40      	cmp	r3, #64	@ 0x40
 800512e:	d859      	bhi.n	80051e4 <TIM_SlaveTimer_SetConfig+0x184>
 8005130:	2b30      	cmp	r3, #48	@ 0x30
 8005132:	d05a      	beq.n	80051ea <TIM_SlaveTimer_SetConfig+0x18a>
 8005134:	2b30      	cmp	r3, #48	@ 0x30
 8005136:	d855      	bhi.n	80051e4 <TIM_SlaveTimer_SetConfig+0x184>
 8005138:	2b20      	cmp	r3, #32
 800513a:	d056      	beq.n	80051ea <TIM_SlaveTimer_SetConfig+0x18a>
 800513c:	2b20      	cmp	r3, #32
 800513e:	d851      	bhi.n	80051e4 <TIM_SlaveTimer_SetConfig+0x184>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d052      	beq.n	80051ea <TIM_SlaveTimer_SetConfig+0x18a>
 8005144:	2b10      	cmp	r3, #16
 8005146:	d050      	beq.n	80051ea <TIM_SlaveTimer_SetConfig+0x18a>
 8005148:	e04c      	b.n	80051e4 <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800515a:	f000 f8d3 	bl	8005304 <TIM_ETR_SetConfig>
      break;
 800515e:	e045      	b.n	80051ec <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b05      	cmp	r3, #5
 8005166:	d004      	beq.n	8005172 <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800516c:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8005170:	d101      	bne.n	8005176 <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e03b      	b.n	80051ee <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6a1a      	ldr	r2, [r3, #32]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0201 	bic.w	r2, r2, #1
 800518c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800519c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	621a      	str	r2, [r3, #32]
      break;
 80051ba:	e017      	b.n	80051ec <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051c8:	461a      	mov	r2, r3
 80051ca:	f000 f81f 	bl	800520c <TIM_TI1_ConfigInputStage>
      break;
 80051ce:	e00d      	b.n	80051ec <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051dc:	461a      	mov	r2, r3
 80051de:	f000 f844 	bl	800526a <TIM_TI2_ConfigInputStage>
      break;
 80051e2:	e003      	b.n	80051ec <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	75fb      	strb	r3, [r7, #23]
      break;
 80051e8:	e000      	b.n	80051ec <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 80051ea:	bf00      	nop
  }

  return status;
 80051ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	00100070 	.word	0x00100070
 80051fc:	00100050 	.word	0x00100050
 8005200:	00100040 	.word	0x00100040
 8005204:	00100030 	.word	0x00100030
 8005208:	00100020 	.word	0x00100020

0800520c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0201 	bic.w	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f023 030a 	bic.w	r3, r3, #10
 8005248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800526a:	b480      	push	{r7}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f023 0210 	bic.w	r2, r3, #16
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	031b      	lsls	r3, r3, #12
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80052e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f043 0307 	orr.w	r3, r3, #7
 80052f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	609a      	str	r2, [r3, #8]
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800531e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	021a      	lsls	r2, r3, #8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	431a      	orrs	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4313      	orrs	r3, r2
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	609a      	str	r2, [r3, #8]
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e074      	b.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a34      	ldr	r2, [pc, #208]	@ (8005454 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d009      	beq.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a33      	ldr	r2, [pc, #204]	@ (8005458 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d004      	beq.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a31      	ldr	r2, [pc, #196]	@ (800545c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d108      	bne.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80053a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80053b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a21      	ldr	r2, [pc, #132]	@ (8005454 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d022      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053dc:	d01d      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005460 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d018      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005464 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005468 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00e      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a15      	ldr	r2, [pc, #84]	@ (8005458 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a18      	ldr	r2, [pc, #96]	@ (800546c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a11      	ldr	r2, [pc, #68]	@ (800545c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d10c      	bne.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	4313      	orrs	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40013400 	.word	0x40013400
 800545c:	40015000 	.word	0x40015000
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40014000 	.word	0x40014000

08005470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e042      	b.n	8005508 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005488:	2b00      	cmp	r3, #0
 800548a:	d106      	bne.n	800549a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fd fa75 	bl	8002984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2224      	movs	r2, #36	@ 0x24
 800549e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0201 	bic.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fc1a 	bl	8005cf4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f91b 	bl	80056fc <UART_SetConfig>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e01b      	b.n	8005508 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fc99 	bl	8005e38 <UART_CheckIdleState>
 8005506:	4603      	mov	r3, r0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005510:	b480      	push	{r7}
 8005512:	b091      	sub	sp, #68	@ 0x44
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	4613      	mov	r3, r2
 800551c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005524:	2b20      	cmp	r3, #32
 8005526:	d178      	bne.n	800561a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <HAL_UART_Transmit_IT+0x24>
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e071      	b.n	800561c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	88fa      	ldrh	r2, [r7, #6]
 8005542:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	88fa      	ldrh	r2, [r7, #6]
 800554a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2221      	movs	r2, #33	@ 0x21
 8005560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800556c:	d12a      	bne.n	80055c4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005576:	d107      	bne.n	8005588 <HAL_UART_Transmit_IT+0x78>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d103      	bne.n	8005588 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a29      	ldr	r2, [pc, #164]	@ (8005628 <HAL_UART_Transmit_IT+0x118>)
 8005584:	679a      	str	r2, [r3, #120]	@ 0x78
 8005586:	e002      	b.n	800558e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4a28      	ldr	r2, [pc, #160]	@ (800562c <HAL_UART_Transmit_IT+0x11c>)
 800558c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3308      	adds	r3, #8
 8005594:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80055a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3308      	adds	r3, #8
 80055ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055ae:	637a      	str	r2, [r7, #52]	@ 0x34
 80055b0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80055bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e5      	bne.n	800558e <HAL_UART_Transmit_IT+0x7e>
 80055c2:	e028      	b.n	8005616 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055cc:	d107      	bne.n	80055de <HAL_UART_Transmit_IT+0xce>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4a15      	ldr	r2, [pc, #84]	@ (8005630 <HAL_UART_Transmit_IT+0x120>)
 80055da:	679a      	str	r2, [r3, #120]	@ 0x78
 80055dc:	e002      	b.n	80055e4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4a14      	ldr	r2, [pc, #80]	@ (8005634 <HAL_UART_Transmit_IT+0x124>)
 80055e2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	613b      	str	r3, [r7, #16]
   return(result);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005602:	623b      	str	r3, [r7, #32]
 8005604:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	69f9      	ldr	r1, [r7, #28]
 8005608:	6a3a      	ldr	r2, [r7, #32]
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e6      	bne.n	80055e4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	e000      	b.n	800561c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800561a:	2302      	movs	r3, #2
  }
}
 800561c:	4618      	mov	r0, r3
 800561e:	3744      	adds	r7, #68	@ 0x44
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	080065d3 	.word	0x080065d3
 800562c:	080064f3 	.word	0x080064f3
 8005630:	08006431 	.word	0x08006431
 8005634:	08006379 	.word	0x08006379

08005638 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08a      	sub	sp, #40	@ 0x28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800564c:	2b20      	cmp	r3, #32
 800564e:	d137      	bne.n	80056c0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_UART_Receive_IT+0x24>
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e030      	b.n	80056c2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a18      	ldr	r2, [pc, #96]	@ (80056cc <HAL_UART_Receive_IT+0x94>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d01f      	beq.n	80056b0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d018      	beq.n	80056b0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	613b      	str	r3, [r7, #16]
   return(result);
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005692:	627b      	str	r3, [r7, #36]	@ 0x24
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	461a      	mov	r2, r3
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	623b      	str	r3, [r7, #32]
 800569e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a0:	69f9      	ldr	r1, [r7, #28]
 80056a2:	6a3a      	ldr	r2, [r7, #32]
 80056a4:	e841 2300 	strex	r3, r2, [r1]
 80056a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e6      	bne.n	800567e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056b0:	88fb      	ldrh	r3, [r7, #6]
 80056b2:	461a      	mov	r2, r3
 80056b4:	68b9      	ldr	r1, [r7, #8]
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fcd6 	bl	8006068 <UART_Start_Receive_IT>
 80056bc:	4603      	mov	r3, r0
 80056be:	e000      	b.n	80056c2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056c0:	2302      	movs	r3, #2
  }
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3728      	adds	r7, #40	@ 0x28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40008000 	.word	0x40008000

080056d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005700:	b08c      	sub	sp, #48	@ 0x30
 8005702:	af00      	add	r7, sp, #0
 8005704:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	431a      	orrs	r2, r3
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	431a      	orrs	r2, r3
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	4313      	orrs	r3, r2
 8005722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4baa      	ldr	r3, [pc, #680]	@ (80059d4 <UART_SetConfig+0x2d8>)
 800572c:	4013      	ands	r3, r2
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	6812      	ldr	r2, [r2, #0]
 8005732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005734:	430b      	orrs	r3, r1
 8005736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a9f      	ldr	r2, [pc, #636]	@ (80059d8 <UART_SetConfig+0x2dc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005764:	4313      	orrs	r3, r2
 8005766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005772:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800577c:	430b      	orrs	r3, r1
 800577e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005786:	f023 010f 	bic.w	r1, r3, #15
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a90      	ldr	r2, [pc, #576]	@ (80059dc <UART_SetConfig+0x2e0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d125      	bne.n	80057ec <UART_SetConfig+0xf0>
 80057a0:	4b8f      	ldr	r3, [pc, #572]	@ (80059e0 <UART_SetConfig+0x2e4>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d81a      	bhi.n	80057e4 <UART_SetConfig+0xe8>
 80057ae:	a201      	add	r2, pc, #4	@ (adr r2, 80057b4 <UART_SetConfig+0xb8>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	080057c5 	.word	0x080057c5
 80057b8:	080057d5 	.word	0x080057d5
 80057bc:	080057cd 	.word	0x080057cd
 80057c0:	080057dd 	.word	0x080057dd
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ca:	e116      	b.n	80059fa <UART_SetConfig+0x2fe>
 80057cc:	2302      	movs	r3, #2
 80057ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057d2:	e112      	b.n	80059fa <UART_SetConfig+0x2fe>
 80057d4:	2304      	movs	r3, #4
 80057d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057da:	e10e      	b.n	80059fa <UART_SetConfig+0x2fe>
 80057dc:	2308      	movs	r3, #8
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057e2:	e10a      	b.n	80059fa <UART_SetConfig+0x2fe>
 80057e4:	2310      	movs	r3, #16
 80057e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ea:	e106      	b.n	80059fa <UART_SetConfig+0x2fe>
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a7c      	ldr	r2, [pc, #496]	@ (80059e4 <UART_SetConfig+0x2e8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d138      	bne.n	8005868 <UART_SetConfig+0x16c>
 80057f6:	4b7a      	ldr	r3, [pc, #488]	@ (80059e0 <UART_SetConfig+0x2e4>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fc:	f003 030c 	and.w	r3, r3, #12
 8005800:	2b0c      	cmp	r3, #12
 8005802:	d82d      	bhi.n	8005860 <UART_SetConfig+0x164>
 8005804:	a201      	add	r2, pc, #4	@ (adr r2, 800580c <UART_SetConfig+0x110>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	08005841 	.word	0x08005841
 8005810:	08005861 	.word	0x08005861
 8005814:	08005861 	.word	0x08005861
 8005818:	08005861 	.word	0x08005861
 800581c:	08005851 	.word	0x08005851
 8005820:	08005861 	.word	0x08005861
 8005824:	08005861 	.word	0x08005861
 8005828:	08005861 	.word	0x08005861
 800582c:	08005849 	.word	0x08005849
 8005830:	08005861 	.word	0x08005861
 8005834:	08005861 	.word	0x08005861
 8005838:	08005861 	.word	0x08005861
 800583c:	08005859 	.word	0x08005859
 8005840:	2300      	movs	r3, #0
 8005842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005846:	e0d8      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005848:	2302      	movs	r3, #2
 800584a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800584e:	e0d4      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005850:	2304      	movs	r3, #4
 8005852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005856:	e0d0      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005858:	2308      	movs	r3, #8
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800585e:	e0cc      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005860:	2310      	movs	r3, #16
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005866:	e0c8      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a5e      	ldr	r2, [pc, #376]	@ (80059e8 <UART_SetConfig+0x2ec>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d125      	bne.n	80058be <UART_SetConfig+0x1c2>
 8005872:	4b5b      	ldr	r3, [pc, #364]	@ (80059e0 <UART_SetConfig+0x2e4>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005878:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800587c:	2b30      	cmp	r3, #48	@ 0x30
 800587e:	d016      	beq.n	80058ae <UART_SetConfig+0x1b2>
 8005880:	2b30      	cmp	r3, #48	@ 0x30
 8005882:	d818      	bhi.n	80058b6 <UART_SetConfig+0x1ba>
 8005884:	2b20      	cmp	r3, #32
 8005886:	d00a      	beq.n	800589e <UART_SetConfig+0x1a2>
 8005888:	2b20      	cmp	r3, #32
 800588a:	d814      	bhi.n	80058b6 <UART_SetConfig+0x1ba>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <UART_SetConfig+0x19a>
 8005890:	2b10      	cmp	r3, #16
 8005892:	d008      	beq.n	80058a6 <UART_SetConfig+0x1aa>
 8005894:	e00f      	b.n	80058b6 <UART_SetConfig+0x1ba>
 8005896:	2300      	movs	r3, #0
 8005898:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800589c:	e0ad      	b.n	80059fa <UART_SetConfig+0x2fe>
 800589e:	2302      	movs	r3, #2
 80058a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058a4:	e0a9      	b.n	80059fa <UART_SetConfig+0x2fe>
 80058a6:	2304      	movs	r3, #4
 80058a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ac:	e0a5      	b.n	80059fa <UART_SetConfig+0x2fe>
 80058ae:	2308      	movs	r3, #8
 80058b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058b4:	e0a1      	b.n	80059fa <UART_SetConfig+0x2fe>
 80058b6:	2310      	movs	r3, #16
 80058b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058bc:	e09d      	b.n	80059fa <UART_SetConfig+0x2fe>
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a4a      	ldr	r2, [pc, #296]	@ (80059ec <UART_SetConfig+0x2f0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d125      	bne.n	8005914 <UART_SetConfig+0x218>
 80058c8:	4b45      	ldr	r3, [pc, #276]	@ (80059e0 <UART_SetConfig+0x2e4>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80058d4:	d016      	beq.n	8005904 <UART_SetConfig+0x208>
 80058d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80058d8:	d818      	bhi.n	800590c <UART_SetConfig+0x210>
 80058da:	2b80      	cmp	r3, #128	@ 0x80
 80058dc:	d00a      	beq.n	80058f4 <UART_SetConfig+0x1f8>
 80058de:	2b80      	cmp	r3, #128	@ 0x80
 80058e0:	d814      	bhi.n	800590c <UART_SetConfig+0x210>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <UART_SetConfig+0x1f0>
 80058e6:	2b40      	cmp	r3, #64	@ 0x40
 80058e8:	d008      	beq.n	80058fc <UART_SetConfig+0x200>
 80058ea:	e00f      	b.n	800590c <UART_SetConfig+0x210>
 80058ec:	2300      	movs	r3, #0
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058f2:	e082      	b.n	80059fa <UART_SetConfig+0x2fe>
 80058f4:	2302      	movs	r3, #2
 80058f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058fa:	e07e      	b.n	80059fa <UART_SetConfig+0x2fe>
 80058fc:	2304      	movs	r3, #4
 80058fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005902:	e07a      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005904:	2308      	movs	r3, #8
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800590a:	e076      	b.n	80059fa <UART_SetConfig+0x2fe>
 800590c:	2310      	movs	r3, #16
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005912:	e072      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a35      	ldr	r2, [pc, #212]	@ (80059f0 <UART_SetConfig+0x2f4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d12a      	bne.n	8005974 <UART_SetConfig+0x278>
 800591e:	4b30      	ldr	r3, [pc, #192]	@ (80059e0 <UART_SetConfig+0x2e4>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005924:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005928:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800592c:	d01a      	beq.n	8005964 <UART_SetConfig+0x268>
 800592e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005932:	d81b      	bhi.n	800596c <UART_SetConfig+0x270>
 8005934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005938:	d00c      	beq.n	8005954 <UART_SetConfig+0x258>
 800593a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800593e:	d815      	bhi.n	800596c <UART_SetConfig+0x270>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <UART_SetConfig+0x250>
 8005944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005948:	d008      	beq.n	800595c <UART_SetConfig+0x260>
 800594a:	e00f      	b.n	800596c <UART_SetConfig+0x270>
 800594c:	2300      	movs	r3, #0
 800594e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005952:	e052      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005954:	2302      	movs	r3, #2
 8005956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800595a:	e04e      	b.n	80059fa <UART_SetConfig+0x2fe>
 800595c:	2304      	movs	r3, #4
 800595e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005962:	e04a      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005964:	2308      	movs	r3, #8
 8005966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800596a:	e046      	b.n	80059fa <UART_SetConfig+0x2fe>
 800596c:	2310      	movs	r3, #16
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005972:	e042      	b.n	80059fa <UART_SetConfig+0x2fe>
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a17      	ldr	r2, [pc, #92]	@ (80059d8 <UART_SetConfig+0x2dc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d13a      	bne.n	80059f4 <UART_SetConfig+0x2f8>
 800597e:	4b18      	ldr	r3, [pc, #96]	@ (80059e0 <UART_SetConfig+0x2e4>)
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005984:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005988:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800598c:	d01a      	beq.n	80059c4 <UART_SetConfig+0x2c8>
 800598e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005992:	d81b      	bhi.n	80059cc <UART_SetConfig+0x2d0>
 8005994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005998:	d00c      	beq.n	80059b4 <UART_SetConfig+0x2b8>
 800599a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800599e:	d815      	bhi.n	80059cc <UART_SetConfig+0x2d0>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <UART_SetConfig+0x2b0>
 80059a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059a8:	d008      	beq.n	80059bc <UART_SetConfig+0x2c0>
 80059aa:	e00f      	b.n	80059cc <UART_SetConfig+0x2d0>
 80059ac:	2300      	movs	r3, #0
 80059ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059b2:	e022      	b.n	80059fa <UART_SetConfig+0x2fe>
 80059b4:	2302      	movs	r3, #2
 80059b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ba:	e01e      	b.n	80059fa <UART_SetConfig+0x2fe>
 80059bc:	2304      	movs	r3, #4
 80059be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059c2:	e01a      	b.n	80059fa <UART_SetConfig+0x2fe>
 80059c4:	2308      	movs	r3, #8
 80059c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ca:	e016      	b.n	80059fa <UART_SetConfig+0x2fe>
 80059cc:	2310      	movs	r3, #16
 80059ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059d2:	e012      	b.n	80059fa <UART_SetConfig+0x2fe>
 80059d4:	cfff69f3 	.word	0xcfff69f3
 80059d8:	40008000 	.word	0x40008000
 80059dc:	40013800 	.word	0x40013800
 80059e0:	40021000 	.word	0x40021000
 80059e4:	40004400 	.word	0x40004400
 80059e8:	40004800 	.word	0x40004800
 80059ec:	40004c00 	.word	0x40004c00
 80059f0:	40005000 	.word	0x40005000
 80059f4:	2310      	movs	r3, #16
 80059f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4aae      	ldr	r2, [pc, #696]	@ (8005cb8 <UART_SetConfig+0x5bc>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	f040 8097 	bne.w	8005b34 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d823      	bhi.n	8005a56 <UART_SetConfig+0x35a>
 8005a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <UART_SetConfig+0x318>)
 8005a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a14:	08005a39 	.word	0x08005a39
 8005a18:	08005a57 	.word	0x08005a57
 8005a1c:	08005a41 	.word	0x08005a41
 8005a20:	08005a57 	.word	0x08005a57
 8005a24:	08005a47 	.word	0x08005a47
 8005a28:	08005a57 	.word	0x08005a57
 8005a2c:	08005a57 	.word	0x08005a57
 8005a30:	08005a57 	.word	0x08005a57
 8005a34:	08005a4f 	.word	0x08005a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a38:	f7fe fd4e 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8005a3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a3e:	e010      	b.n	8005a62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a40:	4b9e      	ldr	r3, [pc, #632]	@ (8005cbc <UART_SetConfig+0x5c0>)
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a44:	e00d      	b.n	8005a62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a46:	f7fe fcd9 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8005a4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a4c:	e009      	b.n	8005a62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a54:	e005      	b.n	8005a62 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8130 	beq.w	8005cca <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6e:	4a94      	ldr	r2, [pc, #592]	@ (8005cc0 <UART_SetConfig+0x5c4>)
 8005a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a74:	461a      	mov	r2, r3
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4413      	add	r3, r2
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d305      	bcc.n	8005a9a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d903      	bls.n	8005aa2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005aa0:	e113      	b.n	8005cca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	60bb      	str	r3, [r7, #8]
 8005aa8:	60fa      	str	r2, [r7, #12]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aae:	4a84      	ldr	r2, [pc, #528]	@ (8005cc0 <UART_SetConfig+0x5c4>)
 8005ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ac4:	f7fa fc14 	bl	80002f0 <__aeabi_uldivmod>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4610      	mov	r0, r2
 8005ace:	4619      	mov	r1, r3
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	020b      	lsls	r3, r1, #8
 8005ada:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ade:	0202      	lsls	r2, r0, #8
 8005ae0:	6979      	ldr	r1, [r7, #20]
 8005ae2:	6849      	ldr	r1, [r1, #4]
 8005ae4:	0849      	lsrs	r1, r1, #1
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	460c      	mov	r4, r1
 8005aea:	4605      	mov	r5, r0
 8005aec:	eb12 0804 	adds.w	r8, r2, r4
 8005af0:	eb43 0905 	adc.w	r9, r3, r5
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	469a      	mov	sl, r3
 8005afc:	4693      	mov	fp, r2
 8005afe:	4652      	mov	r2, sl
 8005b00:	465b      	mov	r3, fp
 8005b02:	4640      	mov	r0, r8
 8005b04:	4649      	mov	r1, r9
 8005b06:	f7fa fbf3 	bl	80002f0 <__aeabi_uldivmod>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4613      	mov	r3, r2
 8005b10:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b18:	d308      	bcc.n	8005b2c <UART_SetConfig+0x430>
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b20:	d204      	bcs.n	8005b2c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6a3a      	ldr	r2, [r7, #32]
 8005b28:	60da      	str	r2, [r3, #12]
 8005b2a:	e0ce      	b.n	8005cca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b32:	e0ca      	b.n	8005cca <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b3c:	d166      	bne.n	8005c0c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d827      	bhi.n	8005b96 <UART_SetConfig+0x49a>
 8005b46:	a201      	add	r2, pc, #4	@ (adr r2, 8005b4c <UART_SetConfig+0x450>)
 8005b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b79 	.word	0x08005b79
 8005b54:	08005b81 	.word	0x08005b81
 8005b58:	08005b97 	.word	0x08005b97
 8005b5c:	08005b87 	.word	0x08005b87
 8005b60:	08005b97 	.word	0x08005b97
 8005b64:	08005b97 	.word	0x08005b97
 8005b68:	08005b97 	.word	0x08005b97
 8005b6c:	08005b8f 	.word	0x08005b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b70:	f7fe fcb2 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8005b74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b76:	e014      	b.n	8005ba2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b78:	f7fe fcc4 	bl	8004504 <HAL_RCC_GetPCLK2Freq>
 8005b7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b7e:	e010      	b.n	8005ba2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b80:	4b4e      	ldr	r3, [pc, #312]	@ (8005cbc <UART_SetConfig+0x5c0>)
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b84:	e00d      	b.n	8005ba2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b86:	f7fe fc39 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8005b8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b8c:	e009      	b.n	8005ba2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b94:	e005      	b.n	8005ba2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8090 	beq.w	8005cca <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bae:	4a44      	ldr	r2, [pc, #272]	@ (8005cc0 <UART_SetConfig+0x5c4>)
 8005bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bbc:	005a      	lsls	r2, r3, #1
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	085b      	lsrs	r3, r3, #1
 8005bc4:	441a      	add	r2, r3
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	2b0f      	cmp	r3, #15
 8005bd4:	d916      	bls.n	8005c04 <UART_SetConfig+0x508>
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bdc:	d212      	bcs.n	8005c04 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	f023 030f 	bic.w	r3, r3, #15
 8005be6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	8bfb      	ldrh	r3, [r7, #30]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	8bfa      	ldrh	r2, [r7, #30]
 8005c00:	60da      	str	r2, [r3, #12]
 8005c02:	e062      	b.n	8005cca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c0a:	e05e      	b.n	8005cca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d828      	bhi.n	8005c66 <UART_SetConfig+0x56a>
 8005c14:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <UART_SetConfig+0x520>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c49 	.word	0x08005c49
 8005c24:	08005c51 	.word	0x08005c51
 8005c28:	08005c67 	.word	0x08005c67
 8005c2c:	08005c57 	.word	0x08005c57
 8005c30:	08005c67 	.word	0x08005c67
 8005c34:	08005c67 	.word	0x08005c67
 8005c38:	08005c67 	.word	0x08005c67
 8005c3c:	08005c5f 	.word	0x08005c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c40:	f7fe fc4a 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8005c44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c46:	e014      	b.n	8005c72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c48:	f7fe fc5c 	bl	8004504 <HAL_RCC_GetPCLK2Freq>
 8005c4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c4e:	e010      	b.n	8005c72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c50:	4b1a      	ldr	r3, [pc, #104]	@ (8005cbc <UART_SetConfig+0x5c0>)
 8005c52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c54:	e00d      	b.n	8005c72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c56:	f7fe fbd1 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8005c5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c5c:	e009      	b.n	8005c72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c64:	e005      	b.n	8005c72 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c70:	bf00      	nop
    }

    if (pclk != 0U)
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d028      	beq.n	8005cca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	4a10      	ldr	r2, [pc, #64]	@ (8005cc0 <UART_SetConfig+0x5c4>)
 8005c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c82:	461a      	mov	r2, r3
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	441a      	add	r2, r3
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	2b0f      	cmp	r3, #15
 8005ca0:	d910      	bls.n	8005cc4 <UART_SetConfig+0x5c8>
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca8:	d20c      	bcs.n	8005cc4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60da      	str	r2, [r3, #12]
 8005cb4:	e009      	b.n	8005cca <UART_SetConfig+0x5ce>
 8005cb6:	bf00      	nop
 8005cb8:	40008000 	.word	0x40008000
 8005cbc:	00f42400 	.word	0x00f42400
 8005cc0:	08007e9c 	.word	0x08007e9c
      }
      else
      {
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005ce6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3730      	adds	r7, #48	@ 0x30
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005cf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01a      	beq.n	8005e0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df2:	d10a      	bne.n	8005e0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	605a      	str	r2, [r3, #4]
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b098      	sub	sp, #96	@ 0x60
 8005e3c:	af02      	add	r7, sp, #8
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e48:	f7fd fa9a 	bl	8003380 <HAL_GetTick>
 8005e4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0308 	and.w	r3, r3, #8
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d12f      	bne.n	8005ebc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e64:	2200      	movs	r2, #0
 8005e66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f88e 	bl	8005f8c <UART_WaitOnFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d022      	beq.n	8005ebc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	461a      	mov	r2, r3
 8005e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e6      	bne.n	8005e76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e063      	b.n	8005f84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d149      	bne.n	8005f5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f857 	bl	8005f8c <UART_WaitOnFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d03c      	beq.n	8005f5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e6      	bne.n	8005ee4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	e853 3f00 	ldrex	r3, [r3]
 8005f24:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f023 0301 	bic.w	r3, r3, #1
 8005f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3308      	adds	r3, #8
 8005f34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f36:	61fa      	str	r2, [r7, #28]
 8005f38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	69b9      	ldr	r1, [r7, #24]
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	617b      	str	r3, [r7, #20]
   return(result);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e5      	bne.n	8005f16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e012      	b.n	8005f84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3758      	adds	r7, #88	@ 0x58
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f9c:	e04f      	b.n	800603e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d04b      	beq.n	800603e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa6:	f7fd f9eb 	bl	8003380 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d302      	bcc.n	8005fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e04e      	b.n	800605e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d037      	beq.n	800603e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b80      	cmp	r3, #128	@ 0x80
 8005fd2:	d034      	beq.n	800603e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2b40      	cmp	r3, #64	@ 0x40
 8005fd8:	d031      	beq.n	800603e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d110      	bne.n	800600a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2208      	movs	r2, #8
 8005fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f95b 	bl	80062ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2208      	movs	r2, #8
 8005ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e029      	b.n	800605e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006018:	d111      	bne.n	800603e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f941 	bl	80062ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2220      	movs	r2, #32
 800602e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e00f      	b.n	800605e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69da      	ldr	r2, [r3, #28]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4013      	ands	r3, r2
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	429a      	cmp	r2, r3
 800604c:	bf0c      	ite	eq
 800604e:	2301      	moveq	r3, #1
 8006050:	2300      	movne	r3, #0
 8006052:	b2db      	uxtb	r3, r3
 8006054:	461a      	mov	r2, r3
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	429a      	cmp	r2, r3
 800605a:	d0a0      	beq.n	8005f9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006068:	b480      	push	{r7}
 800606a:	b0a3      	sub	sp, #140	@ 0x8c
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	4613      	mov	r3, r2
 8006074:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	88fa      	ldrh	r2, [r7, #6]
 8006080:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	88fa      	ldrh	r2, [r7, #6]
 8006088:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800609a:	d10e      	bne.n	80060ba <UART_Start_Receive_IT+0x52>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d105      	bne.n	80060b0 <UART_Start_Receive_IT+0x48>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80060aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80060ae:	e02d      	b.n	800610c <UART_Start_Receive_IT+0xa4>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	22ff      	movs	r2, #255	@ 0xff
 80060b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80060b8:	e028      	b.n	800610c <UART_Start_Receive_IT+0xa4>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10d      	bne.n	80060de <UART_Start_Receive_IT+0x76>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <UART_Start_Receive_IT+0x6c>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	22ff      	movs	r2, #255	@ 0xff
 80060ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80060d2:	e01b      	b.n	800610c <UART_Start_Receive_IT+0xa4>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	227f      	movs	r2, #127	@ 0x7f
 80060d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80060dc:	e016      	b.n	800610c <UART_Start_Receive_IT+0xa4>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060e6:	d10d      	bne.n	8006104 <UART_Start_Receive_IT+0x9c>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d104      	bne.n	80060fa <UART_Start_Receive_IT+0x92>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	227f      	movs	r2, #127	@ 0x7f
 80060f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80060f8:	e008      	b.n	800610c <UART_Start_Receive_IT+0xa4>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	223f      	movs	r2, #63	@ 0x3f
 80060fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006102:	e003      	b.n	800610c <UART_Start_Receive_IT+0xa4>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2222      	movs	r2, #34	@ 0x22
 8006118:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3308      	adds	r3, #8
 8006122:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800612c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3308      	adds	r3, #8
 800613c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006140:	673a      	str	r2, [r7, #112]	@ 0x70
 8006142:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006146:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800614e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e3      	bne.n	800611c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800615c:	d14f      	bne.n	80061fe <UART_Start_Receive_IT+0x196>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006164:	88fa      	ldrh	r2, [r7, #6]
 8006166:	429a      	cmp	r2, r3
 8006168:	d349      	bcc.n	80061fe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006172:	d107      	bne.n	8006184 <UART_Start_Receive_IT+0x11c>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d103      	bne.n	8006184 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4a47      	ldr	r2, [pc, #284]	@ (800629c <UART_Start_Receive_IT+0x234>)
 8006180:	675a      	str	r2, [r3, #116]	@ 0x74
 8006182:	e002      	b.n	800618a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4a46      	ldr	r2, [pc, #280]	@ (80062a0 <UART_Start_Receive_IT+0x238>)
 8006188:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d01a      	beq.n	80061c8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80061a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80061b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061b6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80061ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80061c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e4      	bne.n	8006192 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3308      	adds	r3, #8
 80061ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061d2:	e853 3f00 	ldrex	r3, [r3]
 80061d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3308      	adds	r3, #8
 80061e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80061e8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80061ea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80061ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061f0:	e841 2300 	strex	r3, r2, [r1]
 80061f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80061f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e5      	bne.n	80061c8 <UART_Start_Receive_IT+0x160>
 80061fc:	e046      	b.n	800628c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006206:	d107      	bne.n	8006218 <UART_Start_Receive_IT+0x1b0>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d103      	bne.n	8006218 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4a24      	ldr	r2, [pc, #144]	@ (80062a4 <UART_Start_Receive_IT+0x23c>)
 8006214:	675a      	str	r2, [r3, #116]	@ 0x74
 8006216:	e002      	b.n	800621e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4a23      	ldr	r2, [pc, #140]	@ (80062a8 <UART_Start_Receive_IT+0x240>)
 800621c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d019      	beq.n	800625a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006236:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800623a:	677b      	str	r3, [r7, #116]	@ 0x74
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006244:	637b      	str	r3, [r7, #52]	@ 0x34
 8006246:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006248:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800624a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800624c:	e841 2300 	strex	r3, r2, [r1]
 8006250:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1e6      	bne.n	8006226 <UART_Start_Receive_IT+0x1be>
 8006258:	e018      	b.n	800628c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	e853 3f00 	ldrex	r3, [r3]
 8006266:	613b      	str	r3, [r7, #16]
   return(result);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f043 0320 	orr.w	r3, r3, #32
 800626e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	461a      	mov	r2, r3
 8006276:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006278:	623b      	str	r3, [r7, #32]
 800627a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	69f9      	ldr	r1, [r7, #28]
 800627e:	6a3a      	ldr	r2, [r7, #32]
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	61bb      	str	r3, [r7, #24]
   return(result);
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e6      	bne.n	800625a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	378c      	adds	r7, #140	@ 0x8c
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	08006d91 	.word	0x08006d91
 80062a0:	08006a2d 	.word	0x08006a2d
 80062a4:	08006875 	.word	0x08006875
 80062a8:	080066bd 	.word	0x080066bd

080062ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b095      	sub	sp, #84	@ 0x54
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80062d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e6      	bne.n	80062b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062fc:	f023 0301 	bic.w	r3, r3, #1
 8006300:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3308      	adds	r3, #8
 8006308:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800630a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800630c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e3      	bne.n	80062e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006322:	2b01      	cmp	r3, #1
 8006324:	d118      	bne.n	8006358 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	e853 3f00 	ldrex	r3, [r3]
 8006332:	60bb      	str	r3, [r7, #8]
   return(result);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f023 0310 	bic.w	r3, r3, #16
 800633a:	647b      	str	r3, [r7, #68]	@ 0x44
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	461a      	mov	r2, r3
 8006342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006344:	61bb      	str	r3, [r7, #24]
 8006346:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6979      	ldr	r1, [r7, #20]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	613b      	str	r3, [r7, #16]
   return(result);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e6      	bne.n	8006326 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800636c:	bf00      	nop
 800636e:	3754      	adds	r7, #84	@ 0x54
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b08f      	sub	sp, #60	@ 0x3c
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006386:	2b21      	cmp	r3, #33	@ 0x21
 8006388:	d14c      	bne.n	8006424 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d132      	bne.n	80063fc <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	e853 3f00 	ldrex	r3, [r3]
 80063a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063bc:	e841 2300 	strex	r3, r2, [r1]
 80063c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e6      	bne.n	8006396 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	6979      	ldr	r1, [r7, #20]
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	613b      	str	r3, [r7, #16]
   return(result);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e6      	bne.n	80063c8 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80063fa:	e013      	b.n	8006424 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006400:	781a      	ldrb	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8006424:	bf00      	nop
 8006426:	373c      	adds	r7, #60	@ 0x3c
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b091      	sub	sp, #68	@ 0x44
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643e:	2b21      	cmp	r3, #33	@ 0x21
 8006440:	d151      	bne.n	80064e6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d132      	bne.n	80064b4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	623b      	str	r3, [r7, #32]
   return(result);
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006462:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	461a      	mov	r2, r3
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	633b      	str	r3, [r7, #48]	@ 0x30
 800646e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006474:	e841 2300 	strex	r3, r2, [r1]
 8006478:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800647a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e6      	bne.n	800644e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	60fb      	str	r3, [r7, #12]
   return(result);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006494:	637b      	str	r3, [r7, #52]	@ 0x34
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a2:	69b9      	ldr	r1, [r7, #24]
 80064a4:	69fa      	ldr	r2, [r7, #28]
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	617b      	str	r3, [r7, #20]
   return(result);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e6      	bne.n	8006480 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80064b2:	e018      	b.n	80064e6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80064ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064c8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ce:	1c9a      	adds	r2, r3, #2
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80064e6:	bf00      	nop
 80064e8:	3744      	adds	r7, #68	@ 0x44
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b091      	sub	sp, #68	@ 0x44
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006500:	2b21      	cmp	r3, #33	@ 0x21
 8006502:	d160      	bne.n	80065c6 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800650a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800650c:	e057      	b.n	80065be <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d133      	bne.n	8006582 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3308      	adds	r3, #8
 8006520:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	623b      	str	r3, [r7, #32]
   return(result);
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006530:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3308      	adds	r3, #8
 8006538:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800653a:	633a      	str	r2, [r7, #48]	@ 0x30
 800653c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e5      	bne.n	800651a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	60fb      	str	r3, [r7, #12]
   return(result);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006562:	637b      	str	r3, [r7, #52]	@ 0x34
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800656c:	61fb      	str	r3, [r7, #28]
 800656e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	69b9      	ldr	r1, [r7, #24]
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	617b      	str	r3, [r7, #20]
   return(result);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e6      	bne.n	800654e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8006580:	e021      	b.n	80065c6 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800658c:	2b00      	cmp	r3, #0
 800658e:	d013      	beq.n	80065b8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80065b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80065ba:	3b01      	subs	r3, #1
 80065bc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80065be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1a4      	bne.n	800650e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80065c4:	e7ff      	b.n	80065c6 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80065c6:	bf00      	nop
 80065c8:	3744      	adds	r7, #68	@ 0x44
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b091      	sub	sp, #68	@ 0x44
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e0:	2b21      	cmp	r3, #33	@ 0x21
 80065e2:	d165      	bne.n	80066b0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80065ec:	e05c      	b.n	80066a8 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d133      	bne.n	8006662 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3308      	adds	r3, #8
 8006600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	61fb      	str	r3, [r7, #28]
   return(result);
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006610:	637b      	str	r3, [r7, #52]	@ 0x34
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3308      	adds	r3, #8
 8006618:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800661a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800661c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e5      	bne.n	80065fa <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	60bb      	str	r3, [r7, #8]
   return(result);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006642:	633b      	str	r3, [r7, #48]	@ 0x30
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6979      	ldr	r1, [r7, #20]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	613b      	str	r3, [r7, #16]
   return(result);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e6      	bne.n	800662e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8006660:	e026      	b.n	80066b0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800666c:	2b00      	cmp	r3, #0
 800666e:	d018      	beq.n	80066a2 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006674:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006684:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800668a:	1c9a      	adds	r2, r3, #2
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006696:	b29b      	uxth	r3, r3
 8006698:	3b01      	subs	r3, #1
 800669a:	b29a      	uxth	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80066a2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80066a4:	3b01      	subs	r3, #1
 80066a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80066a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d19f      	bne.n	80065ee <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80066ae:	e7ff      	b.n	80066b0 <UART_TxISR_16BIT_FIFOEN+0xde>
 80066b0:	bf00      	nop
 80066b2:	3744      	adds	r7, #68	@ 0x44
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b09c      	sub	sp, #112	@ 0x70
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80066ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066d4:	2b22      	cmp	r3, #34	@ 0x22
 80066d6:	f040 80be 	bne.w	8006856 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066e8:	b2d9      	uxtb	r1, r3
 80066ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f4:	400a      	ands	r2, r1
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800670a:	b29b      	uxth	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800671c:	b29b      	uxth	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	f040 80a1 	bne.w	8006866 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006742:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006744:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006748:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e6      	bne.n	8006724 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3308      	adds	r3, #8
 800675c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006768:	f023 0301 	bic.w	r3, r3, #1
 800676c:	667b      	str	r3, [r7, #100]	@ 0x64
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3308      	adds	r3, #8
 8006774:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006776:	647a      	str	r2, [r7, #68]	@ 0x44
 8006778:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800677c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800677e:	e841 2300 	strex	r3, r2, [r1]
 8006782:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e5      	bne.n	8006756 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a33      	ldr	r2, [pc, #204]	@ (8006870 <UART_RxISR_8BIT+0x1b4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d01f      	beq.n	80067e8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d018      	beq.n	80067e8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	623b      	str	r3, [r7, #32]
   return(result);
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80067d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067dc:	e841 2300 	strex	r3, r2, [r1]
 80067e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e6      	bne.n	80067b6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d12e      	bne.n	800684e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	e853 3f00 	ldrex	r3, [r3]
 8006802:	60fb      	str	r3, [r7, #12]
   return(result);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0310 	bic.w	r3, r3, #16
 800680a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006814:	61fb      	str	r3, [r7, #28]
 8006816:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	69b9      	ldr	r1, [r7, #24]
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	617b      	str	r3, [r7, #20]
   return(result);
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e6      	bne.n	80067f6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b10      	cmp	r3, #16
 8006834:	d103      	bne.n	800683e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2210      	movs	r2, #16
 800683c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fe ff4c 	bl	80056e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800684c:	e00b      	b.n	8006866 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fb fd2a 	bl	80022a8 <HAL_UART_RxCpltCallback>
}
 8006854:	e007      	b.n	8006866 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699a      	ldr	r2, [r3, #24]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f042 0208 	orr.w	r2, r2, #8
 8006864:	619a      	str	r2, [r3, #24]
}
 8006866:	bf00      	nop
 8006868:	3770      	adds	r7, #112	@ 0x70
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	40008000 	.word	0x40008000

08006874 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b09c      	sub	sp, #112	@ 0x70
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006882:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800688c:	2b22      	cmp	r3, #34	@ 0x22
 800688e:	f040 80be 	bne.w	8006a0e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006898:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80068a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80068a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80068aa:	4013      	ands	r3, r2
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b6:	1c9a      	adds	r2, r3, #2
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f040 80a1 	bne.w	8006a1e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80068ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80068fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006900:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e6      	bne.n	80068dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	f023 0301 	bic.w	r3, r3, #1
 8006924:	663b      	str	r3, [r7, #96]	@ 0x60
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3308      	adds	r3, #8
 800692c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800692e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006930:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006934:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800693c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e5      	bne.n	800690e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2220      	movs	r2, #32
 8006946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a33      	ldr	r2, [pc, #204]	@ (8006a28 <UART_RxISR_16BIT+0x1b4>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d01f      	beq.n	80069a0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d018      	beq.n	80069a0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	e853 3f00 	ldrex	r3, [r3]
 800697a:	61fb      	str	r3, [r7, #28]
   return(result);
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006982:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800698c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800698e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006990:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006994:	e841 2300 	strex	r3, r2, [r1]
 8006998:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1e6      	bne.n	800696e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d12e      	bne.n	8006a06 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f023 0310 	bic.w	r3, r3, #16
 80069c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	461a      	mov	r2, r3
 80069ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069cc:	61bb      	str	r3, [r7, #24]
 80069ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6979      	ldr	r1, [r7, #20]
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	613b      	str	r3, [r7, #16]
   return(result);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e6      	bne.n	80069ae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f003 0310 	and.w	r3, r3, #16
 80069ea:	2b10      	cmp	r3, #16
 80069ec:	d103      	bne.n	80069f6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2210      	movs	r2, #16
 80069f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fe fe70 	bl	80056e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a04:	e00b      	b.n	8006a1e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fb fc4e 	bl	80022a8 <HAL_UART_RxCpltCallback>
}
 8006a0c:	e007      	b.n	8006a1e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	699a      	ldr	r2, [r3, #24]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0208 	orr.w	r2, r2, #8
 8006a1c:	619a      	str	r2, [r3, #24]
}
 8006a1e:	bf00      	nop
 8006a20:	3770      	adds	r7, #112	@ 0x70
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	40008000 	.word	0x40008000

08006a2c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b0ac      	sub	sp, #176	@ 0xb0
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006a3a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a62:	2b22      	cmp	r3, #34	@ 0x22
 8006a64:	f040 8183 	bne.w	8006d6e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a6e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a72:	e126      	b.n	8006cc2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a7e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006a82:	b2d9      	uxtb	r1, r3
 8006a84:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a8e:	400a      	ands	r2, r1
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d053      	beq.n	8006b6e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d011      	beq.n	8006af6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006ad2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aec:	f043 0201 	orr.w	r2, r3, #1
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d011      	beq.n	8006b26 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006b02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2202      	movs	r2, #2
 8006b14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b1c:	f043 0204 	orr.w	r2, r3, #4
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d011      	beq.n	8006b56 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00b      	beq.n	8006b56 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2204      	movs	r2, #4
 8006b44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b4c:	f043 0202 	orr.w	r2, r3, #2
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d006      	beq.n	8006b6e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7fe fdb5 	bl	80056d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f040 80a3 	bne.w	8006cc2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006b8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ba0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006ba4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006bac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e4      	bne.n	8006b7c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006bc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006bc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bc8:	f023 0301 	bic.w	r3, r3, #1
 8006bcc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3308      	adds	r3, #8
 8006bd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006bda:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006bdc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006be0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006be8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e1      	bne.n	8006bb2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a60      	ldr	r2, [pc, #384]	@ (8006d88 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d021      	beq.n	8006c50 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d01a      	beq.n	8006c50 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006c3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c3e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c42:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e4      	bne.n	8006c1a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d130      	bne.n	8006cba <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c66:	e853 3f00 	ldrex	r3, [r3]
 8006c6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6e:	f023 0310 	bic.w	r3, r3, #16
 8006c72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c80:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e4      	bne.n	8006c5e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b10      	cmp	r3, #16
 8006ca0:	d103      	bne.n	8006caa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2210      	movs	r2, #16
 8006ca8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7fe fd16 	bl	80056e4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006cb8:	e00e      	b.n	8006cd8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fb faf4 	bl	80022a8 <HAL_UART_RxCpltCallback>
        break;
 8006cc0:	e00a      	b.n	8006cd8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006cc2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d006      	beq.n	8006cd8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f47f aece 	bne.w	8006a74 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cde:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ce2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d049      	beq.n	8006d7e <UART_RxISR_8BIT_FIFOEN+0x352>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006cf0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d242      	bcs.n	8006d7e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006d1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e3      	bne.n	8006cf8 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a16      	ldr	r2, [pc, #88]	@ (8006d8c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006d34:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f043 0320 	orr.w	r3, r3, #32
 8006d4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	6979      	ldr	r1, [r7, #20]
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	613b      	str	r3, [r7, #16]
   return(result);
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e4      	bne.n	8006d36 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d6c:	e007      	b.n	8006d7e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	699a      	ldr	r2, [r3, #24]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0208 	orr.w	r2, r2, #8
 8006d7c:	619a      	str	r2, [r3, #24]
}
 8006d7e:	bf00      	nop
 8006d80:	37b0      	adds	r7, #176	@ 0xb0
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40008000 	.word	0x40008000
 8006d8c:	080066bd 	.word	0x080066bd

08006d90 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b0ae      	sub	sp, #184	@ 0xb8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d9e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dc6:	2b22      	cmp	r3, #34	@ 0x22
 8006dc8:	f040 8187 	bne.w	80070da <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006dd2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006dd6:	e12a      	b.n	800702e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dde:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006dea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006dee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006df2:	4013      	ands	r3, r2
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006dfa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e00:	1c9a      	adds	r2, r3, #2
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006e22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d053      	beq.n	8006ed6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d011      	beq.n	8006e5e <UART_RxISR_16BIT_FIFOEN+0xce>
 8006e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00b      	beq.n	8006e5e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e54:	f043 0201 	orr.w	r2, r3, #1
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d011      	beq.n	8006e8e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006e6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00b      	beq.n	8006e8e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e84:	f043 0204 	orr.w	r2, r3, #4
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e92:	f003 0304 	and.w	r3, r3, #4
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d011      	beq.n	8006ebe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006e9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00b      	beq.n	8006ebe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2204      	movs	r2, #4
 8006eac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eb4:	f043 0202 	orr.w	r2, r3, #2
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d006      	beq.n	8006ed6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7fe fc01 	bl	80056d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f040 80a5 	bne.w	800702e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ef8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e2      	bne.n	8006ee4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3308      	adds	r3, #8
 8006f24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f34:	f023 0301 	bic.w	r3, r3, #1
 8006f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3308      	adds	r3, #8
 8006f42:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006f46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e1      	bne.n	8006f1e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a60      	ldr	r2, [pc, #384]	@ (80070f4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d021      	beq.n	8006fbc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01a      	beq.n	8006fbc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006fa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006faa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e4      	bne.n	8006f86 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d130      	bne.n	8007026 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fda:	f023 0310 	bic.w	r3, r3, #16
 8006fde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ff2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e4      	bne.n	8006fca <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	f003 0310 	and.w	r3, r3, #16
 800700a:	2b10      	cmp	r3, #16
 800700c:	d103      	bne.n	8007016 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2210      	movs	r2, #16
 8007014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fe fb60 	bl	80056e4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007024:	e00e      	b.n	8007044 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7fb f93e 	bl	80022a8 <HAL_UART_RxCpltCallback>
        break;
 800702c:	e00a      	b.n	8007044 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800702e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007032:	2b00      	cmp	r3, #0
 8007034:	d006      	beq.n	8007044 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007036:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	f47f aeca 	bne.w	8006dd8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800704a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800704e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007052:	2b00      	cmp	r3, #0
 8007054:	d049      	beq.n	80070ea <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800705c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007060:	429a      	cmp	r2, r3
 8007062:	d242      	bcs.n	80070ea <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3308      	adds	r3, #8
 800706a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706e:	e853 3f00 	ldrex	r3, [r3]
 8007072:	623b      	str	r3, [r7, #32]
   return(result);
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800707a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3308      	adds	r3, #8
 8007084:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007088:	633a      	str	r2, [r7, #48]	@ 0x30
 800708a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800708e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e3      	bne.n	8007064 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a16      	ldr	r2, [pc, #88]	@ (80070f8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80070a0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f043 0320 	orr.w	r3, r3, #32
 80070b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070c4:	61fb      	str	r3, [r7, #28]
 80070c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	69b9      	ldr	r1, [r7, #24]
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	617b      	str	r3, [r7, #20]
   return(result);
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e4      	bne.n	80070a2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070d8:	e007      	b.n	80070ea <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	699a      	ldr	r2, [r3, #24]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f042 0208 	orr.w	r2, r2, #8
 80070e8:	619a      	str	r2, [r3, #24]
}
 80070ea:	bf00      	nop
 80070ec:	37b8      	adds	r7, #184	@ 0xb8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	40008000 	.word	0x40008000
 80070f8:	08006875 	.word	0x08006875

080070fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <HAL_UARTEx_DisableFifoMode+0x16>
 800710e:	2302      	movs	r3, #2
 8007110:	e027      	b.n	8007162 <HAL_UARTEx_DisableFifoMode+0x66>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2224      	movs	r2, #36	@ 0x24
 800711e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0201 	bic.w	r2, r2, #1
 8007138:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007140:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007182:	2302      	movs	r3, #2
 8007184:	e02d      	b.n	80071e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2224      	movs	r2, #36	@ 0x24
 8007192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0201 	bic.w	r2, r2, #1
 80071ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f850 	bl	8007268 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d101      	bne.n	8007202 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071fe:	2302      	movs	r3, #2
 8007200:	e02d      	b.n	800725e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2224      	movs	r2, #36	@ 0x24
 800720e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0201 	bic.w	r2, r2, #1
 8007228:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f812 	bl	8007268 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2220      	movs	r2, #32
 8007250:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007274:	2b00      	cmp	r3, #0
 8007276:	d108      	bne.n	800728a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007288:	e031      	b.n	80072ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800728a:	2308      	movs	r3, #8
 800728c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800728e:	2308      	movs	r3, #8
 8007290:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	0e5b      	lsrs	r3, r3, #25
 800729a:	b2db      	uxtb	r3, r3
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	0f5b      	lsrs	r3, r3, #29
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	7b3a      	ldrb	r2, [r7, #12]
 80072b6:	4911      	ldr	r1, [pc, #68]	@ (80072fc <UARTEx_SetNbDataToProcess+0x94>)
 80072b8:	5c8a      	ldrb	r2, [r1, r2]
 80072ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072be:	7b3a      	ldrb	r2, [r7, #12]
 80072c0:	490f      	ldr	r1, [pc, #60]	@ (8007300 <UARTEx_SetNbDataToProcess+0x98>)
 80072c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	7b7a      	ldrb	r2, [r7, #13]
 80072d4:	4909      	ldr	r1, [pc, #36]	@ (80072fc <UARTEx_SetNbDataToProcess+0x94>)
 80072d6:	5c8a      	ldrb	r2, [r1, r2]
 80072d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072dc:	7b7a      	ldrb	r2, [r7, #13]
 80072de:	4908      	ldr	r1, [pc, #32]	@ (8007300 <UARTEx_SetNbDataToProcess+0x98>)
 80072e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	08007eb4 	.word	0x08007eb4
 8007300:	08007ebc 	.word	0x08007ebc

08007304 <siprintf>:
 8007304:	b40e      	push	{r1, r2, r3}
 8007306:	b500      	push	{lr}
 8007308:	b09c      	sub	sp, #112	@ 0x70
 800730a:	ab1d      	add	r3, sp, #116	@ 0x74
 800730c:	9002      	str	r0, [sp, #8]
 800730e:	9006      	str	r0, [sp, #24]
 8007310:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007314:	4809      	ldr	r0, [pc, #36]	@ (800733c <siprintf+0x38>)
 8007316:	9107      	str	r1, [sp, #28]
 8007318:	9104      	str	r1, [sp, #16]
 800731a:	4909      	ldr	r1, [pc, #36]	@ (8007340 <siprintf+0x3c>)
 800731c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007320:	9105      	str	r1, [sp, #20]
 8007322:	6800      	ldr	r0, [r0, #0]
 8007324:	9301      	str	r3, [sp, #4]
 8007326:	a902      	add	r1, sp, #8
 8007328:	f000 f9a4 	bl	8007674 <_svfiprintf_r>
 800732c:	9b02      	ldr	r3, [sp, #8]
 800732e:	2200      	movs	r2, #0
 8007330:	701a      	strb	r2, [r3, #0]
 8007332:	b01c      	add	sp, #112	@ 0x70
 8007334:	f85d eb04 	ldr.w	lr, [sp], #4
 8007338:	b003      	add	sp, #12
 800733a:	4770      	bx	lr
 800733c:	20000010 	.word	0x20000010
 8007340:	ffff0208 	.word	0xffff0208

08007344 <memset>:
 8007344:	4402      	add	r2, r0
 8007346:	4603      	mov	r3, r0
 8007348:	4293      	cmp	r3, r2
 800734a:	d100      	bne.n	800734e <memset+0xa>
 800734c:	4770      	bx	lr
 800734e:	f803 1b01 	strb.w	r1, [r3], #1
 8007352:	e7f9      	b.n	8007348 <memset+0x4>

08007354 <strcat>:
 8007354:	b510      	push	{r4, lr}
 8007356:	4602      	mov	r2, r0
 8007358:	7814      	ldrb	r4, [r2, #0]
 800735a:	4613      	mov	r3, r2
 800735c:	3201      	adds	r2, #1
 800735e:	2c00      	cmp	r4, #0
 8007360:	d1fa      	bne.n	8007358 <strcat+0x4>
 8007362:	3b01      	subs	r3, #1
 8007364:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007368:	f803 2f01 	strb.w	r2, [r3, #1]!
 800736c:	2a00      	cmp	r2, #0
 800736e:	d1f9      	bne.n	8007364 <strcat+0x10>
 8007370:	bd10      	pop	{r4, pc}
	...

08007374 <__errno>:
 8007374:	4b01      	ldr	r3, [pc, #4]	@ (800737c <__errno+0x8>)
 8007376:	6818      	ldr	r0, [r3, #0]
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	20000010 	.word	0x20000010

08007380 <__libc_init_array>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	4d0d      	ldr	r5, [pc, #52]	@ (80073b8 <__libc_init_array+0x38>)
 8007384:	4c0d      	ldr	r4, [pc, #52]	@ (80073bc <__libc_init_array+0x3c>)
 8007386:	1b64      	subs	r4, r4, r5
 8007388:	10a4      	asrs	r4, r4, #2
 800738a:	2600      	movs	r6, #0
 800738c:	42a6      	cmp	r6, r4
 800738e:	d109      	bne.n	80073a4 <__libc_init_array+0x24>
 8007390:	4d0b      	ldr	r5, [pc, #44]	@ (80073c0 <__libc_init_array+0x40>)
 8007392:	4c0c      	ldr	r4, [pc, #48]	@ (80073c4 <__libc_init_array+0x44>)
 8007394:	f000 fc66 	bl	8007c64 <_init>
 8007398:	1b64      	subs	r4, r4, r5
 800739a:	10a4      	asrs	r4, r4, #2
 800739c:	2600      	movs	r6, #0
 800739e:	42a6      	cmp	r6, r4
 80073a0:	d105      	bne.n	80073ae <__libc_init_array+0x2e>
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a8:	4798      	blx	r3
 80073aa:	3601      	adds	r6, #1
 80073ac:	e7ee      	b.n	800738c <__libc_init_array+0xc>
 80073ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b2:	4798      	blx	r3
 80073b4:	3601      	adds	r6, #1
 80073b6:	e7f2      	b.n	800739e <__libc_init_array+0x1e>
 80073b8:	08007f00 	.word	0x08007f00
 80073bc:	08007f00 	.word	0x08007f00
 80073c0:	08007f00 	.word	0x08007f00
 80073c4:	08007f04 	.word	0x08007f04

080073c8 <__retarget_lock_acquire_recursive>:
 80073c8:	4770      	bx	lr

080073ca <__retarget_lock_release_recursive>:
 80073ca:	4770      	bx	lr

080073cc <_free_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4605      	mov	r5, r0
 80073d0:	2900      	cmp	r1, #0
 80073d2:	d041      	beq.n	8007458 <_free_r+0x8c>
 80073d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d8:	1f0c      	subs	r4, r1, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bfb8      	it	lt
 80073de:	18e4      	addlt	r4, r4, r3
 80073e0:	f000 f8e0 	bl	80075a4 <__malloc_lock>
 80073e4:	4a1d      	ldr	r2, [pc, #116]	@ (800745c <_free_r+0x90>)
 80073e6:	6813      	ldr	r3, [r2, #0]
 80073e8:	b933      	cbnz	r3, 80073f8 <_free_r+0x2c>
 80073ea:	6063      	str	r3, [r4, #4]
 80073ec:	6014      	str	r4, [r2, #0]
 80073ee:	4628      	mov	r0, r5
 80073f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073f4:	f000 b8dc 	b.w	80075b0 <__malloc_unlock>
 80073f8:	42a3      	cmp	r3, r4
 80073fa:	d908      	bls.n	800740e <_free_r+0x42>
 80073fc:	6820      	ldr	r0, [r4, #0]
 80073fe:	1821      	adds	r1, r4, r0
 8007400:	428b      	cmp	r3, r1
 8007402:	bf01      	itttt	eq
 8007404:	6819      	ldreq	r1, [r3, #0]
 8007406:	685b      	ldreq	r3, [r3, #4]
 8007408:	1809      	addeq	r1, r1, r0
 800740a:	6021      	streq	r1, [r4, #0]
 800740c:	e7ed      	b.n	80073ea <_free_r+0x1e>
 800740e:	461a      	mov	r2, r3
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	b10b      	cbz	r3, 8007418 <_free_r+0x4c>
 8007414:	42a3      	cmp	r3, r4
 8007416:	d9fa      	bls.n	800740e <_free_r+0x42>
 8007418:	6811      	ldr	r1, [r2, #0]
 800741a:	1850      	adds	r0, r2, r1
 800741c:	42a0      	cmp	r0, r4
 800741e:	d10b      	bne.n	8007438 <_free_r+0x6c>
 8007420:	6820      	ldr	r0, [r4, #0]
 8007422:	4401      	add	r1, r0
 8007424:	1850      	adds	r0, r2, r1
 8007426:	4283      	cmp	r3, r0
 8007428:	6011      	str	r1, [r2, #0]
 800742a:	d1e0      	bne.n	80073ee <_free_r+0x22>
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	6053      	str	r3, [r2, #4]
 8007432:	4408      	add	r0, r1
 8007434:	6010      	str	r0, [r2, #0]
 8007436:	e7da      	b.n	80073ee <_free_r+0x22>
 8007438:	d902      	bls.n	8007440 <_free_r+0x74>
 800743a:	230c      	movs	r3, #12
 800743c:	602b      	str	r3, [r5, #0]
 800743e:	e7d6      	b.n	80073ee <_free_r+0x22>
 8007440:	6820      	ldr	r0, [r4, #0]
 8007442:	1821      	adds	r1, r4, r0
 8007444:	428b      	cmp	r3, r1
 8007446:	bf04      	itt	eq
 8007448:	6819      	ldreq	r1, [r3, #0]
 800744a:	685b      	ldreq	r3, [r3, #4]
 800744c:	6063      	str	r3, [r4, #4]
 800744e:	bf04      	itt	eq
 8007450:	1809      	addeq	r1, r1, r0
 8007452:	6021      	streq	r1, [r4, #0]
 8007454:	6054      	str	r4, [r2, #4]
 8007456:	e7ca      	b.n	80073ee <_free_r+0x22>
 8007458:	bd38      	pop	{r3, r4, r5, pc}
 800745a:	bf00      	nop
 800745c:	20000fec 	.word	0x20000fec

08007460 <sbrk_aligned>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	4e0f      	ldr	r6, [pc, #60]	@ (80074a0 <sbrk_aligned+0x40>)
 8007464:	460c      	mov	r4, r1
 8007466:	6831      	ldr	r1, [r6, #0]
 8007468:	4605      	mov	r5, r0
 800746a:	b911      	cbnz	r1, 8007472 <sbrk_aligned+0x12>
 800746c:	f000 fba6 	bl	8007bbc <_sbrk_r>
 8007470:	6030      	str	r0, [r6, #0]
 8007472:	4621      	mov	r1, r4
 8007474:	4628      	mov	r0, r5
 8007476:	f000 fba1 	bl	8007bbc <_sbrk_r>
 800747a:	1c43      	adds	r3, r0, #1
 800747c:	d103      	bne.n	8007486 <sbrk_aligned+0x26>
 800747e:	f04f 34ff 	mov.w	r4, #4294967295
 8007482:	4620      	mov	r0, r4
 8007484:	bd70      	pop	{r4, r5, r6, pc}
 8007486:	1cc4      	adds	r4, r0, #3
 8007488:	f024 0403 	bic.w	r4, r4, #3
 800748c:	42a0      	cmp	r0, r4
 800748e:	d0f8      	beq.n	8007482 <sbrk_aligned+0x22>
 8007490:	1a21      	subs	r1, r4, r0
 8007492:	4628      	mov	r0, r5
 8007494:	f000 fb92 	bl	8007bbc <_sbrk_r>
 8007498:	3001      	adds	r0, #1
 800749a:	d1f2      	bne.n	8007482 <sbrk_aligned+0x22>
 800749c:	e7ef      	b.n	800747e <sbrk_aligned+0x1e>
 800749e:	bf00      	nop
 80074a0:	20000fe8 	.word	0x20000fe8

080074a4 <_malloc_r>:
 80074a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074a8:	1ccd      	adds	r5, r1, #3
 80074aa:	f025 0503 	bic.w	r5, r5, #3
 80074ae:	3508      	adds	r5, #8
 80074b0:	2d0c      	cmp	r5, #12
 80074b2:	bf38      	it	cc
 80074b4:	250c      	movcc	r5, #12
 80074b6:	2d00      	cmp	r5, #0
 80074b8:	4606      	mov	r6, r0
 80074ba:	db01      	blt.n	80074c0 <_malloc_r+0x1c>
 80074bc:	42a9      	cmp	r1, r5
 80074be:	d904      	bls.n	80074ca <_malloc_r+0x26>
 80074c0:	230c      	movs	r3, #12
 80074c2:	6033      	str	r3, [r6, #0]
 80074c4:	2000      	movs	r0, #0
 80074c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075a0 <_malloc_r+0xfc>
 80074ce:	f000 f869 	bl	80075a4 <__malloc_lock>
 80074d2:	f8d8 3000 	ldr.w	r3, [r8]
 80074d6:	461c      	mov	r4, r3
 80074d8:	bb44      	cbnz	r4, 800752c <_malloc_r+0x88>
 80074da:	4629      	mov	r1, r5
 80074dc:	4630      	mov	r0, r6
 80074de:	f7ff ffbf 	bl	8007460 <sbrk_aligned>
 80074e2:	1c43      	adds	r3, r0, #1
 80074e4:	4604      	mov	r4, r0
 80074e6:	d158      	bne.n	800759a <_malloc_r+0xf6>
 80074e8:	f8d8 4000 	ldr.w	r4, [r8]
 80074ec:	4627      	mov	r7, r4
 80074ee:	2f00      	cmp	r7, #0
 80074f0:	d143      	bne.n	800757a <_malloc_r+0xd6>
 80074f2:	2c00      	cmp	r4, #0
 80074f4:	d04b      	beq.n	800758e <_malloc_r+0xea>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	4639      	mov	r1, r7
 80074fa:	4630      	mov	r0, r6
 80074fc:	eb04 0903 	add.w	r9, r4, r3
 8007500:	f000 fb5c 	bl	8007bbc <_sbrk_r>
 8007504:	4581      	cmp	r9, r0
 8007506:	d142      	bne.n	800758e <_malloc_r+0xea>
 8007508:	6821      	ldr	r1, [r4, #0]
 800750a:	1a6d      	subs	r5, r5, r1
 800750c:	4629      	mov	r1, r5
 800750e:	4630      	mov	r0, r6
 8007510:	f7ff ffa6 	bl	8007460 <sbrk_aligned>
 8007514:	3001      	adds	r0, #1
 8007516:	d03a      	beq.n	800758e <_malloc_r+0xea>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	442b      	add	r3, r5
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	f8d8 3000 	ldr.w	r3, [r8]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	bb62      	cbnz	r2, 8007580 <_malloc_r+0xdc>
 8007526:	f8c8 7000 	str.w	r7, [r8]
 800752a:	e00f      	b.n	800754c <_malloc_r+0xa8>
 800752c:	6822      	ldr	r2, [r4, #0]
 800752e:	1b52      	subs	r2, r2, r5
 8007530:	d420      	bmi.n	8007574 <_malloc_r+0xd0>
 8007532:	2a0b      	cmp	r2, #11
 8007534:	d917      	bls.n	8007566 <_malloc_r+0xc2>
 8007536:	1961      	adds	r1, r4, r5
 8007538:	42a3      	cmp	r3, r4
 800753a:	6025      	str	r5, [r4, #0]
 800753c:	bf18      	it	ne
 800753e:	6059      	strne	r1, [r3, #4]
 8007540:	6863      	ldr	r3, [r4, #4]
 8007542:	bf08      	it	eq
 8007544:	f8c8 1000 	streq.w	r1, [r8]
 8007548:	5162      	str	r2, [r4, r5]
 800754a:	604b      	str	r3, [r1, #4]
 800754c:	4630      	mov	r0, r6
 800754e:	f000 f82f 	bl	80075b0 <__malloc_unlock>
 8007552:	f104 000b 	add.w	r0, r4, #11
 8007556:	1d23      	adds	r3, r4, #4
 8007558:	f020 0007 	bic.w	r0, r0, #7
 800755c:	1ac2      	subs	r2, r0, r3
 800755e:	bf1c      	itt	ne
 8007560:	1a1b      	subne	r3, r3, r0
 8007562:	50a3      	strne	r3, [r4, r2]
 8007564:	e7af      	b.n	80074c6 <_malloc_r+0x22>
 8007566:	6862      	ldr	r2, [r4, #4]
 8007568:	42a3      	cmp	r3, r4
 800756a:	bf0c      	ite	eq
 800756c:	f8c8 2000 	streq.w	r2, [r8]
 8007570:	605a      	strne	r2, [r3, #4]
 8007572:	e7eb      	b.n	800754c <_malloc_r+0xa8>
 8007574:	4623      	mov	r3, r4
 8007576:	6864      	ldr	r4, [r4, #4]
 8007578:	e7ae      	b.n	80074d8 <_malloc_r+0x34>
 800757a:	463c      	mov	r4, r7
 800757c:	687f      	ldr	r7, [r7, #4]
 800757e:	e7b6      	b.n	80074ee <_malloc_r+0x4a>
 8007580:	461a      	mov	r2, r3
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	42a3      	cmp	r3, r4
 8007586:	d1fb      	bne.n	8007580 <_malloc_r+0xdc>
 8007588:	2300      	movs	r3, #0
 800758a:	6053      	str	r3, [r2, #4]
 800758c:	e7de      	b.n	800754c <_malloc_r+0xa8>
 800758e:	230c      	movs	r3, #12
 8007590:	6033      	str	r3, [r6, #0]
 8007592:	4630      	mov	r0, r6
 8007594:	f000 f80c 	bl	80075b0 <__malloc_unlock>
 8007598:	e794      	b.n	80074c4 <_malloc_r+0x20>
 800759a:	6005      	str	r5, [r0, #0]
 800759c:	e7d6      	b.n	800754c <_malloc_r+0xa8>
 800759e:	bf00      	nop
 80075a0:	20000fec 	.word	0x20000fec

080075a4 <__malloc_lock>:
 80075a4:	4801      	ldr	r0, [pc, #4]	@ (80075ac <__malloc_lock+0x8>)
 80075a6:	f7ff bf0f 	b.w	80073c8 <__retarget_lock_acquire_recursive>
 80075aa:	bf00      	nop
 80075ac:	20000fe4 	.word	0x20000fe4

080075b0 <__malloc_unlock>:
 80075b0:	4801      	ldr	r0, [pc, #4]	@ (80075b8 <__malloc_unlock+0x8>)
 80075b2:	f7ff bf0a 	b.w	80073ca <__retarget_lock_release_recursive>
 80075b6:	bf00      	nop
 80075b8:	20000fe4 	.word	0x20000fe4

080075bc <__ssputs_r>:
 80075bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c0:	688e      	ldr	r6, [r1, #8]
 80075c2:	461f      	mov	r7, r3
 80075c4:	42be      	cmp	r6, r7
 80075c6:	680b      	ldr	r3, [r1, #0]
 80075c8:	4682      	mov	sl, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	4690      	mov	r8, r2
 80075ce:	d82d      	bhi.n	800762c <__ssputs_r+0x70>
 80075d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075d8:	d026      	beq.n	8007628 <__ssputs_r+0x6c>
 80075da:	6965      	ldr	r5, [r4, #20]
 80075dc:	6909      	ldr	r1, [r1, #16]
 80075de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075e2:	eba3 0901 	sub.w	r9, r3, r1
 80075e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075ea:	1c7b      	adds	r3, r7, #1
 80075ec:	444b      	add	r3, r9
 80075ee:	106d      	asrs	r5, r5, #1
 80075f0:	429d      	cmp	r5, r3
 80075f2:	bf38      	it	cc
 80075f4:	461d      	movcc	r5, r3
 80075f6:	0553      	lsls	r3, r2, #21
 80075f8:	d527      	bpl.n	800764a <__ssputs_r+0x8e>
 80075fa:	4629      	mov	r1, r5
 80075fc:	f7ff ff52 	bl	80074a4 <_malloc_r>
 8007600:	4606      	mov	r6, r0
 8007602:	b360      	cbz	r0, 800765e <__ssputs_r+0xa2>
 8007604:	6921      	ldr	r1, [r4, #16]
 8007606:	464a      	mov	r2, r9
 8007608:	f000 fae8 	bl	8007bdc <memcpy>
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	6126      	str	r6, [r4, #16]
 800761a:	6165      	str	r5, [r4, #20]
 800761c:	444e      	add	r6, r9
 800761e:	eba5 0509 	sub.w	r5, r5, r9
 8007622:	6026      	str	r6, [r4, #0]
 8007624:	60a5      	str	r5, [r4, #8]
 8007626:	463e      	mov	r6, r7
 8007628:	42be      	cmp	r6, r7
 800762a:	d900      	bls.n	800762e <__ssputs_r+0x72>
 800762c:	463e      	mov	r6, r7
 800762e:	6820      	ldr	r0, [r4, #0]
 8007630:	4632      	mov	r2, r6
 8007632:	4641      	mov	r1, r8
 8007634:	f000 faa8 	bl	8007b88 <memmove>
 8007638:	68a3      	ldr	r3, [r4, #8]
 800763a:	1b9b      	subs	r3, r3, r6
 800763c:	60a3      	str	r3, [r4, #8]
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	4433      	add	r3, r6
 8007642:	6023      	str	r3, [r4, #0]
 8007644:	2000      	movs	r0, #0
 8007646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800764a:	462a      	mov	r2, r5
 800764c:	f000 fad4 	bl	8007bf8 <_realloc_r>
 8007650:	4606      	mov	r6, r0
 8007652:	2800      	cmp	r0, #0
 8007654:	d1e0      	bne.n	8007618 <__ssputs_r+0x5c>
 8007656:	6921      	ldr	r1, [r4, #16]
 8007658:	4650      	mov	r0, sl
 800765a:	f7ff feb7 	bl	80073cc <_free_r>
 800765e:	230c      	movs	r3, #12
 8007660:	f8ca 3000 	str.w	r3, [sl]
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800766a:	81a3      	strh	r3, [r4, #12]
 800766c:	f04f 30ff 	mov.w	r0, #4294967295
 8007670:	e7e9      	b.n	8007646 <__ssputs_r+0x8a>
	...

08007674 <_svfiprintf_r>:
 8007674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007678:	4698      	mov	r8, r3
 800767a:	898b      	ldrh	r3, [r1, #12]
 800767c:	061b      	lsls	r3, r3, #24
 800767e:	b09d      	sub	sp, #116	@ 0x74
 8007680:	4607      	mov	r7, r0
 8007682:	460d      	mov	r5, r1
 8007684:	4614      	mov	r4, r2
 8007686:	d510      	bpl.n	80076aa <_svfiprintf_r+0x36>
 8007688:	690b      	ldr	r3, [r1, #16]
 800768a:	b973      	cbnz	r3, 80076aa <_svfiprintf_r+0x36>
 800768c:	2140      	movs	r1, #64	@ 0x40
 800768e:	f7ff ff09 	bl	80074a4 <_malloc_r>
 8007692:	6028      	str	r0, [r5, #0]
 8007694:	6128      	str	r0, [r5, #16]
 8007696:	b930      	cbnz	r0, 80076a6 <_svfiprintf_r+0x32>
 8007698:	230c      	movs	r3, #12
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	f04f 30ff 	mov.w	r0, #4294967295
 80076a0:	b01d      	add	sp, #116	@ 0x74
 80076a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a6:	2340      	movs	r3, #64	@ 0x40
 80076a8:	616b      	str	r3, [r5, #20]
 80076aa:	2300      	movs	r3, #0
 80076ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ae:	2320      	movs	r3, #32
 80076b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80076b8:	2330      	movs	r3, #48	@ 0x30
 80076ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007858 <_svfiprintf_r+0x1e4>
 80076be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076c2:	f04f 0901 	mov.w	r9, #1
 80076c6:	4623      	mov	r3, r4
 80076c8:	469a      	mov	sl, r3
 80076ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076ce:	b10a      	cbz	r2, 80076d4 <_svfiprintf_r+0x60>
 80076d0:	2a25      	cmp	r2, #37	@ 0x25
 80076d2:	d1f9      	bne.n	80076c8 <_svfiprintf_r+0x54>
 80076d4:	ebba 0b04 	subs.w	fp, sl, r4
 80076d8:	d00b      	beq.n	80076f2 <_svfiprintf_r+0x7e>
 80076da:	465b      	mov	r3, fp
 80076dc:	4622      	mov	r2, r4
 80076de:	4629      	mov	r1, r5
 80076e0:	4638      	mov	r0, r7
 80076e2:	f7ff ff6b 	bl	80075bc <__ssputs_r>
 80076e6:	3001      	adds	r0, #1
 80076e8:	f000 80a7 	beq.w	800783a <_svfiprintf_r+0x1c6>
 80076ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076ee:	445a      	add	r2, fp
 80076f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80076f2:	f89a 3000 	ldrb.w	r3, [sl]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 809f 	beq.w	800783a <_svfiprintf_r+0x1c6>
 80076fc:	2300      	movs	r3, #0
 80076fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007706:	f10a 0a01 	add.w	sl, sl, #1
 800770a:	9304      	str	r3, [sp, #16]
 800770c:	9307      	str	r3, [sp, #28]
 800770e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007712:	931a      	str	r3, [sp, #104]	@ 0x68
 8007714:	4654      	mov	r4, sl
 8007716:	2205      	movs	r2, #5
 8007718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800771c:	484e      	ldr	r0, [pc, #312]	@ (8007858 <_svfiprintf_r+0x1e4>)
 800771e:	f7f8 fd97 	bl	8000250 <memchr>
 8007722:	9a04      	ldr	r2, [sp, #16]
 8007724:	b9d8      	cbnz	r0, 800775e <_svfiprintf_r+0xea>
 8007726:	06d0      	lsls	r0, r2, #27
 8007728:	bf44      	itt	mi
 800772a:	2320      	movmi	r3, #32
 800772c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007730:	0711      	lsls	r1, r2, #28
 8007732:	bf44      	itt	mi
 8007734:	232b      	movmi	r3, #43	@ 0x2b
 8007736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800773a:	f89a 3000 	ldrb.w	r3, [sl]
 800773e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007740:	d015      	beq.n	800776e <_svfiprintf_r+0xfa>
 8007742:	9a07      	ldr	r2, [sp, #28]
 8007744:	4654      	mov	r4, sl
 8007746:	2000      	movs	r0, #0
 8007748:	f04f 0c0a 	mov.w	ip, #10
 800774c:	4621      	mov	r1, r4
 800774e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007752:	3b30      	subs	r3, #48	@ 0x30
 8007754:	2b09      	cmp	r3, #9
 8007756:	d94b      	bls.n	80077f0 <_svfiprintf_r+0x17c>
 8007758:	b1b0      	cbz	r0, 8007788 <_svfiprintf_r+0x114>
 800775a:	9207      	str	r2, [sp, #28]
 800775c:	e014      	b.n	8007788 <_svfiprintf_r+0x114>
 800775e:	eba0 0308 	sub.w	r3, r0, r8
 8007762:	fa09 f303 	lsl.w	r3, r9, r3
 8007766:	4313      	orrs	r3, r2
 8007768:	9304      	str	r3, [sp, #16]
 800776a:	46a2      	mov	sl, r4
 800776c:	e7d2      	b.n	8007714 <_svfiprintf_r+0xa0>
 800776e:	9b03      	ldr	r3, [sp, #12]
 8007770:	1d19      	adds	r1, r3, #4
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	9103      	str	r1, [sp, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	bfbb      	ittet	lt
 800777a:	425b      	neglt	r3, r3
 800777c:	f042 0202 	orrlt.w	r2, r2, #2
 8007780:	9307      	strge	r3, [sp, #28]
 8007782:	9307      	strlt	r3, [sp, #28]
 8007784:	bfb8      	it	lt
 8007786:	9204      	strlt	r2, [sp, #16]
 8007788:	7823      	ldrb	r3, [r4, #0]
 800778a:	2b2e      	cmp	r3, #46	@ 0x2e
 800778c:	d10a      	bne.n	80077a4 <_svfiprintf_r+0x130>
 800778e:	7863      	ldrb	r3, [r4, #1]
 8007790:	2b2a      	cmp	r3, #42	@ 0x2a
 8007792:	d132      	bne.n	80077fa <_svfiprintf_r+0x186>
 8007794:	9b03      	ldr	r3, [sp, #12]
 8007796:	1d1a      	adds	r2, r3, #4
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	9203      	str	r2, [sp, #12]
 800779c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077a0:	3402      	adds	r4, #2
 80077a2:	9305      	str	r3, [sp, #20]
 80077a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007868 <_svfiprintf_r+0x1f4>
 80077a8:	7821      	ldrb	r1, [r4, #0]
 80077aa:	2203      	movs	r2, #3
 80077ac:	4650      	mov	r0, sl
 80077ae:	f7f8 fd4f 	bl	8000250 <memchr>
 80077b2:	b138      	cbz	r0, 80077c4 <_svfiprintf_r+0x150>
 80077b4:	9b04      	ldr	r3, [sp, #16]
 80077b6:	eba0 000a 	sub.w	r0, r0, sl
 80077ba:	2240      	movs	r2, #64	@ 0x40
 80077bc:	4082      	lsls	r2, r0
 80077be:	4313      	orrs	r3, r2
 80077c0:	3401      	adds	r4, #1
 80077c2:	9304      	str	r3, [sp, #16]
 80077c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c8:	4824      	ldr	r0, [pc, #144]	@ (800785c <_svfiprintf_r+0x1e8>)
 80077ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077ce:	2206      	movs	r2, #6
 80077d0:	f7f8 fd3e 	bl	8000250 <memchr>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d036      	beq.n	8007846 <_svfiprintf_r+0x1d2>
 80077d8:	4b21      	ldr	r3, [pc, #132]	@ (8007860 <_svfiprintf_r+0x1ec>)
 80077da:	bb1b      	cbnz	r3, 8007824 <_svfiprintf_r+0x1b0>
 80077dc:	9b03      	ldr	r3, [sp, #12]
 80077de:	3307      	adds	r3, #7
 80077e0:	f023 0307 	bic.w	r3, r3, #7
 80077e4:	3308      	adds	r3, #8
 80077e6:	9303      	str	r3, [sp, #12]
 80077e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ea:	4433      	add	r3, r6
 80077ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80077ee:	e76a      	b.n	80076c6 <_svfiprintf_r+0x52>
 80077f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80077f4:	460c      	mov	r4, r1
 80077f6:	2001      	movs	r0, #1
 80077f8:	e7a8      	b.n	800774c <_svfiprintf_r+0xd8>
 80077fa:	2300      	movs	r3, #0
 80077fc:	3401      	adds	r4, #1
 80077fe:	9305      	str	r3, [sp, #20]
 8007800:	4619      	mov	r1, r3
 8007802:	f04f 0c0a 	mov.w	ip, #10
 8007806:	4620      	mov	r0, r4
 8007808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800780c:	3a30      	subs	r2, #48	@ 0x30
 800780e:	2a09      	cmp	r2, #9
 8007810:	d903      	bls.n	800781a <_svfiprintf_r+0x1a6>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d0c6      	beq.n	80077a4 <_svfiprintf_r+0x130>
 8007816:	9105      	str	r1, [sp, #20]
 8007818:	e7c4      	b.n	80077a4 <_svfiprintf_r+0x130>
 800781a:	fb0c 2101 	mla	r1, ip, r1, r2
 800781e:	4604      	mov	r4, r0
 8007820:	2301      	movs	r3, #1
 8007822:	e7f0      	b.n	8007806 <_svfiprintf_r+0x192>
 8007824:	ab03      	add	r3, sp, #12
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	462a      	mov	r2, r5
 800782a:	4b0e      	ldr	r3, [pc, #56]	@ (8007864 <_svfiprintf_r+0x1f0>)
 800782c:	a904      	add	r1, sp, #16
 800782e:	4638      	mov	r0, r7
 8007830:	f3af 8000 	nop.w
 8007834:	1c42      	adds	r2, r0, #1
 8007836:	4606      	mov	r6, r0
 8007838:	d1d6      	bne.n	80077e8 <_svfiprintf_r+0x174>
 800783a:	89ab      	ldrh	r3, [r5, #12]
 800783c:	065b      	lsls	r3, r3, #25
 800783e:	f53f af2d 	bmi.w	800769c <_svfiprintf_r+0x28>
 8007842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007844:	e72c      	b.n	80076a0 <_svfiprintf_r+0x2c>
 8007846:	ab03      	add	r3, sp, #12
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	462a      	mov	r2, r5
 800784c:	4b05      	ldr	r3, [pc, #20]	@ (8007864 <_svfiprintf_r+0x1f0>)
 800784e:	a904      	add	r1, sp, #16
 8007850:	4638      	mov	r0, r7
 8007852:	f000 f879 	bl	8007948 <_printf_i>
 8007856:	e7ed      	b.n	8007834 <_svfiprintf_r+0x1c0>
 8007858:	08007ec4 	.word	0x08007ec4
 800785c:	08007ece 	.word	0x08007ece
 8007860:	00000000 	.word	0x00000000
 8007864:	080075bd 	.word	0x080075bd
 8007868:	08007eca 	.word	0x08007eca

0800786c <_printf_common>:
 800786c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007870:	4616      	mov	r6, r2
 8007872:	4698      	mov	r8, r3
 8007874:	688a      	ldr	r2, [r1, #8]
 8007876:	690b      	ldr	r3, [r1, #16]
 8007878:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800787c:	4293      	cmp	r3, r2
 800787e:	bfb8      	it	lt
 8007880:	4613      	movlt	r3, r2
 8007882:	6033      	str	r3, [r6, #0]
 8007884:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007888:	4607      	mov	r7, r0
 800788a:	460c      	mov	r4, r1
 800788c:	b10a      	cbz	r2, 8007892 <_printf_common+0x26>
 800788e:	3301      	adds	r3, #1
 8007890:	6033      	str	r3, [r6, #0]
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	0699      	lsls	r1, r3, #26
 8007896:	bf42      	ittt	mi
 8007898:	6833      	ldrmi	r3, [r6, #0]
 800789a:	3302      	addmi	r3, #2
 800789c:	6033      	strmi	r3, [r6, #0]
 800789e:	6825      	ldr	r5, [r4, #0]
 80078a0:	f015 0506 	ands.w	r5, r5, #6
 80078a4:	d106      	bne.n	80078b4 <_printf_common+0x48>
 80078a6:	f104 0a19 	add.w	sl, r4, #25
 80078aa:	68e3      	ldr	r3, [r4, #12]
 80078ac:	6832      	ldr	r2, [r6, #0]
 80078ae:	1a9b      	subs	r3, r3, r2
 80078b0:	42ab      	cmp	r3, r5
 80078b2:	dc26      	bgt.n	8007902 <_printf_common+0x96>
 80078b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078b8:	6822      	ldr	r2, [r4, #0]
 80078ba:	3b00      	subs	r3, #0
 80078bc:	bf18      	it	ne
 80078be:	2301      	movne	r3, #1
 80078c0:	0692      	lsls	r2, r2, #26
 80078c2:	d42b      	bmi.n	800791c <_printf_common+0xb0>
 80078c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078c8:	4641      	mov	r1, r8
 80078ca:	4638      	mov	r0, r7
 80078cc:	47c8      	blx	r9
 80078ce:	3001      	adds	r0, #1
 80078d0:	d01e      	beq.n	8007910 <_printf_common+0xa4>
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	6922      	ldr	r2, [r4, #16]
 80078d6:	f003 0306 	and.w	r3, r3, #6
 80078da:	2b04      	cmp	r3, #4
 80078dc:	bf02      	ittt	eq
 80078de:	68e5      	ldreq	r5, [r4, #12]
 80078e0:	6833      	ldreq	r3, [r6, #0]
 80078e2:	1aed      	subeq	r5, r5, r3
 80078e4:	68a3      	ldr	r3, [r4, #8]
 80078e6:	bf0c      	ite	eq
 80078e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078ec:	2500      	movne	r5, #0
 80078ee:	4293      	cmp	r3, r2
 80078f0:	bfc4      	itt	gt
 80078f2:	1a9b      	subgt	r3, r3, r2
 80078f4:	18ed      	addgt	r5, r5, r3
 80078f6:	2600      	movs	r6, #0
 80078f8:	341a      	adds	r4, #26
 80078fa:	42b5      	cmp	r5, r6
 80078fc:	d11a      	bne.n	8007934 <_printf_common+0xc8>
 80078fe:	2000      	movs	r0, #0
 8007900:	e008      	b.n	8007914 <_printf_common+0xa8>
 8007902:	2301      	movs	r3, #1
 8007904:	4652      	mov	r2, sl
 8007906:	4641      	mov	r1, r8
 8007908:	4638      	mov	r0, r7
 800790a:	47c8      	blx	r9
 800790c:	3001      	adds	r0, #1
 800790e:	d103      	bne.n	8007918 <_printf_common+0xac>
 8007910:	f04f 30ff 	mov.w	r0, #4294967295
 8007914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007918:	3501      	adds	r5, #1
 800791a:	e7c6      	b.n	80078aa <_printf_common+0x3e>
 800791c:	18e1      	adds	r1, r4, r3
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	2030      	movs	r0, #48	@ 0x30
 8007922:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007926:	4422      	add	r2, r4
 8007928:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800792c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007930:	3302      	adds	r3, #2
 8007932:	e7c7      	b.n	80078c4 <_printf_common+0x58>
 8007934:	2301      	movs	r3, #1
 8007936:	4622      	mov	r2, r4
 8007938:	4641      	mov	r1, r8
 800793a:	4638      	mov	r0, r7
 800793c:	47c8      	blx	r9
 800793e:	3001      	adds	r0, #1
 8007940:	d0e6      	beq.n	8007910 <_printf_common+0xa4>
 8007942:	3601      	adds	r6, #1
 8007944:	e7d9      	b.n	80078fa <_printf_common+0x8e>
	...

08007948 <_printf_i>:
 8007948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800794c:	7e0f      	ldrb	r7, [r1, #24]
 800794e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007950:	2f78      	cmp	r7, #120	@ 0x78
 8007952:	4691      	mov	r9, r2
 8007954:	4680      	mov	r8, r0
 8007956:	460c      	mov	r4, r1
 8007958:	469a      	mov	sl, r3
 800795a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800795e:	d807      	bhi.n	8007970 <_printf_i+0x28>
 8007960:	2f62      	cmp	r7, #98	@ 0x62
 8007962:	d80a      	bhi.n	800797a <_printf_i+0x32>
 8007964:	2f00      	cmp	r7, #0
 8007966:	f000 80d2 	beq.w	8007b0e <_printf_i+0x1c6>
 800796a:	2f58      	cmp	r7, #88	@ 0x58
 800796c:	f000 80b9 	beq.w	8007ae2 <_printf_i+0x19a>
 8007970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007974:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007978:	e03a      	b.n	80079f0 <_printf_i+0xa8>
 800797a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800797e:	2b15      	cmp	r3, #21
 8007980:	d8f6      	bhi.n	8007970 <_printf_i+0x28>
 8007982:	a101      	add	r1, pc, #4	@ (adr r1, 8007988 <_printf_i+0x40>)
 8007984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007988:	080079e1 	.word	0x080079e1
 800798c:	080079f5 	.word	0x080079f5
 8007990:	08007971 	.word	0x08007971
 8007994:	08007971 	.word	0x08007971
 8007998:	08007971 	.word	0x08007971
 800799c:	08007971 	.word	0x08007971
 80079a0:	080079f5 	.word	0x080079f5
 80079a4:	08007971 	.word	0x08007971
 80079a8:	08007971 	.word	0x08007971
 80079ac:	08007971 	.word	0x08007971
 80079b0:	08007971 	.word	0x08007971
 80079b4:	08007af5 	.word	0x08007af5
 80079b8:	08007a1f 	.word	0x08007a1f
 80079bc:	08007aaf 	.word	0x08007aaf
 80079c0:	08007971 	.word	0x08007971
 80079c4:	08007971 	.word	0x08007971
 80079c8:	08007b17 	.word	0x08007b17
 80079cc:	08007971 	.word	0x08007971
 80079d0:	08007a1f 	.word	0x08007a1f
 80079d4:	08007971 	.word	0x08007971
 80079d8:	08007971 	.word	0x08007971
 80079dc:	08007ab7 	.word	0x08007ab7
 80079e0:	6833      	ldr	r3, [r6, #0]
 80079e2:	1d1a      	adds	r2, r3, #4
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6032      	str	r2, [r6, #0]
 80079e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079f0:	2301      	movs	r3, #1
 80079f2:	e09d      	b.n	8007b30 <_printf_i+0x1e8>
 80079f4:	6833      	ldr	r3, [r6, #0]
 80079f6:	6820      	ldr	r0, [r4, #0]
 80079f8:	1d19      	adds	r1, r3, #4
 80079fa:	6031      	str	r1, [r6, #0]
 80079fc:	0606      	lsls	r6, r0, #24
 80079fe:	d501      	bpl.n	8007a04 <_printf_i+0xbc>
 8007a00:	681d      	ldr	r5, [r3, #0]
 8007a02:	e003      	b.n	8007a0c <_printf_i+0xc4>
 8007a04:	0645      	lsls	r5, r0, #25
 8007a06:	d5fb      	bpl.n	8007a00 <_printf_i+0xb8>
 8007a08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a0c:	2d00      	cmp	r5, #0
 8007a0e:	da03      	bge.n	8007a18 <_printf_i+0xd0>
 8007a10:	232d      	movs	r3, #45	@ 0x2d
 8007a12:	426d      	negs	r5, r5
 8007a14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a18:	4859      	ldr	r0, [pc, #356]	@ (8007b80 <_printf_i+0x238>)
 8007a1a:	230a      	movs	r3, #10
 8007a1c:	e011      	b.n	8007a42 <_printf_i+0xfa>
 8007a1e:	6821      	ldr	r1, [r4, #0]
 8007a20:	6833      	ldr	r3, [r6, #0]
 8007a22:	0608      	lsls	r0, r1, #24
 8007a24:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a28:	d402      	bmi.n	8007a30 <_printf_i+0xe8>
 8007a2a:	0649      	lsls	r1, r1, #25
 8007a2c:	bf48      	it	mi
 8007a2e:	b2ad      	uxthmi	r5, r5
 8007a30:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a32:	4853      	ldr	r0, [pc, #332]	@ (8007b80 <_printf_i+0x238>)
 8007a34:	6033      	str	r3, [r6, #0]
 8007a36:	bf14      	ite	ne
 8007a38:	230a      	movne	r3, #10
 8007a3a:	2308      	moveq	r3, #8
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a42:	6866      	ldr	r6, [r4, #4]
 8007a44:	60a6      	str	r6, [r4, #8]
 8007a46:	2e00      	cmp	r6, #0
 8007a48:	bfa2      	ittt	ge
 8007a4a:	6821      	ldrge	r1, [r4, #0]
 8007a4c:	f021 0104 	bicge.w	r1, r1, #4
 8007a50:	6021      	strge	r1, [r4, #0]
 8007a52:	b90d      	cbnz	r5, 8007a58 <_printf_i+0x110>
 8007a54:	2e00      	cmp	r6, #0
 8007a56:	d04b      	beq.n	8007af0 <_printf_i+0x1a8>
 8007a58:	4616      	mov	r6, r2
 8007a5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a5e:	fb03 5711 	mls	r7, r3, r1, r5
 8007a62:	5dc7      	ldrb	r7, [r0, r7]
 8007a64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a68:	462f      	mov	r7, r5
 8007a6a:	42bb      	cmp	r3, r7
 8007a6c:	460d      	mov	r5, r1
 8007a6e:	d9f4      	bls.n	8007a5a <_printf_i+0x112>
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	d10b      	bne.n	8007a8c <_printf_i+0x144>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	07df      	lsls	r7, r3, #31
 8007a78:	d508      	bpl.n	8007a8c <_printf_i+0x144>
 8007a7a:	6923      	ldr	r3, [r4, #16]
 8007a7c:	6861      	ldr	r1, [r4, #4]
 8007a7e:	4299      	cmp	r1, r3
 8007a80:	bfde      	ittt	le
 8007a82:	2330      	movle	r3, #48	@ 0x30
 8007a84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a8c:	1b92      	subs	r2, r2, r6
 8007a8e:	6122      	str	r2, [r4, #16]
 8007a90:	f8cd a000 	str.w	sl, [sp]
 8007a94:	464b      	mov	r3, r9
 8007a96:	aa03      	add	r2, sp, #12
 8007a98:	4621      	mov	r1, r4
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	f7ff fee6 	bl	800786c <_printf_common>
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d14a      	bne.n	8007b3a <_printf_i+0x1f2>
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa8:	b004      	add	sp, #16
 8007aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	f043 0320 	orr.w	r3, r3, #32
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	4833      	ldr	r0, [pc, #204]	@ (8007b84 <_printf_i+0x23c>)
 8007ab8:	2778      	movs	r7, #120	@ 0x78
 8007aba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	6831      	ldr	r1, [r6, #0]
 8007ac2:	061f      	lsls	r7, r3, #24
 8007ac4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ac8:	d402      	bmi.n	8007ad0 <_printf_i+0x188>
 8007aca:	065f      	lsls	r7, r3, #25
 8007acc:	bf48      	it	mi
 8007ace:	b2ad      	uxthmi	r5, r5
 8007ad0:	6031      	str	r1, [r6, #0]
 8007ad2:	07d9      	lsls	r1, r3, #31
 8007ad4:	bf44      	itt	mi
 8007ad6:	f043 0320 	orrmi.w	r3, r3, #32
 8007ada:	6023      	strmi	r3, [r4, #0]
 8007adc:	b11d      	cbz	r5, 8007ae6 <_printf_i+0x19e>
 8007ade:	2310      	movs	r3, #16
 8007ae0:	e7ac      	b.n	8007a3c <_printf_i+0xf4>
 8007ae2:	4827      	ldr	r0, [pc, #156]	@ (8007b80 <_printf_i+0x238>)
 8007ae4:	e7e9      	b.n	8007aba <_printf_i+0x172>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	f023 0320 	bic.w	r3, r3, #32
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	e7f6      	b.n	8007ade <_printf_i+0x196>
 8007af0:	4616      	mov	r6, r2
 8007af2:	e7bd      	b.n	8007a70 <_printf_i+0x128>
 8007af4:	6833      	ldr	r3, [r6, #0]
 8007af6:	6825      	ldr	r5, [r4, #0]
 8007af8:	6961      	ldr	r1, [r4, #20]
 8007afa:	1d18      	adds	r0, r3, #4
 8007afc:	6030      	str	r0, [r6, #0]
 8007afe:	062e      	lsls	r6, r5, #24
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	d501      	bpl.n	8007b08 <_printf_i+0x1c0>
 8007b04:	6019      	str	r1, [r3, #0]
 8007b06:	e002      	b.n	8007b0e <_printf_i+0x1c6>
 8007b08:	0668      	lsls	r0, r5, #25
 8007b0a:	d5fb      	bpl.n	8007b04 <_printf_i+0x1bc>
 8007b0c:	8019      	strh	r1, [r3, #0]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	6123      	str	r3, [r4, #16]
 8007b12:	4616      	mov	r6, r2
 8007b14:	e7bc      	b.n	8007a90 <_printf_i+0x148>
 8007b16:	6833      	ldr	r3, [r6, #0]
 8007b18:	1d1a      	adds	r2, r3, #4
 8007b1a:	6032      	str	r2, [r6, #0]
 8007b1c:	681e      	ldr	r6, [r3, #0]
 8007b1e:	6862      	ldr	r2, [r4, #4]
 8007b20:	2100      	movs	r1, #0
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7f8 fb94 	bl	8000250 <memchr>
 8007b28:	b108      	cbz	r0, 8007b2e <_printf_i+0x1e6>
 8007b2a:	1b80      	subs	r0, r0, r6
 8007b2c:	6060      	str	r0, [r4, #4]
 8007b2e:	6863      	ldr	r3, [r4, #4]
 8007b30:	6123      	str	r3, [r4, #16]
 8007b32:	2300      	movs	r3, #0
 8007b34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b38:	e7aa      	b.n	8007a90 <_printf_i+0x148>
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	4632      	mov	r2, r6
 8007b3e:	4649      	mov	r1, r9
 8007b40:	4640      	mov	r0, r8
 8007b42:	47d0      	blx	sl
 8007b44:	3001      	adds	r0, #1
 8007b46:	d0ad      	beq.n	8007aa4 <_printf_i+0x15c>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	079b      	lsls	r3, r3, #30
 8007b4c:	d413      	bmi.n	8007b76 <_printf_i+0x22e>
 8007b4e:	68e0      	ldr	r0, [r4, #12]
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	4298      	cmp	r0, r3
 8007b54:	bfb8      	it	lt
 8007b56:	4618      	movlt	r0, r3
 8007b58:	e7a6      	b.n	8007aa8 <_printf_i+0x160>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	47d0      	blx	sl
 8007b64:	3001      	adds	r0, #1
 8007b66:	d09d      	beq.n	8007aa4 <_printf_i+0x15c>
 8007b68:	3501      	adds	r5, #1
 8007b6a:	68e3      	ldr	r3, [r4, #12]
 8007b6c:	9903      	ldr	r1, [sp, #12]
 8007b6e:	1a5b      	subs	r3, r3, r1
 8007b70:	42ab      	cmp	r3, r5
 8007b72:	dcf2      	bgt.n	8007b5a <_printf_i+0x212>
 8007b74:	e7eb      	b.n	8007b4e <_printf_i+0x206>
 8007b76:	2500      	movs	r5, #0
 8007b78:	f104 0619 	add.w	r6, r4, #25
 8007b7c:	e7f5      	b.n	8007b6a <_printf_i+0x222>
 8007b7e:	bf00      	nop
 8007b80:	08007ed5 	.word	0x08007ed5
 8007b84:	08007ee6 	.word	0x08007ee6

08007b88 <memmove>:
 8007b88:	4288      	cmp	r0, r1
 8007b8a:	b510      	push	{r4, lr}
 8007b8c:	eb01 0402 	add.w	r4, r1, r2
 8007b90:	d902      	bls.n	8007b98 <memmove+0x10>
 8007b92:	4284      	cmp	r4, r0
 8007b94:	4623      	mov	r3, r4
 8007b96:	d807      	bhi.n	8007ba8 <memmove+0x20>
 8007b98:	1e43      	subs	r3, r0, #1
 8007b9a:	42a1      	cmp	r1, r4
 8007b9c:	d008      	beq.n	8007bb0 <memmove+0x28>
 8007b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ba2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ba6:	e7f8      	b.n	8007b9a <memmove+0x12>
 8007ba8:	4402      	add	r2, r0
 8007baa:	4601      	mov	r1, r0
 8007bac:	428a      	cmp	r2, r1
 8007bae:	d100      	bne.n	8007bb2 <memmove+0x2a>
 8007bb0:	bd10      	pop	{r4, pc}
 8007bb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bba:	e7f7      	b.n	8007bac <memmove+0x24>

08007bbc <_sbrk_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4d06      	ldr	r5, [pc, #24]	@ (8007bd8 <_sbrk_r+0x1c>)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	602b      	str	r3, [r5, #0]
 8007bc8:	f7fa fa50 	bl	800206c <_sbrk>
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	d102      	bne.n	8007bd6 <_sbrk_r+0x1a>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	b103      	cbz	r3, 8007bd6 <_sbrk_r+0x1a>
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	20000fe0 	.word	0x20000fe0

08007bdc <memcpy>:
 8007bdc:	440a      	add	r2, r1
 8007bde:	4291      	cmp	r1, r2
 8007be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007be4:	d100      	bne.n	8007be8 <memcpy+0xc>
 8007be6:	4770      	bx	lr
 8007be8:	b510      	push	{r4, lr}
 8007bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bf2:	4291      	cmp	r1, r2
 8007bf4:	d1f9      	bne.n	8007bea <memcpy+0xe>
 8007bf6:	bd10      	pop	{r4, pc}

08007bf8 <_realloc_r>:
 8007bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	4615      	mov	r5, r2
 8007c00:	460c      	mov	r4, r1
 8007c02:	b921      	cbnz	r1, 8007c0e <_realloc_r+0x16>
 8007c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c08:	4611      	mov	r1, r2
 8007c0a:	f7ff bc4b 	b.w	80074a4 <_malloc_r>
 8007c0e:	b92a      	cbnz	r2, 8007c1c <_realloc_r+0x24>
 8007c10:	f7ff fbdc 	bl	80073cc <_free_r>
 8007c14:	2400      	movs	r4, #0
 8007c16:	4620      	mov	r0, r4
 8007c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c1c:	f000 f81a 	bl	8007c54 <_malloc_usable_size_r>
 8007c20:	4285      	cmp	r5, r0
 8007c22:	4606      	mov	r6, r0
 8007c24:	d802      	bhi.n	8007c2c <_realloc_r+0x34>
 8007c26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c2a:	d8f4      	bhi.n	8007c16 <_realloc_r+0x1e>
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	4640      	mov	r0, r8
 8007c30:	f7ff fc38 	bl	80074a4 <_malloc_r>
 8007c34:	4607      	mov	r7, r0
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d0ec      	beq.n	8007c14 <_realloc_r+0x1c>
 8007c3a:	42b5      	cmp	r5, r6
 8007c3c:	462a      	mov	r2, r5
 8007c3e:	4621      	mov	r1, r4
 8007c40:	bf28      	it	cs
 8007c42:	4632      	movcs	r2, r6
 8007c44:	f7ff ffca 	bl	8007bdc <memcpy>
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	f7ff fbbe 	bl	80073cc <_free_r>
 8007c50:	463c      	mov	r4, r7
 8007c52:	e7e0      	b.n	8007c16 <_realloc_r+0x1e>

08007c54 <_malloc_usable_size_r>:
 8007c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c58:	1f18      	subs	r0, r3, #4
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	bfbc      	itt	lt
 8007c5e:	580b      	ldrlt	r3, [r1, r0]
 8007c60:	18c0      	addlt	r0, r0, r3
 8007c62:	4770      	bx	lr

08007c64 <_init>:
 8007c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c66:	bf00      	nop
 8007c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6a:	bc08      	pop	{r3}
 8007c6c:	469e      	mov	lr, r3
 8007c6e:	4770      	bx	lr

08007c70 <_fini>:
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	bf00      	nop
 8007c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c76:	bc08      	pop	{r3}
 8007c78:	469e      	mov	lr, r3
 8007c7a:	4770      	bx	lr
