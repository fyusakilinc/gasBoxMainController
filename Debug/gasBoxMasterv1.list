
gasBoxMasterv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008568  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08008748  08008748  00009748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a80  08008a80  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008a80  08008a80  00009a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a88  08008a88  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a88  08008a88  00009a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a8c  08008a8c  00009a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008a90  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001358  20000060  08008af0  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b8  08008af0  0000a3b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c13  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d36  00000000  00000000  00022ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  000269e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001171  00000000  00000000  00028040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000236da  00000000  00000000  000291b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e185  00000000  00000000  0004c88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc902  00000000  00000000  0006aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147312  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c0  00000000  00000000  00147358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0014d418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008730 	.word	0x08008730

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08008730 	.word	0x08008730

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <hw_sero_get>:


// Serviceroutine Hadware Get
// Prueft im wesentlichen auf Harwarefehlersignale
void hw_sero_get(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <hw_sero_set>:

// Serviceroutine Hadware Set
// Verwaltet die Heartbeat LED
void hw_sero_set(void)
{	if (ct_hbeat_null()==1)
 80005ee:	b580      	push	{r7, lr}
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	f002 f9e7 	bl	80029c4 <ct_hbeat_null>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d109      	bne.n	8000610 <hw_sero_set+0x22>
	 { set_ct_hbeat(500);
 80005fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000600:	f002 f9d0 	bl	80029a4 <set_ct_hbeat>
	 HAL_GPIO_TogglePin(UC_HEARTBEAT_GPIO_Port, UC_HEARTBEAT_Pin);
 8000604:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060c:	f003 ff40 	bl	8004490 <HAL_GPIO_TogglePin>
	}
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <u_ok>:
void hw_set_error_out(uint8_t p)
{

}

uint8_t u_ok(GPIO_TypeDef *port, uint16_t pin) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
    GPIO_PinState s = HAL_GPIO_ReadPin(port, pin);
 8000620:	887b      	ldrh	r3, [r7, #2]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f003 ff03 	bl	8004430 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	73fb      	strb	r3, [r7, #15]
    return (s == GPIO_PIN_SET) ? 1u : 0u;
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d101      	bne.n	8000638 <u_ok+0x24>
 8000634:	2301      	movs	r3, #1
 8000636:	e000      	b.n	800063a <u_ok+0x26>
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <update_uok>:

uint8_t update_uok(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	uint8_t res1 = u_ok(UC__5VOK_GPIO_Port,UC__5VOK_Pin);
 800064a:	2110      	movs	r1, #16
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <update_uok+0x38>)
 800064e:	f7ff ffe1 	bl	8000614 <u_ok>
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	uint8_t res2 = u_ok(UC__12VOK_GPIO_Port,UC__12VOK_Pin);
 8000656:	2120      	movs	r1, #32
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <update_uok+0x38>)
 800065a:	f7ff ffdb 	bl	8000614 <u_ok>
 800065e:	4603      	mov	r3, r0
 8000660:	71bb      	strb	r3, [r7, #6]
	if((res1 && res2)){
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d004      	beq.n	8000672 <update_uok+0x2e>
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <update_uok+0x2e>
		return 1;
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <update_uok+0x30>
	}
	return 0;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	48000c00 	.word	0x48000c00

08000680 <readPumpWarning>:
                      set ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

// these two functions might just need a pulse

uint8_t readPumpWarning(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	GPIO_PinState s = HAL_GPIO_ReadPin(UC_PUMP_WARNING_GPIO_Port, UC_PUMP_WARNING_Pin);
 8000686:	2110      	movs	r1, #16
 8000688:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <readPumpWarning+0x28>)
 800068a:	f003 fed1 	bl	8004430 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	return (s == GPIO_PIN_SET) ? 1u : 0u;
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d101      	bne.n	800069c <readPumpWarning+0x1c>
 8000698:	2301      	movs	r3, #1
 800069a:	e000      	b.n	800069e <readPumpWarning+0x1e>
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	48001000 	.word	0x48001000

080006ac <readPumpAlarm>:

uint8_t readPumpAlarm(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
	GPIO_PinState s = HAL_GPIO_ReadPin(UC_PUMP_ALARM_GPIO_Port, UC_PUMP_ALARM_Pin);
 80006b2:	2120      	movs	r1, #32
 80006b4:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <readPumpAlarm+0x28>)
 80006b6:	f003 febb 	bl	8004430 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	return (s == GPIO_PIN_SET) ? 1u : 0u;
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d101      	bne.n	80006c8 <readPumpAlarm+0x1c>
 80006c4:	2301      	movs	r3, #1
 80006c6:	e000      	b.n	80006ca <readPumpAlarm+0x1e>
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	48001000 	.word	0x48001000

080006d8 <delay_ms>:
	for(volatile uint32_t i=0; i<m; i++);				// volatile, damit nicht vom Compiler wegoptimiert
}

//Verz�gerung um n * 1ms
void delay_ms(uint16_t n)
{	HAL_Delay(n);
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fbbd 	bl	8003e64 <HAL_Delay>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <clamp16>:
		return 1;
	else
		return 0;
}

uint16_t clamp16(int32_t v) {
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
    if (v < 0)      return 0u;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	da01      	bge.n	8000704 <clamp16+0x12>
 8000700:	2300      	movs	r3, #0
 8000702:	e008      	b.n	8000716 <clamp16+0x24>
    if (v > 65535)  return 65535u;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800070a:	db02      	blt.n	8000712 <clamp16+0x20>
 800070c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000710:	e001      	b.n	8000716 <clamp16+0x24>
    return (uint16_t)v;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	b29b      	uxth	r3, r3
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <gb_sero_get>:

//----- GASBOX CONTROLLER -------------------------------------------------

// Gasbox (UART4, binary)
void gb_sero_get(void)
{
 8000724:	b598      	push	{r3, r4, r7, lr}
 8000726:	af00      	add	r7, sp, #0
    nzeichen = 0;
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <gb_sero_get+0x54>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
    while ((rb_rx_used(&uart4_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 800072e:	e00e      	b.n	800074e <gb_sero_get+0x2a>
        msg[nzeichen++] = (uint8_t)uartRB_Getc(&uart4_rb);
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <gb_sero_get+0x54>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	b2d1      	uxtb	r1, r2
 800073a:	4a0f      	ldr	r2, [pc, #60]	@ (8000778 <gb_sero_get+0x54>)
 800073c:	7011      	strb	r1, [r2, #0]
 800073e:	461c      	mov	r4, r3
 8000740:	480e      	ldr	r0, [pc, #56]	@ (800077c <gb_sero_get+0x58>)
 8000742:	f002 fb27 	bl	8002d94 <uartRB_Getc>
 8000746:	4603      	mov	r3, r0
 8000748:	461a      	mov	r2, r3
 800074a:	4b0d      	ldr	r3, [pc, #52]	@ (8000780 <gb_sero_get+0x5c>)
 800074c:	551a      	strb	r2, [r3, r4]
    while ((rb_rx_used(&uart4_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 800074e:	480b      	ldr	r0, [pc, #44]	@ (800077c <gb_sero_get+0x58>)
 8000750:	f002 fa5f 	bl	8002c12 <rb_rx_used>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	dd04      	ble.n	8000764 <gb_sero_get+0x40>
 800075a:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <gb_sero_get+0x54>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b0d      	cmp	r3, #13
 8000762:	d9e5      	bls.n	8000730 <gb_sero_get+0xc>
    }
    if (nzeichen) parse_binary_gasbox();
 8000764:	4b04      	ldr	r3, [pc, #16]	@ (8000778 <gb_sero_get+0x54>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <gb_sero_get+0x4e>
 800076e:	f000 f809 	bl	8000784 <parse_binary_gasbox>
}
 8000772:	bf00      	nop
 8000774:	bd98      	pop	{r3, r4, r7, pc}
 8000776:	bf00      	nop
 8000778:	2000008b 	.word	0x2000008b
 800077c:	2000093c 	.word	0x2000093c
 8000780:	2000007c 	.word	0x2000007c

08000784 <parse_binary_gasbox>:


// ---- parser  ----
static void parse_binary_gasbox(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
	uint8_t data;
	uint8_t ptr = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]

	do {
		switch (state) {
 800078e:	4b7a      	ldr	r3, [pc, #488]	@ (8000978 <parse_binary_gasbox+0x1f4>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b03      	cmp	r3, #3
 8000794:	f000 80a8 	beq.w	80008e8 <parse_binary_gasbox+0x164>
 8000798:	2b03      	cmp	r3, #3
 800079a:	f300 80e1 	bgt.w	8000960 <parse_binary_gasbox+0x1dc>
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d030      	beq.n	8000804 <parse_binary_gasbox+0x80>
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	f000 8098 	beq.w	80008d8 <parse_binary_gasbox+0x154>
 80007a8:	e0da      	b.n	8000960 <parse_binary_gasbox+0x1dc>
		case RMT_WAIT_FOR_PAKET_START: {
			// scan for DLE 'S'
			while (ptr < nzeichen) {
				data = msg[ptr++];
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	73fa      	strb	r2, [r7, #15]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b72      	ldr	r3, [pc, #456]	@ (800097c <parse_binary_gasbox+0x1f8>)
 80007b4:	5c9b      	ldrb	r3, [r3, r2]
 80007b6:	717b      	strb	r3, [r7, #5]
				if (dleFlag) {
 80007b8:	4b71      	ldr	r3, [pc, #452]	@ (8000980 <parse_binary_gasbox+0x1fc>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d01b      	beq.n	80007f8 <parse_binary_gasbox+0x74>
					// second control char after DLE
					if (data == GB_DLE) {
 80007c0:	797b      	ldrb	r3, [r7, #5]
 80007c2:	2b3d      	cmp	r3, #61	@ 0x3d
 80007c4:	d103      	bne.n	80007ce <parse_binary_gasbox+0x4a>
						// interpret as literal DLE
						dleFlag = 0;
 80007c6:	4b6e      	ldr	r3, [pc, #440]	@ (8000980 <parse_binary_gasbox+0x1fc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	e01a      	b.n	8000804 <parse_binary_gasbox+0x80>
						// (no payload yet in WAIT state)
					} else if (data == GB_SOT) {
 80007ce:	797b      	ldrb	r3, [r7, #5]
 80007d0:	2b53      	cmp	r3, #83	@ 0x53
 80007d2:	d10d      	bne.n	80007f0 <parse_binary_gasbox+0x6c>
						// start of frame
						lengthRx = 0;
 80007d4:	4b6b      	ldr	r3, [pc, #428]	@ (8000984 <parse_binary_gasbox+0x200>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
						checksum = 0;
 80007da:	4b6b      	ldr	r3, [pc, #428]	@ (8000988 <parse_binary_gasbox+0x204>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 80007e0:	4b67      	ldr	r3, [pc, #412]	@ (8000980 <parse_binary_gasbox+0x1fc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
						state = RMT_READ_PAKET;
 80007e6:	4b64      	ldr	r3, [pc, #400]	@ (8000978 <parse_binary_gasbox+0x1f4>)
 80007e8:	2202      	movs	r2, #2
 80007ea:	701a      	strb	r2, [r3, #0]
						break;
 80007ec:	bf00      	nop
					if (data == GB_DLE)
						dleFlag = 1;
				}
			}
		}
			break;
 80007ee:	e0b7      	b.n	8000960 <parse_binary_gasbox+0x1dc>
						dleFlag = 0;
 80007f0:	4b63      	ldr	r3, [pc, #396]	@ (8000980 <parse_binary_gasbox+0x1fc>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	e005      	b.n	8000804 <parse_binary_gasbox+0x80>
					if (data == GB_DLE)
 80007f8:	797b      	ldrb	r3, [r7, #5]
 80007fa:	2b3d      	cmp	r3, #61	@ 0x3d
 80007fc:	d102      	bne.n	8000804 <parse_binary_gasbox+0x80>
						dleFlag = 1;
 80007fe:	4b60      	ldr	r3, [pc, #384]	@ (8000980 <parse_binary_gasbox+0x1fc>)
 8000800:	2201      	movs	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
			while (ptr < nzeichen) {
 8000804:	4b61      	ldr	r3, [pc, #388]	@ (800098c <parse_binary_gasbox+0x208>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	7bfa      	ldrb	r2, [r7, #15]
 800080c:	429a      	cmp	r2, r3
 800080e:	d3cc      	bcc.n	80007aa <parse_binary_gasbox+0x26>
			break;
 8000810:	e0a6      	b.n	8000960 <parse_binary_gasbox+0x1dc>

		case RMT_READ_PAKET: {
			while (ptr < nzeichen) {
				data = msg[ptr++];
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	73fa      	strb	r2, [r7, #15]
 8000818:	461a      	mov	r2, r3
 800081a:	4b58      	ldr	r3, [pc, #352]	@ (800097c <parse_binary_gasbox+0x1f8>)
 800081c:	5c9b      	ldrb	r3, [r3, r2]
 800081e:	717b      	strb	r3, [r7, #5]

				// avoid runaway frames
				if (lengthRx > RMT_MAX_PAKET_LENGTH) {
 8000820:	4b58      	ldr	r3, [pc, #352]	@ (8000984 <parse_binary_gasbox+0x200>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b0e      	cmp	r3, #14
 8000826:	d906      	bls.n	8000836 <parse_binary_gasbox+0xb2>
					dleFlag = 0;
 8000828:	4b55      	ldr	r3, [pc, #340]	@ (8000980 <parse_binary_gasbox+0x1fc>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
					state = RMT_WAIT_FOR_PAKET_START;
 800082e:	4b52      	ldr	r3, [pc, #328]	@ (8000978 <parse_binary_gasbox+0x1f4>)
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
					break;
 8000834:	e057      	b.n	80008e6 <parse_binary_gasbox+0x162>
				}

				if (dleFlag) {
 8000836:	4b52      	ldr	r3, [pc, #328]	@ (8000980 <parse_binary_gasbox+0x1fc>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d034      	beq.n	80008a8 <parse_binary_gasbox+0x124>
					if (data == GB_DLE) {
 800083e:	797b      	ldrb	r3, [r7, #5]
 8000840:	2b3d      	cmp	r3, #61	@ 0x3d
 8000842:	d113      	bne.n	800086c <parse_binary_gasbox+0xe8>
						// stuffed DLE as data
						dleFlag = 0;
 8000844:	4b4e      	ldr	r3, [pc, #312]	@ (8000980 <parse_binary_gasbox+0x1fc>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
						bufferRx[lengthRx++] = GB_DLE;
 800084a:	4b4e      	ldr	r3, [pc, #312]	@ (8000984 <parse_binary_gasbox+0x200>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	b2d1      	uxtb	r1, r2
 8000852:	4a4c      	ldr	r2, [pc, #304]	@ (8000984 <parse_binary_gasbox+0x200>)
 8000854:	7011      	strb	r1, [r2, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	4b4d      	ldr	r3, [pc, #308]	@ (8000990 <parse_binary_gasbox+0x20c>)
 800085a:	213d      	movs	r1, #61	@ 0x3d
 800085c:	5499      	strb	r1, [r3, r2]
						checksum += GB_DLE;
 800085e:	4b4a      	ldr	r3, [pc, #296]	@ (8000988 <parse_binary_gasbox+0x204>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	333d      	adds	r3, #61	@ 0x3d
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b48      	ldr	r3, [pc, #288]	@ (8000988 <parse_binary_gasbox+0x204>)
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	e035      	b.n	80008d8 <parse_binary_gasbox+0x154>
					} else if (data == GB_SOT) {
 800086c:	797b      	ldrb	r3, [r7, #5]
 800086e:	2b53      	cmp	r3, #83	@ 0x53
 8000870:	d10c      	bne.n	800088c <parse_binary_gasbox+0x108>
						// unexpected new start → restart frame
						lengthRx = 0;
 8000872:	4b44      	ldr	r3, [pc, #272]	@ (8000984 <parse_binary_gasbox+0x200>)
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
						checksum = 0;
 8000878:	4b43      	ldr	r3, [pc, #268]	@ (8000988 <parse_binary_gasbox+0x204>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 800087e:	4b40      	ldr	r3, [pc, #256]	@ (8000980 <parse_binary_gasbox+0x1fc>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
						state = RMT_READ_PAKET;
 8000884:	4b3c      	ldr	r3, [pc, #240]	@ (8000978 <parse_binary_gasbox+0x1f4>)
 8000886:	2202      	movs	r2, #2
 8000888:	701a      	strb	r2, [r3, #0]
						break;
 800088a:	e02c      	b.n	80008e6 <parse_binary_gasbox+0x162>
					} else if (data == GB_EOT) {
 800088c:	797b      	ldrb	r3, [r7, #5]
 800088e:	2b45      	cmp	r3, #69	@ 0x45
 8000890:	d106      	bne.n	80008a0 <parse_binary_gasbox+0x11c>
						// proper trailer -> parse
						state = RMT_PARSE_PAKET;
 8000892:	4b39      	ldr	r3, [pc, #228]	@ (8000978 <parse_binary_gasbox+0x1f4>)
 8000894:	2203      	movs	r2, #3
 8000896:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000898:	4b39      	ldr	r3, [pc, #228]	@ (8000980 <parse_binary_gasbox+0x1fc>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
						break;
 800089e:	e022      	b.n	80008e6 <parse_binary_gasbox+0x162>
					} else {
						dleFlag = 0; // unknown after DLE -> ignore
 80008a0:	4b37      	ldr	r3, [pc, #220]	@ (8000980 <parse_binary_gasbox+0x1fc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	e017      	b.n	80008d8 <parse_binary_gasbox+0x154>
					}
				} else {
					if (data == GB_DLE) {
 80008a8:	797b      	ldrb	r3, [r7, #5]
 80008aa:	2b3d      	cmp	r3, #61	@ 0x3d
 80008ac:	d103      	bne.n	80008b6 <parse_binary_gasbox+0x132>
						dleFlag = 1;            // next is control
 80008ae:	4b34      	ldr	r3, [pc, #208]	@ (8000980 <parse_binary_gasbox+0x1fc>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	e010      	b.n	80008d8 <parse_binary_gasbox+0x154>
					} else {
						bufferRx[lengthRx++] = data;
 80008b6:	4b33      	ldr	r3, [pc, #204]	@ (8000984 <parse_binary_gasbox+0x200>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	b2d1      	uxtb	r1, r2
 80008be:	4a31      	ldr	r2, [pc, #196]	@ (8000984 <parse_binary_gasbox+0x200>)
 80008c0:	7011      	strb	r1, [r2, #0]
 80008c2:	4619      	mov	r1, r3
 80008c4:	4a32      	ldr	r2, [pc, #200]	@ (8000990 <parse_binary_gasbox+0x20c>)
 80008c6:	797b      	ldrb	r3, [r7, #5]
 80008c8:	5453      	strb	r3, [r2, r1]
						checksum += data;
 80008ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000988 <parse_binary_gasbox+0x204>)
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	797b      	ldrb	r3, [r7, #5]
 80008d0:	4413      	add	r3, r2
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000988 <parse_binary_gasbox+0x204>)
 80008d6:	701a      	strb	r2, [r3, #0]
			while (ptr < nzeichen) {
 80008d8:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <parse_binary_gasbox+0x208>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	7bfa      	ldrb	r2, [r7, #15]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d396      	bcc.n	8000812 <parse_binary_gasbox+0x8e>
					}
				}
			}
		}
			break;
 80008e4:	e03c      	b.n	8000960 <parse_binary_gasbox+0x1dc>
 80008e6:	e03b      	b.n	8000960 <parse_binary_gasbox+0x1dc>

		case RMT_PARSE_PAKET: {
		    // Expect 4 payload bytes + 1 checksum (net length 5)
		    if (lengthRx == 5) {
 80008e8:	4b26      	ldr	r3, [pc, #152]	@ (8000984 <parse_binary_gasbox+0x200>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b05      	cmp	r3, #5
 80008ee:	d12a      	bne.n	8000946 <parse_binary_gasbox+0x1c2>
		        uint8_t cmd    = bufferRx[0];
 80008f0:	4b27      	ldr	r3, [pc, #156]	@ (8000990 <parse_binary_gasbox+0x20c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	73bb      	strb	r3, [r7, #14]
		        uint8_t status = bufferRx[1];
 80008f6:	4b26      	ldr	r3, [pc, #152]	@ (8000990 <parse_binary_gasbox+0x20c>)
 80008f8:	785b      	ldrb	r3, [r3, #1]
 80008fa:	737b      	strb	r3, [r7, #13]
		        uint8_t pH     = bufferRx[2];
 80008fc:	4b24      	ldr	r3, [pc, #144]	@ (8000990 <parse_binary_gasbox+0x20c>)
 80008fe:	789b      	ldrb	r3, [r3, #2]
 8000900:	733b      	strb	r3, [r7, #12]
		        uint8_t pL     = bufferRx[3];
 8000902:	4b23      	ldr	r3, [pc, #140]	@ (8000990 <parse_binary_gasbox+0x20c>)
 8000904:	78db      	ldrb	r3, [r3, #3]
 8000906:	72fb      	strb	r3, [r7, #11]
		        uint8_t cks    = bufferRx[4];
 8000908:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <parse_binary_gasbox+0x20c>)
 800090a:	791b      	ldrb	r3, [r3, #4]
 800090c:	72bb      	strb	r3, [r7, #10]

		        // checksum over the 4 payload bytes
		        uint8_t sum = (uint8_t)(cmd + status + pH + pL);
 800090e:	7bba      	ldrb	r2, [r7, #14]
 8000910:	7b7b      	ldrb	r3, [r7, #13]
 8000912:	4413      	add	r3, r2
 8000914:	b2da      	uxtb	r2, r3
 8000916:	7b3b      	ldrb	r3, [r7, #12]
 8000918:	4413      	add	r3, r2
 800091a:	b2da      	uxtb	r2, r3
 800091c:	7afb      	ldrb	r3, [r7, #11]
 800091e:	4413      	add	r3, r2
 8000920:	727b      	strb	r3, [r7, #9]

		        if (sum == cks) {
 8000922:	7a7a      	ldrb	r2, [r7, #9]
 8000924:	7abb      	ldrb	r3, [r7, #10]
 8000926:	429a      	cmp	r2, r3
 8000928:	d10d      	bne.n	8000946 <parse_binary_gasbox+0x1c2>
		            uint16_t val = ((uint16_t)pH << 8) | pL;
 800092a:	7b3b      	ldrb	r3, [r7, #12]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21a      	sxth	r2, r3
 8000930:	7afb      	ldrb	r3, [r7, #11]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21b      	sxth	r3, r3
 8000938:	80fb      	strh	r3, [r7, #6]
		            // Publish to mailbox: if someone is waiting for this cmd, wake them.
		            gb_on_frame(cmd, status, val);
 800093a:	88fa      	ldrh	r2, [r7, #6]
 800093c:	7b79      	ldrb	r1, [r7, #13]
 800093e:	7bbb      	ldrb	r3, [r7, #14]
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f8d3 	bl	8000aec <gb_on_frame>
		        }
		        // else: bad checksum -> drop silently (or raise an error flag if you want)
		    }
		    // reset for next frame
		    state     = RMT_WAIT_FOR_PAKET_START;
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <parse_binary_gasbox+0x1f4>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
		    lengthRx  = 0;
 800094c:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <parse_binary_gasbox+0x200>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
		    checksum  = 0;
 8000952:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <parse_binary_gasbox+0x204>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
		    dleFlag   = 0;
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <parse_binary_gasbox+0x1fc>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
		} break;
 800095e:	bf00      	nop
		}
	} while (ptr < nzeichen);
 8000960:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <parse_binary_gasbox+0x208>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	7bfa      	ldrb	r2, [r7, #15]
 8000968:	429a      	cmp	r2, r3
 800096a:	f4ff af10 	bcc.w	800078e <parse_binary_gasbox+0xa>
}
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000000 	.word	0x20000000
 800097c:	2000007c 	.word	0x2000007c
 8000980:	2000009c 	.word	0x2000009c
 8000984:	2000009b 	.word	0x2000009b
 8000988:	2000009d 	.word	0x2000009d
 800098c:	2000008b 	.word	0x2000008b
 8000990:	2000008c 	.word	0x2000008c

08000994 <gb_sum8>:


static inline uint8_t gb_sum8(const uint8_t *p, int n){
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
    uint32_t s = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<n; ++i) s += p[i];
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	e00a      	b.n	80009be <gb_sum8+0x2a>
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4413      	add	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	3301      	adds	r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	dbf0      	blt.n	80009a8 <gb_sum8+0x14>
    return (uint8_t)s;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	b2db      	uxtb	r3, r3
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <gb_push_escaped>:

static inline void gb_push_escaped(uint8_t **wp, uint8_t b){
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	460b      	mov	r3, r1
 80009e0:	70fb      	strb	r3, [r7, #3]
    *(*wp)++ = b;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	1c59      	adds	r1, r3, #1
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	6011      	str	r1, [r2, #0]
 80009ec:	78fa      	ldrb	r2, [r7, #3]
 80009ee:	701a      	strb	r2, [r3, #0]
    if (b == GB_DLE) *(*wp)++ = b;  // double any DLE in-band
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	2b3d      	cmp	r3, #61	@ 0x3d
 80009f4:	d106      	bne.n	8000a04 <gb_push_escaped+0x2e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	1c59      	adds	r1, r3, #1
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	6011      	str	r1, [r2, #0]
 8000a00:	78fa      	ldrb	r2, [r7, #3]
 8000a02:	701a      	strb	r2, [r3, #0]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <gasbox_send>:
 * Build + queue one framed command to the gasbox on UART4.
 * payload = [ cmd, 0x00, param_H, param_L ] ; cks = sum(payload)
 * Returns 1 if queued, 0 if TX ring had no room.
 */
uint8_t gasbox_send(uint8_t cmd, uint16_t param)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	460a      	mov	r2, r1
 8000a1a:	71fb      	strb	r3, [r7, #7]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	80bb      	strh	r3, [r7, #4]
    uint8_t payload[4] = {
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	773b      	strb	r3, [r7, #28]
 8000a24:	2300      	movs	r3, #0
 8000a26:	777b      	strb	r3, [r7, #29]
        cmd,
        0x00,                               // reserved/status=0 in requests
        (uint8_t)(param >> 8),
 8000a28:	88bb      	ldrh	r3, [r7, #4]
 8000a2a:	0a1b      	lsrs	r3, r3, #8
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	b2db      	uxtb	r3, r3
    uint8_t payload[4] = {
 8000a30:	77bb      	strb	r3, [r7, #30]
        (uint8_t)(param & 0xFF)
 8000a32:	88bb      	ldrh	r3, [r7, #4]
 8000a34:	b2db      	uxtb	r3, r3
    uint8_t payload[4] = {
 8000a36:	77fb      	strb	r3, [r7, #31]
    };
    uint8_t cks = gb_sum8(payload, 4);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ffa8 	bl	8000994 <gb_sum8>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    // Worst case: 2 (DLE,S) + each of 5 bytes doubled + 2 (DLE,E) = 14
    uint8_t frame[16], *w = frame;
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	60bb      	str	r3, [r7, #8]

    *w++ = GB_DLE; *w++ = GB_SOT;
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	60ba      	str	r2, [r7, #8]
 8000a56:	223d      	movs	r2, #61	@ 0x3d
 8000a58:	701a      	strb	r2, [r3, #0]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	60ba      	str	r2, [r7, #8]
 8000a60:	2253      	movs	r2, #83	@ 0x53
 8000a62:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<4; ++i) gb_push_escaped(&w, payload[i]);
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a68:	e00d      	b.n	8000a86 <gasbox_send+0x76>
 8000a6a:	f107 021c 	add.w	r2, r7, #28
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a70:	4413      	add	r3, r2
 8000a72:	781a      	ldrb	r2, [r3, #0]
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ffab 	bl	80009d6 <gb_push_escaped>
 8000a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a82:	3301      	adds	r3, #1
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	ddee      	ble.n	8000a6a <gasbox_send+0x5a>
    gb_push_escaped(&w, cks);
 8000a8c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff9d 	bl	80009d6 <gb_push_escaped>
    *w++ = GB_DLE; *w++ = GB_EOT;
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	223d      	movs	r2, #61	@ 0x3d
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	60ba      	str	r2, [r7, #8]
 8000aac:	2245      	movs	r2, #69	@ 0x45
 8000aae:	701a      	strb	r2, [r3, #0]

    uint8_t len = (uint8_t)(w - frame);
 8000ab0:	68ba      	ldr	r2, [r7, #8]
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    // queue to UART4 ring
    if (!uartRB_Put(&uart4_rb, (char*)frame, len)) return 0;
 8000abc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4808      	ldr	r0, [pc, #32]	@ (8000ae8 <gasbox_send+0xd8>)
 8000ac8:	f002 f910 	bl	8002cec <uartRB_Put>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <gasbox_send+0xc6>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e003      	b.n	8000ade <gasbox_send+0xce>
    uartRB_KickTx(&uart4_rb);
 8000ad6:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <gasbox_send+0xd8>)
 8000ad8:	f002 f8c2 	bl	8002c60 <uartRB_KickTx>
    return 1;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3728      	adds	r7, #40	@ 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000093c 	.word	0x2000093c

08000aec <gb_on_frame>:
    volatile uint8_t have;
    GbReply          r;
} gb_sync = {0};

void gb_on_frame(uint8_t cmd, uint8_t status, uint16_t value)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	460b      	mov	r3, r1
 8000af8:	71bb      	strb	r3, [r7, #6]
 8000afa:	4613      	mov	r3, r2
 8000afc:	80bb      	strh	r3, [r7, #4]
    // deliver to a waiting xfer if it matches the command we sent
    if (gb_sync.waiting && gb_sync.expect_cmd == cmd) {
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <gb_on_frame+0x54>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d015      	beq.n	8000b34 <gb_on_frame+0x48>
 8000b08:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <gb_on_frame+0x54>)
 8000b0a:	785b      	ldrb	r3, [r3, #1]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	79fa      	ldrb	r2, [r7, #7]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d10f      	bne.n	8000b34 <gb_on_frame+0x48>
        gb_sync.r.cmd = cmd; gb_sync.r.status = status; gb_sync.r.value = value;
 8000b14:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <gb_on_frame+0x54>)
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	7113      	strb	r3, [r2, #4]
 8000b1a:	4a09      	ldr	r2, [pc, #36]	@ (8000b40 <gb_on_frame+0x54>)
 8000b1c:	79bb      	ldrb	r3, [r7, #6]
 8000b1e:	7153      	strb	r3, [r2, #5]
 8000b20:	4a07      	ldr	r2, [pc, #28]	@ (8000b40 <gb_on_frame+0x54>)
 8000b22:	88bb      	ldrh	r3, [r7, #4]
 8000b24:	80d3      	strh	r3, [r2, #6]
        gb_sync.have = 1;
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <gb_on_frame+0x54>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	709a      	strb	r2, [r3, #2]
        gb_sync.waiting = 0;
 8000b2c:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <gb_on_frame+0x54>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
        return;
 8000b32:	bf00      	nop
    }
    // else: unsolicited → raise events / z_set_error(...) as you like
}
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	200000a0 	.word	0x200000a0

08000b44 <gasbox_xfer>:
/**
 * Send one request and wait for its echo parsed by the always-on gb_sero_get().
 * Returns 1 on success (out filled), 0 on timeout or queue failure.
 */
uint8_t gasbox_xfer(uint8_t cmd, uint16_t param, GbReply *out, uint32_t timeout_ms)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60ba      	str	r2, [r7, #8]
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4603      	mov	r3, r0
 8000b50:	73fb      	strb	r3, [r7, #15]
 8000b52:	460b      	mov	r3, r1
 8000b54:	81bb      	strh	r3, [r7, #12]
    // only one outstanding transaction
    if (gb_sync.waiting) return 0;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <gasbox_xfer+0x90>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <gasbox_xfer+0x20>
 8000b60:	2300      	movs	r3, #0
 8000b62:	e032      	b.n	8000bca <gasbox_xfer+0x86>

    gb_sync.expect_cmd = cmd;
 8000b64:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd4 <gasbox_xfer+0x90>)
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	7053      	strb	r3, [r2, #1]
    gb_sync.have = 0;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <gasbox_xfer+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	709a      	strb	r2, [r3, #2]
    gb_sync.waiting = 1;
 8000b70:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <gasbox_xfer+0x90>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]

    if (!gasbox_send(cmd, param)) { gb_sync.waiting = 0; return 0; }
 8000b76:	89ba      	ldrh	r2, [r7, #12]
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff47 	bl	8000a10 <gasbox_send>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d104      	bne.n	8000b92 <gasbox_xfer+0x4e>
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <gasbox_xfer+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e01b      	b.n	8000bca <gasbox_xfer+0x86>

    uint32_t t0 = HAL_GetTick();
 8000b92:	f003 f95b 	bl	8003e4c <HAL_GetTick>
 8000b96:	6178      	str	r0, [r7, #20]
    while (!gb_sync.have) {
 8000b98:	e00c      	b.n	8000bb4 <gasbox_xfer+0x70>
        if ((HAL_GetTick() - t0) > timeout_ms) {
 8000b9a:	f003 f957 	bl	8003e4c <HAL_GetTick>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d204      	bcs.n	8000bb4 <gasbox_xfer+0x70>
            gb_sync.waiting = 0;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <gasbox_xfer+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
            return 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e00a      	b.n	8000bca <gasbox_xfer+0x86>
    while (!gb_sync.have) {
 8000bb4:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <gasbox_xfer+0x90>)
 8000bb6:	789b      	ldrb	r3, [r3, #2]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0ed      	beq.n	8000b9a <gasbox_xfer+0x56>
        }
        // do NOT call gb_sero_get() here; main loop owns it
    }
    *out = gb_sync.r;
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <gasbox_xfer+0x90>)
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	6010      	str	r0, [r2, #0]
    return 1;
 8000bc8:	2301      	movs	r3, #1
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000a0 	.word	0x200000a0

08000bd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	@ 0x30
 8000bdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bee:	4b50      	ldr	r3, [pc, #320]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	4a4f      	ldr	r2, [pc, #316]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfa:	4b4d      	ldr	r3, [pc, #308]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c06:	4b4a      	ldr	r3, [pc, #296]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0a:	4a49      	ldr	r2, [pc, #292]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c0c:	f043 0320 	orr.w	r3, r3, #32
 8000c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c12:	4b47      	ldr	r3, [pc, #284]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c16:	f003 0320 	and.w	r3, r3, #32
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b44      	ldr	r3, [pc, #272]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c22:	4a43      	ldr	r2, [pc, #268]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2a:	4b41      	ldr	r3, [pc, #260]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b3e      	ldr	r3, [pc, #248]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c42:	4b3b      	ldr	r3, [pc, #236]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b38      	ldr	r3, [pc, #224]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	4a37      	ldr	r2, [pc, #220]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5a:	4b35      	ldr	r3, [pc, #212]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c66:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	4a31      	ldr	r2, [pc, #196]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c72:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <MX_GPIO_Init+0x158>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, UC_PUMP_START_Pin|UC_PUMP_STOP_Pin|UC_PUMP_REMOTE_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	214c      	movs	r1, #76	@ 0x4c
 8000c82:	482c      	ldr	r0, [pc, #176]	@ (8000d34 <MX_GPIO_Init+0x15c>)
 8000c84:	f003 fbec 	bl	8004460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UC_CS_SPS_OUT_Pin|UC_CS_SPS_IN_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2106      	movs	r1, #6
 8000c8c:	482a      	ldr	r0, [pc, #168]	@ (8000d38 <MX_GPIO_Init+0x160>)
 8000c8e:	f003 fbe7 	bl	8004460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UC_HEARTBEAT_GPIO_Port, UC_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9c:	f003 fbe0 	bl	8004460 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = UC_PUMP_START_Pin|UC_PUMP_STOP_Pin|UC_PUMP_REMOTE_Pin;
 8000ca0:	234c      	movs	r3, #76	@ 0x4c
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481f      	ldr	r0, [pc, #124]	@ (8000d34 <MX_GPIO_Init+0x15c>)
 8000cb8:	f003 fa38 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = UC_PUMP_WARNING_Pin|UC_PUMP_ALARM_Pin;
 8000cbc:	2330      	movs	r3, #48	@ 0x30
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4819      	ldr	r0, [pc, #100]	@ (8000d34 <MX_GPIO_Init+0x15c>)
 8000cd0:	f003 fa2c 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UC_CS_SPS_OUT_Pin|UC_CS_SPS_IN_Pin;
 8000cd4:	2306      	movs	r3, #6
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4813      	ldr	r0, [pc, #76]	@ (8000d38 <MX_GPIO_Init+0x160>)
 8000cec:	f003 fa1e 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UC_HEARTBEAT_Pin;
 8000cf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UC_HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0c:	f003 fa0e 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = UC__5VOK_Pin|UC__12VOK_Pin;
 8000d10:	2330      	movs	r3, #48	@ 0x30
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	@ (8000d3c <MX_GPIO_Init+0x164>)
 8000d24:	f003 fa02 	bl	800412c <HAL_GPIO_Init>

}
 8000d28:	bf00      	nop
 8000d2a:	3730      	adds	r7, #48	@ 0x30
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021000 	.word	0x40021000
 8000d34:	48001000 	.word	0x48001000
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	48000c00 	.word	0x48000c00

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d44:	f003 f81d 	bl	8003d82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d48:	f000 f832 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4c:	f7ff ff44 	bl	8000bd8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d50:	f001 fa5e 	bl	8002210 <MX_SPI1_Init>
  MX_UART4_Init();
 8000d54:	f002 f84c 	bl	8002df0 <MX_UART4_Init>
  MX_UART5_Init();
 8000d58:	f002 f896 	bl	8002e88 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000d5c:	f002 f8e0 	bl	8002f20 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d60:	f002 f92a 	bl	8002fb8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d64:	f002 f976 	bl	8003054 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000d68:	f001 fd92 	bl	8002890 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //--- Stacks fuer die Anfragen an Zentrale und MatchingCube vorbereiten ------
  priolist_init();
 8000d6c:	f000 f950 	bl	8001010 <priolist_init>
  stacks_init();
 8000d70:	f001 face 	bl	8002310 <stacks_init>
  //--- Ergbenissstack fuer die Antworten von Zentrale und MatchingCube vorbereiten -------
  resultQueue_init();
 8000d74:	f001 f96e 	bl	8002054 <resultQueue_init>
  uart_initAll();
 8000d78:	f001 fea2 	bl	8002ac0 <uart_initAll>
  remote_init();
 8000d7c:	f000 f9b0 	bl	80010e0 <remote_init>
  zentrale_init();
 8000d80:	f002 fb70 	bl	8003464 <zentrale_init>

  delay_ms(500);
 8000d84:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d88:	f7ff fca6 	bl	80006d8 <delay_ms>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		hw_sero_get();
 8000d8c:	f7ff fc28 	bl	80005e0 <hw_sero_get>
		remote_sero_get();
 8000d90:	f000 f9d2 	bl	8001138 <remote_sero_get>
		gb_sero_get();
 8000d94:	f7ff fcc6 	bl	8000724 <gb_sero_get>
		result_get_sero();
 8000d98:	f001 fa0e 	bl	80021b8 <result_get_sero>

		zentrale();
 8000d9c:	f002 fba8 	bl	80034f0 <zentrale>

		result_get_sero();
 8000da0:	f001 fa0a 	bl	80021b8 <result_get_sero>
		hw_sero_set();
 8000da4:	f7ff fc23 	bl	80005ee <hw_sero_set>
		z_cmd_scheduler();
 8000da8:	f002 fdc8 	bl	800393c <z_cmd_scheduler>
		hw_sero_get();
 8000dac:	bf00      	nop
 8000dae:	e7ed      	b.n	8000d8c <main+0x4c>

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	@ 0x50
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0318 	add.w	r3, r7, #24
 8000dba:	2238      	movs	r2, #56	@ 0x38
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f007 f826 	bl	8007e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f003 fb76 	bl	80044c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ddc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000de0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de2:	2302      	movs	r3, #2
 8000de4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de6:	2303      	movs	r3, #3
 8000de8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000dee:	2328      	movs	r3, #40	@ 0x28
 8000df0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 fc12 	bl	800462c <HAL_RCC_OscConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000e0e:	f000 f818 	bl	8000e42 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e12:	230f      	movs	r3, #15
 8000e14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e16:	2303      	movs	r3, #3
 8000e18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2104      	movs	r1, #4
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 ff10 	bl	8004c50 <HAL_RCC_ClockConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e36:	f000 f804 	bl	8000e42 <Error_Handler>
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3750      	adds	r7, #80	@ 0x50
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e46:	b672      	cpsid	i
}
 8000e48:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4a:	bf00      	nop
 8000e4c:	e7fd      	b.n	8000e4a <Error_Handler+0x8>

08000e4e <priolist_push>:
uint8_t priolist_pop (priority_item prio_list[], uint8_t priolevel_header[], uint8_t *firstunused, uint8_t priolevel_data);


//--------------FUNKTIONSDEFINITIONS----------------------------
uint8_t priolist_push (priority_item prio_list[], uint8_t priolist_length,  uint8_t priolevel_header[], uint8_t *firstunused, uint8_t stack_index, uint8_t priolevel_data)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b088      	sub	sp, #32
 8000e52:	af02      	add	r7, sp, #8
 8000e54:	60f8      	str	r0, [r7, #12]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	72fb      	strb	r3, [r7, #11]

	uint8_t flag = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	75fb      	strb	r3, [r7, #23]

	if (*firstunused == NONEXT )            //wenn es keinen freien Platz in der prio_list gibt,
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2bff      	cmp	r3, #255	@ 0xff
 8000e68:	d102      	bne.n	8000e70 <priolist_push+0x22>
	{
		flag = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	75fb      	strb	r3, [r7, #23]
 8000e6e:	e034      	b.n	8000eda <priolist_push+0x8c>
	}
	else
	{
		switch (priolevel_data)
 8000e70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d022      	beq.n	8000ebe <priolist_push+0x70>
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	dc2e      	bgt.n	8000eda <priolist_push+0x8c>
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <priolist_push+0x38>
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d00e      	beq.n	8000ea2 <priolist_push+0x54>
 8000e84:	e029      	b.n	8000eda <priolist_push+0x8c>
		{
			case  PRIO_LEVEL0:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL0);
 8000e86:	7af9      	ldrb	r1, [r7, #11]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f000 f824 	bl	8000ee4 <priolist_node_insert>
			flag = 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	75fb      	strb	r3, [r7, #23]
			break;
 8000ea0:	e01b      	b.n	8000eda <priolist_push+0x8c>
			case  PRIO_LEVEL1:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL1);
 8000ea2:	7af9      	ldrb	r1, [r7, #11]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f000 f816 	bl	8000ee4 <priolist_node_insert>
			flag = 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	75fb      	strb	r3, [r7, #23]
			break;
 8000ebc:	e00d      	b.n	8000eda <priolist_push+0x8c>
			case  PRIO_LEVEL2:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL2);
 8000ebe:	7af9      	ldrb	r1, [r7, #11]
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f000 f808 	bl	8000ee4 <priolist_node_insert>
			flag = 1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	75fb      	strb	r3, [r7, #23]
			break;
 8000ed8:	bf00      	nop
		};
	};
	return flag;
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <priolist_node_insert>:

void priolist_node_insert(priority_item prio_list[], uint8_t priolist_length,  uint8_t priolevel_header[], uint8_t *unused_list, uint8_t stackindex, uint8_t priolevel)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	72fb      	strb	r3, [r7, #11]
	uint8_t act_index ;
	uint8_t last;

	act_index = *unused_list;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	75bb      	strb	r3, [r7, #22]
	*unused_list = prio_list[act_index].next;
 8000efa:	7dbb      	ldrb	r3, [r7, #22]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	4413      	add	r3, r2
 8000f02:	785a      	ldrb	r2, [r3, #1]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	701a      	strb	r2, [r3, #0]
	if (priolevel_header[priolevel] == NONEXT)                //Wenn die Prioritätsliste mit dem Level0 noch leer ist,
 8000f08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2bff      	cmp	r3, #255	@ 0xff
 8000f14:	d112      	bne.n	8000f3c <priolist_node_insert+0x58>
	{

		prio_list[act_index].stackindex = stackindex;
 8000f16:	7dbb      	ldrb	r3, [r7, #22]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f22:	701a      	strb	r2, [r3, #0]
		priolevel_header[priolevel] = act_index;
 8000f24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	7dba      	ldrb	r2, [r7, #22]
 8000f2e:	701a      	strb	r2, [r3, #0]
		prio_list[act_index].next = NONEXT;
 8000f30:	7dbb      	ldrb	r3, [r7, #22]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	22ff      	movs	r2, #255	@ 0xff
 8000f3a:	705a      	strb	r2, [r3, #1]
	};
	if (priolevel_header[priolevel] < priolist_length)    //Wenn die Prioritätsliste schon existiert,
 8000f3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	7afa      	ldrb	r2, [r7, #11]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d926      	bls.n	8000f9a <priolist_node_insert+0xb6>
	{
		prio_list[act_index].stackindex = stackindex;
 8000f4c:	7dbb      	ldrb	r3, [r7, #22]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f58:	701a      	strb	r2, [r3, #0]
		last =  priolevel_header[priolevel];                  //das erste Element der Prioritätsliste
 8000f5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	75fb      	strb	r3, [r7, #23]
		while (prio_list[last].next != NONEXT)               //Suche den Ende der Prioritätsliste, um das neue Element hineinzufügen
 8000f66:	e005      	b.n	8000f74 <priolist_node_insert+0x90>
		{
			last = prio_list[last].next;
 8000f68:	7dfb      	ldrb	r3, [r7, #23]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	75fb      	strb	r3, [r7, #23]
		while (prio_list[last].next != NONEXT)               //Suche den Ende der Prioritätsliste, um das neue Element hineinzufügen
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	785b      	ldrb	r3, [r3, #1]
 8000f7e:	2bff      	cmp	r3, #255	@ 0xff
 8000f80:	d1f2      	bne.n	8000f68 <priolist_node_insert+0x84>
		};
		prio_list[last].next = act_index;
 8000f82:	7dfb      	ldrb	r3, [r7, #23]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	4413      	add	r3, r2
 8000f8a:	7dba      	ldrb	r2, [r7, #22]
 8000f8c:	705a      	strb	r2, [r3, #1]
		prio_list[act_index].next = NONEXT;
 8000f8e:	7dbb      	ldrb	r3, [r7, #22]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	4413      	add	r3, r2
 8000f96:	22ff      	movs	r2, #255	@ 0xff
 8000f98:	705a      	strb	r2, [r3, #1]
	};
}
 8000f9a:	bf00      	nop
 8000f9c:	371c      	adds	r7, #28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <priolist_pop>:

uint8_t priolist_pop (priority_item prio_list[], uint8_t priolevel_header[], uint8_t *firstunused, uint8_t priolevel_data)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b087      	sub	sp, #28
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	70fb      	strb	r3, [r7, #3]
	uint8_t stack_index = NONEXT ;  //ungültige Wert, wenn die Prioritätsliste noch leer oder ein Fehler
 8000fb4:	23ff      	movs	r3, #255	@ 0xff
 8000fb6:	75fb      	strb	r3, [r7, #23]

	if (priolevel_header[priolevel_data] != NONEXT)
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2bff      	cmp	r3, #255	@ 0xff
 8000fc2:	d01d      	beq.n	8001000 <priolist_pop+0x5a>
	{
		uint8_t act_index = priolevel_header[priolevel_data];
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	75bb      	strb	r3, [r7, #22]
		stack_index = prio_list[act_index].stackindex;
 8000fce:	7dbb      	ldrb	r3, [r7, #22]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	75fb      	strb	r3, [r7, #23]
		priolevel_header[priolevel_data] = prio_list[act_index].next;
 8000fda:	7dbb      	ldrb	r3, [r7, #22]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	441a      	add	r2, r3
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	440b      	add	r3, r1
 8000fe8:	7852      	ldrb	r2, [r2, #1]
 8000fea:	701a      	strb	r2, [r3, #0]

		prio_list[act_index].next = *firstunused;
 8000fec:	7dbb      	ldrb	r3, [r7, #22]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	7812      	ldrb	r2, [r2, #0]
 8000ff8:	705a      	strb	r2, [r3, #1]
		*firstunused = act_index;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7dba      	ldrb	r2, [r7, #22]
 8000ffe:	701a      	strb	r2, [r3, #0]
	};

	return stack_index;
 8001000:	7dfb      	ldrb	r3, [r7, #23]
}
 8001002:	4618      	mov	r0, r3
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <priolist_init>:
//--------------FUNKTIONSDEKLARATIONS----------------------------------------------------------------------------------------
void priolist_init(void);

//--------------FUNKTIONSDEFINITIONS-----------------------------------------------------------------------------------------
void priolist_init(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]

	zpriolist_firstunused_index = 0;         //der gültige Wert liegt zwischen 0 und (Z_STACK_SIZE-1); wenn = NONEXT, d.h. keinen freien Platz in der Prioliste.
 800101a:	4b2b      	ldr	r3, [pc, #172]	@ (80010c8 <priolist_init+0xb8>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
	mcpriolist_firstunused_index = 0;		//der Wert liegt zwischen 0 und (MC_STACK_SIZE-1)
 8001020:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <priolist_init+0xbc>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]

	for (i = 0;  i < PRIO_LEVELS; i++)
 8001026:	2300      	movs	r3, #0
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	e00a      	b.n	8001042 <priolist_init+0x32>
	{
		z_priolevel_header[i] = NONEXT;    //d.h. es gibt noch keinen Befehl in der i-te. Prioritätsliste.
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	4a28      	ldr	r2, [pc, #160]	@ (80010d0 <priolist_init+0xc0>)
 8001030:	21ff      	movs	r1, #255	@ 0xff
 8001032:	54d1      	strb	r1, [r2, r3]

		mc_priolevel_header[i] = NONEXT;
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4a27      	ldr	r2, [pc, #156]	@ (80010d4 <priolist_init+0xc4>)
 8001038:	21ff      	movs	r1, #255	@ 0xff
 800103a:	54d1      	strb	r1, [r2, r3]
	for (i = 0;  i < PRIO_LEVELS; i++)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	3301      	adds	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d9f1      	bls.n	800102c <priolist_init+0x1c>

	}

	for ( i= 0; i < Z_STACK_SIZE; i++)
 8001048:	2300      	movs	r3, #0
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	e015      	b.n	800107a <priolist_init+0x6a>
	{
		if (i == (Z_STACK_SIZE-1) )
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b1d      	cmp	r3, #29
 8001052:	d106      	bne.n	8001062 <priolist_init+0x52>
		{
			z_priolist[i].next = NONEXT;
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4a20      	ldr	r2, [pc, #128]	@ (80010d8 <priolist_init+0xc8>)
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	22ff      	movs	r2, #255	@ 0xff
 800105e:	705a      	strb	r2, [r3, #1]
 8001060:	e008      	b.n	8001074 <priolist_init+0x64>
		}
		else
		{
			z_priolist[i].next = i+1;
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	79fa      	ldrb	r2, [r7, #7]
 8001066:	3201      	adds	r2, #1
 8001068:	b2d1      	uxtb	r1, r2
 800106a:	4a1b      	ldr	r2, [pc, #108]	@ (80010d8 <priolist_init+0xc8>)
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	460a      	mov	r2, r1
 8001072:	705a      	strb	r2, [r3, #1]
	for ( i= 0; i < Z_STACK_SIZE; i++)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	3301      	adds	r3, #1
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b1d      	cmp	r3, #29
 800107e:	d9e6      	bls.n	800104e <priolist_init+0x3e>
		};
	};

	for ( i= 0; i < MC_STACK_SIZE; i++)
 8001080:	2300      	movs	r3, #0
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	e015      	b.n	80010b2 <priolist_init+0xa2>
	{
		if (i == (MC_STACK_SIZE-1) )
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b13      	cmp	r3, #19
 800108a:	d106      	bne.n	800109a <priolist_init+0x8a>
		{
			mc_priolist[i].next = NONEXT;
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4a13      	ldr	r2, [pc, #76]	@ (80010dc <priolist_init+0xcc>)
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	22ff      	movs	r2, #255	@ 0xff
 8001096:	705a      	strb	r2, [r3, #1]
 8001098:	e008      	b.n	80010ac <priolist_init+0x9c>
		}
		else
		{
			mc_priolist[i].next = i+1;
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	3201      	adds	r2, #1
 80010a0:	b2d1      	uxtb	r1, r2
 80010a2:	4a0e      	ldr	r2, [pc, #56]	@ (80010dc <priolist_init+0xcc>)
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	460a      	mov	r2, r1
 80010aa:	705a      	strb	r2, [r3, #1]
	for ( i= 0; i < MC_STACK_SIZE; i++)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	3301      	adds	r3, #1
 80010b0:	71fb      	strb	r3, [r7, #7]
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b13      	cmp	r3, #19
 80010b6:	d9e6      	bls.n	8001086 <priolist_init+0x76>
		};
	};
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000113 	.word	0x20000113
 80010cc:	20000114 	.word	0x20000114
 80010d0:	2000010c 	.word	0x2000010c
 80010d4:	20000110 	.word	0x20000110
 80010d8:	200000a8 	.word	0x200000a8
 80010dc:	200000e4 	.word	0x200000e4

080010e0 <remote_init>:
void output_ascii(int32_t);
void Binary_Search(uint8_t ncmd, char *key, uint16_t *cmdindex);
void output_ascii_cmdack(uint8_t verbose_flg, uint8_t crlf_flg, uint8_t cmd_ack);

// ---- public API ----
void remote_init(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	nzeichen = 0;
 80010e4:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <remote_init+0x3c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
	state = RMT_WAIT_FOR_PAKET_START;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <remote_init+0x40>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
	lengthRx = 0;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <remote_init+0x44>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
	dleFlag = 0;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <remote_init+0x48>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <remote_init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
	memset((void*) msg, 0, sizeof(msg));
 8001102:	220f      	movs	r2, #15
 8001104:	2100      	movs	r1, #0
 8001106:	480a      	ldr	r0, [pc, #40]	@ (8001130 <remote_init+0x50>)
 8001108:	f006 fe82 	bl	8007e10 <memset>
	memset(bufferRx, 0, sizeof(bufferRx));
 800110c:	220f      	movs	r2, #15
 800110e:	2100      	movs	r1, #0
 8001110:	4808      	ldr	r0, [pc, #32]	@ (8001134 <remote_init+0x54>)
 8001112:	f006 fe7d 	bl	8007e10 <memset>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000012b 	.word	0x2000012b
 8001120:	20000001 	.word	0x20000001
 8001124:	2000013b 	.word	0x2000013b
 8001128:	2000013c 	.word	0x2000013c
 800112c:	2000013d 	.word	0x2000013d
 8001130:	2000011c 	.word	0x2000011c
 8001134:	2000012c 	.word	0x2000012c

08001138 <remote_sero_get>:

// Pull bytes from UART4 RX ring into msg[] and feed parser
void remote_sero_get(void) {
 8001138:	b598      	push	{r3, r4, r7, lr}
 800113a:	af00      	add	r7, sp, #0
	nzeichen = 0;
 800113c:	4b13      	ldr	r3, [pc, #76]	@ (800118c <remote_sero_get+0x54>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
	while ((rb_rx_used(&usart3_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8001142:	e00e      	b.n	8001162 <remote_sero_get+0x2a>
		msg[nzeichen++] = (uint8_t) uartRB_Getc(&usart3_rb);   // legacy getc()
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <remote_sero_get+0x54>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	b2d1      	uxtb	r1, r2
 800114e:	4a0f      	ldr	r2, [pc, #60]	@ (800118c <remote_sero_get+0x54>)
 8001150:	7011      	strb	r1, [r2, #0]
 8001152:	461c      	mov	r4, r3
 8001154:	480e      	ldr	r0, [pc, #56]	@ (8001190 <remote_sero_get+0x58>)
 8001156:	f001 fe1d 	bl	8002d94 <uartRB_Getc>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <remote_sero_get+0x5c>)
 8001160:	551a      	strb	r2, [r3, r4]
	while ((rb_rx_used(&usart3_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8001162:	480b      	ldr	r0, [pc, #44]	@ (8001190 <remote_sero_get+0x58>)
 8001164:	f001 fd55 	bl	8002c12 <rb_rx_used>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	dd04      	ble.n	8001178 <remote_sero_get+0x40>
 800116e:	4b07      	ldr	r3, [pc, #28]	@ (800118c <remote_sero_get+0x54>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b0d      	cmp	r3, #13
 8001176:	d9e5      	bls.n	8001144 <remote_sero_get+0xc>
	}
	if (nzeichen)
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <remote_sero_get+0x54>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <remote_sero_get+0x4e>
		parse_ascii();
 8001182:	f000 f809 	bl	8001198 <parse_ascii>
}
 8001186:	bf00      	nop
 8001188:	bd98      	pop	{r3, r4, r7, pc}
 800118a:	bf00      	nop
 800118c:	2000012b 	.word	0x2000012b
 8001190:	20000dec 	.word	0x20000dec
 8001194:	2000011c 	.word	0x2000011c

08001198 <parse_ascii>:

// das Paket in ASCII-Format analysieren und das Paket in den Stack einfügen.
void parse_ascii(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
	volatile static uint8_t pflag = 0;
	volatile static uint8_t eflag = 0;

	static uint8_t negativ_zahl = 0;

	uint8_t ptr = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	75fb      	strb	r3, [r7, #23]
	uint16_t cmd_index = BINARY_INDEX_MAX;
 80011a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a6:	82bb      	strh	r3, [r7, #20]

	stack_item stack_data;

	do {
		// wenn es ein Zeichen in UART1 Buffer gibt und die Automate nicht im Bearbeitungszustand ist
		if ((nzeichen > 0) && (a_state != proc_cmd)) {
 80011a8:	4b9c      	ldr	r3, [pc, #624]	@ (800141c <parse_ascii+0x284>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d01d      	beq.n	80011ee <parse_ascii+0x56>
 80011b2:	4b9b      	ldr	r3, [pc, #620]	@ (8001420 <parse_ascii+0x288>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d018      	beq.n	80011ee <parse_ascii+0x56>
			nc = msg[ptr++];				// hole ein Zeichen aus msg-buffer
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	75fa      	strb	r2, [r7, #23]
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b97      	ldr	r3, [pc, #604]	@ (8001424 <parse_ascii+0x28c>)
 80011c6:	5c9b      	ldrb	r3, [r3, r2]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b97      	ldr	r3, [pc, #604]	@ (8001428 <parse_ascii+0x290>)
 80011cc:	701a      	strb	r2, [r3, #0]
			if (echo == 1)// Wenn die Kommunikationsmode im Echo-Mode ist, wird es das Zeichen direkt wieder zurückgeben.
 80011ce:	4b97      	ldr	r3, [pc, #604]	@ (800142c <parse_ascii+0x294>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d10d      	bne.n	80011f4 <parse_ascii+0x5c>
					{
				char1[0] = nc;
 80011d8:	4b93      	ldr	r3, [pc, #588]	@ (8001428 <parse_ascii+0x290>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b94      	ldr	r3, [pc, #592]	@ (8001430 <parse_ascii+0x298>)
 80011e0:	701a      	strb	r2, [r3, #0]
				uartRB_Put(&usart3_rb, char1, 1);
 80011e2:	2201      	movs	r2, #1
 80011e4:	4992      	ldr	r1, [pc, #584]	@ (8001430 <parse_ascii+0x298>)
 80011e6:	4893      	ldr	r0, [pc, #588]	@ (8001434 <parse_ascii+0x29c>)
 80011e8:	f001 fd80 	bl	8002cec <uartRB_Put>
			if (echo == 1)// Wenn die Kommunikationsmode im Echo-Mode ist, wird es das Zeichen direkt wieder zurückgeben.
 80011ec:	e002      	b.n	80011f4 <parse_ascii+0x5c>
			}
		} else
			nc = 0;
 80011ee:	4b8e      	ldr	r3, [pc, #568]	@ (8001428 <parse_ascii+0x290>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]

		if (strlen(cmd) > 22)// Ascii-Kommando darf nicht länger als 22 Zeichen.
 80011f4:	4890      	ldr	r0, [pc, #576]	@ (8001438 <parse_ascii+0x2a0>)
 80011f6:	f7ff f81d 	bl	8000234 <strlen>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b16      	cmp	r3, #22
 80011fe:	d90e      	bls.n	800121e <parse_ascii+0x86>
				{
			strcpy(cmd, "");
 8001200:	4b8d      	ldr	r3, [pc, #564]	@ (8001438 <parse_ascii+0x2a0>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
			val = 0;
 8001206:	4b8d      	ldr	r3, [pc, #564]	@ (800143c <parse_ascii+0x2a4>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
			pflag = 0;
 800120c:	4b8c      	ldr	r3, [pc, #560]	@ (8001440 <parse_ascii+0x2a8>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
			eflag = 0;
 8001212:	4b8c      	ldr	r3, [pc, #560]	@ (8001444 <parse_ascii+0x2ac>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
			a_state = get_cmd;
 8001218:	4b81      	ldr	r3, [pc, #516]	@ (8001420 <parse_ascii+0x288>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
		}

		switch (a_state) {
 800121e:	4b80      	ldr	r3, [pc, #512]	@ (8001420 <parse_ascii+0x288>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	3b01      	subs	r3, #1
 8001226:	2b03      	cmp	r3, #3
 8001228:	f200 8301 	bhi.w	800182e <parse_ascii+0x696>
 800122c:	a201      	add	r2, pc, #4	@ (adr r2, 8001234 <parse_ascii+0x9c>)
 800122e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001232:	bf00      	nop
 8001234:	08001245 	.word	0x08001245
 8001238:	08001379 	.word	0x08001379
 800123c:	08001455 	.word	0x08001455
 8001240:	08001507 	.word	0x08001507
		case get_cmd:
			if (((nc >= 65) && (nc <= 90)) || ((nc >= 48) && (nc <= 57))
 8001244:	4b78      	ldr	r3, [pc, #480]	@ (8001428 <parse_ascii+0x290>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b40      	cmp	r3, #64	@ 0x40
 800124c:	d904      	bls.n	8001258 <parse_ascii+0xc0>
 800124e:	4b76      	ldr	r3, [pc, #472]	@ (8001428 <parse_ascii+0x290>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b5a      	cmp	r3, #90	@ 0x5a
 8001256:	d913      	bls.n	8001280 <parse_ascii+0xe8>
 8001258:	4b73      	ldr	r3, [pc, #460]	@ (8001428 <parse_ascii+0x290>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001260:	d904      	bls.n	800126c <parse_ascii+0xd4>
 8001262:	4b71      	ldr	r3, [pc, #452]	@ (8001428 <parse_ascii+0x290>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b39      	cmp	r3, #57	@ 0x39
 800126a:	d909      	bls.n	8001280 <parse_ascii+0xe8>
					|| (nc == 58) || (nc == 63)) {
 800126c:	4b6e      	ldr	r3, [pc, #440]	@ (8001428 <parse_ascii+0x290>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b3a      	cmp	r3, #58	@ 0x3a
 8001274:	d004      	beq.n	8001280 <parse_ascii+0xe8>
 8001276:	4b6c      	ldr	r3, [pc, #432]	@ (8001428 <parse_ascii+0x290>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b3f      	cmp	r3, #63	@ 0x3f
 800127e:	d109      	bne.n	8001294 <parse_ascii+0xfc>
				char1[0] = nc;				//verkette char1 an cmd
 8001280:	4b69      	ldr	r3, [pc, #420]	@ (8001428 <parse_ascii+0x290>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b6a      	ldr	r3, [pc, #424]	@ (8001430 <parse_ascii+0x298>)
 8001288:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 800128a:	4969      	ldr	r1, [pc, #420]	@ (8001430 <parse_ascii+0x298>)
 800128c:	486a      	ldr	r0, [pc, #424]	@ (8001438 <parse_ascii+0x2a0>)
 800128e:	f006 fdc7 	bl	8007e20 <strcat>
 8001292:	e070      	b.n	8001376 <parse_ascii+0x1de>
			} else if ((nc == 46) && (sloppy == 1)) {
 8001294:	4b64      	ldr	r3, [pc, #400]	@ (8001428 <parse_ascii+0x290>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b2e      	cmp	r3, #46	@ 0x2e
 800129c:	d10c      	bne.n	80012b8 <parse_ascii+0x120>
 800129e:	4b6a      	ldr	r3, [pc, #424]	@ (8001448 <parse_ascii+0x2b0>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d107      	bne.n	80012b8 <parse_ascii+0x120>
				char1[0] = 58;
 80012a8:	4b61      	ldr	r3, [pc, #388]	@ (8001430 <parse_ascii+0x298>)
 80012aa:	223a      	movs	r2, #58	@ 0x3a
 80012ac:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 80012ae:	4960      	ldr	r1, [pc, #384]	@ (8001430 <parse_ascii+0x298>)
 80012b0:	4861      	ldr	r0, [pc, #388]	@ (8001438 <parse_ascii+0x2a0>)
 80012b2:	f006 fdb5 	bl	8007e20 <strcat>
 80012b6:	e05e      	b.n	8001376 <parse_ascii+0x1de>
			} else if ((nc == 35) && (sloppy == 1)) {
 80012b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001428 <parse_ascii+0x290>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b23      	cmp	r3, #35	@ 0x23
 80012c0:	d10c      	bne.n	80012dc <parse_ascii+0x144>
 80012c2:	4b61      	ldr	r3, [pc, #388]	@ (8001448 <parse_ascii+0x2b0>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d107      	bne.n	80012dc <parse_ascii+0x144>
				char1[0] = 63;
 80012cc:	4b58      	ldr	r3, [pc, #352]	@ (8001430 <parse_ascii+0x298>)
 80012ce:	223f      	movs	r2, #63	@ 0x3f
 80012d0:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 80012d2:	4957      	ldr	r1, [pc, #348]	@ (8001430 <parse_ascii+0x298>)
 80012d4:	4858      	ldr	r0, [pc, #352]	@ (8001438 <parse_ascii+0x2a0>)
 80012d6:	f006 fda3 	bl	8007e20 <strcat>
 80012da:	e04c      	b.n	8001376 <parse_ascii+0x1de>
			} else if ((nc >= 97) && (nc <= 122)) {
 80012dc:	4b52      	ldr	r3, [pc, #328]	@ (8001428 <parse_ascii+0x290>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b60      	cmp	r3, #96	@ 0x60
 80012e4:	d910      	bls.n	8001308 <parse_ascii+0x170>
 80012e6:	4b50      	ldr	r3, [pc, #320]	@ (8001428 <parse_ascii+0x290>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b7a      	cmp	r3, #122	@ 0x7a
 80012ee:	d80b      	bhi.n	8001308 <parse_ascii+0x170>
				char1[0] = (nc - 32);
 80012f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001428 <parse_ascii+0x290>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	3b20      	subs	r3, #32
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001430 <parse_ascii+0x298>)
 80012fc:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 80012fe:	494c      	ldr	r1, [pc, #304]	@ (8001430 <parse_ascii+0x298>)
 8001300:	484d      	ldr	r0, [pc, #308]	@ (8001438 <parse_ascii+0x2a0>)
 8001302:	f006 fd8d 	bl	8007e20 <strcat>
 8001306:	e036      	b.n	8001376 <parse_ascii+0x1de>
			} else if (nc == 32) {
 8001308:	4b47      	ldr	r3, [pc, #284]	@ (8001428 <parse_ascii+0x290>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b20      	cmp	r3, #32
 8001310:	d10b      	bne.n	800132a <parse_ascii+0x192>
				if (strlen(cmd) > 0) {
 8001312:	4b49      	ldr	r3, [pc, #292]	@ (8001438 <parse_ascii+0x2a0>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 828d 	beq.w	8001836 <parse_ascii+0x69e>
					val = 0;
 800131c:	4b47      	ldr	r3, [pc, #284]	@ (800143c <parse_ascii+0x2a4>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
					a_state = get_sign;
 8001322:	4b3f      	ldr	r3, [pc, #252]	@ (8001420 <parse_ascii+0x288>)
 8001324:	2202      	movs	r2, #2
 8001326:	701a      	strb	r2, [r3, #0]
				a_state = proc_cmd;
			} else {
				if (nc != 0)
					strcat(cmd, "*");
			}
			break;
 8001328:	e285      	b.n	8001836 <parse_ascii+0x69e>
			} else if ((nc == 59) || ((nc == 13) && (sloppy == 1))) {
 800132a:	4b3f      	ldr	r3, [pc, #252]	@ (8001428 <parse_ascii+0x290>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b3b      	cmp	r3, #59	@ 0x3b
 8001332:	d009      	beq.n	8001348 <parse_ascii+0x1b0>
 8001334:	4b3c      	ldr	r3, [pc, #240]	@ (8001428 <parse_ascii+0x290>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b0d      	cmp	r3, #13
 800133c:	d108      	bne.n	8001350 <parse_ascii+0x1b8>
 800133e:	4b42      	ldr	r3, [pc, #264]	@ (8001448 <parse_ascii+0x2b0>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b01      	cmp	r3, #1
 8001346:	d103      	bne.n	8001350 <parse_ascii+0x1b8>
				a_state = proc_cmd;
 8001348:	4b35      	ldr	r3, [pc, #212]	@ (8001420 <parse_ascii+0x288>)
 800134a:	2204      	movs	r2, #4
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	e012      	b.n	8001376 <parse_ascii+0x1de>
				if (nc != 0)
 8001350:	4b35      	ldr	r3, [pc, #212]	@ (8001428 <parse_ascii+0x290>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 826d 	beq.w	8001836 <parse_ascii+0x69e>
					strcat(cmd, "*");
 800135c:	4836      	ldr	r0, [pc, #216]	@ (8001438 <parse_ascii+0x2a0>)
 800135e:	f7fe ff69 	bl	8000234 <strlen>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b34      	ldr	r3, [pc, #208]	@ (8001438 <parse_ascii+0x2a0>)
 8001368:	4413      	add	r3, r2
 800136a:	4938      	ldr	r1, [pc, #224]	@ (800144c <parse_ascii+0x2b4>)
 800136c:	461a      	mov	r2, r3
 800136e:	460b      	mov	r3, r1
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	8013      	strh	r3, [r2, #0]
			break;
 8001374:	e25f      	b.n	8001836 <parse_ascii+0x69e>
 8001376:	e25e      	b.n	8001836 <parse_ascii+0x69e>

		case get_sign:
			if (nc == 45) {
 8001378:	4b2b      	ldr	r3, [pc, #172]	@ (8001428 <parse_ascii+0x290>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b2d      	cmp	r3, #45	@ 0x2d
 8001380:	d106      	bne.n	8001390 <parse_ascii+0x1f8>
				negativ_zahl = 1;
 8001382:	4b33      	ldr	r3, [pc, #204]	@ (8001450 <parse_ascii+0x2b8>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
				a_state = get_val;
 8001388:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <parse_ascii+0x288>)
 800138a:	2203      	movs	r2, #3
 800138c:	701a      	strb	r2, [r3, #0]
				break;
 800138e:	e257      	b.n	8001840 <parse_ascii+0x6a8>
			} else if ((nc >= 48) && (nc <= 57) && (val < INT32_MAX)) //val < 1000000
 8001390:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <parse_ascii+0x290>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b2f      	cmp	r3, #47	@ 0x2f
 8001398:	d91f      	bls.n	80013da <parse_ascii+0x242>
 800139a:	4b23      	ldr	r3, [pc, #140]	@ (8001428 <parse_ascii+0x290>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b39      	cmp	r3, #57	@ 0x39
 80013a2:	d81a      	bhi.n	80013da <parse_ascii+0x242>
 80013a4:	4b25      	ldr	r3, [pc, #148]	@ (800143c <parse_ascii+0x2a4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d014      	beq.n	80013da <parse_ascii+0x242>
					{
				val = val * 10 + (nc - 48);
 80013b0:	4b22      	ldr	r3, [pc, #136]	@ (800143c <parse_ascii+0x2a4>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	461a      	mov	r2, r3
 80013be:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <parse_ascii+0x290>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	3b30      	subs	r3, #48	@ 0x30
 80013c6:	4413      	add	r3, r2
 80013c8:	4a1c      	ldr	r2, [pc, #112]	@ (800143c <parse_ascii+0x2a4>)
 80013ca:	6013      	str	r3, [r2, #0]
				pflag = 1;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <parse_ascii+0x2a8>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
				a_state = get_val;
 80013d2:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <parse_ascii+0x288>)
 80013d4:	2203      	movs	r2, #3
 80013d6:	701a      	strb	r2, [r3, #0]
				break;
 80013d8:	e232      	b.n	8001840 <parse_ascii+0x6a8>
			} else if ((nc == 59) || (nc == 13)) {
 80013da:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <parse_ascii+0x290>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b3b      	cmp	r3, #59	@ 0x3b
 80013e2:	d004      	beq.n	80013ee <parse_ascii+0x256>
 80013e4:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <parse_ascii+0x290>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b0d      	cmp	r3, #13
 80013ec:	d103      	bne.n	80013f6 <parse_ascii+0x25e>
				a_state = proc_cmd;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <parse_ascii+0x288>)
 80013f0:	2204      	movs	r2, #4
 80013f2:	701a      	strb	r2, [r3, #0]
					eflag = 1;
				}

			}
			;
			break;
 80013f4:	e221      	b.n	800183a <parse_ascii+0x6a2>
				if (nc != 0) {
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <parse_ascii+0x290>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 821c 	beq.w	800183a <parse_ascii+0x6a2>
					negativ_zahl = 0;
 8001402:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <parse_ascii+0x2b8>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
					val = 0;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <parse_ascii+0x2a4>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
					pflag = 0;
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <parse_ascii+0x2a8>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
					eflag = 1;
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <parse_ascii+0x2ac>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
			break;
 800141a:	e20e      	b.n	800183a <parse_ascii+0x6a2>
 800141c:	2000012b 	.word	0x2000012b
 8001420:	20000002 	.word	0x20000002
 8001424:	2000011c 	.word	0x2000011c
 8001428:	2000013e 	.word	0x2000013e
 800142c:	20000117 	.word	0x20000117
 8001430:	20000140 	.word	0x20000140
 8001434:	20000dec 	.word	0x20000dec
 8001438:	20000144 	.word	0x20000144
 800143c:	20000160 	.word	0x20000160
 8001440:	20000164 	.word	0x20000164
 8001444:	20000165 	.word	0x20000165
 8001448:	20000118 	.word	0x20000118
 800144c:	08008748 	.word	0x08008748
 8001450:	20000166 	.word	0x20000166
		case get_val:

			if ((nc >= 48) && (nc <= 57) && (val < INT32_MAX))   //val < 1000000
 8001454:	4b94      	ldr	r3, [pc, #592]	@ (80016a8 <parse_ascii+0x510>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b2f      	cmp	r3, #47	@ 0x2f
 800145c:	d91c      	bls.n	8001498 <parse_ascii+0x300>
 800145e:	4b92      	ldr	r3, [pc, #584]	@ (80016a8 <parse_ascii+0x510>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b39      	cmp	r3, #57	@ 0x39
 8001466:	d817      	bhi.n	8001498 <parse_ascii+0x300>
 8001468:	4b90      	ldr	r3, [pc, #576]	@ (80016ac <parse_ascii+0x514>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001470:	4293      	cmp	r3, r2
 8001472:	d011      	beq.n	8001498 <parse_ascii+0x300>
					{
				val = val * 10 + (nc - 48);
 8001474:	4b8d      	ldr	r3, [pc, #564]	@ (80016ac <parse_ascii+0x514>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	461a      	mov	r2, r3
 8001482:	4b89      	ldr	r3, [pc, #548]	@ (80016a8 <parse_ascii+0x510>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	3b30      	subs	r3, #48	@ 0x30
 800148a:	4413      	add	r3, r2
 800148c:	4a87      	ldr	r2, [pc, #540]	@ (80016ac <parse_ascii+0x514>)
 800148e:	6013      	str	r3, [r2, #0]
				pflag = 1;
 8001490:	4b87      	ldr	r3, [pc, #540]	@ (80016b0 <parse_ascii+0x518>)
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	e035      	b.n	8001504 <parse_ascii+0x36c>
			} else if ((nc == 59) || (nc == 13)) {
 8001498:	4b83      	ldr	r3, [pc, #524]	@ (80016a8 <parse_ascii+0x510>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b3b      	cmp	r3, #59	@ 0x3b
 80014a0:	d004      	beq.n	80014ac <parse_ascii+0x314>
 80014a2:	4b81      	ldr	r3, [pc, #516]	@ (80016a8 <parse_ascii+0x510>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b0d      	cmp	r3, #13
 80014aa:	d118      	bne.n	80014de <parse_ascii+0x346>
				if (negativ_zahl) {
 80014ac:	4b81      	ldr	r3, [pc, #516]	@ (80016b4 <parse_ascii+0x51c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d010      	beq.n	80014d6 <parse_ascii+0x33e>
					if (pflag == 0) {
 80014b4:	4b7e      	ldr	r3, [pc, #504]	@ (80016b0 <parse_ascii+0x518>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10b      	bne.n	80014d6 <parse_ascii+0x33e>
						negativ_zahl = 0;
 80014be:	4b7d      	ldr	r3, [pc, #500]	@ (80016b4 <parse_ascii+0x51c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
						val = 0;
 80014c4:	4b79      	ldr	r3, [pc, #484]	@ (80016ac <parse_ascii+0x514>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
						pflag = 0;
 80014ca:	4b79      	ldr	r3, [pc, #484]	@ (80016b0 <parse_ascii+0x518>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
						eflag = 1;
 80014d0:	4b79      	ldr	r3, [pc, #484]	@ (80016b8 <parse_ascii+0x520>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
					}
				}
				a_state = proc_cmd;
 80014d6:	4b79      	ldr	r3, [pc, #484]	@ (80016bc <parse_ascii+0x524>)
 80014d8:	2204      	movs	r2, #4
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	e012      	b.n	8001504 <parse_ascii+0x36c>
			} else {
				if (nc != 0) {
 80014de:	4b72      	ldr	r3, [pc, #456]	@ (80016a8 <parse_ascii+0x510>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 81aa 	beq.w	800183e <parse_ascii+0x6a6>
					negativ_zahl = 0;
 80014ea:	4b72      	ldr	r3, [pc, #456]	@ (80016b4 <parse_ascii+0x51c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
					val = 0;
 80014f0:	4b6e      	ldr	r3, [pc, #440]	@ (80016ac <parse_ascii+0x514>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
					pflag = 0;
 80014f6:	4b6e      	ldr	r3, [pc, #440]	@ (80016b0 <parse_ascii+0x518>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
					eflag = 1;
 80014fc:	4b6e      	ldr	r3, [pc, #440]	@ (80016b8 <parse_ascii+0x520>)
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
				}

			}
			break;
 8001502:	e19c      	b.n	800183e <parse_ascii+0x6a6>
 8001504:	e19b      	b.n	800183e <parse_ascii+0x6a6>

		case proc_cmd:

			if (eflag == 1) {
 8001506:	4b6c      	ldr	r3, [pc, #432]	@ (80016b8 <parse_ascii+0x520>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d103      	bne.n	8001518 <parse_ascii+0x380>
				ret = CMR_MALFORMATTEDCOMMAND;
 8001510:	4b6b      	ldr	r3, [pc, #428]	@ (80016c0 <parse_ascii+0x528>)
 8001512:	221f      	movs	r2, #31
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	e160      	b.n	80017da <parse_ascii+0x642>
			}
			//hier beginnt die Verarbeitung der Befehle zum Einstellen der Kommunikation
			else if (strcmp(cmd, "VERB") == 0) {
 8001518:	496a      	ldr	r1, [pc, #424]	@ (80016c4 <parse_ascii+0x52c>)
 800151a:	486b      	ldr	r0, [pc, #428]	@ (80016c8 <parse_ascii+0x530>)
 800151c:	f7fe fe80 	bl	8000220 <strcmp>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d12c      	bne.n	8001580 <parse_ascii+0x3e8>
				if (pflag == 0) {
 8001526:	4b62      	ldr	r3, [pc, #392]	@ (80016b0 <parse_ascii+0x518>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d103      	bne.n	8001538 <parse_ascii+0x3a0>
					ret = CMR_MISSINGPARAMETER;
 8001530:	4b63      	ldr	r3, [pc, #396]	@ (80016c0 <parse_ascii+0x528>)
 8001532:	220c      	movs	r2, #12
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	e150      	b.n	80017da <parse_ascii+0x642>
				} else {
					switch (val) {
 8001538:	4b5c      	ldr	r3, [pc, #368]	@ (80016ac <parse_ascii+0x514>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d014      	beq.n	800156a <parse_ascii+0x3d2>
 8001540:	2b02      	cmp	r3, #2
 8001542:	dc19      	bgt.n	8001578 <parse_ascii+0x3e0>
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <parse_ascii+0x3b6>
 8001548:	2b01      	cmp	r3, #1
 800154a:	d007      	beq.n	800155c <parse_ascii+0x3c4>
 800154c:	e014      	b.n	8001578 <parse_ascii+0x3e0>
					case 0:
						verbose = 0;
 800154e:	4b5f      	ldr	r3, [pc, #380]	@ (80016cc <parse_ascii+0x534>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001554:	4b5a      	ldr	r3, [pc, #360]	@ (80016c0 <parse_ascii+0x528>)
 8001556:	2280      	movs	r2, #128	@ 0x80
 8001558:	701a      	strb	r2, [r3, #0]
						break;
 800155a:	e13e      	b.n	80017da <parse_ascii+0x642>
					case 1:
						verbose = 1;
 800155c:	4b5b      	ldr	r3, [pc, #364]	@ (80016cc <parse_ascii+0x534>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001562:	4b57      	ldr	r3, [pc, #348]	@ (80016c0 <parse_ascii+0x528>)
 8001564:	2280      	movs	r2, #128	@ 0x80
 8001566:	701a      	strb	r2, [r3, #0]
						break;
 8001568:	e137      	b.n	80017da <parse_ascii+0x642>
					case 2:
						verbose = 2;
 800156a:	4b58      	ldr	r3, [pc, #352]	@ (80016cc <parse_ascii+0x534>)
 800156c:	2202      	movs	r2, #2
 800156e:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001570:	4b53      	ldr	r3, [pc, #332]	@ (80016c0 <parse_ascii+0x528>)
 8001572:	2280      	movs	r2, #128	@ 0x80
 8001574:	701a      	strb	r2, [r3, #0]
						break;
 8001576:	e130      	b.n	80017da <parse_ascii+0x642>
					default:
						ret = CMR_PARAMETERINVALID;
 8001578:	4b51      	ldr	r3, [pc, #324]	@ (80016c0 <parse_ascii+0x528>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
						break;
 800157e:	e12c      	b.n	80017da <parse_ascii+0x642>
					};
				}
			} else if (strcmp(cmd, "ECHO") == 0) {
 8001580:	4953      	ldr	r1, [pc, #332]	@ (80016d0 <parse_ascii+0x538>)
 8001582:	4851      	ldr	r0, [pc, #324]	@ (80016c8 <parse_ascii+0x530>)
 8001584:	f7fe fe4c 	bl	8000220 <strcmp>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d122      	bne.n	80015d4 <parse_ascii+0x43c>
				if (pflag == 0) {
 800158e:	4b48      	ldr	r3, [pc, #288]	@ (80016b0 <parse_ascii+0x518>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d103      	bne.n	80015a0 <parse_ascii+0x408>
					ret = CMR_MISSINGPARAMETER;
 8001598:	4b49      	ldr	r3, [pc, #292]	@ (80016c0 <parse_ascii+0x528>)
 800159a:	220c      	movs	r2, #12
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	e11c      	b.n	80017da <parse_ascii+0x642>
				} else {
					if (val == 0) {
 80015a0:	4b42      	ldr	r3, [pc, #264]	@ (80016ac <parse_ascii+0x514>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d106      	bne.n	80015b6 <parse_ascii+0x41e>
						echo = 0;
 80015a8:	4b4a      	ldr	r3, [pc, #296]	@ (80016d4 <parse_ascii+0x53c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 80015ae:	4b44      	ldr	r3, [pc, #272]	@ (80016c0 <parse_ascii+0x528>)
 80015b0:	2280      	movs	r2, #128	@ 0x80
 80015b2:	701a      	strb	r2, [r3, #0]
 80015b4:	e111      	b.n	80017da <parse_ascii+0x642>
					} else if (val == 1) {
 80015b6:	4b3d      	ldr	r3, [pc, #244]	@ (80016ac <parse_ascii+0x514>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d106      	bne.n	80015cc <parse_ascii+0x434>
						echo = 1;
 80015be:	4b45      	ldr	r3, [pc, #276]	@ (80016d4 <parse_ascii+0x53c>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 80015c4:	4b3e      	ldr	r3, [pc, #248]	@ (80016c0 <parse_ascii+0x528>)
 80015c6:	2280      	movs	r2, #128	@ 0x80
 80015c8:	701a      	strb	r2, [r3, #0]
 80015ca:	e106      	b.n	80017da <parse_ascii+0x642>
					} else {
						ret = CMR_PARAMETERINVALID;
 80015cc:	4b3c      	ldr	r3, [pc, #240]	@ (80016c0 <parse_ascii+0x528>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e102      	b.n	80017da <parse_ascii+0x642>
					}
				}
			} else if (strcmp(cmd, "CRLF") == 0) {
 80015d4:	4940      	ldr	r1, [pc, #256]	@ (80016d8 <parse_ascii+0x540>)
 80015d6:	483c      	ldr	r0, [pc, #240]	@ (80016c8 <parse_ascii+0x530>)
 80015d8:	f7fe fe22 	bl	8000220 <strcmp>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d138      	bne.n	8001654 <parse_ascii+0x4bc>
				if (pflag == 0) {
 80015e2:	4b33      	ldr	r3, [pc, #204]	@ (80016b0 <parse_ascii+0x518>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d103      	bne.n	80015f4 <parse_ascii+0x45c>
					ret = CMR_MISSINGPARAMETER;
 80015ec:	4b34      	ldr	r3, [pc, #208]	@ (80016c0 <parse_ascii+0x528>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	e0f2      	b.n	80017da <parse_ascii+0x642>
				} else {
					if (val == 0) {
 80015f4:	4b2d      	ldr	r3, [pc, #180]	@ (80016ac <parse_ascii+0x514>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d106      	bne.n	800160a <parse_ascii+0x472>
						crlf = 0;
 80015fc:	4b37      	ldr	r3, [pc, #220]	@ (80016dc <parse_ascii+0x544>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001602:	4b2f      	ldr	r3, [pc, #188]	@ (80016c0 <parse_ascii+0x528>)
 8001604:	2280      	movs	r2, #128	@ 0x80
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	e0e7      	b.n	80017da <parse_ascii+0x642>
					} else if (val == 1) {
 800160a:	4b28      	ldr	r3, [pc, #160]	@ (80016ac <parse_ascii+0x514>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d106      	bne.n	8001620 <parse_ascii+0x488>
						crlf = 1;
 8001612:	4b32      	ldr	r3, [pc, #200]	@ (80016dc <parse_ascii+0x544>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001618:	4b29      	ldr	r3, [pc, #164]	@ (80016c0 <parse_ascii+0x528>)
 800161a:	2280      	movs	r2, #128	@ 0x80
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	e0dc      	b.n	80017da <parse_ascii+0x642>
					} else if (val == 2) {
 8001620:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <parse_ascii+0x514>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d106      	bne.n	8001636 <parse_ascii+0x49e>
						crlf = 2;
 8001628:	4b2c      	ldr	r3, [pc, #176]	@ (80016dc <parse_ascii+0x544>)
 800162a:	2202      	movs	r2, #2
 800162c:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 800162e:	4b24      	ldr	r3, [pc, #144]	@ (80016c0 <parse_ascii+0x528>)
 8001630:	2280      	movs	r2, #128	@ 0x80
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	e0d1      	b.n	80017da <parse_ascii+0x642>
					} else if (val == 3) {
 8001636:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <parse_ascii+0x514>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d106      	bne.n	800164c <parse_ascii+0x4b4>
						crlf = 3;
 800163e:	4b27      	ldr	r3, [pc, #156]	@ (80016dc <parse_ascii+0x544>)
 8001640:	2203      	movs	r2, #3
 8001642:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001644:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <parse_ascii+0x528>)
 8001646:	2280      	movs	r2, #128	@ 0x80
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	e0c6      	b.n	80017da <parse_ascii+0x642>
					} else {
						ret = CMR_PARAMETERINVALID;
 800164c:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <parse_ascii+0x528>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	e0c2      	b.n	80017da <parse_ascii+0x642>
					}
				}
			} else if (strcmp(cmd, "SLOPPY") == 0) {
 8001654:	4922      	ldr	r1, [pc, #136]	@ (80016e0 <parse_ascii+0x548>)
 8001656:	481c      	ldr	r0, [pc, #112]	@ (80016c8 <parse_ascii+0x530>)
 8001658:	f7fe fde2 	bl	8000220 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d142      	bne.n	80016e8 <parse_ascii+0x550>
				if (pflag == 0) {
 8001662:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <parse_ascii+0x518>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d103      	bne.n	8001674 <parse_ascii+0x4dc>
					ret = CMR_MISSINGPARAMETER;
 800166c:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <parse_ascii+0x528>)
 800166e:	220c      	movs	r2, #12
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	e0b2      	b.n	80017da <parse_ascii+0x642>
				} else {
					if (val == 0) {
 8001674:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <parse_ascii+0x514>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <parse_ascii+0x4f2>
						sloppy = 0;
 800167c:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <parse_ascii+0x54c>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <parse_ascii+0x528>)
 8001684:	2280      	movs	r2, #128	@ 0x80
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e0a7      	b.n	80017da <parse_ascii+0x642>
					} else if (val == 1) {
 800168a:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <parse_ascii+0x514>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d106      	bne.n	80016a0 <parse_ascii+0x508>
						sloppy = 1;
 8001692:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <parse_ascii+0x54c>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <parse_ascii+0x528>)
 800169a:	2280      	movs	r2, #128	@ 0x80
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e09c      	b.n	80017da <parse_ascii+0x642>
					} else {
						ret = CMR_PARAMETERINVALID;
 80016a0:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <parse_ascii+0x528>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
 80016a6:	e098      	b.n	80017da <parse_ascii+0x642>
 80016a8:	2000013e 	.word	0x2000013e
 80016ac:	20000160 	.word	0x20000160
 80016b0:	20000164 	.word	0x20000164
 80016b4:	20000166 	.word	0x20000166
 80016b8:	20000165 	.word	0x20000165
 80016bc:	20000002 	.word	0x20000002
 80016c0:	20000167 	.word	0x20000167
 80016c4:	0800874c 	.word	0x0800874c
 80016c8:	20000144 	.word	0x20000144
 80016cc:	20000115 	.word	0x20000115
 80016d0:	08008754 	.word	0x08008754
 80016d4:	20000117 	.word	0x20000117
 80016d8:	0800875c 	.word	0x0800875c
 80016dc:	20000116 	.word	0x20000116
 80016e0:	08008764 	.word	0x08008764
 80016e4:	20000118 	.word	0x20000118
					}
				}
			} else if (strcmp(cmd, "IBL") == 0) {
 80016e8:	495b      	ldr	r1, [pc, #364]	@ (8001858 <parse_ascii+0x6c0>)
 80016ea:	485c      	ldr	r0, [pc, #368]	@ (800185c <parse_ascii+0x6c4>)
 80016ec:	f7fe fd98 	bl	8000220 <strcmp>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10f      	bne.n	8001716 <parse_ascii+0x57e>
				verbose = 2;
 80016f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001860 <parse_ascii+0x6c8>)
 80016f8:	2202      	movs	r2, #2
 80016fa:	701a      	strb	r2, [r3, #0]
				echo = 1;
 80016fc:	4b59      	ldr	r3, [pc, #356]	@ (8001864 <parse_ascii+0x6cc>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
				crlf = 3;
 8001702:	4b59      	ldr	r3, [pc, #356]	@ (8001868 <parse_ascii+0x6d0>)
 8001704:	2203      	movs	r2, #3
 8001706:	701a      	strb	r2, [r3, #0]
				sloppy = 1;
 8001708:	4b58      	ldr	r3, [pc, #352]	@ (800186c <parse_ascii+0x6d4>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
				ret = CMR_SUCCESSFULL;
 800170e:	4b58      	ldr	r3, [pc, #352]	@ (8001870 <parse_ascii+0x6d8>)
 8001710:	2280      	movs	r2, #128	@ 0x80
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	e061      	b.n	80017da <parse_ascii+0x642>
			} else if (strcmp(cmd, "") == 0) {
 8001716:	4b51      	ldr	r3, [pc, #324]	@ (800185c <parse_ascii+0x6c4>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d103      	bne.n	8001726 <parse_ascii+0x58e>
				ret = CMR_SEMICOLONONLY;
 800171e:	4b54      	ldr	r3, [pc, #336]	@ (8001870 <parse_ascii+0x6d8>)
 8001720:	22ff      	movs	r2, #255	@ 0xff
 8001722:	701a      	strb	r2, [r3, #0]
 8001724:	e059      	b.n	80017da <parse_ascii+0x642>
			}
			//die anderen ASCII-Befehle werden per Binäre-Suche-Funktion eine interne Befehlnummer und ein Attribut zugeordnet
			//und in den Stack eingefügt.
			else {
				Binary_Search(ASCII_CMD_MAX, cmd, &cmd_index);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	461a      	mov	r2, r3
 800172c:	494b      	ldr	r1, [pc, #300]	@ (800185c <parse_ascii+0x6c4>)
 800172e:	201d      	movs	r0, #29
 8001730:	f000 fb68 	bl	8001e04 <Binary_Search>
				//uart0_puts(cmd);
				//uart0_puti(cmd_index);

				if (cmd_index != BINARY_INDEX_MAX) {
 8001734:	8abb      	ldrh	r3, [r7, #20]
 8001736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800173a:	d04b      	beq.n	80017d4 <parse_ascii+0x63c>
					stack_data.cmd_sender = Q_RS232_ASCII;
 800173c:	2304      	movs	r3, #4
 800173e:	713b      	strb	r3, [r7, #4]
					stack_data.cmd_index = cmd_index;
 8001740:	8abb      	ldrh	r3, [r7, #20]
 8001742:	80fb      	strh	r3, [r7, #6]
					stack_data.cmd_ack = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	723b      	strb	r3, [r7, #8]
					stack_data.next = NONEXT;
 8001748:	23ff      	movs	r3, #255	@ 0xff
 800174a:	743b      	strb	r3, [r7, #16]
					stack_data.prio = PRIO_LEVEL1;
 800174c:	2301      	movs	r3, #1
 800174e:	747b      	strb	r3, [r7, #17]

					if (cmd_index & 1) {
 8001750:	8abb      	ldrh	r3, [r7, #20]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d02f      	beq.n	80017ba <parse_ascii+0x622>

						if ((pflag == 1)) {
 800175a:	4b46      	ldr	r3, [pc, #280]	@ (8001874 <parse_ascii+0x6dc>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d116      	bne.n	8001792 <parse_ascii+0x5fa>
							if (negativ_zahl) {
 8001764:	4b44      	ldr	r3, [pc, #272]	@ (8001878 <parse_ascii+0x6e0>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <parse_ascii+0x5de>
								stack_data.parameter = -val;
 800176c:	4b43      	ldr	r3, [pc, #268]	@ (800187c <parse_ascii+0x6e4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	425b      	negs	r3, r3
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	e002      	b.n	800177c <parse_ascii+0x5e4>
							} else {
								stack_data.parameter = val;
 8001776:	4b41      	ldr	r3, [pc, #260]	@ (800187c <parse_ascii+0x6e4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	60fb      	str	r3, [r7, #12]
							}

							stack_data.rwflg = WRITE;
 800177c:	2302      	movs	r3, #2
 800177e:	74bb      	strb	r3, [r7, #18]
							ret = stack_insert_sero(stack_data);
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001784:	f000 ff32 	bl	80025ec <stack_insert_sero>
 8001788:	4603      	mov	r3, r0
 800178a:	461a      	mov	r2, r3
 800178c:	4b38      	ldr	r3, [pc, #224]	@ (8001870 <parse_ascii+0x6d8>)
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e023      	b.n	80017da <parse_ascii+0x642>
							//uart0_puti(ret);
							//uart0_puti(stack_data.cmd_index);

						} else if (cmd_index == CMD_RESET_ERROR) {
 8001792:	8abb      	ldrh	r3, [r7, #20]
 8001794:	2b09      	cmp	r3, #9
 8001796:	d10c      	bne.n	80017b2 <parse_ascii+0x61a>
							stack_data.parameter = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
							stack_data.rwflg = WRITE;
 800179c:	2302      	movs	r3, #2
 800179e:	74bb      	strb	r3, [r7, #18]
							ret = stack_insert_sero(stack_data);
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a4:	f000 ff22 	bl	80025ec <stack_insert_sero>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b30      	ldr	r3, [pc, #192]	@ (8001870 <parse_ascii+0x6d8>)
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	e013      	b.n	80017da <parse_ascii+0x642>
						} else {
							{
								ret = CMR_MISSINGPARAMETER;
 80017b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001870 <parse_ascii+0x6d8>)
 80017b4:	220c      	movs	r2, #12
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e00f      	b.n	80017da <parse_ascii+0x642>
							}
						};
					} else  //Lese-Operation
					{
						stack_data.parameter = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
						stack_data.rwflg = READ;
 80017be:	2301      	movs	r3, #1
 80017c0:	74bb      	strb	r3, [r7, #18]
						ret = stack_insert_sero(stack_data);
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017c6:	f000 ff11 	bl	80025ec <stack_insert_sero>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b28      	ldr	r3, [pc, #160]	@ (8001870 <parse_ascii+0x6d8>)
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	e002      	b.n	80017da <parse_ascii+0x642>
					};

				} else //Falls cmd_index = ASCII_CMD_MAX, d.h. der Befehl ist ungültig.
				{
					ret = CMR_UNKNOWNCOMMAND;
 80017d4:	4b26      	ldr	r3, [pc, #152]	@ (8001870 <parse_ascii+0x6d8>)
 80017d6:	2206      	movs	r2, #6
 80017d8:	701a      	strb	r2, [r3, #0]
				};
			}
			;

			if (ret != STACK_CMDINSTACK) {
 80017da:	4b25      	ldr	r3, [pc, #148]	@ (8001870 <parse_ascii+0x6d8>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b11      	cmp	r3, #17
 80017e2:	d00b      	beq.n	80017fc <parse_ascii+0x664>
				output_ascii_cmdack(verbose, crlf, ret);
 80017e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <parse_ascii+0x6c8>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001868 <parse_ascii+0x6d0>)
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	b2d1      	uxtb	r1, r2
 80017f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001870 <parse_ascii+0x6d8>)
 80017f2:	7812      	ldrb	r2, [r2, #0]
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f8de 	bl	80019b8 <output_ascii_cmdack>
			}
			;

			uartRB_KickTx(&usart3_rb);
 80017fc:	4820      	ldr	r0, [pc, #128]	@ (8001880 <parse_ascii+0x6e8>)
 80017fe:	f001 fa2f 	bl	8002c60 <uartRB_KickTx>
			strcpy(cmd, "");
 8001802:	4b16      	ldr	r3, [pc, #88]	@ (800185c <parse_ascii+0x6c4>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
			val = 0;
 8001808:	4b1c      	ldr	r3, [pc, #112]	@ (800187c <parse_ascii+0x6e4>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
			ret = 0;
 800180e:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <parse_ascii+0x6d8>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
			pflag = 0;
 8001814:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <parse_ascii+0x6dc>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
			eflag = 0;
 800181a:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <parse_ascii+0x6ec>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
			negativ_zahl = 0;
 8001820:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <parse_ascii+0x6e0>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]

			a_state = get_cmd;
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <parse_ascii+0x6f0>)
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
			break;
 800182c:	e008      	b.n	8001840 <parse_ascii+0x6a8>

		default:
			a_state = get_cmd;
 800182e:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <parse_ascii+0x6f0>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
			break;
 8001834:	e004      	b.n	8001840 <parse_ascii+0x6a8>
			break;
 8001836:	bf00      	nop
 8001838:	e002      	b.n	8001840 <parse_ascii+0x6a8>
			break;
 800183a:	bf00      	nop
 800183c:	e000      	b.n	8001840 <parse_ascii+0x6a8>
			break;
 800183e:	bf00      	nop

		//	char1[0]=nc;
		//  if(nzeichen >0)	uart1_put(char1, 1);
		//	versandstart1();

	} while (ptr < nzeichen);
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <parse_ascii+0x6f4>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	7dfa      	ldrb	r2, [r7, #23]
 8001848:	429a      	cmp	r2, r3
 800184a:	f4ff acad 	bcc.w	80011a8 <parse_ascii+0x10>
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	0800876c 	.word	0x0800876c
 800185c:	20000144 	.word	0x20000144
 8001860:	20000115 	.word	0x20000115
 8001864:	20000117 	.word	0x20000117
 8001868:	20000116 	.word	0x20000116
 800186c:	20000118 	.word	0x20000118
 8001870:	20000167 	.word	0x20000167
 8001874:	20000164 	.word	0x20000164
 8001878:	20000166 	.word	0x20000166
 800187c:	20000160 	.word	0x20000160
 8001880:	20000dec 	.word	0x20000dec
 8001884:	20000165 	.word	0x20000165
 8001888:	20000002 	.word	0x20000002
 800188c:	2000012b 	.word	0x2000012b

08001890 <serialSendAnswer>:

void serialSendAnswer(uint8_t *message) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t n = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	77bb      	strb	r3, [r7, #30]
	uint8_t checksum = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	777b      	strb	r3, [r7, #29]
	char buffer[RMT_MAX_PAKET_LENGTH + 1];

	if ((message[2] == 0x00) || (message[2] == 0x02) || (message[2] == 0x03)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3302      	adds	r3, #2
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00e      	beq.n	80018c8 <serialSendAnswer+0x38>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3302      	adds	r3, #2
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d009      	beq.n	80018c8 <serialSendAnswer+0x38>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3302      	adds	r3, #2
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d004      	beq.n	80018c8 <serialSendAnswer+0x38>
			|| (message[2] == 0x0A)) //für die Kompabilität vom altem MatchingCube-Programm. später zu löschen
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3302      	adds	r3, #2
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b0a      	cmp	r3, #10
 80018c6:	d108      	bne.n	80018da <serialSendAnswer+0x4a>
			{
		message[2] |= 0x80;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3302      	adds	r3, #2
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3302      	adds	r3, #2
 80018d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]
	}

	buffer[n++] = RMT_DLE;
 80018da:	7fbb      	ldrb	r3, [r7, #30]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	77ba      	strb	r2, [r7, #30]
 80018e0:	3320      	adds	r3, #32
 80018e2:	443b      	add	r3, r7
 80018e4:	223d      	movs	r2, #61	@ 0x3d
 80018e6:	f803 2c14 	strb.w	r2, [r3, #-20]
	buffer[n++] = RMT_SOT;
 80018ea:	7fbb      	ldrb	r3, [r7, #30]
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	77ba      	strb	r2, [r7, #30]
 80018f0:	3320      	adds	r3, #32
 80018f2:	443b      	add	r3, r7
 80018f4:	2253      	movs	r2, #83	@ 0x53
 80018f6:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < (CMR_DATAPAKET_LENGTH - 1); i++) {
 80018fa:	2300      	movs	r3, #0
 80018fc:	77fb      	strb	r3, [r7, #31]
 80018fe:	e025      	b.n	800194c <serialSendAnswer+0xbc>
		buffer[n++] = message[i];
 8001900:	7ffb      	ldrb	r3, [r7, #31]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	441a      	add	r2, r3
 8001906:	7fbb      	ldrb	r3, [r7, #30]
 8001908:	1c59      	adds	r1, r3, #1
 800190a:	77b9      	strb	r1, [r7, #30]
 800190c:	7812      	ldrb	r2, [r2, #0]
 800190e:	3320      	adds	r3, #32
 8001910:	443b      	add	r3, r7
 8001912:	f803 2c14 	strb.w	r2, [r3, #-20]
		if (message[i] == RMT_DLE) {
 8001916:	7ffb      	ldrb	r3, [r7, #31]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b3d      	cmp	r3, #61	@ 0x3d
 8001920:	d10a      	bne.n	8001938 <serialSendAnswer+0xa8>
			buffer[n++] = message[i];
 8001922:	7ffb      	ldrb	r3, [r7, #31]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	441a      	add	r2, r3
 8001928:	7fbb      	ldrb	r3, [r7, #30]
 800192a:	1c59      	adds	r1, r3, #1
 800192c:	77b9      	strb	r1, [r7, #30]
 800192e:	7812      	ldrb	r2, [r2, #0]
 8001930:	3320      	adds	r3, #32
 8001932:	443b      	add	r3, r7
 8001934:	f803 2c14 	strb.w	r2, [r3, #-20]
			// Die Prüfsumme erstreckt sich nur noch über die NETTO-Payload!
			//checksum += message[i];
		}
		checksum += message[i];
 8001938:	7ffb      	ldrb	r3, [r7, #31]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	781a      	ldrb	r2, [r3, #0]
 8001940:	7f7b      	ldrb	r3, [r7, #29]
 8001942:	4413      	add	r3, r2
 8001944:	777b      	strb	r3, [r7, #29]
	for (i = 0; i < (CMR_DATAPAKET_LENGTH - 1); i++) {
 8001946:	7ffb      	ldrb	r3, [r7, #31]
 8001948:	3301      	adds	r3, #1
 800194a:	77fb      	strb	r3, [r7, #31]
 800194c:	7ffb      	ldrb	r3, [r7, #31]
 800194e:	2b06      	cmp	r3, #6
 8001950:	d9d6      	bls.n	8001900 <serialSendAnswer+0x70>
	}
	buffer[n++] = checksum;
 8001952:	7fbb      	ldrb	r3, [r7, #30]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	77ba      	strb	r2, [r7, #30]
 8001958:	3320      	adds	r3, #32
 800195a:	443b      	add	r3, r7
 800195c:	7f7a      	ldrb	r2, [r7, #29]
 800195e:	f803 2c14 	strb.w	r2, [r3, #-20]
	if (checksum == RMT_DLE) {
 8001962:	7f7b      	ldrb	r3, [r7, #29]
 8001964:	2b3d      	cmp	r3, #61	@ 0x3d
 8001966:	d107      	bne.n	8001978 <serialSendAnswer+0xe8>
		buffer[n++] = checksum;
 8001968:	7fbb      	ldrb	r3, [r7, #30]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	77ba      	strb	r2, [r7, #30]
 800196e:	3320      	adds	r3, #32
 8001970:	443b      	add	r3, r7
 8001972:	7f7a      	ldrb	r2, [r7, #29]
 8001974:	f803 2c14 	strb.w	r2, [r3, #-20]
	}
	buffer[n++] = RMT_DLE;
 8001978:	7fbb      	ldrb	r3, [r7, #30]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	77ba      	strb	r2, [r7, #30]
 800197e:	3320      	adds	r3, #32
 8001980:	443b      	add	r3, r7
 8001982:	223d      	movs	r2, #61	@ 0x3d
 8001984:	f803 2c14 	strb.w	r2, [r3, #-20]
	buffer[n++] = RMT_EOT;
 8001988:	7fbb      	ldrb	r3, [r7, #30]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	77ba      	strb	r2, [r7, #30]
 800198e:	3320      	adds	r3, #32
 8001990:	443b      	add	r3, r7
 8001992:	2245      	movs	r2, #69	@ 0x45
 8001994:	f803 2c14 	strb.w	r2, [r3, #-20]

	uartRB_Put(&usart3_rb, buffer, n);
 8001998:	7fba      	ldrb	r2, [r7, #30]
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	4619      	mov	r1, r3
 80019a0:	4804      	ldr	r0, [pc, #16]	@ (80019b4 <serialSendAnswer+0x124>)
 80019a2:	f001 f9a3 	bl	8002cec <uartRB_Put>
	uartRB_KickTx(&usart3_rb);
 80019a6:	4803      	ldr	r0, [pc, #12]	@ (80019b4 <serialSendAnswer+0x124>)
 80019a8:	f001 f95a 	bl	8002c60 <uartRB_KickTx>
}
 80019ac:	bf00      	nop
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000dec 	.word	0x20000dec

080019b8 <output_ascii_cmdack>:

void output_ascii_cmdack(uint8_t verbose_flg, uint8_t crlf_flg, uint8_t cmd_ack) {
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b09c      	sub	sp, #112	@ 0x70
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
 80019c2:	460b      	mov	r3, r1
 80019c4:	71bb      	strb	r3, [r7, #6]
 80019c6:	4613      	mov	r3, r2
 80019c8:	717b      	strb	r3, [r7, #5]

	if (verbose_flg > 0) {
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 81e3 	beq.w	8001d98 <output_ascii_cmdack+0x3e0>
		if (cmd_ack == CMR_SUCCESSFULL) {
 80019d2:	797b      	ldrb	r3, [r7, #5]
 80019d4:	2b80      	cmp	r3, #128	@ 0x80
 80019d6:	d105      	bne.n	80019e4 <output_ascii_cmdack+0x2c>
			uartRB_Put(&usart3_rb, ">OK;", 4);
 80019d8:	2204      	movs	r2, #4
 80019da:	49ba      	ldr	r1, [pc, #744]	@ (8001cc4 <output_ascii_cmdack+0x30c>)
 80019dc:	48ba      	ldr	r0, [pc, #744]	@ (8001cc8 <output_ascii_cmdack+0x310>)
 80019de:	f001 f985 	bl	8002cec <uartRB_Put>
 80019e2:	e1e8      	b.n	8001db6 <output_ascii_cmdack+0x3fe>
		} else if (cmd_ack == CMR_SEMICOLONONLY) {
 80019e4:	797b      	ldrb	r3, [r7, #5]
 80019e6:	2bff      	cmp	r3, #255	@ 0xff
 80019e8:	d105      	bne.n	80019f6 <output_ascii_cmdack+0x3e>
			uartRB_Put(&usart3_rb, ";", 1);
 80019ea:	2201      	movs	r2, #1
 80019ec:	49b7      	ldr	r1, [pc, #732]	@ (8001ccc <output_ascii_cmdack+0x314>)
 80019ee:	48b6      	ldr	r0, [pc, #728]	@ (8001cc8 <output_ascii_cmdack+0x310>)
 80019f0:	f001 f97c 	bl	8002cec <uartRB_Put>
 80019f4:	e1df      	b.n	8001db6 <output_ascii_cmdack+0x3fe>
		} else {
			if (verbose_flg == 1) {
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d143      	bne.n	8001a84 <output_ascii_cmdack+0xcc>
				char tmp[10];
				char tmp2[12];
				sprintf(tmp, "%3.3u", (cmd_ack & 0x7F));
 80019fc:	797b      	ldrb	r3, [r7, #5]
 80019fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a02:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a06:	49b2      	ldr	r1, [pc, #712]	@ (8001cd0 <output_ascii_cmdack+0x318>)
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f006 f9e1 	bl	8007dd0 <siprintf>

				if (cmd_ack > 128) {
 8001a0e:	797b      	ldrb	r3, [r7, #5]
 8001a10:	2b80      	cmp	r3, #128	@ 0x80
 8001a12:	d909      	bls.n	8001a28 <output_ascii_cmdack+0x70>
					strcpy(tmp2, ">W");
 8001a14:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a18:	4aae      	ldr	r2, [pc, #696]	@ (8001cd4 <output_ascii_cmdack+0x31c>)
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	8019      	strh	r1, [r3, #0]
 8001a20:	3302      	adds	r3, #2
 8001a22:	0c12      	lsrs	r2, r2, #16
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	e008      	b.n	8001a3a <output_ascii_cmdack+0x82>
				} else {
					strcpy(tmp2, ">E");
 8001a28:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a2c:	4aaa      	ldr	r2, [pc, #680]	@ (8001cd8 <output_ascii_cmdack+0x320>)
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	4611      	mov	r1, r2
 8001a32:	8019      	strh	r1, [r3, #0]
 8001a34:	3302      	adds	r3, #2
 8001a36:	0c12      	lsrs	r2, r2, #16
 8001a38:	701a      	strb	r2, [r3, #0]
				}
				strcat(tmp2, tmp);
 8001a3a:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001a3e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f006 f9eb 	bl	8007e20 <strcat>
				strcat(tmp2, ";");
 8001a4a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fbf0 	bl	8000234 <strlen>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a5c:	4413      	add	r3, r2
 8001a5e:	499b      	ldr	r1, [pc, #620]	@ (8001ccc <output_ascii_cmdack+0x314>)
 8001a60:	461a      	mov	r2, r3
 8001a62:	460b      	mov	r3, r1
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	8013      	strh	r3, [r2, #0]
				uartRB_Put(&usart3_rb, tmp2, strlen(tmp2));
 8001a68:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fbe1 	bl	8000234 <strlen>
 8001a72:	4603      	mov	r3, r0
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4892      	ldr	r0, [pc, #584]	@ (8001cc8 <output_ascii_cmdack+0x310>)
 8001a7e:	f001 f935 	bl	8002cec <uartRB_Put>
 8001a82:	e198      	b.n	8001db6 <output_ascii_cmdack+0x3fe>
			} else if (verbose_flg == 2) {
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	f040 8195 	bne.w	8001db6 <output_ascii_cmdack+0x3fe>
				char tmp[35];
				char tmp2[40];
				if (cmd_ack > 128) {
 8001a8c:	797b      	ldrb	r3, [r7, #5]
 8001a8e:	2b80      	cmp	r3, #128	@ 0x80
 8001a90:	d904      	bls.n	8001a9c <output_ascii_cmdack+0xe4>
					strcpy(tmp2, ">W:");
 8001a92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a96:	4a91      	ldr	r2, [pc, #580]	@ (8001cdc <output_ascii_cmdack+0x324>)
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e003      	b.n	8001aa4 <output_ascii_cmdack+0xec>
				} else {
					strcpy(tmp2, ">E:");
 8001a9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001aa0:	4a8f      	ldr	r2, [pc, #572]	@ (8001ce0 <output_ascii_cmdack+0x328>)
 8001aa2:	601a      	str	r2, [r3, #0]
				}

				switch (cmd_ack & 0xFF)          //(cmd_ack & 0x7F)
 8001aa4:	797b      	ldrb	r3, [r7, #5]
 8001aa6:	2b8a      	cmp	r3, #138	@ 0x8a
 8001aa8:	f000 8087 	beq.w	8001bba <output_ascii_cmdack+0x202>
 8001aac:	2b8a      	cmp	r3, #138	@ 0x8a
 8001aae:	f300 8144 	bgt.w	8001d3a <output_ascii_cmdack+0x382>
 8001ab2:	2b83      	cmp	r3, #131	@ 0x83
 8001ab4:	d075      	beq.n	8001ba2 <output_ascii_cmdack+0x1ea>
 8001ab6:	2b83      	cmp	r3, #131	@ 0x83
 8001ab8:	f300 813f 	bgt.w	8001d3a <output_ascii_cmdack+0x382>
 8001abc:	2b1f      	cmp	r3, #31
 8001abe:	dc49      	bgt.n	8001b54 <output_ascii_cmdack+0x19c>
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f2c0 813a 	blt.w	8001d3a <output_ascii_cmdack+0x382>
 8001ac6:	2b1f      	cmp	r3, #31
 8001ac8:	f200 8137 	bhi.w	8001d3a <output_ascii_cmdack+0x382>
 8001acc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad4 <output_ascii_cmdack+0x11c>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001b5b 	.word	0x08001b5b
 8001ad8:	08001b6f 	.word	0x08001b6f
 8001adc:	08001d3b 	.word	0x08001d3b
 8001ae0:	08001d3b 	.word	0x08001d3b
 8001ae4:	08001d3b 	.word	0x08001d3b
 8001ae8:	08001d3b 	.word	0x08001d3b
 8001aec:	08001be7 	.word	0x08001be7
 8001af0:	08001bfb 	.word	0x08001bfb
 8001af4:	08001c0d 	.word	0x08001c0d
 8001af8:	08001c75 	.word	0x08001c75
 8001afc:	08001d3b 	.word	0x08001d3b
 8001b00:	08001bcf 	.word	0x08001bcf
 8001b04:	08001c89 	.word	0x08001c89
 8001b08:	08001c2d 	.word	0x08001c2d
 8001b0c:	08001c3f 	.word	0x08001c3f
 8001b10:	08001c5b 	.word	0x08001c5b
 8001b14:	08001ca5 	.word	0x08001ca5
 8001b18:	08001d3b 	.word	0x08001d3b
 8001b1c:	08001d3b 	.word	0x08001d3b
 8001b20:	08001d3b 	.word	0x08001d3b
 8001b24:	08001d3b 	.word	0x08001d3b
 8001b28:	08001d3b 	.word	0x08001d3b
 8001b2c:	08001d3b 	.word	0x08001d3b
 8001b30:	08001d3b 	.word	0x08001d3b
 8001b34:	08001d3b 	.word	0x08001d3b
 8001b38:	08001d3b 	.word	0x08001d3b
 8001b3c:	08001d3b 	.word	0x08001d3b
 8001b40:	08001d3b 	.word	0x08001d3b
 8001b44:	08001d3b 	.word	0x08001d3b
 8001b48:	08001d3b 	.word	0x08001d3b
 8001b4c:	08001d3b 	.word	0x08001d3b
 8001b50:	08001d21 	.word	0x08001d21
 8001b54:	2b82      	cmp	r3, #130	@ 0x82
 8001b56:	d018      	beq.n	8001b8a <output_ascii_cmdack+0x1d2>
 8001b58:	e0ef      	b.n	8001d3a <output_ascii_cmdack+0x382>
				{
				case CMR_COMMANDONDEMAND:
					strcpy(tmp, "No Answer!");
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	4a61      	ldr	r2, [pc, #388]	@ (8001ce4 <output_ascii_cmdack+0x32c>)
 8001b60:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b62:	c303      	stmia	r3!, {r0, r1}
 8001b64:	801a      	strh	r2, [r3, #0]
 8001b66:	3302      	adds	r3, #2
 8001b68:	0c12      	lsrs	r2, r2, #16
 8001b6a:	701a      	strb	r2, [r3, #0]
					break;
 8001b6c:	e0ef      	b.n	8001d4e <output_ascii_cmdack+0x396>

				case CMR_PARAMETERINVALID:
					strcpy(tmp, "Parameter Invalid!");
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	4a5d      	ldr	r2, [pc, #372]	@ (8001ce8 <output_ascii_cmdack+0x330>)
 8001b74:	461c      	mov	r4, r3
 8001b76:	4615      	mov	r5, r2
 8001b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7c:	682b      	ldr	r3, [r5, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	8022      	strh	r2, [r4, #0]
 8001b82:	3402      	adds	r4, #2
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	7023      	strb	r3, [r4, #0]
					break;
 8001b88:	e0e1      	b.n	8001d4e <output_ascii_cmdack+0x396>

				case CMR_PARAMETERCLIPEDMIN:
					strcpy(tmp, "Parameter Clipped to Minimum!");
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	4a57      	ldr	r2, [pc, #348]	@ (8001cec <output_ascii_cmdack+0x334>)
 8001b90:	461c      	mov	r4, r3
 8001b92:	4615      	mov	r5, r2
 8001b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b9c:	c407      	stmia	r4!, {r0, r1, r2}
 8001b9e:	8023      	strh	r3, [r4, #0]
					break;
 8001ba0:	e0d5      	b.n	8001d4e <output_ascii_cmdack+0x396>

				case CMR_PARAMETERCLIPEDMAX:
					strcpy(tmp, "Parameter Clipped to Maximum!");
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	4a52      	ldr	r2, [pc, #328]	@ (8001cf0 <output_ascii_cmdack+0x338>)
 8001ba8:	461c      	mov	r4, r3
 8001baa:	4615      	mov	r5, r2
 8001bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001bb4:	c407      	stmia	r4!, {r0, r1, r2}
 8001bb6:	8023      	strh	r3, [r4, #0]
					break;
 8001bb8:	e0c9      	b.n	8001d4e <output_ascii_cmdack+0x396>

				case CMR_PARAMETERADJUSTED:
					strcpy(tmp, "Parameter Adjusted!");
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf4 <output_ascii_cmdack+0x33c>)
 8001bc0:	461c      	mov	r4, r3
 8001bc2:	4615      	mov	r5, r2
 8001bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc8:	682b      	ldr	r3, [r5, #0]
 8001bca:	6023      	str	r3, [r4, #0]
					break;
 8001bcc:	e0bf      	b.n	8001d4e <output_ascii_cmdack+0x396>

				case CMR_WRONGPARAMETERFORMAT:
					strcpy(tmp, "Wrong Parameter Format!");
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	4a49      	ldr	r2, [pc, #292]	@ (8001cf8 <output_ascii_cmdack+0x340>)
 8001bd4:	461c      	mov	r4, r3
 8001bd6:	4615      	mov	r5, r2
 8001bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bdc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001be0:	e884 0003 	stmia.w	r4, {r0, r1}
					break;
 8001be4:	e0b3      	b.n	8001d4e <output_ascii_cmdack+0x396>

				case CMR_UNKNOWNCOMMAND:
					strcpy(tmp, "Unknown Command!");
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4a44      	ldr	r2, [pc, #272]	@ (8001cfc <output_ascii_cmdack+0x344>)
 8001bec:	461c      	mov	r4, r3
 8001bee:	4615      	mov	r5, r2
 8001bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf4:	682b      	ldr	r3, [r5, #0]
 8001bf6:	7023      	strb	r3, [r4, #0]
					break;
 8001bf8:	e0a9      	b.n	8001d4e <output_ascii_cmdack+0x396>

				case CMR_COMMANDDENIED:
					strcpy(tmp, "Command Denied!");
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4a40      	ldr	r2, [pc, #256]	@ (8001d00 <output_ascii_cmdack+0x348>)
 8001c00:	461c      	mov	r4, r3
 8001c02:	4613      	mov	r3, r2
 8001c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					break;
 8001c0a:	e0a0      	b.n	8001d4e <output_ascii_cmdack+0x396>

				case CMR_COMMANDNOTSUPPORTED:
					strcpy(tmp, "Command Not Supported!");
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	4a3c      	ldr	r2, [pc, #240]	@ (8001d04 <output_ascii_cmdack+0x34c>)
 8001c12:	461c      	mov	r4, r3
 8001c14:	4615      	mov	r5, r2
 8001c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c1e:	6020      	str	r0, [r4, #0]
 8001c20:	3404      	adds	r4, #4
 8001c22:	8021      	strh	r1, [r4, #0]
 8001c24:	3402      	adds	r4, #2
 8001c26:	0c0b      	lsrs	r3, r1, #16
 8001c28:	7023      	strb	r3, [r4, #0]
					break;
 8001c2a:	e090      	b.n	8001d4e <output_ascii_cmdack+0x396>

				case CMR_EEPROMERROR:
					strcpy(tmp, "EEPROM Error!");
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	4a35      	ldr	r2, [pc, #212]	@ (8001d08 <output_ascii_cmdack+0x350>)
 8001c32:	461c      	mov	r4, r3
 8001c34:	4613      	mov	r3, r2
 8001c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c38:	c407      	stmia	r4!, {r0, r1, r2}
 8001c3a:	8023      	strh	r3, [r4, #0]
					break;
 8001c3c:	e087      	b.n	8001d4e <output_ascii_cmdack+0x396>

				case CMR_EEPWRLOCKED:
					strcpy(tmp, "EEPROM Write Lock!");
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	4a32      	ldr	r2, [pc, #200]	@ (8001d0c <output_ascii_cmdack+0x354>)
 8001c44:	461c      	mov	r4, r3
 8001c46:	4615      	mov	r5, r2
 8001c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c4c:	682b      	ldr	r3, [r5, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	8022      	strh	r2, [r4, #0]
 8001c52:	3402      	adds	r4, #2
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	7023      	strb	r3, [r4, #0]
					break;
 8001c58:	e079      	b.n	8001d4e <output_ascii_cmdack+0x396>

				case CMR_WRONGOPMODE:
					strcpy(tmp, "Wrong Operation Mode!");
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001d10 <output_ascii_cmdack+0x358>)
 8001c60:	461c      	mov	r4, r3
 8001c62:	4615      	mov	r5, r2
 8001c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c6c:	6020      	str	r0, [r4, #0]
 8001c6e:	3404      	adds	r4, #4
 8001c70:	8021      	strh	r1, [r4, #0]
					break;
 8001c72:	e06c      	b.n	8001d4e <output_ascii_cmdack+0x396>

				case CMR_UNITBUSY:
					strcpy(tmp, "Unit Busy!");
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	4a26      	ldr	r2, [pc, #152]	@ (8001d14 <output_ascii_cmdack+0x35c>)
 8001c7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c7c:	c303      	stmia	r3!, {r0, r1}
 8001c7e:	801a      	strh	r2, [r3, #0]
 8001c80:	3302      	adds	r3, #2
 8001c82:	0c12      	lsrs	r2, r2, #16
 8001c84:	701a      	strb	r2, [r3, #0]
					break;
 8001c86:	e062      	b.n	8001d4e <output_ascii_cmdack+0x396>

				case CMR_MISSINGPARAMETER:
					strcpy(tmp, "Missing Parameter!");
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4a22      	ldr	r2, [pc, #136]	@ (8001d18 <output_ascii_cmdack+0x360>)
 8001c8e:	461c      	mov	r4, r3
 8001c90:	4615      	mov	r5, r2
 8001c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c96:	682b      	ldr	r3, [r5, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	8022      	strh	r2, [r4, #0]
 8001c9c:	3402      	adds	r4, #2
 8001c9e:	0c1b      	lsrs	r3, r3, #16
 8001ca0:	7023      	strb	r3, [r4, #0]
					break;
 8001ca2:	e054      	b.n	8001d4e <output_ascii_cmdack+0x396>

				case CMR_OPTIONNOTINSTALLED:
					strcpy(tmp, "Required Option Not Installed!");
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d1c <output_ascii_cmdack+0x364>)
 8001caa:	461c      	mov	r4, r3
 8001cac:	4615      	mov	r5, r2
 8001cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cb6:	c407      	stmia	r4!, {r0, r1, r2}
 8001cb8:	8023      	strh	r3, [r4, #0]
 8001cba:	3402      	adds	r4, #2
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	7023      	strb	r3, [r4, #0]
					break;
 8001cc0:	e045      	b.n	8001d4e <output_ascii_cmdack+0x396>
 8001cc2:	bf00      	nop
 8001cc4:	08008770 	.word	0x08008770
 8001cc8:	20000dec 	.word	0x20000dec
 8001ccc:	08008778 	.word	0x08008778
 8001cd0:	0800877c 	.word	0x0800877c
 8001cd4:	08008784 	.word	0x08008784
 8001cd8:	08008788 	.word	0x08008788
 8001cdc:	003a573e 	.word	0x003a573e
 8001ce0:	003a453e 	.word	0x003a453e
 8001ce4:	0800878c 	.word	0x0800878c
 8001ce8:	08008798 	.word	0x08008798
 8001cec:	080087ac 	.word	0x080087ac
 8001cf0:	080087cc 	.word	0x080087cc
 8001cf4:	080087ec 	.word	0x080087ec
 8001cf8:	08008800 	.word	0x08008800
 8001cfc:	08008818 	.word	0x08008818
 8001d00:	0800882c 	.word	0x0800882c
 8001d04:	0800883c 	.word	0x0800883c
 8001d08:	08008854 	.word	0x08008854
 8001d0c:	08008864 	.word	0x08008864
 8001d10:	08008878 	.word	0x08008878
 8001d14:	08008890 	.word	0x08008890
 8001d18:	0800889c 	.word	0x0800889c
 8001d1c:	080088b0 	.word	0x080088b0

				case CMR_MALFORMATTEDCOMMAND:
					strcpy(tmp, "Malformatted Command!");
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	4a31      	ldr	r2, [pc, #196]	@ (8001dec <output_ascii_cmdack+0x434>)
 8001d26:	461c      	mov	r4, r3
 8001d28:	4615      	mov	r5, r2
 8001d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d32:	6020      	str	r0, [r4, #0]
 8001d34:	3404      	adds	r4, #4
 8001d36:	8021      	strh	r1, [r4, #0]
					break;
 8001d38:	e009      	b.n	8001d4e <output_ascii_cmdack+0x396>

				default:
					sprintf(tmp, "%3.3u", (cmd_ack & 0x7F));
 8001d3a:	797b      	ldrb	r3, [r7, #5]
 8001d3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	492a      	ldr	r1, [pc, #168]	@ (8001df0 <output_ascii_cmdack+0x438>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f006 f842 	bl	8007dd0 <siprintf>
					break;
 8001d4c:	bf00      	nop
				}

				strcat(tmp2, tmp);
 8001d4e:	f107 020c 	add.w	r2, r7, #12
 8001d52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f006 f861 	bl	8007e20 <strcat>
				strcat(tmp2, ";");
 8001d5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fa66 	bl	8000234 <strlen>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d70:	4413      	add	r3, r2
 8001d72:	4920      	ldr	r1, [pc, #128]	@ (8001df4 <output_ascii_cmdack+0x43c>)
 8001d74:	461a      	mov	r2, r3
 8001d76:	460b      	mov	r3, r1
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	8013      	strh	r3, [r2, #0]
				uartRB_Put(&usart3_rb, tmp2, strlen(tmp2));
 8001d7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fa57 	bl	8000234 <strlen>
 8001d86:	4603      	mov	r3, r0
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4819      	ldr	r0, [pc, #100]	@ (8001df8 <output_ascii_cmdack+0x440>)
 8001d92:	f000 ffab 	bl	8002cec <uartRB_Put>
 8001d96:	e00e      	b.n	8001db6 <output_ascii_cmdack+0x3fe>
			}
		}
	} else {
		if (cmd_ack != STACK_CMDINSTACK) {
 8001d98:	797b      	ldrb	r3, [r7, #5]
 8001d9a:	2b11      	cmp	r3, #17
 8001d9c:	d00b      	beq.n	8001db6 <output_ascii_cmdack+0x3fe>
			//if (((cmd_ack & 0x80) == CMR_SUCCESSFULL))
			if ((cmd_ack == CMR_SEMICOLONONLY)
 8001d9e:	797b      	ldrb	r3, [r7, #5]
 8001da0:	2bff      	cmp	r3, #255	@ 0xff
 8001da2:	d003      	beq.n	8001dac <output_ascii_cmdack+0x3f4>
					|| ((cmd_ack & 0x80) == CMR_SUCCESSFULL))
 8001da4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	da04      	bge.n	8001db6 <output_ascii_cmdack+0x3fe>
				uartRB_Put(&usart3_rb, ";", 1);
 8001dac:	2201      	movs	r2, #1
 8001dae:	4911      	ldr	r1, [pc, #68]	@ (8001df4 <output_ascii_cmdack+0x43c>)
 8001db0:	4811      	ldr	r0, [pc, #68]	@ (8001df8 <output_ascii_cmdack+0x440>)
 8001db2:	f000 ff9b 	bl	8002cec <uartRB_Put>

		};
	}

	if ((crlf_flg & 0x01) > 0) {	//crlf_char= "\r";        //d.h. CR
 8001db6:	79bb      	ldrb	r3, [r7, #6]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	dd04      	ble.n	8001dca <output_ascii_cmdack+0x412>
		uartRB_Put(&usart3_rb, "\r", 1);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	490e      	ldr	r1, [pc, #56]	@ (8001dfc <output_ascii_cmdack+0x444>)
 8001dc4:	480c      	ldr	r0, [pc, #48]	@ (8001df8 <output_ascii_cmdack+0x440>)
 8001dc6:	f000 ff91 	bl	8002cec <uartRB_Put>
	}
	if ((crlf_flg & 0x02) > 0) {	//*crlf_char=";
 8001dca:	79bb      	ldrb	r3, [r7, #6]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	dd04      	ble.n	8001dde <output_ascii_cmdack+0x426>
		uartRB_Put(&usart3_rb, "\n", 1);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	490a      	ldr	r1, [pc, #40]	@ (8001e00 <output_ascii_cmdack+0x448>)
 8001dd8:	4807      	ldr	r0, [pc, #28]	@ (8001df8 <output_ascii_cmdack+0x440>)
 8001dda:	f000 ff87 	bl	8002cec <uartRB_Put>
	}
	uartRB_KickTx(&usart3_rb);
 8001dde:	4806      	ldr	r0, [pc, #24]	@ (8001df8 <output_ascii_cmdack+0x440>)
 8001de0:	f000 ff3e 	bl	8002c60 <uartRB_KickTx>
}
 8001de4:	bf00      	nop
 8001de6:	3770      	adds	r7, #112	@ 0x70
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bdb0      	pop	{r4, r5, r7, pc}
 8001dec:	080088d0 	.word	0x080088d0
 8001df0:	0800877c 	.word	0x0800877c
 8001df4:	08008778 	.word	0x08008778
 8001df8:	20000dec 	.word	0x20000dec
 8001dfc:	080088e8 	.word	0x080088e8
 8001e00:	080088ec 	.word	0x080088ec

08001e04 <Binary_Search>:

//Die interne Befehlnummer werden für den eingegebenen Befehl zurückgeliefert.
void Binary_Search(uint8_t ncmd, char *key, uint16_t *cmdindex) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	73fb      	strb	r3, [r7, #15]
	volatile uint16_t low = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	83fb      	strh	r3, [r7, #30]
	volatile uint16_t high = ncmd - 1;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	83bb      	strh	r3, [r7, #28]
	volatile uint16_t mid;
	volatile int sflag;
	volatile uint8_t flag = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	74fb      	strb	r3, [r7, #19]

	while ((low <= high) && (flag == 0)) {
 8001e24:	e045      	b.n	8001eb2 <Binary_Search+0xae>
		mid = ((low + high) >> 1);
 8001e26:	8bfb      	ldrh	r3, [r7, #30]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	8bbb      	ldrh	r3, [r7, #28]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	105b      	asrs	r3, r3, #1
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	837b      	strh	r3, [r7, #26]
		sflag = strcmp(key, (char*) &(ASCIICmdTable[mid].cmdline));
 8001e38:	8b7b      	ldrh	r3, [r7, #26]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2316      	movs	r3, #22
 8001e40:	fb02 f303 	mul.w	r3, r2, r3
 8001e44:	4a27      	ldr	r2, [pc, #156]	@ (8001ee4 <Binary_Search+0xe0>)
 8001e46:	4413      	add	r3, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	68b8      	ldr	r0, [r7, #8]
 8001e4c:	f7fe f9e8 	bl	8000220 <strcmp>
 8001e50:	4603      	mov	r3, r0
 8001e52:	617b      	str	r3, [r7, #20]

		if (sflag < 0) {
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	da12      	bge.n	8001e80 <Binary_Search+0x7c>
			if (mid != 0) {
 8001e5a:	8b7b      	ldrh	r3, [r7, #26]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <Binary_Search+0x6a>
				high = mid - 1;
 8001e62:	8b7b      	ldrh	r3, [r7, #26]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	83bb      	strh	r3, [r7, #28]
 8001e6c:	e005      	b.n	8001e7a <Binary_Search+0x76>
			} else {
				if (low != 0) {
 8001e6e:	8bfb      	ldrh	r3, [r7, #30]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d028      	beq.n	8001ec8 <Binary_Search+0xc4>
					high = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	83bb      	strh	r3, [r7, #28]
				} else {
					break;
				}
			}
			flag = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	74fb      	strb	r3, [r7, #19]
 8001e7e:	e018      	b.n	8001eb2 <Binary_Search+0xae>
		} else if (sflag == 0) {
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10e      	bne.n	8001ea4 <Binary_Search+0xa0>

			*cmdindex = ASCIICmdTable[mid].cmdindex;
 8001e86:	8b7b      	ldrh	r3, [r7, #26]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4a15      	ldr	r2, [pc, #84]	@ (8001ee4 <Binary_Search+0xe0>)
 8001e8e:	2316      	movs	r3, #22
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	3314      	adds	r3, #20
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	801a      	strh	r2, [r3, #0]
			flag = 1;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	74fb      	strb	r3, [r7, #19]
 8001ea2:	e006      	b.n	8001eb2 <Binary_Search+0xae>
		} else {
			low = mid + 1;
 8001ea4:	8b7b      	ldrh	r3, [r7, #26]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	83fb      	strh	r3, [r7, #30]
			flag = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	74fb      	strb	r3, [r7, #19]
	while ((low <= high) && (flag == 0)) {
 8001eb2:	8bfb      	ldrh	r3, [r7, #30]
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	8bbb      	ldrh	r3, [r7, #28]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d805      	bhi.n	8001eca <Binary_Search+0xc6>
 8001ebe:	7cfb      	ldrb	r3, [r7, #19]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0af      	beq.n	8001e26 <Binary_Search+0x22>
 8001ec6:	e000      	b.n	8001eca <Binary_Search+0xc6>
					break;
 8001ec8:	bf00      	nop
		}

	};

	if (flag == 0)   //Falls die Tabelle diesen Befehl nicht enthältet,
 8001eca:	7cfb      	ldrb	r3, [r7, #19]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d103      	bne.n	8001eda <Binary_Search+0xd6>
			{
		*cmdindex = BINARY_INDEX_MAX;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ed8:	801a      	strh	r2, [r3, #0]
	};
}
 8001eda:	bf00      	nop
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	080088f8 	.word	0x080088f8

08001ee8 <output_ascii_result>:

void output_ascii_result(uint8_t verbose_data, uint8_t crlf_data,
		stack_item *result_data) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	603a      	str	r2, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	71bb      	strb	r3, [r7, #6]
	//uart0_puts("output");
	switch (result_data->rwflg) {
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	7b9b      	ldrb	r3, [r3, #14]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d002      	beq.n	8001f06 <output_ascii_result+0x1e>
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d029      	beq.n	8001f58 <output_ascii_result+0x70>
		break;
	case WRITE:
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
		break;
	};
}
 8001f04:	e030      	b.n	8001f68 <output_ascii_result+0x80>
		switch (result_data->cmd_index) {
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	885b      	ldrh	r3, [r3, #2]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d017      	beq.n	8001f3e <output_ascii_result+0x56>
 8001f0e:	2b0e      	cmp	r3, #14
 8001f10:	d017      	beq.n	8001f42 <output_ascii_result+0x5a>
			if ((result_data->cmd_ack == CMR_SUCCESSFULL)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	791b      	ldrb	r3, [r3, #4]
 8001f16:	2b80      	cmp	r3, #128	@ 0x80
 8001f18:	d00b      	beq.n	8001f32 <output_ascii_result+0x4a>
					|| (result_data->cmd_ack == CMR_PARAMETERCLIPEDMIN)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	791b      	ldrb	r3, [r3, #4]
 8001f1e:	2b82      	cmp	r3, #130	@ 0x82
 8001f20:	d007      	beq.n	8001f32 <output_ascii_result+0x4a>
					|| (result_data->cmd_ack == CMR_PARAMETERCLIPEDMAX)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	791b      	ldrb	r3, [r3, #4]
 8001f26:	2b83      	cmp	r3, #131	@ 0x83
 8001f28:	d003      	beq.n	8001f32 <output_ascii_result+0x4a>
					|| (result_data->cmd_ack == CMR_PARAMETERADJUSTED)) {
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	791b      	ldrb	r3, [r3, #4]
 8001f2e:	2b8a      	cmp	r3, #138	@ 0x8a
 8001f30:	d109      	bne.n	8001f46 <output_ascii_result+0x5e>
				output_ascii(result_data->parameter);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f850 	bl	8001fdc <output_ascii>
			break;
 8001f3c:	e003      	b.n	8001f46 <output_ascii_result+0x5e>
			break;
 8001f3e:	bf00      	nop
 8001f40:	e002      	b.n	8001f48 <output_ascii_result+0x60>
			break;
 8001f42:	bf00      	nop
 8001f44:	e000      	b.n	8001f48 <output_ascii_result+0x60>
			break;
 8001f46:	bf00      	nop
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	791a      	ldrb	r2, [r3, #4]
 8001f4c:	79b9      	ldrb	r1, [r7, #6]
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fd31 	bl	80019b8 <output_ascii_cmdack>
		break;
 8001f56:	e007      	b.n	8001f68 <output_ascii_result+0x80>
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	791a      	ldrb	r2, [r3, #4]
 8001f5c:	79b9      	ldrb	r1, [r7, #6]
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fd29 	bl	80019b8 <output_ascii_cmdack>
		break;
 8001f66:	bf00      	nop
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <output_binary_result>:

void output_binary_result(stack_item *cmd) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	uint8_t buffer[7];
	uint16_t s_tmp = cmd->cmd_sender;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	82fb      	strh	r3, [r7, #22]
	uint16_t r_tmp = cmd->cmd_receiver;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	785b      	ldrb	r3, [r3, #1]
 8001f82:	82bb      	strh	r3, [r7, #20]
	int32_t param = cmd->parameter;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	613b      	str	r3, [r7, #16]

	buffer[0] = (s_tmp << 5) | (r_tmp << 3);
 8001f8a:	8afb      	ldrh	r3, [r7, #22]
 8001f8c:	015b      	lsls	r3, r3, #5
 8001f8e:	b25a      	sxtb	r2, r3
 8001f90:	8abb      	ldrh	r3, [r7, #20]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	723b      	strb	r3, [r7, #8]
	buffer[1] = cmd->cmd_index;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	885b      	ldrh	r3, [r3, #2]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	727b      	strb	r3, [r7, #9]
	buffer[2] = cmd->cmd_ack;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	791b      	ldrb	r3, [r3, #4]
 8001faa:	72bb      	strb	r3, [r7, #10]
	buffer[3] = (param >> 24) & 0xFF;
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	0e1b      	lsrs	r3, r3, #24
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	72fb      	strb	r3, [r7, #11]
	buffer[4] = (param >> 16) & 0xFF;
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	141b      	asrs	r3, r3, #16
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	733b      	strb	r3, [r7, #12]
	buffer[5] = (param >> 8) & 0xFF;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	121b      	asrs	r3, r3, #8
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	737b      	strb	r3, [r7, #13]
	buffer[6] = param & 0xFF;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	73bb      	strb	r3, [r7, #14]
	serialSendAnswer(buffer);
 8001fca:	f107 0308 	add.w	r3, r7, #8
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fc5e 	bl	8001890 <serialSendAnswer>
}
 8001fd4:	bf00      	nop
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <output_ascii>:

void output_ascii(int32_t val) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	@ 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	char tmp[34];
	sprintf(tmp, "%-ld", val);
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	490c      	ldr	r1, [pc, #48]	@ (800201c <output_ascii+0x40>)
 8001fec:	4618      	mov	r0, r3
 8001fee:	f005 feef 	bl	8007dd0 <siprintf>
	uartRB_Put(&usart3_rb, tmp, strlen(tmp));
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe f91c 	bl	8000234 <strlen>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	4619      	mov	r1, r3
 8002006:	4806      	ldr	r0, [pc, #24]	@ (8002020 <output_ascii+0x44>)
 8002008:	f000 fe70 	bl	8002cec <uartRB_Put>
	uartRB_KickTx(&usart3_rb);
 800200c:	4804      	ldr	r0, [pc, #16]	@ (8002020 <output_ascii+0x44>)
 800200e:	f000 fe27 	bl	8002c60 <uartRB_KickTx>
}
 8002012:	bf00      	nop
 8002014:	3730      	adds	r7, #48	@ 0x30
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	080088f0 	.word	0x080088f0
 8002020:	20000dec 	.word	0x20000dec

08002024 <remote_ascii_verbose>:

uint8_t remote_ascii_verbose(void) {
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
	return verbose;
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <remote_ascii_verbose+0x14>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b2db      	uxtb	r3, r3
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	20000115 	.word	0x20000115

0800203c <remote_ascii_crlf>:

uint8_t remote_ascii_crlf(void) {
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
	return crlf;
 8002040:	4b03      	ldr	r3, [pc, #12]	@ (8002050 <remote_ascii_crlf+0x14>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b2db      	uxtb	r3, r3
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	20000116 	.word	0x20000116

08002054 <resultQueue_init>:
//void output_touch_result(stack_item *cmd);
//void spi_SendAnswer(uint8_t *message);

//--------------FUNKTIONSDEFINITIONS-----------------------------------------------------------------------------------------
void resultQueue_init(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
	resultQueue_in = 0;
 8002058:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <resultQueue_init+0x1c>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
	resultQueue_out = 0;
 800205e:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <resultQueue_init+0x20>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000528 	.word	0x20000528
 8002074:	20000529 	.word	0x20000529

08002078 <get_anzFrei_resultQueue>:

uint8_t get_anzFrei_resultQueue(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
	int8_t x;
	//ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		x = resultQueue_in - resultQueue_out;
 800207e:	4b0d      	ldr	r3, [pc, #52]	@ (80020b4 <get_anzFrei_resultQueue+0x3c>)
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <get_anzFrei_resultQueue+0x40>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	71fb      	strb	r3, [r7, #7]
		if (x < 0) x = x + RESULT_QUEUE_SIZE;
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	da03      	bge.n	800209c <get_anzFrei_resultQueue+0x24>
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	333c      	adds	r3, #60	@ 0x3c
 8002098:	b2db      	uxtb	r3, r3
 800209a:	71fb      	strb	r3, [r7, #7]
		x = RESULT_QUEUE_SIZE - x;
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	71fb      	strb	r3, [r7, #7]
	}
	return x;
 80020a6:	79fb      	ldrb	r3, [r7, #7]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	20000528 	.word	0x20000528
 80020b8:	20000529 	.word	0x20000529

080020bc <get_anzBes_resultQueue>:

uint8_t get_anzBes_resultQueue(void)
{	int8_t x;
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
	//ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		x = resultQueue_in - resultQueue_out;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <get_anzBes_resultQueue+0x34>)
 80020c4:	781a      	ldrb	r2, [r3, #0]
 80020c6:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <get_anzBes_resultQueue+0x38>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	71fb      	strb	r3, [r7, #7]
		if (x < 0) x = x + RESULT_QUEUE_SIZE;
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	da03      	bge.n	80020e0 <get_anzBes_resultQueue+0x24>
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	333c      	adds	r3, #60	@ 0x3c
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	71fb      	strb	r3, [r7, #7]
	}
	return x;
 80020e0:	79fb      	ldrb	r3, [r7, #7]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000528 	.word	0x20000528
 80020f4:	20000529 	.word	0x20000529

080020f8 <resultQueue_push>:

uint8_t resultQueue_push (stack_item  sitem)
{
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	463c      	mov	r4, r7
 8002100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp = get_anzFrei_resultQueue();
 8002104:	f7ff ffb8 	bl	8002078 <get_anzFrei_resultQueue>
 8002108:	4603      	mov	r3, r0
 800210a:	75bb      	strb	r3, [r7, #22]

	uint8_t flag =0;  // der Flag bedeutet, ob das Hinfuegen des Commando in Queue erfolgreich ist: 0= Nicht erfolgreich, 1= Erfolgreich
 800210c:	2300      	movs	r3, #0
 800210e:	75fb      	strb	r3, [r7, #23]

	if (tmp > 1)
 8002110:	7dbb      	ldrb	r3, [r7, #22]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d919      	bls.n	800214a <resultQueue_push+0x52>
	{
		resultQueue[resultQueue_in] = sitem;
 8002116:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <resultQueue_push+0x60>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	4a10      	ldr	r2, [pc, #64]	@ (800215c <resultQueue_push+0x64>)
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	4413      	add	r3, r2
 8002120:	461c      	mov	r4, r3
 8002122:	463b      	mov	r3, r7
 8002124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002126:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		resultQueue_in ++;
 800212a:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <resultQueue_push+0x60>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	3301      	adds	r3, #1
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <resultQueue_push+0x60>)
 8002134:	701a      	strb	r2, [r3, #0]
		if (resultQueue_in >= RESULT_QUEUE_SIZE) resultQueue_in =0;
 8002136:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <resultQueue_push+0x60>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b3b      	cmp	r3, #59	@ 0x3b
 800213c:	d902      	bls.n	8002144 <resultQueue_push+0x4c>
 800213e:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <resultQueue_push+0x60>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8002144:	2301      	movs	r3, #1
 8002146:	75fb      	strb	r3, [r7, #23]
 8002148:	e001      	b.n	800214e <resultQueue_push+0x56>
	}
	else
	{
		flag = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]
	};
	return flag;
 800214e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002150:	4618      	mov	r0, r3
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd90      	pop	{r4, r7, pc}
 8002158:	20000528 	.word	0x20000528
 800215c:	20000168 	.word	0x20000168

08002160 <resultQueue_pop>:

void resultQueue_pop(stack_item *sitem)
{
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	uint8_t tmp =get_anzFrei_resultQueue();
 8002168:	f7ff ff86 	bl	8002078 <get_anzFrei_resultQueue>
 800216c:	4603      	mov	r3, r0
 800216e:	73fb      	strb	r3, [r7, #15]

	if (tmp < RESULT_QUEUE_SIZE )
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	2b3b      	cmp	r3, #59	@ 0x3b
 8002174:	d817      	bhi.n	80021a6 <resultQueue_pop+0x46>
	{
		*sitem = resultQueue[resultQueue_out];
 8002176:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <resultQueue_pop+0x50>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <resultQueue_pop+0x54>)
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	4413      	add	r3, r2
 8002182:	460c      	mov	r4, r1
 8002184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		resultQueue_out ++;
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <resultQueue_pop+0x50>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <resultQueue_pop+0x50>)
 8002194:	701a      	strb	r2, [r3, #0]
		if (resultQueue_out >= RESULT_QUEUE_SIZE) resultQueue_out = 0;
 8002196:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <resultQueue_pop+0x50>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b3b      	cmp	r3, #59	@ 0x3b
 800219c:	d903      	bls.n	80021a6 <resultQueue_pop+0x46>
 800219e:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <resultQueue_pop+0x50>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
	};
	return;
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
}
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd90      	pop	{r4, r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000529 	.word	0x20000529
 80021b4:	20000168 	.word	0x20000168

080021b8 <result_get_sero>:

void result_get_sero(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
	stack_item cmd_tmp;
	uint8_t verbose_tmp = remote_ascii_verbose();
 80021be:	f7ff ff31 	bl	8002024 <remote_ascii_verbose>
 80021c2:	4603      	mov	r3, r0
 80021c4:	75fb      	strb	r3, [r7, #23]
	uint8_t crlf_tmp = remote_ascii_crlf();
 80021c6:	f7ff ff39 	bl	800203c <remote_ascii_crlf>
 80021ca:	4603      	mov	r3, r0
 80021cc:	75bb      	strb	r3, [r7, #22]

	while (get_anzBes_resultQueue() > 0 )
 80021ce:	e015      	b.n	80021fc <result_get_sero+0x44>
	{
		resultQueue_pop(&cmd_tmp);
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ffc4 	bl	8002160 <resultQueue_pop>
		//uart0_puts("result");
		//uart0_puti(cmd_tmp.cmd_index);
		//uart0_puti(cmd_tmp.cmd_ack);
		//uart0_puti(cmd_tmp.parameter);
		switch (cmd_tmp.cmd_sender)
 80021d8:	793b      	ldrb	r3, [r7, #4]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d008      	beq.n	80021f0 <result_get_sero+0x38>
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d10b      	bne.n	80021fa <result_get_sero+0x42>
			//case Q_TOUCHPANEL:
				//output_touch_result(&cmd_tmp);
			//	break;
			case Q_RS232_ASCII:
				//uart0_puts("ASC");
				output_ascii_result(verbose_tmp, crlf_tmp, &cmd_tmp);
 80021e2:	1d3a      	adds	r2, r7, #4
 80021e4:	7db9      	ldrb	r1, [r7, #22]
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fe7d 	bl	8001ee8 <output_ascii_result>
				break;
 80021ee:	e005      	b.n	80021fc <result_get_sero+0x44>
			case Q_RS232_BINARY:
				output_binary_result(&cmd_tmp);
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff febc 	bl	8001f70 <output_binary_result>
				break;
 80021f8:	e000      	b.n	80021fc <result_get_sero+0x44>
//				output_userport_result(&cmd_tmp);
//			case Q_ZENTRALE:
//				zentrale_match_get_sero(&cmd_tmp);
//				break;
			default:
				break;
 80021fa:	bf00      	nop
	while (get_anzBes_resultQueue() > 0 )
 80021fc:	f7ff ff5e 	bl	80020bc <get_anzBes_resultQueue>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1e4      	bne.n	80021d0 <result_get_sero+0x18>
		};
	};

	return;
 8002206:	bf00      	nop
}
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <MX_SPI1_Init+0x74>)
 8002216:	4a1c      	ldr	r2, [pc, #112]	@ (8002288 <MX_SPI1_Init+0x78>)
 8002218:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800221a:	4b1a      	ldr	r3, [pc, #104]	@ (8002284 <MX_SPI1_Init+0x74>)
 800221c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002220:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002222:	4b18      	ldr	r3, [pc, #96]	@ (8002284 <MX_SPI1_Init+0x74>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002228:	4b16      	ldr	r3, [pc, #88]	@ (8002284 <MX_SPI1_Init+0x74>)
 800222a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800222e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <MX_SPI1_Init+0x74>)
 8002232:	2202      	movs	r2, #2
 8002234:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002236:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <MX_SPI1_Init+0x74>)
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <MX_SPI1_Init+0x74>)
 800223e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002242:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <MX_SPI1_Init+0x74>)
 8002246:	2220      	movs	r2, #32
 8002248:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800224a:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <MX_SPI1_Init+0x74>)
 800224c:	2200      	movs	r2, #0
 800224e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002250:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <MX_SPI1_Init+0x74>)
 8002252:	2200      	movs	r2, #0
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002256:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <MX_SPI1_Init+0x74>)
 8002258:	2200      	movs	r2, #0
 800225a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800225c:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <MX_SPI1_Init+0x74>)
 800225e:	2207      	movs	r2, #7
 8002260:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002262:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <MX_SPI1_Init+0x74>)
 8002264:	2200      	movs	r2, #0
 8002266:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <MX_SPI1_Init+0x74>)
 800226a:	2200      	movs	r2, #0
 800226c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800226e:	4805      	ldr	r0, [pc, #20]	@ (8002284 <MX_SPI1_Init+0x74>)
 8002270:	f003 f958 	bl	8005524 <HAL_SPI_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800227a:	f7fe fde2 	bl	8000e42 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000052c 	.word	0x2000052c
 8002288:	40013000 	.word	0x40013000

0800228c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	@ 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a17      	ldr	r2, [pc, #92]	@ (8002308 <HAL_SPI_MspInit+0x7c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d128      	bne.n	8002300 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022ae:	4b17      	ldr	r3, [pc, #92]	@ (800230c <HAL_SPI_MspInit+0x80>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b2:	4a16      	ldr	r2, [pc, #88]	@ (800230c <HAL_SPI_MspInit+0x80>)
 80022b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022ba:	4b14      	ldr	r3, [pc, #80]	@ (800230c <HAL_SPI_MspInit+0x80>)
 80022bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c6:	4b11      	ldr	r3, [pc, #68]	@ (800230c <HAL_SPI_MspInit+0x80>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	4a10      	ldr	r2, [pc, #64]	@ (800230c <HAL_SPI_MspInit+0x80>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d2:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <HAL_SPI_MspInit+0x80>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022de:	23e0      	movs	r3, #224	@ 0xe0
 80022e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ee:	2305      	movs	r3, #5
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4619      	mov	r1, r3
 80022f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022fc:	f001 ff16 	bl	800412c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002300:	bf00      	nop
 8002302:	3728      	adds	r7, #40	@ 0x28
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40013000 	.word	0x40013000
 800230c:	40021000 	.word	0x40021000

08002310 <stacks_init>:
uint8_t zstackindex_list_act_get(void);
uint8_t mcstackindex_list_act_get(void);

//--- FUNKTIONSDEFINITIONS --------------------------------------------------------------------------------------------------
void stacks_init(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	71fb      	strb	r3, [r7, #7]

	zstackindex_list_act = Z_STACK_SIZE -1;        //alle Stackindexe sind frei
 800231a:	4b20      	ldr	r3, [pc, #128]	@ (800239c <stacks_init+0x8c>)
 800231c:	221d      	movs	r2, #29
 800231e:	701a      	strb	r2, [r3, #0]
	mcstackindex_list_act = MC_STACK_SIZE -1;
 8002320:	4b1f      	ldr	r3, [pc, #124]	@ (80023a0 <stacks_init+0x90>)
 8002322:	2213      	movs	r2, #19
 8002324:	701a      	strb	r2, [r3, #0]
	mcstack_rest_length = MC_STACK_SIZE - MCSTACK_ZENTRALE_RESERVATION;
 8002326:	4b1f      	ldr	r3, [pc, #124]	@ (80023a4 <stacks_init+0x94>)
 8002328:	2212      	movs	r2, #18
 800232a:	701a      	strb	r2, [r3, #0]


	for (i = 0; i < Z_STACK_SIZE; i++)
 800232c:	2300      	movs	r3, #0
 800232e:	71fb      	strb	r3, [r7, #7]
 8002330:	e011      	b.n	8002356 <stacks_init+0x46>
	{
		zentrale_stack[i].next = NONEXT;
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	4a1c      	ldr	r2, [pc, #112]	@ (80023a8 <stacks_init+0x98>)
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	4413      	add	r3, r2
 800233a:	330c      	adds	r3, #12
 800233c:	22ff      	movs	r2, #255	@ 0xff
 800233e:	701a      	strb	r2, [r3, #0]
		zstackindex_list[i] = zstackindex_list_act - i;   //alle freien Stackindexe sind abwärts in die Stackindex-Liste(aufwärts) gelegt.
 8002340:	4b16      	ldr	r3, [pc, #88]	@ (800239c <stacks_init+0x8c>)
 8002342:	7819      	ldrb	r1, [r3, #0]
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	79fa      	ldrb	r2, [r7, #7]
 8002348:	1a8a      	subs	r2, r1, r2
 800234a:	b2d1      	uxtb	r1, r2
 800234c:	4a17      	ldr	r2, [pc, #92]	@ (80023ac <stacks_init+0x9c>)
 800234e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < Z_STACK_SIZE; i++)
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	3301      	adds	r3, #1
 8002354:	71fb      	strb	r3, [r7, #7]
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	2b1d      	cmp	r3, #29
 800235a:	d9ea      	bls.n	8002332 <stacks_init+0x22>
	};

	for (i = 0; i < MC_STACK_SIZE; i++)
 800235c:	2300      	movs	r3, #0
 800235e:	71fb      	strb	r3, [r7, #7]
 8002360:	e011      	b.n	8002386 <stacks_init+0x76>
	{
		mc_stack[i].next = NONEXT;
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	4a12      	ldr	r2, [pc, #72]	@ (80023b0 <stacks_init+0xa0>)
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	4413      	add	r3, r2
 800236a:	330c      	adds	r3, #12
 800236c:	22ff      	movs	r2, #255	@ 0xff
 800236e:	701a      	strb	r2, [r3, #0]
		mcstackindex_list[i] = mcstackindex_list_act - i;
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <stacks_init+0x90>)
 8002372:	7819      	ldrb	r1, [r3, #0]
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	79fa      	ldrb	r2, [r7, #7]
 8002378:	1a8a      	subs	r2, r1, r2
 800237a:	b2d1      	uxtb	r1, r2
 800237c:	4a0d      	ldr	r2, [pc, #52]	@ (80023b4 <stacks_init+0xa4>)
 800237e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < MC_STACK_SIZE; i++)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	3301      	adds	r3, #1
 8002384:	71fb      	strb	r3, [r7, #7]
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	2b13      	cmp	r3, #19
 800238a:	d9ea      	bls.n	8002362 <stacks_init+0x52>
	};
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	200008e4 	.word	0x200008e4
 80023a0:	200008e5 	.word	0x200008e5
 80023a4:	200008e6 	.word	0x200008e6
 80023a8:	20000590 	.word	0x20000590
 80023ac:	200008b0 	.word	0x200008b0
 80023b0:	20000770 	.word	0x20000770
 80023b4:	200008d0 	.word	0x200008d0

080023b8 <stacks_insert_cmd>:

uint8_t stacks_insert_cmd(stack_item stack[], uint8_t stack_length, uint8_t stackindex_list[], stack_item stack_data, uint8_t *stackindexlist_act, uint8_t *stackindex)
{
 80023b8:	b082      	sub	sp, #8
 80023ba:	b490      	push	{r4, r7}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023c6:	460b      	mov	r3, r1
 80023c8:	72fb      	strb	r3, [r7, #11]
	uint8_t index_tmp;
	uint8_t flag;

	if ( (*stackindexlist_act >= 0)  && (*stackindexlist_act < stack_length) )          //wenn es einen freien Platz gibt,
 80023ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	7afa      	ldrb	r2, [r7, #11]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d923      	bls.n	800241c <stacks_insert_cmd+0x64>
	{
		index_tmp = *stackindexlist_act;
 80023d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	75bb      	strb	r3, [r7, #22]
		*stackindex = stackindex_list[index_tmp];                    //fügt einen Element in den Stack ein
 80023da:	7dbb      	ldrb	r3, [r7, #22]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e4:	701a      	strb	r2, [r3, #0]
		stack[*stackindex] = stack_data;
 80023e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	461c      	mov	r4, r3
 80023f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if (index_tmp == 0 )                                     //d.h. es keine leer Platz mehr im Stack nach dem Einfügen gibt.
 80023fc:	7dbb      	ldrb	r3, [r7, #22]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d103      	bne.n	800240a <stacks_insert_cmd+0x52>
		{
			*stackindexlist_act = NONEXT;           //NONEXT bezeichnet: der Stack ist voll, weil die negative Zahl nicht erlaubt ist.
 8002402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002404:	22ff      	movs	r2, #255	@ 0xff
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e005      	b.n	8002416 <stacks_insert_cmd+0x5e>
		}
		else
		{
			index_tmp -=1;
 800240a:	7dbb      	ldrb	r3, [r7, #22]
 800240c:	3b01      	subs	r3, #1
 800240e:	75bb      	strb	r3, [r7, #22]
			*stackindexlist_act = index_tmp;
 8002410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002412:	7dba      	ldrb	r2, [r7, #22]
 8002414:	701a      	strb	r2, [r3, #0]
		};
		flag = STACK_INTSERT_OK;
 8002416:	2314      	movs	r3, #20
 8002418:	75fb      	strb	r3, [r7, #23]
 800241a:	e001      	b.n	8002420 <stacks_insert_cmd+0x68>
	}
	else //Falls der Stack voll ist,
	{
		flag = CMR_UNITBUSY;
 800241c:	2309      	movs	r3, #9
 800241e:	75fb      	strb	r3, [r7, #23]
	};

	return flag;
 8002420:	7dfb      	ldrb	r3, [r7, #23]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bc90      	pop	{r4, r7}
 800242a:	b002      	add	sp, #8
 800242c:	4770      	bx	lr
	...

08002430 <z_mc_stack_insert>:

uint8_t z_mc_stack_insert(stack_item stack_data, uint8_t mc_flg)
{
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b091      	sub	sp, #68	@ 0x44
 8002434:	af06      	add	r7, sp, #24
 8002436:	463c      	mov	r4, r7
 8002438:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t flag = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t push_result = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t prio_pushflg = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t stack_index = NONEXT;
 800244e:	23ff      	movs	r3, #255	@ 0xff
 8002450:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t mc_push_enable = 0;  //=0: es ist nicht erlaubt, die Befehlen in den MC- Stack einlegen; > 1: es ist erlaubt; =1: die Befehlen aus der Zentrale;
 8002454:	2300      	movs	r3, #0
 8002456:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	//=2: aus der anderen Quellen.

	stack_item stack_tmp;

	if (mc_flg)   // d.h. der Befehl ist für den MC
 800245a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800245e:	2b00      	cmp	r3, #0
 8002460:	d067      	beq.n	8002532 <z_mc_stack_insert+0x102>
	{
		if (stack_data.cmd_sender == Q_ZENTRALE)
 8002462:	783b      	ldrb	r3, [r7, #0]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d103      	bne.n	8002470 <z_mc_stack_insert+0x40>
		{
			mc_push_enable = 1;
 8002468:	2301      	movs	r3, #1
 800246a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800246e:	e00e      	b.n	800248e <z_mc_stack_insert+0x5e>
		}
		else
		{
			if (mcstack_rest_length  > 0)
 8002470:	4b51      	ldr	r3, [pc, #324]	@ (80025b8 <z_mc_stack_insert+0x188>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <z_mc_stack_insert+0x52>
			{
				mc_push_enable = 2;
 800247a:	2302      	movs	r3, #2
 800247c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002480:	e005      	b.n	800248e <z_mc_stack_insert+0x5e>
			}
			else
			{
				mc_push_enable = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				flag = CMR_UNITBUSY;
 8002488:	2309      	movs	r3, #9
 800248a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			};
		};

		if (mc_push_enable > 0)
 800248e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8089 	beq.w	80025aa <z_mc_stack_insert+0x17a>
		{
			push_result = stacks_insert_cmd(mc_stack, MC_STACK_SIZE, mcstackindex_list, stack_data, &mcstackindex_list_act, &stack_index);
 8002498:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800249c:	9304      	str	r3, [sp, #16]
 800249e:	4b47      	ldr	r3, [pc, #284]	@ (80025bc <z_mc_stack_insert+0x18c>)
 80024a0:	9303      	str	r3, [sp, #12]
 80024a2:	466c      	mov	r4, sp
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	4a43      	ldr	r2, [pc, #268]	@ (80025c0 <z_mc_stack_insert+0x190>)
 80024b2:	2114      	movs	r1, #20
 80024b4:	4843      	ldr	r0, [pc, #268]	@ (80025c4 <z_mc_stack_insert+0x194>)
 80024b6:	f7ff ff7f 	bl	80023b8 <stacks_insert_cmd>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			if (push_result == STACK_INTSERT_OK)
 80024c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80024c4:	2b14      	cmp	r3, #20
 80024c6:	d130      	bne.n	800252a <z_mc_stack_insert+0xfa>
			{
				prio_pushflg = priolist_push(mc_priolist, MC_STACK_SIZE, mc_priolevel_header,  &mcpriolist_firstunused_index, stack_index, stack_data.prio);
 80024c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024cc:	7b7a      	ldrb	r2, [r7, #13]
 80024ce:	9201      	str	r2, [sp, #4]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	4b3d      	ldr	r3, [pc, #244]	@ (80025c8 <z_mc_stack_insert+0x198>)
 80024d4:	4a3d      	ldr	r2, [pc, #244]	@ (80025cc <z_mc_stack_insert+0x19c>)
 80024d6:	2114      	movs	r1, #20
 80024d8:	483d      	ldr	r0, [pc, #244]	@ (80025d0 <z_mc_stack_insert+0x1a0>)
 80024da:	f7fe fcb8 	bl	8000e4e <priolist_push>
 80024de:	4603      	mov	r3, r0
 80024e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				if (prio_pushflg )
 80024e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <z_mc_stack_insert+0xe4>
				{
					flag = STACK_CMDINSTACK;
 80024ec:	2311      	movs	r3, #17
 80024ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					if (mc_push_enable == 2)
 80024f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d157      	bne.n	80025aa <z_mc_stack_insert+0x17a>
					{
						if (mcstack_rest_length > 0)
 80024fa:	4b2f      	ldr	r3, [pc, #188]	@ (80025b8 <z_mc_stack_insert+0x188>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d052      	beq.n	80025aa <z_mc_stack_insert+0x17a>
						{
							mcstack_rest_length -=1;                   //die Plätze für die Befehle aus den anderen Quelle ausser der Zentrale wird einen weniger sein.
 8002504:	4b2c      	ldr	r3, [pc, #176]	@ (80025b8 <z_mc_stack_insert+0x188>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4b2a      	ldr	r3, [pc, #168]	@ (80025b8 <z_mc_stack_insert+0x188>)
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e04a      	b.n	80025aa <z_mc_stack_insert+0x17a>

					};
				}
				else
				{
					mcstack_pop(&stack_tmp, stack_data.prio);
 8002514:	7b7a      	ldrb	r2, [r7, #13]
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f000 f87f 	bl	8002620 <mcstack_pop>
					flag = STACK_PRIOLIST_ERROR;
 8002522:	2313      	movs	r3, #19
 8002524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002528:	e03f      	b.n	80025aa <z_mc_stack_insert+0x17a>
				}
			}
			else
			{
				flag = CMR_UNITBUSY;
 800252a:	2309      	movs	r3, #9
 800252c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002530:	e03b      	b.n	80025aa <z_mc_stack_insert+0x17a>
		};
	}
	else //d.h. der Befehl wird an die Zentrale gesendet
	{

		push_result = stacks_insert_cmd(zentrale_stack, Z_STACK_SIZE, zstackindex_list, stack_data, &zstackindex_list_act, &stack_index);
 8002532:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8002536:	9304      	str	r3, [sp, #16]
 8002538:	4b26      	ldr	r3, [pc, #152]	@ (80025d4 <z_mc_stack_insert+0x1a4>)
 800253a:	9303      	str	r3, [sp, #12]
 800253c:	466c      	mov	r4, sp
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4a23      	ldr	r2, [pc, #140]	@ (80025d8 <z_mc_stack_insert+0x1a8>)
 800254c:	211e      	movs	r1, #30
 800254e:	4823      	ldr	r0, [pc, #140]	@ (80025dc <z_mc_stack_insert+0x1ac>)
 8002550:	f7ff ff32 	bl	80023b8 <stacks_insert_cmd>
 8002554:	4603      	mov	r3, r0
 8002556:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		if (push_result == STACK_INTSERT_OK)
 800255a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800255e:	2b14      	cmp	r3, #20
 8002560:	d120      	bne.n	80025a4 <z_mc_stack_insert+0x174>
		{
			prio_pushflg = priolist_push(z_priolist, Z_STACK_SIZE, z_priolevel_header, &zpriolist_firstunused_index, stack_index, stack_data.prio);
 8002562:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002566:	7b7a      	ldrb	r2, [r7, #13]
 8002568:	9201      	str	r2, [sp, #4]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	4b1c      	ldr	r3, [pc, #112]	@ (80025e0 <z_mc_stack_insert+0x1b0>)
 800256e:	4a1d      	ldr	r2, [pc, #116]	@ (80025e4 <z_mc_stack_insert+0x1b4>)
 8002570:	211e      	movs	r1, #30
 8002572:	481d      	ldr	r0, [pc, #116]	@ (80025e8 <z_mc_stack_insert+0x1b8>)
 8002574:	f7fe fc6b 	bl	8000e4e <priolist_push>
 8002578:	4603      	mov	r3, r0
 800257a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			if (prio_pushflg )
 800257e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <z_mc_stack_insert+0x15e>
			{
				flag = STACK_CMDINSTACK;
 8002586:	2311      	movs	r3, #17
 8002588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800258c:	e00d      	b.n	80025aa <z_mc_stack_insert+0x17a>
			}
			else
			{
				zstack_pop(&stack_tmp, stack_data.prio);
 800258e:	7b7a      	ldrb	r2, [r7, #13]
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f898 	bl	80026cc <zstack_pop>
				flag = STACK_PRIOLIST_ERROR;
 800259c:	2313      	movs	r3, #19
 800259e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80025a2:	e002      	b.n	80025aa <z_mc_stack_insert+0x17a>
			} ;
		}
		else
		{

			flag = CMR_UNITBUSY;
 80025a4:	2309      	movs	r3, #9
 80025a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		};
	};
	return flag;
 80025aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	372c      	adds	r7, #44	@ 0x2c
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd90      	pop	{r4, r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200008e6 	.word	0x200008e6
 80025bc:	200008e5 	.word	0x200008e5
 80025c0:	200008d0 	.word	0x200008d0
 80025c4:	20000770 	.word	0x20000770
 80025c8:	20000114 	.word	0x20000114
 80025cc:	20000110 	.word	0x20000110
 80025d0:	200000e4 	.word	0x200000e4
 80025d4:	200008e4 	.word	0x200008e4
 80025d8:	200008b0 	.word	0x200008b0
 80025dc:	20000590 	.word	0x20000590
 80025e0:	20000113 	.word	0x20000113
 80025e4:	2000010c 	.word	0x2000010c
 80025e8:	200000a8 	.word	0x200000a8

080025ec <stack_insert_sero>:



uint8_t stack_insert_sero(stack_item stack_data)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b089      	sub	sp, #36	@ 0x24
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	463c      	mov	r4, r7
 80025f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t flag = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	75fb      	strb	r3, [r7, #23]
	uint8_t mc_flg = 0;                            //bezeichnet, dass der Befehl für die Zentrale ist, wenn es 0 ist; für den MC , wenn es 1 ist.
 80025fc:	2300      	movs	r3, #0
 80025fe:	75bb      	strb	r3, [r7, #22]

	//hier gibt es nur die Befehle für die Zentrale,

	mc_flg = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	75bb      	strb	r3, [r7, #22]
	flag = z_mc_stack_insert(stack_data, mc_flg);
 8002604:	7dbb      	ldrb	r3, [r7, #22]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	463b      	mov	r3, r7
 800260a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800260c:	f7ff ff10 	bl	8002430 <z_mc_stack_insert>
 8002610:	4603      	mov	r3, r0
 8002612:	75fb      	strb	r3, [r7, #23]
	return flag;
 8002614:	7dfb      	ldrb	r3, [r7, #23]
}
 8002616:	4618      	mov	r0, r3
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd90      	pop	{r4, r7, pc}
	...

08002620 <mcstack_pop>:


uint8_t mcstack_pop(stack_item *sitem, uint8_t priolevel)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	70fb      	strb	r3, [r7, #3]
	uint8_t flag = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]
	uint8_t sindex;

	sindex = priolist_pop(mc_priolist, mc_priolevel_header, &mcpriolist_firstunused_index, priolevel);
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	4a1f      	ldr	r2, [pc, #124]	@ (80026b0 <mcstack_pop+0x90>)
 8002634:	491f      	ldr	r1, [pc, #124]	@ (80026b4 <mcstack_pop+0x94>)
 8002636:	4820      	ldr	r0, [pc, #128]	@ (80026b8 <mcstack_pop+0x98>)
 8002638:	f7fe fcb5 	bl	8000fa6 <priolist_pop>
 800263c:	4603      	mov	r3, r0
 800263e:	73bb      	strb	r3, [r7, #14]
	if (sindex == NONEXT)  // die zu der Priorität entsprechende MCStacklist ist leer
 8002640:	7bbb      	ldrb	r3, [r7, #14]
 8002642:	2bff      	cmp	r3, #255	@ 0xff
 8002644:	d102      	bne.n	800264c <mcstack_pop+0x2c>
	{
		flag = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	e02c      	b.n	80026a6 <mcstack_pop+0x86>

	}
	else
	{

			*sitem = mc_stack[sindex];
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4a1a      	ldr	r2, [pc, #104]	@ (80026bc <mcstack_pop+0x9c>)
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	4413      	add	r3, r2
 8002656:	460c      	mov	r4, r1
 8002658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800265a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if (mcstackindex_list_act == NONEXT)
 800265e:	4b18      	ldr	r3, [pc, #96]	@ (80026c0 <mcstack_pop+0xa0>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2bff      	cmp	r3, #255	@ 0xff
 8002664:	d103      	bne.n	800266e <mcstack_pop+0x4e>
			{
				mcstackindex_list_act =0;
 8002666:	4b16      	ldr	r3, [pc, #88]	@ (80026c0 <mcstack_pop+0xa0>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e005      	b.n	800267a <mcstack_pop+0x5a>

			}
			else
			{
				mcstackindex_list_act +=1;
 800266e:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <mcstack_pop+0xa0>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	3301      	adds	r3, #1
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <mcstack_pop+0xa0>)
 8002678:	701a      	strb	r2, [r3, #0]

			};

			mcstackindex_list[mcstackindex_list_act] = sindex;
 800267a:	4b11      	ldr	r3, [pc, #68]	@ (80026c0 <mcstack_pop+0xa0>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	4619      	mov	r1, r3
 8002680:	4a10      	ldr	r2, [pc, #64]	@ (80026c4 <mcstack_pop+0xa4>)
 8002682:	7bbb      	ldrb	r3, [r7, #14]
 8002684:	5453      	strb	r3, [r2, r1]

			if (mc_stack[sindex].cmd_sender != Q_ZENTRALE)
 8002686:	7bbb      	ldrb	r3, [r7, #14]
 8002688:	4a0c      	ldr	r2, [pc, #48]	@ (80026bc <mcstack_pop+0x9c>)
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	4413      	add	r3, r2
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d006      	beq.n	80026a2 <mcstack_pop+0x82>
			{
				mcstack_rest_length += 1;
 8002694:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <mcstack_pop+0xa8>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <mcstack_pop+0xa8>)
 80026a0:	701a      	strb	r2, [r3, #0]
			};

			flag = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]

	};
	return flag;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd90      	pop	{r4, r7, pc}
 80026b0:	20000114 	.word	0x20000114
 80026b4:	20000110 	.word	0x20000110
 80026b8:	200000e4 	.word	0x200000e4
 80026bc:	20000770 	.word	0x20000770
 80026c0:	200008e5 	.word	0x200008e5
 80026c4:	200008d0 	.word	0x200008d0
 80026c8:	200008e6 	.word	0x200008e6

080026cc <zstack_pop>:

uint8_t zstack_pop(stack_item *sitem, uint8_t priolevel)
{
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
	uint8_t flag = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
	uint8_t sindex;
	//uint8_t indexlist_tmp;

	sindex =  priolist_pop(z_priolist, z_priolevel_header, &zpriolist_firstunused_index, priolevel);
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	4a18      	ldr	r2, [pc, #96]	@ (8002740 <zstack_pop+0x74>)
 80026e0:	4918      	ldr	r1, [pc, #96]	@ (8002744 <zstack_pop+0x78>)
 80026e2:	4819      	ldr	r0, [pc, #100]	@ (8002748 <zstack_pop+0x7c>)
 80026e4:	f7fe fc5f 	bl	8000fa6 <priolist_pop>
 80026e8:	4603      	mov	r3, r0
 80026ea:	73bb      	strb	r3, [r7, #14]

	if (sindex == NONEXT)  // die zu der Priorität entsprechende MCStacklist ist leer
 80026ec:	7bbb      	ldrb	r3, [r7, #14]
 80026ee:	2bff      	cmp	r3, #255	@ 0xff
 80026f0:	d102      	bne.n	80026f8 <zstack_pop+0x2c>
	{
		flag = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	e01e      	b.n	8002736 <zstack_pop+0x6a>

	}
	else
	{
		*sitem = zentrale_stack[sindex];
 80026f8:	7bbb      	ldrb	r3, [r7, #14]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4a13      	ldr	r2, [pc, #76]	@ (800274c <zstack_pop+0x80>)
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	4413      	add	r3, r2
 8002702:	460c      	mov	r4, r1
 8002704:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002706:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if (zstackindex_list_act == NONEXT)
 800270a:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <zstack_pop+0x84>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2bff      	cmp	r3, #255	@ 0xff
 8002710:	d103      	bne.n	800271a <zstack_pop+0x4e>
		{
			zstackindex_list_act = 0;
 8002712:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <zstack_pop+0x84>)
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e005      	b.n	8002726 <zstack_pop+0x5a>
		}
		else
		{
			zstackindex_list_act +=1;
 800271a:	4b0d      	ldr	r3, [pc, #52]	@ (8002750 <zstack_pop+0x84>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <zstack_pop+0x84>)
 8002724:	701a      	strb	r2, [r3, #0]
		};
		zstackindex_list[zstackindex_list_act] = sindex;
 8002726:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <zstack_pop+0x84>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4619      	mov	r1, r3
 800272c:	4a09      	ldr	r2, [pc, #36]	@ (8002754 <zstack_pop+0x88>)
 800272e:	7bbb      	ldrb	r3, [r7, #14]
 8002730:	5453      	strb	r3, [r2, r1]

		flag = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]

	};
	return flag;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bd90      	pop	{r4, r7, pc}
 8002740:	20000113 	.word	0x20000113
 8002744:	2000010c 	.word	0x2000010c
 8002748:	200000a8 	.word	0x200000a8
 800274c:	20000590 	.word	0x20000590
 8002750:	200008e4 	.word	0x200008e4
 8002754:	200008b0 	.word	0x200008b0

08002758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275e:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <HAL_MspInit+0x44>)
 8002760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002762:	4a0e      	ldr	r2, [pc, #56]	@ (800279c <HAL_MspInit+0x44>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6613      	str	r3, [r2, #96]	@ 0x60
 800276a:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <HAL_MspInit+0x44>)
 800276c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4b09      	ldr	r3, [pc, #36]	@ (800279c <HAL_MspInit+0x44>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277a:	4a08      	ldr	r2, [pc, #32]	@ (800279c <HAL_MspInit+0x44>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002780:	6593      	str	r3, [r2, #88]	@ 0x58
 8002782:	4b06      	ldr	r3, [pc, #24]	@ (800279c <HAL_MspInit+0x44>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800278e:	f001 ff3d 	bl	800460c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000

080027a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <NMI_Handler+0x4>

080027a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <HardFault_Handler+0x4>

080027b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b4:	bf00      	nop
 80027b6:	e7fd      	b.n	80027b4 <MemManage_Handler+0x4>

080027b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <BusFault_Handler+0x4>

080027c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <UsageFault_Handler+0x4>

080027c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f6:	f001 fb17 	bl	8003e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002808:	4a14      	ldr	r2, [pc, #80]	@ (800285c <_sbrk+0x5c>)
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <_sbrk+0x60>)
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002814:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <_sbrk+0x64>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d102      	bne.n	8002822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800281c:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <_sbrk+0x64>)
 800281e:	4a12      	ldr	r2, [pc, #72]	@ (8002868 <_sbrk+0x68>)
 8002820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002822:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <_sbrk+0x64>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	429a      	cmp	r2, r3
 800282e:	d207      	bcs.n	8002840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002830:	f005 fb06 	bl	8007e40 <__errno>
 8002834:	4603      	mov	r3, r0
 8002836:	220c      	movs	r2, #12
 8002838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800283a:	f04f 33ff 	mov.w	r3, #4294967295
 800283e:	e009      	b.n	8002854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002840:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <_sbrk+0x64>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002846:	4b07      	ldr	r3, [pc, #28]	@ (8002864 <_sbrk+0x64>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	4a05      	ldr	r2, [pc, #20]	@ (8002864 <_sbrk+0x64>)
 8002850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002852:	68fb      	ldr	r3, [r7, #12]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20020000 	.word	0x20020000
 8002860:	00000400 	.word	0x00000400
 8002864:	200008e8 	.word	0x200008e8
 8002868:	200013b8 	.word	0x200013b8

0800286c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002870:	4b06      	ldr	r3, [pc, #24]	@ (800288c <SystemInit+0x20>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002876:	4a05      	ldr	r2, [pc, #20]	@ (800288c <SystemInit+0x20>)
 8002878:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800287c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08c      	sub	sp, #48	@ 0x30
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002896:	f107 0320 	add.w	r3, r7, #32
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80028a4:	f107 030c 	add.w	r3, r7, #12
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b4:	463b      	mov	r3, r7
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028be:	4b27      	ldr	r3, [pc, #156]	@ (800295c <MX_TIM1_Init+0xcc>)
 80028c0:	4a27      	ldr	r2, [pc, #156]	@ (8002960 <MX_TIM1_Init+0xd0>)
 80028c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80028c4:	4b25      	ldr	r3, [pc, #148]	@ (800295c <MX_TIM1_Init+0xcc>)
 80028c6:	22a0      	movs	r2, #160	@ 0xa0
 80028c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ca:	4b24      	ldr	r3, [pc, #144]	@ (800295c <MX_TIM1_Init+0xcc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59;
 80028d0:	4b22      	ldr	r3, [pc, #136]	@ (800295c <MX_TIM1_Init+0xcc>)
 80028d2:	223b      	movs	r2, #59	@ 0x3b
 80028d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d6:	4b21      	ldr	r3, [pc, #132]	@ (800295c <MX_TIM1_Init+0xcc>)
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028dc:	4b1f      	ldr	r3, [pc, #124]	@ (800295c <MX_TIM1_Init+0xcc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e2:	4b1e      	ldr	r3, [pc, #120]	@ (800295c <MX_TIM1_Init+0xcc>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028e8:	481c      	ldr	r0, [pc, #112]	@ (800295c <MX_TIM1_Init+0xcc>)
 80028ea:	f002 fec6 	bl	800567a <HAL_TIM_Base_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80028f4:	f7fe faa5 	bl	8000e42 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028fe:	f107 0320 	add.w	r3, r7, #32
 8002902:	4619      	mov	r1, r3
 8002904:	4815      	ldr	r0, [pc, #84]	@ (800295c <MX_TIM1_Init+0xcc>)
 8002906:	f002 ff0f 	bl	8005728 <HAL_TIM_ConfigClockSource>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002910:	f7fe fa97 	bl	8000e42 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002918:	2300      	movs	r3, #0
 800291a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	4619      	mov	r1, r3
 8002922:	480e      	ldr	r0, [pc, #56]	@ (800295c <MX_TIM1_Init+0xcc>)
 8002924:	f003 f80c 	bl	8005940 <HAL_TIM_SlaveConfigSynchro>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800292e:	f7fe fa88 	bl	8000e42 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800293e:	463b      	mov	r3, r7
 8002940:	4619      	mov	r1, r3
 8002942:	4806      	ldr	r0, [pc, #24]	@ (800295c <MX_TIM1_Init+0xcc>)
 8002944:	f003 fa64 	bl	8005e10 <HAL_TIMEx_MasterConfigSynchronization>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800294e:	f7fe fa78 	bl	8000e42 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002952:	bf00      	nop
 8002954:	3730      	adds	r7, #48	@ 0x30
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200008ec 	.word	0x200008ec
 8002960:	40012c00 	.word	0x40012c00

08002964 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <HAL_TIM_Base_MspInit+0x38>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10b      	bne.n	800298e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002976:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <HAL_TIM_Base_MspInit+0x3c>)
 8002978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297a:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <HAL_TIM_Base_MspInit+0x3c>)
 800297c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002980:	6613      	str	r3, [r2, #96]	@ 0x60
 8002982:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <HAL_TIM_Base_MspInit+0x3c>)
 8002984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002986:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40012c00 	.word	0x40012c00
 80029a0:	40021000 	.word	0x40021000

080029a4 <set_ct_hbeat>:
    else return 0;
}

// HEARTBEAT Stoppuhr setzen
void set_ct_hbeat(uint16_t ct_hbeatval)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
    ct_hbeat = ct_hbeatval;
 80029ae:	4a04      	ldr	r2, [pc, #16]	@ (80029c0 <set_ct_hbeat+0x1c>)
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	8013      	strh	r3, [r2, #0]

}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	20000938 	.word	0x20000938

080029c4 <ct_hbeat_null>:

// HEARTBEAT Stoppuhr abfragen
uint8_t ct_hbeat_null(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_hbeat;
 80029ca:	4b07      	ldr	r3, [pc, #28]	@ (80029e8 <ct_hbeat_null+0x24>)
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <ct_hbeat_null+0x16>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <ct_hbeat_null+0x18>
    else return 0;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	20000938 	.word	0x20000938

080029ec <ct_init_null>:

}

// INIT Stoppuhr abfragen
uint8_t ct_init_null(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_init;
 80029f2:	4b07      	ldr	r3, [pc, #28]	@ (8002a10 <ct_init_null+0x24>)
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <ct_init_null+0x16>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <ct_init_null+0x18>
    else return 0;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	2000093a 	.word	0x2000093a

08002a14 <HAL_UART_RxCpltCallback>:
int16_t rb_free_rx(UartRB *p);
int16_t rb_free_tx(UartRB *p);
//----- INTERRUPT ROUTINEN ----------------------------------------------------

// Reception interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	uartRB_OnRxCplt(&uart4_rb, huart);
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4807      	ldr	r0, [pc, #28]	@ (8002a3c <HAL_UART_RxCpltCallback+0x28>)
 8002a20:	f000 f812 	bl	8002a48 <uartRB_OnRxCplt>
	uartRB_OnRxCplt(&uart5_rb, huart);
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4806      	ldr	r0, [pc, #24]	@ (8002a40 <HAL_UART_RxCpltCallback+0x2c>)
 8002a28:	f000 f80e 	bl	8002a48 <uartRB_OnRxCplt>
	uartRB_OnRxCplt(&usart1_rb, huart);
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4805      	ldr	r0, [pc, #20]	@ (8002a44 <HAL_UART_RxCpltCallback+0x30>)
 8002a30:	f000 f80a 	bl	8002a48 <uartRB_OnRxCplt>
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	2000093c 	.word	0x2000093c
 8002a40:	20000acc 	.word	0x20000acc
 8002a44:	20000c5c 	.word	0x20000c5c

08002a48 <uartRB_OnRxCplt>:
	uartRB_OnTxCplt(&uart4_rb, huart);
	uartRB_OnTxCplt(&uart5_rb, huart);
	uartRB_OnTxCplt(&usart1_rb, huart);
}

void uartRB_OnRxCplt(UartRB *p, UART_HandleTypeDef *huart) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
	if (huart != p->huart)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d12d      	bne.n	8002ab8 <uartRB_OnRxCplt+0x70>
		return;

	if (1 < rb_free_rx(p))                        // noch Platz f�r ein Zeichen?
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f8ac 	bl	8002bba <rb_free_rx>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	dd19      	ble.n	8002a9c <uartRB_OnRxCplt+0x54>
			{
		p->rx[p->rx_in] = p->it_rx;                      // Zeichen �bernehmen
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	895b      	ldrh	r3, [r3, #10]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	4619      	mov	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	440b      	add	r3, r1
 8002a7a:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		p->rx_in++;                                       // Zeiger weiterr�cken
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	895b      	ldrh	r3, [r3, #10]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3301      	adds	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	815a      	strh	r2, [r3, #10]
		if (p->rx_in >= BUFLEN)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	895b      	ldrh	r3, [r3, #10]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b7e      	cmp	r3, #126	@ 0x7e
 8002a94:	d902      	bls.n	8002a9c <uartRB_OnRxCplt+0x54>
			p->rx_in = 0;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	815a      	strh	r2, [r3, #10]
	}

	while (HAL_UART_Receive_IT(p->huart, &p->it_rx, 1) != HAL_OK) {
 8002a9c:	bf00      	nop
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f003 fb2a 	bl	8006104 <HAL_UART_Receive_IT>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f3      	bne.n	8002a9e <uartRB_OnRxCplt+0x56>
 8002ab6:	e000      	b.n	8002aba <uartRB_OnRxCplt+0x72>
		return;
 8002ab8:	bf00      	nop
	}
}
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <uart_initAll>:

//----- FUNKTIONSDEFINITIONEN -------------------------------------------------

/******************** RS232 ***********************/

void uart_initAll(void) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
	uartRB_Init(&uart4_rb, &huart4, UART4_IRQn);
 8002ac4:	2234      	movs	r2, #52	@ 0x34
 8002ac6:	490a      	ldr	r1, [pc, #40]	@ (8002af0 <uart_initAll+0x30>)
 8002ac8:	480a      	ldr	r0, [pc, #40]	@ (8002af4 <uart_initAll+0x34>)
 8002aca:	f000 f821 	bl	8002b10 <uartRB_Init>
	uartRB_Init(&uart5_rb, &huart5, UART5_IRQn);
 8002ace:	2235      	movs	r2, #53	@ 0x35
 8002ad0:	4909      	ldr	r1, [pc, #36]	@ (8002af8 <uart_initAll+0x38>)
 8002ad2:	480a      	ldr	r0, [pc, #40]	@ (8002afc <uart_initAll+0x3c>)
 8002ad4:	f000 f81c 	bl	8002b10 <uartRB_Init>
	uartRB_Init(&usart1_rb, &huart1, USART1_IRQn);
 8002ad8:	2225      	movs	r2, #37	@ 0x25
 8002ada:	4909      	ldr	r1, [pc, #36]	@ (8002b00 <uart_initAll+0x40>)
 8002adc:	4809      	ldr	r0, [pc, #36]	@ (8002b04 <uart_initAll+0x44>)
 8002ade:	f000 f817 	bl	8002b10 <uartRB_Init>
	uartRB_Init(&usart3_rb, &huart3, USART3_IRQn);
 8002ae2:	2227      	movs	r2, #39	@ 0x27
 8002ae4:	4908      	ldr	r1, [pc, #32]	@ (8002b08 <uart_initAll+0x48>)
 8002ae6:	4809      	ldr	r0, [pc, #36]	@ (8002b0c <uart_initAll+0x4c>)
 8002ae8:	f000 f812 	bl	8002b10 <uartRB_Init>
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000f7c 	.word	0x20000f7c
 8002af4:	2000093c 	.word	0x2000093c
 8002af8:	20001010 	.word	0x20001010
 8002afc:	20000acc 	.word	0x20000acc
 8002b00:	200010a4 	.word	0x200010a4
 8002b04:	20000c5c 	.word	0x20000c5c
 8002b08:	200011cc 	.word	0x200011cc
 8002b0c:	20000dec 	.word	0x20000dec

08002b10 <uartRB_Init>:

void uartRB_Init(UartRB *p, UART_HandleTypeDef *huart, IRQn_Type irqn) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	71fb      	strb	r3, [r7, #7]
	p->huart = huart;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	601a      	str	r2, [r3, #0]
	p->irqn = irqn;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	79fa      	ldrb	r2, [r7, #7]
 8002b28:	711a      	strb	r2, [r3, #4]
	p->tx_in = p->tx_out = p->rx_in = p->rx_out = 0;
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	8199      	strh	r1, [r3, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4611      	mov	r1, r2
 8002b36:	8159      	strh	r1, [r3, #10]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	8119      	strh	r1, [r3, #8]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	80da      	strh	r2, [r3, #6]
	HAL_UART_Receive_IT(p->huart, &p->it_rx, 1);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f003 fad8 	bl	8006104 <HAL_UART_Receive_IT>
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <rb_free_tx>:

int16_t rb_free_tx(UartRB *p) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	int16_t x;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 fac3 	bl	80040f6 <HAL_NVIC_DisableIRQ>
	x = (int16_t) p->tx_in - (int8_t) p->tx_out;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	88db      	ldrh	r3, [r3, #6]
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	891b      	ldrh	r3, [r3, #8]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 8002b86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	da03      	bge.n	8002b96 <rb_free_tx+0x3a>
		x += BUFLEN;
 8002b8e:	89fb      	ldrh	r3, [r7, #14]
 8002b90:	337f      	adds	r3, #127	@ 0x7f
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	81fb      	strh	r3, [r7, #14]
	x = BUFLEN - x;
 8002b96:	89fb      	ldrh	r3, [r7, #14]
 8002b98:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_EnableIRQ(p->irqn);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 fa97 	bl	80040da <HAL_NVIC_EnableIRQ>
	return (uint8_t) x;
 8002bac:	89fb      	ldrh	r3, [r7, #14]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	b21b      	sxth	r3, r3
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <rb_free_rx>:

int16_t rb_free_rx(UartRB *p) {
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
	int16_t x;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 fa94 	bl	80040f6 <HAL_NVIC_DisableIRQ>
	x = p->rx_in - p->rx_out;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	895b      	ldrh	r3, [r3, #10]
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	899b      	ldrh	r3, [r3, #12]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 8002be0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	da03      	bge.n	8002bf0 <rb_free_rx+0x36>
		x += BUFLEN;
 8002be8:	89fb      	ldrh	r3, [r7, #14]
 8002bea:	337f      	adds	r3, #127	@ 0x7f
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	81fb      	strh	r3, [r7, #14]
	x = BUFLEN - x;
 8002bf0:	89fb      	ldrh	r3, [r7, #14]
 8002bf2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_EnableIRQ(p->irqn);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f001 fa6a 	bl	80040da <HAL_NVIC_EnableIRQ>
	return x;
 8002c06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <rb_rx_used>:

int16_t rb_rx_used(const UartRB *p)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
	int16_t used;
    HAL_NVIC_DisableIRQ(p->irqn);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 fa68 	bl	80040f6 <HAL_NVIC_DisableIRQ>
    used = (int16_t)p->rx_in - (int32_t)p->rx_out;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	895b      	ldrh	r3, [r3, #10]
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	899b      	ldrh	r3, [r3, #12]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	81fb      	strh	r3, [r7, #14]
    if (used < 0) used += BUFLEN;
 8002c38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	da03      	bge.n	8002c48 <rb_rx_used+0x36>
 8002c40:	89fb      	ldrh	r3, [r7, #14]
 8002c42:	337f      	adds	r3, #127	@ 0x7f
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	81fb      	strh	r3, [r7, #14]
    HAL_NVIC_EnableIRQ(p->irqn);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f001 fa43 	bl	80040da <HAL_NVIC_EnableIRQ>
    return used;
 8002c54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <uartRB_KickTx>:

// is this correct
void uartRB_KickTx(UartRB *p) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

	if (__HAL_UART_GET_FLAG(p->huart, UART_FLAG_TC) == 0)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c74:	2b40      	cmp	r3, #64	@ 0x40
 8002c76:	d134      	bne.n	8002ce2 <uartRB_KickTx+0x82>
		return;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f001 fa39 	bl	80040f6 <HAL_NVIC_DisableIRQ>
// No, we still have something to transmit?
	int16_t free = rb_free_tx(p);          // how many free slots in TX ring
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff69 	bl	8002b5c <rb_free_tx>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	81fb      	strh	r3, [r7, #14]
	int16_t tmpBuf_out = p->tx_out;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	891b      	ldrh	r3, [r3, #8]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	81bb      	strh	r3, [r7, #12]
	if (free < BUFLEN) {               // => there is at least 1 byte pending
 8002c96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c9a:	2b7e      	cmp	r3, #126	@ 0x7e
 8002c9c:	dc1a      	bgt.n	8002cd4 <uartRB_KickTx+0x74>
		p->tx_out++;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	891b      	ldrh	r3, [r3, #8]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	811a      	strh	r2, [r3, #8]
		if (p->tx_out >= BUFLEN) p->tx_out = 0;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	891b      	ldrh	r3, [r3, #8]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b7e      	cmp	r3, #126	@ 0x7e
 8002cb4:	d902      	bls.n	8002cbc <uartRB_KickTx+0x5c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	811a      	strh	r2, [r3, #8]
		HAL_UART_Transmit_IT(p->huart, &p->tx[tmpBuf_out], 1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	3306      	adds	r3, #6
 8002ccc:	2201      	movs	r2, #1
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f003 f984 	bl	8005fdc <HAL_UART_Transmit_IT>
	}
	HAL_NVIC_EnableIRQ(p->irqn);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 f9fd 	bl	80040da <HAL_NVIC_EnableIRQ>
 8002ce0:	e000      	b.n	8002ce4 <uartRB_KickTx+0x84>
		return;
 8002ce2:	bf00      	nop
}
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <uartRB_Put>:

uint8_t uartRB_Put(UartRB *p, const void *buf, uint8_t n) {
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(p->irqn);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 f9f8 	bl	80040f6 <HAL_NVIC_DisableIRQ>
	const uint8_t *src = (const uint8_t *)buf;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	613b      	str	r3, [r7, #16]
	if (n > rb_free_tx(p)){
 8002d0a:	79fc      	ldrb	r4, [r7, #7]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff ff25 	bl	8002b5c <rb_free_tx>
 8002d12:	4603      	mov	r3, r0
 8002d14:	429c      	cmp	r4, r3
 8002d16:	dd07      	ble.n	8002d28 <uartRB_Put+0x3c>
		HAL_NVIC_EnableIRQ(p->irqn);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 f9db 	bl	80040da <HAL_NVIC_EnableIRQ>
		return 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e02f      	b.n	8002d88 <uartRB_Put+0x9c>
	}
	for (uint8_t i = 1; i <= n; i++) {
 8002d28:	2301      	movs	r3, #1
 8002d2a:	75fb      	strb	r3, [r7, #23]
 8002d2c:	e021      	b.n	8002d72 <uartRB_Put+0x86>
		p->tx[p->tx_in] = src[i-1];
 8002d2e:	7dfb      	ldrb	r3, [r7, #23]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	88d2      	ldrh	r2, [r2, #6]
 8002d3a:	b292      	uxth	r2, r2
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	781a      	ldrb	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	440b      	add	r3, r1
 8002d44:	739a      	strb	r2, [r3, #14]
		p->tx_in = (uint8_t) ((p->tx_in + 1) % BUFLEN);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	88db      	ldrh	r3, [r3, #6]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <uartRB_Put+0xa4>)
 8002d50:	fb83 1302 	smull	r1, r3, r3, r2
 8002d54:	4413      	add	r3, r2
 8002d56:	1199      	asrs	r1, r3, #6
 8002d58:	17d3      	asrs	r3, r2, #31
 8002d5a:	1ac9      	subs	r1, r1, r3
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	01db      	lsls	r3, r3, #7
 8002d60:	1a5b      	subs	r3, r3, r1
 8002d62:	1ad1      	subs	r1, r2, r3
 8002d64:	b2cb      	uxtb	r3, r1
 8002d66:	461a      	mov	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	80da      	strh	r2, [r3, #6]
	for (uint8_t i = 1; i <= n; i++) {
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
 8002d72:	7dfa      	ldrb	r2, [r7, #23]
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d9d9      	bls.n	8002d2e <uartRB_Put+0x42>
	}
	HAL_NVIC_EnableIRQ(p->irqn);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f001 f9aa 	bl	80040da <HAL_NVIC_EnableIRQ>
	return 1;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd90      	pop	{r4, r7, pc}
 8002d90:	81020409 	.word	0x81020409

08002d94 <uartRB_Getc>:

uint8_t uartRB_Getc(UartRB *p) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	uint8_t c;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f001 f9a7 	bl	80040f6 <HAL_NVIC_DisableIRQ>
	c = p->rx[p->rx_out];
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	899b      	ldrh	r3, [r3, #12]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002db8:	73fb      	strb	r3, [r7, #15]
	p->rx_out++;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	899b      	ldrh	r3, [r3, #12]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	819a      	strh	r2, [r3, #12]
	if (p->rx_out >= BUFLEN) p->rx_out = 0;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	899b      	ldrh	r3, [r3, #12]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b7e      	cmp	r3, #126	@ 0x7e
 8002dd0:	d902      	bls.n	8002dd8 <uartRB_Getc+0x44>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	819a      	strh	r2, [r3, #12]
	HAL_NVIC_EnableIRQ(p->irqn);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 f97b 	bl	80040da <HAL_NVIC_EnableIRQ>
	return c;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002df4:	4b22      	ldr	r3, [pc, #136]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002df6:	4a23      	ldr	r2, [pc, #140]	@ (8002e84 <MX_UART4_Init+0x94>)
 8002df8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 19200;
 8002dfa:	4b21      	ldr	r3, [pc, #132]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002dfc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002e00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e02:	4b1f      	ldr	r3, [pc, #124]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e08:	4b1d      	ldr	r3, [pc, #116]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002e14:	4b1a      	ldr	r3, [pc, #104]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002e16:	220c      	movs	r2, #12
 8002e18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1a:	4b19      	ldr	r3, [pc, #100]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e20:	4b17      	ldr	r3, [pc, #92]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e26:	4b16      	ldr	r3, [pc, #88]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e2c:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e32:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e38:	4811      	ldr	r0, [pc, #68]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002e3a:	f003 f87f 	bl	8005f3c <HAL_UART_Init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002e44:	f7fd fffd 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e48:	2100      	movs	r1, #0
 8002e4a:	480d      	ldr	r0, [pc, #52]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002e4c:	f004 fef5 	bl	8007c3a <HAL_UARTEx_SetTxFifoThreshold>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002e56:	f7fd fff4 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4808      	ldr	r0, [pc, #32]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002e5e:	f004 ff2a 	bl	8007cb6 <HAL_UARTEx_SetRxFifoThreshold>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002e68:	f7fd ffeb 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002e6c:	4804      	ldr	r0, [pc, #16]	@ (8002e80 <MX_UART4_Init+0x90>)
 8002e6e:	f004 feab 	bl	8007bc8 <HAL_UARTEx_DisableFifoMode>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002e78:	f7fd ffe3 	bl	8000e42 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000f7c 	.word	0x20000f7c
 8002e84:	40004c00 	.word	0x40004c00

08002e88 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002e8c:	4b22      	ldr	r3, [pc, #136]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002e8e:	4a23      	ldr	r2, [pc, #140]	@ (8002f1c <MX_UART5_Init+0x94>)
 8002e90:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 8002e92:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002e94:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002e98:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002eac:	4b1a      	ldr	r3, [pc, #104]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002eae:	220c      	movs	r2, #12
 8002eb0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb2:	4b19      	ldr	r3, [pc, #100]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb8:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ebe:	4b16      	ldr	r3, [pc, #88]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ec4:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eca:	4b13      	ldr	r3, [pc, #76]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002ed0:	4811      	ldr	r0, [pc, #68]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002ed2:	f003 f833 	bl	8005f3c <HAL_UART_Init>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002edc:	f7fd ffb1 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	480d      	ldr	r0, [pc, #52]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002ee4:	f004 fea9 	bl	8007c3a <HAL_UARTEx_SetTxFifoThreshold>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002eee:	f7fd ffa8 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4808      	ldr	r0, [pc, #32]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002ef6:	f004 fede 	bl	8007cb6 <HAL_UARTEx_SetRxFifoThreshold>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002f00:	f7fd ff9f 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002f04:	4804      	ldr	r0, [pc, #16]	@ (8002f18 <MX_UART5_Init+0x90>)
 8002f06:	f004 fe5f 	bl	8007bc8 <HAL_UARTEx_DisableFifoMode>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002f10:	f7fd ff97 	bl	8000e42 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20001010 	.word	0x20001010
 8002f1c:	40005000 	.word	0x40005000

08002f20 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f24:	4b22      	ldr	r3, [pc, #136]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f26:	4a23      	ldr	r2, [pc, #140]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8002f2a:	4b21      	ldr	r3, [pc, #132]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f2c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002f30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f32:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f38:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f44:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f46:	220c      	movs	r2, #12
 8002f48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f4a:	4b19      	ldr	r3, [pc, #100]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f50:	4b17      	ldr	r3, [pc, #92]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f56:	4b16      	ldr	r3, [pc, #88]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f5c:	4b14      	ldr	r3, [pc, #80]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f62:	4b13      	ldr	r3, [pc, #76]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f68:	4811      	ldr	r0, [pc, #68]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f6a:	f002 ffe7 	bl	8005f3c <HAL_UART_Init>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f74:	f7fd ff65 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f78:	2100      	movs	r1, #0
 8002f7a:	480d      	ldr	r0, [pc, #52]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f7c:	f004 fe5d 	bl	8007c3a <HAL_UARTEx_SetTxFifoThreshold>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002f86:	f7fd ff5c 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4808      	ldr	r0, [pc, #32]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f8e:	f004 fe92 	bl	8007cb6 <HAL_UARTEx_SetRxFifoThreshold>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f98:	f7fd ff53 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f9c:	4804      	ldr	r0, [pc, #16]	@ (8002fb0 <MX_USART1_UART_Init+0x90>)
 8002f9e:	f004 fe13 	bl	8007bc8 <HAL_UARTEx_DisableFifoMode>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002fa8:	f7fd ff4b 	bl	8000e42 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200010a4 	.word	0x200010a4
 8002fb4:	40013800 	.word	0x40013800

08002fb8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fbc:	4b23      	ldr	r3, [pc, #140]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8002fbe:	4a24      	ldr	r2, [pc, #144]	@ (8003050 <MX_USART2_UART_Init+0x98>)
 8002fc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002fc2:	4b22      	ldr	r3, [pc, #136]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8002fc4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002fc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fca:	4b20      	ldr	r3, [pc, #128]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8002fde:	220c      	movs	r2, #12
 8002fe0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8002fe4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002fe8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fea:	4b18      	ldr	r3, [pc, #96]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ff0:	4b16      	ldr	r3, [pc, #88]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ff6:	4b15      	ldr	r3, [pc, #84]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ffc:	4b13      	ldr	r3, [pc, #76]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003002:	4812      	ldr	r0, [pc, #72]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8003004:	f002 ff9a 	bl	8005f3c <HAL_UART_Init>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800300e:	f7fd ff18 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003012:	2100      	movs	r1, #0
 8003014:	480d      	ldr	r0, [pc, #52]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8003016:	f004 fe10 	bl	8007c3a <HAL_UARTEx_SetTxFifoThreshold>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8003020:	f7fd ff0f 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003024:	2100      	movs	r1, #0
 8003026:	4809      	ldr	r0, [pc, #36]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8003028:	f004 fe45 	bl	8007cb6 <HAL_UARTEx_SetRxFifoThreshold>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8003032:	f7fd ff06 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003036:	4805      	ldr	r0, [pc, #20]	@ (800304c <MX_USART2_UART_Init+0x94>)
 8003038:	f004 fdc6 	bl	8007bc8 <HAL_UARTEx_DisableFifoMode>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8003042:	f7fd fefe 	bl	8000e42 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20001138 	.word	0x20001138
 8003050:	40004400 	.word	0x40004400

08003054 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003058:	4b23      	ldr	r3, [pc, #140]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 800305a:	4a24      	ldr	r2, [pc, #144]	@ (80030ec <MX_USART3_UART_Init+0x98>)
 800305c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 800305e:	4b22      	ldr	r3, [pc, #136]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 8003060:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003064:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003066:	4b20      	ldr	r3, [pc, #128]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800306c:	4b1e      	ldr	r3, [pc, #120]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 800306e:	2200      	movs	r2, #0
 8003070:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003072:	4b1d      	ldr	r3, [pc, #116]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 8003074:	2200      	movs	r2, #0
 8003076:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003078:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 800307a:	220c      	movs	r2, #12
 800307c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800307e:	4b1a      	ldr	r3, [pc, #104]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 8003080:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003084:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003086:	4b18      	ldr	r3, [pc, #96]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 8003088:	2200      	movs	r2, #0
 800308a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800308c:	4b16      	ldr	r3, [pc, #88]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 800308e:	2200      	movs	r2, #0
 8003090:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003092:	4b15      	ldr	r3, [pc, #84]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 8003094:	2200      	movs	r2, #0
 8003096:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003098:	4b13      	ldr	r3, [pc, #76]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 800309a:	2200      	movs	r2, #0
 800309c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800309e:	4812      	ldr	r0, [pc, #72]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 80030a0:	f002 ff4c 	bl	8005f3c <HAL_UART_Init>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 80030aa:	f7fd feca 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030ae:	2100      	movs	r1, #0
 80030b0:	480d      	ldr	r0, [pc, #52]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 80030b2:	f004 fdc2 	bl	8007c3a <HAL_UARTEx_SetTxFifoThreshold>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 80030bc:	f7fd fec1 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030c0:	2100      	movs	r1, #0
 80030c2:	4809      	ldr	r0, [pc, #36]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 80030c4:	f004 fdf7 	bl	8007cb6 <HAL_UARTEx_SetRxFifoThreshold>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 80030ce:	f7fd feb8 	bl	8000e42 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80030d2:	4805      	ldr	r0, [pc, #20]	@ (80030e8 <MX_USART3_UART_Init+0x94>)
 80030d4:	f004 fd78 	bl	8007bc8 <HAL_UARTEx_DisableFifoMode>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 80030de:	f7fd feb0 	bl	8000e42 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	200011cc 	.word	0x200011cc
 80030ec:	40004800 	.word	0x40004800

080030f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b0a8      	sub	sp, #160	@ 0xa0
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003108:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800310c:	2254      	movs	r2, #84	@ 0x54
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f004 fe7d 	bl	8007e10 <memset>
  if(uartHandle->Instance==UART4)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a93      	ldr	r2, [pc, #588]	@ (8003368 <HAL_UART_MspInit+0x278>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d13c      	bne.n	800319a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003120:	2308      	movs	r3, #8
 8003122:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003124:	2300      	movs	r3, #0
 8003126:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003128:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800312c:	4618      	mov	r0, r3
 800312e:	f001 ffab 	bl	8005088 <HAL_RCCEx_PeriphCLKConfig>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003138:	f7fd fe83 	bl	8000e42 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800313c:	4b8b      	ldr	r3, [pc, #556]	@ (800336c <HAL_UART_MspInit+0x27c>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003140:	4a8a      	ldr	r2, [pc, #552]	@ (800336c <HAL_UART_MspInit+0x27c>)
 8003142:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003146:	6593      	str	r3, [r2, #88]	@ 0x58
 8003148:	4b88      	ldr	r3, [pc, #544]	@ (800336c <HAL_UART_MspInit+0x27c>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003150:	637b      	str	r3, [r7, #52]	@ 0x34
 8003152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003154:	4b85      	ldr	r3, [pc, #532]	@ (800336c <HAL_UART_MspInit+0x27c>)
 8003156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003158:	4a84      	ldr	r2, [pc, #528]	@ (800336c <HAL_UART_MspInit+0x27c>)
 800315a:	f043 0304 	orr.w	r3, r3, #4
 800315e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003160:	4b82      	ldr	r3, [pc, #520]	@ (800336c <HAL_UART_MspInit+0x27c>)
 8003162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	633b      	str	r3, [r7, #48]	@ 0x30
 800316a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800316c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003170:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003174:	2302      	movs	r3, #2
 8003176:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	2300      	movs	r3, #0
 8003182:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003186:	2305      	movs	r3, #5
 8003188:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800318c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003190:	4619      	mov	r1, r3
 8003192:	4877      	ldr	r0, [pc, #476]	@ (8003370 <HAL_UART_MspInit+0x280>)
 8003194:	f000 ffca 	bl	800412c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003198:	e157      	b.n	800344a <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==UART5)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a75      	ldr	r2, [pc, #468]	@ (8003374 <HAL_UART_MspInit+0x284>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d15d      	bne.n	8003260 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80031a4:	2310      	movs	r3, #16
 80031a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80031a8:	2300      	movs	r3, #0
 80031aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80031b0:	4618      	mov	r0, r3
 80031b2:	f001 ff69 	bl	8005088 <HAL_RCCEx_PeriphCLKConfig>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80031bc:	f7fd fe41 	bl	8000e42 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80031c0:	4b6a      	ldr	r3, [pc, #424]	@ (800336c <HAL_UART_MspInit+0x27c>)
 80031c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c4:	4a69      	ldr	r2, [pc, #420]	@ (800336c <HAL_UART_MspInit+0x27c>)
 80031c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80031cc:	4b67      	ldr	r3, [pc, #412]	@ (800336c <HAL_UART_MspInit+0x27c>)
 80031ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031d8:	4b64      	ldr	r3, [pc, #400]	@ (800336c <HAL_UART_MspInit+0x27c>)
 80031da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031dc:	4a63      	ldr	r2, [pc, #396]	@ (800336c <HAL_UART_MspInit+0x27c>)
 80031de:	f043 0304 	orr.w	r3, r3, #4
 80031e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031e4:	4b61      	ldr	r3, [pc, #388]	@ (800336c <HAL_UART_MspInit+0x27c>)
 80031e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031f0:	4b5e      	ldr	r3, [pc, #376]	@ (800336c <HAL_UART_MspInit+0x27c>)
 80031f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f4:	4a5d      	ldr	r2, [pc, #372]	@ (800336c <HAL_UART_MspInit+0x27c>)
 80031f6:	f043 0308 	orr.w	r3, r3, #8
 80031fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031fc:	4b5b      	ldr	r3, [pc, #364]	@ (800336c <HAL_UART_MspInit+0x27c>)
 80031fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	627b      	str	r3, [r7, #36]	@ 0x24
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800320c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321c:	2300      	movs	r3, #0
 800321e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003222:	2305      	movs	r3, #5
 8003224:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003228:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800322c:	4619      	mov	r1, r3
 800322e:	4850      	ldr	r0, [pc, #320]	@ (8003370 <HAL_UART_MspInit+0x280>)
 8003230:	f000 ff7c 	bl	800412c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003234:	2304      	movs	r3, #4
 8003236:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323a:	2302      	movs	r3, #2
 800323c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003246:	2300      	movs	r3, #0
 8003248:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800324c:	2305      	movs	r3, #5
 800324e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003252:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003256:	4619      	mov	r1, r3
 8003258:	4847      	ldr	r0, [pc, #284]	@ (8003378 <HAL_UART_MspInit+0x288>)
 800325a:	f000 ff67 	bl	800412c <HAL_GPIO_Init>
}
 800325e:	e0f4      	b.n	800344a <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==USART1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a45      	ldr	r2, [pc, #276]	@ (800337c <HAL_UART_MspInit+0x28c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d13b      	bne.n	80032e2 <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800326a:	2301      	movs	r3, #1
 800326c:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800326e:	2300      	movs	r3, #0
 8003270:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003272:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003276:	4618      	mov	r0, r3
 8003278:	f001 ff06 	bl	8005088 <HAL_RCCEx_PeriphCLKConfig>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_UART_MspInit+0x196>
      Error_Handler();
 8003282:	f7fd fdde 	bl	8000e42 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003286:	4b39      	ldr	r3, [pc, #228]	@ (800336c <HAL_UART_MspInit+0x27c>)
 8003288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328a:	4a38      	ldr	r2, [pc, #224]	@ (800336c <HAL_UART_MspInit+0x27c>)
 800328c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003290:	6613      	str	r3, [r2, #96]	@ 0x60
 8003292:	4b36      	ldr	r3, [pc, #216]	@ (800336c <HAL_UART_MspInit+0x27c>)
 8003294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800329a:	623b      	str	r3, [r7, #32]
 800329c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800329e:	4b33      	ldr	r3, [pc, #204]	@ (800336c <HAL_UART_MspInit+0x27c>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a2:	4a32      	ldr	r2, [pc, #200]	@ (800336c <HAL_UART_MspInit+0x27c>)
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032aa:	4b30      	ldr	r3, [pc, #192]	@ (800336c <HAL_UART_MspInit+0x27c>)
 80032ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80032b6:	2330      	movs	r3, #48	@ 0x30
 80032b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032ce:	2307      	movs	r3, #7
 80032d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032d4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80032d8:	4619      	mov	r1, r3
 80032da:	4825      	ldr	r0, [pc, #148]	@ (8003370 <HAL_UART_MspInit+0x280>)
 80032dc:	f000 ff26 	bl	800412c <HAL_GPIO_Init>
}
 80032e0:	e0b3      	b.n	800344a <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==USART2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a26      	ldr	r2, [pc, #152]	@ (8003380 <HAL_UART_MspInit+0x290>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d14b      	bne.n	8003384 <HAL_UART_MspInit+0x294>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032ec:	2302      	movs	r3, #2
 80032ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032f0:	2300      	movs	r3, #0
 80032f2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80032f8:	4618      	mov	r0, r3
 80032fa:	f001 fec5 	bl	8005088 <HAL_RCCEx_PeriphCLKConfig>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8003304:	f7fd fd9d 	bl	8000e42 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003308:	4b18      	ldr	r3, [pc, #96]	@ (800336c <HAL_UART_MspInit+0x27c>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330c:	4a17      	ldr	r2, [pc, #92]	@ (800336c <HAL_UART_MspInit+0x27c>)
 800330e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003312:	6593      	str	r3, [r2, #88]	@ 0x58
 8003314:	4b15      	ldr	r3, [pc, #84]	@ (800336c <HAL_UART_MspInit+0x27c>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003320:	4b12      	ldr	r3, [pc, #72]	@ (800336c <HAL_UART_MspInit+0x27c>)
 8003322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003324:	4a11      	ldr	r2, [pc, #68]	@ (800336c <HAL_UART_MspInit+0x27c>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800332c:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <HAL_UART_MspInit+0x27c>)
 800332e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003338:	230f      	movs	r3, #15
 800333a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334a:	2300      	movs	r3, #0
 800334c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003350:	2307      	movs	r3, #7
 8003352:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003356:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800335a:	4619      	mov	r1, r3
 800335c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003360:	f000 fee4 	bl	800412c <HAL_GPIO_Init>
}
 8003364:	e071      	b.n	800344a <HAL_UART_MspInit+0x35a>
 8003366:	bf00      	nop
 8003368:	40004c00 	.word	0x40004c00
 800336c:	40021000 	.word	0x40021000
 8003370:	48000800 	.word	0x48000800
 8003374:	40005000 	.word	0x40005000
 8003378:	48000c00 	.word	0x48000c00
 800337c:	40013800 	.word	0x40013800
 8003380:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a32      	ldr	r2, [pc, #200]	@ (8003454 <HAL_UART_MspInit+0x364>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d15d      	bne.n	800344a <HAL_UART_MspInit+0x35a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800338e:	2304      	movs	r3, #4
 8003390:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003392:	2300      	movs	r3, #0
 8003394:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003396:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800339a:	4618      	mov	r0, r3
 800339c:	f001 fe74 	bl	8005088 <HAL_RCCEx_PeriphCLKConfig>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 80033a6:	f7fd fd4c 	bl	8000e42 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003458 <HAL_UART_MspInit+0x368>)
 80033ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003458 <HAL_UART_MspInit+0x368>)
 80033b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80033b6:	4b28      	ldr	r3, [pc, #160]	@ (8003458 <HAL_UART_MspInit+0x368>)
 80033b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033c2:	4b25      	ldr	r3, [pc, #148]	@ (8003458 <HAL_UART_MspInit+0x368>)
 80033c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c6:	4a24      	ldr	r2, [pc, #144]	@ (8003458 <HAL_UART_MspInit+0x368>)
 80033c8:	f043 0310 	orr.w	r3, r3, #16
 80033cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033ce:	4b22      	ldr	r3, [pc, #136]	@ (8003458 <HAL_UART_MspInit+0x368>)
 80033d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033da:	4b1f      	ldr	r3, [pc, #124]	@ (8003458 <HAL_UART_MspInit+0x368>)
 80033dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033de:	4a1e      	ldr	r2, [pc, #120]	@ (8003458 <HAL_UART_MspInit+0x368>)
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003458 <HAL_UART_MspInit+0x368>)
 80033e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80033f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003406:	2300      	movs	r3, #0
 8003408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800340c:	2307      	movs	r3, #7
 800340e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003412:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003416:	4619      	mov	r1, r3
 8003418:	4810      	ldr	r0, [pc, #64]	@ (800345c <HAL_UART_MspInit+0x36c>)
 800341a:	f000 fe87 	bl	800412c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14;
 800341e:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003422:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003426:	2302      	movs	r3, #2
 8003428:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003432:	2300      	movs	r3, #0
 8003434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003438:	2307      	movs	r3, #7
 800343a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003442:	4619      	mov	r1, r3
 8003444:	4806      	ldr	r0, [pc, #24]	@ (8003460 <HAL_UART_MspInit+0x370>)
 8003446:	f000 fe71 	bl	800412c <HAL_GPIO_Init>
}
 800344a:	bf00      	nop
 800344c:	37a0      	adds	r7, #160	@ 0xa0
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40004800 	.word	0x40004800
 8003458:	40021000 	.word	0x40021000
 800345c:	48001000 	.word	0x48001000
 8003460:	48000400 	.word	0x48000400

08003464 <zentrale_init>:


//-----------------FUNKTIONSDEFINITIONEN---------------------------------------

// Zentrale initialisieren.
void zentrale_init(void) {
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
	z_status = POWERON;
 8003468:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <zentrale_init+0x2c>)
 800346a:	2202      	movs	r2, #2
 800346c:	701a      	strb	r2, [r3, #0]
	z_status_h = NOP;
 800346e:	4b09      	ldr	r3, [pc, #36]	@ (8003494 <zentrale_init+0x30>)
 8003470:	22ff      	movs	r2, #255	@ 0xff
 8003472:	701a      	strb	r2, [r3, #0]
	z_status_tend = NOP;
 8003474:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <zentrale_init+0x34>)
 8003476:	22ff      	movs	r2, #255	@ 0xff
 8003478:	701a      	strb	r2, [r3, #0]
	z_error_akt = 0;
 800347a:	4b08      	ldr	r3, [pc, #32]	@ (800349c <zentrale_init+0x38>)
 800347c:	2200      	movs	r2, #0
 800347e:	801a      	strh	r2, [r3, #0]
	z_error_kum = 0;
 8003480:	4b07      	ldr	r3, [pc, #28]	@ (80034a0 <zentrale_init+0x3c>)
 8003482:	2200      	movs	r2, #0
 8003484:	801a      	strh	r2, [r3, #0]

}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	20001260 	.word	0x20001260
 8003494:	20001261 	.word	0x20001261
 8003498:	20001262 	.word	0x20001262
 800349c:	20001264 	.word	0x20001264
 80034a0:	20001266 	.word	0x20001266

080034a4 <z_update_power_errors>:

static void z_update_power_errors(void) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
	// If you only have update_uok():
	if (!update_uok()) {
 80034aa:	f7fd f8cb 	bl	8000644 <update_uok>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d117      	bne.n	80034e4 <z_update_power_errors+0x40>
		// If you want individual bits, read pins directly (or add helpers):
		uint8_t ok5 = u_ok(UC__5VOK_GPIO_Port, UC__5VOK_Pin);
 80034b4:	2110      	movs	r1, #16
 80034b6:	480d      	ldr	r0, [pc, #52]	@ (80034ec <z_update_power_errors+0x48>)
 80034b8:	f7fd f8ac 	bl	8000614 <u_ok>
 80034bc:	4603      	mov	r3, r0
 80034be:	71fb      	strb	r3, [r7, #7]
		uint8_t ok12 = u_ok(UC__12VOK_GPIO_Port, UC__12VOK_Pin);
 80034c0:	2120      	movs	r1, #32
 80034c2:	480a      	ldr	r0, [pc, #40]	@ (80034ec <z_update_power_errors+0x48>)
 80034c4:	f7fd f8a6 	bl	8000614 <u_ok>
 80034c8:	4603      	mov	r3, r0
 80034ca:	71bb      	strb	r3, [r7, #6]
		if (!ok5)
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d102      	bne.n	80034d8 <z_update_power_errors+0x34>
			z_set_error(SG_ERR_U5V);
 80034d2:	2002      	movs	r0, #2
 80034d4:	f000 f90c 	bl	80036f0 <z_set_error>
		if (!ok12)
 80034d8:	79bb      	ldrb	r3, [r7, #6]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d102      	bne.n	80034e4 <z_update_power_errors+0x40>
			z_set_error(SG_ERR_U12V);
 80034de:	2003      	movs	r0, #3
 80034e0:	f000 f906 	bl	80036f0 <z_set_error>
	}
}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	48000c00 	.word	0x48000c00

080034f0 <zentrale>:

// Zentrale denken und entscheiden.
void zentrale(void) {	// ----- DENKEN -----
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0

	z_update_power_errors();
 80034f4:	f7ff ffd6 	bl	80034a4 <z_update_power_errors>

	if (readPumpAlarm()) {
 80034f8:	f7fd f8d8 	bl	80006ac <readPumpAlarm>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <zentrale+0x18>
		z_set_error(SG_ERR_PUMP_ALARM);
 8003502:	2004      	movs	r0, #4
 8003504:	f000 f8f4 	bl	80036f0 <z_set_error>
	}
	if (readPumpWarning()) {
 8003508:	f7fd f8ba 	bl	8000680 <readPumpWarning>
		//z_set_error(SG_ERR_PUMP_WARNING);
	}

	// Fehlerüberprüfung
	if (z_error_akt != 0)
 800350c:	4b66      	ldr	r3, [pc, #408]	@ (80036a8 <zentrale+0x1b8>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <zentrale+0x2a>
		z_set_status_tend(ZERROR);
 8003514:	2001      	movs	r0, #1
 8003516:	f000 f8d5 	bl	80036c4 <z_set_status_tend>

	switch (z_status)// Je nach aktuellem Systemzustand auf Anfragen zur Zustands�nderung
 800351a:	4b64      	ldr	r3, [pc, #400]	@ (80036ac <zentrale+0x1bc>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	3b01      	subs	r3, #1
 8003520:	2b0a      	cmp	r3, #10
 8003522:	f200 80ac 	bhi.w	800367e <zentrale+0x18e>
 8003526:	a201      	add	r2, pc, #4	@ (adr r2, 800352c <zentrale+0x3c>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	08003559 	.word	0x08003559
 8003530:	080035b1 	.word	0x080035b1
 8003534:	0800367f 	.word	0x0800367f
 8003538:	0800367f 	.word	0x0800367f
 800353c:	0800367f 	.word	0x0800367f
 8003540:	0800367f 	.word	0x0800367f
 8003544:	0800367f 	.word	0x0800367f
 8003548:	0800367f 	.word	0x0800367f
 800354c:	080035e9 	.word	0x080035e9
 8003550:	0800367f 	.word	0x0800367f
 8003554:	08003637 	.word	0x08003637
	{// reagieren
	case ZERROR:
		if (z_status_h != ZERROR) {				// add what to do when error
 8003558:	4b55      	ldr	r3, [pc, #340]	@ (80036b0 <zentrale+0x1c0>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d005      	beq.n	800356c <zentrale+0x7c>
			z_status_h = ZERROR;
 8003560:	4b53      	ldr	r3, [pc, #332]	@ (80036b0 <zentrale+0x1c0>)
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
			z_rf_state = 0;
 8003566:	4b53      	ldr	r3, [pc, #332]	@ (80036b4 <zentrale+0x1c4>)
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
		}

		if ((z_error_akt) > 0) // Wenn aktuell noch ein Fehler mit Ausnahme des ERREXT vorliegt
 800356c:	4b4e      	ldr	r3, [pc, #312]	@ (80036a8 <zentrale+0x1b8>)
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <zentrale+0x9a>
				{
			z_error_kum |= z_error_akt; // Wir aktualisieren hier schon mal den Kummulierten Fehler
 8003574:	4b50      	ldr	r3, [pc, #320]	@ (80036b8 <zentrale+0x1c8>)
 8003576:	881a      	ldrh	r2, [r3, #0]
 8003578:	4b4b      	ldr	r3, [pc, #300]	@ (80036a8 <zentrale+0x1b8>)
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	4313      	orrs	r3, r2
 800357e:	b29a      	uxth	r2, r3
 8003580:	4b4d      	ldr	r3, [pc, #308]	@ (80036b8 <zentrale+0x1c8>)
 8003582:	801a      	strh	r2, [r3, #0]
			z_set_status_tend(ZERROR); // kann als Folgezustand nur der Zustand ERROR eingenommen werden!
 8003584:	2001      	movs	r0, #1
 8003586:	f000 f89d 	bl	80036c4 <z_set_status_tend>
		} else {       // Falls kein Fehler im Modul vorliegt schließen wir hier
		}

		switch (z_status_tend) // Wünsche bezüglich einer Zustandsänderung bearbeiten
 800358a:	4b4c      	ldr	r3, [pc, #304]	@ (80036bc <zentrale+0x1cc>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d002      	beq.n	8003598 <zentrale+0xa8>
 8003592:	2b09      	cmp	r3, #9
 8003594:	d004      	beq.n	80035a0 <zentrale+0xb0>
			break;
		case INACTIVE:
			z_status = INACTIVE;                // Zustand INACTIVE vorbereiten
			break;
		default:
			break;
 8003596:	e007      	b.n	80035a8 <zentrale+0xb8>
			z_status = POWERON;
 8003598:	4b44      	ldr	r3, [pc, #272]	@ (80036ac <zentrale+0x1bc>)
 800359a:	2202      	movs	r2, #2
 800359c:	701a      	strb	r2, [r3, #0]
			break;
 800359e:	e003      	b.n	80035a8 <zentrale+0xb8>
			z_status = INACTIVE;                // Zustand INACTIVE vorbereiten
 80035a0:	4b42      	ldr	r3, [pc, #264]	@ (80036ac <zentrale+0x1bc>)
 80035a2:	2209      	movs	r2, #9
 80035a4:	701a      	strb	r2, [r3, #0]
			break;
 80035a6:	bf00      	nop
		}
		z_status_tend = NOP;                         // Status_tend zurücksetzen
 80035a8:	4b44      	ldr	r3, [pc, #272]	@ (80036bc <zentrale+0x1cc>)
 80035aa:	22ff      	movs	r2, #255	@ 0xff
 80035ac:	701a      	strb	r2, [r3, #0]
		break;
 80035ae:	e06d      	b.n	800368c <zentrale+0x19c>
//			if(((z_error_kum && ((1<<SG_ERREN) + (1<<SG_ERRDTC))) != 0) && (adc7927_chk_en() != 1))
//				z_set_status_tend(Z_ERROR);


	case POWERON:// Startzustand nach Einschalten des Ger�tes. Keine Fehlerbehandlung!
		if (z_status_h != POWERON) {
 80035b0:	4b3f      	ldr	r3, [pc, #252]	@ (80036b0 <zentrale+0x1c0>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d008      	beq.n	80035ca <zentrale+0xda>
			z_init_done = 0;
 80035b8:	4b41      	ldr	r3, [pc, #260]	@ (80036c0 <zentrale+0x1d0>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
			z_rf_state = 0;
 80035be:	4b3d      	ldr	r3, [pc, #244]	@ (80036b4 <zentrale+0x1c4>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
			z_status_h = POWERON;
 80035c4:	4b3a      	ldr	r3, [pc, #232]	@ (80036b0 <zentrale+0x1c0>)
 80035c6:	2202      	movs	r2, #2
 80035c8:	701a      	strb	r2, [r3, #0]
		}

		if (ct_init_null()) {
 80035ca:	f7ff fa0f 	bl	80029ec <ct_init_null>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <zentrale+0xf0>
			z_init_done = 1;
 80035d4:	4b3a      	ldr	r3, [pc, #232]	@ (80036c0 <zentrale+0x1d0>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	701a      	strb	r2, [r3, #0]
			z_status = INACTIVE;
 80035da:	4b34      	ldr	r3, [pc, #208]	@ (80036ac <zentrale+0x1bc>)
 80035dc:	2209      	movs	r2, #9
 80035de:	701a      	strb	r2, [r3, #0]
		}

		z_status_tend = NOP;					// z_status_tend zur�cksetzen
 80035e0:	4b36      	ldr	r3, [pc, #216]	@ (80036bc <zentrale+0x1cc>)
 80035e2:	22ff      	movs	r2, #255	@ 0xff
 80035e4:	701a      	strb	r2, [r3, #0]
		break;
 80035e6:	e051      	b.n	800368c <zentrale+0x19c>

	case INACTIVE:						//----- System im INACTIVE-Zustand

		if (z_status_h != INACTIVE) {
 80035e8:	4b31      	ldr	r3, [pc, #196]	@ (80036b0 <zentrale+0x1c0>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b09      	cmp	r3, #9
 80035ee:	d008      	beq.n	8003602 <zentrale+0x112>
			z_error_kum = 0;
 80035f0:	4b31      	ldr	r3, [pc, #196]	@ (80036b8 <zentrale+0x1c8>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	801a      	strh	r2, [r3, #0]
			z_rf_state = 0;
 80035f6:	4b2f      	ldr	r3, [pc, #188]	@ (80036b4 <zentrale+0x1c4>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]
			z_status_h = INACTIVE;
 80035fc:	4b2c      	ldr	r3, [pc, #176]	@ (80036b0 <zentrale+0x1c0>)
 80035fe:	2209      	movs	r2, #9
 8003600:	701a      	strb	r2, [r3, #0]
		}

		if (z_error_akt != 0)
 8003602:	4b29      	ldr	r3, [pc, #164]	@ (80036a8 <zentrale+0x1b8>)
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <zentrale+0x120>
			z_set_status_tend(ZERROR);
 800360a:	2001      	movs	r0, #1
 800360c:	f000 f85a 	bl	80036c4 <z_set_status_tend>

		switch (z_status_tend) {
 8003610:	4b2a      	ldr	r3, [pc, #168]	@ (80036bc <zentrale+0x1cc>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d002      	beq.n	800361e <zentrale+0x12e>
 8003618:	2b0b      	cmp	r3, #11
 800361a:	d004      	beq.n	8003626 <zentrale+0x136>
			z_status = ZERROR;
			break;
		case ACTIVE:
			z_status = ACTIVE;
		default:
			break;
 800361c:	e006      	b.n	800362c <zentrale+0x13c>
			z_status = ZERROR;
 800361e:	4b23      	ldr	r3, [pc, #140]	@ (80036ac <zentrale+0x1bc>)
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
			break;
 8003624:	e003      	b.n	800362e <zentrale+0x13e>
			z_status = ACTIVE;
 8003626:	4b21      	ldr	r3, [pc, #132]	@ (80036ac <zentrale+0x1bc>)
 8003628:	220b      	movs	r2, #11
 800362a:	701a      	strb	r2, [r3, #0]
			break;
 800362c:	bf00      	nop
		}
		z_status_tend = NOP;
 800362e:	4b23      	ldr	r3, [pc, #140]	@ (80036bc <zentrale+0x1cc>)
 8003630:	22ff      	movs	r2, #255	@ 0xff
 8003632:	701a      	strb	r2, [r3, #0]
		break;
 8003634:	e02a      	b.n	800368c <zentrale+0x19c>

	case ACTIVE:
		if (z_status_h != ACTIVE) {
 8003636:	4b1e      	ldr	r3, [pc, #120]	@ (80036b0 <zentrale+0x1c0>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b0b      	cmp	r3, #11
 800363c:	d005      	beq.n	800364a <zentrale+0x15a>
			z_rf_state = 1;
 800363e:	4b1d      	ldr	r3, [pc, #116]	@ (80036b4 <zentrale+0x1c4>)
 8003640:	2201      	movs	r2, #1
 8003642:	701a      	strb	r2, [r3, #0]
			z_status_h = ACTIVE;
 8003644:	4b1a      	ldr	r3, [pc, #104]	@ (80036b0 <zentrale+0x1c0>)
 8003646:	220b      	movs	r2, #11
 8003648:	701a      	strb	r2, [r3, #0]
		}

		if (z_error_akt != 0)
 800364a:	4b17      	ldr	r3, [pc, #92]	@ (80036a8 <zentrale+0x1b8>)
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <zentrale+0x168>
			z_set_status_tend(ZERROR);
 8003652:	2001      	movs	r0, #1
 8003654:	f000 f836 	bl	80036c4 <z_set_status_tend>

		switch (z_status_tend) {
 8003658:	4b18      	ldr	r3, [pc, #96]	@ (80036bc <zentrale+0x1cc>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d002      	beq.n	8003666 <zentrale+0x176>
 8003660:	2b09      	cmp	r3, #9
 8003662:	d004      	beq.n	800366e <zentrale+0x17e>
			z_status = ZERROR;
			break;
		case INACTIVE:
			z_status = INACTIVE;
		default:
			break;
 8003664:	e006      	b.n	8003674 <zentrale+0x184>
			z_status = ZERROR;
 8003666:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <zentrale+0x1bc>)
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
			break;
 800366c:	e003      	b.n	8003676 <zentrale+0x186>
			z_status = INACTIVE;
 800366e:	4b0f      	ldr	r3, [pc, #60]	@ (80036ac <zentrale+0x1bc>)
 8003670:	2209      	movs	r2, #9
 8003672:	701a      	strb	r2, [r3, #0]
			break;
 8003674:	bf00      	nop
		}
		z_status_tend = NOP;
 8003676:	4b11      	ldr	r3, [pc, #68]	@ (80036bc <zentrale+0x1cc>)
 8003678:	22ff      	movs	r2, #255	@ 0xff
 800367a:	701a      	strb	r2, [r3, #0]
		break;
 800367c:	e006      	b.n	800368c <zentrale+0x19c>

	default:
		z_status_tend = NOP;
 800367e:	4b0f      	ldr	r3, [pc, #60]	@ (80036bc <zentrale+0x1cc>)
 8003680:	22ff      	movs	r2, #255	@ 0xff
 8003682:	701a      	strb	r2, [r3, #0]
		z_status_h = NOP;
 8003684:	4b0a      	ldr	r3, [pc, #40]	@ (80036b0 <zentrale+0x1c0>)
 8003686:	22ff      	movs	r2, #255	@ 0xff
 8003688:	701a      	strb	r2, [r3, #0]
		break;
 800368a:	bf00      	nop
	}
	z_error_kum |= z_error_akt;	// Eventuell aufgetretenen neuen Fehler zur kummulierten
 800368c:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <zentrale+0x1c8>)
 800368e:	881a      	ldrh	r2, [r3, #0]
 8003690:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <zentrale+0x1b8>)
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	4313      	orrs	r3, r2
 8003696:	b29a      	uxth	r2, r3
 8003698:	4b07      	ldr	r3, [pc, #28]	@ (80036b8 <zentrale+0x1c8>)
 800369a:	801a      	strh	r2, [r3, #0]
	z_error_akt = 0;// Fehleranzeige für aktuell vorliegende Fehler zurücksetzen
 800369c:	4b02      	ldr	r3, [pc, #8]	@ (80036a8 <zentrale+0x1b8>)
 800369e:	2200      	movs	r2, #0
 80036a0:	801a      	strh	r2, [r3, #0]

}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20001264 	.word	0x20001264
 80036ac:	20001260 	.word	0x20001260
 80036b0:	20001261 	.word	0x20001261
 80036b4:	20001269 	.word	0x20001269
 80036b8:	20001266 	.word	0x20001266
 80036bc:	20001262 	.word	0x20001262
 80036c0:	20001268 	.word	0x20001268

080036c4 <z_set_status_tend>:


// Statuswunsch setzen
// Priorität:   error, inactive, start, active
void z_set_status_tend(uint8_t statnew) {
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
	if (z_status_tend > statnew)
 80036ce:	4b07      	ldr	r3, [pc, #28]	@ (80036ec <z_set_status_tend+0x28>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	79fa      	ldrb	r2, [r7, #7]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d203      	bcs.n	80036e0 <z_set_status_tend+0x1c>
		z_status_tend = statnew;    // nur Status höherer Priorität übernehmen
 80036d8:	4a04      	ldr	r2, [pc, #16]	@ (80036ec <z_set_status_tend+0x28>)
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	7013      	strb	r3, [r2, #0]

	return;
 80036de:	bf00      	nop
 80036e0:	bf00      	nop
}
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	20001262 	.word	0x20001262

080036f0 <z_set_error>:
uint16_t z_get_error(void) {
	return z_error_kum;
}

// Fehler an Zentrale melden
void z_set_error(uint8_t errnr) {
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
	if (errnr <= 15)
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	2b0f      	cmp	r3, #15
 80036fe:	d80c      	bhi.n	800371a <z_set_error+0x2a>
		z_error_akt |= (1 << errnr);
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	2201      	movs	r2, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	b21a      	sxth	r2, r3
 800370a:	4b07      	ldr	r3, [pc, #28]	@ (8003728 <z_set_error+0x38>)
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	b21b      	sxth	r3, r3
 8003710:	4313      	orrs	r3, r2
 8003712:	b21b      	sxth	r3, r3
 8003714:	b29a      	uxth	r2, r3
 8003716:	4b04      	ldr	r3, [pc, #16]	@ (8003728 <z_set_error+0x38>)
 8003718:	801a      	strh	r2, [r3, #0]
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20001264 	.word	0x20001264

0800372c <z_mfc_set>:
	}
	return CMR_SUCCESSFULL;
}


uint8_t z_mfc_set(uint8_t idx, uint16_t val) {
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	460a      	mov	r2, r1
 8003736:	71fb      	strb	r3, [r7, #7]
 8003738:	4613      	mov	r3, r2
 800373a:	80bb      	strh	r3, [r7, #4]
    GbReply r;
    return gasbox_xfer(kMfc[idx].cmd_set, val, &r, GB_TIMEOUT_MS) && (r.status == GB_STATUS_OK);
 800373c:	79fa      	ldrb	r2, [r7, #7]
 800373e:	490d      	ldr	r1, [pc, #52]	@ (8003774 <z_mfc_set+0x48>)
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	440b      	add	r3, r1
 8003748:	7818      	ldrb	r0, [r3, #0]
 800374a:	f107 020c 	add.w	r2, r7, #12
 800374e:	88b9      	ldrh	r1, [r7, #4]
 8003750:	2302      	movs	r3, #2
 8003752:	f7fd f9f7 	bl	8000b44 <gasbox_xfer>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d004      	beq.n	8003766 <z_mfc_set+0x3a>
 800375c:	7b7b      	ldrb	r3, [r7, #13]
 800375e:	2b80      	cmp	r3, #128	@ 0x80
 8003760:	d101      	bne.n	8003766 <z_mfc_set+0x3a>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <z_mfc_set+0x3c>
 8003766:	2300      	movs	r3, #0
 8003768:	b2db      	uxtb	r3, r3
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	08008a18 	.word	0x08008a18

08003778 <z_mfc_get>:
uint8_t z_mfc_get(uint8_t idx, uint16_t *out) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	6039      	str	r1, [r7, #0]
 8003782:	71fb      	strb	r3, [r7, #7]
    GbReply r;
    if (!gasbox_xfer(kMfc[idx].cmd_get, 0, &r, GB_TIMEOUT_MS) || r.status != GB_STATUS_OK) return 0;
 8003784:	79fa      	ldrb	r2, [r7, #7]
 8003786:	490e      	ldr	r1, [pc, #56]	@ (80037c0 <z_mfc_get+0x48>)
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	440b      	add	r3, r1
 8003790:	3301      	adds	r3, #1
 8003792:	7818      	ldrb	r0, [r3, #0]
 8003794:	f107 020c 	add.w	r2, r7, #12
 8003798:	2302      	movs	r3, #2
 800379a:	2100      	movs	r1, #0
 800379c:	f7fd f9d2 	bl	8000b44 <gasbox_xfer>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <z_mfc_get+0x34>
 80037a6:	7b7b      	ldrb	r3, [r7, #13]
 80037a8:	2b80      	cmp	r3, #128	@ 0x80
 80037aa:	d001      	beq.n	80037b0 <z_mfc_get+0x38>
 80037ac:	2300      	movs	r3, #0
 80037ae:	e003      	b.n	80037b8 <z_mfc_get+0x40>
    *out = r.value; return 1;
 80037b0:	89fa      	ldrh	r2, [r7, #14]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	801a      	strh	r2, [r3, #0]
 80037b6:	2301      	movs	r3, #1
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	08008a18 	.word	0x08008a18

080037c4 <z_mfc_close>:
uint8_t z_mfc_close(uint8_t idx) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	71fb      	strb	r3, [r7, #7]
    GbReply r;
    return gasbox_xfer(kMfc[idx].cmd_close, 0, &r, GB_TIMEOUT_MS) && (r.status == GB_STATUS_OK);
 80037ce:	79fa      	ldrb	r2, [r7, #7]
 80037d0:	490d      	ldr	r1, [pc, #52]	@ (8003808 <z_mfc_close+0x44>)
 80037d2:	4613      	mov	r3, r2
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	4413      	add	r3, r2
 80037d8:	440b      	add	r3, r1
 80037da:	3302      	adds	r3, #2
 80037dc:	7818      	ldrb	r0, [r3, #0]
 80037de:	f107 020c 	add.w	r2, r7, #12
 80037e2:	2302      	movs	r3, #2
 80037e4:	2100      	movs	r1, #0
 80037e6:	f7fd f9ad 	bl	8000b44 <gasbox_xfer>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d004      	beq.n	80037fa <z_mfc_close+0x36>
 80037f0:	7b7b      	ldrb	r3, [r7, #13]
 80037f2:	2b80      	cmp	r3, #128	@ 0x80
 80037f4:	d101      	bne.n	80037fa <z_mfc_close+0x36>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <z_mfc_close+0x38>
 80037fa:	2300      	movs	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	08008a18 	.word	0x08008a18

0800380c <gb_do>:

static inline uint8_t gb_do(uint8_t cmd, uint16_t param) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	460a      	mov	r2, r1
 8003816:	71fb      	strb	r3, [r7, #7]
 8003818:	4613      	mov	r3, r2
 800381a:	80bb      	strh	r3, [r7, #4]
    GbReply r;
    return gasbox_xfer(cmd, param, &r, GB_TIMEOUT_MS) && (r.status == GB_STATUS_OK);
 800381c:	f107 020c 	add.w	r2, r7, #12
 8003820:	88b9      	ldrh	r1, [r7, #4]
 8003822:	79f8      	ldrb	r0, [r7, #7]
 8003824:	2302      	movs	r3, #2
 8003826:	f7fd f98d 	bl	8000b44 <gasbox_xfer>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <gb_do+0x2e>
 8003830:	7b7b      	ldrb	r3, [r7, #13]
 8003832:	2b80      	cmp	r3, #128	@ 0x80
 8003834:	d101      	bne.n	800383a <gb_do+0x2e>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <gb_do+0x30>
 800383a:	2300      	movs	r3, #0
 800383c:	b2db      	uxtb	r3, r3
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <gb_get16>:

static inline uint8_t gb_get16(uint8_t cmd, uint16_t *out) {
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	4603      	mov	r3, r0
 800384e:	6039      	str	r1, [r7, #0]
 8003850:	71fb      	strb	r3, [r7, #7]
    GbReply r;
    if (!gasbox_xfer(cmd, 0, &r, GB_TIMEOUT_MS) || r.status != GB_STATUS_OK) return 0;
 8003852:	f107 020c 	add.w	r2, r7, #12
 8003856:	79f8      	ldrb	r0, [r7, #7]
 8003858:	2302      	movs	r3, #2
 800385a:	2100      	movs	r1, #0
 800385c:	f7fd f972 	bl	8000b44 <gasbox_xfer>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <gb_get16+0x26>
 8003866:	7b7b      	ldrb	r3, [r7, #13]
 8003868:	2b80      	cmp	r3, #128	@ 0x80
 800386a:	d001      	beq.n	8003870 <gb_get16+0x2a>
 800386c:	2300      	movs	r3, #0
 800386e:	e003      	b.n	8003878 <gb_get16+0x32>
    *out = r.value; return 1;
 8003870:	89fa      	ldrh	r2, [r7, #14]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	801a      	strh	r2, [r3, #0]
 8003876:	2301      	movs	r3, #1
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <z_valve_open>:

uint8_t z_valve_open(uint8_t idx)  {
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]
	return gb_do(idx==3 ? GB_CMD_VALVE3_OPEN  : GB_CMD_VALVE4_OPEN, 0);
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	2b03      	cmp	r3, #3
 800388e:	d101      	bne.n	8003894 <z_valve_open+0x14>
 8003890:	230c      	movs	r3, #12
 8003892:	e000      	b.n	8003896 <z_valve_open+0x16>
 8003894:	230d      	movs	r3, #13
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff ffb7 	bl	800380c <gb_do>
 800389e:	4603      	mov	r3, r0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <z_valve_close>:
uint8_t z_valve_close(uint8_t idx) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
	return gb_do(idx==3 ? GB_CMD_VALVE3_CLOSE : GB_CMD_VALVE4_CLOSE, 0);
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d101      	bne.n	80038bc <z_valve_close+0x14>
 80038b8:	230a      	movs	r3, #10
 80038ba:	e000      	b.n	80038be <z_valve_close+0x16>
 80038bc:	230b      	movs	r3, #11
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ffa3 	bl	800380c <gb_do>
 80038c6:	4603      	mov	r3, r0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <z_valve_get>:
uint8_t z_valve_get(uint8_t idx, uint16_t *state) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	71fb      	strb	r3, [r7, #7]
    return gb_get16(idx==3 ? GB_CMD_VALVE3_GET : GB_CMD_VALVE4_GET, state);
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d101      	bne.n	80038e6 <z_valve_get+0x16>
 80038e2:	230e      	movs	r3, #14
 80038e4:	e000      	b.n	80038e8 <z_valve_get+0x18>
 80038e6:	230f      	movs	r3, #15
 80038e8:	6839      	ldr	r1, [r7, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff ffab 	bl	8003846 <gb_get16>
 80038f0:	4603      	mov	r3, r0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <z_gb_err_clr>:
uint8_t z_gb_err_clr(){
 80038fa:	b580      	push	{r7, lr}
 80038fc:	af00      	add	r7, sp, #0
	return gb_do(GB_CMD_CLR_ERR, 0) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80038fe:	2100      	movs	r1, #0
 8003900:	2011      	movs	r0, #17
 8003902:	f7ff ff83 	bl	800380c <gb_do>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <z_gb_err_clr+0x16>
 800390c:	2380      	movs	r3, #128	@ 0x80
 800390e:	e000      	b.n	8003912 <z_gb_err_clr+0x18>
 8003910:	2307      	movs	r3, #7
}
 8003912:	4618      	mov	r0, r3
 8003914:	bd80      	pop	{r7, pc}

08003916 <z_gb_err_get>:
uint8_t z_gb_err_get(uint16_t *out_err) {
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
    return gb_get16(GB_CMD_GET_ERR, out_err) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	2010      	movs	r0, #16
 8003922:	f7ff ff90 	bl	8003846 <gb_get16>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <z_gb_err_get+0x1a>
 800392c:	2380      	movs	r3, #128	@ 0x80
 800392e:	e000      	b.n	8003932 <z_gb_err_get+0x1c>
 8003930:	2307      	movs	r3, #7
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <z_cmd_scheduler>:

//--- FUNKTIONSDEKLARATIONS -------------------------------------------------------------------------------------------------
//die Mechanimus zur Verarbeitung der Befehle mit den unterschiedlichen Prioritäten
//--- FUNKTIONSDEFINITIONS --------------------------------------------------------------------------------------------------
void z_cmd_scheduler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
	uint8_t priolevel0_null_flg = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	75fb      	strb	r3, [r7, #23]
	uint8_t priolevel1_null_flg = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	75bb      	strb	r3, [r7, #22]
	uint8_t priolevel2_null_flg = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	757b      	strb	r3, [r7, #21]

	uint8_t cmdcount = 0;                       //Zähler für die zu verarbeitenden Befehle
 800394e:	2300      	movs	r3, #0
 8003950:	753b      	strb	r3, [r7, #20]
	uint8_t cmd_flg = 0;                       //Falls cmd_flg = 1 ist, d.h. keinen Befehl zu verarbeiten; cmd_flg = 0, d.h. noch Befehl zu verarbeiten
 8003952:	2300      	movs	r3, #0
 8003954:	74fb      	strb	r3, [r7, #19]
	stack_item cmd;

	uint8_t resultflg = get_anzFrei_resultQueue();
 8003956:	f7fe fb8f 	bl	8002078 <get_anzFrei_resultQueue>
 800395a:	4603      	mov	r3, r0
 800395c:	74bb      	strb	r3, [r7, #18]

	if (resultflg > 1 )            //prüft, ob es noch freien Platz in resultqueue.
 800395e:	7cbb      	ldrb	r3, [r7, #18]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d953      	bls.n	8003a0c <z_cmd_scheduler+0xd0>
	{
		do
		{
			while ((cmdcount < Z_MAX_HIGHPRIO_NUM) && (priolevel0_null_flg == 0))
 8003964:	e012      	b.n	800398c <z_cmd_scheduler+0x50>
			{
				if (z_priolevel_header[PRIO_LEVEL0] != NONEXT)
 8003966:	4b2b      	ldr	r3, [pc, #172]	@ (8003a14 <z_cmd_scheduler+0xd8>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2bff      	cmp	r3, #255	@ 0xff
 800396c:	d00c      	beq.n	8003988 <z_cmd_scheduler+0x4c>
				{
					zstack_pop(&cmd, PRIO_LEVEL0);
 800396e:	463b      	mov	r3, r7
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe feaa 	bl	80026cc <zstack_pop>
					z_cmd_sero(cmd);
 8003978:	463b      	mov	r3, r7
 800397a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800397c:	f000 f84c 	bl	8003a18 <z_cmd_sero>
					cmdcount++;
 8003980:	7d3b      	ldrb	r3, [r7, #20]
 8003982:	3301      	adds	r3, #1
 8003984:	753b      	strb	r3, [r7, #20]
 8003986:	e001      	b.n	800398c <z_cmd_scheduler+0x50>

				}
				else
				{
					priolevel0_null_flg = 1;      //es gibt keinen Befehl in der Prioritätliste mit Level 0
 8003988:	2301      	movs	r3, #1
 800398a:	75fb      	strb	r3, [r7, #23]
			while ((cmdcount < Z_MAX_HIGHPRIO_NUM) && (priolevel0_null_flg == 0))
 800398c:	7d3b      	ldrb	r3, [r7, #20]
 800398e:	2b04      	cmp	r3, #4
 8003990:	d802      	bhi.n	8003998 <z_cmd_scheduler+0x5c>
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0e6      	beq.n	8003966 <z_cmd_scheduler+0x2a>
				};
			};

			if (z_priolevel_header[PRIO_LEVEL1] != NONEXT)
 8003998:	4b1e      	ldr	r3, [pc, #120]	@ (8003a14 <z_cmd_scheduler+0xd8>)
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	2bff      	cmp	r3, #255	@ 0xff
 800399e:	d00f      	beq.n	80039c0 <z_cmd_scheduler+0x84>
			{
				if (cmdcount < Z_MAXCMD)
 80039a0:	7d3b      	ldrb	r3, [r7, #20]
 80039a2:	2b09      	cmp	r3, #9
 80039a4:	d80e      	bhi.n	80039c4 <z_cmd_scheduler+0x88>
				{
					zstack_pop(&cmd, PRIO_LEVEL1);
 80039a6:	463b      	mov	r3, r7
 80039a8:	2101      	movs	r1, #1
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fe8e 	bl	80026cc <zstack_pop>
					z_cmd_sero(cmd);
 80039b0:	463b      	mov	r3, r7
 80039b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039b4:	f000 f830 	bl	8003a18 <z_cmd_sero>
					cmdcount++;
 80039b8:	7d3b      	ldrb	r3, [r7, #20]
 80039ba:	3301      	adds	r3, #1
 80039bc:	753b      	strb	r3, [r7, #20]
 80039be:	e001      	b.n	80039c4 <z_cmd_scheduler+0x88>

				};
			}
			else
			{
				priolevel1_null_flg = 1;   //es gibt keinen Befehl in der Prioritätliste mit Level 1
 80039c0:	2301      	movs	r3, #1
 80039c2:	75bb      	strb	r3, [r7, #22]
			};

			if (z_priolevel_header[PRIO_LEVEL2] != NONEXT)
 80039c4:	4b13      	ldr	r3, [pc, #76]	@ (8003a14 <z_cmd_scheduler+0xd8>)
 80039c6:	789b      	ldrb	r3, [r3, #2]
 80039c8:	2bff      	cmp	r3, #255	@ 0xff
 80039ca:	d00f      	beq.n	80039ec <z_cmd_scheduler+0xb0>
			{
				if (cmdcount < Z_MAXCMD)
 80039cc:	7d3b      	ldrb	r3, [r7, #20]
 80039ce:	2b09      	cmp	r3, #9
 80039d0:	d80e      	bhi.n	80039f0 <z_cmd_scheduler+0xb4>
				{
					zstack_pop(&cmd, PRIO_LEVEL2);
 80039d2:	463b      	mov	r3, r7
 80039d4:	2102      	movs	r1, #2
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fe78 	bl	80026cc <zstack_pop>
					z_cmd_sero(cmd);
 80039dc:	463b      	mov	r3, r7
 80039de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039e0:	f000 f81a 	bl	8003a18 <z_cmd_sero>
					cmdcount++;
 80039e4:	7d3b      	ldrb	r3, [r7, #20]
 80039e6:	3301      	adds	r3, #1
 80039e8:	753b      	strb	r3, [r7, #20]
 80039ea:	e001      	b.n	80039f0 <z_cmd_scheduler+0xb4>
				};
			}
			else
			{
				priolevel2_null_flg = 1;   //es gibt keinen Befehl in der Prioritätliste mit Level 2
 80039ec:	2301      	movs	r3, #1
 80039ee:	757b      	strb	r3, [r7, #21]
			};

			//prüft, ob die drei Prioritätslisten alle leer sind.
			cmd_flg = priolevel0_null_flg & priolevel1_null_flg;
 80039f0:	7dfa      	ldrb	r2, [r7, #23]
 80039f2:	7dbb      	ldrb	r3, [r7, #22]
 80039f4:	4013      	ands	r3, r2
 80039f6:	74fb      	strb	r3, [r7, #19]
			cmd_flg &= priolevel2_null_flg;
 80039f8:	7cfa      	ldrb	r2, [r7, #19]
 80039fa:	7d7b      	ldrb	r3, [r7, #21]
 80039fc:	4013      	ands	r3, r2
 80039fe:	74fb      	strb	r3, [r7, #19]

		}while ( (cmdcount < Z_MAXCMD) && (cmd_flg == 0));
 8003a00:	7d3b      	ldrb	r3, [r7, #20]
 8003a02:	2b09      	cmp	r3, #9
 8003a04:	d802      	bhi.n	8003a0c <z_cmd_scheduler+0xd0>
 8003a06:	7cfb      	ldrb	r3, [r7, #19]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0bf      	beq.n	800398c <z_cmd_scheduler+0x50>
	};

}
 8003a0c:	bf00      	nop
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	2000010c 	.word	0x2000010c

08003a18 <z_cmd_sero>:

void z_cmd_sero(stack_item cmd) {
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b08b      	sub	sp, #44	@ 0x2c
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	463c      	mov	r4, r7
 8003a20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch (cmd.cmd_index) {
 8003a24:	887b      	ldrh	r3, [r7, #2]
 8003a26:	3b0a      	subs	r3, #10
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	f200 816d 	bhi.w	8003d08 <z_cmd_sero+0x2f0>
 8003a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a34 <z_cmd_sero+0x1c>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003ce5 	.word	0x08003ce5
 8003a38:	08003cff 	.word	0x08003cff
 8003a3c:	08003d09 	.word	0x08003d09
 8003a40:	08003d09 	.word	0x08003d09
 8003a44:	08003d09 	.word	0x08003d09
 8003a48:	08003d09 	.word	0x08003d09
 8003a4c:	08003d09 	.word	0x08003d09
 8003a50:	08003d09 	.word	0x08003d09
 8003a54:	08003d09 	.word	0x08003d09
 8003a58:	08003d09 	.word	0x08003d09
 8003a5c:	08003bf1 	.word	0x08003bf1
 8003a60:	08003d09 	.word	0x08003d09
 8003a64:	08003c07 	.word	0x08003c07
 8003a68:	08003d09 	.word	0x08003d09
 8003a6c:	08003ab9 	.word	0x08003ab9
 8003a70:	08003b51 	.word	0x08003b51
 8003a74:	08003adf 	.word	0x08003adf
 8003a78:	08003b79 	.word	0x08003b79
 8003a7c:	08003b05 	.word	0x08003b05
 8003a80:	08003ba1 	.word	0x08003ba1
 8003a84:	08003b2b 	.word	0x08003b2b
 8003a88:	08003bc9 	.word	0x08003bc9
 8003a8c:	08003c5f 	.word	0x08003c5f
 8003a90:	08003c75 	.word	0x08003c75
 8003a94:	08003c49 	.word	0x08003c49
 8003a98:	08003d09 	.word	0x08003d09
 8003a9c:	08003cad 	.word	0x08003cad
 8003aa0:	08003cc3 	.word	0x08003cc3
 8003aa4:	08003c97 	.word	0x08003c97
 8003aa8:	08003d09 	.word	0x08003d09
 8003aac:	08003c1d 	.word	0x08003c1d
 8003ab0:	08003d09 	.word	0x08003d09
 8003ab4:	08003c33 	.word	0x08003c33

	// MFC1..MFC4 SET
	case CMD_MFC1_SET: {
		uint16_t p = clamp16(cmd.parameter);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fc fe19 	bl	80006f2 <clamp16>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	843b      	strh	r3, [r7, #32]
		cmd.cmd_ack = z_mfc_set(0, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003ac4:	8c3b      	ldrh	r3, [r7, #32]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	2000      	movs	r0, #0
 8003aca:	f7ff fe2f 	bl	800372c <z_mfc_set>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <z_cmd_sero+0xc0>
 8003ad4:	2380      	movs	r3, #128	@ 0x80
 8003ad6:	e000      	b.n	8003ada <z_cmd_sero+0xc2>
 8003ad8:	2307      	movs	r3, #7
 8003ada:	713b      	strb	r3, [r7, #4]
		break;
 8003adc:	e120      	b.n	8003d20 <z_cmd_sero+0x308>
	}
	case CMD_MFC2_SET: {
		uint16_t p = clamp16(cmd.parameter);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fc fe06 	bl	80006f2 <clamp16>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	847b      	strh	r3, [r7, #34]	@ 0x22
		cmd.cmd_ack = z_mfc_set(1, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003aea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003aec:	4619      	mov	r1, r3
 8003aee:	2001      	movs	r0, #1
 8003af0:	f7ff fe1c 	bl	800372c <z_mfc_set>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <z_cmd_sero+0xe6>
 8003afa:	2380      	movs	r3, #128	@ 0x80
 8003afc:	e000      	b.n	8003b00 <z_cmd_sero+0xe8>
 8003afe:	2307      	movs	r3, #7
 8003b00:	713b      	strb	r3, [r7, #4]
		break;
 8003b02:	e10d      	b.n	8003d20 <z_cmd_sero+0x308>
	}
	case CMD_MFC3_SET: {
		uint16_t p = clamp16(cmd.parameter);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fc fdf3 	bl	80006f2 <clamp16>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		cmd.cmd_ack = z_mfc_set(2, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003b10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b12:	4619      	mov	r1, r3
 8003b14:	2002      	movs	r0, #2
 8003b16:	f7ff fe09 	bl	800372c <z_mfc_set>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <z_cmd_sero+0x10c>
 8003b20:	2380      	movs	r3, #128	@ 0x80
 8003b22:	e000      	b.n	8003b26 <z_cmd_sero+0x10e>
 8003b24:	2307      	movs	r3, #7
 8003b26:	713b      	strb	r3, [r7, #4]
		break;
 8003b28:	e0fa      	b.n	8003d20 <z_cmd_sero+0x308>
	}
	case CMD_MFC4_SET: {
		uint16_t p = clamp16(cmd.parameter);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fc fde0 	bl	80006f2 <clamp16>
 8003b32:	4603      	mov	r3, r0
 8003b34:	84fb      	strh	r3, [r7, #38]	@ 0x26
		cmd.cmd_ack = z_mfc_set(3, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003b36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b38:	4619      	mov	r1, r3
 8003b3a:	2003      	movs	r0, #3
 8003b3c:	f7ff fdf6 	bl	800372c <z_mfc_set>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <z_cmd_sero+0x132>
 8003b46:	2380      	movs	r3, #128	@ 0x80
 8003b48:	e000      	b.n	8003b4c <z_cmd_sero+0x134>
 8003b4a:	2307      	movs	r3, #7
 8003b4c:	713b      	strb	r3, [r7, #4]
		break;
 8003b4e:	e0e7      	b.n	8003d20 <z_cmd_sero+0x308>
	}

	// MFC1..MFC4 GET
	case CMD_MFC1_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(0, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003b50:	f107 031e 	add.w	r3, r7, #30
 8003b54:	4619      	mov	r1, r3
 8003b56:	2000      	movs	r0, #0
 8003b58:	f7ff fe0e 	bl	8003778 <z_mfc_get>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <z_cmd_sero+0x14e>
 8003b62:	2380      	movs	r3, #128	@ 0x80
 8003b64:	e000      	b.n	8003b68 <z_cmd_sero+0x150>
 8003b66:	2307      	movs	r3, #7
 8003b68:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 8003b6a:	793b      	ldrb	r3, [r7, #4]
 8003b6c:	2b80      	cmp	r3, #128	@ 0x80
 8003b6e:	f040 80ce 	bne.w	8003d0e <z_cmd_sero+0x2f6>
			cmd.parameter = v;
 8003b72:	8bfb      	ldrh	r3, [r7, #30]
 8003b74:	60bb      	str	r3, [r7, #8]
		break;
 8003b76:	e0ca      	b.n	8003d0e <z_cmd_sero+0x2f6>
	}
	case CMD_MFC2_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(1, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003b78:	f107 031c 	add.w	r3, r7, #28
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	2001      	movs	r0, #1
 8003b80:	f7ff fdfa 	bl	8003778 <z_mfc_get>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <z_cmd_sero+0x176>
 8003b8a:	2380      	movs	r3, #128	@ 0x80
 8003b8c:	e000      	b.n	8003b90 <z_cmd_sero+0x178>
 8003b8e:	2307      	movs	r3, #7
 8003b90:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 8003b92:	793b      	ldrb	r3, [r7, #4]
 8003b94:	2b80      	cmp	r3, #128	@ 0x80
 8003b96:	f040 80bc 	bne.w	8003d12 <z_cmd_sero+0x2fa>
			cmd.parameter = v;
 8003b9a:	8bbb      	ldrh	r3, [r7, #28]
 8003b9c:	60bb      	str	r3, [r7, #8]
		break;
 8003b9e:	e0b8      	b.n	8003d12 <z_cmd_sero+0x2fa>
	}
	case CMD_MFC3_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(2, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003ba0:	f107 031a 	add.w	r3, r7, #26
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	2002      	movs	r0, #2
 8003ba8:	f7ff fde6 	bl	8003778 <z_mfc_get>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <z_cmd_sero+0x19e>
 8003bb2:	2380      	movs	r3, #128	@ 0x80
 8003bb4:	e000      	b.n	8003bb8 <z_cmd_sero+0x1a0>
 8003bb6:	2307      	movs	r3, #7
 8003bb8:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 8003bba:	793b      	ldrb	r3, [r7, #4]
 8003bbc:	2b80      	cmp	r3, #128	@ 0x80
 8003bbe:	f040 80aa 	bne.w	8003d16 <z_cmd_sero+0x2fe>
			cmd.parameter = v;
 8003bc2:	8b7b      	ldrh	r3, [r7, #26]
 8003bc4:	60bb      	str	r3, [r7, #8]
		break;
 8003bc6:	e0a6      	b.n	8003d16 <z_cmd_sero+0x2fe>
	}
	case CMD_MFC4_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(3, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003bc8:	f107 0318 	add.w	r3, r7, #24
 8003bcc:	4619      	mov	r1, r3
 8003bce:	2003      	movs	r0, #3
 8003bd0:	f7ff fdd2 	bl	8003778 <z_mfc_get>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <z_cmd_sero+0x1c6>
 8003bda:	2380      	movs	r3, #128	@ 0x80
 8003bdc:	e000      	b.n	8003be0 <z_cmd_sero+0x1c8>
 8003bde:	2307      	movs	r3, #7
 8003be0:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 8003be2:	793b      	ldrb	r3, [r7, #4]
 8003be4:	2b80      	cmp	r3, #128	@ 0x80
 8003be6:	f040 8098 	bne.w	8003d1a <z_cmd_sero+0x302>
			cmd.parameter = v;
 8003bea:	8b3b      	ldrh	r3, [r7, #24]
 8003bec:	60bb      	str	r3, [r7, #8]
		break;
 8003bee:	e094      	b.n	8003d1a <z_cmd_sero+0x302>
	}

	// MFC1..MFC4 CLOSE
	case CMD_MFC1_CLOSE: {
		cmd.cmd_ack = z_mfc_close(0) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f7ff fde7 	bl	80037c4 <z_mfc_close>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <z_cmd_sero+0x1e8>
 8003bfc:	2380      	movs	r3, #128	@ 0x80
 8003bfe:	e000      	b.n	8003c02 <z_cmd_sero+0x1ea>
 8003c00:	2307      	movs	r3, #7
 8003c02:	713b      	strb	r3, [r7, #4]
		break;
 8003c04:	e08c      	b.n	8003d20 <z_cmd_sero+0x308>
	}
	case CMD_MFC2_CLOSE: {
		cmd.cmd_ack = z_mfc_close(1) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003c06:	2001      	movs	r0, #1
 8003c08:	f7ff fddc 	bl	80037c4 <z_mfc_close>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <z_cmd_sero+0x1fe>
 8003c12:	2380      	movs	r3, #128	@ 0x80
 8003c14:	e000      	b.n	8003c18 <z_cmd_sero+0x200>
 8003c16:	2307      	movs	r3, #7
 8003c18:	713b      	strb	r3, [r7, #4]
		break;
 8003c1a:	e081      	b.n	8003d20 <z_cmd_sero+0x308>
	}
	case CMD_MFC3_CLOSE: {
		cmd.cmd_ack = z_mfc_close(2) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003c1c:	2002      	movs	r0, #2
 8003c1e:	f7ff fdd1 	bl	80037c4 <z_mfc_close>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <z_cmd_sero+0x214>
 8003c28:	2380      	movs	r3, #128	@ 0x80
 8003c2a:	e000      	b.n	8003c2e <z_cmd_sero+0x216>
 8003c2c:	2307      	movs	r3, #7
 8003c2e:	713b      	strb	r3, [r7, #4]
		break;
 8003c30:	e076      	b.n	8003d20 <z_cmd_sero+0x308>
	}
	case CMD_MFC4_CLOSE: {
		cmd.cmd_ack = z_mfc_close(3) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003c32:	2003      	movs	r0, #3
 8003c34:	f7ff fdc6 	bl	80037c4 <z_mfc_close>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <z_cmd_sero+0x22a>
 8003c3e:	2380      	movs	r3, #128	@ 0x80
 8003c40:	e000      	b.n	8003c44 <z_cmd_sero+0x22c>
 8003c42:	2307      	movs	r3, #7
 8003c44:	713b      	strb	r3, [r7, #4]
		break;
 8003c46:	e06b      	b.n	8003d20 <z_cmd_sero+0x308>
	}

	// Valves OPEN-CLOSE-READ
	case CMD_V3_OPEN: {
	    cmd.cmd_ack = z_valve_open(3) ? CMR_SUCCESSFULL : CMR_UNITBUSY;
 8003c48:	2003      	movs	r0, #3
 8003c4a:	f7ff fe19 	bl	8003880 <z_valve_open>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <z_cmd_sero+0x240>
 8003c54:	2380      	movs	r3, #128	@ 0x80
 8003c56:	e000      	b.n	8003c5a <z_cmd_sero+0x242>
 8003c58:	2309      	movs	r3, #9
 8003c5a:	713b      	strb	r3, [r7, #4]
	    break;
 8003c5c:	e060      	b.n	8003d20 <z_cmd_sero+0x308>
	}
	case CMD_V3_CLOSE: {
	    cmd.cmd_ack = z_valve_close(3) ? CMR_SUCCESSFULL : CMR_UNITBUSY;
 8003c5e:	2003      	movs	r0, #3
 8003c60:	f7ff fe22 	bl	80038a8 <z_valve_close>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <z_cmd_sero+0x256>
 8003c6a:	2380      	movs	r3, #128	@ 0x80
 8003c6c:	e000      	b.n	8003c70 <z_cmd_sero+0x258>
 8003c6e:	2309      	movs	r3, #9
 8003c70:	713b      	strb	r3, [r7, #4]
	    break;
 8003c72:	e055      	b.n	8003d20 <z_cmd_sero+0x308>
	}
	case CMD_V3_READ: {
	    uint16_t st;
	    if (z_valve_get(3, &st)) { cmd.parameter = st; cmd.cmd_ack = CMR_SUCCESSFULL; }
 8003c74:	f107 0316 	add.w	r3, r7, #22
 8003c78:	4619      	mov	r1, r3
 8003c7a:	2003      	movs	r0, #3
 8003c7c:	f7ff fe28 	bl	80038d0 <z_valve_get>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <z_cmd_sero+0x278>
 8003c86:	8afb      	ldrh	r3, [r7, #22]
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	2380      	movs	r3, #128	@ 0x80
 8003c8c:	713b      	strb	r3, [r7, #4]
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
	    break;
 8003c8e:	e047      	b.n	8003d20 <z_cmd_sero+0x308>
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
 8003c90:	2307      	movs	r3, #7
 8003c92:	713b      	strb	r3, [r7, #4]
	    break;
 8003c94:	e044      	b.n	8003d20 <z_cmd_sero+0x308>
	}

	case CMD_V4_OPEN: {
	    cmd.cmd_ack = z_valve_open(4) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003c96:	2004      	movs	r0, #4
 8003c98:	f7ff fdf2 	bl	8003880 <z_valve_open>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <z_cmd_sero+0x28e>
 8003ca2:	2380      	movs	r3, #128	@ 0x80
 8003ca4:	e000      	b.n	8003ca8 <z_cmd_sero+0x290>
 8003ca6:	2307      	movs	r3, #7
 8003ca8:	713b      	strb	r3, [r7, #4]
	    break;
 8003caa:	e039      	b.n	8003d20 <z_cmd_sero+0x308>
	}
	case CMD_V4_CLOSE: {
	    cmd.cmd_ack = z_valve_close(4) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003cac:	2004      	movs	r0, #4
 8003cae:	f7ff fdfb 	bl	80038a8 <z_valve_close>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <z_cmd_sero+0x2a4>
 8003cb8:	2380      	movs	r3, #128	@ 0x80
 8003cba:	e000      	b.n	8003cbe <z_cmd_sero+0x2a6>
 8003cbc:	2307      	movs	r3, #7
 8003cbe:	713b      	strb	r3, [r7, #4]
	    break;
 8003cc0:	e02e      	b.n	8003d20 <z_cmd_sero+0x308>
	}
	case CMD_V4_READ: {
	    uint16_t st;
	    if (z_valve_get(4, &st)) { cmd.parameter = st; cmd.cmd_ack = CMR_SUCCESSFULL; }
 8003cc2:	f107 0314 	add.w	r3, r7, #20
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	2004      	movs	r0, #4
 8003cca:	f7ff fe01 	bl	80038d0 <z_valve_get>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d004      	beq.n	8003cde <z_cmd_sero+0x2c6>
 8003cd4:	8abb      	ldrh	r3, [r7, #20]
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	2380      	movs	r3, #128	@ 0x80
 8003cda:	713b      	strb	r3, [r7, #4]
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
	    break;
 8003cdc:	e020      	b.n	8003d20 <z_cmd_sero+0x308>
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
 8003cde:	2307      	movs	r3, #7
 8003ce0:	713b      	strb	r3, [r7, #4]
	    break;
 8003ce2:	e01d      	b.n	8003d20 <z_cmd_sero+0x308>
	}

	// GET SET ERR GASBOX
	case CMD_GET_ERR_GB: {
	    uint16_t e;
	    cmd.cmd_ack = z_gb_err_get(&e);
 8003ce4:	f107 0312 	add.w	r3, r7, #18
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fe14 	bl	8003916 <z_gb_err_get>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	713b      	strb	r3, [r7, #4]
	    if (cmd.cmd_ack == CMR_SUCCESSFULL) cmd.parameter = e;  // printed by result queue
 8003cf2:	793b      	ldrb	r3, [r7, #4]
 8003cf4:	2b80      	cmp	r3, #128	@ 0x80
 8003cf6:	d112      	bne.n	8003d1e <z_cmd_sero+0x306>
 8003cf8:	8a7b      	ldrh	r3, [r7, #18]
 8003cfa:	60bb      	str	r3, [r7, #8]
	    break;
 8003cfc:	e00f      	b.n	8003d1e <z_cmd_sero+0x306>
	}
	case CMD_RESET_ERR_GB: {
	    cmd.cmd_ack = z_gb_err_clr();
 8003cfe:	f7ff fdfc 	bl	80038fa <z_gb_err_clr>
 8003d02:	4603      	mov	r3, r0
 8003d04:	713b      	strb	r3, [r7, #4]
	    break;
 8003d06:	e00b      	b.n	8003d20 <z_cmd_sero+0x308>
	}


	default:
		cmd.cmd_ack = CMR_UNKNOWNCOMMAND;
 8003d08:	2306      	movs	r3, #6
 8003d0a:	713b      	strb	r3, [r7, #4]
		break;
 8003d0c:	e008      	b.n	8003d20 <z_cmd_sero+0x308>
		break;
 8003d0e:	bf00      	nop
 8003d10:	e006      	b.n	8003d20 <z_cmd_sero+0x308>
		break;
 8003d12:	bf00      	nop
 8003d14:	e004      	b.n	8003d20 <z_cmd_sero+0x308>
		break;
 8003d16:	bf00      	nop
 8003d18:	e002      	b.n	8003d20 <z_cmd_sero+0x308>
		break;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <z_cmd_sero+0x308>
	    break;
 8003d1e:	bf00      	nop
	};
	resultQueue_push(cmd);
 8003d20:	463b      	mov	r3, r7
 8003d22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d24:	f7fe f9e8 	bl	80020f8 <resultQueue_push>

}
 8003d28:	bf00      	nop
 8003d2a:	372c      	adds	r7, #44	@ 0x2c
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd90      	pop	{r4, r7, pc}

08003d30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d30:	480d      	ldr	r0, [pc, #52]	@ (8003d68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d32:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d34:	f7fe fd9a 	bl	800286c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d38:	480c      	ldr	r0, [pc, #48]	@ (8003d6c <LoopForever+0x6>)
  ldr r1, =_edata
 8003d3a:	490d      	ldr	r1, [pc, #52]	@ (8003d70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d74 <LoopForever+0xe>)
  movs r3, #0
 8003d3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003d40:	e002      	b.n	8003d48 <LoopCopyDataInit>

08003d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d46:	3304      	adds	r3, #4

08003d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d4c:	d3f9      	bcc.n	8003d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d50:	4c0a      	ldr	r4, [pc, #40]	@ (8003d7c <LoopForever+0x16>)
  movs r3, #0
 8003d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d54:	e001      	b.n	8003d5a <LoopFillZerobss>

08003d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d58:	3204      	adds	r2, #4

08003d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d5c:	d3fb      	bcc.n	8003d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d5e:	f004 f875 	bl	8007e4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d62:	f7fc ffed 	bl	8000d40 <main>

08003d66 <LoopForever>:

LoopForever:
    b LoopForever
 8003d66:	e7fe      	b.n	8003d66 <LoopForever>
  ldr   r0, =_estack
 8003d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d70:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003d74:	08008a90 	.word	0x08008a90
  ldr r2, =_sbss
 8003d78:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003d7c:	200013b8 	.word	0x200013b8

08003d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d80:	e7fe      	b.n	8003d80 <ADC1_2_IRQHandler>

08003d82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d8c:	2003      	movs	r0, #3
 8003d8e:	f000 f97f 	bl	8004090 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d92:	200f      	movs	r0, #15
 8003d94:	f000 f80e 	bl	8003db4 <HAL_InitTick>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	71fb      	strb	r3, [r7, #7]
 8003da2:	e001      	b.n	8003da8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003da4:	f7fe fcd8 	bl	8002758 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003da8:	79fb      	ldrb	r3, [r7, #7]

}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003dc0:	4b16      	ldr	r3, [pc, #88]	@ (8003e1c <HAL_InitTick+0x68>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d022      	beq.n	8003e0e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003dc8:	4b15      	ldr	r3, [pc, #84]	@ (8003e20 <HAL_InitTick+0x6c>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b13      	ldr	r3, [pc, #76]	@ (8003e1c <HAL_InitTick+0x68>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 f998 	bl	8004112 <HAL_SYSTICK_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10f      	bne.n	8003e08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b0f      	cmp	r3, #15
 8003dec:	d809      	bhi.n	8003e02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dee:	2200      	movs	r2, #0
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	f04f 30ff 	mov.w	r0, #4294967295
 8003df6:	f000 f956 	bl	80040a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003e24 <HAL_InitTick+0x70>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	e007      	b.n	8003e12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
 8003e06:	e004      	b.n	8003e12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
 8003e0c:	e001      	b.n	8003e12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	2000000c 	.word	0x2000000c
 8003e20:	20000004 	.word	0x20000004
 8003e24:	20000008 	.word	0x20000008

08003e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e2c:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <HAL_IncTick+0x1c>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b05      	ldr	r3, [pc, #20]	@ (8003e48 <HAL_IncTick+0x20>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4413      	add	r3, r2
 8003e36:	4a03      	ldr	r2, [pc, #12]	@ (8003e44 <HAL_IncTick+0x1c>)
 8003e38:	6013      	str	r3, [r2, #0]
}
 8003e3a:	bf00      	nop
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	2000126c 	.word	0x2000126c
 8003e48:	2000000c 	.word	0x2000000c

08003e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e50:	4b03      	ldr	r3, [pc, #12]	@ (8003e60 <HAL_GetTick+0x14>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	2000126c 	.word	0x2000126c

08003e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e6c:	f7ff ffee 	bl	8003e4c <HAL_GetTick>
 8003e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d004      	beq.n	8003e88 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ea4 <HAL_Delay+0x40>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e88:	bf00      	nop
 8003e8a:	f7ff ffdf 	bl	8003e4c <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d8f7      	bhi.n	8003e8a <HAL_Delay+0x26>
  {
  }
}
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	2000000c 	.word	0x2000000c

08003ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <__NVIC_SetPriorityGrouping+0x44>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eda:	4a04      	ldr	r2, [pc, #16]	@ (8003eec <__NVIC_SetPriorityGrouping+0x44>)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	60d3      	str	r3, [r2, #12]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef4:	4b04      	ldr	r3, [pc, #16]	@ (8003f08 <__NVIC_GetPriorityGrouping+0x18>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	0a1b      	lsrs	r3, r3, #8
 8003efa:	f003 0307 	and.w	r3, r3, #7
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	db0b      	blt.n	8003f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	f003 021f 	and.w	r2, r3, #31
 8003f24:	4907      	ldr	r1, [pc, #28]	@ (8003f44 <__NVIC_EnableIRQ+0x38>)
 8003f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	e000e100 	.word	0xe000e100

08003f48 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	db12      	blt.n	8003f80 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	f003 021f 	and.w	r2, r3, #31
 8003f60:	490a      	ldr	r1, [pc, #40]	@ (8003f8c <__NVIC_DisableIRQ+0x44>)
 8003f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2001      	movs	r0, #1
 8003f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f6e:	3320      	adds	r3, #32
 8003f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f74:	f3bf 8f4f 	dsb	sy
}
 8003f78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f7a:	f3bf 8f6f 	isb	sy
}
 8003f7e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000e100 	.word	0xe000e100

08003f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	6039      	str	r1, [r7, #0]
 8003f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	db0a      	blt.n	8003fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	490c      	ldr	r1, [pc, #48]	@ (8003fdc <__NVIC_SetPriority+0x4c>)
 8003faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fae:	0112      	lsls	r2, r2, #4
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fb8:	e00a      	b.n	8003fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	4908      	ldr	r1, [pc, #32]	@ (8003fe0 <__NVIC_SetPriority+0x50>)
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	3b04      	subs	r3, #4
 8003fc8:	0112      	lsls	r2, r2, #4
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	440b      	add	r3, r1
 8003fce:	761a      	strb	r2, [r3, #24]
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	e000e100 	.word	0xe000e100
 8003fe0:	e000ed00 	.word	0xe000ed00

08003fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b089      	sub	sp, #36	@ 0x24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f1c3 0307 	rsb	r3, r3, #7
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	bf28      	it	cs
 8004002:	2304      	movcs	r3, #4
 8004004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	3304      	adds	r3, #4
 800400a:	2b06      	cmp	r3, #6
 800400c:	d902      	bls.n	8004014 <NVIC_EncodePriority+0x30>
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	3b03      	subs	r3, #3
 8004012:	e000      	b.n	8004016 <NVIC_EncodePriority+0x32>
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004018:	f04f 32ff 	mov.w	r2, #4294967295
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	43da      	mvns	r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	401a      	ands	r2, r3
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800402c:	f04f 31ff 	mov.w	r1, #4294967295
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	43d9      	mvns	r1, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800403c:	4313      	orrs	r3, r2
         );
}
 800403e:	4618      	mov	r0, r3
 8004040:	3724      	adds	r7, #36	@ 0x24
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3b01      	subs	r3, #1
 8004058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800405c:	d301      	bcc.n	8004062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800405e:	2301      	movs	r3, #1
 8004060:	e00f      	b.n	8004082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004062:	4a0a      	ldr	r2, [pc, #40]	@ (800408c <SysTick_Config+0x40>)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3b01      	subs	r3, #1
 8004068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800406a:	210f      	movs	r1, #15
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	f7ff ff8e 	bl	8003f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004074:	4b05      	ldr	r3, [pc, #20]	@ (800408c <SysTick_Config+0x40>)
 8004076:	2200      	movs	r2, #0
 8004078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800407a:	4b04      	ldr	r3, [pc, #16]	@ (800408c <SysTick_Config+0x40>)
 800407c:	2207      	movs	r2, #7
 800407e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	e000e010 	.word	0xe000e010

08004090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ff05 	bl	8003ea8 <__NVIC_SetPriorityGrouping>
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b086      	sub	sp, #24
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	4603      	mov	r3, r0
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040b4:	f7ff ff1c 	bl	8003ef0 <__NVIC_GetPriorityGrouping>
 80040b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	6978      	ldr	r0, [r7, #20]
 80040c0:	f7ff ff90 	bl	8003fe4 <NVIC_EncodePriority>
 80040c4:	4602      	mov	r2, r0
 80040c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ca:	4611      	mov	r1, r2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff ff5f 	bl	8003f90 <__NVIC_SetPriority>
}
 80040d2:	bf00      	nop
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	4603      	mov	r3, r0
 80040e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff ff0f 	bl	8003f0c <__NVIC_EnableIRQ>
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	4603      	mov	r3, r0
 80040fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff ff1f 	bl	8003f48 <__NVIC_DisableIRQ>
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff ff96 	bl	800404c <SysTick_Config>
 8004120:	4603      	mov	r3, r0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800413a:	e15a      	b.n	80043f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	2101      	movs	r1, #1
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	fa01 f303 	lsl.w	r3, r1, r3
 8004148:	4013      	ands	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 814c 	beq.w	80043ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d005      	beq.n	800416c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004168:	2b02      	cmp	r3, #2
 800416a:	d130      	bne.n	80041ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	2203      	movs	r2, #3
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	43db      	mvns	r3, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041a2:	2201      	movs	r2, #1
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	f003 0201 	and.w	r2, r3, #1
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d017      	beq.n	800420a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	2203      	movs	r2, #3
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43db      	mvns	r3, r3
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4013      	ands	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d123      	bne.n	800425e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	08da      	lsrs	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3208      	adds	r2, #8
 800421e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004222:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	220f      	movs	r2, #15
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4013      	ands	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	08da      	lsrs	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3208      	adds	r2, #8
 8004258:	6939      	ldr	r1, [r7, #16]
 800425a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	2203      	movs	r2, #3
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43db      	mvns	r3, r3
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 0203 	and.w	r2, r3, #3
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80a6 	beq.w	80043ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a0:	4b5b      	ldr	r3, [pc, #364]	@ (8004410 <HAL_GPIO_Init+0x2e4>)
 80042a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a4:	4a5a      	ldr	r2, [pc, #360]	@ (8004410 <HAL_GPIO_Init+0x2e4>)
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80042ac:	4b58      	ldr	r3, [pc, #352]	@ (8004410 <HAL_GPIO_Init+0x2e4>)
 80042ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042b8:	4a56      	ldr	r2, [pc, #344]	@ (8004414 <HAL_GPIO_Init+0x2e8>)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	3302      	adds	r3, #2
 80042c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	220f      	movs	r2, #15
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4013      	ands	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042e2:	d01f      	beq.n	8004324 <HAL_GPIO_Init+0x1f8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a4c      	ldr	r2, [pc, #304]	@ (8004418 <HAL_GPIO_Init+0x2ec>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d019      	beq.n	8004320 <HAL_GPIO_Init+0x1f4>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a4b      	ldr	r2, [pc, #300]	@ (800441c <HAL_GPIO_Init+0x2f0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d013      	beq.n	800431c <HAL_GPIO_Init+0x1f0>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a4a      	ldr	r2, [pc, #296]	@ (8004420 <HAL_GPIO_Init+0x2f4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00d      	beq.n	8004318 <HAL_GPIO_Init+0x1ec>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a49      	ldr	r2, [pc, #292]	@ (8004424 <HAL_GPIO_Init+0x2f8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d007      	beq.n	8004314 <HAL_GPIO_Init+0x1e8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a48      	ldr	r2, [pc, #288]	@ (8004428 <HAL_GPIO_Init+0x2fc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <HAL_GPIO_Init+0x1e4>
 800430c:	2305      	movs	r3, #5
 800430e:	e00a      	b.n	8004326 <HAL_GPIO_Init+0x1fa>
 8004310:	2306      	movs	r3, #6
 8004312:	e008      	b.n	8004326 <HAL_GPIO_Init+0x1fa>
 8004314:	2304      	movs	r3, #4
 8004316:	e006      	b.n	8004326 <HAL_GPIO_Init+0x1fa>
 8004318:	2303      	movs	r3, #3
 800431a:	e004      	b.n	8004326 <HAL_GPIO_Init+0x1fa>
 800431c:	2302      	movs	r3, #2
 800431e:	e002      	b.n	8004326 <HAL_GPIO_Init+0x1fa>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <HAL_GPIO_Init+0x1fa>
 8004324:	2300      	movs	r3, #0
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	f002 0203 	and.w	r2, r2, #3
 800432c:	0092      	lsls	r2, r2, #2
 800432e:	4093      	lsls	r3, r2
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004336:	4937      	ldr	r1, [pc, #220]	@ (8004414 <HAL_GPIO_Init+0x2e8>)
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	089b      	lsrs	r3, r3, #2
 800433c:	3302      	adds	r3, #2
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004344:	4b39      	ldr	r3, [pc, #228]	@ (800442c <HAL_GPIO_Init+0x300>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	43db      	mvns	r3, r3
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004368:	4a30      	ldr	r2, [pc, #192]	@ (800442c <HAL_GPIO_Init+0x300>)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800436e:	4b2f      	ldr	r3, [pc, #188]	@ (800442c <HAL_GPIO_Init+0x300>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	43db      	mvns	r3, r3
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4013      	ands	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004392:	4a26      	ldr	r2, [pc, #152]	@ (800442c <HAL_GPIO_Init+0x300>)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004398:	4b24      	ldr	r3, [pc, #144]	@ (800442c <HAL_GPIO_Init+0x300>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	43db      	mvns	r3, r3
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4013      	ands	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043bc:	4a1b      	ldr	r2, [pc, #108]	@ (800442c <HAL_GPIO_Init+0x300>)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80043c2:	4b1a      	ldr	r3, [pc, #104]	@ (800442c <HAL_GPIO_Init+0x300>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	43db      	mvns	r3, r3
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4013      	ands	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043e6:	4a11      	ldr	r2, [pc, #68]	@ (800442c <HAL_GPIO_Init+0x300>)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	3301      	adds	r3, #1
 80043f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f47f ae9d 	bne.w	800413c <HAL_GPIO_Init+0x10>
  }
}
 8004402:	bf00      	nop
 8004404:	bf00      	nop
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40021000 	.word	0x40021000
 8004414:	40010000 	.word	0x40010000
 8004418:	48000400 	.word	0x48000400
 800441c:	48000800 	.word	0x48000800
 8004420:	48000c00 	.word	0x48000c00
 8004424:	48001000 	.word	0x48001000
 8004428:	48001400 	.word	0x48001400
 800442c:	40010400 	.word	0x40010400

08004430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	887b      	ldrh	r3, [r7, #2]
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	e001      	b.n	8004452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800444e:	2300      	movs	r3, #0
 8004450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	807b      	strh	r3, [r7, #2]
 800446c:	4613      	mov	r3, r2
 800446e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004470:	787b      	ldrb	r3, [r7, #1]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004476:	887a      	ldrh	r2, [r7, #2]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800447c:	e002      	b.n	8004484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800447e:	887a      	ldrh	r2, [r7, #2]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044a2:	887a      	ldrh	r2, [r7, #2]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4013      	ands	r3, r2
 80044a8:	041a      	lsls	r2, r3, #16
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	43d9      	mvns	r1, r3
 80044ae:	887b      	ldrh	r3, [r7, #2]
 80044b0:	400b      	ands	r3, r1
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	619a      	str	r2, [r3, #24]
}
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d141      	bne.n	8004556 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044de:	d131      	bne.n	8004544 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044e0:	4b47      	ldr	r3, [pc, #284]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044e6:	4a46      	ldr	r2, [pc, #280]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044f0:	4b43      	ldr	r3, [pc, #268]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044f8:	4a41      	ldr	r2, [pc, #260]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004500:	4b40      	ldr	r3, [pc, #256]	@ (8004604 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2232      	movs	r2, #50	@ 0x32
 8004506:	fb02 f303 	mul.w	r3, r2, r3
 800450a:	4a3f      	ldr	r2, [pc, #252]	@ (8004608 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800450c:	fba2 2303 	umull	r2, r3, r2, r3
 8004510:	0c9b      	lsrs	r3, r3, #18
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004516:	e002      	b.n	800451e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3b01      	subs	r3, #1
 800451c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800451e:	4b38      	ldr	r3, [pc, #224]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800452a:	d102      	bne.n	8004532 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f2      	bne.n	8004518 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004532:	4b33      	ldr	r3, [pc, #204]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800453a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800453e:	d158      	bne.n	80045f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e057      	b.n	80045f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004544:	4b2e      	ldr	r3, [pc, #184]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800454a:	4a2d      	ldr	r2, [pc, #180]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800454c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004550:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004554:	e04d      	b.n	80045f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800455c:	d141      	bne.n	80045e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800455e:	4b28      	ldr	r3, [pc, #160]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800456a:	d131      	bne.n	80045d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800456c:	4b24      	ldr	r3, [pc, #144]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800456e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004572:	4a23      	ldr	r2, [pc, #140]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004578:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800457c:	4b20      	ldr	r3, [pc, #128]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004584:	4a1e      	ldr	r2, [pc, #120]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004586:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800458a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800458c:	4b1d      	ldr	r3, [pc, #116]	@ (8004604 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2232      	movs	r2, #50	@ 0x32
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	4a1c      	ldr	r2, [pc, #112]	@ (8004608 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	0c9b      	lsrs	r3, r3, #18
 800459e:	3301      	adds	r3, #1
 80045a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045a2:	e002      	b.n	80045aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045aa:	4b15      	ldr	r3, [pc, #84]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045b6:	d102      	bne.n	80045be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f2      	bne.n	80045a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045be:	4b10      	ldr	r3, [pc, #64]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ca:	d112      	bne.n	80045f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e011      	b.n	80045f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80045e0:	e007      	b.n	80045f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045e2:	4b07      	ldr	r3, [pc, #28]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045ea:	4a05      	ldr	r2, [pc, #20]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	40007000 	.word	0x40007000
 8004604:	20000004 	.word	0x20000004
 8004608:	431bde83 	.word	0x431bde83

0800460c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004610:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4a04      	ldr	r2, [pc, #16]	@ (8004628 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004616:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800461a:	6093      	str	r3, [r2, #8]
}
 800461c:	bf00      	nop
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40007000 	.word	0x40007000

0800462c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e2fe      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d075      	beq.n	8004736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800464a:	4b97      	ldr	r3, [pc, #604]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004654:	4b94      	ldr	r3, [pc, #592]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b0c      	cmp	r3, #12
 8004662:	d102      	bne.n	800466a <HAL_RCC_OscConfig+0x3e>
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2b03      	cmp	r3, #3
 8004668:	d002      	beq.n	8004670 <HAL_RCC_OscConfig+0x44>
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d10b      	bne.n	8004688 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004670:	4b8d      	ldr	r3, [pc, #564]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d05b      	beq.n	8004734 <HAL_RCC_OscConfig+0x108>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d157      	bne.n	8004734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e2d9      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004690:	d106      	bne.n	80046a0 <HAL_RCC_OscConfig+0x74>
 8004692:	4b85      	ldr	r3, [pc, #532]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a84      	ldr	r2, [pc, #528]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 8004698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	e01d      	b.n	80046dc <HAL_RCC_OscConfig+0xb0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x98>
 80046aa:	4b7f      	ldr	r3, [pc, #508]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a7e      	ldr	r2, [pc, #504]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80046b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b7c      	ldr	r3, [pc, #496]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a7b      	ldr	r2, [pc, #492]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0xb0>
 80046c4:	4b78      	ldr	r3, [pc, #480]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a77      	ldr	r2, [pc, #476]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b75      	ldr	r3, [pc, #468]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a74      	ldr	r2, [pc, #464]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80046d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7ff fbb2 	bl	8003e4c <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ec:	f7ff fbae 	bl	8003e4c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	@ 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e29e      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046fe:	4b6a      	ldr	r3, [pc, #424]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0xc0>
 800470a:	e014      	b.n	8004736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7ff fb9e 	bl	8003e4c <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004714:	f7ff fb9a 	bl	8003e4c <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b64      	cmp	r3, #100	@ 0x64
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e28a      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004726:	4b60      	ldr	r3, [pc, #384]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0xe8>
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d075      	beq.n	800482e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004742:	4b59      	ldr	r3, [pc, #356]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800474c:	4b56      	ldr	r3, [pc, #344]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b0c      	cmp	r3, #12
 800475a:	d102      	bne.n	8004762 <HAL_RCC_OscConfig+0x136>
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d002      	beq.n	8004768 <HAL_RCC_OscConfig+0x13c>
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d11f      	bne.n	80047a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004768:	4b4f      	ldr	r3, [pc, #316]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_OscConfig+0x154>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e25d      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004780:	4b49      	ldr	r3, [pc, #292]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	061b      	lsls	r3, r3, #24
 800478e:	4946      	ldr	r1, [pc, #280]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 8004790:	4313      	orrs	r3, r2
 8004792:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004794:	4b45      	ldr	r3, [pc, #276]	@ (80048ac <HAL_RCC_OscConfig+0x280>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fb0b 	bl	8003db4 <HAL_InitTick>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d043      	beq.n	800482c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e249      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d023      	beq.n	80047f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b0:	4b3d      	ldr	r3, [pc, #244]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a3c      	ldr	r2, [pc, #240]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80047b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7ff fb46 	bl	8003e4c <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c4:	f7ff fb42 	bl	8003e4c <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e232      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047d6:	4b34      	ldr	r3, [pc, #208]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e2:	4b31      	ldr	r3, [pc, #196]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	061b      	lsls	r3, r3, #24
 80047f0:	492d      	ldr	r1, [pc, #180]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	604b      	str	r3, [r1, #4]
 80047f6:	e01a      	b.n	800482e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f8:	4b2b      	ldr	r3, [pc, #172]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2a      	ldr	r2, [pc, #168]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 80047fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7ff fb22 	bl	8003e4c <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800480c:	f7ff fb1e 	bl	8003e4c <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e20e      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800481e:	4b22      	ldr	r3, [pc, #136]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x1e0>
 800482a:	e000      	b.n	800482e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800482c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d041      	beq.n	80048be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01c      	beq.n	800487c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004842:	4b19      	ldr	r3, [pc, #100]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 8004844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004848:	4a17      	ldr	r2, [pc, #92]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 800484a:	f043 0301 	orr.w	r3, r3, #1
 800484e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004852:	f7ff fafb 	bl	8003e4c <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800485a:	f7ff faf7 	bl	8003e4c <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e1e7      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800486c:	4b0e      	ldr	r3, [pc, #56]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 800486e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0ef      	beq.n	800485a <HAL_RCC_OscConfig+0x22e>
 800487a:	e020      	b.n	80048be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800487c:	4b0a      	ldr	r3, [pc, #40]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 800487e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004882:	4a09      	ldr	r2, [pc, #36]	@ (80048a8 <HAL_RCC_OscConfig+0x27c>)
 8004884:	f023 0301 	bic.w	r3, r3, #1
 8004888:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7ff fade 	bl	8003e4c <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004892:	e00d      	b.n	80048b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004894:	f7ff fada 	bl	8003e4c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d906      	bls.n	80048b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e1ca      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
 80048a6:	bf00      	nop
 80048a8:	40021000 	.word	0x40021000
 80048ac:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048b0:	4b8c      	ldr	r3, [pc, #560]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 80048b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1ea      	bne.n	8004894 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 80a6 	beq.w	8004a18 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048cc:	2300      	movs	r3, #0
 80048ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048d0:	4b84      	ldr	r3, [pc, #528]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 80048d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_RCC_OscConfig+0x2b4>
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <HAL_RCC_OscConfig+0x2b6>
 80048e0:	2300      	movs	r3, #0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00d      	beq.n	8004902 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 80048e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ea:	4a7e      	ldr	r2, [pc, #504]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 80048ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80048f2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 80048f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048fe:	2301      	movs	r3, #1
 8004900:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004902:	4b79      	ldr	r3, [pc, #484]	@ (8004ae8 <HAL_RCC_OscConfig+0x4bc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d118      	bne.n	8004940 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800490e:	4b76      	ldr	r3, [pc, #472]	@ (8004ae8 <HAL_RCC_OscConfig+0x4bc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a75      	ldr	r2, [pc, #468]	@ (8004ae8 <HAL_RCC_OscConfig+0x4bc>)
 8004914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491a:	f7ff fa97 	bl	8003e4c <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004922:	f7ff fa93 	bl	8003e4c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e183      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004934:	4b6c      	ldr	r3, [pc, #432]	@ (8004ae8 <HAL_RCC_OscConfig+0x4bc>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d108      	bne.n	800495a <HAL_RCC_OscConfig+0x32e>
 8004948:	4b66      	ldr	r3, [pc, #408]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494e:	4a65      	ldr	r2, [pc, #404]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004958:	e024      	b.n	80049a4 <HAL_RCC_OscConfig+0x378>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b05      	cmp	r3, #5
 8004960:	d110      	bne.n	8004984 <HAL_RCC_OscConfig+0x358>
 8004962:	4b60      	ldr	r3, [pc, #384]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004968:	4a5e      	ldr	r2, [pc, #376]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 800496a:	f043 0304 	orr.w	r3, r3, #4
 800496e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004972:	4b5c      	ldr	r3, [pc, #368]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004978:	4a5a      	ldr	r2, [pc, #360]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004982:	e00f      	b.n	80049a4 <HAL_RCC_OscConfig+0x378>
 8004984:	4b57      	ldr	r3, [pc, #348]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498a:	4a56      	ldr	r2, [pc, #344]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 800498c:	f023 0301 	bic.w	r3, r3, #1
 8004990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004994:	4b53      	ldr	r3, [pc, #332]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499a:	4a52      	ldr	r2, [pc, #328]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 800499c:	f023 0304 	bic.w	r3, r3, #4
 80049a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d016      	beq.n	80049da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ac:	f7ff fa4e 	bl	8003e4c <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b4:	f7ff fa4a 	bl	8003e4c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e138      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ca:	4b46      	ldr	r3, [pc, #280]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0ed      	beq.n	80049b4 <HAL_RCC_OscConfig+0x388>
 80049d8:	e015      	b.n	8004a06 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049da:	f7ff fa37 	bl	8003e4c <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049e0:	e00a      	b.n	80049f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e2:	f7ff fa33 	bl	8003e4c <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e121      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049f8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1ed      	bne.n	80049e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a06:	7ffb      	ldrb	r3, [r7, #31]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d105      	bne.n	8004a18 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a0c:	4b35      	ldr	r3, [pc, #212]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a10:	4a34      	ldr	r2, [pc, #208]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a16:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d03c      	beq.n	8004a9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01c      	beq.n	8004a66 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a32:	4a2c      	ldr	r2, [pc, #176]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3c:	f7ff fa06 	bl	8003e4c <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a44:	f7ff fa02 	bl	8003e4c <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e0f2      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a56:	4b23      	ldr	r3, [pc, #140]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0ef      	beq.n	8004a44 <HAL_RCC_OscConfig+0x418>
 8004a64:	e01b      	b.n	8004a9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a66:	4b1f      	ldr	r3, [pc, #124]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004a6e:	f023 0301 	bic.w	r3, r3, #1
 8004a72:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a76:	f7ff f9e9 	bl	8003e4c <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a7e:	f7ff f9e5 	bl	8003e4c <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e0d5      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a90:	4b14      	ldr	r3, [pc, #80]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1ef      	bne.n	8004a7e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 80c9 	beq.w	8004c3a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 030c 	and.w	r3, r3, #12
 8004ab0:	2b0c      	cmp	r3, #12
 8004ab2:	f000 8083 	beq.w	8004bbc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d15e      	bne.n	8004b7c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004abe:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a08      	ldr	r2, [pc, #32]	@ (8004ae4 <HAL_RCC_OscConfig+0x4b8>)
 8004ac4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aca:	f7ff f9bf 	bl	8003e4c <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad0:	e00c      	b.n	8004aec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad2:	f7ff f9bb 	bl	8003e4c <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d905      	bls.n	8004aec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e0ab      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aec:	4b55      	ldr	r3, [pc, #340]	@ (8004c44 <HAL_RCC_OscConfig+0x618>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1ec      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004af8:	4b52      	ldr	r3, [pc, #328]	@ (8004c44 <HAL_RCC_OscConfig+0x618>)
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	4b52      	ldr	r3, [pc, #328]	@ (8004c48 <HAL_RCC_OscConfig+0x61c>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6a11      	ldr	r1, [r2, #32]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b08:	3a01      	subs	r2, #1
 8004b0a:	0112      	lsls	r2, r2, #4
 8004b0c:	4311      	orrs	r1, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b12:	0212      	lsls	r2, r2, #8
 8004b14:	4311      	orrs	r1, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b1a:	0852      	lsrs	r2, r2, #1
 8004b1c:	3a01      	subs	r2, #1
 8004b1e:	0552      	lsls	r2, r2, #21
 8004b20:	4311      	orrs	r1, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b26:	0852      	lsrs	r2, r2, #1
 8004b28:	3a01      	subs	r2, #1
 8004b2a:	0652      	lsls	r2, r2, #25
 8004b2c:	4311      	orrs	r1, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b32:	06d2      	lsls	r2, r2, #27
 8004b34:	430a      	orrs	r2, r1
 8004b36:	4943      	ldr	r1, [pc, #268]	@ (8004c44 <HAL_RCC_OscConfig+0x618>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b3c:	4b41      	ldr	r3, [pc, #260]	@ (8004c44 <HAL_RCC_OscConfig+0x618>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a40      	ldr	r2, [pc, #256]	@ (8004c44 <HAL_RCC_OscConfig+0x618>)
 8004b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b46:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b48:	4b3e      	ldr	r3, [pc, #248]	@ (8004c44 <HAL_RCC_OscConfig+0x618>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4a3d      	ldr	r2, [pc, #244]	@ (8004c44 <HAL_RCC_OscConfig+0x618>)
 8004b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7ff f97a 	bl	8003e4c <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7ff f976 	bl	8003e4c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e066      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b6e:	4b35      	ldr	r3, [pc, #212]	@ (8004c44 <HAL_RCC_OscConfig+0x618>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x530>
 8004b7a:	e05e      	b.n	8004c3a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7c:	4b31      	ldr	r3, [pc, #196]	@ (8004c44 <HAL_RCC_OscConfig+0x618>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a30      	ldr	r2, [pc, #192]	@ (8004c44 <HAL_RCC_OscConfig+0x618>)
 8004b82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7ff f960 	bl	8003e4c <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b90:	f7ff f95c 	bl	8003e4c <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e04c      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ba2:	4b28      	ldr	r3, [pc, #160]	@ (8004c44 <HAL_RCC_OscConfig+0x618>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004bae:	4b25      	ldr	r3, [pc, #148]	@ (8004c44 <HAL_RCC_OscConfig+0x618>)
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	4924      	ldr	r1, [pc, #144]	@ (8004c44 <HAL_RCC_OscConfig+0x618>)
 8004bb4:	4b25      	ldr	r3, [pc, #148]	@ (8004c4c <HAL_RCC_OscConfig+0x620>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	60cb      	str	r3, [r1, #12]
 8004bba:	e03e      	b.n	8004c3a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e039      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c44 <HAL_RCC_OscConfig+0x618>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f003 0203 	and.w	r2, r3, #3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d12c      	bne.n	8004c36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	3b01      	subs	r3, #1
 8004be8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d123      	bne.n	8004c36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d11b      	bne.n	8004c36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c08:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d113      	bne.n	8004c36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c18:	085b      	lsrs	r3, r3, #1
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d109      	bne.n	8004c36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2c:	085b      	lsrs	r3, r3, #1
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d001      	beq.n	8004c3a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40021000 	.word	0x40021000
 8004c48:	019f800c 	.word	0x019f800c
 8004c4c:	feeefffc 	.word	0xfeeefffc

08004c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e11e      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c68:	4b91      	ldr	r3, [pc, #580]	@ (8004eb0 <HAL_RCC_ClockConfig+0x260>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d910      	bls.n	8004c98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c76:	4b8e      	ldr	r3, [pc, #568]	@ (8004eb0 <HAL_RCC_ClockConfig+0x260>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 020f 	bic.w	r2, r3, #15
 8004c7e:	498c      	ldr	r1, [pc, #560]	@ (8004eb0 <HAL_RCC_ClockConfig+0x260>)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c86:	4b8a      	ldr	r3, [pc, #552]	@ (8004eb0 <HAL_RCC_ClockConfig+0x260>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d001      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e106      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d073      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d129      	bne.n	8004d00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cac:	4b81      	ldr	r3, [pc, #516]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0f4      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004cbc:	f000 f99e 	bl	8004ffc <RCC_GetSysClockFreqFromPLLSource>
 8004cc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4a7c      	ldr	r2, [pc, #496]	@ (8004eb8 <HAL_RCC_ClockConfig+0x268>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d93f      	bls.n	8004d4a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004cca:	4b7a      	ldr	r3, [pc, #488]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d033      	beq.n	8004d4a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d12f      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cea:	4b72      	ldr	r3, [pc, #456]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cf2:	4a70      	ldr	r2, [pc, #448]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004cfa:	2380      	movs	r3, #128	@ 0x80
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	e024      	b.n	8004d4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d08:	4b6a      	ldr	r3, [pc, #424]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d109      	bne.n	8004d28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0c6      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d18:	4b66      	ldr	r3, [pc, #408]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0be      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d28:	f000 f8ce 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8004d2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	4a61      	ldr	r2, [pc, #388]	@ (8004eb8 <HAL_RCC_ClockConfig+0x268>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d909      	bls.n	8004d4a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d36:	4b5f      	ldr	r3, [pc, #380]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d3e:	4a5d      	ldr	r2, [pc, #372]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d46:	2380      	movs	r3, #128	@ 0x80
 8004d48:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d4a:	4b5a      	ldr	r3, [pc, #360]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f023 0203 	bic.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	4957      	ldr	r1, [pc, #348]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5c:	f7ff f876 	bl	8003e4c <HAL_GetTick>
 8004d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d62:	e00a      	b.n	8004d7a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d64:	f7ff f872 	bl	8003e4c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e095      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	4b4e      	ldr	r3, [pc, #312]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 020c 	and.w	r2, r3, #12
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d1eb      	bne.n	8004d64 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d023      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004da4:	4b43      	ldr	r3, [pc, #268]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	4a42      	ldr	r2, [pc, #264]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004daa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004dae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d007      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004dc4:	4a3b      	ldr	r2, [pc, #236]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004dc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004dca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dcc:	4b39      	ldr	r3, [pc, #228]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	4936      	ldr	r1, [pc, #216]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2b80      	cmp	r3, #128	@ 0x80
 8004de4:	d105      	bne.n	8004df2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004de6:	4b33      	ldr	r3, [pc, #204]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	4a32      	ldr	r2, [pc, #200]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004dec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004df0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004df2:	4b2f      	ldr	r3, [pc, #188]	@ (8004eb0 <HAL_RCC_ClockConfig+0x260>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d21d      	bcs.n	8004e3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e00:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb0 <HAL_RCC_ClockConfig+0x260>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 020f 	bic.w	r2, r3, #15
 8004e08:	4929      	ldr	r1, [pc, #164]	@ (8004eb0 <HAL_RCC_ClockConfig+0x260>)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e10:	f7ff f81c 	bl	8003e4c <HAL_GetTick>
 8004e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	e00a      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e18:	f7ff f818 	bl	8003e4c <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e03b      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2e:	4b20      	ldr	r3, [pc, #128]	@ (8004eb0 <HAL_RCC_ClockConfig+0x260>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d1ed      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e48:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4917      	ldr	r1, [pc, #92]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e66:	4b13      	ldr	r3, [pc, #76]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	490f      	ldr	r1, [pc, #60]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e7a:	f000 f825 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb4 <HAL_RCC_ClockConfig+0x264>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	490c      	ldr	r1, [pc, #48]	@ (8004ebc <HAL_RCC_ClockConfig+0x26c>)
 8004e8c:	5ccb      	ldrb	r3, [r1, r3]
 8004e8e:	f003 031f 	and.w	r3, r3, #31
 8004e92:	fa22 f303 	lsr.w	r3, r2, r3
 8004e96:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec0 <HAL_RCC_ClockConfig+0x270>)
 8004e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec4 <HAL_RCC_ClockConfig+0x274>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe ff88 	bl	8003db4 <HAL_InitTick>
 8004ea4:	4603      	mov	r3, r0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40022000 	.word	0x40022000
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	04c4b400 	.word	0x04c4b400
 8004ebc:	08008a00 	.word	0x08008a00
 8004ec0:	20000004 	.word	0x20000004
 8004ec4:	20000008 	.word	0x20000008

08004ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ece:	4b2c      	ldr	r3, [pc, #176]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d102      	bne.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004eda:	4b2a      	ldr	r3, [pc, #168]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	e047      	b.n	8004f70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ee0:	4b27      	ldr	r3, [pc, #156]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 030c 	and.w	r3, r3, #12
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d102      	bne.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004eec:	4b26      	ldr	r3, [pc, #152]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	e03e      	b.n	8004f70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004ef2:	4b23      	ldr	r3, [pc, #140]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	2b0c      	cmp	r3, #12
 8004efc:	d136      	bne.n	8004f6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004efe:	4b20      	ldr	r3, [pc, #128]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f08:	4b1d      	ldr	r3, [pc, #116]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	3301      	adds	r3, #1
 8004f14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d10c      	bne.n	8004f36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	4a16      	ldr	r2, [pc, #88]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f26:	68d2      	ldr	r2, [r2, #12]
 8004f28:	0a12      	lsrs	r2, r2, #8
 8004f2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	617b      	str	r3, [r7, #20]
      break;
 8004f34:	e00c      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f36:	4a13      	ldr	r2, [pc, #76]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3e:	4a10      	ldr	r2, [pc, #64]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f40:	68d2      	ldr	r2, [r2, #12]
 8004f42:	0a12      	lsrs	r2, r2, #8
 8004f44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f48:	fb02 f303 	mul.w	r3, r2, r3
 8004f4c:	617b      	str	r3, [r7, #20]
      break;
 8004f4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f50:	4b0b      	ldr	r3, [pc, #44]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	0e5b      	lsrs	r3, r3, #25
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f68:	613b      	str	r3, [r7, #16]
 8004f6a:	e001      	b.n	8004f70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004f70:	693b      	ldr	r3, [r7, #16]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40021000 	.word	0x40021000
 8004f84:	00f42400 	.word	0x00f42400
 8004f88:	007a1200 	.word	0x007a1200

08004f8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f90:	4b03      	ldr	r3, [pc, #12]	@ (8004fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f92:	681b      	ldr	r3, [r3, #0]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	20000004 	.word	0x20000004

08004fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fa8:	f7ff fff0 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b06      	ldr	r3, [pc, #24]	@ (8004fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	0a1b      	lsrs	r3, r3, #8
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4904      	ldr	r1, [pc, #16]	@ (8004fcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fba:	5ccb      	ldrb	r3, [r1, r3]
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	08008a10 	.word	0x08008a10

08004fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fd4:	f7ff ffda 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	0adb      	lsrs	r3, r3, #11
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	4904      	ldr	r1, [pc, #16]	@ (8004ff8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	08008a10 	.word	0x08008a10

08004ffc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005002:	4b1e      	ldr	r3, [pc, #120]	@ (800507c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800500c:	4b1b      	ldr	r3, [pc, #108]	@ (800507c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	091b      	lsrs	r3, r3, #4
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	3301      	adds	r3, #1
 8005018:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b03      	cmp	r3, #3
 800501e:	d10c      	bne.n	800503a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005020:	4a17      	ldr	r2, [pc, #92]	@ (8005080 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	fbb2 f3f3 	udiv	r3, r2, r3
 8005028:	4a14      	ldr	r2, [pc, #80]	@ (800507c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800502a:	68d2      	ldr	r2, [r2, #12]
 800502c:	0a12      	lsrs	r2, r2, #8
 800502e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005032:	fb02 f303 	mul.w	r3, r2, r3
 8005036:	617b      	str	r3, [r7, #20]
    break;
 8005038:	e00c      	b.n	8005054 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800503a:	4a12      	ldr	r2, [pc, #72]	@ (8005084 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005042:	4a0e      	ldr	r2, [pc, #56]	@ (800507c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005044:	68d2      	ldr	r2, [r2, #12]
 8005046:	0a12      	lsrs	r2, r2, #8
 8005048:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800504c:	fb02 f303 	mul.w	r3, r2, r3
 8005050:	617b      	str	r3, [r7, #20]
    break;
 8005052:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005054:	4b09      	ldr	r3, [pc, #36]	@ (800507c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	0e5b      	lsrs	r3, r3, #25
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	3301      	adds	r3, #1
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800506e:	687b      	ldr	r3, [r7, #4]
}
 8005070:	4618      	mov	r0, r3
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40021000 	.word	0x40021000
 8005080:	007a1200 	.word	0x007a1200
 8005084:	00f42400 	.word	0x00f42400

08005088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005090:	2300      	movs	r3, #0
 8005092:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005094:	2300      	movs	r3, #0
 8005096:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8098 	beq.w	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050a6:	2300      	movs	r3, #0
 80050a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050aa:	4b43      	ldr	r3, [pc, #268]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10d      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b6:	4b40      	ldr	r3, [pc, #256]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ba:	4a3f      	ldr	r2, [pc, #252]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80050c2:	4b3d      	ldr	r3, [pc, #244]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ca:	60bb      	str	r3, [r7, #8]
 80050cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ce:	2301      	movs	r3, #1
 80050d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050d2:	4b3a      	ldr	r3, [pc, #232]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a39      	ldr	r2, [pc, #228]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050de:	f7fe feb5 	bl	8003e4c <HAL_GetTick>
 80050e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050e4:	e009      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e6:	f7fe feb1 	bl	8003e4c <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d902      	bls.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	74fb      	strb	r3, [r7, #19]
        break;
 80050f8:	e005      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050fa:	4b30      	ldr	r3, [pc, #192]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0ef      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005106:	7cfb      	ldrb	r3, [r7, #19]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d159      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800510c:	4b2a      	ldr	r3, [pc, #168]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005116:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01e      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	429a      	cmp	r2, r3
 8005126:	d019      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005128:	4b23      	ldr	r3, [pc, #140]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005132:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005134:	4b20      	ldr	r3, [pc, #128]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513a:	4a1f      	ldr	r2, [pc, #124]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800513c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005144:	4b1c      	ldr	r3, [pc, #112]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514a:	4a1b      	ldr	r2, [pc, #108]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800514c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005154:	4a18      	ldr	r2, [pc, #96]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d016      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005166:	f7fe fe71 	bl	8003e4c <HAL_GetTick>
 800516a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800516c:	e00b      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516e:	f7fe fe6d 	bl	8003e4c <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517c:	4293      	cmp	r3, r2
 800517e:	d902      	bls.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	74fb      	strb	r3, [r7, #19]
            break;
 8005184:	e006      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005186:	4b0c      	ldr	r3, [pc, #48]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0ec      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005194:	7cfb      	ldrb	r3, [r7, #19]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800519a:	4b07      	ldr	r3, [pc, #28]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800519c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a8:	4903      	ldr	r1, [pc, #12]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051b0:	e008      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051b2:	7cfb      	ldrb	r3, [r7, #19]
 80051b4:	74bb      	strb	r3, [r7, #18]
 80051b6:	e005      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80051b8:	40021000 	.word	0x40021000
 80051bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c0:	7cfb      	ldrb	r3, [r7, #19]
 80051c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051c4:	7c7b      	ldrb	r3, [r7, #17]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d105      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ca:	4ba7      	ldr	r3, [pc, #668]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ce:	4aa6      	ldr	r2, [pc, #664]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051e2:	4ba1      	ldr	r3, [pc, #644]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e8:	f023 0203 	bic.w	r2, r3, #3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	499d      	ldr	r1, [pc, #628]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00a      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005204:	4b98      	ldr	r3, [pc, #608]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520a:	f023 020c 	bic.w	r2, r3, #12
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	4995      	ldr	r1, [pc, #596]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005226:	4b90      	ldr	r3, [pc, #576]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	498c      	ldr	r1, [pc, #560]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005248:	4b87      	ldr	r3, [pc, #540]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	4984      	ldr	r1, [pc, #528]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800526a:	4b7f      	ldr	r3, [pc, #508]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005270:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	497b      	ldr	r1, [pc, #492]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800528c:	4b76      	ldr	r3, [pc, #472]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005292:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	4973      	ldr	r1, [pc, #460]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ae:	4b6e      	ldr	r3, [pc, #440]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	496a      	ldr	r1, [pc, #424]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052d0:	4b65      	ldr	r3, [pc, #404]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	4962      	ldr	r1, [pc, #392]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052f2:	4b5d      	ldr	r3, [pc, #372]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005300:	4959      	ldr	r1, [pc, #356]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005314:	4b54      	ldr	r3, [pc, #336]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005316:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800531a:	f023 0203 	bic.w	r2, r3, #3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005322:	4951      	ldr	r1, [pc, #324]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005336:	4b4c      	ldr	r3, [pc, #304]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	4948      	ldr	r1, [pc, #288]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005354:	2b00      	cmp	r3, #0
 8005356:	d015      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005358:	4b43      	ldr	r3, [pc, #268]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005366:	4940      	ldr	r1, [pc, #256]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005372:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005376:	d105      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005378:	4b3b      	ldr	r3, [pc, #236]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a3a      	ldr	r2, [pc, #232]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800537e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005382:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800538c:	2b00      	cmp	r3, #0
 800538e:	d015      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005390:	4b35      	ldr	r3, [pc, #212]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005396:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800539e:	4932      	ldr	r1, [pc, #200]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053ae:	d105      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b0:	4b2d      	ldr	r3, [pc, #180]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053ba:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d015      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053c8:	4b27      	ldr	r3, [pc, #156]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d6:	4924      	ldr	r1, [pc, #144]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053e6:	d105      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053e8:	4b1f      	ldr	r3, [pc, #124]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d015      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005400:	4b19      	ldr	r3, [pc, #100]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005406:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540e:	4916      	ldr	r1, [pc, #88]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800541e:	d105      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005420:	4b11      	ldr	r3, [pc, #68]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4a10      	ldr	r2, [pc, #64]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800542a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d019      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005438:	4b0b      	ldr	r3, [pc, #44]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005446:	4908      	ldr	r1, [pc, #32]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005456:	d109      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005458:	4b03      	ldr	r3, [pc, #12]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4a02      	ldr	r2, [pc, #8]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005462:	60d3      	str	r3, [r2, #12]
 8005464:	e002      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005466:	bf00      	nop
 8005468:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d015      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005478:	4b29      	ldr	r3, [pc, #164]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005486:	4926      	ldr	r1, [pc, #152]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005496:	d105      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005498:	4b21      	ldr	r3, [pc, #132]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	4a20      	ldr	r2, [pc, #128]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800549e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d015      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80054b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054be:	4918      	ldr	r1, [pc, #96]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ce:	d105      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054d0:	4b13      	ldr	r3, [pc, #76]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4a12      	ldr	r2, [pc, #72]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d015      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80054e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054f6:	490a      	ldr	r1, [pc, #40]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005502:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005506:	d105      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005508:	4b05      	ldr	r3, [pc, #20]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4a04      	ldr	r2, [pc, #16]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800550e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005512:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005514:	7cbb      	ldrb	r3, [r7, #18]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40021000 	.word	0x40021000

08005524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e09d      	b.n	8005672 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553a:	2b00      	cmp	r3, #0
 800553c:	d108      	bne.n	8005550 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005546:	d009      	beq.n	800555c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	61da      	str	r2, [r3, #28]
 800554e:	e005      	b.n	800555c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fc fe88 	bl	800228c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005592:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800559c:	d902      	bls.n	80055a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e002      	b.n	80055aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80055a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80055b2:	d007      	beq.n	80055c4 <HAL_SPI_Init+0xa0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055bc:	d002      	beq.n	80055c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005606:	ea42 0103 	orr.w	r1, r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	f003 0204 	and.w	r2, r3, #4
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005640:	ea42 0103 	orr.w	r1, r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005660:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e049      	b.n	8005720 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d106      	bne.n	80056a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7fd f95f 	bl	8002964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3304      	adds	r3, #4
 80056b6:	4619      	mov	r1, r3
 80056b8:	4610      	mov	r0, r2
 80056ba:	f000 f983 	bl	80059c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_TIM_ConfigClockSource+0x1c>
 8005740:	2302      	movs	r3, #2
 8005742:	e0ee      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x1fa>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005762:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800576e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a6b      	ldr	r2, [pc, #428]	@ (800592c <HAL_TIM_ConfigClockSource+0x204>)
 800577e:	4293      	cmp	r3, r2
 8005780:	f000 80b9 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005784:	4a69      	ldr	r2, [pc, #420]	@ (800592c <HAL_TIM_ConfigClockSource+0x204>)
 8005786:	4293      	cmp	r3, r2
 8005788:	f200 80be 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 800578c:	4a68      	ldr	r2, [pc, #416]	@ (8005930 <HAL_TIM_ConfigClockSource+0x208>)
 800578e:	4293      	cmp	r3, r2
 8005790:	f000 80b1 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005794:	4a66      	ldr	r2, [pc, #408]	@ (8005930 <HAL_TIM_ConfigClockSource+0x208>)
 8005796:	4293      	cmp	r3, r2
 8005798:	f200 80b6 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 800579c:	4a65      	ldr	r2, [pc, #404]	@ (8005934 <HAL_TIM_ConfigClockSource+0x20c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	f000 80a9 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80057a4:	4a63      	ldr	r2, [pc, #396]	@ (8005934 <HAL_TIM_ConfigClockSource+0x20c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	f200 80ae 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 80057ac:	4a62      	ldr	r2, [pc, #392]	@ (8005938 <HAL_TIM_ConfigClockSource+0x210>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	f000 80a1 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80057b4:	4a60      	ldr	r2, [pc, #384]	@ (8005938 <HAL_TIM_ConfigClockSource+0x210>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	f200 80a6 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 80057bc:	4a5f      	ldr	r2, [pc, #380]	@ (800593c <HAL_TIM_ConfigClockSource+0x214>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	f000 8099 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80057c4:	4a5d      	ldr	r2, [pc, #372]	@ (800593c <HAL_TIM_ConfigClockSource+0x214>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	f200 809e 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 80057cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80057d0:	f000 8091 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80057d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80057d8:	f200 8096 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 80057dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057e0:	f000 8089 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80057e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057e8:	f200 808e 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 80057ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057f0:	d03e      	beq.n	8005870 <HAL_TIM_ConfigClockSource+0x148>
 80057f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057f6:	f200 8087 	bhi.w	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 80057fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057fe:	f000 8086 	beq.w	800590e <HAL_TIM_ConfigClockSource+0x1e6>
 8005802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005806:	d87f      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 8005808:	2b70      	cmp	r3, #112	@ 0x70
 800580a:	d01a      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x11a>
 800580c:	2b70      	cmp	r3, #112	@ 0x70
 800580e:	d87b      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 8005810:	2b60      	cmp	r3, #96	@ 0x60
 8005812:	d050      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x18e>
 8005814:	2b60      	cmp	r3, #96	@ 0x60
 8005816:	d877      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 8005818:	2b50      	cmp	r3, #80	@ 0x50
 800581a:	d03c      	beq.n	8005896 <HAL_TIM_ConfigClockSource+0x16e>
 800581c:	2b50      	cmp	r3, #80	@ 0x50
 800581e:	d873      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 8005820:	2b40      	cmp	r3, #64	@ 0x40
 8005822:	d058      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005824:	2b40      	cmp	r3, #64	@ 0x40
 8005826:	d86f      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 8005828:	2b30      	cmp	r3, #48	@ 0x30
 800582a:	d064      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x1ce>
 800582c:	2b30      	cmp	r3, #48	@ 0x30
 800582e:	d86b      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 8005830:	2b20      	cmp	r3, #32
 8005832:	d060      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005834:	2b20      	cmp	r3, #32
 8005836:	d867      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d05c      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x1ce>
 800583c:	2b10      	cmp	r3, #16
 800583e:	d05a      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x1ce>
 8005840:	e062      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005852:	f000 fabd 	bl	8005dd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005864:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	609a      	str	r2, [r3, #8]
      break;
 800586e:	e04f      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005880:	f000 faa6 	bl	8005dd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005892:	609a      	str	r2, [r3, #8]
      break;
 8005894:	e03c      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a2:	461a      	mov	r2, r3
 80058a4:	f000 fa18 	bl	8005cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2150      	movs	r1, #80	@ 0x50
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fa71 	bl	8005d96 <TIM_ITRx_SetConfig>
      break;
 80058b4:	e02c      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058c2:	461a      	mov	r2, r3
 80058c4:	f000 fa37 	bl	8005d36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2160      	movs	r1, #96	@ 0x60
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fa61 	bl	8005d96 <TIM_ITRx_SetConfig>
      break;
 80058d4:	e01c      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e2:	461a      	mov	r2, r3
 80058e4:	f000 f9f8 	bl	8005cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2140      	movs	r1, #64	@ 0x40
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fa51 	bl	8005d96 <TIM_ITRx_SetConfig>
      break;
 80058f4:	e00c      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4619      	mov	r1, r3
 8005900:	4610      	mov	r0, r2
 8005902:	f000 fa48 	bl	8005d96 <TIM_ITRx_SetConfig>
      break;
 8005906:	e003      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
      break;
 800590c:	e000      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800590e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005920:	7bfb      	ldrb	r3, [r7, #15]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	00100070 	.word	0x00100070
 8005930:	00100050 	.word	0x00100050
 8005934:	00100040 	.word	0x00100040
 8005938:	00100030 	.word	0x00100030
 800593c:	00100020 	.word	0x00100020

08005940 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005954:	2302      	movs	r3, #2
 8005956:	e031      	b.n	80059bc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005968:	6839      	ldr	r1, [r7, #0]
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8de 	bl	8005b2c <TIM_SlaveTimer_SetConfig>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e018      	b.n	80059bc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005998:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80059a8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a4c      	ldr	r2, [pc, #304]	@ (8005b08 <TIM_Base_SetConfig+0x144>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d017      	beq.n	8005a0c <TIM_Base_SetConfig+0x48>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e2:	d013      	beq.n	8005a0c <TIM_Base_SetConfig+0x48>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a49      	ldr	r2, [pc, #292]	@ (8005b0c <TIM_Base_SetConfig+0x148>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00f      	beq.n	8005a0c <TIM_Base_SetConfig+0x48>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a48      	ldr	r2, [pc, #288]	@ (8005b10 <TIM_Base_SetConfig+0x14c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00b      	beq.n	8005a0c <TIM_Base_SetConfig+0x48>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a47      	ldr	r2, [pc, #284]	@ (8005b14 <TIM_Base_SetConfig+0x150>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <TIM_Base_SetConfig+0x48>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a46      	ldr	r2, [pc, #280]	@ (8005b18 <TIM_Base_SetConfig+0x154>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_Base_SetConfig+0x48>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a45      	ldr	r2, [pc, #276]	@ (8005b1c <TIM_Base_SetConfig+0x158>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d108      	bne.n	8005a1e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a39      	ldr	r2, [pc, #228]	@ (8005b08 <TIM_Base_SetConfig+0x144>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d023      	beq.n	8005a6e <TIM_Base_SetConfig+0xaa>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a2c:	d01f      	beq.n	8005a6e <TIM_Base_SetConfig+0xaa>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a36      	ldr	r2, [pc, #216]	@ (8005b0c <TIM_Base_SetConfig+0x148>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d01b      	beq.n	8005a6e <TIM_Base_SetConfig+0xaa>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a35      	ldr	r2, [pc, #212]	@ (8005b10 <TIM_Base_SetConfig+0x14c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d017      	beq.n	8005a6e <TIM_Base_SetConfig+0xaa>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a34      	ldr	r2, [pc, #208]	@ (8005b14 <TIM_Base_SetConfig+0x150>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d013      	beq.n	8005a6e <TIM_Base_SetConfig+0xaa>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a33      	ldr	r2, [pc, #204]	@ (8005b18 <TIM_Base_SetConfig+0x154>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00f      	beq.n	8005a6e <TIM_Base_SetConfig+0xaa>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a33      	ldr	r2, [pc, #204]	@ (8005b20 <TIM_Base_SetConfig+0x15c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00b      	beq.n	8005a6e <TIM_Base_SetConfig+0xaa>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a32      	ldr	r2, [pc, #200]	@ (8005b24 <TIM_Base_SetConfig+0x160>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d007      	beq.n	8005a6e <TIM_Base_SetConfig+0xaa>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a31      	ldr	r2, [pc, #196]	@ (8005b28 <TIM_Base_SetConfig+0x164>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d003      	beq.n	8005a6e <TIM_Base_SetConfig+0xaa>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a2c      	ldr	r2, [pc, #176]	@ (8005b1c <TIM_Base_SetConfig+0x158>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d108      	bne.n	8005a80 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a18      	ldr	r2, [pc, #96]	@ (8005b08 <TIM_Base_SetConfig+0x144>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <TIM_Base_SetConfig+0x110>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a1a      	ldr	r2, [pc, #104]	@ (8005b18 <TIM_Base_SetConfig+0x154>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00f      	beq.n	8005ad4 <TIM_Base_SetConfig+0x110>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8005b20 <TIM_Base_SetConfig+0x15c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00b      	beq.n	8005ad4 <TIM_Base_SetConfig+0x110>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a19      	ldr	r2, [pc, #100]	@ (8005b24 <TIM_Base_SetConfig+0x160>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d007      	beq.n	8005ad4 <TIM_Base_SetConfig+0x110>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a18      	ldr	r2, [pc, #96]	@ (8005b28 <TIM_Base_SetConfig+0x164>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_Base_SetConfig+0x110>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a13      	ldr	r2, [pc, #76]	@ (8005b1c <TIM_Base_SetConfig+0x158>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d103      	bne.n	8005adc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d105      	bne.n	8005afa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	611a      	str	r2, [r3, #16]
  }
}
 8005afa:	bf00      	nop
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40012c00 	.word	0x40012c00
 8005b0c:	40000400 	.word	0x40000400
 8005b10:	40000800 	.word	0x40000800
 8005b14:	40000c00 	.word	0x40000c00
 8005b18:	40013400 	.word	0x40013400
 8005b1c:	40015000 	.word	0x40015000
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40014400 	.word	0x40014400
 8005b28:	40014800 	.word	0x40014800

08005b2c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b5e:	f023 0307 	bic.w	r3, r3, #7
 8005b62:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	4a52      	ldr	r2, [pc, #328]	@ (8005cc4 <TIM_SlaveTimer_SetConfig+0x198>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	f000 809a 	beq.w	8005cb6 <TIM_SlaveTimer_SetConfig+0x18a>
 8005b82:	4a50      	ldr	r2, [pc, #320]	@ (8005cc4 <TIM_SlaveTimer_SetConfig+0x198>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	f200 8093 	bhi.w	8005cb0 <TIM_SlaveTimer_SetConfig+0x184>
 8005b8a:	4a4f      	ldr	r2, [pc, #316]	@ (8005cc8 <TIM_SlaveTimer_SetConfig+0x19c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	f000 8092 	beq.w	8005cb6 <TIM_SlaveTimer_SetConfig+0x18a>
 8005b92:	4a4d      	ldr	r2, [pc, #308]	@ (8005cc8 <TIM_SlaveTimer_SetConfig+0x19c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	f200 808b 	bhi.w	8005cb0 <TIM_SlaveTimer_SetConfig+0x184>
 8005b9a:	4a4c      	ldr	r2, [pc, #304]	@ (8005ccc <TIM_SlaveTimer_SetConfig+0x1a0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	f000 808a 	beq.w	8005cb6 <TIM_SlaveTimer_SetConfig+0x18a>
 8005ba2:	4a4a      	ldr	r2, [pc, #296]	@ (8005ccc <TIM_SlaveTimer_SetConfig+0x1a0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	f200 8083 	bhi.w	8005cb0 <TIM_SlaveTimer_SetConfig+0x184>
 8005baa:	4a49      	ldr	r2, [pc, #292]	@ (8005cd0 <TIM_SlaveTimer_SetConfig+0x1a4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	f000 8082 	beq.w	8005cb6 <TIM_SlaveTimer_SetConfig+0x18a>
 8005bb2:	4a47      	ldr	r2, [pc, #284]	@ (8005cd0 <TIM_SlaveTimer_SetConfig+0x1a4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d87b      	bhi.n	8005cb0 <TIM_SlaveTimer_SetConfig+0x184>
 8005bb8:	4a46      	ldr	r2, [pc, #280]	@ (8005cd4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d07b      	beq.n	8005cb6 <TIM_SlaveTimer_SetConfig+0x18a>
 8005bbe:	4a45      	ldr	r2, [pc, #276]	@ (8005cd4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d875      	bhi.n	8005cb0 <TIM_SlaveTimer_SetConfig+0x184>
 8005bc4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005bc8:	d075      	beq.n	8005cb6 <TIM_SlaveTimer_SetConfig+0x18a>
 8005bca:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005bce:	d86f      	bhi.n	8005cb0 <TIM_SlaveTimer_SetConfig+0x184>
 8005bd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bd4:	d06f      	beq.n	8005cb6 <TIM_SlaveTimer_SetConfig+0x18a>
 8005bd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bda:	d869      	bhi.n	8005cb0 <TIM_SlaveTimer_SetConfig+0x184>
 8005bdc:	2b70      	cmp	r3, #112	@ 0x70
 8005bde:	d01a      	beq.n	8005c16 <TIM_SlaveTimer_SetConfig+0xea>
 8005be0:	2b70      	cmp	r3, #112	@ 0x70
 8005be2:	d865      	bhi.n	8005cb0 <TIM_SlaveTimer_SetConfig+0x184>
 8005be4:	2b60      	cmp	r3, #96	@ 0x60
 8005be6:	d059      	beq.n	8005c9c <TIM_SlaveTimer_SetConfig+0x170>
 8005be8:	2b60      	cmp	r3, #96	@ 0x60
 8005bea:	d861      	bhi.n	8005cb0 <TIM_SlaveTimer_SetConfig+0x184>
 8005bec:	2b50      	cmp	r3, #80	@ 0x50
 8005bee:	d04b      	beq.n	8005c88 <TIM_SlaveTimer_SetConfig+0x15c>
 8005bf0:	2b50      	cmp	r3, #80	@ 0x50
 8005bf2:	d85d      	bhi.n	8005cb0 <TIM_SlaveTimer_SetConfig+0x184>
 8005bf4:	2b40      	cmp	r3, #64	@ 0x40
 8005bf6:	d019      	beq.n	8005c2c <TIM_SlaveTimer_SetConfig+0x100>
 8005bf8:	2b40      	cmp	r3, #64	@ 0x40
 8005bfa:	d859      	bhi.n	8005cb0 <TIM_SlaveTimer_SetConfig+0x184>
 8005bfc:	2b30      	cmp	r3, #48	@ 0x30
 8005bfe:	d05a      	beq.n	8005cb6 <TIM_SlaveTimer_SetConfig+0x18a>
 8005c00:	2b30      	cmp	r3, #48	@ 0x30
 8005c02:	d855      	bhi.n	8005cb0 <TIM_SlaveTimer_SetConfig+0x184>
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d056      	beq.n	8005cb6 <TIM_SlaveTimer_SetConfig+0x18a>
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d851      	bhi.n	8005cb0 <TIM_SlaveTimer_SetConfig+0x184>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d052      	beq.n	8005cb6 <TIM_SlaveTimer_SetConfig+0x18a>
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d050      	beq.n	8005cb6 <TIM_SlaveTimer_SetConfig+0x18a>
 8005c14:	e04c      	b.n	8005cb0 <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005c26:	f000 f8d3 	bl	8005dd0 <TIM_ETR_SetConfig>
      break;
 8005c2a:	e045      	b.n	8005cb8 <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b05      	cmp	r3, #5
 8005c32:	d004      	beq.n	8005c3e <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005c38:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8005c3c:	d101      	bne.n	8005c42 <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e03b      	b.n	8005cba <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6a1a      	ldr	r2, [r3, #32]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0201 	bic.w	r2, r2, #1
 8005c58:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c68:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	621a      	str	r2, [r3, #32]
      break;
 8005c86:	e017      	b.n	8005cb8 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c94:	461a      	mov	r2, r3
 8005c96:	f000 f81f 	bl	8005cd8 <TIM_TI1_ConfigInputStage>
      break;
 8005c9a:	e00d      	b.n	8005cb8 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ca8:	461a      	mov	r2, r3
 8005caa:	f000 f844 	bl	8005d36 <TIM_TI2_ConfigInputStage>
      break;
 8005cae:	e003      	b.n	8005cb8 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb4:	e000      	b.n	8005cb8 <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 8005cb6:	bf00      	nop
  }

  return status;
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	00100070 	.word	0x00100070
 8005cc8:	00100050 	.word	0x00100050
 8005ccc:	00100040 	.word	0x00100040
 8005cd0:	00100030 	.word	0x00100030
 8005cd4:	00100020 	.word	0x00100020

08005cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f023 0201 	bic.w	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f023 030a 	bic.w	r3, r3, #10
 8005d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b087      	sub	sp, #28
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f023 0210 	bic.w	r2, r3, #16
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	031b      	lsls	r3, r3, #12
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b085      	sub	sp, #20
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f043 0307 	orr.w	r3, r3, #7
 8005dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	609a      	str	r2, [r3, #8]
}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	021a      	lsls	r2, r3, #8
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	609a      	str	r2, [r3, #8]
}
 8005e04:	bf00      	nop
 8005e06:	371c      	adds	r7, #28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e074      	b.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a34      	ldr	r2, [pc, #208]	@ (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d009      	beq.n	8005e66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a33      	ldr	r2, [pc, #204]	@ (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d004      	beq.n	8005e66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a31      	ldr	r2, [pc, #196]	@ (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d108      	bne.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a21      	ldr	r2, [pc, #132]	@ (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d022      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea8:	d01d      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a1f      	ldr	r2, [pc, #124]	@ (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d018      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00e      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a15      	ldr	r2, [pc, #84]	@ (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a18      	ldr	r2, [pc, #96]	@ (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a11      	ldr	r2, [pc, #68]	@ (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d10c      	bne.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40012c00 	.word	0x40012c00
 8005f24:	40013400 	.word	0x40013400
 8005f28:	40015000 	.word	0x40015000
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	40000800 	.word	0x40000800
 8005f34:	40000c00 	.word	0x40000c00
 8005f38:	40014000 	.word	0x40014000

08005f3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e042      	b.n	8005fd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d106      	bne.n	8005f66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7fd f8c5 	bl	80030f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2224      	movs	r2, #36	@ 0x24
 8005f6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0201 	bic.w	r2, r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fc1a 	bl	80067c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f91b 	bl	80061c8 <UART_SetConfig>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e01b      	b.n	8005fd4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005faa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fc99 	bl	8006904 <UART_CheckIdleState>
 8005fd2:	4603      	mov	r3, r0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b091      	sub	sp, #68	@ 0x44
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d178      	bne.n	80060e6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_UART_Transmit_IT+0x24>
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e071      	b.n	80060e8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	88fa      	ldrh	r2, [r7, #6]
 800600e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	88fa      	ldrh	r2, [r7, #6]
 8006016:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2221      	movs	r2, #33	@ 0x21
 800602c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006038:	d12a      	bne.n	8006090 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006042:	d107      	bne.n	8006054 <HAL_UART_Transmit_IT+0x78>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d103      	bne.n	8006054 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4a29      	ldr	r2, [pc, #164]	@ (80060f4 <HAL_UART_Transmit_IT+0x118>)
 8006050:	679a      	str	r2, [r3, #120]	@ 0x78
 8006052:	e002      	b.n	800605a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4a28      	ldr	r2, [pc, #160]	@ (80060f8 <HAL_UART_Transmit_IT+0x11c>)
 8006058:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3308      	adds	r3, #8
 8006060:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006070:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3308      	adds	r3, #8
 8006078:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800607a:	637a      	str	r2, [r7, #52]	@ 0x34
 800607c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006080:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e5      	bne.n	800605a <HAL_UART_Transmit_IT+0x7e>
 800608e:	e028      	b.n	80060e2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006098:	d107      	bne.n	80060aa <HAL_UART_Transmit_IT+0xce>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d103      	bne.n	80060aa <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4a15      	ldr	r2, [pc, #84]	@ (80060fc <HAL_UART_Transmit_IT+0x120>)
 80060a6:	679a      	str	r2, [r3, #120]	@ 0x78
 80060a8:	e002      	b.n	80060b0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4a14      	ldr	r2, [pc, #80]	@ (8006100 <HAL_UART_Transmit_IT+0x124>)
 80060ae:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	613b      	str	r3, [r7, #16]
   return(result);
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ce:	623b      	str	r3, [r7, #32]
 80060d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	69f9      	ldr	r1, [r7, #28]
 80060d4:	6a3a      	ldr	r2, [r7, #32]
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	61bb      	str	r3, [r7, #24]
   return(result);
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e6      	bne.n	80060b0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	e000      	b.n	80060e8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80060e6:	2302      	movs	r3, #2
  }
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3744      	adds	r7, #68	@ 0x44
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	0800709f 	.word	0x0800709f
 80060f8:	08006fbf 	.word	0x08006fbf
 80060fc:	08006efd 	.word	0x08006efd
 8006100:	08006e45 	.word	0x08006e45

08006104 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08a      	sub	sp, #40	@ 0x28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	4613      	mov	r3, r2
 8006110:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006118:	2b20      	cmp	r3, #32
 800611a:	d137      	bne.n	800618c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <HAL_UART_Receive_IT+0x24>
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e030      	b.n	800618e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a18      	ldr	r2, [pc, #96]	@ (8006198 <HAL_UART_Receive_IT+0x94>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d01f      	beq.n	800617c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d018      	beq.n	800617c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	e853 3f00 	ldrex	r3, [r3]
 8006156:	613b      	str	r3, [r7, #16]
   return(result);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800615e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	623b      	str	r3, [r7, #32]
 800616a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	69f9      	ldr	r1, [r7, #28]
 800616e:	6a3a      	ldr	r2, [r7, #32]
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	61bb      	str	r3, [r7, #24]
   return(result);
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e6      	bne.n	800614a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	461a      	mov	r2, r3
 8006180:	68b9      	ldr	r1, [r7, #8]
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 fcd6 	bl	8006b34 <UART_Start_Receive_IT>
 8006188:	4603      	mov	r3, r0
 800618a:	e000      	b.n	800618e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800618c:	2302      	movs	r3, #2
  }
}
 800618e:	4618      	mov	r0, r3
 8006190:	3728      	adds	r7, #40	@ 0x28
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40008000 	.word	0x40008000

0800619c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061cc:	b08c      	sub	sp, #48	@ 0x30
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	431a      	orrs	r2, r3
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	4baa      	ldr	r3, [pc, #680]	@ (80064a0 <UART_SetConfig+0x2d8>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	6812      	ldr	r2, [r2, #0]
 80061fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006200:	430b      	orrs	r3, r1
 8006202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a9f      	ldr	r2, [pc, #636]	@ (80064a4 <UART_SetConfig+0x2dc>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d004      	beq.n	8006234 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006230:	4313      	orrs	r3, r2
 8006232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800623e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	6812      	ldr	r2, [r2, #0]
 8006246:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006248:	430b      	orrs	r3, r1
 800624a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006252:	f023 010f 	bic.w	r1, r3, #15
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a90      	ldr	r2, [pc, #576]	@ (80064a8 <UART_SetConfig+0x2e0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d125      	bne.n	80062b8 <UART_SetConfig+0xf0>
 800626c:	4b8f      	ldr	r3, [pc, #572]	@ (80064ac <UART_SetConfig+0x2e4>)
 800626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b03      	cmp	r3, #3
 8006278:	d81a      	bhi.n	80062b0 <UART_SetConfig+0xe8>
 800627a:	a201      	add	r2, pc, #4	@ (adr r2, 8006280 <UART_SetConfig+0xb8>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	08006291 	.word	0x08006291
 8006284:	080062a1 	.word	0x080062a1
 8006288:	08006299 	.word	0x08006299
 800628c:	080062a9 	.word	0x080062a9
 8006290:	2301      	movs	r3, #1
 8006292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006296:	e116      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006298:	2302      	movs	r3, #2
 800629a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800629e:	e112      	b.n	80064c6 <UART_SetConfig+0x2fe>
 80062a0:	2304      	movs	r3, #4
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a6:	e10e      	b.n	80064c6 <UART_SetConfig+0x2fe>
 80062a8:	2308      	movs	r3, #8
 80062aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ae:	e10a      	b.n	80064c6 <UART_SetConfig+0x2fe>
 80062b0:	2310      	movs	r3, #16
 80062b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b6:	e106      	b.n	80064c6 <UART_SetConfig+0x2fe>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a7c      	ldr	r2, [pc, #496]	@ (80064b0 <UART_SetConfig+0x2e8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d138      	bne.n	8006334 <UART_SetConfig+0x16c>
 80062c2:	4b7a      	ldr	r3, [pc, #488]	@ (80064ac <UART_SetConfig+0x2e4>)
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c8:	f003 030c 	and.w	r3, r3, #12
 80062cc:	2b0c      	cmp	r3, #12
 80062ce:	d82d      	bhi.n	800632c <UART_SetConfig+0x164>
 80062d0:	a201      	add	r2, pc, #4	@ (adr r2, 80062d8 <UART_SetConfig+0x110>)
 80062d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d6:	bf00      	nop
 80062d8:	0800630d 	.word	0x0800630d
 80062dc:	0800632d 	.word	0x0800632d
 80062e0:	0800632d 	.word	0x0800632d
 80062e4:	0800632d 	.word	0x0800632d
 80062e8:	0800631d 	.word	0x0800631d
 80062ec:	0800632d 	.word	0x0800632d
 80062f0:	0800632d 	.word	0x0800632d
 80062f4:	0800632d 	.word	0x0800632d
 80062f8:	08006315 	.word	0x08006315
 80062fc:	0800632d 	.word	0x0800632d
 8006300:	0800632d 	.word	0x0800632d
 8006304:	0800632d 	.word	0x0800632d
 8006308:	08006325 	.word	0x08006325
 800630c:	2300      	movs	r3, #0
 800630e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006312:	e0d8      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006314:	2302      	movs	r3, #2
 8006316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800631a:	e0d4      	b.n	80064c6 <UART_SetConfig+0x2fe>
 800631c:	2304      	movs	r3, #4
 800631e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006322:	e0d0      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006324:	2308      	movs	r3, #8
 8006326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800632a:	e0cc      	b.n	80064c6 <UART_SetConfig+0x2fe>
 800632c:	2310      	movs	r3, #16
 800632e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006332:	e0c8      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a5e      	ldr	r2, [pc, #376]	@ (80064b4 <UART_SetConfig+0x2ec>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d125      	bne.n	800638a <UART_SetConfig+0x1c2>
 800633e:	4b5b      	ldr	r3, [pc, #364]	@ (80064ac <UART_SetConfig+0x2e4>)
 8006340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006344:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006348:	2b30      	cmp	r3, #48	@ 0x30
 800634a:	d016      	beq.n	800637a <UART_SetConfig+0x1b2>
 800634c:	2b30      	cmp	r3, #48	@ 0x30
 800634e:	d818      	bhi.n	8006382 <UART_SetConfig+0x1ba>
 8006350:	2b20      	cmp	r3, #32
 8006352:	d00a      	beq.n	800636a <UART_SetConfig+0x1a2>
 8006354:	2b20      	cmp	r3, #32
 8006356:	d814      	bhi.n	8006382 <UART_SetConfig+0x1ba>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <UART_SetConfig+0x19a>
 800635c:	2b10      	cmp	r3, #16
 800635e:	d008      	beq.n	8006372 <UART_SetConfig+0x1aa>
 8006360:	e00f      	b.n	8006382 <UART_SetConfig+0x1ba>
 8006362:	2300      	movs	r3, #0
 8006364:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006368:	e0ad      	b.n	80064c6 <UART_SetConfig+0x2fe>
 800636a:	2302      	movs	r3, #2
 800636c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006370:	e0a9      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006372:	2304      	movs	r3, #4
 8006374:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006378:	e0a5      	b.n	80064c6 <UART_SetConfig+0x2fe>
 800637a:	2308      	movs	r3, #8
 800637c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006380:	e0a1      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006382:	2310      	movs	r3, #16
 8006384:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006388:	e09d      	b.n	80064c6 <UART_SetConfig+0x2fe>
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a4a      	ldr	r2, [pc, #296]	@ (80064b8 <UART_SetConfig+0x2f0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d125      	bne.n	80063e0 <UART_SetConfig+0x218>
 8006394:	4b45      	ldr	r3, [pc, #276]	@ (80064ac <UART_SetConfig+0x2e4>)
 8006396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800639e:	2bc0      	cmp	r3, #192	@ 0xc0
 80063a0:	d016      	beq.n	80063d0 <UART_SetConfig+0x208>
 80063a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80063a4:	d818      	bhi.n	80063d8 <UART_SetConfig+0x210>
 80063a6:	2b80      	cmp	r3, #128	@ 0x80
 80063a8:	d00a      	beq.n	80063c0 <UART_SetConfig+0x1f8>
 80063aa:	2b80      	cmp	r3, #128	@ 0x80
 80063ac:	d814      	bhi.n	80063d8 <UART_SetConfig+0x210>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <UART_SetConfig+0x1f0>
 80063b2:	2b40      	cmp	r3, #64	@ 0x40
 80063b4:	d008      	beq.n	80063c8 <UART_SetConfig+0x200>
 80063b6:	e00f      	b.n	80063d8 <UART_SetConfig+0x210>
 80063b8:	2300      	movs	r3, #0
 80063ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063be:	e082      	b.n	80064c6 <UART_SetConfig+0x2fe>
 80063c0:	2302      	movs	r3, #2
 80063c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c6:	e07e      	b.n	80064c6 <UART_SetConfig+0x2fe>
 80063c8:	2304      	movs	r3, #4
 80063ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ce:	e07a      	b.n	80064c6 <UART_SetConfig+0x2fe>
 80063d0:	2308      	movs	r3, #8
 80063d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063d6:	e076      	b.n	80064c6 <UART_SetConfig+0x2fe>
 80063d8:	2310      	movs	r3, #16
 80063da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063de:	e072      	b.n	80064c6 <UART_SetConfig+0x2fe>
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a35      	ldr	r2, [pc, #212]	@ (80064bc <UART_SetConfig+0x2f4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d12a      	bne.n	8006440 <UART_SetConfig+0x278>
 80063ea:	4b30      	ldr	r3, [pc, #192]	@ (80064ac <UART_SetConfig+0x2e4>)
 80063ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063f8:	d01a      	beq.n	8006430 <UART_SetConfig+0x268>
 80063fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063fe:	d81b      	bhi.n	8006438 <UART_SetConfig+0x270>
 8006400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006404:	d00c      	beq.n	8006420 <UART_SetConfig+0x258>
 8006406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800640a:	d815      	bhi.n	8006438 <UART_SetConfig+0x270>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <UART_SetConfig+0x250>
 8006410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006414:	d008      	beq.n	8006428 <UART_SetConfig+0x260>
 8006416:	e00f      	b.n	8006438 <UART_SetConfig+0x270>
 8006418:	2300      	movs	r3, #0
 800641a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800641e:	e052      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006420:	2302      	movs	r3, #2
 8006422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006426:	e04e      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006428:	2304      	movs	r3, #4
 800642a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800642e:	e04a      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006430:	2308      	movs	r3, #8
 8006432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006436:	e046      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006438:	2310      	movs	r3, #16
 800643a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800643e:	e042      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a17      	ldr	r2, [pc, #92]	@ (80064a4 <UART_SetConfig+0x2dc>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d13a      	bne.n	80064c0 <UART_SetConfig+0x2f8>
 800644a:	4b18      	ldr	r3, [pc, #96]	@ (80064ac <UART_SetConfig+0x2e4>)
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006450:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006454:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006458:	d01a      	beq.n	8006490 <UART_SetConfig+0x2c8>
 800645a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800645e:	d81b      	bhi.n	8006498 <UART_SetConfig+0x2d0>
 8006460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006464:	d00c      	beq.n	8006480 <UART_SetConfig+0x2b8>
 8006466:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800646a:	d815      	bhi.n	8006498 <UART_SetConfig+0x2d0>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <UART_SetConfig+0x2b0>
 8006470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006474:	d008      	beq.n	8006488 <UART_SetConfig+0x2c0>
 8006476:	e00f      	b.n	8006498 <UART_SetConfig+0x2d0>
 8006478:	2300      	movs	r3, #0
 800647a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800647e:	e022      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006480:	2302      	movs	r3, #2
 8006482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006486:	e01e      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006488:	2304      	movs	r3, #4
 800648a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800648e:	e01a      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006490:	2308      	movs	r3, #8
 8006492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006496:	e016      	b.n	80064c6 <UART_SetConfig+0x2fe>
 8006498:	2310      	movs	r3, #16
 800649a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800649e:	e012      	b.n	80064c6 <UART_SetConfig+0x2fe>
 80064a0:	cfff69f3 	.word	0xcfff69f3
 80064a4:	40008000 	.word	0x40008000
 80064a8:	40013800 	.word	0x40013800
 80064ac:	40021000 	.word	0x40021000
 80064b0:	40004400 	.word	0x40004400
 80064b4:	40004800 	.word	0x40004800
 80064b8:	40004c00 	.word	0x40004c00
 80064bc:	40005000 	.word	0x40005000
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4aae      	ldr	r2, [pc, #696]	@ (8006784 <UART_SetConfig+0x5bc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	f040 8097 	bne.w	8006600 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064d6:	2b08      	cmp	r3, #8
 80064d8:	d823      	bhi.n	8006522 <UART_SetConfig+0x35a>
 80064da:	a201      	add	r2, pc, #4	@ (adr r2, 80064e0 <UART_SetConfig+0x318>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	08006505 	.word	0x08006505
 80064e4:	08006523 	.word	0x08006523
 80064e8:	0800650d 	.word	0x0800650d
 80064ec:	08006523 	.word	0x08006523
 80064f0:	08006513 	.word	0x08006513
 80064f4:	08006523 	.word	0x08006523
 80064f8:	08006523 	.word	0x08006523
 80064fc:	08006523 	.word	0x08006523
 8006500:	0800651b 	.word	0x0800651b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006504:	f7fe fd4e 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 8006508:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800650a:	e010      	b.n	800652e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800650c:	4b9e      	ldr	r3, [pc, #632]	@ (8006788 <UART_SetConfig+0x5c0>)
 800650e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006510:	e00d      	b.n	800652e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006512:	f7fe fcd9 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8006516:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006518:	e009      	b.n	800652e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800651a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800651e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006520:	e005      	b.n	800652e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800652c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 8130 	beq.w	8006796 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653a:	4a94      	ldr	r2, [pc, #592]	@ (800678c <UART_SetConfig+0x5c4>)
 800653c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006540:	461a      	mov	r2, r3
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	fbb3 f3f2 	udiv	r3, r3, r2
 8006548:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	4613      	mov	r3, r2
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	4413      	add	r3, r2
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	429a      	cmp	r2, r3
 8006558:	d305      	bcc.n	8006566 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	429a      	cmp	r2, r3
 8006564:	d903      	bls.n	800656e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800656c:	e113      	b.n	8006796 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	2200      	movs	r2, #0
 8006572:	60bb      	str	r3, [r7, #8]
 8006574:	60fa      	str	r2, [r7, #12]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	4a84      	ldr	r2, [pc, #528]	@ (800678c <UART_SetConfig+0x5c4>)
 800657c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006580:	b29b      	uxth	r3, r3
 8006582:	2200      	movs	r2, #0
 8006584:	603b      	str	r3, [r7, #0]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800658c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006590:	f7f9 feae 	bl	80002f0 <__aeabi_uldivmod>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4610      	mov	r0, r2
 800659a:	4619      	mov	r1, r3
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	020b      	lsls	r3, r1, #8
 80065a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065aa:	0202      	lsls	r2, r0, #8
 80065ac:	6979      	ldr	r1, [r7, #20]
 80065ae:	6849      	ldr	r1, [r1, #4]
 80065b0:	0849      	lsrs	r1, r1, #1
 80065b2:	2000      	movs	r0, #0
 80065b4:	460c      	mov	r4, r1
 80065b6:	4605      	mov	r5, r0
 80065b8:	eb12 0804 	adds.w	r8, r2, r4
 80065bc:	eb43 0905 	adc.w	r9, r3, r5
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	469a      	mov	sl, r3
 80065c8:	4693      	mov	fp, r2
 80065ca:	4652      	mov	r2, sl
 80065cc:	465b      	mov	r3, fp
 80065ce:	4640      	mov	r0, r8
 80065d0:	4649      	mov	r1, r9
 80065d2:	f7f9 fe8d 	bl	80002f0 <__aeabi_uldivmod>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4613      	mov	r3, r2
 80065dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065e4:	d308      	bcc.n	80065f8 <UART_SetConfig+0x430>
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ec:	d204      	bcs.n	80065f8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6a3a      	ldr	r2, [r7, #32]
 80065f4:	60da      	str	r2, [r3, #12]
 80065f6:	e0ce      	b.n	8006796 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80065fe:	e0ca      	b.n	8006796 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006608:	d166      	bne.n	80066d8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800660a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800660e:	2b08      	cmp	r3, #8
 8006610:	d827      	bhi.n	8006662 <UART_SetConfig+0x49a>
 8006612:	a201      	add	r2, pc, #4	@ (adr r2, 8006618 <UART_SetConfig+0x450>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	0800663d 	.word	0x0800663d
 800661c:	08006645 	.word	0x08006645
 8006620:	0800664d 	.word	0x0800664d
 8006624:	08006663 	.word	0x08006663
 8006628:	08006653 	.word	0x08006653
 800662c:	08006663 	.word	0x08006663
 8006630:	08006663 	.word	0x08006663
 8006634:	08006663 	.word	0x08006663
 8006638:	0800665b 	.word	0x0800665b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800663c:	f7fe fcb2 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 8006640:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006642:	e014      	b.n	800666e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006644:	f7fe fcc4 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 8006648:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800664a:	e010      	b.n	800666e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800664c:	4b4e      	ldr	r3, [pc, #312]	@ (8006788 <UART_SetConfig+0x5c0>)
 800664e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006650:	e00d      	b.n	800666e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006652:	f7fe fc39 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8006656:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006658:	e009      	b.n	800666e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800665a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800665e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006660:	e005      	b.n	800666e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800666c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8090 	beq.w	8006796 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667a:	4a44      	ldr	r2, [pc, #272]	@ (800678c <UART_SetConfig+0x5c4>)
 800667c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006680:	461a      	mov	r2, r3
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	fbb3 f3f2 	udiv	r3, r3, r2
 8006688:	005a      	lsls	r2, r3, #1
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	085b      	lsrs	r3, r3, #1
 8006690:	441a      	add	r2, r3
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	fbb2 f3f3 	udiv	r3, r2, r3
 800669a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	2b0f      	cmp	r3, #15
 80066a0:	d916      	bls.n	80066d0 <UART_SetConfig+0x508>
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a8:	d212      	bcs.n	80066d0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f023 030f 	bic.w	r3, r3, #15
 80066b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	085b      	lsrs	r3, r3, #1
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	b29a      	uxth	r2, r3
 80066c0:	8bfb      	ldrh	r3, [r7, #30]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	8bfa      	ldrh	r2, [r7, #30]
 80066cc:	60da      	str	r2, [r3, #12]
 80066ce:	e062      	b.n	8006796 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80066d6:	e05e      	b.n	8006796 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d828      	bhi.n	8006732 <UART_SetConfig+0x56a>
 80066e0:	a201      	add	r2, pc, #4	@ (adr r2, 80066e8 <UART_SetConfig+0x520>)
 80066e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e6:	bf00      	nop
 80066e8:	0800670d 	.word	0x0800670d
 80066ec:	08006715 	.word	0x08006715
 80066f0:	0800671d 	.word	0x0800671d
 80066f4:	08006733 	.word	0x08006733
 80066f8:	08006723 	.word	0x08006723
 80066fc:	08006733 	.word	0x08006733
 8006700:	08006733 	.word	0x08006733
 8006704:	08006733 	.word	0x08006733
 8006708:	0800672b 	.word	0x0800672b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800670c:	f7fe fc4a 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 8006710:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006712:	e014      	b.n	800673e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006714:	f7fe fc5c 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 8006718:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800671a:	e010      	b.n	800673e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800671c:	4b1a      	ldr	r3, [pc, #104]	@ (8006788 <UART_SetConfig+0x5c0>)
 800671e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006720:	e00d      	b.n	800673e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006722:	f7fe fbd1 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8006726:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006728:	e009      	b.n	800673e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800672a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800672e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006730:	e005      	b.n	800673e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800673c:	bf00      	nop
    }

    if (pclk != 0U)
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	2b00      	cmp	r3, #0
 8006742:	d028      	beq.n	8006796 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006748:	4a10      	ldr	r2, [pc, #64]	@ (800678c <UART_SetConfig+0x5c4>)
 800674a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800674e:	461a      	mov	r2, r3
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	fbb3 f2f2 	udiv	r2, r3, r2
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	085b      	lsrs	r3, r3, #1
 800675c:	441a      	add	r2, r3
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	fbb2 f3f3 	udiv	r3, r2, r3
 8006766:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	2b0f      	cmp	r3, #15
 800676c:	d910      	bls.n	8006790 <UART_SetConfig+0x5c8>
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006774:	d20c      	bcs.n	8006790 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	b29a      	uxth	r2, r3
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	60da      	str	r2, [r3, #12]
 8006780:	e009      	b.n	8006796 <UART_SetConfig+0x5ce>
 8006782:	bf00      	nop
 8006784:	40008000 	.word	0x40008000
 8006788:	00f42400 	.word	0x00f42400
 800678c:	08008a24 	.word	0x08008a24
      }
      else
      {
        ret = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2201      	movs	r2, #1
 800679a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2200      	movs	r2, #0
 80067aa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2200      	movs	r2, #0
 80067b0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80067b2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3730      	adds	r7, #48	@ 0x30
 80067ba:	46bd      	mov	sp, r7
 80067bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080067c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00a      	beq.n	80067ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006832:	f003 0304 	and.w	r3, r3, #4
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01a      	beq.n	80068d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068be:	d10a      	bne.n	80068d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	605a      	str	r2, [r3, #4]
  }
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b098      	sub	sp, #96	@ 0x60
 8006908:	af02      	add	r7, sp, #8
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006914:	f7fd fa9a 	bl	8003e4c <HAL_GetTick>
 8006918:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b08      	cmp	r3, #8
 8006926:	d12f      	bne.n	8006988 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006928:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006930:	2200      	movs	r2, #0
 8006932:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f88e 	bl	8006a58 <UART_WaitOnFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d022      	beq.n	8006988 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006952:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006956:	653b      	str	r3, [r7, #80]	@ 0x50
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006960:	647b      	str	r3, [r7, #68]	@ 0x44
 8006962:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800696e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e6      	bne.n	8006942 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e063      	b.n	8006a50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0304 	and.w	r3, r3, #4
 8006992:	2b04      	cmp	r3, #4
 8006994:	d149      	bne.n	8006a2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006996:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800699e:	2200      	movs	r2, #0
 80069a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f857 	bl	8006a58 <UART_WaitOnFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d03c      	beq.n	8006a2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	623b      	str	r3, [r7, #32]
   return(result);
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80069d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e6      	bne.n	80069b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3308      	adds	r3, #8
 80069e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f023 0301 	bic.w	r3, r3, #1
 80069f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3308      	adds	r3, #8
 8006a00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a02:	61fa      	str	r2, [r7, #28]
 8006a04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	69b9      	ldr	r1, [r7, #24]
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e5      	bne.n	80069e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e012      	b.n	8006a50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3758      	adds	r7, #88	@ 0x58
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	4613      	mov	r3, r2
 8006a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a68:	e04f      	b.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a70:	d04b      	beq.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a72:	f7fd f9eb 	bl	8003e4c <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d302      	bcc.n	8006a88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e04e      	b.n	8006b2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d037      	beq.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b80      	cmp	r3, #128	@ 0x80
 8006a9e:	d034      	beq.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b40      	cmp	r3, #64	@ 0x40
 8006aa4:	d031      	beq.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d110      	bne.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2208      	movs	r2, #8
 8006aba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f95b 	bl	8006d78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2208      	movs	r2, #8
 8006ac6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e029      	b.n	8006b2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ae4:	d111      	bne.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006aee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 f941 	bl	8006d78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e00f      	b.n	8006b2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69da      	ldr	r2, [r3, #28]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4013      	ands	r3, r2
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	bf0c      	ite	eq
 8006b1a:	2301      	moveq	r3, #1
 8006b1c:	2300      	movne	r3, #0
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	461a      	mov	r2, r3
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d0a0      	beq.n	8006a6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b0a3      	sub	sp, #140	@ 0x8c
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	88fa      	ldrh	r2, [r7, #6]
 8006b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	88fa      	ldrh	r2, [r7, #6]
 8006b54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b66:	d10e      	bne.n	8006b86 <UART_Start_Receive_IT+0x52>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d105      	bne.n	8006b7c <UART_Start_Receive_IT+0x48>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006b76:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b7a:	e02d      	b.n	8006bd8 <UART_Start_Receive_IT+0xa4>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	22ff      	movs	r2, #255	@ 0xff
 8006b80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b84:	e028      	b.n	8006bd8 <UART_Start_Receive_IT+0xa4>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10d      	bne.n	8006baa <UART_Start_Receive_IT+0x76>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d104      	bne.n	8006ba0 <UART_Start_Receive_IT+0x6c>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	22ff      	movs	r2, #255	@ 0xff
 8006b9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b9e:	e01b      	b.n	8006bd8 <UART_Start_Receive_IT+0xa4>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	227f      	movs	r2, #127	@ 0x7f
 8006ba4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ba8:	e016      	b.n	8006bd8 <UART_Start_Receive_IT+0xa4>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bb2:	d10d      	bne.n	8006bd0 <UART_Start_Receive_IT+0x9c>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <UART_Start_Receive_IT+0x92>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	227f      	movs	r2, #127	@ 0x7f
 8006bc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006bc4:	e008      	b.n	8006bd8 <UART_Start_Receive_IT+0xa4>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	223f      	movs	r2, #63	@ 0x3f
 8006bca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006bce:	e003      	b.n	8006bd8 <UART_Start_Receive_IT+0xa4>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2222      	movs	r2, #34	@ 0x22
 8006be4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3308      	adds	r3, #8
 8006bee:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006bf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3308      	adds	r3, #8
 8006c08:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006c0c:	673a      	str	r2, [r7, #112]	@ 0x70
 8006c0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c10:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006c12:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006c14:	e841 2300 	strex	r3, r2, [r1]
 8006c18:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006c1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e3      	bne.n	8006be8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c28:	d14f      	bne.n	8006cca <UART_Start_Receive_IT+0x196>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006c30:	88fa      	ldrh	r2, [r7, #6]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d349      	bcc.n	8006cca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c3e:	d107      	bne.n	8006c50 <UART_Start_Receive_IT+0x11c>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d103      	bne.n	8006c50 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4a47      	ldr	r2, [pc, #284]	@ (8006d68 <UART_Start_Receive_IT+0x234>)
 8006c4c:	675a      	str	r2, [r3, #116]	@ 0x74
 8006c4e:	e002      	b.n	8006c56 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a46      	ldr	r2, [pc, #280]	@ (8006d6c <UART_Start_Receive_IT+0x238>)
 8006c54:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01a      	beq.n	8006c94 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c66:	e853 3f00 	ldrex	r3, [r3]
 8006c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c82:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006c86:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e4      	bne.n	8006c5e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3308      	adds	r3, #8
 8006c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006caa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006cb4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006cb6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006cba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e5      	bne.n	8006c94 <UART_Start_Receive_IT+0x160>
 8006cc8:	e046      	b.n	8006d58 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cd2:	d107      	bne.n	8006ce4 <UART_Start_Receive_IT+0x1b0>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d103      	bne.n	8006ce4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4a24      	ldr	r2, [pc, #144]	@ (8006d70 <UART_Start_Receive_IT+0x23c>)
 8006ce0:	675a      	str	r2, [r3, #116]	@ 0x74
 8006ce2:	e002      	b.n	8006cea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a23      	ldr	r2, [pc, #140]	@ (8006d74 <UART_Start_Receive_IT+0x240>)
 8006ce8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d019      	beq.n	8006d26 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d02:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006d06:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d12:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e6      	bne.n	8006cf2 <UART_Start_Receive_IT+0x1be>
 8006d24:	e018      	b.n	8006d58 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	613b      	str	r3, [r7, #16]
   return(result);
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f043 0320 	orr.w	r3, r3, #32
 8006d3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d44:	623b      	str	r3, [r7, #32]
 8006d46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d48:	69f9      	ldr	r1, [r7, #28]
 8006d4a:	6a3a      	ldr	r2, [r7, #32]
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e6      	bne.n	8006d26 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	378c      	adds	r7, #140	@ 0x8c
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	0800785d 	.word	0x0800785d
 8006d6c:	080074f9 	.word	0x080074f9
 8006d70:	08007341 	.word	0x08007341
 8006d74:	08007189 	.word	0x08007189

08006d78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b095      	sub	sp, #84	@ 0x54
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006da0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006da4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e6      	bne.n	8006d80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3308      	adds	r3, #8
 8006db8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dc8:	f023 0301 	bic.w	r3, r3, #1
 8006dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006dd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ddc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e3      	bne.n	8006db2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d118      	bne.n	8006e24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f023 0310 	bic.w	r3, r3, #16
 8006e06:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6979      	ldr	r1, [r7, #20]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e6      	bne.n	8006df2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e38:	bf00      	nop
 8006e3a:	3754      	adds	r7, #84	@ 0x54
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b08f      	sub	sp, #60	@ 0x3c
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e52:	2b21      	cmp	r3, #33	@ 0x21
 8006e54:	d14c      	bne.n	8006ef0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d132      	bne.n	8006ec8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e82:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e6      	bne.n	8006e62 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ea8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb2:	61bb      	str	r3, [r7, #24]
 8006eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6979      	ldr	r1, [r7, #20]
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e6      	bne.n	8006e94 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006ec6:	e013      	b.n	8006ef0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ecc:	781a      	ldrb	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8006ef0:	bf00      	nop
 8006ef2:	373c      	adds	r7, #60	@ 0x3c
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b091      	sub	sp, #68	@ 0x44
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f0a:	2b21      	cmp	r3, #33	@ 0x21
 8006f0c:	d151      	bne.n	8006fb2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d132      	bne.n	8006f80 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	623b      	str	r3, [r7, #32]
   return(result);
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f38:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e6      	bne.n	8006f1a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6a:	61fb      	str	r3, [r7, #28]
 8006f6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	69b9      	ldr	r1, [r7, #24]
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	617b      	str	r3, [r7, #20]
   return(result);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e6      	bne.n	8006f4c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006f7e:	e018      	b.n	8006fb2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f94:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f9a:	1c9a      	adds	r2, r3, #2
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8006fb2:	bf00      	nop
 8006fb4:	3744      	adds	r7, #68	@ 0x44
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b091      	sub	sp, #68	@ 0x44
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fcc:	2b21      	cmp	r3, #33	@ 0x21
 8006fce:	d160      	bne.n	8007092 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fd6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006fd8:	e057      	b.n	800708a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d133      	bne.n	800704e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007006:	633a      	str	r2, [r7, #48]	@ 0x30
 8007008:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800700c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e5      	bne.n	8006fe6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	60fb      	str	r3, [r7, #12]
   return(result);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007038:	61fb      	str	r3, [r7, #28]
 800703a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	69b9      	ldr	r1, [r7, #24]
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	617b      	str	r3, [r7, #20]
   return(result);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e6      	bne.n	800701a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800704c:	e021      	b.n	8007092 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007058:	2b00      	cmp	r3, #0
 800705a:	d013      	beq.n	8007084 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007060:	781a      	ldrb	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007078:	b29b      	uxth	r3, r3
 800707a:	3b01      	subs	r3, #1
 800707c:	b29a      	uxth	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007084:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007086:	3b01      	subs	r3, #1
 8007088:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800708a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1a4      	bne.n	8006fda <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007090:	e7ff      	b.n	8007092 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007092:	bf00      	nop
 8007094:	3744      	adds	r7, #68	@ 0x44
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800709e:	b480      	push	{r7}
 80070a0:	b091      	sub	sp, #68	@ 0x44
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ac:	2b21      	cmp	r3, #33	@ 0x21
 80070ae:	d165      	bne.n	800717c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80070b8:	e05c      	b.n	8007174 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d133      	bne.n	800712e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3308      	adds	r3, #8
 80070cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80070dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3308      	adds	r3, #8
 80070e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e5      	bne.n	80070c6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	60bb      	str	r3, [r7, #8]
   return(result);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800710e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	61bb      	str	r3, [r7, #24]
 800711a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6979      	ldr	r1, [r7, #20]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	613b      	str	r3, [r7, #16]
   return(result);
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e6      	bne.n	80070fa <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800712c:	e026      	b.n	800717c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69db      	ldr	r3, [r3, #28]
 8007134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007138:	2b00      	cmp	r3, #0
 800713a:	d018      	beq.n	800716e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007140:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007150:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007156:	1c9a      	adds	r2, r3, #2
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b01      	subs	r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800716e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007170:	3b01      	subs	r3, #1
 8007172:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007174:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007176:	2b00      	cmp	r3, #0
 8007178:	d19f      	bne.n	80070ba <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800717a:	e7ff      	b.n	800717c <UART_TxISR_16BIT_FIFOEN+0xde>
 800717c:	bf00      	nop
 800717e:	3744      	adds	r7, #68	@ 0x44
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b09c      	sub	sp, #112	@ 0x70
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007196:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071a0:	2b22      	cmp	r3, #34	@ 0x22
 80071a2:	f040 80be 	bne.w	8007322 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80071b4:	b2d9      	uxtb	r1, r3
 80071b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c0:	400a      	ands	r2, r1
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f040 80a1 	bne.w	8007332 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007200:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007204:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800720e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007210:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007214:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800721c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e6      	bne.n	80071f0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3308      	adds	r3, #8
 8007228:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	667b      	str	r3, [r7, #100]	@ 0x64
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3308      	adds	r3, #8
 8007240:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007242:	647a      	str	r2, [r7, #68]	@ 0x44
 8007244:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007248:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e5      	bne.n	8007222 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a33      	ldr	r2, [pc, #204]	@ (800733c <UART_RxISR_8BIT+0x1b4>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d01f      	beq.n	80072b4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d018      	beq.n	80072b4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	623b      	str	r3, [r7, #32]
   return(result);
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007296:	663b      	str	r3, [r7, #96]	@ 0x60
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80072a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072a8:	e841 2300 	strex	r3, r2, [r1]
 80072ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e6      	bne.n	8007282 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d12e      	bne.n	800731a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	e853 3f00 	ldrex	r3, [r3]
 80072ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f023 0310 	bic.w	r3, r3, #16
 80072d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	461a      	mov	r2, r3
 80072de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072e0:	61fb      	str	r3, [r7, #28]
 80072e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	69b9      	ldr	r1, [r7, #24]
 80072e6:	69fa      	ldr	r2, [r7, #28]
 80072e8:	e841 2300 	strex	r3, r2, [r1]
 80072ec:	617b      	str	r3, [r7, #20]
   return(result);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e6      	bne.n	80072c2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	f003 0310 	and.w	r3, r3, #16
 80072fe:	2b10      	cmp	r3, #16
 8007300:	d103      	bne.n	800730a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2210      	movs	r2, #16
 8007308:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fe ff4c 	bl	80061b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007318:	e00b      	b.n	8007332 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fb fb7a 	bl	8002a14 <HAL_UART_RxCpltCallback>
}
 8007320:	e007      	b.n	8007332 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	699a      	ldr	r2, [r3, #24]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f042 0208 	orr.w	r2, r2, #8
 8007330:	619a      	str	r2, [r3, #24]
}
 8007332:	bf00      	nop
 8007334:	3770      	adds	r7, #112	@ 0x70
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	40008000 	.word	0x40008000

08007340 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b09c      	sub	sp, #112	@ 0x70
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800734e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007358:	2b22      	cmp	r3, #34	@ 0x22
 800735a:	f040 80be 	bne.w	80074da <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007364:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800736c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800736e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007372:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007376:	4013      	ands	r3, r2
 8007378:	b29a      	uxth	r2, r3
 800737a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800737c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007382:	1c9a      	adds	r2, r3, #2
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800738e:	b29b      	uxth	r3, r3
 8007390:	3b01      	subs	r3, #1
 8007392:	b29a      	uxth	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f040 80a1 	bne.w	80074ea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80073b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80073c8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80073d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e6      	bne.n	80073a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ec:	f023 0301 	bic.w	r3, r3, #1
 80073f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3308      	adds	r3, #8
 80073f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80073fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80073fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007400:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e5      	bne.n	80073da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a33      	ldr	r2, [pc, #204]	@ (80074f4 <UART_RxISR_16BIT+0x1b4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d01f      	beq.n	800746c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d018      	beq.n	800746c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	e853 3f00 	ldrex	r3, [r3]
 8007446:	61fb      	str	r3, [r7, #28]
   return(result);
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800744e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	461a      	mov	r2, r3
 8007456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800745a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800745e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007460:	e841 2300 	strex	r3, r2, [r1]
 8007464:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1e6      	bne.n	800743a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007470:	2b01      	cmp	r3, #1
 8007472:	d12e      	bne.n	80074d2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	e853 3f00 	ldrex	r3, [r3]
 8007486:	60bb      	str	r3, [r7, #8]
   return(result);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f023 0310 	bic.w	r3, r3, #16
 800748e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	461a      	mov	r2, r3
 8007496:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007498:	61bb      	str	r3, [r7, #24]
 800749a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749c:	6979      	ldr	r1, [r7, #20]
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	e841 2300 	strex	r3, r2, [r1]
 80074a4:	613b      	str	r3, [r7, #16]
   return(result);
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e6      	bne.n	800747a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	f003 0310 	and.w	r3, r3, #16
 80074b6:	2b10      	cmp	r3, #16
 80074b8:	d103      	bne.n	80074c2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2210      	movs	r2, #16
 80074c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fe fe70 	bl	80061b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074d0:	e00b      	b.n	80074ea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7fb fa9e 	bl	8002a14 <HAL_UART_RxCpltCallback>
}
 80074d8:	e007      	b.n	80074ea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	699a      	ldr	r2, [r3, #24]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f042 0208 	orr.w	r2, r2, #8
 80074e8:	619a      	str	r2, [r3, #24]
}
 80074ea:	bf00      	nop
 80074ec:	3770      	adds	r7, #112	@ 0x70
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	40008000 	.word	0x40008000

080074f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b0ac      	sub	sp, #176	@ 0xb0
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007506:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800752e:	2b22      	cmp	r3, #34	@ 0x22
 8007530:	f040 8183 	bne.w	800783a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800753a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800753e:	e126      	b.n	800778e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007546:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800754a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800754e:	b2d9      	uxtb	r1, r3
 8007550:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007554:	b2da      	uxtb	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800755a:	400a      	ands	r2, r1
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	b29a      	uxth	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800758a:	f003 0307 	and.w	r3, r3, #7
 800758e:	2b00      	cmp	r3, #0
 8007590:	d053      	beq.n	800763a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d011      	beq.n	80075c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800759e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00b      	beq.n	80075c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2201      	movs	r2, #1
 80075b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075b8:	f043 0201 	orr.w	r2, r3, #1
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d011      	beq.n	80075f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80075ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00b      	beq.n	80075f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2202      	movs	r2, #2
 80075e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e8:	f043 0204 	orr.w	r2, r3, #4
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075f6:	f003 0304 	and.w	r3, r3, #4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d011      	beq.n	8007622 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80075fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00b      	beq.n	8007622 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2204      	movs	r2, #4
 8007610:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007618:	f043 0202 	orr.w	r2, r3, #2
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007628:	2b00      	cmp	r3, #0
 800762a:	d006      	beq.n	800763a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7fe fdb5 	bl	800619c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	f040 80a3 	bne.w	800778e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800765c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800766a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800766c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007670:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007672:	e841 2300 	strex	r3, r2, [r1]
 8007676:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007678:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1e4      	bne.n	8007648 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3308      	adds	r3, #8
 8007684:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007688:	e853 3f00 	ldrex	r3, [r3]
 800768c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800768e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007690:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007694:	f023 0301 	bic.w	r3, r3, #1
 8007698:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3308      	adds	r3, #8
 80076a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076a6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80076a8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80076ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80076b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e1      	bne.n	800767e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a60      	ldr	r2, [pc, #384]	@ (8007854 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d021      	beq.n	800771c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d01a      	beq.n	800771c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076ee:	e853 3f00 	ldrex	r3, [r3]
 80076f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80076f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007708:	657b      	str	r3, [r7, #84]	@ 0x54
 800770a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800770e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e4      	bne.n	80076e6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007720:	2b01      	cmp	r3, #1
 8007722:	d130      	bne.n	8007786 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007732:	e853 3f00 	ldrex	r3, [r3]
 8007736:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	f023 0310 	bic.w	r3, r3, #16
 800773e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800774c:	643b      	str	r3, [r7, #64]	@ 0x40
 800774e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007752:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800775a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e4      	bne.n	800772a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	f003 0310 	and.w	r3, r3, #16
 800776a:	2b10      	cmp	r3, #16
 800776c:	d103      	bne.n	8007776 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2210      	movs	r2, #16
 8007774:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7fe fd16 	bl	80061b0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007784:	e00e      	b.n	80077a4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fb f944 	bl	8002a14 <HAL_UART_RxCpltCallback>
        break;
 800778c:	e00a      	b.n	80077a4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800778e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007792:	2b00      	cmp	r3, #0
 8007794:	d006      	beq.n	80077a4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800779a:	f003 0320 	and.w	r3, r3, #32
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f47f aece 	bne.w	8007540 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077aa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80077ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d049      	beq.n	800784a <UART_RxISR_8BIT_FIFOEN+0x352>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80077bc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d242      	bcs.n	800784a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3308      	adds	r3, #8
 80077ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	e853 3f00 	ldrex	r3, [r3]
 80077d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3308      	adds	r3, #8
 80077e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80077e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077f0:	e841 2300 	strex	r3, r2, [r1]
 80077f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e3      	bne.n	80077c4 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a16      	ldr	r2, [pc, #88]	@ (8007858 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007800:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	e853 3f00 	ldrex	r3, [r3]
 800780e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f043 0320 	orr.w	r3, r3, #32
 8007816:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007824:	61bb      	str	r3, [r7, #24]
 8007826:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6979      	ldr	r1, [r7, #20]
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	613b      	str	r3, [r7, #16]
   return(result);
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e4      	bne.n	8007802 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007838:	e007      	b.n	800784a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	699a      	ldr	r2, [r3, #24]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f042 0208 	orr.w	r2, r2, #8
 8007848:	619a      	str	r2, [r3, #24]
}
 800784a:	bf00      	nop
 800784c:	37b0      	adds	r7, #176	@ 0xb0
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40008000 	.word	0x40008000
 8007858:	08007189 	.word	0x08007189

0800785c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b0ae      	sub	sp, #184	@ 0xb8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800786a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007892:	2b22      	cmp	r3, #34	@ 0x22
 8007894:	f040 8187 	bne.w	8007ba6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800789e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078a2:	e12a      	b.n	8007afa <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078aa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80078b6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80078ba:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80078be:	4013      	ands	r3, r2
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078cc:	1c9a      	adds	r2, r3, #2
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80078ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d053      	beq.n	80079a2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d011      	beq.n	800792a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800790a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00b      	beq.n	800792a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2201      	movs	r2, #1
 8007918:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007920:	f043 0201 	orr.w	r2, r3, #1
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800792a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800792e:	f003 0302 	and.w	r3, r3, #2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d011      	beq.n	800795a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007936:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00b      	beq.n	800795a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2202      	movs	r2, #2
 8007948:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007950:	f043 0204 	orr.w	r2, r3, #4
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800795a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800795e:	f003 0304 	and.w	r3, r3, #4
 8007962:	2b00      	cmp	r3, #0
 8007964:	d011      	beq.n	800798a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007966:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00b      	beq.n	800798a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2204      	movs	r2, #4
 8007978:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007980:	f043 0202 	orr.w	r2, r3, #2
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007990:	2b00      	cmp	r3, #0
 8007992:	d006      	beq.n	80079a2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7fe fc01 	bl	800619c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f040 80a5 	bne.w	8007afa <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079b8:	e853 3f00 	ldrex	r3, [r3]
 80079bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	461a      	mov	r2, r3
 80079ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80079e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e2      	bne.n	80079b0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3308      	adds	r3, #8
 80079f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80079fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a00:	f023 0301 	bic.w	r3, r3, #1
 8007a04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007a12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e1      	bne.n	80079ea <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a60      	ldr	r2, [pc, #384]	@ (8007bc0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d021      	beq.n	8007a88 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d01a      	beq.n	8007a88 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a5a:	e853 3f00 	ldrex	r3, [r3]
 8007a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a76:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e4      	bne.n	8007a52 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d130      	bne.n	8007af2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa6:	f023 0310 	bic.w	r3, r3, #16
 8007aaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e4      	bne.n	8007a96 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f003 0310 	and.w	r3, r3, #16
 8007ad6:	2b10      	cmp	r3, #16
 8007ad8:	d103      	bne.n	8007ae2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2210      	movs	r2, #16
 8007ae0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7fe fb60 	bl	80061b0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007af0:	e00e      	b.n	8007b10 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7fa ff8e 	bl	8002a14 <HAL_UART_RxCpltCallback>
        break;
 8007af8:	e00a      	b.n	8007b10 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007afa:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d006      	beq.n	8007b10 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007b02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f47f aeca 	bne.w	80078a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b16:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b1a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d049      	beq.n	8007bb6 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b28:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d242      	bcs.n	8007bb6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3308      	adds	r3, #8
 8007b36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3a:	e853 3f00 	ldrex	r3, [r3]
 8007b3e:	623b      	str	r3, [r7, #32]
   return(result);
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3308      	adds	r3, #8
 8007b50:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007b54:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b5c:	e841 2300 	strex	r3, r2, [r1]
 8007b60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1e3      	bne.n	8007b30 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a16      	ldr	r2, [pc, #88]	@ (8007bc4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007b6c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f043 0320 	orr.w	r3, r3, #32
 8007b82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b90:	61fb      	str	r3, [r7, #28]
 8007b92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	69b9      	ldr	r1, [r7, #24]
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e4      	bne.n	8007b6e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ba4:	e007      	b.n	8007bb6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	699a      	ldr	r2, [r3, #24]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f042 0208 	orr.w	r2, r2, #8
 8007bb4:	619a      	str	r2, [r3, #24]
}
 8007bb6:	bf00      	nop
 8007bb8:	37b8      	adds	r7, #184	@ 0xb8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	40008000 	.word	0x40008000
 8007bc4:	08007341 	.word	0x08007341

08007bc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d101      	bne.n	8007bde <HAL_UARTEx_DisableFifoMode+0x16>
 8007bda:	2302      	movs	r3, #2
 8007bdc:	e027      	b.n	8007c2e <HAL_UARTEx_DisableFifoMode+0x66>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2224      	movs	r2, #36	@ 0x24
 8007bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 0201 	bic.w	r2, r2, #1
 8007c04:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d101      	bne.n	8007c52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c4e:	2302      	movs	r3, #2
 8007c50:	e02d      	b.n	8007cae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2224      	movs	r2, #36	@ 0x24
 8007c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0201 	bic.w	r2, r2, #1
 8007c78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	683a      	ldr	r2, [r7, #0]
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f850 	bl	8007d34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d101      	bne.n	8007cce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007cca:	2302      	movs	r3, #2
 8007ccc:	e02d      	b.n	8007d2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2224      	movs	r2, #36	@ 0x24
 8007cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 0201 	bic.w	r2, r2, #1
 8007cf4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f812 	bl	8007d34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d108      	bne.n	8007d56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d54:	e031      	b.n	8007dba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d56:	2308      	movs	r3, #8
 8007d58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d5a:	2308      	movs	r3, #8
 8007d5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	0e5b      	lsrs	r3, r3, #25
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	f003 0307 	and.w	r3, r3, #7
 8007d6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	0f5b      	lsrs	r3, r3, #29
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f003 0307 	and.w	r3, r3, #7
 8007d7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	7b3a      	ldrb	r2, [r7, #12]
 8007d82:	4911      	ldr	r1, [pc, #68]	@ (8007dc8 <UARTEx_SetNbDataToProcess+0x94>)
 8007d84:	5c8a      	ldrb	r2, [r1, r2]
 8007d86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d8a:	7b3a      	ldrb	r2, [r7, #12]
 8007d8c:	490f      	ldr	r1, [pc, #60]	@ (8007dcc <UARTEx_SetNbDataToProcess+0x98>)
 8007d8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d90:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
 8007d9e:	7b7a      	ldrb	r2, [r7, #13]
 8007da0:	4909      	ldr	r1, [pc, #36]	@ (8007dc8 <UARTEx_SetNbDataToProcess+0x94>)
 8007da2:	5c8a      	ldrb	r2, [r1, r2]
 8007da4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007da8:	7b7a      	ldrb	r2, [r7, #13]
 8007daa:	4908      	ldr	r1, [pc, #32]	@ (8007dcc <UARTEx_SetNbDataToProcess+0x98>)
 8007dac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dae:	fb93 f3f2 	sdiv	r3, r3, r2
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007dba:	bf00      	nop
 8007dbc:	3714      	adds	r7, #20
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	08008a3c 	.word	0x08008a3c
 8007dcc:	08008a44 	.word	0x08008a44

08007dd0 <siprintf>:
 8007dd0:	b40e      	push	{r1, r2, r3}
 8007dd2:	b500      	push	{lr}
 8007dd4:	b09c      	sub	sp, #112	@ 0x70
 8007dd6:	ab1d      	add	r3, sp, #116	@ 0x74
 8007dd8:	9002      	str	r0, [sp, #8]
 8007dda:	9006      	str	r0, [sp, #24]
 8007ddc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007de0:	4809      	ldr	r0, [pc, #36]	@ (8007e08 <siprintf+0x38>)
 8007de2:	9107      	str	r1, [sp, #28]
 8007de4:	9104      	str	r1, [sp, #16]
 8007de6:	4909      	ldr	r1, [pc, #36]	@ (8007e0c <siprintf+0x3c>)
 8007de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dec:	9105      	str	r1, [sp, #20]
 8007dee:	6800      	ldr	r0, [r0, #0]
 8007df0:	9301      	str	r3, [sp, #4]
 8007df2:	a902      	add	r1, sp, #8
 8007df4:	f000 f9a4 	bl	8008140 <_svfiprintf_r>
 8007df8:	9b02      	ldr	r3, [sp, #8]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	b01c      	add	sp, #112	@ 0x70
 8007e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e04:	b003      	add	sp, #12
 8007e06:	4770      	bx	lr
 8007e08:	20000010 	.word	0x20000010
 8007e0c:	ffff0208 	.word	0xffff0208

08007e10 <memset>:
 8007e10:	4402      	add	r2, r0
 8007e12:	4603      	mov	r3, r0
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d100      	bne.n	8007e1a <memset+0xa>
 8007e18:	4770      	bx	lr
 8007e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e1e:	e7f9      	b.n	8007e14 <memset+0x4>

08007e20 <strcat>:
 8007e20:	b510      	push	{r4, lr}
 8007e22:	4602      	mov	r2, r0
 8007e24:	7814      	ldrb	r4, [r2, #0]
 8007e26:	4613      	mov	r3, r2
 8007e28:	3201      	adds	r2, #1
 8007e2a:	2c00      	cmp	r4, #0
 8007e2c:	d1fa      	bne.n	8007e24 <strcat+0x4>
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e34:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e38:	2a00      	cmp	r2, #0
 8007e3a:	d1f9      	bne.n	8007e30 <strcat+0x10>
 8007e3c:	bd10      	pop	{r4, pc}
	...

08007e40 <__errno>:
 8007e40:	4b01      	ldr	r3, [pc, #4]	@ (8007e48 <__errno+0x8>)
 8007e42:	6818      	ldr	r0, [r3, #0]
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	20000010 	.word	0x20000010

08007e4c <__libc_init_array>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	4d0d      	ldr	r5, [pc, #52]	@ (8007e84 <__libc_init_array+0x38>)
 8007e50:	4c0d      	ldr	r4, [pc, #52]	@ (8007e88 <__libc_init_array+0x3c>)
 8007e52:	1b64      	subs	r4, r4, r5
 8007e54:	10a4      	asrs	r4, r4, #2
 8007e56:	2600      	movs	r6, #0
 8007e58:	42a6      	cmp	r6, r4
 8007e5a:	d109      	bne.n	8007e70 <__libc_init_array+0x24>
 8007e5c:	4d0b      	ldr	r5, [pc, #44]	@ (8007e8c <__libc_init_array+0x40>)
 8007e5e:	4c0c      	ldr	r4, [pc, #48]	@ (8007e90 <__libc_init_array+0x44>)
 8007e60:	f000 fc66 	bl	8008730 <_init>
 8007e64:	1b64      	subs	r4, r4, r5
 8007e66:	10a4      	asrs	r4, r4, #2
 8007e68:	2600      	movs	r6, #0
 8007e6a:	42a6      	cmp	r6, r4
 8007e6c:	d105      	bne.n	8007e7a <__libc_init_array+0x2e>
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}
 8007e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e74:	4798      	blx	r3
 8007e76:	3601      	adds	r6, #1
 8007e78:	e7ee      	b.n	8007e58 <__libc_init_array+0xc>
 8007e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e7e:	4798      	blx	r3
 8007e80:	3601      	adds	r6, #1
 8007e82:	e7f2      	b.n	8007e6a <__libc_init_array+0x1e>
 8007e84:	08008a88 	.word	0x08008a88
 8007e88:	08008a88 	.word	0x08008a88
 8007e8c:	08008a88 	.word	0x08008a88
 8007e90:	08008a8c 	.word	0x08008a8c

08007e94 <__retarget_lock_acquire_recursive>:
 8007e94:	4770      	bx	lr

08007e96 <__retarget_lock_release_recursive>:
 8007e96:	4770      	bx	lr

08007e98 <_free_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4605      	mov	r5, r0
 8007e9c:	2900      	cmp	r1, #0
 8007e9e:	d041      	beq.n	8007f24 <_free_r+0x8c>
 8007ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea4:	1f0c      	subs	r4, r1, #4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bfb8      	it	lt
 8007eaa:	18e4      	addlt	r4, r4, r3
 8007eac:	f000 f8e0 	bl	8008070 <__malloc_lock>
 8007eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f28 <_free_r+0x90>)
 8007eb2:	6813      	ldr	r3, [r2, #0]
 8007eb4:	b933      	cbnz	r3, 8007ec4 <_free_r+0x2c>
 8007eb6:	6063      	str	r3, [r4, #4]
 8007eb8:	6014      	str	r4, [r2, #0]
 8007eba:	4628      	mov	r0, r5
 8007ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ec0:	f000 b8dc 	b.w	800807c <__malloc_unlock>
 8007ec4:	42a3      	cmp	r3, r4
 8007ec6:	d908      	bls.n	8007eda <_free_r+0x42>
 8007ec8:	6820      	ldr	r0, [r4, #0]
 8007eca:	1821      	adds	r1, r4, r0
 8007ecc:	428b      	cmp	r3, r1
 8007ece:	bf01      	itttt	eq
 8007ed0:	6819      	ldreq	r1, [r3, #0]
 8007ed2:	685b      	ldreq	r3, [r3, #4]
 8007ed4:	1809      	addeq	r1, r1, r0
 8007ed6:	6021      	streq	r1, [r4, #0]
 8007ed8:	e7ed      	b.n	8007eb6 <_free_r+0x1e>
 8007eda:	461a      	mov	r2, r3
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	b10b      	cbz	r3, 8007ee4 <_free_r+0x4c>
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	d9fa      	bls.n	8007eda <_free_r+0x42>
 8007ee4:	6811      	ldr	r1, [r2, #0]
 8007ee6:	1850      	adds	r0, r2, r1
 8007ee8:	42a0      	cmp	r0, r4
 8007eea:	d10b      	bne.n	8007f04 <_free_r+0x6c>
 8007eec:	6820      	ldr	r0, [r4, #0]
 8007eee:	4401      	add	r1, r0
 8007ef0:	1850      	adds	r0, r2, r1
 8007ef2:	4283      	cmp	r3, r0
 8007ef4:	6011      	str	r1, [r2, #0]
 8007ef6:	d1e0      	bne.n	8007eba <_free_r+0x22>
 8007ef8:	6818      	ldr	r0, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	6053      	str	r3, [r2, #4]
 8007efe:	4408      	add	r0, r1
 8007f00:	6010      	str	r0, [r2, #0]
 8007f02:	e7da      	b.n	8007eba <_free_r+0x22>
 8007f04:	d902      	bls.n	8007f0c <_free_r+0x74>
 8007f06:	230c      	movs	r3, #12
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	e7d6      	b.n	8007eba <_free_r+0x22>
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	1821      	adds	r1, r4, r0
 8007f10:	428b      	cmp	r3, r1
 8007f12:	bf04      	itt	eq
 8007f14:	6819      	ldreq	r1, [r3, #0]
 8007f16:	685b      	ldreq	r3, [r3, #4]
 8007f18:	6063      	str	r3, [r4, #4]
 8007f1a:	bf04      	itt	eq
 8007f1c:	1809      	addeq	r1, r1, r0
 8007f1e:	6021      	streq	r1, [r4, #0]
 8007f20:	6054      	str	r4, [r2, #4]
 8007f22:	e7ca      	b.n	8007eba <_free_r+0x22>
 8007f24:	bd38      	pop	{r3, r4, r5, pc}
 8007f26:	bf00      	nop
 8007f28:	200013b4 	.word	0x200013b4

08007f2c <sbrk_aligned>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	4e0f      	ldr	r6, [pc, #60]	@ (8007f6c <sbrk_aligned+0x40>)
 8007f30:	460c      	mov	r4, r1
 8007f32:	6831      	ldr	r1, [r6, #0]
 8007f34:	4605      	mov	r5, r0
 8007f36:	b911      	cbnz	r1, 8007f3e <sbrk_aligned+0x12>
 8007f38:	f000 fba6 	bl	8008688 <_sbrk_r>
 8007f3c:	6030      	str	r0, [r6, #0]
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4628      	mov	r0, r5
 8007f42:	f000 fba1 	bl	8008688 <_sbrk_r>
 8007f46:	1c43      	adds	r3, r0, #1
 8007f48:	d103      	bne.n	8007f52 <sbrk_aligned+0x26>
 8007f4a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f4e:	4620      	mov	r0, r4
 8007f50:	bd70      	pop	{r4, r5, r6, pc}
 8007f52:	1cc4      	adds	r4, r0, #3
 8007f54:	f024 0403 	bic.w	r4, r4, #3
 8007f58:	42a0      	cmp	r0, r4
 8007f5a:	d0f8      	beq.n	8007f4e <sbrk_aligned+0x22>
 8007f5c:	1a21      	subs	r1, r4, r0
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f000 fb92 	bl	8008688 <_sbrk_r>
 8007f64:	3001      	adds	r0, #1
 8007f66:	d1f2      	bne.n	8007f4e <sbrk_aligned+0x22>
 8007f68:	e7ef      	b.n	8007f4a <sbrk_aligned+0x1e>
 8007f6a:	bf00      	nop
 8007f6c:	200013b0 	.word	0x200013b0

08007f70 <_malloc_r>:
 8007f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f74:	1ccd      	adds	r5, r1, #3
 8007f76:	f025 0503 	bic.w	r5, r5, #3
 8007f7a:	3508      	adds	r5, #8
 8007f7c:	2d0c      	cmp	r5, #12
 8007f7e:	bf38      	it	cc
 8007f80:	250c      	movcc	r5, #12
 8007f82:	2d00      	cmp	r5, #0
 8007f84:	4606      	mov	r6, r0
 8007f86:	db01      	blt.n	8007f8c <_malloc_r+0x1c>
 8007f88:	42a9      	cmp	r1, r5
 8007f8a:	d904      	bls.n	8007f96 <_malloc_r+0x26>
 8007f8c:	230c      	movs	r3, #12
 8007f8e:	6033      	str	r3, [r6, #0]
 8007f90:	2000      	movs	r0, #0
 8007f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800806c <_malloc_r+0xfc>
 8007f9a:	f000 f869 	bl	8008070 <__malloc_lock>
 8007f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007fa2:	461c      	mov	r4, r3
 8007fa4:	bb44      	cbnz	r4, 8007ff8 <_malloc_r+0x88>
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f7ff ffbf 	bl	8007f2c <sbrk_aligned>
 8007fae:	1c43      	adds	r3, r0, #1
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	d158      	bne.n	8008066 <_malloc_r+0xf6>
 8007fb4:	f8d8 4000 	ldr.w	r4, [r8]
 8007fb8:	4627      	mov	r7, r4
 8007fba:	2f00      	cmp	r7, #0
 8007fbc:	d143      	bne.n	8008046 <_malloc_r+0xd6>
 8007fbe:	2c00      	cmp	r4, #0
 8007fc0:	d04b      	beq.n	800805a <_malloc_r+0xea>
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	eb04 0903 	add.w	r9, r4, r3
 8007fcc:	f000 fb5c 	bl	8008688 <_sbrk_r>
 8007fd0:	4581      	cmp	r9, r0
 8007fd2:	d142      	bne.n	800805a <_malloc_r+0xea>
 8007fd4:	6821      	ldr	r1, [r4, #0]
 8007fd6:	1a6d      	subs	r5, r5, r1
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f7ff ffa6 	bl	8007f2c <sbrk_aligned>
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	d03a      	beq.n	800805a <_malloc_r+0xea>
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	442b      	add	r3, r5
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	f8d8 3000 	ldr.w	r3, [r8]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	bb62      	cbnz	r2, 800804c <_malloc_r+0xdc>
 8007ff2:	f8c8 7000 	str.w	r7, [r8]
 8007ff6:	e00f      	b.n	8008018 <_malloc_r+0xa8>
 8007ff8:	6822      	ldr	r2, [r4, #0]
 8007ffa:	1b52      	subs	r2, r2, r5
 8007ffc:	d420      	bmi.n	8008040 <_malloc_r+0xd0>
 8007ffe:	2a0b      	cmp	r2, #11
 8008000:	d917      	bls.n	8008032 <_malloc_r+0xc2>
 8008002:	1961      	adds	r1, r4, r5
 8008004:	42a3      	cmp	r3, r4
 8008006:	6025      	str	r5, [r4, #0]
 8008008:	bf18      	it	ne
 800800a:	6059      	strne	r1, [r3, #4]
 800800c:	6863      	ldr	r3, [r4, #4]
 800800e:	bf08      	it	eq
 8008010:	f8c8 1000 	streq.w	r1, [r8]
 8008014:	5162      	str	r2, [r4, r5]
 8008016:	604b      	str	r3, [r1, #4]
 8008018:	4630      	mov	r0, r6
 800801a:	f000 f82f 	bl	800807c <__malloc_unlock>
 800801e:	f104 000b 	add.w	r0, r4, #11
 8008022:	1d23      	adds	r3, r4, #4
 8008024:	f020 0007 	bic.w	r0, r0, #7
 8008028:	1ac2      	subs	r2, r0, r3
 800802a:	bf1c      	itt	ne
 800802c:	1a1b      	subne	r3, r3, r0
 800802e:	50a3      	strne	r3, [r4, r2]
 8008030:	e7af      	b.n	8007f92 <_malloc_r+0x22>
 8008032:	6862      	ldr	r2, [r4, #4]
 8008034:	42a3      	cmp	r3, r4
 8008036:	bf0c      	ite	eq
 8008038:	f8c8 2000 	streq.w	r2, [r8]
 800803c:	605a      	strne	r2, [r3, #4]
 800803e:	e7eb      	b.n	8008018 <_malloc_r+0xa8>
 8008040:	4623      	mov	r3, r4
 8008042:	6864      	ldr	r4, [r4, #4]
 8008044:	e7ae      	b.n	8007fa4 <_malloc_r+0x34>
 8008046:	463c      	mov	r4, r7
 8008048:	687f      	ldr	r7, [r7, #4]
 800804a:	e7b6      	b.n	8007fba <_malloc_r+0x4a>
 800804c:	461a      	mov	r2, r3
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	42a3      	cmp	r3, r4
 8008052:	d1fb      	bne.n	800804c <_malloc_r+0xdc>
 8008054:	2300      	movs	r3, #0
 8008056:	6053      	str	r3, [r2, #4]
 8008058:	e7de      	b.n	8008018 <_malloc_r+0xa8>
 800805a:	230c      	movs	r3, #12
 800805c:	6033      	str	r3, [r6, #0]
 800805e:	4630      	mov	r0, r6
 8008060:	f000 f80c 	bl	800807c <__malloc_unlock>
 8008064:	e794      	b.n	8007f90 <_malloc_r+0x20>
 8008066:	6005      	str	r5, [r0, #0]
 8008068:	e7d6      	b.n	8008018 <_malloc_r+0xa8>
 800806a:	bf00      	nop
 800806c:	200013b4 	.word	0x200013b4

08008070 <__malloc_lock>:
 8008070:	4801      	ldr	r0, [pc, #4]	@ (8008078 <__malloc_lock+0x8>)
 8008072:	f7ff bf0f 	b.w	8007e94 <__retarget_lock_acquire_recursive>
 8008076:	bf00      	nop
 8008078:	200013ac 	.word	0x200013ac

0800807c <__malloc_unlock>:
 800807c:	4801      	ldr	r0, [pc, #4]	@ (8008084 <__malloc_unlock+0x8>)
 800807e:	f7ff bf0a 	b.w	8007e96 <__retarget_lock_release_recursive>
 8008082:	bf00      	nop
 8008084:	200013ac 	.word	0x200013ac

08008088 <__ssputs_r>:
 8008088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800808c:	688e      	ldr	r6, [r1, #8]
 800808e:	461f      	mov	r7, r3
 8008090:	42be      	cmp	r6, r7
 8008092:	680b      	ldr	r3, [r1, #0]
 8008094:	4682      	mov	sl, r0
 8008096:	460c      	mov	r4, r1
 8008098:	4690      	mov	r8, r2
 800809a:	d82d      	bhi.n	80080f8 <__ssputs_r+0x70>
 800809c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080a4:	d026      	beq.n	80080f4 <__ssputs_r+0x6c>
 80080a6:	6965      	ldr	r5, [r4, #20]
 80080a8:	6909      	ldr	r1, [r1, #16]
 80080aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080ae:	eba3 0901 	sub.w	r9, r3, r1
 80080b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080b6:	1c7b      	adds	r3, r7, #1
 80080b8:	444b      	add	r3, r9
 80080ba:	106d      	asrs	r5, r5, #1
 80080bc:	429d      	cmp	r5, r3
 80080be:	bf38      	it	cc
 80080c0:	461d      	movcc	r5, r3
 80080c2:	0553      	lsls	r3, r2, #21
 80080c4:	d527      	bpl.n	8008116 <__ssputs_r+0x8e>
 80080c6:	4629      	mov	r1, r5
 80080c8:	f7ff ff52 	bl	8007f70 <_malloc_r>
 80080cc:	4606      	mov	r6, r0
 80080ce:	b360      	cbz	r0, 800812a <__ssputs_r+0xa2>
 80080d0:	6921      	ldr	r1, [r4, #16]
 80080d2:	464a      	mov	r2, r9
 80080d4:	f000 fae8 	bl	80086a8 <memcpy>
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080e2:	81a3      	strh	r3, [r4, #12]
 80080e4:	6126      	str	r6, [r4, #16]
 80080e6:	6165      	str	r5, [r4, #20]
 80080e8:	444e      	add	r6, r9
 80080ea:	eba5 0509 	sub.w	r5, r5, r9
 80080ee:	6026      	str	r6, [r4, #0]
 80080f0:	60a5      	str	r5, [r4, #8]
 80080f2:	463e      	mov	r6, r7
 80080f4:	42be      	cmp	r6, r7
 80080f6:	d900      	bls.n	80080fa <__ssputs_r+0x72>
 80080f8:	463e      	mov	r6, r7
 80080fa:	6820      	ldr	r0, [r4, #0]
 80080fc:	4632      	mov	r2, r6
 80080fe:	4641      	mov	r1, r8
 8008100:	f000 faa8 	bl	8008654 <memmove>
 8008104:	68a3      	ldr	r3, [r4, #8]
 8008106:	1b9b      	subs	r3, r3, r6
 8008108:	60a3      	str	r3, [r4, #8]
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	4433      	add	r3, r6
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	2000      	movs	r0, #0
 8008112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008116:	462a      	mov	r2, r5
 8008118:	f000 fad4 	bl	80086c4 <_realloc_r>
 800811c:	4606      	mov	r6, r0
 800811e:	2800      	cmp	r0, #0
 8008120:	d1e0      	bne.n	80080e4 <__ssputs_r+0x5c>
 8008122:	6921      	ldr	r1, [r4, #16]
 8008124:	4650      	mov	r0, sl
 8008126:	f7ff feb7 	bl	8007e98 <_free_r>
 800812a:	230c      	movs	r3, #12
 800812c:	f8ca 3000 	str.w	r3, [sl]
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008136:	81a3      	strh	r3, [r4, #12]
 8008138:	f04f 30ff 	mov.w	r0, #4294967295
 800813c:	e7e9      	b.n	8008112 <__ssputs_r+0x8a>
	...

08008140 <_svfiprintf_r>:
 8008140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	4698      	mov	r8, r3
 8008146:	898b      	ldrh	r3, [r1, #12]
 8008148:	061b      	lsls	r3, r3, #24
 800814a:	b09d      	sub	sp, #116	@ 0x74
 800814c:	4607      	mov	r7, r0
 800814e:	460d      	mov	r5, r1
 8008150:	4614      	mov	r4, r2
 8008152:	d510      	bpl.n	8008176 <_svfiprintf_r+0x36>
 8008154:	690b      	ldr	r3, [r1, #16]
 8008156:	b973      	cbnz	r3, 8008176 <_svfiprintf_r+0x36>
 8008158:	2140      	movs	r1, #64	@ 0x40
 800815a:	f7ff ff09 	bl	8007f70 <_malloc_r>
 800815e:	6028      	str	r0, [r5, #0]
 8008160:	6128      	str	r0, [r5, #16]
 8008162:	b930      	cbnz	r0, 8008172 <_svfiprintf_r+0x32>
 8008164:	230c      	movs	r3, #12
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	f04f 30ff 	mov.w	r0, #4294967295
 800816c:	b01d      	add	sp, #116	@ 0x74
 800816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008172:	2340      	movs	r3, #64	@ 0x40
 8008174:	616b      	str	r3, [r5, #20]
 8008176:	2300      	movs	r3, #0
 8008178:	9309      	str	r3, [sp, #36]	@ 0x24
 800817a:	2320      	movs	r3, #32
 800817c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008180:	f8cd 800c 	str.w	r8, [sp, #12]
 8008184:	2330      	movs	r3, #48	@ 0x30
 8008186:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008324 <_svfiprintf_r+0x1e4>
 800818a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800818e:	f04f 0901 	mov.w	r9, #1
 8008192:	4623      	mov	r3, r4
 8008194:	469a      	mov	sl, r3
 8008196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800819a:	b10a      	cbz	r2, 80081a0 <_svfiprintf_r+0x60>
 800819c:	2a25      	cmp	r2, #37	@ 0x25
 800819e:	d1f9      	bne.n	8008194 <_svfiprintf_r+0x54>
 80081a0:	ebba 0b04 	subs.w	fp, sl, r4
 80081a4:	d00b      	beq.n	80081be <_svfiprintf_r+0x7e>
 80081a6:	465b      	mov	r3, fp
 80081a8:	4622      	mov	r2, r4
 80081aa:	4629      	mov	r1, r5
 80081ac:	4638      	mov	r0, r7
 80081ae:	f7ff ff6b 	bl	8008088 <__ssputs_r>
 80081b2:	3001      	adds	r0, #1
 80081b4:	f000 80a7 	beq.w	8008306 <_svfiprintf_r+0x1c6>
 80081b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081ba:	445a      	add	r2, fp
 80081bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80081be:	f89a 3000 	ldrb.w	r3, [sl]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f000 809f 	beq.w	8008306 <_svfiprintf_r+0x1c6>
 80081c8:	2300      	movs	r3, #0
 80081ca:	f04f 32ff 	mov.w	r2, #4294967295
 80081ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081d2:	f10a 0a01 	add.w	sl, sl, #1
 80081d6:	9304      	str	r3, [sp, #16]
 80081d8:	9307      	str	r3, [sp, #28]
 80081da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081de:	931a      	str	r3, [sp, #104]	@ 0x68
 80081e0:	4654      	mov	r4, sl
 80081e2:	2205      	movs	r2, #5
 80081e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e8:	484e      	ldr	r0, [pc, #312]	@ (8008324 <_svfiprintf_r+0x1e4>)
 80081ea:	f7f8 f831 	bl	8000250 <memchr>
 80081ee:	9a04      	ldr	r2, [sp, #16]
 80081f0:	b9d8      	cbnz	r0, 800822a <_svfiprintf_r+0xea>
 80081f2:	06d0      	lsls	r0, r2, #27
 80081f4:	bf44      	itt	mi
 80081f6:	2320      	movmi	r3, #32
 80081f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081fc:	0711      	lsls	r1, r2, #28
 80081fe:	bf44      	itt	mi
 8008200:	232b      	movmi	r3, #43	@ 0x2b
 8008202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008206:	f89a 3000 	ldrb.w	r3, [sl]
 800820a:	2b2a      	cmp	r3, #42	@ 0x2a
 800820c:	d015      	beq.n	800823a <_svfiprintf_r+0xfa>
 800820e:	9a07      	ldr	r2, [sp, #28]
 8008210:	4654      	mov	r4, sl
 8008212:	2000      	movs	r0, #0
 8008214:	f04f 0c0a 	mov.w	ip, #10
 8008218:	4621      	mov	r1, r4
 800821a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800821e:	3b30      	subs	r3, #48	@ 0x30
 8008220:	2b09      	cmp	r3, #9
 8008222:	d94b      	bls.n	80082bc <_svfiprintf_r+0x17c>
 8008224:	b1b0      	cbz	r0, 8008254 <_svfiprintf_r+0x114>
 8008226:	9207      	str	r2, [sp, #28]
 8008228:	e014      	b.n	8008254 <_svfiprintf_r+0x114>
 800822a:	eba0 0308 	sub.w	r3, r0, r8
 800822e:	fa09 f303 	lsl.w	r3, r9, r3
 8008232:	4313      	orrs	r3, r2
 8008234:	9304      	str	r3, [sp, #16]
 8008236:	46a2      	mov	sl, r4
 8008238:	e7d2      	b.n	80081e0 <_svfiprintf_r+0xa0>
 800823a:	9b03      	ldr	r3, [sp, #12]
 800823c:	1d19      	adds	r1, r3, #4
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	9103      	str	r1, [sp, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	bfbb      	ittet	lt
 8008246:	425b      	neglt	r3, r3
 8008248:	f042 0202 	orrlt.w	r2, r2, #2
 800824c:	9307      	strge	r3, [sp, #28]
 800824e:	9307      	strlt	r3, [sp, #28]
 8008250:	bfb8      	it	lt
 8008252:	9204      	strlt	r2, [sp, #16]
 8008254:	7823      	ldrb	r3, [r4, #0]
 8008256:	2b2e      	cmp	r3, #46	@ 0x2e
 8008258:	d10a      	bne.n	8008270 <_svfiprintf_r+0x130>
 800825a:	7863      	ldrb	r3, [r4, #1]
 800825c:	2b2a      	cmp	r3, #42	@ 0x2a
 800825e:	d132      	bne.n	80082c6 <_svfiprintf_r+0x186>
 8008260:	9b03      	ldr	r3, [sp, #12]
 8008262:	1d1a      	adds	r2, r3, #4
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	9203      	str	r2, [sp, #12]
 8008268:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800826c:	3402      	adds	r4, #2
 800826e:	9305      	str	r3, [sp, #20]
 8008270:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008334 <_svfiprintf_r+0x1f4>
 8008274:	7821      	ldrb	r1, [r4, #0]
 8008276:	2203      	movs	r2, #3
 8008278:	4650      	mov	r0, sl
 800827a:	f7f7 ffe9 	bl	8000250 <memchr>
 800827e:	b138      	cbz	r0, 8008290 <_svfiprintf_r+0x150>
 8008280:	9b04      	ldr	r3, [sp, #16]
 8008282:	eba0 000a 	sub.w	r0, r0, sl
 8008286:	2240      	movs	r2, #64	@ 0x40
 8008288:	4082      	lsls	r2, r0
 800828a:	4313      	orrs	r3, r2
 800828c:	3401      	adds	r4, #1
 800828e:	9304      	str	r3, [sp, #16]
 8008290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008294:	4824      	ldr	r0, [pc, #144]	@ (8008328 <_svfiprintf_r+0x1e8>)
 8008296:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800829a:	2206      	movs	r2, #6
 800829c:	f7f7 ffd8 	bl	8000250 <memchr>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d036      	beq.n	8008312 <_svfiprintf_r+0x1d2>
 80082a4:	4b21      	ldr	r3, [pc, #132]	@ (800832c <_svfiprintf_r+0x1ec>)
 80082a6:	bb1b      	cbnz	r3, 80082f0 <_svfiprintf_r+0x1b0>
 80082a8:	9b03      	ldr	r3, [sp, #12]
 80082aa:	3307      	adds	r3, #7
 80082ac:	f023 0307 	bic.w	r3, r3, #7
 80082b0:	3308      	adds	r3, #8
 80082b2:	9303      	str	r3, [sp, #12]
 80082b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082b6:	4433      	add	r3, r6
 80082b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ba:	e76a      	b.n	8008192 <_svfiprintf_r+0x52>
 80082bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80082c0:	460c      	mov	r4, r1
 80082c2:	2001      	movs	r0, #1
 80082c4:	e7a8      	b.n	8008218 <_svfiprintf_r+0xd8>
 80082c6:	2300      	movs	r3, #0
 80082c8:	3401      	adds	r4, #1
 80082ca:	9305      	str	r3, [sp, #20]
 80082cc:	4619      	mov	r1, r3
 80082ce:	f04f 0c0a 	mov.w	ip, #10
 80082d2:	4620      	mov	r0, r4
 80082d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082d8:	3a30      	subs	r2, #48	@ 0x30
 80082da:	2a09      	cmp	r2, #9
 80082dc:	d903      	bls.n	80082e6 <_svfiprintf_r+0x1a6>
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0c6      	beq.n	8008270 <_svfiprintf_r+0x130>
 80082e2:	9105      	str	r1, [sp, #20]
 80082e4:	e7c4      	b.n	8008270 <_svfiprintf_r+0x130>
 80082e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80082ea:	4604      	mov	r4, r0
 80082ec:	2301      	movs	r3, #1
 80082ee:	e7f0      	b.n	80082d2 <_svfiprintf_r+0x192>
 80082f0:	ab03      	add	r3, sp, #12
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	462a      	mov	r2, r5
 80082f6:	4b0e      	ldr	r3, [pc, #56]	@ (8008330 <_svfiprintf_r+0x1f0>)
 80082f8:	a904      	add	r1, sp, #16
 80082fa:	4638      	mov	r0, r7
 80082fc:	f3af 8000 	nop.w
 8008300:	1c42      	adds	r2, r0, #1
 8008302:	4606      	mov	r6, r0
 8008304:	d1d6      	bne.n	80082b4 <_svfiprintf_r+0x174>
 8008306:	89ab      	ldrh	r3, [r5, #12]
 8008308:	065b      	lsls	r3, r3, #25
 800830a:	f53f af2d 	bmi.w	8008168 <_svfiprintf_r+0x28>
 800830e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008310:	e72c      	b.n	800816c <_svfiprintf_r+0x2c>
 8008312:	ab03      	add	r3, sp, #12
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	462a      	mov	r2, r5
 8008318:	4b05      	ldr	r3, [pc, #20]	@ (8008330 <_svfiprintf_r+0x1f0>)
 800831a:	a904      	add	r1, sp, #16
 800831c:	4638      	mov	r0, r7
 800831e:	f000 f879 	bl	8008414 <_printf_i>
 8008322:	e7ed      	b.n	8008300 <_svfiprintf_r+0x1c0>
 8008324:	08008a4c 	.word	0x08008a4c
 8008328:	08008a56 	.word	0x08008a56
 800832c:	00000000 	.word	0x00000000
 8008330:	08008089 	.word	0x08008089
 8008334:	08008a52 	.word	0x08008a52

08008338 <_printf_common>:
 8008338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800833c:	4616      	mov	r6, r2
 800833e:	4698      	mov	r8, r3
 8008340:	688a      	ldr	r2, [r1, #8]
 8008342:	690b      	ldr	r3, [r1, #16]
 8008344:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008348:	4293      	cmp	r3, r2
 800834a:	bfb8      	it	lt
 800834c:	4613      	movlt	r3, r2
 800834e:	6033      	str	r3, [r6, #0]
 8008350:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008354:	4607      	mov	r7, r0
 8008356:	460c      	mov	r4, r1
 8008358:	b10a      	cbz	r2, 800835e <_printf_common+0x26>
 800835a:	3301      	adds	r3, #1
 800835c:	6033      	str	r3, [r6, #0]
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	0699      	lsls	r1, r3, #26
 8008362:	bf42      	ittt	mi
 8008364:	6833      	ldrmi	r3, [r6, #0]
 8008366:	3302      	addmi	r3, #2
 8008368:	6033      	strmi	r3, [r6, #0]
 800836a:	6825      	ldr	r5, [r4, #0]
 800836c:	f015 0506 	ands.w	r5, r5, #6
 8008370:	d106      	bne.n	8008380 <_printf_common+0x48>
 8008372:	f104 0a19 	add.w	sl, r4, #25
 8008376:	68e3      	ldr	r3, [r4, #12]
 8008378:	6832      	ldr	r2, [r6, #0]
 800837a:	1a9b      	subs	r3, r3, r2
 800837c:	42ab      	cmp	r3, r5
 800837e:	dc26      	bgt.n	80083ce <_printf_common+0x96>
 8008380:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008384:	6822      	ldr	r2, [r4, #0]
 8008386:	3b00      	subs	r3, #0
 8008388:	bf18      	it	ne
 800838a:	2301      	movne	r3, #1
 800838c:	0692      	lsls	r2, r2, #26
 800838e:	d42b      	bmi.n	80083e8 <_printf_common+0xb0>
 8008390:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008394:	4641      	mov	r1, r8
 8008396:	4638      	mov	r0, r7
 8008398:	47c8      	blx	r9
 800839a:	3001      	adds	r0, #1
 800839c:	d01e      	beq.n	80083dc <_printf_common+0xa4>
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	6922      	ldr	r2, [r4, #16]
 80083a2:	f003 0306 	and.w	r3, r3, #6
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	bf02      	ittt	eq
 80083aa:	68e5      	ldreq	r5, [r4, #12]
 80083ac:	6833      	ldreq	r3, [r6, #0]
 80083ae:	1aed      	subeq	r5, r5, r3
 80083b0:	68a3      	ldr	r3, [r4, #8]
 80083b2:	bf0c      	ite	eq
 80083b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083b8:	2500      	movne	r5, #0
 80083ba:	4293      	cmp	r3, r2
 80083bc:	bfc4      	itt	gt
 80083be:	1a9b      	subgt	r3, r3, r2
 80083c0:	18ed      	addgt	r5, r5, r3
 80083c2:	2600      	movs	r6, #0
 80083c4:	341a      	adds	r4, #26
 80083c6:	42b5      	cmp	r5, r6
 80083c8:	d11a      	bne.n	8008400 <_printf_common+0xc8>
 80083ca:	2000      	movs	r0, #0
 80083cc:	e008      	b.n	80083e0 <_printf_common+0xa8>
 80083ce:	2301      	movs	r3, #1
 80083d0:	4652      	mov	r2, sl
 80083d2:	4641      	mov	r1, r8
 80083d4:	4638      	mov	r0, r7
 80083d6:	47c8      	blx	r9
 80083d8:	3001      	adds	r0, #1
 80083da:	d103      	bne.n	80083e4 <_printf_common+0xac>
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e4:	3501      	adds	r5, #1
 80083e6:	e7c6      	b.n	8008376 <_printf_common+0x3e>
 80083e8:	18e1      	adds	r1, r4, r3
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	2030      	movs	r0, #48	@ 0x30
 80083ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083f2:	4422      	add	r2, r4
 80083f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083fc:	3302      	adds	r3, #2
 80083fe:	e7c7      	b.n	8008390 <_printf_common+0x58>
 8008400:	2301      	movs	r3, #1
 8008402:	4622      	mov	r2, r4
 8008404:	4641      	mov	r1, r8
 8008406:	4638      	mov	r0, r7
 8008408:	47c8      	blx	r9
 800840a:	3001      	adds	r0, #1
 800840c:	d0e6      	beq.n	80083dc <_printf_common+0xa4>
 800840e:	3601      	adds	r6, #1
 8008410:	e7d9      	b.n	80083c6 <_printf_common+0x8e>
	...

08008414 <_printf_i>:
 8008414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008418:	7e0f      	ldrb	r7, [r1, #24]
 800841a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800841c:	2f78      	cmp	r7, #120	@ 0x78
 800841e:	4691      	mov	r9, r2
 8008420:	4680      	mov	r8, r0
 8008422:	460c      	mov	r4, r1
 8008424:	469a      	mov	sl, r3
 8008426:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800842a:	d807      	bhi.n	800843c <_printf_i+0x28>
 800842c:	2f62      	cmp	r7, #98	@ 0x62
 800842e:	d80a      	bhi.n	8008446 <_printf_i+0x32>
 8008430:	2f00      	cmp	r7, #0
 8008432:	f000 80d2 	beq.w	80085da <_printf_i+0x1c6>
 8008436:	2f58      	cmp	r7, #88	@ 0x58
 8008438:	f000 80b9 	beq.w	80085ae <_printf_i+0x19a>
 800843c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008440:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008444:	e03a      	b.n	80084bc <_printf_i+0xa8>
 8008446:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800844a:	2b15      	cmp	r3, #21
 800844c:	d8f6      	bhi.n	800843c <_printf_i+0x28>
 800844e:	a101      	add	r1, pc, #4	@ (adr r1, 8008454 <_printf_i+0x40>)
 8008450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008454:	080084ad 	.word	0x080084ad
 8008458:	080084c1 	.word	0x080084c1
 800845c:	0800843d 	.word	0x0800843d
 8008460:	0800843d 	.word	0x0800843d
 8008464:	0800843d 	.word	0x0800843d
 8008468:	0800843d 	.word	0x0800843d
 800846c:	080084c1 	.word	0x080084c1
 8008470:	0800843d 	.word	0x0800843d
 8008474:	0800843d 	.word	0x0800843d
 8008478:	0800843d 	.word	0x0800843d
 800847c:	0800843d 	.word	0x0800843d
 8008480:	080085c1 	.word	0x080085c1
 8008484:	080084eb 	.word	0x080084eb
 8008488:	0800857b 	.word	0x0800857b
 800848c:	0800843d 	.word	0x0800843d
 8008490:	0800843d 	.word	0x0800843d
 8008494:	080085e3 	.word	0x080085e3
 8008498:	0800843d 	.word	0x0800843d
 800849c:	080084eb 	.word	0x080084eb
 80084a0:	0800843d 	.word	0x0800843d
 80084a4:	0800843d 	.word	0x0800843d
 80084a8:	08008583 	.word	0x08008583
 80084ac:	6833      	ldr	r3, [r6, #0]
 80084ae:	1d1a      	adds	r2, r3, #4
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6032      	str	r2, [r6, #0]
 80084b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084bc:	2301      	movs	r3, #1
 80084be:	e09d      	b.n	80085fc <_printf_i+0x1e8>
 80084c0:	6833      	ldr	r3, [r6, #0]
 80084c2:	6820      	ldr	r0, [r4, #0]
 80084c4:	1d19      	adds	r1, r3, #4
 80084c6:	6031      	str	r1, [r6, #0]
 80084c8:	0606      	lsls	r6, r0, #24
 80084ca:	d501      	bpl.n	80084d0 <_printf_i+0xbc>
 80084cc:	681d      	ldr	r5, [r3, #0]
 80084ce:	e003      	b.n	80084d8 <_printf_i+0xc4>
 80084d0:	0645      	lsls	r5, r0, #25
 80084d2:	d5fb      	bpl.n	80084cc <_printf_i+0xb8>
 80084d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084d8:	2d00      	cmp	r5, #0
 80084da:	da03      	bge.n	80084e4 <_printf_i+0xd0>
 80084dc:	232d      	movs	r3, #45	@ 0x2d
 80084de:	426d      	negs	r5, r5
 80084e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084e4:	4859      	ldr	r0, [pc, #356]	@ (800864c <_printf_i+0x238>)
 80084e6:	230a      	movs	r3, #10
 80084e8:	e011      	b.n	800850e <_printf_i+0xfa>
 80084ea:	6821      	ldr	r1, [r4, #0]
 80084ec:	6833      	ldr	r3, [r6, #0]
 80084ee:	0608      	lsls	r0, r1, #24
 80084f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80084f4:	d402      	bmi.n	80084fc <_printf_i+0xe8>
 80084f6:	0649      	lsls	r1, r1, #25
 80084f8:	bf48      	it	mi
 80084fa:	b2ad      	uxthmi	r5, r5
 80084fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80084fe:	4853      	ldr	r0, [pc, #332]	@ (800864c <_printf_i+0x238>)
 8008500:	6033      	str	r3, [r6, #0]
 8008502:	bf14      	ite	ne
 8008504:	230a      	movne	r3, #10
 8008506:	2308      	moveq	r3, #8
 8008508:	2100      	movs	r1, #0
 800850a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800850e:	6866      	ldr	r6, [r4, #4]
 8008510:	60a6      	str	r6, [r4, #8]
 8008512:	2e00      	cmp	r6, #0
 8008514:	bfa2      	ittt	ge
 8008516:	6821      	ldrge	r1, [r4, #0]
 8008518:	f021 0104 	bicge.w	r1, r1, #4
 800851c:	6021      	strge	r1, [r4, #0]
 800851e:	b90d      	cbnz	r5, 8008524 <_printf_i+0x110>
 8008520:	2e00      	cmp	r6, #0
 8008522:	d04b      	beq.n	80085bc <_printf_i+0x1a8>
 8008524:	4616      	mov	r6, r2
 8008526:	fbb5 f1f3 	udiv	r1, r5, r3
 800852a:	fb03 5711 	mls	r7, r3, r1, r5
 800852e:	5dc7      	ldrb	r7, [r0, r7]
 8008530:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008534:	462f      	mov	r7, r5
 8008536:	42bb      	cmp	r3, r7
 8008538:	460d      	mov	r5, r1
 800853a:	d9f4      	bls.n	8008526 <_printf_i+0x112>
 800853c:	2b08      	cmp	r3, #8
 800853e:	d10b      	bne.n	8008558 <_printf_i+0x144>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	07df      	lsls	r7, r3, #31
 8008544:	d508      	bpl.n	8008558 <_printf_i+0x144>
 8008546:	6923      	ldr	r3, [r4, #16]
 8008548:	6861      	ldr	r1, [r4, #4]
 800854a:	4299      	cmp	r1, r3
 800854c:	bfde      	ittt	le
 800854e:	2330      	movle	r3, #48	@ 0x30
 8008550:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008554:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008558:	1b92      	subs	r2, r2, r6
 800855a:	6122      	str	r2, [r4, #16]
 800855c:	f8cd a000 	str.w	sl, [sp]
 8008560:	464b      	mov	r3, r9
 8008562:	aa03      	add	r2, sp, #12
 8008564:	4621      	mov	r1, r4
 8008566:	4640      	mov	r0, r8
 8008568:	f7ff fee6 	bl	8008338 <_printf_common>
 800856c:	3001      	adds	r0, #1
 800856e:	d14a      	bne.n	8008606 <_printf_i+0x1f2>
 8008570:	f04f 30ff 	mov.w	r0, #4294967295
 8008574:	b004      	add	sp, #16
 8008576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	f043 0320 	orr.w	r3, r3, #32
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	4833      	ldr	r0, [pc, #204]	@ (8008650 <_printf_i+0x23c>)
 8008584:	2778      	movs	r7, #120	@ 0x78
 8008586:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	6831      	ldr	r1, [r6, #0]
 800858e:	061f      	lsls	r7, r3, #24
 8008590:	f851 5b04 	ldr.w	r5, [r1], #4
 8008594:	d402      	bmi.n	800859c <_printf_i+0x188>
 8008596:	065f      	lsls	r7, r3, #25
 8008598:	bf48      	it	mi
 800859a:	b2ad      	uxthmi	r5, r5
 800859c:	6031      	str	r1, [r6, #0]
 800859e:	07d9      	lsls	r1, r3, #31
 80085a0:	bf44      	itt	mi
 80085a2:	f043 0320 	orrmi.w	r3, r3, #32
 80085a6:	6023      	strmi	r3, [r4, #0]
 80085a8:	b11d      	cbz	r5, 80085b2 <_printf_i+0x19e>
 80085aa:	2310      	movs	r3, #16
 80085ac:	e7ac      	b.n	8008508 <_printf_i+0xf4>
 80085ae:	4827      	ldr	r0, [pc, #156]	@ (800864c <_printf_i+0x238>)
 80085b0:	e7e9      	b.n	8008586 <_printf_i+0x172>
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	f023 0320 	bic.w	r3, r3, #32
 80085b8:	6023      	str	r3, [r4, #0]
 80085ba:	e7f6      	b.n	80085aa <_printf_i+0x196>
 80085bc:	4616      	mov	r6, r2
 80085be:	e7bd      	b.n	800853c <_printf_i+0x128>
 80085c0:	6833      	ldr	r3, [r6, #0]
 80085c2:	6825      	ldr	r5, [r4, #0]
 80085c4:	6961      	ldr	r1, [r4, #20]
 80085c6:	1d18      	adds	r0, r3, #4
 80085c8:	6030      	str	r0, [r6, #0]
 80085ca:	062e      	lsls	r6, r5, #24
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	d501      	bpl.n	80085d4 <_printf_i+0x1c0>
 80085d0:	6019      	str	r1, [r3, #0]
 80085d2:	e002      	b.n	80085da <_printf_i+0x1c6>
 80085d4:	0668      	lsls	r0, r5, #25
 80085d6:	d5fb      	bpl.n	80085d0 <_printf_i+0x1bc>
 80085d8:	8019      	strh	r1, [r3, #0]
 80085da:	2300      	movs	r3, #0
 80085dc:	6123      	str	r3, [r4, #16]
 80085de:	4616      	mov	r6, r2
 80085e0:	e7bc      	b.n	800855c <_printf_i+0x148>
 80085e2:	6833      	ldr	r3, [r6, #0]
 80085e4:	1d1a      	adds	r2, r3, #4
 80085e6:	6032      	str	r2, [r6, #0]
 80085e8:	681e      	ldr	r6, [r3, #0]
 80085ea:	6862      	ldr	r2, [r4, #4]
 80085ec:	2100      	movs	r1, #0
 80085ee:	4630      	mov	r0, r6
 80085f0:	f7f7 fe2e 	bl	8000250 <memchr>
 80085f4:	b108      	cbz	r0, 80085fa <_printf_i+0x1e6>
 80085f6:	1b80      	subs	r0, r0, r6
 80085f8:	6060      	str	r0, [r4, #4]
 80085fa:	6863      	ldr	r3, [r4, #4]
 80085fc:	6123      	str	r3, [r4, #16]
 80085fe:	2300      	movs	r3, #0
 8008600:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008604:	e7aa      	b.n	800855c <_printf_i+0x148>
 8008606:	6923      	ldr	r3, [r4, #16]
 8008608:	4632      	mov	r2, r6
 800860a:	4649      	mov	r1, r9
 800860c:	4640      	mov	r0, r8
 800860e:	47d0      	blx	sl
 8008610:	3001      	adds	r0, #1
 8008612:	d0ad      	beq.n	8008570 <_printf_i+0x15c>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	079b      	lsls	r3, r3, #30
 8008618:	d413      	bmi.n	8008642 <_printf_i+0x22e>
 800861a:	68e0      	ldr	r0, [r4, #12]
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	4298      	cmp	r0, r3
 8008620:	bfb8      	it	lt
 8008622:	4618      	movlt	r0, r3
 8008624:	e7a6      	b.n	8008574 <_printf_i+0x160>
 8008626:	2301      	movs	r3, #1
 8008628:	4632      	mov	r2, r6
 800862a:	4649      	mov	r1, r9
 800862c:	4640      	mov	r0, r8
 800862e:	47d0      	blx	sl
 8008630:	3001      	adds	r0, #1
 8008632:	d09d      	beq.n	8008570 <_printf_i+0x15c>
 8008634:	3501      	adds	r5, #1
 8008636:	68e3      	ldr	r3, [r4, #12]
 8008638:	9903      	ldr	r1, [sp, #12]
 800863a:	1a5b      	subs	r3, r3, r1
 800863c:	42ab      	cmp	r3, r5
 800863e:	dcf2      	bgt.n	8008626 <_printf_i+0x212>
 8008640:	e7eb      	b.n	800861a <_printf_i+0x206>
 8008642:	2500      	movs	r5, #0
 8008644:	f104 0619 	add.w	r6, r4, #25
 8008648:	e7f5      	b.n	8008636 <_printf_i+0x222>
 800864a:	bf00      	nop
 800864c:	08008a5d 	.word	0x08008a5d
 8008650:	08008a6e 	.word	0x08008a6e

08008654 <memmove>:
 8008654:	4288      	cmp	r0, r1
 8008656:	b510      	push	{r4, lr}
 8008658:	eb01 0402 	add.w	r4, r1, r2
 800865c:	d902      	bls.n	8008664 <memmove+0x10>
 800865e:	4284      	cmp	r4, r0
 8008660:	4623      	mov	r3, r4
 8008662:	d807      	bhi.n	8008674 <memmove+0x20>
 8008664:	1e43      	subs	r3, r0, #1
 8008666:	42a1      	cmp	r1, r4
 8008668:	d008      	beq.n	800867c <memmove+0x28>
 800866a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800866e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008672:	e7f8      	b.n	8008666 <memmove+0x12>
 8008674:	4402      	add	r2, r0
 8008676:	4601      	mov	r1, r0
 8008678:	428a      	cmp	r2, r1
 800867a:	d100      	bne.n	800867e <memmove+0x2a>
 800867c:	bd10      	pop	{r4, pc}
 800867e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008686:	e7f7      	b.n	8008678 <memmove+0x24>

08008688 <_sbrk_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4d06      	ldr	r5, [pc, #24]	@ (80086a4 <_sbrk_r+0x1c>)
 800868c:	2300      	movs	r3, #0
 800868e:	4604      	mov	r4, r0
 8008690:	4608      	mov	r0, r1
 8008692:	602b      	str	r3, [r5, #0]
 8008694:	f7fa f8b4 	bl	8002800 <_sbrk>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d102      	bne.n	80086a2 <_sbrk_r+0x1a>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	b103      	cbz	r3, 80086a2 <_sbrk_r+0x1a>
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	200013a8 	.word	0x200013a8

080086a8 <memcpy>:
 80086a8:	440a      	add	r2, r1
 80086aa:	4291      	cmp	r1, r2
 80086ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80086b0:	d100      	bne.n	80086b4 <memcpy+0xc>
 80086b2:	4770      	bx	lr
 80086b4:	b510      	push	{r4, lr}
 80086b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086be:	4291      	cmp	r1, r2
 80086c0:	d1f9      	bne.n	80086b6 <memcpy+0xe>
 80086c2:	bd10      	pop	{r4, pc}

080086c4 <_realloc_r>:
 80086c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c8:	4680      	mov	r8, r0
 80086ca:	4615      	mov	r5, r2
 80086cc:	460c      	mov	r4, r1
 80086ce:	b921      	cbnz	r1, 80086da <_realloc_r+0x16>
 80086d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086d4:	4611      	mov	r1, r2
 80086d6:	f7ff bc4b 	b.w	8007f70 <_malloc_r>
 80086da:	b92a      	cbnz	r2, 80086e8 <_realloc_r+0x24>
 80086dc:	f7ff fbdc 	bl	8007e98 <_free_r>
 80086e0:	2400      	movs	r4, #0
 80086e2:	4620      	mov	r0, r4
 80086e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e8:	f000 f81a 	bl	8008720 <_malloc_usable_size_r>
 80086ec:	4285      	cmp	r5, r0
 80086ee:	4606      	mov	r6, r0
 80086f0:	d802      	bhi.n	80086f8 <_realloc_r+0x34>
 80086f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80086f6:	d8f4      	bhi.n	80086e2 <_realloc_r+0x1e>
 80086f8:	4629      	mov	r1, r5
 80086fa:	4640      	mov	r0, r8
 80086fc:	f7ff fc38 	bl	8007f70 <_malloc_r>
 8008700:	4607      	mov	r7, r0
 8008702:	2800      	cmp	r0, #0
 8008704:	d0ec      	beq.n	80086e0 <_realloc_r+0x1c>
 8008706:	42b5      	cmp	r5, r6
 8008708:	462a      	mov	r2, r5
 800870a:	4621      	mov	r1, r4
 800870c:	bf28      	it	cs
 800870e:	4632      	movcs	r2, r6
 8008710:	f7ff ffca 	bl	80086a8 <memcpy>
 8008714:	4621      	mov	r1, r4
 8008716:	4640      	mov	r0, r8
 8008718:	f7ff fbbe 	bl	8007e98 <_free_r>
 800871c:	463c      	mov	r4, r7
 800871e:	e7e0      	b.n	80086e2 <_realloc_r+0x1e>

08008720 <_malloc_usable_size_r>:
 8008720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008724:	1f18      	subs	r0, r3, #4
 8008726:	2b00      	cmp	r3, #0
 8008728:	bfbc      	itt	lt
 800872a:	580b      	ldrlt	r3, [r1, r0]
 800872c:	18c0      	addlt	r0, r0, r3
 800872e:	4770      	bx	lr

08008730 <_init>:
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	bf00      	nop
 8008734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008736:	bc08      	pop	{r3}
 8008738:	469e      	mov	lr, r3
 800873a:	4770      	bx	lr

0800873c <_fini>:
 800873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873e:	bf00      	nop
 8008740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008742:	bc08      	pop	{r3}
 8008744:	469e      	mov	lr, r3
 8008746:	4770      	bx	lr
