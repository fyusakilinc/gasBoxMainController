
gasBoxMasterv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08008b98  08008b98  00009b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e14  08008e14  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  08008e14  08008e14  00009e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e1c  08008e1c  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e1c  08008e1c  00009e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e20  08008e20  00009e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08008e24  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001354  20000064  08008e88  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b8  08008e88  0000a3b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c90  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a77  00000000  00000000  00021d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  000257a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b3  00000000  00000000  00026ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232f4  00000000  00000000  0002805b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da30  00000000  00000000  0004b34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dca78  00000000  00000000  00068d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001457f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063f8  00000000  00000000  0014583c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0014bc34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008b80 	.word	0x08008b80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08008b80 	.word	0x08008b80

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <hw_sero_get>:


// Serviceroutine Hadware Get
// Prueft im wesentlichen auf Harwarefehlersignale
void hw_sero_get(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <hw_sero_set>:

// Serviceroutine Hadware Set
// Verwaltet die Heartbeat LED
void hw_sero_set(void)
{	if (ct_hbeat_null()==1)
 80005ee:	b580      	push	{r7, lr}
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	f002 f8e7 	bl	80027c4 <ct_hbeat_null>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d109      	bne.n	8000610 <hw_sero_set+0x22>
	 { set_ct_hbeat(500);
 80005fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000600:	f002 f8d0 	bl	80027a4 <set_ct_hbeat>
	 HAL_GPIO_TogglePin(UC_HEARTBEAT_GPIO_Port, UC_HEARTBEAT_Pin);
 8000604:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060c:	f004 f968 	bl	80048e0 <HAL_GPIO_TogglePin>
	}
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <u_ok>:
void hw_set_error_out(uint8_t p)
{

}

uint8_t u_ok(GPIO_TypeDef *port, uint16_t pin) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
    GPIO_PinState s = HAL_GPIO_ReadPin(port, pin);
 8000620:	887b      	ldrh	r3, [r7, #2]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f004 f92b 	bl	8004880 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	73fb      	strb	r3, [r7, #15]
    return (s == GPIO_PIN_SET) ? 1u : 0u;
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d101      	bne.n	8000638 <u_ok+0x24>
 8000634:	2301      	movs	r3, #1
 8000636:	e000      	b.n	800063a <u_ok+0x26>
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <update_uok>:

uint8_t update_uok(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	uint8_t res1 = u_ok(UC__5VOK_GPIO_Port,UC__5VOK_Pin);
 800064a:	2110      	movs	r1, #16
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <update_uok+0x38>)
 800064e:	f7ff ffe1 	bl	8000614 <u_ok>
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	uint8_t res2 = u_ok(UC__12VOK_GPIO_Port,UC__12VOK_Pin);
 8000656:	2120      	movs	r1, #32
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <update_uok+0x38>)
 800065a:	f7ff ffdb 	bl	8000614 <u_ok>
 800065e:	4603      	mov	r3, r0
 8000660:	71bb      	strb	r3, [r7, #6]
	if((res1 && res2)){
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d004      	beq.n	8000672 <update_uok+0x2e>
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <update_uok+0x2e>
		return 1;
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <update_uok+0x30>
	}
	return 0;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	48000c00 	.word	0x48000c00

08000680 <readPumpWarning>:
                      set ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

// these two functions might just need a pulse

uint8_t readPumpWarning(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	GPIO_PinState s = HAL_GPIO_ReadPin(UC_PUMP_WARNING_GPIO_Port, UC_PUMP_WARNING_Pin);
 8000686:	2110      	movs	r1, #16
 8000688:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <readPumpWarning+0x28>)
 800068a:	f004 f8f9 	bl	8004880 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	return (s == GPIO_PIN_SET) ? 1u : 0u;
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d101      	bne.n	800069c <readPumpWarning+0x1c>
 8000698:	2301      	movs	r3, #1
 800069a:	e000      	b.n	800069e <readPumpWarning+0x1e>
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	48001000 	.word	0x48001000

080006ac <readPumpAlarm>:

uint8_t readPumpAlarm(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
	GPIO_PinState s = HAL_GPIO_ReadPin(UC_PUMP_ALARM_GPIO_Port, UC_PUMP_ALARM_Pin);
 80006b2:	2120      	movs	r1, #32
 80006b4:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <readPumpAlarm+0x28>)
 80006b6:	f004 f8e3 	bl	8004880 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	return (s == GPIO_PIN_SET) ? 1u : 0u;
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d101      	bne.n	80006c8 <readPumpAlarm+0x1c>
 80006c4:	2301      	movs	r3, #1
 80006c6:	e000      	b.n	80006ca <readPumpAlarm+0x1e>
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	48001000 	.word	0x48001000

080006d8 <delay_ms>:
	for(volatile uint32_t i=0; i<m; i++);				// volatile, damit nicht vom Compiler wegoptimiert
}

//Verz�gerung um n * 1ms
void delay_ms(uint16_t n)
{	HAL_Delay(n);
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fde5 	bl	80042b4 <HAL_Delay>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	@ 0x30
 80006f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	4b50      	ldr	r3, [pc, #320]	@ (800084c <MX_GPIO_Init+0x158>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	4a4f      	ldr	r2, [pc, #316]	@ (800084c <MX_GPIO_Init+0x158>)
 8000710:	f043 0310 	orr.w	r3, r3, #16
 8000714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000716:	4b4d      	ldr	r3, [pc, #308]	@ (800084c <MX_GPIO_Init+0x158>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	f003 0310 	and.w	r3, r3, #16
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000722:	4b4a      	ldr	r3, [pc, #296]	@ (800084c <MX_GPIO_Init+0x158>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a49      	ldr	r2, [pc, #292]	@ (800084c <MX_GPIO_Init+0x158>)
 8000728:	f043 0320 	orr.w	r3, r3, #32
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b47      	ldr	r3, [pc, #284]	@ (800084c <MX_GPIO_Init+0x158>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0320 	and.w	r3, r3, #32
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b44      	ldr	r3, [pc, #272]	@ (800084c <MX_GPIO_Init+0x158>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a43      	ldr	r2, [pc, #268]	@ (800084c <MX_GPIO_Init+0x158>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b41      	ldr	r3, [pc, #260]	@ (800084c <MX_GPIO_Init+0x158>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b3e      	ldr	r3, [pc, #248]	@ (800084c <MX_GPIO_Init+0x158>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a3d      	ldr	r2, [pc, #244]	@ (800084c <MX_GPIO_Init+0x158>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b3b      	ldr	r3, [pc, #236]	@ (800084c <MX_GPIO_Init+0x158>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b38      	ldr	r3, [pc, #224]	@ (800084c <MX_GPIO_Init+0x158>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	4a37      	ldr	r2, [pc, #220]	@ (800084c <MX_GPIO_Init+0x158>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000776:	4b35      	ldr	r3, [pc, #212]	@ (800084c <MX_GPIO_Init+0x158>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	4b32      	ldr	r3, [pc, #200]	@ (800084c <MX_GPIO_Init+0x158>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	4a31      	ldr	r2, [pc, #196]	@ (800084c <MX_GPIO_Init+0x158>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078e:	4b2f      	ldr	r3, [pc, #188]	@ (800084c <MX_GPIO_Init+0x158>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, UC_PUMP_START_Pin|UC_PUMP_STOP_Pin|UC_PUMP_REMOTE_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	214c      	movs	r1, #76	@ 0x4c
 800079e:	482c      	ldr	r0, [pc, #176]	@ (8000850 <MX_GPIO_Init+0x15c>)
 80007a0:	f004 f886 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UC_CS_SPS_OUT_Pin|UC_CS_SPS_IN_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2106      	movs	r1, #6
 80007a8:	482a      	ldr	r0, [pc, #168]	@ (8000854 <MX_GPIO_Init+0x160>)
 80007aa:	f004 f881 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UC_HEARTBEAT_GPIO_Port, UC_HEARTBEAT_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b8:	f004 f87a 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = UC_PUMP_START_Pin|UC_PUMP_STOP_Pin|UC_PUMP_REMOTE_Pin;
 80007bc:	234c      	movs	r3, #76	@ 0x4c
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	481f      	ldr	r0, [pc, #124]	@ (8000850 <MX_GPIO_Init+0x15c>)
 80007d4:	f003 fed2 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = UC_PUMP_WARNING_Pin|UC_PUMP_ALARM_Pin;
 80007d8:	2330      	movs	r3, #48	@ 0x30
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	4819      	ldr	r0, [pc, #100]	@ (8000850 <MX_GPIO_Init+0x15c>)
 80007ec:	f003 fec6 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UC_CS_SPS_OUT_Pin|UC_CS_SPS_IN_Pin;
 80007f0:	2306      	movs	r3, #6
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4813      	ldr	r0, [pc, #76]	@ (8000854 <MX_GPIO_Init+0x160>)
 8000808:	f003 feb8 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UC_HEARTBEAT_Pin;
 800080c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UC_HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000828:	f003 fea8 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = UC__5VOK_Pin|UC__12VOK_Pin;
 800082c:	2330      	movs	r3, #48	@ 0x30
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	@ (8000858 <MX_GPIO_Init+0x164>)
 8000840:	f003 fe9c 	bl	800457c <HAL_GPIO_Init>

}
 8000844:	bf00      	nop
 8000846:	3730      	adds	r7, #48	@ 0x30
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	48001000 	.word	0x48001000
 8000854:	48000400 	.word	0x48000400
 8000858:	48000c00 	.word	0x48000c00

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000860:	f003 fcb7 	bl	80041d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000864:	f000 f832 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000868:	f7ff ff44 	bl	80006f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800086c:	f001 fbd0 	bl	8002010 <MX_SPI1_Init>
  MX_UART4_Init();
 8000870:	f002 f9be 	bl	8002bf0 <MX_UART4_Init>
  MX_UART5_Init();
 8000874:	f002 fa08 	bl	8002c88 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000878:	f002 fa52 	bl	8002d20 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800087c:	f002 fa9c 	bl	8002db8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000880:	f002 fae8 	bl	8002e54 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000884:	f001 ff04 	bl	8002690 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //--- Stacks fuer die Anfragen an Zentrale und MatchingCube vorbereiten ------
  priolist_init();
 8000888:	f000 f950 	bl	8000b2c <priolist_init>
  stacks_init();
 800088c:	f001 fc40 	bl	8002110 <stacks_init>
  //--- Ergbenissstack fuer die Antworten von Zentrale und MatchingCube vorbereiten -------
  resultQueue_init();
 8000890:	f001 fae0 	bl	8001e54 <resultQueue_init>
  uart_initAll();
 8000894:	f002 f814 	bl	80028c0 <uart_initAll>
  remote_init();
 8000898:	f000 f9b0 	bl	8000bfc <remote_init>
  zentrale_init();
 800089c:	f002 fce2 	bl	8003264 <zentrale_init>

  delay_ms(500);
 80008a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008a4:	f7ff ff18 	bl	80006d8 <delay_ms>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hw_sero_get();
 80008a8:	f7ff fe9a 	bl	80005e0 <hw_sero_get>
	  remote_sero_get();
 80008ac:	f000 f9de 	bl	8000c6c <remote_sero_get>
	  gb_sero_get();
 80008b0:	f000 fa0c 	bl	8000ccc <gb_sero_get>
	  result_get_sero();
 80008b4:	f001 fb80 	bl	8001fb8 <result_get_sero>

	  zentrale();
 80008b8:	f002 fd1a 	bl	80032f0 <zentrale>

		hw_sero_set();
 80008bc:	f7ff fe97 	bl	80005ee <hw_sero_set>
		z_cmd_scheduler();
 80008c0:	f003 fa06 	bl	8003cd0 <z_cmd_scheduler>
		result_get_sero();
 80008c4:	f001 fb78 	bl	8001fb8 <result_get_sero>
	  hw_sero_get();
 80008c8:	bf00      	nop
 80008ca:	e7ed      	b.n	80008a8 <main+0x4c>

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	@ 0x50
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0318 	add.w	r3, r7, #24
 80008d6:	2238      	movs	r2, #56	@ 0x38
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f007 fcc0 	bl	8008260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f004 f810 	bl	8004914 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008fc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	2303      	movs	r3, #3
 8000904:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000906:	2301      	movs	r3, #1
 8000908:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800090a:	2328      	movs	r3, #40	@ 0x28
 800090c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090e:	2302      	movs	r3, #2
 8000910:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000912:	2302      	movs	r3, #2
 8000914:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0318 	add.w	r3, r7, #24
 800091e:	4618      	mov	r0, r3
 8000920:	f004 f8ac 	bl	8004a7c <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800092a:	f000 f818 	bl	800095e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	230f      	movs	r3, #15
 8000930:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	2303      	movs	r3, #3
 8000934:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2104      	movs	r1, #4
 8000946:	4618      	mov	r0, r3
 8000948:	f004 fbaa 	bl	80050a0 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000952:	f000 f804 	bl	800095e <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3750      	adds	r7, #80	@ 0x50
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000962:	b672      	cpsid	i
}
 8000964:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000966:	bf00      	nop
 8000968:	e7fd      	b.n	8000966 <Error_Handler+0x8>

0800096a <priolist_push>:
uint8_t priolist_pop (priority_item prio_list[], uint8_t priolevel_header[], uint8_t *firstunused, uint8_t priolevel_data);


//--------------FUNKTIONSDEFINITIONS----------------------------
uint8_t priolist_push (priority_item prio_list[], uint8_t priolist_length,  uint8_t priolevel_header[], uint8_t *firstunused, uint8_t stack_index, uint8_t priolevel_data)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b088      	sub	sp, #32
 800096e:	af02      	add	r7, sp, #8
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	607a      	str	r2, [r7, #4]
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	460b      	mov	r3, r1
 8000978:	72fb      	strb	r3, [r7, #11]

	uint8_t flag = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	75fb      	strb	r3, [r7, #23]

	if (*firstunused == NONEXT )            //wenn es keinen freien Platz in der prio_list gibt,
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2bff      	cmp	r3, #255	@ 0xff
 8000984:	d102      	bne.n	800098c <priolist_push+0x22>
	{
		flag = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	75fb      	strb	r3, [r7, #23]
 800098a:	e034      	b.n	80009f6 <priolist_push+0x8c>
	}
	else
	{
		switch (priolevel_data)
 800098c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000990:	2b02      	cmp	r3, #2
 8000992:	d022      	beq.n	80009da <priolist_push+0x70>
 8000994:	2b02      	cmp	r3, #2
 8000996:	dc2e      	bgt.n	80009f6 <priolist_push+0x8c>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <priolist_push+0x38>
 800099c:	2b01      	cmp	r3, #1
 800099e:	d00e      	beq.n	80009be <priolist_push+0x54>
 80009a0:	e029      	b.n	80009f6 <priolist_push+0x8c>
		{
			case  PRIO_LEVEL0:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL0);
 80009a2:	7af9      	ldrb	r1, [r7, #11]
 80009a4:	2300      	movs	r3, #0
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f000 f824 	bl	8000a00 <priolist_node_insert>
			flag = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	75fb      	strb	r3, [r7, #23]
			break;
 80009bc:	e01b      	b.n	80009f6 <priolist_push+0x8c>
			case  PRIO_LEVEL1:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL1);
 80009be:	7af9      	ldrb	r1, [r7, #11]
 80009c0:	2301      	movs	r3, #1
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f000 f816 	bl	8000a00 <priolist_node_insert>
			flag = 1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	75fb      	strb	r3, [r7, #23]
			break;
 80009d8:	e00d      	b.n	80009f6 <priolist_push+0x8c>
			case  PRIO_LEVEL2:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL2);
 80009da:	7af9      	ldrb	r1, [r7, #11]
 80009dc:	2302      	movs	r3, #2
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f000 f808 	bl	8000a00 <priolist_node_insert>
			flag = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	75fb      	strb	r3, [r7, #23]
			break;
 80009f4:	bf00      	nop
		};
	};
	return flag;
 80009f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <priolist_node_insert>:

void priolist_node_insert(priority_item prio_list[], uint8_t priolist_length,  uint8_t priolevel_header[], uint8_t *unused_list, uint8_t stackindex, uint8_t priolevel)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	72fb      	strb	r3, [r7, #11]
	uint8_t act_index ;
	uint8_t last;

	act_index = *unused_list;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	75bb      	strb	r3, [r7, #22]
	*unused_list = prio_list[act_index].next;
 8000a16:	7dbb      	ldrb	r3, [r7, #22]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	785a      	ldrb	r2, [r3, #1]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	701a      	strb	r2, [r3, #0]
	if (priolevel_header[priolevel] == NONEXT)                //Wenn die Prioritätsliste mit dem Level0 noch leer ist,
 8000a24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2bff      	cmp	r3, #255	@ 0xff
 8000a30:	d112      	bne.n	8000a58 <priolist_node_insert+0x58>
	{

		prio_list[act_index].stackindex = stackindex;
 8000a32:	7dbb      	ldrb	r3, [r7, #22]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	4413      	add	r3, r2
 8000a3a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a3e:	701a      	strb	r2, [r3, #0]
		priolevel_header[priolevel] = act_index;
 8000a40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	4413      	add	r3, r2
 8000a48:	7dba      	ldrb	r2, [r7, #22]
 8000a4a:	701a      	strb	r2, [r3, #0]
		prio_list[act_index].next = NONEXT;
 8000a4c:	7dbb      	ldrb	r3, [r7, #22]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	4413      	add	r3, r2
 8000a54:	22ff      	movs	r2, #255	@ 0xff
 8000a56:	705a      	strb	r2, [r3, #1]
	};
	if (priolevel_header[priolevel] < priolist_length)    //Wenn die Prioritätsliste schon existiert,
 8000a58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	7afa      	ldrb	r2, [r7, #11]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d926      	bls.n	8000ab6 <priolist_node_insert+0xb6>
	{
		prio_list[act_index].stackindex = stackindex;
 8000a68:	7dbb      	ldrb	r3, [r7, #22]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	4413      	add	r3, r2
 8000a70:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a74:	701a      	strb	r2, [r3, #0]
		last =  priolevel_header[priolevel];                  //das erste Element der Prioritätsliste
 8000a76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	75fb      	strb	r3, [r7, #23]
		while (prio_list[last].next != NONEXT)               //Suche den Ende der Prioritätsliste, um das neue Element hineinzufügen
 8000a82:	e005      	b.n	8000a90 <priolist_node_insert+0x90>
		{
			last = prio_list[last].next;
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	785b      	ldrb	r3, [r3, #1]
 8000a8e:	75fb      	strb	r3, [r7, #23]
		while (prio_list[last].next != NONEXT)               //Suche den Ende der Prioritätsliste, um das neue Element hineinzufügen
 8000a90:	7dfb      	ldrb	r3, [r7, #23]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	785b      	ldrb	r3, [r3, #1]
 8000a9a:	2bff      	cmp	r3, #255	@ 0xff
 8000a9c:	d1f2      	bne.n	8000a84 <priolist_node_insert+0x84>
		};
		prio_list[last].next = act_index;
 8000a9e:	7dfb      	ldrb	r3, [r7, #23]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	7dba      	ldrb	r2, [r7, #22]
 8000aa8:	705a      	strb	r2, [r3, #1]
		prio_list[act_index].next = NONEXT;
 8000aaa:	7dbb      	ldrb	r3, [r7, #22]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	22ff      	movs	r2, #255	@ 0xff
 8000ab4:	705a      	strb	r2, [r3, #1]
	};
}
 8000ab6:	bf00      	nop
 8000ab8:	371c      	adds	r7, #28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <priolist_pop>:

uint8_t priolist_pop (priority_item prio_list[], uint8_t priolevel_header[], uint8_t *firstunused, uint8_t priolevel_data)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b087      	sub	sp, #28
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	70fb      	strb	r3, [r7, #3]
	uint8_t stack_index = NONEXT ;  //ungültige Wert, wenn die Prioritätsliste noch leer oder ein Fehler
 8000ad0:	23ff      	movs	r3, #255	@ 0xff
 8000ad2:	75fb      	strb	r3, [r7, #23]

	if (priolevel_header[priolevel_data] != NONEXT)
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2bff      	cmp	r3, #255	@ 0xff
 8000ade:	d01d      	beq.n	8000b1c <priolist_pop+0x5a>
	{
		uint8_t act_index = priolevel_header[priolevel_data];
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	75bb      	strb	r3, [r7, #22]
		stack_index = prio_list[act_index].stackindex;
 8000aea:	7dbb      	ldrb	r3, [r7, #22]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	4413      	add	r3, r2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	75fb      	strb	r3, [r7, #23]
		priolevel_header[priolevel_data] = prio_list[act_index].next;
 8000af6:	7dbb      	ldrb	r3, [r7, #22]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	441a      	add	r2, r3
 8000afe:	78fb      	ldrb	r3, [r7, #3]
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	440b      	add	r3, r1
 8000b04:	7852      	ldrb	r2, [r2, #1]
 8000b06:	701a      	strb	r2, [r3, #0]

		prio_list[act_index].next = *firstunused;
 8000b08:	7dbb      	ldrb	r3, [r7, #22]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	7812      	ldrb	r2, [r2, #0]
 8000b14:	705a      	strb	r2, [r3, #1]
		*firstunused = act_index;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	7dba      	ldrb	r2, [r7, #22]
 8000b1a:	701a      	strb	r2, [r3, #0]
	};

	return stack_index;
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	371c      	adds	r7, #28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <priolist_init>:
//--------------FUNKTIONSDEKLARATIONS----------------------------------------------------------------------------------------
void priolist_init(void);

//--------------FUNKTIONSDEFINITIONS-----------------------------------------------------------------------------------------
void priolist_init(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	71fb      	strb	r3, [r7, #7]

	zpriolist_firstunused_index = 0;         //der gültige Wert liegt zwischen 0 und (Z_STACK_SIZE-1); wenn = NONEXT, d.h. keinen freien Platz in der Prioliste.
 8000b36:	4b2b      	ldr	r3, [pc, #172]	@ (8000be4 <priolist_init+0xb8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
	mcpriolist_firstunused_index = 0;		//der Wert liegt zwischen 0 und (MC_STACK_SIZE-1)
 8000b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <priolist_init+0xbc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]

	for (i = 0;  i < PRIO_LEVELS; i++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	e00a      	b.n	8000b5e <priolist_init+0x32>
	{
		z_priolevel_header[i] = NONEXT;    //d.h. es gibt noch keinen Befehl in der i-te. Prioritätsliste.
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	4a28      	ldr	r2, [pc, #160]	@ (8000bec <priolist_init+0xc0>)
 8000b4c:	21ff      	movs	r1, #255	@ 0xff
 8000b4e:	54d1      	strb	r1, [r2, r3]

		mc_priolevel_header[i] = NONEXT;
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	4a27      	ldr	r2, [pc, #156]	@ (8000bf0 <priolist_init+0xc4>)
 8000b54:	21ff      	movs	r1, #255	@ 0xff
 8000b56:	54d1      	strb	r1, [r2, r3]
	for (i = 0;  i < PRIO_LEVELS; i++)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	71fb      	strb	r3, [r7, #7]
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d9f1      	bls.n	8000b48 <priolist_init+0x1c>

	}

	for ( i= 0; i < Z_STACK_SIZE; i++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	e015      	b.n	8000b96 <priolist_init+0x6a>
	{
		if (i == (Z_STACK_SIZE-1) )
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b1d      	cmp	r3, #29
 8000b6e:	d106      	bne.n	8000b7e <priolist_init+0x52>
		{
			z_priolist[i].next = NONEXT;
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4a20      	ldr	r2, [pc, #128]	@ (8000bf4 <priolist_init+0xc8>)
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4413      	add	r3, r2
 8000b78:	22ff      	movs	r2, #255	@ 0xff
 8000b7a:	705a      	strb	r2, [r3, #1]
 8000b7c:	e008      	b.n	8000b90 <priolist_init+0x64>
		}
		else
		{
			z_priolist[i].next = i+1;
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	79fa      	ldrb	r2, [r7, #7]
 8000b82:	3201      	adds	r2, #1
 8000b84:	b2d1      	uxtb	r1, r2
 8000b86:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf4 <priolist_init+0xc8>)
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	4413      	add	r3, r2
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	705a      	strb	r2, [r3, #1]
	for ( i= 0; i < Z_STACK_SIZE; i++)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	3301      	adds	r3, #1
 8000b94:	71fb      	strb	r3, [r7, #7]
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b1d      	cmp	r3, #29
 8000b9a:	d9e6      	bls.n	8000b6a <priolist_init+0x3e>
		};
	};

	for ( i= 0; i < MC_STACK_SIZE; i++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	e015      	b.n	8000bce <priolist_init+0xa2>
	{
		if (i == (MC_STACK_SIZE-1) )
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b13      	cmp	r3, #19
 8000ba6:	d106      	bne.n	8000bb6 <priolist_init+0x8a>
		{
			mc_priolist[i].next = NONEXT;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	4a13      	ldr	r2, [pc, #76]	@ (8000bf8 <priolist_init+0xcc>)
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4413      	add	r3, r2
 8000bb0:	22ff      	movs	r2, #255	@ 0xff
 8000bb2:	705a      	strb	r2, [r3, #1]
 8000bb4:	e008      	b.n	8000bc8 <priolist_init+0x9c>
		}
		else
		{
			mc_priolist[i].next = i+1;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	79fa      	ldrb	r2, [r7, #7]
 8000bba:	3201      	adds	r2, #1
 8000bbc:	b2d1      	uxtb	r1, r2
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf8 <priolist_init+0xcc>)
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	705a      	strb	r2, [r3, #1]
	for ( i= 0; i < MC_STACK_SIZE; i++)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	71fb      	strb	r3, [r7, #7]
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b13      	cmp	r3, #19
 8000bd2:	d9e6      	bls.n	8000ba2 <priolist_init+0x76>
		};
	};
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200000eb 	.word	0x200000eb
 8000be8:	200000ec 	.word	0x200000ec
 8000bec:	200000e4 	.word	0x200000e4
 8000bf0:	200000e8 	.word	0x200000e8
 8000bf4:	20000080 	.word	0x20000080
 8000bf8:	200000bc 	.word	0x200000bc

08000bfc <remote_init>:
void output_ascii(int32_t);
void Binary_Search(uint8_t ncmd, char* key, uint16_t *cmdindex);
void output_ascii_cmdack(uint8_t verbose_flg, uint8_t crlf_flg, uint8_t cmd_ack);

// ---- public API ----
void remote_init(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	nzeichen = 0;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <remote_init+0x4c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
	state = RMT_WAIT_FOR_PAKET_START;
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <remote_init+0x50>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
	lengthRx = 0;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <remote_init+0x54>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
	dleFlag = 0;
 8000c12:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <remote_init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <remote_init+0x5c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
	reply_ready = 0;
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <remote_init+0x60>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
	memset((void*) msg, 0, sizeof(msg));
 8000c24:	220f      	movs	r2, #15
 8000c26:	2100      	movs	r1, #0
 8000c28:	480d      	ldr	r0, [pc, #52]	@ (8000c60 <remote_init+0x64>)
 8000c2a:	f007 fb19 	bl	8008260 <memset>
	memset(bufferRx, 0, sizeof(bufferRx));
 8000c2e:	220f      	movs	r2, #15
 8000c30:	2100      	movs	r1, #0
 8000c32:	480c      	ldr	r0, [pc, #48]	@ (8000c64 <remote_init+0x68>)
 8000c34:	f007 fb14 	bl	8008260 <memset>
	memset(&last_reply, 0, sizeof(last_reply));
 8000c38:	2204      	movs	r2, #4
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <remote_init+0x6c>)
 8000c3e:	f007 fb0f 	bl	8008260 <memset>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000103 	.word	0x20000103
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000113 	.word	0x20000113
 8000c54:	20000114 	.word	0x20000114
 8000c58:	20000115 	.word	0x20000115
 8000c5c:	20000116 	.word	0x20000116
 8000c60:	200000f4 	.word	0x200000f4
 8000c64:	20000104 	.word	0x20000104
 8000c68:	20000118 	.word	0x20000118

08000c6c <remote_sero_get>:

// Pull bytes from UART4 RX ring into msg[] and feed parser
void remote_sero_get(void)
{
 8000c6c:	b598      	push	{r3, r4, r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	nzeichen = 0;
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <remote_sero_get+0x54>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
	while ((rb_rx_used(&usart3_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8000c76:	e00e      	b.n	8000c96 <remote_sero_get+0x2a>
		msg[nzeichen++] = (uint8_t) uartRB_Getc(&usart3_rb);   // legacy getc()
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <remote_sero_get+0x54>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	b2d1      	uxtb	r1, r2
 8000c82:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc0 <remote_sero_get+0x54>)
 8000c84:	7011      	strb	r1, [r2, #0]
 8000c86:	461c      	mov	r4, r3
 8000c88:	480e      	ldr	r0, [pc, #56]	@ (8000cc4 <remote_sero_get+0x58>)
 8000c8a:	f001 ff83 	bl	8002b94 <uartRB_Getc>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <remote_sero_get+0x5c>)
 8000c94:	551a      	strb	r2, [r3, r4]
	while ((rb_rx_used(&usart3_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8000c96:	480b      	ldr	r0, [pc, #44]	@ (8000cc4 <remote_sero_get+0x58>)
 8000c98:	f001 febb 	bl	8002a12 <rb_rx_used>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	dd04      	ble.n	8000cac <remote_sero_get+0x40>
 8000ca2:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <remote_sero_get+0x54>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b0d      	cmp	r3, #13
 8000caa:	d9e5      	bls.n	8000c78 <remote_sero_get+0xc>
	}
	if (nzeichen) parse_ascii();
 8000cac:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <remote_sero_get+0x54>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <remote_sero_get+0x4e>
 8000cb6:	f000 f94d 	bl	8000f54 <parse_ascii>
}
 8000cba:	bf00      	nop
 8000cbc:	bd98      	pop	{r3, r4, r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000103 	.word	0x20000103
 8000cc4:	20000dcc 	.word	0x20000dcc
 8000cc8:	200000f4 	.word	0x200000f4

08000ccc <gb_sero_get>:

// Gasbox (UART4, binary)
void gb_sero_get(void)
{
 8000ccc:	b598      	push	{r3, r4, r7, lr}
 8000cce:	af00      	add	r7, sp, #0
    nzeichen = 0;
 8000cd0:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <gb_sero_get+0x54>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
    while ((rb_rx_used(&uart4_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8000cd6:	e00e      	b.n	8000cf6 <gb_sero_get+0x2a>
        msg[nzeichen++] = (uint8_t)uartRB_Getc(&uart4_rb);
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <gb_sero_get+0x54>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	b2d1      	uxtb	r1, r2
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d20 <gb_sero_get+0x54>)
 8000ce4:	7011      	strb	r1, [r2, #0]
 8000ce6:	461c      	mov	r4, r3
 8000ce8:	480e      	ldr	r0, [pc, #56]	@ (8000d24 <gb_sero_get+0x58>)
 8000cea:	f001 ff53 	bl	8002b94 <uartRB_Getc>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <gb_sero_get+0x5c>)
 8000cf4:	551a      	strb	r2, [r3, r4]
    while ((rb_rx_used(&uart4_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8000cf6:	480b      	ldr	r0, [pc, #44]	@ (8000d24 <gb_sero_get+0x58>)
 8000cf8:	f001 fe8b 	bl	8002a12 <rb_rx_used>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	dd04      	ble.n	8000d0c <gb_sero_get+0x40>
 8000d02:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <gb_sero_get+0x54>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b0d      	cmp	r3, #13
 8000d0a:	d9e5      	bls.n	8000cd8 <gb_sero_get+0xc>
    }
    if (nzeichen) parse_binary();
 8000d0c:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <gb_sero_get+0x54>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <gb_sero_get+0x4e>
 8000d16:	f000 f809 	bl	8000d2c <parse_binary>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd98      	pop	{r3, r4, r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000103 	.word	0x20000103
 8000d24:	2000091c 	.word	0x2000091c
 8000d28:	200000f4 	.word	0x200000f4

08000d2c <parse_binary>:
	reply_ready = 0;
	return true;
}

// ---- parser  ----
static void parse_binary(void) {
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
	uint8_t data;
	uint8_t ptr = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	71fb      	strb	r3, [r7, #7]

	do {
		switch (state) {
 8000d36:	4b7e      	ldr	r3, [pc, #504]	@ (8000f30 <parse_binary+0x204>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	f000 80a8 	beq.w	8000e90 <parse_binary+0x164>
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	f300 80e6 	bgt.w	8000f12 <parse_binary+0x1e6>
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d030      	beq.n	8000dac <parse_binary+0x80>
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	f000 8098 	beq.w	8000e80 <parse_binary+0x154>
 8000d50:	e0df      	b.n	8000f12 <parse_binary+0x1e6>
		case RMT_WAIT_FOR_PAKET_START: {
			// scan for DLE 'S'
			while (ptr < nzeichen) {
				data = msg[ptr++];
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	71fa      	strb	r2, [r7, #7]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b76      	ldr	r3, [pc, #472]	@ (8000f34 <parse_binary+0x208>)
 8000d5c:	5c9b      	ldrb	r3, [r3, r2]
 8000d5e:	703b      	strb	r3, [r7, #0]
				if (dleFlag) {
 8000d60:	4b75      	ldr	r3, [pc, #468]	@ (8000f38 <parse_binary+0x20c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d01b      	beq.n	8000da0 <parse_binary+0x74>
					// second control char after DLE
					if (data == RMT_DLE) {
 8000d68:	783b      	ldrb	r3, [r7, #0]
 8000d6a:	2b3d      	cmp	r3, #61	@ 0x3d
 8000d6c:	d103      	bne.n	8000d76 <parse_binary+0x4a>
						// interpret as literal DLE
						dleFlag = 0;
 8000d6e:	4b72      	ldr	r3, [pc, #456]	@ (8000f38 <parse_binary+0x20c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
 8000d74:	e01a      	b.n	8000dac <parse_binary+0x80>
						// (no payload yet in WAIT state)
					} else if (data == RMT_SOT) {
 8000d76:	783b      	ldrb	r3, [r7, #0]
 8000d78:	2b53      	cmp	r3, #83	@ 0x53
 8000d7a:	d10d      	bne.n	8000d98 <parse_binary+0x6c>
						// start of frame
						lengthRx = 0;
 8000d7c:	4b6f      	ldr	r3, [pc, #444]	@ (8000f3c <parse_binary+0x210>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
						checksum = 0;
 8000d82:	4b6f      	ldr	r3, [pc, #444]	@ (8000f40 <parse_binary+0x214>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000d88:	4b6b      	ldr	r3, [pc, #428]	@ (8000f38 <parse_binary+0x20c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
						state = RMT_READ_PAKET;
 8000d8e:	4b68      	ldr	r3, [pc, #416]	@ (8000f30 <parse_binary+0x204>)
 8000d90:	2202      	movs	r2, #2
 8000d92:	701a      	strb	r2, [r3, #0]
						break;
 8000d94:	bf00      	nop
					if (data == RMT_DLE)
						dleFlag = 1;
				}
			}
		}
			break;
 8000d96:	e0bc      	b.n	8000f12 <parse_binary+0x1e6>
						dleFlag = 0;
 8000d98:	4b67      	ldr	r3, [pc, #412]	@ (8000f38 <parse_binary+0x20c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e005      	b.n	8000dac <parse_binary+0x80>
					if (data == RMT_DLE)
 8000da0:	783b      	ldrb	r3, [r7, #0]
 8000da2:	2b3d      	cmp	r3, #61	@ 0x3d
 8000da4:	d102      	bne.n	8000dac <parse_binary+0x80>
						dleFlag = 1;
 8000da6:	4b64      	ldr	r3, [pc, #400]	@ (8000f38 <parse_binary+0x20c>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
			while (ptr < nzeichen) {
 8000dac:	4b65      	ldr	r3, [pc, #404]	@ (8000f44 <parse_binary+0x218>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	79fa      	ldrb	r2, [r7, #7]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d3cc      	bcc.n	8000d52 <parse_binary+0x26>
			break;
 8000db8:	e0ab      	b.n	8000f12 <parse_binary+0x1e6>

		case RMT_READ_PAKET: {
			while (ptr < nzeichen) {
				data = msg[ptr++];
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	71fa      	strb	r2, [r7, #7]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f34 <parse_binary+0x208>)
 8000dc4:	5c9b      	ldrb	r3, [r3, r2]
 8000dc6:	703b      	strb	r3, [r7, #0]

				// avoid runaway frames
				if (lengthRx > RMT_MAX_PAKET_LENGTH) {
 8000dc8:	4b5c      	ldr	r3, [pc, #368]	@ (8000f3c <parse_binary+0x210>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b0e      	cmp	r3, #14
 8000dce:	d906      	bls.n	8000dde <parse_binary+0xb2>
					dleFlag = 0;
 8000dd0:	4b59      	ldr	r3, [pc, #356]	@ (8000f38 <parse_binary+0x20c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
					state = RMT_WAIT_FOR_PAKET_START;
 8000dd6:	4b56      	ldr	r3, [pc, #344]	@ (8000f30 <parse_binary+0x204>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
					break;
 8000ddc:	e057      	b.n	8000e8e <parse_binary+0x162>
				}

				if (dleFlag) {
 8000dde:	4b56      	ldr	r3, [pc, #344]	@ (8000f38 <parse_binary+0x20c>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d034      	beq.n	8000e50 <parse_binary+0x124>
					if (data == RMT_DLE) {
 8000de6:	783b      	ldrb	r3, [r7, #0]
 8000de8:	2b3d      	cmp	r3, #61	@ 0x3d
 8000dea:	d113      	bne.n	8000e14 <parse_binary+0xe8>
						// stuffed DLE as data
						dleFlag = 0;
 8000dec:	4b52      	ldr	r3, [pc, #328]	@ (8000f38 <parse_binary+0x20c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
						bufferRx[lengthRx++] = RMT_DLE;
 8000df2:	4b52      	ldr	r3, [pc, #328]	@ (8000f3c <parse_binary+0x210>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	b2d1      	uxtb	r1, r2
 8000dfa:	4a50      	ldr	r2, [pc, #320]	@ (8000f3c <parse_binary+0x210>)
 8000dfc:	7011      	strb	r1, [r2, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b51      	ldr	r3, [pc, #324]	@ (8000f48 <parse_binary+0x21c>)
 8000e02:	213d      	movs	r1, #61	@ 0x3d
 8000e04:	5499      	strb	r1, [r3, r2]
						checksum += RMT_DLE;
 8000e06:	4b4e      	ldr	r3, [pc, #312]	@ (8000f40 <parse_binary+0x214>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	333d      	adds	r3, #61	@ 0x3d
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f40 <parse_binary+0x214>)
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	e035      	b.n	8000e80 <parse_binary+0x154>
					} else if (data == RMT_SOT) {
 8000e14:	783b      	ldrb	r3, [r7, #0]
 8000e16:	2b53      	cmp	r3, #83	@ 0x53
 8000e18:	d10c      	bne.n	8000e34 <parse_binary+0x108>
						// unexpected new start → restart frame
						lengthRx = 0;
 8000e1a:	4b48      	ldr	r3, [pc, #288]	@ (8000f3c <parse_binary+0x210>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
						checksum = 0;
 8000e20:	4b47      	ldr	r3, [pc, #284]	@ (8000f40 <parse_binary+0x214>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000e26:	4b44      	ldr	r3, [pc, #272]	@ (8000f38 <parse_binary+0x20c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
						state = RMT_READ_PAKET;
 8000e2c:	4b40      	ldr	r3, [pc, #256]	@ (8000f30 <parse_binary+0x204>)
 8000e2e:	2202      	movs	r2, #2
 8000e30:	701a      	strb	r2, [r3, #0]
						break;
 8000e32:	e02c      	b.n	8000e8e <parse_binary+0x162>
					} else if (data == RMT_EOT) {
 8000e34:	783b      	ldrb	r3, [r7, #0]
 8000e36:	2b45      	cmp	r3, #69	@ 0x45
 8000e38:	d106      	bne.n	8000e48 <parse_binary+0x11c>
						// proper trailer -> parse
						state = RMT_PARSE_PAKET;
 8000e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f30 <parse_binary+0x204>)
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000e40:	4b3d      	ldr	r3, [pc, #244]	@ (8000f38 <parse_binary+0x20c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
						break;
 8000e46:	e022      	b.n	8000e8e <parse_binary+0x162>
					} else {
						dleFlag = 0; // unknown after DLE -> ignore
 8000e48:	4b3b      	ldr	r3, [pc, #236]	@ (8000f38 <parse_binary+0x20c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e017      	b.n	8000e80 <parse_binary+0x154>
					}
				} else {
					if (data == RMT_DLE) {
 8000e50:	783b      	ldrb	r3, [r7, #0]
 8000e52:	2b3d      	cmp	r3, #61	@ 0x3d
 8000e54:	d103      	bne.n	8000e5e <parse_binary+0x132>
						dleFlag = 1;            // next is control
 8000e56:	4b38      	ldr	r3, [pc, #224]	@ (8000f38 <parse_binary+0x20c>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	e010      	b.n	8000e80 <parse_binary+0x154>
					} else {
						bufferRx[lengthRx++] = data;
 8000e5e:	4b37      	ldr	r3, [pc, #220]	@ (8000f3c <parse_binary+0x210>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	b2d1      	uxtb	r1, r2
 8000e66:	4a35      	ldr	r2, [pc, #212]	@ (8000f3c <parse_binary+0x210>)
 8000e68:	7011      	strb	r1, [r2, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4a36      	ldr	r2, [pc, #216]	@ (8000f48 <parse_binary+0x21c>)
 8000e6e:	783b      	ldrb	r3, [r7, #0]
 8000e70:	5453      	strb	r3, [r2, r1]
						checksum += data;
 8000e72:	4b33      	ldr	r3, [pc, #204]	@ (8000f40 <parse_binary+0x214>)
 8000e74:	781a      	ldrb	r2, [r3, #0]
 8000e76:	783b      	ldrb	r3, [r7, #0]
 8000e78:	4413      	add	r3, r2
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b30      	ldr	r3, [pc, #192]	@ (8000f40 <parse_binary+0x214>)
 8000e7e:	701a      	strb	r2, [r3, #0]
			while (ptr < nzeichen) {
 8000e80:	4b30      	ldr	r3, [pc, #192]	@ (8000f44 <parse_binary+0x218>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	79fa      	ldrb	r2, [r7, #7]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d396      	bcc.n	8000dba <parse_binary+0x8e>
					}
				}
			}
		}
			break;
 8000e8c:	e041      	b.n	8000f12 <parse_binary+0x1e6>
 8000e8e:	e040      	b.n	8000f12 <parse_binary+0x1e6>

		case RMT_PARSE_PAKET: {
			// Expect 4 payload bytes + 1 checksum (net length 5)
			if (lengthRx == 5) {
 8000e90:	4b2a      	ldr	r3, [pc, #168]	@ (8000f3c <parse_binary+0x210>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b05      	cmp	r3, #5
 8000e96:	d12f      	bne.n	8000ef8 <parse_binary+0x1cc>
				uint8_t cmd = bufferRx[0];
 8000e98:	4b2b      	ldr	r3, [pc, #172]	@ (8000f48 <parse_binary+0x21c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	71bb      	strb	r3, [r7, #6]
				uint8_t status = bufferRx[1];
 8000e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f48 <parse_binary+0x21c>)
 8000ea0:	785b      	ldrb	r3, [r3, #1]
 8000ea2:	717b      	strb	r3, [r7, #5]
				uint8_t pH = bufferRx[2];
 8000ea4:	4b28      	ldr	r3, [pc, #160]	@ (8000f48 <parse_binary+0x21c>)
 8000ea6:	789b      	ldrb	r3, [r3, #2]
 8000ea8:	713b      	strb	r3, [r7, #4]
				uint8_t pL = bufferRx[3];
 8000eaa:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <parse_binary+0x21c>)
 8000eac:	78db      	ldrb	r3, [r3, #3]
 8000eae:	70fb      	strb	r3, [r7, #3]
				uint8_t cks = bufferRx[4];
 8000eb0:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <parse_binary+0x21c>)
 8000eb2:	791b      	ldrb	r3, [r3, #4]
 8000eb4:	70bb      	strb	r3, [r7, #2]

				// checksum covers only the 4 payload bytes
				uint8_t sum = (uint8_t) (cmd + status + pH + pL);
 8000eb6:	79ba      	ldrb	r2, [r7, #6]
 8000eb8:	797b      	ldrb	r3, [r7, #5]
 8000eba:	4413      	add	r3, r2
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	793b      	ldrb	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	707b      	strb	r3, [r7, #1]
				if (sum == cks) {
 8000eca:	787a      	ldrb	r2, [r7, #1]
 8000ecc:	78bb      	ldrb	r3, [r7, #2]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d112      	bne.n	8000ef8 <parse_binary+0x1cc>
					last_reply.cmd = cmd;
 8000ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f4c <parse_binary+0x220>)
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	7013      	strb	r3, [r2, #0]
					last_reply.status = status;
 8000ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f4c <parse_binary+0x220>)
 8000eda:	797b      	ldrb	r3, [r7, #5]
 8000edc:	7053      	strb	r3, [r2, #1]
					last_reply.value = ((uint16_t) pH << 8) | pL;
 8000ede:	793b      	ldrb	r3, [r7, #4]
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <parse_binary+0x220>)
 8000ef0:	805a      	strh	r2, [r3, #2]
					reply_ready = 1;            // make available to caller
 8000ef2:	4b17      	ldr	r3, [pc, #92]	@ (8000f50 <parse_binary+0x224>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
				}
				// else: checksum wrong -> ignore silently for now -- TODO: ERROR FLAG
			}
			// reset for next frame
			state = RMT_WAIT_FOR_PAKET_START;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <parse_binary+0x204>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
			lengthRx = 0;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <parse_binary+0x210>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
			checksum = 0;
 8000f04:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <parse_binary+0x214>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
			dleFlag = 0;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <parse_binary+0x20c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
		}
			break;
 8000f10:	bf00      	nop
		}
	} while (ptr < nzeichen);
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <parse_binary+0x218>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	79fa      	ldrb	r2, [r7, #7]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	f4ff af0b 	bcc.w	8000d36 <parse_binary+0xa>
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000000 	.word	0x20000000
 8000f34:	200000f4 	.word	0x200000f4
 8000f38:	20000114 	.word	0x20000114
 8000f3c:	20000113 	.word	0x20000113
 8000f40:	20000115 	.word	0x20000115
 8000f44:	20000103 	.word	0x20000103
 8000f48:	20000104 	.word	0x20000104
 8000f4c:	20000118 	.word	0x20000118
 8000f50:	20000116 	.word	0x20000116

08000f54 <parse_ascii>:

// das Paket in ASCII-Format analysieren und das Paket in den Stack einfügen.
void parse_ascii(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
	volatile static uint8_t pflag=0;
	volatile static uint8_t eflag=0;

	static uint8_t negativ_zahl = 0;

	uint8_t ptr=0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	75fb      	strb	r3, [r7, #23]
	uint16_t cmd_index = BINARY_INDEX_MAX;
 8000f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f62:	82bb      	strh	r3, [r7, #20]


	do
	{
		// wenn es ein Zeichen in UART1 Buffer gibt und die Automate nicht im Bearbeitungszustand ist
		if ((nzeichen>0) && (a_state != proc_cmd))
 8000f64:	4b9c      	ldr	r3, [pc, #624]	@ (80011d8 <parse_ascii+0x284>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d01d      	beq.n	8000faa <parse_ascii+0x56>
 8000f6e:	4b9b      	ldr	r3, [pc, #620]	@ (80011dc <parse_ascii+0x288>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d018      	beq.n	8000faa <parse_ascii+0x56>
		{	nc=msg[ptr++];							// hole ein Zeichen aus msg-buffer
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	75fa      	strb	r2, [r7, #23]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b97      	ldr	r3, [pc, #604]	@ (80011e0 <parse_ascii+0x28c>)
 8000f82:	5c9b      	ldrb	r3, [r3, r2]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b97      	ldr	r3, [pc, #604]	@ (80011e4 <parse_ascii+0x290>)
 8000f88:	701a      	strb	r2, [r3, #0]
			if(echo==1)								// Wenn die Kommunikationsmode im Echo-Mode ist, wird es das Zeichen direkt wieder zurückgeben.
 8000f8a:	4b97      	ldr	r3, [pc, #604]	@ (80011e8 <parse_ascii+0x294>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d10d      	bne.n	8000fb0 <parse_ascii+0x5c>
			{
				char1[0]=nc;
 8000f94:	4b93      	ldr	r3, [pc, #588]	@ (80011e4 <parse_ascii+0x290>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b94      	ldr	r3, [pc, #592]	@ (80011ec <parse_ascii+0x298>)
 8000f9c:	701a      	strb	r2, [r3, #0]
				uartRB_Put(&usart3_rb,char1, 1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4992      	ldr	r1, [pc, #584]	@ (80011ec <parse_ascii+0x298>)
 8000fa2:	4893      	ldr	r0, [pc, #588]	@ (80011f0 <parse_ascii+0x29c>)
 8000fa4:	f001 fda2 	bl	8002aec <uartRB_Put>
			if(echo==1)								// Wenn die Kommunikationsmode im Echo-Mode ist, wird es das Zeichen direkt wieder zurückgeben.
 8000fa8:	e002      	b.n	8000fb0 <parse_ascii+0x5c>
			}
		}
		else
		nc = 0;
 8000faa:	4b8e      	ldr	r3, [pc, #568]	@ (80011e4 <parse_ascii+0x290>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]

		if(strlen(cmd) > 22)					 // Ascii-Kommando darf nicht länger als 22 Zeichen.
 8000fb0:	4890      	ldr	r0, [pc, #576]	@ (80011f4 <parse_ascii+0x2a0>)
 8000fb2:	f7ff f93f 	bl	8000234 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b16      	cmp	r3, #22
 8000fba:	d90e      	bls.n	8000fda <parse_ascii+0x86>
		{
			strcpy(cmd,"");
 8000fbc:	4b8d      	ldr	r3, [pc, #564]	@ (80011f4 <parse_ascii+0x2a0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
			val=0;
 8000fc2:	4b8d      	ldr	r3, [pc, #564]	@ (80011f8 <parse_ascii+0x2a4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
			pflag=0;
 8000fc8:	4b8c      	ldr	r3, [pc, #560]	@ (80011fc <parse_ascii+0x2a8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
			eflag=0;
 8000fce:	4b8c      	ldr	r3, [pc, #560]	@ (8001200 <parse_ascii+0x2ac>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
			a_state = get_cmd;
 8000fd4:	4b81      	ldr	r3, [pc, #516]	@ (80011dc <parse_ascii+0x288>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
		}

		switch(a_state)
 8000fda:	4b80      	ldr	r3, [pc, #512]	@ (80011dc <parse_ascii+0x288>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	f200 8323 	bhi.w	800162e <parse_ascii+0x6da>
 8000fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff0 <parse_ascii+0x9c>)
 8000fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fee:	bf00      	nop
 8000ff0:	08001001 	.word	0x08001001
 8000ff4:	08001135 	.word	0x08001135
 8000ff8:	08001211 	.word	0x08001211
 8000ffc:	080012c3 	.word	0x080012c3
		{
			case get_cmd:
			if (((nc>=65) && (nc<=90)) || ((nc>=48) && (nc<=57)) || (nc==58) || (nc==63))
 8001000:	4b78      	ldr	r3, [pc, #480]	@ (80011e4 <parse_ascii+0x290>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b40      	cmp	r3, #64	@ 0x40
 8001008:	d904      	bls.n	8001014 <parse_ascii+0xc0>
 800100a:	4b76      	ldr	r3, [pc, #472]	@ (80011e4 <parse_ascii+0x290>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b5a      	cmp	r3, #90	@ 0x5a
 8001012:	d913      	bls.n	800103c <parse_ascii+0xe8>
 8001014:	4b73      	ldr	r3, [pc, #460]	@ (80011e4 <parse_ascii+0x290>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b2f      	cmp	r3, #47	@ 0x2f
 800101c:	d904      	bls.n	8001028 <parse_ascii+0xd4>
 800101e:	4b71      	ldr	r3, [pc, #452]	@ (80011e4 <parse_ascii+0x290>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b39      	cmp	r3, #57	@ 0x39
 8001026:	d909      	bls.n	800103c <parse_ascii+0xe8>
 8001028:	4b6e      	ldr	r3, [pc, #440]	@ (80011e4 <parse_ascii+0x290>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b3a      	cmp	r3, #58	@ 0x3a
 8001030:	d004      	beq.n	800103c <parse_ascii+0xe8>
 8001032:	4b6c      	ldr	r3, [pc, #432]	@ (80011e4 <parse_ascii+0x290>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b3f      	cmp	r3, #63	@ 0x3f
 800103a:	d109      	bne.n	8001050 <parse_ascii+0xfc>
			{ 	char1[0] = nc;				//verkette char1 an cmd
 800103c:	4b69      	ldr	r3, [pc, #420]	@ (80011e4 <parse_ascii+0x290>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b6a      	ldr	r3, [pc, #424]	@ (80011ec <parse_ascii+0x298>)
 8001044:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 8001046:	4969      	ldr	r1, [pc, #420]	@ (80011ec <parse_ascii+0x298>)
 8001048:	486a      	ldr	r0, [pc, #424]	@ (80011f4 <parse_ascii+0x2a0>)
 800104a:	f007 f911 	bl	8008270 <strcat>
 800104e:	e070      	b.n	8001132 <parse_ascii+0x1de>
			}
			else if ((nc == 46) && (sloppy == 1))
 8001050:	4b64      	ldr	r3, [pc, #400]	@ (80011e4 <parse_ascii+0x290>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b2e      	cmp	r3, #46	@ 0x2e
 8001058:	d10c      	bne.n	8001074 <parse_ascii+0x120>
 800105a:	4b6a      	ldr	r3, [pc, #424]	@ (8001204 <parse_ascii+0x2b0>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b01      	cmp	r3, #1
 8001062:	d107      	bne.n	8001074 <parse_ascii+0x120>
			{ 	char1[0] = 58;
 8001064:	4b61      	ldr	r3, [pc, #388]	@ (80011ec <parse_ascii+0x298>)
 8001066:	223a      	movs	r2, #58	@ 0x3a
 8001068:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 800106a:	4960      	ldr	r1, [pc, #384]	@ (80011ec <parse_ascii+0x298>)
 800106c:	4861      	ldr	r0, [pc, #388]	@ (80011f4 <parse_ascii+0x2a0>)
 800106e:	f007 f8ff 	bl	8008270 <strcat>
 8001072:	e05e      	b.n	8001132 <parse_ascii+0x1de>
			}
			else if ((nc == 35)  && (sloppy == 1))
 8001074:	4b5b      	ldr	r3, [pc, #364]	@ (80011e4 <parse_ascii+0x290>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b23      	cmp	r3, #35	@ 0x23
 800107c:	d10c      	bne.n	8001098 <parse_ascii+0x144>
 800107e:	4b61      	ldr	r3, [pc, #388]	@ (8001204 <parse_ascii+0x2b0>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d107      	bne.n	8001098 <parse_ascii+0x144>
			{ 	char1[0] = 63;
 8001088:	4b58      	ldr	r3, [pc, #352]	@ (80011ec <parse_ascii+0x298>)
 800108a:	223f      	movs	r2, #63	@ 0x3f
 800108c:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 800108e:	4957      	ldr	r1, [pc, #348]	@ (80011ec <parse_ascii+0x298>)
 8001090:	4858      	ldr	r0, [pc, #352]	@ (80011f4 <parse_ascii+0x2a0>)
 8001092:	f007 f8ed 	bl	8008270 <strcat>
 8001096:	e04c      	b.n	8001132 <parse_ascii+0x1de>
			}
			else if ((nc>=97) && (nc<=122))
 8001098:	4b52      	ldr	r3, [pc, #328]	@ (80011e4 <parse_ascii+0x290>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b60      	cmp	r3, #96	@ 0x60
 80010a0:	d910      	bls.n	80010c4 <parse_ascii+0x170>
 80010a2:	4b50      	ldr	r3, [pc, #320]	@ (80011e4 <parse_ascii+0x290>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b7a      	cmp	r3, #122	@ 0x7a
 80010aa:	d80b      	bhi.n	80010c4 <parse_ascii+0x170>
			{  char1[0] = (nc - 32);
 80010ac:	4b4d      	ldr	r3, [pc, #308]	@ (80011e4 <parse_ascii+0x290>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	3b20      	subs	r3, #32
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b4d      	ldr	r3, [pc, #308]	@ (80011ec <parse_ascii+0x298>)
 80010b8:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 80010ba:	494c      	ldr	r1, [pc, #304]	@ (80011ec <parse_ascii+0x298>)
 80010bc:	484d      	ldr	r0, [pc, #308]	@ (80011f4 <parse_ascii+0x2a0>)
 80010be:	f007 f8d7 	bl	8008270 <strcat>
 80010c2:	e036      	b.n	8001132 <parse_ascii+0x1de>
			}
			else if (nc == 32)
 80010c4:	4b47      	ldr	r3, [pc, #284]	@ (80011e4 <parse_ascii+0x290>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b20      	cmp	r3, #32
 80010cc:	d10b      	bne.n	80010e6 <parse_ascii+0x192>
			{
				if(strlen(cmd) > 0)
 80010ce:	4b49      	ldr	r3, [pc, #292]	@ (80011f4 <parse_ascii+0x2a0>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 82af 	beq.w	8001636 <parse_ascii+0x6e2>
				{
					val = 0;
 80010d8:	4b47      	ldr	r3, [pc, #284]	@ (80011f8 <parse_ascii+0x2a4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
					a_state = get_sign;
 80010de:	4b3f      	ldr	r3, [pc, #252]	@ (80011dc <parse_ascii+0x288>)
 80010e0:	2202      	movs	r2, #2
 80010e2:	701a      	strb	r2, [r3, #0]
				a_state = proc_cmd;
			}
			else
			{ if(nc != 0) strcat(cmd, "*");
			}
			break;
 80010e4:	e2a7      	b.n	8001636 <parse_ascii+0x6e2>
			else if ((nc == 59) || ((nc==13)  && (sloppy == 1)))
 80010e6:	4b3f      	ldr	r3, [pc, #252]	@ (80011e4 <parse_ascii+0x290>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b3b      	cmp	r3, #59	@ 0x3b
 80010ee:	d009      	beq.n	8001104 <parse_ascii+0x1b0>
 80010f0:	4b3c      	ldr	r3, [pc, #240]	@ (80011e4 <parse_ascii+0x290>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b0d      	cmp	r3, #13
 80010f8:	d108      	bne.n	800110c <parse_ascii+0x1b8>
 80010fa:	4b42      	ldr	r3, [pc, #264]	@ (8001204 <parse_ascii+0x2b0>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d103      	bne.n	800110c <parse_ascii+0x1b8>
				a_state = proc_cmd;
 8001104:	4b35      	ldr	r3, [pc, #212]	@ (80011dc <parse_ascii+0x288>)
 8001106:	2204      	movs	r2, #4
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	e012      	b.n	8001132 <parse_ascii+0x1de>
			{ if(nc != 0) strcat(cmd, "*");
 800110c:	4b35      	ldr	r3, [pc, #212]	@ (80011e4 <parse_ascii+0x290>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 828f 	beq.w	8001636 <parse_ascii+0x6e2>
 8001118:	4836      	ldr	r0, [pc, #216]	@ (80011f4 <parse_ascii+0x2a0>)
 800111a:	f7ff f88b 	bl	8000234 <strlen>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b34      	ldr	r3, [pc, #208]	@ (80011f4 <parse_ascii+0x2a0>)
 8001124:	4413      	add	r3, r2
 8001126:	4938      	ldr	r1, [pc, #224]	@ (8001208 <parse_ascii+0x2b4>)
 8001128:	461a      	mov	r2, r3
 800112a:	460b      	mov	r3, r1
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	8013      	strh	r3, [r2, #0]
			break;
 8001130:	e281      	b.n	8001636 <parse_ascii+0x6e2>
 8001132:	e280      	b.n	8001636 <parse_ascii+0x6e2>

			case get_sign:
				if (nc == 45)
 8001134:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <parse_ascii+0x290>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b2d      	cmp	r3, #45	@ 0x2d
 800113c:	d106      	bne.n	800114c <parse_ascii+0x1f8>
				{
					negativ_zahl = 1;
 800113e:	4b33      	ldr	r3, [pc, #204]	@ (800120c <parse_ascii+0x2b8>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
					a_state = get_val;
 8001144:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <parse_ascii+0x288>)
 8001146:	2203      	movs	r2, #3
 8001148:	701a      	strb	r2, [r3, #0]
					break;
 800114a:	e279      	b.n	8001640 <parse_ascii+0x6ec>
				}
				else if ((nc>=48) && (nc<=57) && (val < INT32_MAX))           //val < 1000000
 800114c:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <parse_ascii+0x290>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b2f      	cmp	r3, #47	@ 0x2f
 8001154:	d91f      	bls.n	8001196 <parse_ascii+0x242>
 8001156:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <parse_ascii+0x290>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b39      	cmp	r3, #57	@ 0x39
 800115e:	d81a      	bhi.n	8001196 <parse_ascii+0x242>
 8001160:	4b25      	ldr	r3, [pc, #148]	@ (80011f8 <parse_ascii+0x2a4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001168:	4293      	cmp	r3, r2
 800116a:	d014      	beq.n	8001196 <parse_ascii+0x242>
				{	val = val * 10 + (nc-48);
 800116c:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <parse_ascii+0x2a4>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	461a      	mov	r2, r3
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <parse_ascii+0x290>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	3b30      	subs	r3, #48	@ 0x30
 8001182:	4413      	add	r3, r2
 8001184:	4a1c      	ldr	r2, [pc, #112]	@ (80011f8 <parse_ascii+0x2a4>)
 8001186:	6013      	str	r3, [r2, #0]
					pflag=1;
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <parse_ascii+0x2a8>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
					a_state = get_val;
 800118e:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <parse_ascii+0x288>)
 8001190:	2203      	movs	r2, #3
 8001192:	701a      	strb	r2, [r3, #0]
					break;
 8001194:	e254      	b.n	8001640 <parse_ascii+0x6ec>
				}
				else if ((nc == 59) || (nc==13))
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <parse_ascii+0x290>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b3b      	cmp	r3, #59	@ 0x3b
 800119e:	d004      	beq.n	80011aa <parse_ascii+0x256>
 80011a0:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <parse_ascii+0x290>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b0d      	cmp	r3, #13
 80011a8:	d103      	bne.n	80011b2 <parse_ascii+0x25e>
				{
					a_state = proc_cmd;
 80011aa:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <parse_ascii+0x288>)
 80011ac:	2204      	movs	r2, #4
 80011ae:	701a      	strb	r2, [r3, #0]
						pflag=0;
						eflag=1;
					}

				};
			break;
 80011b0:	e243      	b.n	800163a <parse_ascii+0x6e6>
				{	if(nc != 0)
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <parse_ascii+0x290>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 823e 	beq.w	800163a <parse_ascii+0x6e6>
					{	negativ_zahl = 0;
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <parse_ascii+0x2b8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
						val=0;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <parse_ascii+0x2a4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
						pflag=0;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <parse_ascii+0x2a8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
						eflag=1;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <parse_ascii+0x2ac>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
			break;
 80011d6:	e230      	b.n	800163a <parse_ascii+0x6e6>
 80011d8:	20000103 	.word	0x20000103
 80011dc:	20000001 	.word	0x20000001
 80011e0:	200000f4 	.word	0x200000f4
 80011e4:	2000011c 	.word	0x2000011c
 80011e8:	200000ef 	.word	0x200000ef
 80011ec:	20000120 	.word	0x20000120
 80011f0:	20000dcc 	.word	0x20000dcc
 80011f4:	20000124 	.word	0x20000124
 80011f8:	20000140 	.word	0x20000140
 80011fc:	20000144 	.word	0x20000144
 8001200:	20000145 	.word	0x20000145
 8001204:	200000f0 	.word	0x200000f0
 8001208:	08008b98 	.word	0x08008b98
 800120c:	20000146 	.word	0x20000146
			case get_val:

			if ((nc>=48) && (nc<=57) && (val < INT32_MAX))           //val < 1000000
 8001210:	4b94      	ldr	r3, [pc, #592]	@ (8001464 <parse_ascii+0x510>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b2f      	cmp	r3, #47	@ 0x2f
 8001218:	d91c      	bls.n	8001254 <parse_ascii+0x300>
 800121a:	4b92      	ldr	r3, [pc, #584]	@ (8001464 <parse_ascii+0x510>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b39      	cmp	r3, #57	@ 0x39
 8001222:	d817      	bhi.n	8001254 <parse_ascii+0x300>
 8001224:	4b90      	ldr	r3, [pc, #576]	@ (8001468 <parse_ascii+0x514>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800122c:	4293      	cmp	r3, r2
 800122e:	d011      	beq.n	8001254 <parse_ascii+0x300>
			{ val = val * 10 + (nc-48);
 8001230:	4b8d      	ldr	r3, [pc, #564]	@ (8001468 <parse_ascii+0x514>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	461a      	mov	r2, r3
 800123e:	4b89      	ldr	r3, [pc, #548]	@ (8001464 <parse_ascii+0x510>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3b30      	subs	r3, #48	@ 0x30
 8001246:	4413      	add	r3, r2
 8001248:	4a87      	ldr	r2, [pc, #540]	@ (8001468 <parse_ascii+0x514>)
 800124a:	6013      	str	r3, [r2, #0]
				pflag=1;
 800124c:	4b87      	ldr	r3, [pc, #540]	@ (800146c <parse_ascii+0x518>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
 8001252:	e035      	b.n	80012c0 <parse_ascii+0x36c>
			}
			else if ((nc == 59) || (nc==13))
 8001254:	4b83      	ldr	r3, [pc, #524]	@ (8001464 <parse_ascii+0x510>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b3b      	cmp	r3, #59	@ 0x3b
 800125c:	d004      	beq.n	8001268 <parse_ascii+0x314>
 800125e:	4b81      	ldr	r3, [pc, #516]	@ (8001464 <parse_ascii+0x510>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b0d      	cmp	r3, #13
 8001266:	d118      	bne.n	800129a <parse_ascii+0x346>
			{
				if (negativ_zahl)
 8001268:	4b81      	ldr	r3, [pc, #516]	@ (8001470 <parse_ascii+0x51c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d010      	beq.n	8001292 <parse_ascii+0x33e>
				{
					if (pflag == 0)
 8001270:	4b7e      	ldr	r3, [pc, #504]	@ (800146c <parse_ascii+0x518>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10b      	bne.n	8001292 <parse_ascii+0x33e>
					{
						negativ_zahl = 0;
 800127a:	4b7d      	ldr	r3, [pc, #500]	@ (8001470 <parse_ascii+0x51c>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
						val=0;
 8001280:	4b79      	ldr	r3, [pc, #484]	@ (8001468 <parse_ascii+0x514>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
						pflag=0;
 8001286:	4b79      	ldr	r3, [pc, #484]	@ (800146c <parse_ascii+0x518>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
						eflag=1;
 800128c:	4b79      	ldr	r3, [pc, #484]	@ (8001474 <parse_ascii+0x520>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
					}
				}
				a_state = proc_cmd;
 8001292:	4b79      	ldr	r3, [pc, #484]	@ (8001478 <parse_ascii+0x524>)
 8001294:	2204      	movs	r2, #4
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	e012      	b.n	80012c0 <parse_ascii+0x36c>
			}
			else
			{
				if(nc != 0)
 800129a:	4b72      	ldr	r3, [pc, #456]	@ (8001464 <parse_ascii+0x510>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 81cc 	beq.w	800163e <parse_ascii+0x6ea>
				{	negativ_zahl = 0;
 80012a6:	4b72      	ldr	r3, [pc, #456]	@ (8001470 <parse_ascii+0x51c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
					val=0;
 80012ac:	4b6e      	ldr	r3, [pc, #440]	@ (8001468 <parse_ascii+0x514>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
					pflag=0;
 80012b2:	4b6e      	ldr	r3, [pc, #440]	@ (800146c <parse_ascii+0x518>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
					eflag=1;
 80012b8:	4b6e      	ldr	r3, [pc, #440]	@ (8001474 <parse_ascii+0x520>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
				}

			}
			break;
 80012be:	e1be      	b.n	800163e <parse_ascii+0x6ea>
 80012c0:	e1bd      	b.n	800163e <parse_ascii+0x6ea>

			case proc_cmd:

			if (eflag == 1)
 80012c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001474 <parse_ascii+0x520>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d103      	bne.n	80012d4 <parse_ascii+0x380>
			{
				ret=CMR_MALFORMATTEDCOMMAND;
 80012cc:	4b6b      	ldr	r3, [pc, #428]	@ (800147c <parse_ascii+0x528>)
 80012ce:	221f      	movs	r2, #31
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	e182      	b.n	80015da <parse_ascii+0x686>
			}
			//hier beginnt die Verarbeitung der Befehle zum Einstellen der Kommunikation
			else if (  strcmp(cmd, "VERB")== 0 )
 80012d4:	496a      	ldr	r1, [pc, #424]	@ (8001480 <parse_ascii+0x52c>)
 80012d6:	486b      	ldr	r0, [pc, #428]	@ (8001484 <parse_ascii+0x530>)
 80012d8:	f7fe ffa2 	bl	8000220 <strcmp>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d12c      	bne.n	800133c <parse_ascii+0x3e8>
			{
				if(pflag==0)
 80012e2:	4b62      	ldr	r3, [pc, #392]	@ (800146c <parse_ascii+0x518>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d103      	bne.n	80012f4 <parse_ascii+0x3a0>
				{
					ret=CMR_MISSINGPARAMETER;
 80012ec:	4b63      	ldr	r3, [pc, #396]	@ (800147c <parse_ascii+0x528>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e172      	b.n	80015da <parse_ascii+0x686>
				}
				else
				{
					switch (val)
 80012f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001468 <parse_ascii+0x514>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d014      	beq.n	8001326 <parse_ascii+0x3d2>
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	dc19      	bgt.n	8001334 <parse_ascii+0x3e0>
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <parse_ascii+0x3b6>
 8001304:	2b01      	cmp	r3, #1
 8001306:	d007      	beq.n	8001318 <parse_ascii+0x3c4>
 8001308:	e014      	b.n	8001334 <parse_ascii+0x3e0>
					{
						case 0:
						verbose =0;
 800130a:	4b5f      	ldr	r3, [pc, #380]	@ (8001488 <parse_ascii+0x534>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001310:	4b5a      	ldr	r3, [pc, #360]	@ (800147c <parse_ascii+0x528>)
 8001312:	2280      	movs	r2, #128	@ 0x80
 8001314:	701a      	strb	r2, [r3, #0]
						break;
 8001316:	e160      	b.n	80015da <parse_ascii+0x686>
						case 1:
						verbose =1;
 8001318:	4b5b      	ldr	r3, [pc, #364]	@ (8001488 <parse_ascii+0x534>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 800131e:	4b57      	ldr	r3, [pc, #348]	@ (800147c <parse_ascii+0x528>)
 8001320:	2280      	movs	r2, #128	@ 0x80
 8001322:	701a      	strb	r2, [r3, #0]
						break;
 8001324:	e159      	b.n	80015da <parse_ascii+0x686>
						case 2:
						verbose  =2;
 8001326:	4b58      	ldr	r3, [pc, #352]	@ (8001488 <parse_ascii+0x534>)
 8001328:	2202      	movs	r2, #2
 800132a:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 800132c:	4b53      	ldr	r3, [pc, #332]	@ (800147c <parse_ascii+0x528>)
 800132e:	2280      	movs	r2, #128	@ 0x80
 8001330:	701a      	strb	r2, [r3, #0]
						break;
 8001332:	e152      	b.n	80015da <parse_ascii+0x686>
						default:
						ret= CMR_PARAMETERINVALID;
 8001334:	4b51      	ldr	r3, [pc, #324]	@ (800147c <parse_ascii+0x528>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
						break;
 800133a:	e14e      	b.n	80015da <parse_ascii+0x686>
					};
				}
			}
			else if (  strcmp(cmd, "ECHO")== 0 )
 800133c:	4953      	ldr	r1, [pc, #332]	@ (800148c <parse_ascii+0x538>)
 800133e:	4851      	ldr	r0, [pc, #324]	@ (8001484 <parse_ascii+0x530>)
 8001340:	f7fe ff6e 	bl	8000220 <strcmp>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d122      	bne.n	8001390 <parse_ascii+0x43c>
			{
				if(pflag==0)
 800134a:	4b48      	ldr	r3, [pc, #288]	@ (800146c <parse_ascii+0x518>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d103      	bne.n	800135c <parse_ascii+0x408>
				{
					ret= CMR_MISSINGPARAMETER;
 8001354:	4b49      	ldr	r3, [pc, #292]	@ (800147c <parse_ascii+0x528>)
 8001356:	220c      	movs	r2, #12
 8001358:	701a      	strb	r2, [r3, #0]
 800135a:	e13e      	b.n	80015da <parse_ascii+0x686>
				}
				else
				{
					if(val==0)
 800135c:	4b42      	ldr	r3, [pc, #264]	@ (8001468 <parse_ascii+0x514>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d106      	bne.n	8001372 <parse_ascii+0x41e>
					{	echo=0;
 8001364:	4b4a      	ldr	r3, [pc, #296]	@ (8001490 <parse_ascii+0x53c>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 800136a:	4b44      	ldr	r3, [pc, #272]	@ (800147c <parse_ascii+0x528>)
 800136c:	2280      	movs	r2, #128	@ 0x80
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	e133      	b.n	80015da <parse_ascii+0x686>
					}
					else if(val==1)
 8001372:	4b3d      	ldr	r3, [pc, #244]	@ (8001468 <parse_ascii+0x514>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d106      	bne.n	8001388 <parse_ascii+0x434>
					{	echo=1;
 800137a:	4b45      	ldr	r3, [pc, #276]	@ (8001490 <parse_ascii+0x53c>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001380:	4b3e      	ldr	r3, [pc, #248]	@ (800147c <parse_ascii+0x528>)
 8001382:	2280      	movs	r2, #128	@ 0x80
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	e128      	b.n	80015da <parse_ascii+0x686>
					}
					else
					{
						ret= CMR_PARAMETERINVALID;
 8001388:	4b3c      	ldr	r3, [pc, #240]	@ (800147c <parse_ascii+0x528>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	e124      	b.n	80015da <parse_ascii+0x686>
					}
				}
			}
			else if (  strcmp(cmd, "CRLF")== 0 )
 8001390:	4940      	ldr	r1, [pc, #256]	@ (8001494 <parse_ascii+0x540>)
 8001392:	483c      	ldr	r0, [pc, #240]	@ (8001484 <parse_ascii+0x530>)
 8001394:	f7fe ff44 	bl	8000220 <strcmp>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d138      	bne.n	8001410 <parse_ascii+0x4bc>
			{
				if(pflag==0)
 800139e:	4b33      	ldr	r3, [pc, #204]	@ (800146c <parse_ascii+0x518>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d103      	bne.n	80013b0 <parse_ascii+0x45c>
				{
					ret= CMR_MISSINGPARAMETER;
 80013a8:	4b34      	ldr	r3, [pc, #208]	@ (800147c <parse_ascii+0x528>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	e114      	b.n	80015da <parse_ascii+0x686>
				}
				else
				{
					if(val==0)
 80013b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001468 <parse_ascii+0x514>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d106      	bne.n	80013c6 <parse_ascii+0x472>
					{	crlf =0;
 80013b8:	4b37      	ldr	r3, [pc, #220]	@ (8001498 <parse_ascii+0x544>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 80013be:	4b2f      	ldr	r3, [pc, #188]	@ (800147c <parse_ascii+0x528>)
 80013c0:	2280      	movs	r2, #128	@ 0x80
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e109      	b.n	80015da <parse_ascii+0x686>
					}
					else if(val==1)
 80013c6:	4b28      	ldr	r3, [pc, #160]	@ (8001468 <parse_ascii+0x514>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d106      	bne.n	80013dc <parse_ascii+0x488>
					{	crlf =1;
 80013ce:	4b32      	ldr	r3, [pc, #200]	@ (8001498 <parse_ascii+0x544>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 80013d4:	4b29      	ldr	r3, [pc, #164]	@ (800147c <parse_ascii+0x528>)
 80013d6:	2280      	movs	r2, #128	@ 0x80
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	e0fe      	b.n	80015da <parse_ascii+0x686>
					}
					else if(val==2)
 80013dc:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <parse_ascii+0x514>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d106      	bne.n	80013f2 <parse_ascii+0x49e>
					{	crlf =2;
 80013e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001498 <parse_ascii+0x544>)
 80013e6:	2202      	movs	r2, #2
 80013e8:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 80013ea:	4b24      	ldr	r3, [pc, #144]	@ (800147c <parse_ascii+0x528>)
 80013ec:	2280      	movs	r2, #128	@ 0x80
 80013ee:	701a      	strb	r2, [r3, #0]
 80013f0:	e0f3      	b.n	80015da <parse_ascii+0x686>
					}
					else if(val==3)
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <parse_ascii+0x514>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d106      	bne.n	8001408 <parse_ascii+0x4b4>
					{	crlf =3;
 80013fa:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <parse_ascii+0x544>)
 80013fc:	2203      	movs	r2, #3
 80013fe:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001400:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <parse_ascii+0x528>)
 8001402:	2280      	movs	r2, #128	@ 0x80
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e0e8      	b.n	80015da <parse_ascii+0x686>
					}
					else
					{
						ret= CMR_PARAMETERINVALID;
 8001408:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <parse_ascii+0x528>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
 800140e:	e0e4      	b.n	80015da <parse_ascii+0x686>
					}
				}
			}
			else if (  strcmp(cmd, "SLOPPY")== 0 )
 8001410:	4922      	ldr	r1, [pc, #136]	@ (800149c <parse_ascii+0x548>)
 8001412:	481c      	ldr	r0, [pc, #112]	@ (8001484 <parse_ascii+0x530>)
 8001414:	f7fe ff04 	bl	8000220 <strcmp>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d142      	bne.n	80014a4 <parse_ascii+0x550>
			{
				if(pflag==0)
 800141e:	4b13      	ldr	r3, [pc, #76]	@ (800146c <parse_ascii+0x518>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d103      	bne.n	8001430 <parse_ascii+0x4dc>
				{
					ret= CMR_MISSINGPARAMETER;
 8001428:	4b14      	ldr	r3, [pc, #80]	@ (800147c <parse_ascii+0x528>)
 800142a:	220c      	movs	r2, #12
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	e0d4      	b.n	80015da <parse_ascii+0x686>
				}
				else
				{
					if(val==0)
 8001430:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <parse_ascii+0x514>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d106      	bne.n	8001446 <parse_ascii+0x4f2>
					{	sloppy=0;
 8001438:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <parse_ascii+0x54c>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 800143e:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <parse_ascii+0x528>)
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	e0c9      	b.n	80015da <parse_ascii+0x686>
					}
					else if(val==1)
 8001446:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <parse_ascii+0x514>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d106      	bne.n	800145c <parse_ascii+0x508>
					{	sloppy=1;
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <parse_ascii+0x54c>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <parse_ascii+0x528>)
 8001456:	2280      	movs	r2, #128	@ 0x80
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	e0be      	b.n	80015da <parse_ascii+0x686>
					}
					else
					{
						ret= CMR_PARAMETERINVALID;
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <parse_ascii+0x528>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	e0ba      	b.n	80015da <parse_ascii+0x686>
 8001464:	2000011c 	.word	0x2000011c
 8001468:	20000140 	.word	0x20000140
 800146c:	20000144 	.word	0x20000144
 8001470:	20000146 	.word	0x20000146
 8001474:	20000145 	.word	0x20000145
 8001478:	20000001 	.word	0x20000001
 800147c:	20000147 	.word	0x20000147
 8001480:	08008b9c 	.word	0x08008b9c
 8001484:	20000124 	.word	0x20000124
 8001488:	200000ed 	.word	0x200000ed
 800148c:	08008ba4 	.word	0x08008ba4
 8001490:	200000ef 	.word	0x200000ef
 8001494:	08008bac 	.word	0x08008bac
 8001498:	200000ee 	.word	0x200000ee
 800149c:	08008bb4 	.word	0x08008bb4
 80014a0:	200000f0 	.word	0x200000f0
					}
				}
			}
			else if ( strcmp(cmd, "IBL") == 0 )
 80014a4:	496c      	ldr	r1, [pc, #432]	@ (8001658 <parse_ascii+0x704>)
 80014a6:	486d      	ldr	r0, [pc, #436]	@ (800165c <parse_ascii+0x708>)
 80014a8:	f7fe feba 	bl	8000220 <strcmp>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10f      	bne.n	80014d2 <parse_ascii+0x57e>
			{
				verbose = 2;
 80014b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001660 <parse_ascii+0x70c>)
 80014b4:	2202      	movs	r2, #2
 80014b6:	701a      	strb	r2, [r3, #0]
				echo = 1;
 80014b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001664 <parse_ascii+0x710>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
				crlf = 3;
 80014be:	4b6a      	ldr	r3, [pc, #424]	@ (8001668 <parse_ascii+0x714>)
 80014c0:	2203      	movs	r2, #3
 80014c2:	701a      	strb	r2, [r3, #0]
				sloppy = 1;
 80014c4:	4b69      	ldr	r3, [pc, #420]	@ (800166c <parse_ascii+0x718>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
				ret =CMR_SUCCESSFULL;
 80014ca:	4b69      	ldr	r3, [pc, #420]	@ (8001670 <parse_ascii+0x71c>)
 80014cc:	2280      	movs	r2, #128	@ 0x80
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	e083      	b.n	80015da <parse_ascii+0x686>
			}
			else if (  strcmp(cmd, "") == 0 )
 80014d2:	4b62      	ldr	r3, [pc, #392]	@ (800165c <parse_ascii+0x708>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <parse_ascii+0x58e>
			{
				ret= CMR_SEMICOLONONLY;
 80014da:	4b65      	ldr	r3, [pc, #404]	@ (8001670 <parse_ascii+0x71c>)
 80014dc:	22ff      	movs	r2, #255	@ 0xff
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e07b      	b.n	80015da <parse_ascii+0x686>
			}
			//die anderen ASCII-Befehle werden per Binäre-Suche-Funktion eine interne Befehlnummer und ein Attribut zugeordnet
			//und in den Stack eingefügt.
			else
			{
				Binary_Search(ASCII_CMD_MAX, cmd, &cmd_index);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	461a      	mov	r2, r3
 80014e8:	495c      	ldr	r1, [pc, #368]	@ (800165c <parse_ascii+0x708>)
 80014ea:	201d      	movs	r0, #29
 80014ec:	f000 fb8a 	bl	8001c04 <Binary_Search>
				//uart0_puts(cmd);
				//uart0_puti(cmd_index);

				if (cmd_index != BINARY_INDEX_MAX)
 80014f0:	8abb      	ldrh	r3, [r7, #20]
 80014f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014f6:	d06d      	beq.n	80015d4 <parse_ascii+0x680>
				{	stack_data.cmd_sender = Q_RS232_ASCII;
 80014f8:	2304      	movs	r3, #4
 80014fa:	713b      	strb	r3, [r7, #4]
					stack_data.cmd_index = cmd_index;
 80014fc:	8abb      	ldrh	r3, [r7, #20]
 80014fe:	80fb      	strh	r3, [r7, #6]
					stack_data.cmd_ack = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	723b      	strb	r3, [r7, #8]
					stack_data.next = NONEXT;
 8001504:	23ff      	movs	r3, #255	@ 0xff
 8001506:	743b      	strb	r3, [r7, #16]
					stack_data.prio = PRIO_LEVEL1;
 8001508:	2301      	movs	r3, #1
 800150a:	747b      	strb	r3, [r7, #17]

					if (cmd_index & 1)
 800150c:	8abb      	ldrh	r3, [r7, #20]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d051      	beq.n	80015ba <parse_ascii+0x666>
					{
						if (z_get_remote_mode() == z_rmt_rs232)
 8001516:	f002 f835 	bl	8003584 <z_get_remote_mode>
 800151a:	4603      	mov	r3, r0
 800151c:	2b01      	cmp	r3, #1
 800151e:	d12f      	bne.n	8001580 <parse_ascii+0x62c>
						{
							if ((pflag == 1))
 8001520:	4b54      	ldr	r3, [pc, #336]	@ (8001674 <parse_ascii+0x720>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b01      	cmp	r3, #1
 8001528:	d116      	bne.n	8001558 <parse_ascii+0x604>
							{
								if (negativ_zahl)
 800152a:	4b53      	ldr	r3, [pc, #332]	@ (8001678 <parse_ascii+0x724>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d004      	beq.n	800153c <parse_ascii+0x5e8>
								{
									stack_data.parameter = -val;
 8001532:	4b52      	ldr	r3, [pc, #328]	@ (800167c <parse_ascii+0x728>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	425b      	negs	r3, r3
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	e002      	b.n	8001542 <parse_ascii+0x5ee>
								}
								else
								{ stack_data.parameter = val;
 800153c:	4b4f      	ldr	r3, [pc, #316]	@ (800167c <parse_ascii+0x728>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
								}

								stack_data.rwflg = WRITE;
 8001542:	2302      	movs	r3, #2
 8001544:	74bb      	strb	r3, [r7, #18]
								ret = stack_insert_sero(stack_data);
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800154a:	f000 ff4f 	bl	80023ec <stack_insert_sero>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b47      	ldr	r3, [pc, #284]	@ (8001670 <parse_ascii+0x71c>)
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	e040      	b.n	80015da <parse_ascii+0x686>
								//uart0_puti(ret);
								//uart0_puti(stack_data.cmd_index);

							}
							else if(cmd_index == CMD_RESET_ERROR)
 8001558:	8abb      	ldrh	r3, [r7, #20]
 800155a:	2b09      	cmp	r3, #9
 800155c:	d10c      	bne.n	8001578 <parse_ascii+0x624>
							{
								stack_data.parameter = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
								stack_data.rwflg = WRITE;
 8001562:	2302      	movs	r3, #2
 8001564:	74bb      	strb	r3, [r7, #18]
								ret = stack_insert_sero(stack_data);
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800156a:	f000 ff3f 	bl	80023ec <stack_insert_sero>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	4b3f      	ldr	r3, [pc, #252]	@ (8001670 <parse_ascii+0x71c>)
 8001574:	701a      	strb	r2, [r3, #0]
 8001576:	e030      	b.n	80015da <parse_ascii+0x686>
							}
							else
							{
								{ ret =CMR_MISSINGPARAMETER;
 8001578:	4b3d      	ldr	r3, [pc, #244]	@ (8001670 <parse_ascii+0x71c>)
 800157a:	220c      	movs	r2, #12
 800157c:	701a      	strb	r2, [r3, #0]
 800157e:	e02c      	b.n	80015da <parse_ascii+0x686>
								}
							};
						}
						else
						{
							if ((cmd_index == CMD_SET_REM_CTL))        //SPC:CTL
 8001580:	8abb      	ldrh	r3, [r7, #20]
 8001582:	2b03      	cmp	r3, #3
 8001584:	d115      	bne.n	80015b2 <parse_ascii+0x65e>
							{

								if (negativ_zahl) {
 8001586:	4b3c      	ldr	r3, [pc, #240]	@ (8001678 <parse_ascii+0x724>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <parse_ascii+0x642>
									ret = CMR_PARAMETERINVALID;
 800158e:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <parse_ascii+0x71c>)
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
 8001594:	e021      	b.n	80015da <parse_ascii+0x686>
								} else {
									stack_data.parameter = val;
 8001596:	4b39      	ldr	r3, [pc, #228]	@ (800167c <parse_ascii+0x728>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]
									stack_data.rwflg = WRITE;
 800159c:	2302      	movs	r3, #2
 800159e:	74bb      	strb	r3, [r7, #18]
									ret = stack_insert_sero(stack_data);
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a4:	f000 ff22 	bl	80023ec <stack_insert_sero>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b30      	ldr	r3, [pc, #192]	@ (8001670 <parse_ascii+0x71c>)
 80015ae:	701a      	strb	r2, [r3, #0]
 80015b0:	e013      	b.n	80015da <parse_ascii+0x686>
								}

							} else {
								ret = CMR_COMMANDDENIED;
 80015b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001670 <parse_ascii+0x71c>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	701a      	strb	r2, [r3, #0]
 80015b8:	e00f      	b.n	80015da <parse_ascii+0x686>
							};
						};
					}
					else  //Lese-Operation
					{
						stack_data.parameter = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
						stack_data.rwflg = READ;
 80015be:	2301      	movs	r3, #1
 80015c0:	74bb      	strb	r3, [r7, #18]
						ret = stack_insert_sero(stack_data);
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c6:	f000 ff11 	bl	80023ec <stack_insert_sero>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <parse_ascii+0x71c>)
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e002      	b.n	80015da <parse_ascii+0x686>
					};

				}
				else         //Falls cmd_index = ASCII_CMD_MAX, d.h. der Befehl ist ungültig.
				{
					ret= CMR_UNKNOWNCOMMAND;
 80015d4:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <parse_ascii+0x71c>)
 80015d6:	2206      	movs	r2, #6
 80015d8:	701a      	strb	r2, [r3, #0]
				};
			};

			if (ret != STACK_CMDINSTACK)
 80015da:	4b25      	ldr	r3, [pc, #148]	@ (8001670 <parse_ascii+0x71c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b11      	cmp	r3, #17
 80015e2:	d00b      	beq.n	80015fc <parse_ascii+0x6a8>
			{
				output_ascii_cmdack(verbose, crlf, ret);
 80015e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <parse_ascii+0x70c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001668 <parse_ascii+0x714>)
 80015ec:	7812      	ldrb	r2, [r2, #0]
 80015ee:	b2d1      	uxtb	r1, r2
 80015f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001670 <parse_ascii+0x71c>)
 80015f2:	7812      	ldrb	r2, [r2, #0]
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f8de 	bl	80017b8 <output_ascii_cmdack>
			};

			uartRB_KickTx(&usart3_rb);
 80015fc:	4820      	ldr	r0, [pc, #128]	@ (8001680 <parse_ascii+0x72c>)
 80015fe:	f001 fa2f 	bl	8002a60 <uartRB_KickTx>
			strcpy(cmd,"");
 8001602:	4b16      	ldr	r3, [pc, #88]	@ (800165c <parse_ascii+0x708>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
			val=0;
 8001608:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <parse_ascii+0x728>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
			ret=0;
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <parse_ascii+0x71c>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
			pflag = 0;
 8001614:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <parse_ascii+0x720>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
			eflag = 0;
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <parse_ascii+0x730>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
			negativ_zahl = 0;
 8001620:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <parse_ascii+0x724>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]

			a_state = get_cmd;
 8001626:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <parse_ascii+0x734>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
			break;
 800162c:	e008      	b.n	8001640 <parse_ascii+0x6ec>

			default:
			a_state = get_cmd;
 800162e:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <parse_ascii+0x734>)
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]
			break;
 8001634:	e004      	b.n	8001640 <parse_ascii+0x6ec>
			break;
 8001636:	bf00      	nop
 8001638:	e002      	b.n	8001640 <parse_ascii+0x6ec>
			break;
 800163a:	bf00      	nop
 800163c:	e000      	b.n	8001640 <parse_ascii+0x6ec>
			break;
 800163e:	bf00      	nop

		//	char1[0]=nc;
		//  if(nzeichen >0)	uart1_put(char1, 1);
		//	versandstart1();

	}while ( ptr < nzeichen );
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <parse_ascii+0x738>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	7dfa      	ldrb	r2, [r7, #23]
 8001648:	429a      	cmp	r2, r3
 800164a:	f4ff ac8b 	bcc.w	8000f64 <parse_ascii+0x10>
}
 800164e:	bf00      	nop
 8001650:	bf00      	nop
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	08008bbc 	.word	0x08008bbc
 800165c:	20000124 	.word	0x20000124
 8001660:	200000ed 	.word	0x200000ed
 8001664:	200000ef 	.word	0x200000ef
 8001668:	200000ee 	.word	0x200000ee
 800166c:	200000f0 	.word	0x200000f0
 8001670:	20000147 	.word	0x20000147
 8001674:	20000144 	.word	0x20000144
 8001678:	20000146 	.word	0x20000146
 800167c:	20000140 	.word	0x20000140
 8001680:	20000dcc 	.word	0x20000dcc
 8001684:	20000145 	.word	0x20000145
 8001688:	20000001 	.word	0x20000001
 800168c:	20000103 	.word	0x20000103

08001690 <serialSendAnswer>:

void serialSendAnswer(uint8_t *message)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    uint8_t i;
	uint8_t n = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	77bb      	strb	r3, [r7, #30]
    uint8_t checksum = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	777b      	strb	r3, [r7, #29]
	char buffer[RMT_MAX_PAKET_LENGTH + 1];

		if((message[2] == 0x00) || (message[2] == 0x02) || (message[2] == 0x03) || (message[2] == 0x0A))    //für die Kompabilität vom altem MatchingCube-Programm. später zu löschen
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3302      	adds	r3, #2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00e      	beq.n	80016c8 <serialSendAnswer+0x38>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3302      	adds	r3, #2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d009      	beq.n	80016c8 <serialSendAnswer+0x38>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3302      	adds	r3, #2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d004      	beq.n	80016c8 <serialSendAnswer+0x38>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3302      	adds	r3, #2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b0a      	cmp	r3, #10
 80016c6:	d108      	bne.n	80016da <serialSendAnswer+0x4a>
		{
			message[2] |= 0x80;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3302      	adds	r3, #2
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3302      	adds	r3, #2
 80016d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]
		}

    buffer[n++] = RMT_DLE;
 80016da:	7fbb      	ldrb	r3, [r7, #30]
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	77ba      	strb	r2, [r7, #30]
 80016e0:	3320      	adds	r3, #32
 80016e2:	443b      	add	r3, r7
 80016e4:	223d      	movs	r2, #61	@ 0x3d
 80016e6:	f803 2c14 	strb.w	r2, [r3, #-20]
    buffer[n++] = RMT_SOT;
 80016ea:	7fbb      	ldrb	r3, [r7, #30]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	77ba      	strb	r2, [r7, #30]
 80016f0:	3320      	adds	r3, #32
 80016f2:	443b      	add	r3, r7
 80016f4:	2253      	movs	r2, #83	@ 0x53
 80016f6:	f803 2c14 	strb.w	r2, [r3, #-20]
    for ( i=0; i<(CMR_DATAPAKET_LENGTH-1); i++ )
 80016fa:	2300      	movs	r3, #0
 80016fc:	77fb      	strb	r3, [r7, #31]
 80016fe:	e025      	b.n	800174c <serialSendAnswer+0xbc>
    {
        buffer[n++] =message[i];
 8001700:	7ffb      	ldrb	r3, [r7, #31]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	441a      	add	r2, r3
 8001706:	7fbb      	ldrb	r3, [r7, #30]
 8001708:	1c59      	adds	r1, r3, #1
 800170a:	77b9      	strb	r1, [r7, #30]
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	3320      	adds	r3, #32
 8001710:	443b      	add	r3, r7
 8001712:	f803 2c14 	strb.w	r2, [r3, #-20]
        if ( message[i] == RMT_DLE )
 8001716:	7ffb      	ldrb	r3, [r7, #31]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4413      	add	r3, r2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b3d      	cmp	r3, #61	@ 0x3d
 8001720:	d10a      	bne.n	8001738 <serialSendAnswer+0xa8>
        {
            buffer[n++] = message[i];
 8001722:	7ffb      	ldrb	r3, [r7, #31]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	441a      	add	r2, r3
 8001728:	7fbb      	ldrb	r3, [r7, #30]
 800172a:	1c59      	adds	r1, r3, #1
 800172c:	77b9      	strb	r1, [r7, #30]
 800172e:	7812      	ldrb	r2, [r2, #0]
 8001730:	3320      	adds	r3, #32
 8001732:	443b      	add	r3, r7
 8001734:	f803 2c14 	strb.w	r2, [r3, #-20]
            // Die Prüfsumme erstreckt sich nur noch über die NETTO-Payload!
            //checksum += message[i];
        }
        checksum += message[i];
 8001738:	7ffb      	ldrb	r3, [r7, #31]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	7f7b      	ldrb	r3, [r7, #29]
 8001742:	4413      	add	r3, r2
 8001744:	777b      	strb	r3, [r7, #29]
    for ( i=0; i<(CMR_DATAPAKET_LENGTH-1); i++ )
 8001746:	7ffb      	ldrb	r3, [r7, #31]
 8001748:	3301      	adds	r3, #1
 800174a:	77fb      	strb	r3, [r7, #31]
 800174c:	7ffb      	ldrb	r3, [r7, #31]
 800174e:	2b06      	cmp	r3, #6
 8001750:	d9d6      	bls.n	8001700 <serialSendAnswer+0x70>
    }
    buffer[n++] =checksum;
 8001752:	7fbb      	ldrb	r3, [r7, #30]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	77ba      	strb	r2, [r7, #30]
 8001758:	3320      	adds	r3, #32
 800175a:	443b      	add	r3, r7
 800175c:	7f7a      	ldrb	r2, [r7, #29]
 800175e:	f803 2c14 	strb.w	r2, [r3, #-20]
    if ( checksum == RMT_DLE )
 8001762:	7f7b      	ldrb	r3, [r7, #29]
 8001764:	2b3d      	cmp	r3, #61	@ 0x3d
 8001766:	d107      	bne.n	8001778 <serialSendAnswer+0xe8>
    {
        buffer[n++] = checksum;
 8001768:	7fbb      	ldrb	r3, [r7, #30]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	77ba      	strb	r2, [r7, #30]
 800176e:	3320      	adds	r3, #32
 8001770:	443b      	add	r3, r7
 8001772:	7f7a      	ldrb	r2, [r7, #29]
 8001774:	f803 2c14 	strb.w	r2, [r3, #-20]
    }
    buffer[n++] = RMT_DLE;
 8001778:	7fbb      	ldrb	r3, [r7, #30]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	77ba      	strb	r2, [r7, #30]
 800177e:	3320      	adds	r3, #32
 8001780:	443b      	add	r3, r7
 8001782:	223d      	movs	r2, #61	@ 0x3d
 8001784:	f803 2c14 	strb.w	r2, [r3, #-20]
    buffer[n++] = RMT_EOT;
 8001788:	7fbb      	ldrb	r3, [r7, #30]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	77ba      	strb	r2, [r7, #30]
 800178e:	3320      	adds	r3, #32
 8001790:	443b      	add	r3, r7
 8001792:	2245      	movs	r2, #69	@ 0x45
 8001794:	f803 2c14 	strb.w	r2, [r3, #-20]

	uartRB_Put(&usart3_rb, buffer, n);
 8001798:	7fba      	ldrb	r2, [r7, #30]
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4619      	mov	r1, r3
 80017a0:	4804      	ldr	r0, [pc, #16]	@ (80017b4 <serialSendAnswer+0x124>)
 80017a2:	f001 f9a3 	bl	8002aec <uartRB_Put>
	uartRB_KickTx(&usart3_rb);
 80017a6:	4803      	ldr	r0, [pc, #12]	@ (80017b4 <serialSendAnswer+0x124>)
 80017a8:	f001 f95a 	bl	8002a60 <uartRB_KickTx>
}
 80017ac:	bf00      	nop
 80017ae:	3720      	adds	r7, #32
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000dcc 	.word	0x20000dcc

080017b8 <output_ascii_cmdack>:

void output_ascii_cmdack(uint8_t verbose_flg, uint8_t crlf_flg, uint8_t cmd_ack)
{
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b09c      	sub	sp, #112	@ 0x70
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	460b      	mov	r3, r1
 80017c4:	71bb      	strb	r3, [r7, #6]
 80017c6:	4613      	mov	r3, r2
 80017c8:	717b      	strb	r3, [r7, #5]

	if(verbose_flg>0)
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 81e3 	beq.w	8001b98 <output_ascii_cmdack+0x3e0>
	{
		if(cmd_ack== CMR_SUCCESSFULL)
 80017d2:	797b      	ldrb	r3, [r7, #5]
 80017d4:	2b80      	cmp	r3, #128	@ 0x80
 80017d6:	d105      	bne.n	80017e4 <output_ascii_cmdack+0x2c>
		{
			uartRB_Put(&usart3_rb,">OK;", 4);
 80017d8:	2204      	movs	r2, #4
 80017da:	49ba      	ldr	r1, [pc, #744]	@ (8001ac4 <output_ascii_cmdack+0x30c>)
 80017dc:	48ba      	ldr	r0, [pc, #744]	@ (8001ac8 <output_ascii_cmdack+0x310>)
 80017de:	f001 f985 	bl	8002aec <uartRB_Put>
 80017e2:	e1e8      	b.n	8001bb6 <output_ascii_cmdack+0x3fe>
		}
		else if (cmd_ack==CMR_SEMICOLONONLY)
 80017e4:	797b      	ldrb	r3, [r7, #5]
 80017e6:	2bff      	cmp	r3, #255	@ 0xff
 80017e8:	d105      	bne.n	80017f6 <output_ascii_cmdack+0x3e>
		{
			uartRB_Put(&usart3_rb,";", 1);
 80017ea:	2201      	movs	r2, #1
 80017ec:	49b7      	ldr	r1, [pc, #732]	@ (8001acc <output_ascii_cmdack+0x314>)
 80017ee:	48b6      	ldr	r0, [pc, #728]	@ (8001ac8 <output_ascii_cmdack+0x310>)
 80017f0:	f001 f97c 	bl	8002aec <uartRB_Put>
 80017f4:	e1df      	b.n	8001bb6 <output_ascii_cmdack+0x3fe>
		}
		else
		{
			if(verbose_flg==1)
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d143      	bne.n	8001884 <output_ascii_cmdack+0xcc>
			{
				char tmp[10];
				char tmp2[12];
				sprintf(tmp,"%3.3u",(cmd_ack & 0x7F));
 80017fc:	797b      	ldrb	r3, [r7, #5]
 80017fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001802:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001806:	49b2      	ldr	r1, [pc, #712]	@ (8001ad0 <output_ascii_cmdack+0x318>)
 8001808:	4618      	mov	r0, r3
 800180a:	f006 fd09 	bl	8008220 <siprintf>

				if(cmd_ack > 128)
 800180e:	797b      	ldrb	r3, [r7, #5]
 8001810:	2b80      	cmp	r3, #128	@ 0x80
 8001812:	d909      	bls.n	8001828 <output_ascii_cmdack+0x70>
				{
					strcpy(tmp2,">W");
 8001814:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001818:	4aae      	ldr	r2, [pc, #696]	@ (8001ad4 <output_ascii_cmdack+0x31c>)
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	4611      	mov	r1, r2
 800181e:	8019      	strh	r1, [r3, #0]
 8001820:	3302      	adds	r3, #2
 8001822:	0c12      	lsrs	r2, r2, #16
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e008      	b.n	800183a <output_ascii_cmdack+0x82>
				}
				else
				{
					strcpy(tmp2,">E");
 8001828:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800182c:	4aaa      	ldr	r2, [pc, #680]	@ (8001ad8 <output_ascii_cmdack+0x320>)
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	4611      	mov	r1, r2
 8001832:	8019      	strh	r1, [r3, #0]
 8001834:	3302      	adds	r3, #2
 8001836:	0c12      	lsrs	r2, r2, #16
 8001838:	701a      	strb	r2, [r3, #0]
				}
				strcat(tmp2,tmp);
 800183a:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800183e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f006 fd13 	bl	8008270 <strcat>
				strcat(tmp2,";");
 800184a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fcf0 	bl	8000234 <strlen>
 8001854:	4603      	mov	r3, r0
 8001856:	461a      	mov	r2, r3
 8001858:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800185c:	4413      	add	r3, r2
 800185e:	499b      	ldr	r1, [pc, #620]	@ (8001acc <output_ascii_cmdack+0x314>)
 8001860:	461a      	mov	r2, r3
 8001862:	460b      	mov	r3, r1
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	8013      	strh	r3, [r2, #0]
				uartRB_Put(&usart3_rb,tmp2, strlen(tmp2));
 8001868:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fce1 	bl	8000234 <strlen>
 8001872:	4603      	mov	r3, r0
 8001874:	b2da      	uxtb	r2, r3
 8001876:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800187a:	4619      	mov	r1, r3
 800187c:	4892      	ldr	r0, [pc, #584]	@ (8001ac8 <output_ascii_cmdack+0x310>)
 800187e:	f001 f935 	bl	8002aec <uartRB_Put>
 8001882:	e198      	b.n	8001bb6 <output_ascii_cmdack+0x3fe>
			}
			else if (verbose_flg==2)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	2b02      	cmp	r3, #2
 8001888:	f040 8195 	bne.w	8001bb6 <output_ascii_cmdack+0x3fe>
			{
				char tmp[35];
				char tmp2[40];
				if(cmd_ack > 128)
 800188c:	797b      	ldrb	r3, [r7, #5]
 800188e:	2b80      	cmp	r3, #128	@ 0x80
 8001890:	d904      	bls.n	800189c <output_ascii_cmdack+0xe4>
				{
					strcpy(tmp2,">W:");
 8001892:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001896:	4a91      	ldr	r2, [pc, #580]	@ (8001adc <output_ascii_cmdack+0x324>)
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e003      	b.n	80018a4 <output_ascii_cmdack+0xec>
				}
				else
				{
					strcpy(tmp2,">E:");
 800189c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018a0:	4a8f      	ldr	r2, [pc, #572]	@ (8001ae0 <output_ascii_cmdack+0x328>)
 80018a2:	601a      	str	r2, [r3, #0]
				}

				switch(cmd_ack & 0xFF)          //(cmd_ack & 0x7F)
 80018a4:	797b      	ldrb	r3, [r7, #5]
 80018a6:	2b8a      	cmp	r3, #138	@ 0x8a
 80018a8:	f000 8087 	beq.w	80019ba <output_ascii_cmdack+0x202>
 80018ac:	2b8a      	cmp	r3, #138	@ 0x8a
 80018ae:	f300 8144 	bgt.w	8001b3a <output_ascii_cmdack+0x382>
 80018b2:	2b83      	cmp	r3, #131	@ 0x83
 80018b4:	d075      	beq.n	80019a2 <output_ascii_cmdack+0x1ea>
 80018b6:	2b83      	cmp	r3, #131	@ 0x83
 80018b8:	f300 813f 	bgt.w	8001b3a <output_ascii_cmdack+0x382>
 80018bc:	2b1f      	cmp	r3, #31
 80018be:	dc49      	bgt.n	8001954 <output_ascii_cmdack+0x19c>
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f2c0 813a 	blt.w	8001b3a <output_ascii_cmdack+0x382>
 80018c6:	2b1f      	cmp	r3, #31
 80018c8:	f200 8137 	bhi.w	8001b3a <output_ascii_cmdack+0x382>
 80018cc:	a201      	add	r2, pc, #4	@ (adr r2, 80018d4 <output_ascii_cmdack+0x11c>)
 80018ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d2:	bf00      	nop
 80018d4:	0800195b 	.word	0x0800195b
 80018d8:	0800196f 	.word	0x0800196f
 80018dc:	08001b3b 	.word	0x08001b3b
 80018e0:	08001b3b 	.word	0x08001b3b
 80018e4:	08001b3b 	.word	0x08001b3b
 80018e8:	08001b3b 	.word	0x08001b3b
 80018ec:	080019e7 	.word	0x080019e7
 80018f0:	080019fb 	.word	0x080019fb
 80018f4:	08001a0d 	.word	0x08001a0d
 80018f8:	08001a75 	.word	0x08001a75
 80018fc:	08001b3b 	.word	0x08001b3b
 8001900:	080019cf 	.word	0x080019cf
 8001904:	08001a89 	.word	0x08001a89
 8001908:	08001a2d 	.word	0x08001a2d
 800190c:	08001a3f 	.word	0x08001a3f
 8001910:	08001a5b 	.word	0x08001a5b
 8001914:	08001aa5 	.word	0x08001aa5
 8001918:	08001b3b 	.word	0x08001b3b
 800191c:	08001b3b 	.word	0x08001b3b
 8001920:	08001b3b 	.word	0x08001b3b
 8001924:	08001b3b 	.word	0x08001b3b
 8001928:	08001b3b 	.word	0x08001b3b
 800192c:	08001b3b 	.word	0x08001b3b
 8001930:	08001b3b 	.word	0x08001b3b
 8001934:	08001b3b 	.word	0x08001b3b
 8001938:	08001b3b 	.word	0x08001b3b
 800193c:	08001b3b 	.word	0x08001b3b
 8001940:	08001b3b 	.word	0x08001b3b
 8001944:	08001b3b 	.word	0x08001b3b
 8001948:	08001b3b 	.word	0x08001b3b
 800194c:	08001b3b 	.word	0x08001b3b
 8001950:	08001b21 	.word	0x08001b21
 8001954:	2b82      	cmp	r3, #130	@ 0x82
 8001956:	d018      	beq.n	800198a <output_ascii_cmdack+0x1d2>
 8001958:	e0ef      	b.n	8001b3a <output_ascii_cmdack+0x382>
				{
					case CMR_COMMANDONDEMAND:
					strcpy(tmp, "No Answer!");
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4a61      	ldr	r2, [pc, #388]	@ (8001ae4 <output_ascii_cmdack+0x32c>)
 8001960:	ca07      	ldmia	r2, {r0, r1, r2}
 8001962:	c303      	stmia	r3!, {r0, r1}
 8001964:	801a      	strh	r2, [r3, #0]
 8001966:	3302      	adds	r3, #2
 8001968:	0c12      	lsrs	r2, r2, #16
 800196a:	701a      	strb	r2, [r3, #0]
					break;
 800196c:	e0ef      	b.n	8001b4e <output_ascii_cmdack+0x396>

					case CMR_PARAMETERINVALID:
					strcpy(tmp, "Parameter Invalid!");
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	4a5d      	ldr	r2, [pc, #372]	@ (8001ae8 <output_ascii_cmdack+0x330>)
 8001974:	461c      	mov	r4, r3
 8001976:	4615      	mov	r5, r2
 8001978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197c:	682b      	ldr	r3, [r5, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	8022      	strh	r2, [r4, #0]
 8001982:	3402      	adds	r4, #2
 8001984:	0c1b      	lsrs	r3, r3, #16
 8001986:	7023      	strb	r3, [r4, #0]
					break;
 8001988:	e0e1      	b.n	8001b4e <output_ascii_cmdack+0x396>

					case CMR_PARAMETERCLIPEDMIN:
					strcpy(tmp, "Parameter Clipped to Minimum!");
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	4a57      	ldr	r2, [pc, #348]	@ (8001aec <output_ascii_cmdack+0x334>)
 8001990:	461c      	mov	r4, r3
 8001992:	4615      	mov	r5, r2
 8001994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001998:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800199c:	c407      	stmia	r4!, {r0, r1, r2}
 800199e:	8023      	strh	r3, [r4, #0]
					break;
 80019a0:	e0d5      	b.n	8001b4e <output_ascii_cmdack+0x396>

					case CMR_PARAMETERCLIPEDMAX:
					strcpy(tmp, "Parameter Clipped to Maximum!");
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	4a52      	ldr	r2, [pc, #328]	@ (8001af0 <output_ascii_cmdack+0x338>)
 80019a8:	461c      	mov	r4, r3
 80019aa:	4615      	mov	r5, r2
 80019ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019b4:	c407      	stmia	r4!, {r0, r1, r2}
 80019b6:	8023      	strh	r3, [r4, #0]
					break;
 80019b8:	e0c9      	b.n	8001b4e <output_ascii_cmdack+0x396>

					case CMR_PARAMETERADJUSTED:
					strcpy(tmp, "Parameter Adjusted!");
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	4a4d      	ldr	r2, [pc, #308]	@ (8001af4 <output_ascii_cmdack+0x33c>)
 80019c0:	461c      	mov	r4, r3
 80019c2:	4615      	mov	r5, r2
 80019c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c8:	682b      	ldr	r3, [r5, #0]
 80019ca:	6023      	str	r3, [r4, #0]
					break;
 80019cc:	e0bf      	b.n	8001b4e <output_ascii_cmdack+0x396>

					case CMR_WRONGPARAMETERFORMAT:
					strcpy(tmp, "Wrong Parameter Format!");
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	4a49      	ldr	r2, [pc, #292]	@ (8001af8 <output_ascii_cmdack+0x340>)
 80019d4:	461c      	mov	r4, r3
 80019d6:	4615      	mov	r5, r2
 80019d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019e0:	e884 0003 	stmia.w	r4, {r0, r1}
					break;
 80019e4:	e0b3      	b.n	8001b4e <output_ascii_cmdack+0x396>

					case CMR_UNKNOWNCOMMAND:
					strcpy(tmp, "Unknown Command!");
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	4a44      	ldr	r2, [pc, #272]	@ (8001afc <output_ascii_cmdack+0x344>)
 80019ec:	461c      	mov	r4, r3
 80019ee:	4615      	mov	r5, r2
 80019f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f4:	682b      	ldr	r3, [r5, #0]
 80019f6:	7023      	strb	r3, [r4, #0]
					break;
 80019f8:	e0a9      	b.n	8001b4e <output_ascii_cmdack+0x396>

					case CMR_COMMANDDENIED:
					strcpy(tmp, "Command Denied!");
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	4a40      	ldr	r2, [pc, #256]	@ (8001b00 <output_ascii_cmdack+0x348>)
 8001a00:	461c      	mov	r4, r3
 8001a02:	4613      	mov	r3, r2
 8001a04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					break;
 8001a0a:	e0a0      	b.n	8001b4e <output_ascii_cmdack+0x396>

					case CMR_COMMANDNOTSUPPORTED:
					strcpy(tmp, "Command Not Supported!");
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	4a3c      	ldr	r2, [pc, #240]	@ (8001b04 <output_ascii_cmdack+0x34c>)
 8001a12:	461c      	mov	r4, r3
 8001a14:	4615      	mov	r5, r2
 8001a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a1e:	6020      	str	r0, [r4, #0]
 8001a20:	3404      	adds	r4, #4
 8001a22:	8021      	strh	r1, [r4, #0]
 8001a24:	3402      	adds	r4, #2
 8001a26:	0c0b      	lsrs	r3, r1, #16
 8001a28:	7023      	strb	r3, [r4, #0]
					break;
 8001a2a:	e090      	b.n	8001b4e <output_ascii_cmdack+0x396>

					case CMR_EEPROMERROR:
					strcpy(tmp, "EEPROM Error!");
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4a35      	ldr	r2, [pc, #212]	@ (8001b08 <output_ascii_cmdack+0x350>)
 8001a32:	461c      	mov	r4, r3
 8001a34:	4613      	mov	r3, r2
 8001a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a38:	c407      	stmia	r4!, {r0, r1, r2}
 8001a3a:	8023      	strh	r3, [r4, #0]
					break;
 8001a3c:	e087      	b.n	8001b4e <output_ascii_cmdack+0x396>

					case CMR_EEPWRLOCKED:
					strcpy(tmp, "EEPROM Write Lock!");
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	4a32      	ldr	r2, [pc, #200]	@ (8001b0c <output_ascii_cmdack+0x354>)
 8001a44:	461c      	mov	r4, r3
 8001a46:	4615      	mov	r5, r2
 8001a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	8022      	strh	r2, [r4, #0]
 8001a52:	3402      	adds	r4, #2
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	7023      	strb	r3, [r4, #0]
					break;
 8001a58:	e079      	b.n	8001b4e <output_ascii_cmdack+0x396>

					case CMR_WRONGOPMODE:
					strcpy(tmp, "Wrong Operation Mode!");
 8001a5a:	f107 030c 	add.w	r3, r7, #12
 8001a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b10 <output_ascii_cmdack+0x358>)
 8001a60:	461c      	mov	r4, r3
 8001a62:	4615      	mov	r5, r2
 8001a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a6c:	6020      	str	r0, [r4, #0]
 8001a6e:	3404      	adds	r4, #4
 8001a70:	8021      	strh	r1, [r4, #0]
					break;
 8001a72:	e06c      	b.n	8001b4e <output_ascii_cmdack+0x396>

					case CMR_UNITBUSY:
					strcpy(tmp, "Unit Busy!");
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	4a26      	ldr	r2, [pc, #152]	@ (8001b14 <output_ascii_cmdack+0x35c>)
 8001a7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a7c:	c303      	stmia	r3!, {r0, r1}
 8001a7e:	801a      	strh	r2, [r3, #0]
 8001a80:	3302      	adds	r3, #2
 8001a82:	0c12      	lsrs	r2, r2, #16
 8001a84:	701a      	strb	r2, [r3, #0]
					break;
 8001a86:	e062      	b.n	8001b4e <output_ascii_cmdack+0x396>

					case CMR_MISSINGPARAMETER:
					strcpy(tmp, "Missing Parameter!");
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	4a22      	ldr	r2, [pc, #136]	@ (8001b18 <output_ascii_cmdack+0x360>)
 8001a8e:	461c      	mov	r4, r3
 8001a90:	4615      	mov	r5, r2
 8001a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a96:	682b      	ldr	r3, [r5, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	8022      	strh	r2, [r4, #0]
 8001a9c:	3402      	adds	r4, #2
 8001a9e:	0c1b      	lsrs	r3, r3, #16
 8001aa0:	7023      	strb	r3, [r4, #0]
					break;
 8001aa2:	e054      	b.n	8001b4e <output_ascii_cmdack+0x396>

					case CMR_OPTIONNOTINSTALLED:
					strcpy(tmp, "Required Option Not Installed!");
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b1c <output_ascii_cmdack+0x364>)
 8001aaa:	461c      	mov	r4, r3
 8001aac:	4615      	mov	r5, r2
 8001aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ab6:	c407      	stmia	r4!, {r0, r1, r2}
 8001ab8:	8023      	strh	r3, [r4, #0]
 8001aba:	3402      	adds	r4, #2
 8001abc:	0c1b      	lsrs	r3, r3, #16
 8001abe:	7023      	strb	r3, [r4, #0]
					break;
 8001ac0:	e045      	b.n	8001b4e <output_ascii_cmdack+0x396>
 8001ac2:	bf00      	nop
 8001ac4:	08008bc0 	.word	0x08008bc0
 8001ac8:	20000dcc 	.word	0x20000dcc
 8001acc:	08008bc8 	.word	0x08008bc8
 8001ad0:	08008bcc 	.word	0x08008bcc
 8001ad4:	08008bd4 	.word	0x08008bd4
 8001ad8:	08008bd8 	.word	0x08008bd8
 8001adc:	003a573e 	.word	0x003a573e
 8001ae0:	003a453e 	.word	0x003a453e
 8001ae4:	08008bdc 	.word	0x08008bdc
 8001ae8:	08008be8 	.word	0x08008be8
 8001aec:	08008bfc 	.word	0x08008bfc
 8001af0:	08008c1c 	.word	0x08008c1c
 8001af4:	08008c3c 	.word	0x08008c3c
 8001af8:	08008c50 	.word	0x08008c50
 8001afc:	08008c68 	.word	0x08008c68
 8001b00:	08008c7c 	.word	0x08008c7c
 8001b04:	08008c8c 	.word	0x08008c8c
 8001b08:	08008ca4 	.word	0x08008ca4
 8001b0c:	08008cb4 	.word	0x08008cb4
 8001b10:	08008cc8 	.word	0x08008cc8
 8001b14:	08008ce0 	.word	0x08008ce0
 8001b18:	08008cec 	.word	0x08008cec
 8001b1c:	08008d00 	.word	0x08008d00

					case CMR_MALFORMATTEDCOMMAND:
					strcpy(tmp, "Malformatted Command!");
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	4a31      	ldr	r2, [pc, #196]	@ (8001bec <output_ascii_cmdack+0x434>)
 8001b26:	461c      	mov	r4, r3
 8001b28:	4615      	mov	r5, r2
 8001b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b32:	6020      	str	r0, [r4, #0]
 8001b34:	3404      	adds	r4, #4
 8001b36:	8021      	strh	r1, [r4, #0]
					break;
 8001b38:	e009      	b.n	8001b4e <output_ascii_cmdack+0x396>


					default:
					sprintf(tmp,"%3.3u",(cmd_ack & 0x7F));
 8001b3a:	797b      	ldrb	r3, [r7, #5]
 8001b3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	492a      	ldr	r1, [pc, #168]	@ (8001bf0 <output_ascii_cmdack+0x438>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f006 fb6a 	bl	8008220 <siprintf>
					break;
 8001b4c:	bf00      	nop
				}

				strcat(tmp2,tmp);
 8001b4e:	f107 020c 	add.w	r2, r7, #12
 8001b52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f006 fb89 	bl	8008270 <strcat>
				strcat(tmp2,";");
 8001b5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fb66 	bl	8000234 <strlen>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b70:	4413      	add	r3, r2
 8001b72:	4920      	ldr	r1, [pc, #128]	@ (8001bf4 <output_ascii_cmdack+0x43c>)
 8001b74:	461a      	mov	r2, r3
 8001b76:	460b      	mov	r3, r1
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	8013      	strh	r3, [r2, #0]
				uartRB_Put(&usart3_rb,tmp2, strlen(tmp2));
 8001b7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fb57 	bl	8000234 <strlen>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4819      	ldr	r0, [pc, #100]	@ (8001bf8 <output_ascii_cmdack+0x440>)
 8001b92:	f000 ffab 	bl	8002aec <uartRB_Put>
 8001b96:	e00e      	b.n	8001bb6 <output_ascii_cmdack+0x3fe>
			}
		}
	}
	else
	{
		if (cmd_ack != STACK_CMDINSTACK)
 8001b98:	797b      	ldrb	r3, [r7, #5]
 8001b9a:	2b11      	cmp	r3, #17
 8001b9c:	d00b      	beq.n	8001bb6 <output_ascii_cmdack+0x3fe>
		{
			//if (((cmd_ack & 0x80) == CMR_SUCCESSFULL))
			if((cmd_ack == CMR_SEMICOLONONLY) || ((cmd_ack & 0x80) == CMR_SUCCESSFULL))
 8001b9e:	797b      	ldrb	r3, [r7, #5]
 8001ba0:	2bff      	cmp	r3, #255	@ 0xff
 8001ba2:	d003      	beq.n	8001bac <output_ascii_cmdack+0x3f4>
 8001ba4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	da04      	bge.n	8001bb6 <output_ascii_cmdack+0x3fe>
				uartRB_Put(&usart3_rb,";", 1);
 8001bac:	2201      	movs	r2, #1
 8001bae:	4911      	ldr	r1, [pc, #68]	@ (8001bf4 <output_ascii_cmdack+0x43c>)
 8001bb0:	4811      	ldr	r0, [pc, #68]	@ (8001bf8 <output_ascii_cmdack+0x440>)
 8001bb2:	f000 ff9b 	bl	8002aec <uartRB_Put>

		};
	}

	if((crlf_flg & 0x01) > 0)
 8001bb6:	79bb      	ldrb	r3, [r7, #6]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	dd04      	ble.n	8001bca <output_ascii_cmdack+0x412>
	{	//crlf_char= "\r";        //d.h. CR
		uartRB_Put(&usart3_rb,"\r", 1);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	490e      	ldr	r1, [pc, #56]	@ (8001bfc <output_ascii_cmdack+0x444>)
 8001bc4:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <output_ascii_cmdack+0x440>)
 8001bc6:	f000 ff91 	bl	8002aec <uartRB_Put>
	}
	if((crlf_flg & 0x02) > 0)
 8001bca:	79bb      	ldrb	r3, [r7, #6]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	dd04      	ble.n	8001bde <output_ascii_cmdack+0x426>
	{	//*crlf_char=";
		uartRB_Put(&usart3_rb,"\n", 1);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	490a      	ldr	r1, [pc, #40]	@ (8001c00 <output_ascii_cmdack+0x448>)
 8001bd8:	4807      	ldr	r0, [pc, #28]	@ (8001bf8 <output_ascii_cmdack+0x440>)
 8001bda:	f000 ff87 	bl	8002aec <uartRB_Put>
	}
	uartRB_KickTx(&usart3_rb);
 8001bde:	4806      	ldr	r0, [pc, #24]	@ (8001bf8 <output_ascii_cmdack+0x440>)
 8001be0:	f000 ff3e 	bl	8002a60 <uartRB_KickTx>
}
 8001be4:	bf00      	nop
 8001be6:	3770      	adds	r7, #112	@ 0x70
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bdb0      	pop	{r4, r5, r7, pc}
 8001bec:	08008d20 	.word	0x08008d20
 8001bf0:	08008bcc 	.word	0x08008bcc
 8001bf4:	08008bc8 	.word	0x08008bc8
 8001bf8:	20000dcc 	.word	0x20000dcc
 8001bfc:	08008d38 	.word	0x08008d38
 8001c00:	08008d3c 	.word	0x08008d3c

08001c04 <Binary_Search>:

//Die interne Befehlnummer werden für den eingegebenen Befehl zurückgeliefert.
void Binary_Search(uint8_t ncmd, char* key, uint16_t *cmdindex)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	73fb      	strb	r3, [r7, #15]
	volatile uint16_t low = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	83fb      	strh	r3, [r7, #30]
	volatile uint16_t high =  ncmd - 1;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	83bb      	strh	r3, [r7, #28]
	volatile uint16_t mid;
	volatile int sflag;
	volatile uint8_t flag = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	74fb      	strb	r3, [r7, #19]

	while ((low <= high) && (flag == 0))
 8001c24:	e045      	b.n	8001cb2 <Binary_Search+0xae>
	{
		mid = ((low + high) >> 1);
 8001c26:	8bfb      	ldrh	r3, [r7, #30]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	8bbb      	ldrh	r3, [r7, #28]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	105b      	asrs	r3, r3, #1
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	837b      	strh	r3, [r7, #26]
		sflag = strcmp(key, (char*)&(ASCIICmdTable[mid].cmdline));
 8001c38:	8b7b      	ldrh	r3, [r7, #26]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	2316      	movs	r3, #22
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	4a27      	ldr	r2, [pc, #156]	@ (8001ce4 <Binary_Search+0xe0>)
 8001c46:	4413      	add	r3, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	68b8      	ldr	r0, [r7, #8]
 8001c4c:	f7fe fae8 	bl	8000220 <strcmp>
 8001c50:	4603      	mov	r3, r0
 8001c52:	617b      	str	r3, [r7, #20]

		if(sflag < 0)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	da12      	bge.n	8001c80 <Binary_Search+0x7c>
		{
		    if(mid != 0) {
 8001c5a:	8b7b      	ldrh	r3, [r7, #26]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <Binary_Search+0x6a>
		        high = mid - 1;
 8001c62:	8b7b      	ldrh	r3, [r7, #26]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	83bb      	strh	r3, [r7, #28]
 8001c6c:	e005      	b.n	8001c7a <Binary_Search+0x76>
		    } else {
		        if(low != 0) {
 8001c6e:	8bfb      	ldrh	r3, [r7, #30]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d028      	beq.n	8001cc8 <Binary_Search+0xc4>
		            high = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	83bb      	strh	r3, [r7, #28]
		        } else {
		            break;
		        }
		    }
			flag = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	74fb      	strb	r3, [r7, #19]
 8001c7e:	e018      	b.n	8001cb2 <Binary_Search+0xae>
		}
		else if(sflag == 0)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10e      	bne.n	8001ca4 <Binary_Search+0xa0>
		{

			*cmdindex =ASCIICmdTable[mid].cmdindex;
 8001c86:	8b7b      	ldrh	r3, [r7, #26]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4a15      	ldr	r2, [pc, #84]	@ (8001ce4 <Binary_Search+0xe0>)
 8001c8e:	2316      	movs	r3, #22
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	3314      	adds	r3, #20
 8001c98:	881a      	ldrh	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	801a      	strh	r2, [r3, #0]
			flag = 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	74fb      	strb	r3, [r7, #19]
 8001ca2:	e006      	b.n	8001cb2 <Binary_Search+0xae>
		}
		else
		{
			low = mid + 1;
 8001ca4:	8b7b      	ldrh	r3, [r7, #26]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	83fb      	strh	r3, [r7, #30]
			flag = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	74fb      	strb	r3, [r7, #19]
	while ((low <= high) && (flag == 0))
 8001cb2:	8bfb      	ldrh	r3, [r7, #30]
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	8bbb      	ldrh	r3, [r7, #28]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d805      	bhi.n	8001cca <Binary_Search+0xc6>
 8001cbe:	7cfb      	ldrb	r3, [r7, #19]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0af      	beq.n	8001c26 <Binary_Search+0x22>
 8001cc6:	e000      	b.n	8001cca <Binary_Search+0xc6>
		            break;
 8001cc8:	bf00      	nop
		}

	};

	if (flag == 0)   //Falls die Tabelle diesen Befehl nicht enthältet,
 8001cca:	7cfb      	ldrb	r3, [r7, #19]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d103      	bne.n	8001cda <Binary_Search+0xd6>
	{
		*cmdindex = BINARY_INDEX_MAX;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cd8:	801a      	strh	r2, [r3, #0]
	};
}
 8001cda:	bf00      	nop
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	08008d48 	.word	0x08008d48

08001ce8 <output_ascii_result>:


void output_ascii_result(uint8_t verbose_data, uint8_t crlf_data, stack_item *result_data)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	603a      	str	r2, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	71bb      	strb	r3, [r7, #6]
	//uart0_puts("output");
	switch (result_data->rwflg)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	7b9b      	ldrb	r3, [r3, #14]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d002      	beq.n	8001d06 <output_ascii_result+0x1e>
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d029      	beq.n	8001d58 <output_ascii_result+0x70>
		break;
		case WRITE:
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
		break;
	};
}
 8001d04:	e030      	b.n	8001d68 <output_ascii_result+0x80>
		switch (result_data->cmd_index)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	885b      	ldrh	r3, [r3, #2]
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	d017      	beq.n	8001d3e <output_ascii_result+0x56>
 8001d0e:	2b0e      	cmp	r3, #14
 8001d10:	d017      	beq.n	8001d42 <output_ascii_result+0x5a>
			if ((result_data->cmd_ack == CMR_SUCCESSFULL)||(result_data->cmd_ack == CMR_PARAMETERCLIPEDMIN) || (result_data->cmd_ack == CMR_PARAMETERCLIPEDMAX) || (result_data->cmd_ack == CMR_PARAMETERADJUSTED))
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	791b      	ldrb	r3, [r3, #4]
 8001d16:	2b80      	cmp	r3, #128	@ 0x80
 8001d18:	d00b      	beq.n	8001d32 <output_ascii_result+0x4a>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	791b      	ldrb	r3, [r3, #4]
 8001d1e:	2b82      	cmp	r3, #130	@ 0x82
 8001d20:	d007      	beq.n	8001d32 <output_ascii_result+0x4a>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	791b      	ldrb	r3, [r3, #4]
 8001d26:	2b83      	cmp	r3, #131	@ 0x83
 8001d28:	d003      	beq.n	8001d32 <output_ascii_result+0x4a>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	791b      	ldrb	r3, [r3, #4]
 8001d2e:	2b8a      	cmp	r3, #138	@ 0x8a
 8001d30:	d109      	bne.n	8001d46 <output_ascii_result+0x5e>
			{output_ascii(result_data->parameter);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f850 	bl	8001ddc <output_ascii>
			break;
 8001d3c:	e003      	b.n	8001d46 <output_ascii_result+0x5e>
			break;
 8001d3e:	bf00      	nop
 8001d40:	e002      	b.n	8001d48 <output_ascii_result+0x60>
			break;
 8001d42:	bf00      	nop
 8001d44:	e000      	b.n	8001d48 <output_ascii_result+0x60>
			break;
 8001d46:	bf00      	nop
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	791a      	ldrb	r2, [r3, #4]
 8001d4c:	79b9      	ldrb	r1, [r7, #6]
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fd31 	bl	80017b8 <output_ascii_cmdack>
		break;
 8001d56:	e007      	b.n	8001d68 <output_ascii_result+0x80>
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	791a      	ldrb	r2, [r3, #4]
 8001d5c:	79b9      	ldrb	r1, [r7, #6]
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fd29 	bl	80017b8 <output_ascii_cmdack>
		break;
 8001d66:	bf00      	nop
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <output_binary_result>:

void output_binary_result(stack_item *cmd)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	uint8_t buffer[7];
	uint16_t s_tmp = cmd->cmd_sender;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	82fb      	strh	r3, [r7, #22]
	uint16_t r_tmp = cmd->cmd_receiver;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	785b      	ldrb	r3, [r3, #1]
 8001d82:	82bb      	strh	r3, [r7, #20]
	int32_t param = cmd->parameter;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	613b      	str	r3, [r7, #16]

	buffer[0] = (s_tmp << 5) | (r_tmp << 3);
 8001d8a:	8afb      	ldrh	r3, [r7, #22]
 8001d8c:	015b      	lsls	r3, r3, #5
 8001d8e:	b25a      	sxtb	r2, r3
 8001d90:	8abb      	ldrh	r3, [r7, #20]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b25b      	sxtb	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	723b      	strb	r3, [r7, #8]
	buffer[1] = cmd->cmd_index;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	885b      	ldrh	r3, [r3, #2]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	727b      	strb	r3, [r7, #9]
	buffer[2] = cmd->cmd_ack;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	791b      	ldrb	r3, [r3, #4]
 8001daa:	72bb      	strb	r3, [r7, #10]
	buffer[3] = (param >> 24) & 0xFF;
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	0e1b      	lsrs	r3, r3, #24
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	72fb      	strb	r3, [r7, #11]
	buffer[4] = (param >> 16) & 0xFF;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	141b      	asrs	r3, r3, #16
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	733b      	strb	r3, [r7, #12]
	buffer[5] = (param >> 8) & 0xFF;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	121b      	asrs	r3, r3, #8
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	737b      	strb	r3, [r7, #13]
	buffer[6] = param & 0xFF;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	73bb      	strb	r3, [r7, #14]
	serialSendAnswer(buffer);
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fc5e 	bl	8001690 <serialSendAnswer>
}
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <output_ascii>:

 void output_ascii(int32_t val)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	@ 0x30
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	char tmp[34];
	sprintf(tmp,"%-ld",val);
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	490c      	ldr	r1, [pc, #48]	@ (8001e1c <output_ascii+0x40>)
 8001dec:	4618      	mov	r0, r3
 8001dee:	f006 fa17 	bl	8008220 <siprintf>
	uartRB_Put(&usart3_rb,tmp, strlen(tmp));
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fa1c 	bl	8000234 <strlen>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	4619      	mov	r1, r3
 8001e06:	4806      	ldr	r0, [pc, #24]	@ (8001e20 <output_ascii+0x44>)
 8001e08:	f000 fe70 	bl	8002aec <uartRB_Put>
	uartRB_KickTx(&usart3_rb);
 8001e0c:	4804      	ldr	r0, [pc, #16]	@ (8001e20 <output_ascii+0x44>)
 8001e0e:	f000 fe27 	bl	8002a60 <uartRB_KickTx>
}
 8001e12:	bf00      	nop
 8001e14:	3730      	adds	r7, #48	@ 0x30
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	08008d40 	.word	0x08008d40
 8001e20:	20000dcc 	.word	0x20000dcc

08001e24 <remote_ascii_verbose>:


uint8_t remote_ascii_verbose(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
	return verbose;
 8001e28:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <remote_ascii_verbose+0x14>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	200000ed 	.word	0x200000ed

08001e3c <remote_ascii_crlf>:

uint8_t remote_ascii_crlf(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
	return crlf;
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <remote_ascii_crlf+0x14>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	b2db      	uxtb	r3, r3
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	200000ee 	.word	0x200000ee

08001e54 <resultQueue_init>:
//void output_touch_result(stack_item *cmd);
//void spi_SendAnswer(uint8_t *message);

//--------------FUNKTIONSDEFINITIONS-----------------------------------------------------------------------------------------
void resultQueue_init(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
	resultQueue_in = 0;
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <resultQueue_init+0x1c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
	resultQueue_out = 0;
 8001e5e:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <resultQueue_init+0x20>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000508 	.word	0x20000508
 8001e74:	20000509 	.word	0x20000509

08001e78 <get_anzFrei_resultQueue>:

uint8_t get_anzFrei_resultQueue(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
	int8_t x;
	//ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		x = resultQueue_in - resultQueue_out;
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <get_anzFrei_resultQueue+0x3c>)
 8001e80:	781a      	ldrb	r2, [r3, #0]
 8001e82:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb8 <get_anzFrei_resultQueue+0x40>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	71fb      	strb	r3, [r7, #7]
		if (x < 0) x = x + RESULT_QUEUE_SIZE;
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	da03      	bge.n	8001e9c <get_anzFrei_resultQueue+0x24>
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	333c      	adds	r3, #60	@ 0x3c
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	71fb      	strb	r3, [r7, #7]
		x = RESULT_QUEUE_SIZE - x;
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	71fb      	strb	r3, [r7, #7]
	}
	return x;
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	20000508 	.word	0x20000508
 8001eb8:	20000509 	.word	0x20000509

08001ebc <get_anzBes_resultQueue>:

uint8_t get_anzBes_resultQueue(void)
{	int8_t x;
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
	//ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		x = resultQueue_in - resultQueue_out;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <get_anzBes_resultQueue+0x34>)
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <get_anzBes_resultQueue+0x38>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	71fb      	strb	r3, [r7, #7]
		if (x < 0) x = x + RESULT_QUEUE_SIZE;
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	da03      	bge.n	8001ee0 <get_anzBes_resultQueue+0x24>
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	333c      	adds	r3, #60	@ 0x3c
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	71fb      	strb	r3, [r7, #7]
	}
	return x;
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000508 	.word	0x20000508
 8001ef4:	20000509 	.word	0x20000509

08001ef8 <resultQueue_push>:

uint8_t resultQueue_push (stack_item  sitem)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	463c      	mov	r4, r7
 8001f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp = get_anzFrei_resultQueue();
 8001f04:	f7ff ffb8 	bl	8001e78 <get_anzFrei_resultQueue>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	75bb      	strb	r3, [r7, #22]

	uint8_t flag =0;  // der Flag bedeutet, ob das Hinfuegen des Commando in Queue erfolgreich ist: 0= Nicht erfolgreich, 1= Erfolgreich
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	75fb      	strb	r3, [r7, #23]

	if (tmp > 1)
 8001f10:	7dbb      	ldrb	r3, [r7, #22]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d919      	bls.n	8001f4a <resultQueue_push+0x52>
	{
		resultQueue[resultQueue_in] = sitem;
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <resultQueue_push+0x60>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	4a10      	ldr	r2, [pc, #64]	@ (8001f5c <resultQueue_push+0x64>)
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	4413      	add	r3, r2
 8001f20:	461c      	mov	r4, r3
 8001f22:	463b      	mov	r3, r7
 8001f24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		resultQueue_in ++;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <resultQueue_push+0x60>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <resultQueue_push+0x60>)
 8001f34:	701a      	strb	r2, [r3, #0]
		if (resultQueue_in >= RESULT_QUEUE_SIZE) resultQueue_in =0;
 8001f36:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <resultQueue_push+0x60>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b3b      	cmp	r3, #59	@ 0x3b
 8001f3c:	d902      	bls.n	8001f44 <resultQueue_push+0x4c>
 8001f3e:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <resultQueue_push+0x60>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8001f44:	2301      	movs	r3, #1
 8001f46:	75fb      	strb	r3, [r7, #23]
 8001f48:	e001      	b.n	8001f4e <resultQueue_push+0x56>
	}
	else
	{
		flag = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	75fb      	strb	r3, [r7, #23]
	};
	return flag;
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd90      	pop	{r4, r7, pc}
 8001f58:	20000508 	.word	0x20000508
 8001f5c:	20000148 	.word	0x20000148

08001f60 <resultQueue_pop>:

void resultQueue_pop(stack_item *sitem)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	uint8_t tmp =get_anzFrei_resultQueue();
 8001f68:	f7ff ff86 	bl	8001e78 <get_anzFrei_resultQueue>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]

	if (tmp < RESULT_QUEUE_SIZE )
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	2b3b      	cmp	r3, #59	@ 0x3b
 8001f74:	d817      	bhi.n	8001fa6 <resultQueue_pop+0x46>
	{
		*sitem = resultQueue[resultQueue_out];
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <resultQueue_pop+0x50>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb4 <resultQueue_pop+0x54>)
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	4413      	add	r3, r2
 8001f82:	460c      	mov	r4, r1
 8001f84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		resultQueue_out ++;
 8001f8a:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <resultQueue_pop+0x50>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b07      	ldr	r3, [pc, #28]	@ (8001fb0 <resultQueue_pop+0x50>)
 8001f94:	701a      	strb	r2, [r3, #0]
		if (resultQueue_out >= RESULT_QUEUE_SIZE) resultQueue_out = 0;
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <resultQueue_pop+0x50>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b3b      	cmp	r3, #59	@ 0x3b
 8001f9c:	d903      	bls.n	8001fa6 <resultQueue_pop+0x46>
 8001f9e:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <resultQueue_pop+0x50>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
	};
	return;
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
}
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000509 	.word	0x20000509
 8001fb4:	20000148 	.word	0x20000148

08001fb8 <result_get_sero>:

void result_get_sero(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
	stack_item cmd_tmp;
	uint8_t verbose_tmp = remote_ascii_verbose();
 8001fbe:	f7ff ff31 	bl	8001e24 <remote_ascii_verbose>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	75fb      	strb	r3, [r7, #23]
	uint8_t crlf_tmp = remote_ascii_crlf();
 8001fc6:	f7ff ff39 	bl	8001e3c <remote_ascii_crlf>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	75bb      	strb	r3, [r7, #22]

	while (get_anzBes_resultQueue() > 0 )
 8001fce:	e015      	b.n	8001ffc <result_get_sero+0x44>
	{
		resultQueue_pop(&cmd_tmp);
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ffc4 	bl	8001f60 <resultQueue_pop>
		//uart0_puts("result");
		//uart0_puti(cmd_tmp.cmd_index);
		//uart0_puti(cmd_tmp.cmd_ack);
		//uart0_puti(cmd_tmp.parameter);
		switch (cmd_tmp.cmd_sender)
 8001fd8:	793b      	ldrb	r3, [r7, #4]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d008      	beq.n	8001ff0 <result_get_sero+0x38>
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d10b      	bne.n	8001ffa <result_get_sero+0x42>
			//case Q_TOUCHPANEL:
				//output_touch_result(&cmd_tmp);
			//	break;
			case Q_RS232_ASCII:
				//uart0_puts("ASC");
				output_ascii_result(verbose_tmp, crlf_tmp, &cmd_tmp);
 8001fe2:	1d3a      	adds	r2, r7, #4
 8001fe4:	7db9      	ldrb	r1, [r7, #22]
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fe7d 	bl	8001ce8 <output_ascii_result>
				break;
 8001fee:	e005      	b.n	8001ffc <result_get_sero+0x44>
			case Q_RS232_BINARY:
				output_binary_result(&cmd_tmp);
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff febc 	bl	8001d70 <output_binary_result>
				break;
 8001ff8:	e000      	b.n	8001ffc <result_get_sero+0x44>
//				output_userport_result(&cmd_tmp);
//			case Q_ZENTRALE:
//				zentrale_match_get_sero(&cmd_tmp);
//				break;
			default:
				break;
 8001ffa:	bf00      	nop
	while (get_anzBes_resultQueue() > 0 )
 8001ffc:	f7ff ff5e 	bl	8001ebc <get_anzBes_resultQueue>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1e4      	bne.n	8001fd0 <result_get_sero+0x18>
		};
	};

	return;
 8002006:	bf00      	nop
}
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002014:	4b1b      	ldr	r3, [pc, #108]	@ (8002084 <MX_SPI1_Init+0x74>)
 8002016:	4a1c      	ldr	r2, [pc, #112]	@ (8002088 <MX_SPI1_Init+0x78>)
 8002018:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800201a:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <MX_SPI1_Init+0x74>)
 800201c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002020:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002022:	4b18      	ldr	r3, [pc, #96]	@ (8002084 <MX_SPI1_Init+0x74>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002028:	4b16      	ldr	r3, [pc, #88]	@ (8002084 <MX_SPI1_Init+0x74>)
 800202a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800202e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002030:	4b14      	ldr	r3, [pc, #80]	@ (8002084 <MX_SPI1_Init+0x74>)
 8002032:	2202      	movs	r2, #2
 8002034:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002036:	4b13      	ldr	r3, [pc, #76]	@ (8002084 <MX_SPI1_Init+0x74>)
 8002038:	2200      	movs	r2, #0
 800203a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800203c:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <MX_SPI1_Init+0x74>)
 800203e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002042:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002044:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <MX_SPI1_Init+0x74>)
 8002046:	2220      	movs	r2, #32
 8002048:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800204a:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <MX_SPI1_Init+0x74>)
 800204c:	2200      	movs	r2, #0
 800204e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002050:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <MX_SPI1_Init+0x74>)
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002056:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <MX_SPI1_Init+0x74>)
 8002058:	2200      	movs	r2, #0
 800205a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <MX_SPI1_Init+0x74>)
 800205e:	2207      	movs	r2, #7
 8002060:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002062:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <MX_SPI1_Init+0x74>)
 8002064:	2200      	movs	r2, #0
 8002066:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <MX_SPI1_Init+0x74>)
 800206a:	2200      	movs	r2, #0
 800206c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800206e:	4805      	ldr	r0, [pc, #20]	@ (8002084 <MX_SPI1_Init+0x74>)
 8002070:	f003 fc80 	bl	8005974 <HAL_SPI_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800207a:	f7fe fc70 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	2000050c 	.word	0x2000050c
 8002088:	40013000 	.word	0x40013000

0800208c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	@ 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a17      	ldr	r2, [pc, #92]	@ (8002108 <HAL_SPI_MspInit+0x7c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d128      	bne.n	8002100 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ae:	4b17      	ldr	r3, [pc, #92]	@ (800210c <HAL_SPI_MspInit+0x80>)
 80020b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b2:	4a16      	ldr	r2, [pc, #88]	@ (800210c <HAL_SPI_MspInit+0x80>)
 80020b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ba:	4b14      	ldr	r3, [pc, #80]	@ (800210c <HAL_SPI_MspInit+0x80>)
 80020bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	4b11      	ldr	r3, [pc, #68]	@ (800210c <HAL_SPI_MspInit+0x80>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ca:	4a10      	ldr	r2, [pc, #64]	@ (800210c <HAL_SPI_MspInit+0x80>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d2:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <HAL_SPI_MspInit+0x80>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020de:	23e0      	movs	r3, #224	@ 0xe0
 80020e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ee:	2305      	movs	r3, #5
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020fc:	f002 fa3e 	bl	800457c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002100:	bf00      	nop
 8002102:	3728      	adds	r7, #40	@ 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40013000 	.word	0x40013000
 800210c:	40021000 	.word	0x40021000

08002110 <stacks_init>:
uint8_t zstackindex_list_act_get(void);
uint8_t mcstackindex_list_act_get(void);

//--- FUNKTIONSDEFINITIONS --------------------------------------------------------------------------------------------------
void stacks_init(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	71fb      	strb	r3, [r7, #7]

	zstackindex_list_act = Z_STACK_SIZE -1;        //alle Stackindexe sind frei
 800211a:	4b20      	ldr	r3, [pc, #128]	@ (800219c <stacks_init+0x8c>)
 800211c:	221d      	movs	r2, #29
 800211e:	701a      	strb	r2, [r3, #0]
	mcstackindex_list_act = MC_STACK_SIZE -1;
 8002120:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <stacks_init+0x90>)
 8002122:	2213      	movs	r2, #19
 8002124:	701a      	strb	r2, [r3, #0]
	mcstack_rest_length = MC_STACK_SIZE - MCSTACK_ZENTRALE_RESERVATION;
 8002126:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <stacks_init+0x94>)
 8002128:	2212      	movs	r2, #18
 800212a:	701a      	strb	r2, [r3, #0]


	for (i = 0; i < Z_STACK_SIZE; i++)
 800212c:	2300      	movs	r3, #0
 800212e:	71fb      	strb	r3, [r7, #7]
 8002130:	e011      	b.n	8002156 <stacks_init+0x46>
	{
		zentrale_stack[i].next = NONEXT;
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	4a1c      	ldr	r2, [pc, #112]	@ (80021a8 <stacks_init+0x98>)
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	4413      	add	r3, r2
 800213a:	330c      	adds	r3, #12
 800213c:	22ff      	movs	r2, #255	@ 0xff
 800213e:	701a      	strb	r2, [r3, #0]
		zstackindex_list[i] = zstackindex_list_act - i;   //alle freien Stackindexe sind abwärts in die Stackindex-Liste(aufwärts) gelegt.
 8002140:	4b16      	ldr	r3, [pc, #88]	@ (800219c <stacks_init+0x8c>)
 8002142:	7819      	ldrb	r1, [r3, #0]
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	79fa      	ldrb	r2, [r7, #7]
 8002148:	1a8a      	subs	r2, r1, r2
 800214a:	b2d1      	uxtb	r1, r2
 800214c:	4a17      	ldr	r2, [pc, #92]	@ (80021ac <stacks_init+0x9c>)
 800214e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < Z_STACK_SIZE; i++)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	3301      	adds	r3, #1
 8002154:	71fb      	strb	r3, [r7, #7]
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	2b1d      	cmp	r3, #29
 800215a:	d9ea      	bls.n	8002132 <stacks_init+0x22>
	};

	for (i = 0; i < MC_STACK_SIZE; i++)
 800215c:	2300      	movs	r3, #0
 800215e:	71fb      	strb	r3, [r7, #7]
 8002160:	e011      	b.n	8002186 <stacks_init+0x76>
	{
		mc_stack[i].next = NONEXT;
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	4a12      	ldr	r2, [pc, #72]	@ (80021b0 <stacks_init+0xa0>)
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	4413      	add	r3, r2
 800216a:	330c      	adds	r3, #12
 800216c:	22ff      	movs	r2, #255	@ 0xff
 800216e:	701a      	strb	r2, [r3, #0]
		mcstackindex_list[i] = mcstackindex_list_act - i;
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <stacks_init+0x90>)
 8002172:	7819      	ldrb	r1, [r3, #0]
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	79fa      	ldrb	r2, [r7, #7]
 8002178:	1a8a      	subs	r2, r1, r2
 800217a:	b2d1      	uxtb	r1, r2
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <stacks_init+0xa4>)
 800217e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < MC_STACK_SIZE; i++)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	3301      	adds	r3, #1
 8002184:	71fb      	strb	r3, [r7, #7]
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	2b13      	cmp	r3, #19
 800218a:	d9ea      	bls.n	8002162 <stacks_init+0x52>
	};
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	200008c4 	.word	0x200008c4
 80021a0:	200008c5 	.word	0x200008c5
 80021a4:	200008c6 	.word	0x200008c6
 80021a8:	20000570 	.word	0x20000570
 80021ac:	20000890 	.word	0x20000890
 80021b0:	20000750 	.word	0x20000750
 80021b4:	200008b0 	.word	0x200008b0

080021b8 <stacks_insert_cmd>:

uint8_t stacks_insert_cmd(stack_item stack[], uint8_t stack_length, uint8_t stackindex_list[], stack_item stack_data, uint8_t *stackindexlist_act, uint8_t *stackindex)
{
 80021b8:	b082      	sub	sp, #8
 80021ba:	b490      	push	{r4, r7}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c6:	460b      	mov	r3, r1
 80021c8:	72fb      	strb	r3, [r7, #11]
	uint8_t index_tmp;
	uint8_t flag;

	if ( (*stackindexlist_act >= 0)  && (*stackindexlist_act < stack_length) )          //wenn es einen freien Platz gibt,
 80021ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	7afa      	ldrb	r2, [r7, #11]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d923      	bls.n	800221c <stacks_insert_cmd+0x64>
	{
		index_tmp = *stackindexlist_act;
 80021d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	75bb      	strb	r3, [r7, #22]
		*stackindex = stackindex_list[index_tmp];                    //fügt einen Element in den Stack ein
 80021da:	7dbb      	ldrb	r3, [r7, #22]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e4:	701a      	strb	r2, [r3, #0]
		stack[*stackindex] = stack_data;
 80021e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	461c      	mov	r4, r3
 80021f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if (index_tmp == 0 )                                     //d.h. es keine leer Platz mehr im Stack nach dem Einfügen gibt.
 80021fc:	7dbb      	ldrb	r3, [r7, #22]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <stacks_insert_cmd+0x52>
		{
			*stackindexlist_act = NONEXT;           //NONEXT bezeichnet: der Stack ist voll, weil die negative Zahl nicht erlaubt ist.
 8002202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002204:	22ff      	movs	r2, #255	@ 0xff
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	e005      	b.n	8002216 <stacks_insert_cmd+0x5e>
		}
		else
		{
			index_tmp -=1;
 800220a:	7dbb      	ldrb	r3, [r7, #22]
 800220c:	3b01      	subs	r3, #1
 800220e:	75bb      	strb	r3, [r7, #22]
			*stackindexlist_act = index_tmp;
 8002210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002212:	7dba      	ldrb	r2, [r7, #22]
 8002214:	701a      	strb	r2, [r3, #0]
		};
		flag = STACK_INTSERT_OK;
 8002216:	2314      	movs	r3, #20
 8002218:	75fb      	strb	r3, [r7, #23]
 800221a:	e001      	b.n	8002220 <stacks_insert_cmd+0x68>
	}
	else //Falls der Stack voll ist,
	{
		flag = CMR_UNITBUSY;
 800221c:	2309      	movs	r3, #9
 800221e:	75fb      	strb	r3, [r7, #23]
	};

	return flag;
 8002220:	7dfb      	ldrb	r3, [r7, #23]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bc90      	pop	{r4, r7}
 800222a:	b002      	add	sp, #8
 800222c:	4770      	bx	lr
	...

08002230 <z_mc_stack_insert>:

uint8_t z_mc_stack_insert(stack_item stack_data, uint8_t mc_flg)
{
 8002230:	b590      	push	{r4, r7, lr}
 8002232:	b091      	sub	sp, #68	@ 0x44
 8002234:	af06      	add	r7, sp, #24
 8002236:	463c      	mov	r4, r7
 8002238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t flag = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t push_result = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t prio_pushflg = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t stack_index = NONEXT;
 800224e:	23ff      	movs	r3, #255	@ 0xff
 8002250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t mc_push_enable = 0;  //=0: es ist nicht erlaubt, die Befehlen in den MC- Stack einlegen; > 1: es ist erlaubt; =1: die Befehlen aus der Zentrale;
 8002254:	2300      	movs	r3, #0
 8002256:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	//=2: aus der anderen Quellen.

	stack_item stack_tmp;

	if (mc_flg)   // d.h. der Befehl ist für den MC
 800225a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800225e:	2b00      	cmp	r3, #0
 8002260:	d067      	beq.n	8002332 <z_mc_stack_insert+0x102>
	{
		if (stack_data.cmd_sender == Q_ZENTRALE)
 8002262:	783b      	ldrb	r3, [r7, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d103      	bne.n	8002270 <z_mc_stack_insert+0x40>
		{
			mc_push_enable = 1;
 8002268:	2301      	movs	r3, #1
 800226a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800226e:	e00e      	b.n	800228e <z_mc_stack_insert+0x5e>
		}
		else
		{
			if (mcstack_rest_length  > 0)
 8002270:	4b51      	ldr	r3, [pc, #324]	@ (80023b8 <z_mc_stack_insert+0x188>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <z_mc_stack_insert+0x52>
			{
				mc_push_enable = 2;
 800227a:	2302      	movs	r3, #2
 800227c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002280:	e005      	b.n	800228e <z_mc_stack_insert+0x5e>
			}
			else
			{
				mc_push_enable = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				flag = CMR_UNITBUSY;
 8002288:	2309      	movs	r3, #9
 800228a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			};
		};

		if (mc_push_enable > 0)
 800228e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8089 	beq.w	80023aa <z_mc_stack_insert+0x17a>
		{
			push_result = stacks_insert_cmd(mc_stack, MC_STACK_SIZE, mcstackindex_list, stack_data, &mcstackindex_list_act, &stack_index);
 8002298:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800229c:	9304      	str	r3, [sp, #16]
 800229e:	4b47      	ldr	r3, [pc, #284]	@ (80023bc <z_mc_stack_insert+0x18c>)
 80022a0:	9303      	str	r3, [sp, #12]
 80022a2:	466c      	mov	r4, sp
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	4a43      	ldr	r2, [pc, #268]	@ (80023c0 <z_mc_stack_insert+0x190>)
 80022b2:	2114      	movs	r1, #20
 80022b4:	4843      	ldr	r0, [pc, #268]	@ (80023c4 <z_mc_stack_insert+0x194>)
 80022b6:	f7ff ff7f 	bl	80021b8 <stacks_insert_cmd>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			if (push_result == STACK_INTSERT_OK)
 80022c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80022c4:	2b14      	cmp	r3, #20
 80022c6:	d130      	bne.n	800232a <z_mc_stack_insert+0xfa>
			{
				prio_pushflg = priolist_push(mc_priolist, MC_STACK_SIZE, mc_priolevel_header,  &mcpriolist_firstunused_index, stack_index, stack_data.prio);
 80022c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022cc:	7b7a      	ldrb	r2, [r7, #13]
 80022ce:	9201      	str	r2, [sp, #4]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	4b3d      	ldr	r3, [pc, #244]	@ (80023c8 <z_mc_stack_insert+0x198>)
 80022d4:	4a3d      	ldr	r2, [pc, #244]	@ (80023cc <z_mc_stack_insert+0x19c>)
 80022d6:	2114      	movs	r1, #20
 80022d8:	483d      	ldr	r0, [pc, #244]	@ (80023d0 <z_mc_stack_insert+0x1a0>)
 80022da:	f7fe fb46 	bl	800096a <priolist_push>
 80022de:	4603      	mov	r3, r0
 80022e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				if (prio_pushflg )
 80022e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <z_mc_stack_insert+0xe4>
				{
					flag = STACK_CMDINSTACK;
 80022ec:	2311      	movs	r3, #17
 80022ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					if (mc_push_enable == 2)
 80022f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d157      	bne.n	80023aa <z_mc_stack_insert+0x17a>
					{
						if (mcstack_rest_length > 0)
 80022fa:	4b2f      	ldr	r3, [pc, #188]	@ (80023b8 <z_mc_stack_insert+0x188>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d052      	beq.n	80023aa <z_mc_stack_insert+0x17a>
						{
							mcstack_rest_length -=1;                   //die Plätze für die Befehle aus den anderen Quelle ausser der Zentrale wird einen weniger sein.
 8002304:	4b2c      	ldr	r3, [pc, #176]	@ (80023b8 <z_mc_stack_insert+0x188>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4b2a      	ldr	r3, [pc, #168]	@ (80023b8 <z_mc_stack_insert+0x188>)
 8002310:	701a      	strb	r2, [r3, #0]
 8002312:	e04a      	b.n	80023aa <z_mc_stack_insert+0x17a>

					};
				}
				else
				{
					mcstack_pop(&stack_tmp, stack_data.prio);
 8002314:	7b7a      	ldrb	r2, [r7, #13]
 8002316:	f107 0310 	add.w	r3, r7, #16
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f000 f87f 	bl	8002420 <mcstack_pop>
					flag = STACK_PRIOLIST_ERROR;
 8002322:	2313      	movs	r3, #19
 8002324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002328:	e03f      	b.n	80023aa <z_mc_stack_insert+0x17a>
				}
			}
			else
			{
				flag = CMR_UNITBUSY;
 800232a:	2309      	movs	r3, #9
 800232c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002330:	e03b      	b.n	80023aa <z_mc_stack_insert+0x17a>
		};
	}
	else //d.h. der Befehl wird an die Zentrale gesendet
	{

		push_result = stacks_insert_cmd(zentrale_stack, Z_STACK_SIZE, zstackindex_list, stack_data, &zstackindex_list_act, &stack_index);
 8002332:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8002336:	9304      	str	r3, [sp, #16]
 8002338:	4b26      	ldr	r3, [pc, #152]	@ (80023d4 <z_mc_stack_insert+0x1a4>)
 800233a:	9303      	str	r3, [sp, #12]
 800233c:	466c      	mov	r4, sp
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4a23      	ldr	r2, [pc, #140]	@ (80023d8 <z_mc_stack_insert+0x1a8>)
 800234c:	211e      	movs	r1, #30
 800234e:	4823      	ldr	r0, [pc, #140]	@ (80023dc <z_mc_stack_insert+0x1ac>)
 8002350:	f7ff ff32 	bl	80021b8 <stacks_insert_cmd>
 8002354:	4603      	mov	r3, r0
 8002356:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		if (push_result == STACK_INTSERT_OK)
 800235a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800235e:	2b14      	cmp	r3, #20
 8002360:	d120      	bne.n	80023a4 <z_mc_stack_insert+0x174>
		{
			prio_pushflg = priolist_push(z_priolist, Z_STACK_SIZE, z_priolevel_header, &zpriolist_firstunused_index, stack_index, stack_data.prio);
 8002362:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002366:	7b7a      	ldrb	r2, [r7, #13]
 8002368:	9201      	str	r2, [sp, #4]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4b1c      	ldr	r3, [pc, #112]	@ (80023e0 <z_mc_stack_insert+0x1b0>)
 800236e:	4a1d      	ldr	r2, [pc, #116]	@ (80023e4 <z_mc_stack_insert+0x1b4>)
 8002370:	211e      	movs	r1, #30
 8002372:	481d      	ldr	r0, [pc, #116]	@ (80023e8 <z_mc_stack_insert+0x1b8>)
 8002374:	f7fe faf9 	bl	800096a <priolist_push>
 8002378:	4603      	mov	r3, r0
 800237a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			if (prio_pushflg )
 800237e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <z_mc_stack_insert+0x15e>
			{
				flag = STACK_CMDINSTACK;
 8002386:	2311      	movs	r3, #17
 8002388:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800238c:	e00d      	b.n	80023aa <z_mc_stack_insert+0x17a>
			}
			else
			{
				zstack_pop(&stack_tmp, stack_data.prio);
 800238e:	7b7a      	ldrb	r2, [r7, #13]
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f898 	bl	80024cc <zstack_pop>
				flag = STACK_PRIOLIST_ERROR;
 800239c:	2313      	movs	r3, #19
 800239e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80023a2:	e002      	b.n	80023aa <z_mc_stack_insert+0x17a>
			} ;
		}
		else
		{

			flag = CMR_UNITBUSY;
 80023a4:	2309      	movs	r3, #9
 80023a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		};
	};
	return flag;
 80023aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	372c      	adds	r7, #44	@ 0x2c
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd90      	pop	{r4, r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200008c6 	.word	0x200008c6
 80023bc:	200008c5 	.word	0x200008c5
 80023c0:	200008b0 	.word	0x200008b0
 80023c4:	20000750 	.word	0x20000750
 80023c8:	200000ec 	.word	0x200000ec
 80023cc:	200000e8 	.word	0x200000e8
 80023d0:	200000bc 	.word	0x200000bc
 80023d4:	200008c4 	.word	0x200008c4
 80023d8:	20000890 	.word	0x20000890
 80023dc:	20000570 	.word	0x20000570
 80023e0:	200000eb 	.word	0x200000eb
 80023e4:	200000e4 	.word	0x200000e4
 80023e8:	20000080 	.word	0x20000080

080023ec <stack_insert_sero>:



uint8_t stack_insert_sero(stack_item stack_data)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b089      	sub	sp, #36	@ 0x24
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	463c      	mov	r4, r7
 80023f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t flag = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	75fb      	strb	r3, [r7, #23]
	uint8_t mc_flg = 0;                            //bezeichnet, dass der Befehl für die Zentrale ist, wenn es 0 ist; für den MC , wenn es 1 ist.
 80023fc:	2300      	movs	r3, #0
 80023fe:	75bb      	strb	r3, [r7, #22]

	//hier gibt es nur die Befehle für die Zentrale,

	mc_flg = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	75bb      	strb	r3, [r7, #22]
	flag = z_mc_stack_insert(stack_data, mc_flg);
 8002404:	7dbb      	ldrb	r3, [r7, #22]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	463b      	mov	r3, r7
 800240a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800240c:	f7ff ff10 	bl	8002230 <z_mc_stack_insert>
 8002410:	4603      	mov	r3, r0
 8002412:	75fb      	strb	r3, [r7, #23]
	return flag;
 8002414:	7dfb      	ldrb	r3, [r7, #23]
}
 8002416:	4618      	mov	r0, r3
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd90      	pop	{r4, r7, pc}
	...

08002420 <mcstack_pop>:


uint8_t mcstack_pop(stack_item *sitem, uint8_t priolevel)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	70fb      	strb	r3, [r7, #3]
	uint8_t flag = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]
	uint8_t sindex;

	sindex = priolist_pop(mc_priolist, mc_priolevel_header, &mcpriolist_firstunused_index, priolevel);
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	4a1f      	ldr	r2, [pc, #124]	@ (80024b0 <mcstack_pop+0x90>)
 8002434:	491f      	ldr	r1, [pc, #124]	@ (80024b4 <mcstack_pop+0x94>)
 8002436:	4820      	ldr	r0, [pc, #128]	@ (80024b8 <mcstack_pop+0x98>)
 8002438:	f7fe fb43 	bl	8000ac2 <priolist_pop>
 800243c:	4603      	mov	r3, r0
 800243e:	73bb      	strb	r3, [r7, #14]
	if (sindex == NONEXT)  // die zu der Priorität entsprechende MCStacklist ist leer
 8002440:	7bbb      	ldrb	r3, [r7, #14]
 8002442:	2bff      	cmp	r3, #255	@ 0xff
 8002444:	d102      	bne.n	800244c <mcstack_pop+0x2c>
	{
		flag = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e02c      	b.n	80024a6 <mcstack_pop+0x86>

	}
	else
	{

			*sitem = mc_stack[sindex];
 800244c:	7bbb      	ldrb	r3, [r7, #14]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4a1a      	ldr	r2, [pc, #104]	@ (80024bc <mcstack_pop+0x9c>)
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4413      	add	r3, r2
 8002456:	460c      	mov	r4, r1
 8002458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800245a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if (mcstackindex_list_act == NONEXT)
 800245e:	4b18      	ldr	r3, [pc, #96]	@ (80024c0 <mcstack_pop+0xa0>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2bff      	cmp	r3, #255	@ 0xff
 8002464:	d103      	bne.n	800246e <mcstack_pop+0x4e>
			{
				mcstackindex_list_act =0;
 8002466:	4b16      	ldr	r3, [pc, #88]	@ (80024c0 <mcstack_pop+0xa0>)
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
 800246c:	e005      	b.n	800247a <mcstack_pop+0x5a>

			}
			else
			{
				mcstackindex_list_act +=1;
 800246e:	4b14      	ldr	r3, [pc, #80]	@ (80024c0 <mcstack_pop+0xa0>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	3301      	adds	r3, #1
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <mcstack_pop+0xa0>)
 8002478:	701a      	strb	r2, [r3, #0]

			};

			mcstackindex_list[mcstackindex_list_act] = sindex;
 800247a:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <mcstack_pop+0xa0>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	4619      	mov	r1, r3
 8002480:	4a10      	ldr	r2, [pc, #64]	@ (80024c4 <mcstack_pop+0xa4>)
 8002482:	7bbb      	ldrb	r3, [r7, #14]
 8002484:	5453      	strb	r3, [r2, r1]

			if (mc_stack[sindex].cmd_sender != Q_ZENTRALE)
 8002486:	7bbb      	ldrb	r3, [r7, #14]
 8002488:	4a0c      	ldr	r2, [pc, #48]	@ (80024bc <mcstack_pop+0x9c>)
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	4413      	add	r3, r2
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d006      	beq.n	80024a2 <mcstack_pop+0x82>
			{
				mcstack_rest_length += 1;
 8002494:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <mcstack_pop+0xa8>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	3301      	adds	r3, #1
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <mcstack_pop+0xa8>)
 80024a0:	701a      	strb	r2, [r3, #0]
			};

			flag = 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]

	};
	return flag;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	200000ec 	.word	0x200000ec
 80024b4:	200000e8 	.word	0x200000e8
 80024b8:	200000bc 	.word	0x200000bc
 80024bc:	20000750 	.word	0x20000750
 80024c0:	200008c5 	.word	0x200008c5
 80024c4:	200008b0 	.word	0x200008b0
 80024c8:	200008c6 	.word	0x200008c6

080024cc <zstack_pop>:

uint8_t zstack_pop(stack_item *sitem, uint8_t priolevel)
{
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
	uint8_t flag = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]
	uint8_t sindex;
	//uint8_t indexlist_tmp;

	sindex =  priolist_pop(z_priolist, z_priolevel_header, &zpriolist_firstunused_index, priolevel);
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	4a18      	ldr	r2, [pc, #96]	@ (8002540 <zstack_pop+0x74>)
 80024e0:	4918      	ldr	r1, [pc, #96]	@ (8002544 <zstack_pop+0x78>)
 80024e2:	4819      	ldr	r0, [pc, #100]	@ (8002548 <zstack_pop+0x7c>)
 80024e4:	f7fe faed 	bl	8000ac2 <priolist_pop>
 80024e8:	4603      	mov	r3, r0
 80024ea:	73bb      	strb	r3, [r7, #14]

	if (sindex == NONEXT)  // die zu der Priorität entsprechende MCStacklist ist leer
 80024ec:	7bbb      	ldrb	r3, [r7, #14]
 80024ee:	2bff      	cmp	r3, #255	@ 0xff
 80024f0:	d102      	bne.n	80024f8 <zstack_pop+0x2c>
	{
		flag = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	e01e      	b.n	8002536 <zstack_pop+0x6a>

	}
	else
	{
		*sitem = zentrale_stack[sindex];
 80024f8:	7bbb      	ldrb	r3, [r7, #14]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4a13      	ldr	r2, [pc, #76]	@ (800254c <zstack_pop+0x80>)
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	4413      	add	r3, r2
 8002502:	460c      	mov	r4, r1
 8002504:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002506:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if (zstackindex_list_act == NONEXT)
 800250a:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <zstack_pop+0x84>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2bff      	cmp	r3, #255	@ 0xff
 8002510:	d103      	bne.n	800251a <zstack_pop+0x4e>
		{
			zstackindex_list_act = 0;
 8002512:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <zstack_pop+0x84>)
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e005      	b.n	8002526 <zstack_pop+0x5a>
		}
		else
		{
			zstackindex_list_act +=1;
 800251a:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <zstack_pop+0x84>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	3301      	adds	r3, #1
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <zstack_pop+0x84>)
 8002524:	701a      	strb	r2, [r3, #0]
		};
		zstackindex_list[zstackindex_list_act] = sindex;
 8002526:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <zstack_pop+0x84>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	4619      	mov	r1, r3
 800252c:	4a09      	ldr	r2, [pc, #36]	@ (8002554 <zstack_pop+0x88>)
 800252e:	7bbb      	ldrb	r3, [r7, #14]
 8002530:	5453      	strb	r3, [r2, r1]

		flag = 1;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]

	};
	return flag;
 8002536:	7bfb      	ldrb	r3, [r7, #15]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	bd90      	pop	{r4, r7, pc}
 8002540:	200000eb 	.word	0x200000eb
 8002544:	200000e4 	.word	0x200000e4
 8002548:	20000080 	.word	0x20000080
 800254c:	20000570 	.word	0x20000570
 8002550:	200008c4 	.word	0x200008c4
 8002554:	20000890 	.word	0x20000890

08002558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <HAL_MspInit+0x44>)
 8002560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002562:	4a0e      	ldr	r2, [pc, #56]	@ (800259c <HAL_MspInit+0x44>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6613      	str	r3, [r2, #96]	@ 0x60
 800256a:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <HAL_MspInit+0x44>)
 800256c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_MspInit+0x44>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257a:	4a08      	ldr	r2, [pc, #32]	@ (800259c <HAL_MspInit+0x44>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002580:	6593      	str	r3, [r2, #88]	@ 0x58
 8002582:	4b06      	ldr	r3, [pc, #24]	@ (800259c <HAL_MspInit+0x44>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800258e:	f002 fa65 	bl	8004a5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000

080025a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <NMI_Handler+0x4>

080025a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <HardFault_Handler+0x4>

080025b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <MemManage_Handler+0x4>

080025b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <BusFault_Handler+0x4>

080025c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <UsageFault_Handler+0x4>

080025c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f6:	f001 fe3f 	bl	8004278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002608:	4a14      	ldr	r2, [pc, #80]	@ (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002614:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800261c:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	@ (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002630:	f005 fe2e 	bl	8008290 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002640:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002646:	4b07      	ldr	r3, [pc, #28]	@ (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	@ (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20020000 	.word	0x20020000
 8002660:	00000400 	.word	0x00000400
 8002664:	200008c8 	.word	0x200008c8
 8002668:	200013b8 	.word	0x200013b8

0800266c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <SystemInit+0x20>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002676:	4a05      	ldr	r2, [pc, #20]	@ (800268c <SystemInit+0x20>)
 8002678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800267c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	@ 0x30
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002696:	f107 0320 	add.w	r3, r7, #32
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80026a4:	f107 030c 	add.w	r3, r7, #12
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b4:	463b      	mov	r3, r7
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026be:	4b27      	ldr	r3, [pc, #156]	@ (800275c <MX_TIM1_Init+0xcc>)
 80026c0:	4a27      	ldr	r2, [pc, #156]	@ (8002760 <MX_TIM1_Init+0xd0>)
 80026c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80026c4:	4b25      	ldr	r3, [pc, #148]	@ (800275c <MX_TIM1_Init+0xcc>)
 80026c6:	22a0      	movs	r2, #160	@ 0xa0
 80026c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ca:	4b24      	ldr	r3, [pc, #144]	@ (800275c <MX_TIM1_Init+0xcc>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59;
 80026d0:	4b22      	ldr	r3, [pc, #136]	@ (800275c <MX_TIM1_Init+0xcc>)
 80026d2:	223b      	movs	r2, #59	@ 0x3b
 80026d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d6:	4b21      	ldr	r3, [pc, #132]	@ (800275c <MX_TIM1_Init+0xcc>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026dc:	4b1f      	ldr	r3, [pc, #124]	@ (800275c <MX_TIM1_Init+0xcc>)
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e2:	4b1e      	ldr	r3, [pc, #120]	@ (800275c <MX_TIM1_Init+0xcc>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026e8:	481c      	ldr	r0, [pc, #112]	@ (800275c <MX_TIM1_Init+0xcc>)
 80026ea:	f003 f9ee 	bl	8005aca <HAL_TIM_Base_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80026f4:	f7fe f933 	bl	800095e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026fe:	f107 0320 	add.w	r3, r7, #32
 8002702:	4619      	mov	r1, r3
 8002704:	4815      	ldr	r0, [pc, #84]	@ (800275c <MX_TIM1_Init+0xcc>)
 8002706:	f003 fa37 	bl	8005b78 <HAL_TIM_ConfigClockSource>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002710:	f7fe f925 	bl	800095e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800271c:	f107 030c 	add.w	r3, r7, #12
 8002720:	4619      	mov	r1, r3
 8002722:	480e      	ldr	r0, [pc, #56]	@ (800275c <MX_TIM1_Init+0xcc>)
 8002724:	f003 fb34 	bl	8005d90 <HAL_TIM_SlaveConfigSynchro>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800272e:	f7fe f916 	bl	800095e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002732:	2300      	movs	r3, #0
 8002734:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800273e:	463b      	mov	r3, r7
 8002740:	4619      	mov	r1, r3
 8002742:	4806      	ldr	r0, [pc, #24]	@ (800275c <MX_TIM1_Init+0xcc>)
 8002744:	f003 fd8c 	bl	8006260 <HAL_TIMEx_MasterConfigSynchronization>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800274e:	f7fe f906 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	3730      	adds	r7, #48	@ 0x30
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200008cc 	.word	0x200008cc
 8002760:	40012c00 	.word	0x40012c00

08002764 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0a      	ldr	r2, [pc, #40]	@ (800279c <HAL_TIM_Base_MspInit+0x38>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10b      	bne.n	800278e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <HAL_TIM_Base_MspInit+0x3c>)
 8002778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277a:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <HAL_TIM_Base_MspInit+0x3c>)
 800277c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002780:	6613      	str	r3, [r2, #96]	@ 0x60
 8002782:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <HAL_TIM_Base_MspInit+0x3c>)
 8002784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002786:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40012c00 	.word	0x40012c00
 80027a0:	40021000 	.word	0x40021000

080027a4 <set_ct_hbeat>:
    else return 0;
}

// HEARTBEAT Stoppuhr setzen
void set_ct_hbeat(uint16_t ct_hbeatval)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
    ct_hbeat = ct_hbeatval;
 80027ae:	4a04      	ldr	r2, [pc, #16]	@ (80027c0 <set_ct_hbeat+0x1c>)
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	8013      	strh	r3, [r2, #0]

}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	20000918 	.word	0x20000918

080027c4 <ct_hbeat_null>:

// HEARTBEAT Stoppuhr abfragen
uint8_t ct_hbeat_null(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_hbeat;
 80027ca:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <ct_hbeat_null+0x24>)
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <ct_hbeat_null+0x16>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <ct_hbeat_null+0x18>
    else return 0;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	20000918 	.word	0x20000918

080027ec <ct_init_null>:

}

// INIT Stoppuhr abfragen
uint8_t ct_init_null(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_init;
 80027f2:	4b07      	ldr	r3, [pc, #28]	@ (8002810 <ct_init_null+0x24>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <ct_init_null+0x16>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <ct_init_null+0x18>
    else return 0;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	2000091a 	.word	0x2000091a

08002814 <HAL_UART_RxCpltCallback>:
int16_t rb_free_rx(UartRB *p);
int16_t rb_free_tx(UartRB *p);
//----- INTERRUPT ROUTINEN ----------------------------------------------------

// Reception interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	uartRB_OnRxCplt(&uart4_rb, huart);
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4807      	ldr	r0, [pc, #28]	@ (800283c <HAL_UART_RxCpltCallback+0x28>)
 8002820:	f000 f812 	bl	8002848 <uartRB_OnRxCplt>
	uartRB_OnRxCplt(&uart5_rb, huart);
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4806      	ldr	r0, [pc, #24]	@ (8002840 <HAL_UART_RxCpltCallback+0x2c>)
 8002828:	f000 f80e 	bl	8002848 <uartRB_OnRxCplt>
	uartRB_OnRxCplt(&usart1_rb, huart);
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4805      	ldr	r0, [pc, #20]	@ (8002844 <HAL_UART_RxCpltCallback+0x30>)
 8002830:	f000 f80a 	bl	8002848 <uartRB_OnRxCplt>
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	2000091c 	.word	0x2000091c
 8002840:	20000aac 	.word	0x20000aac
 8002844:	20000c3c 	.word	0x20000c3c

08002848 <uartRB_OnRxCplt>:
	uartRB_OnTxCplt(&uart4_rb, huart);
	uartRB_OnTxCplt(&uart5_rb, huart);
	uartRB_OnTxCplt(&usart1_rb, huart);
}

void uartRB_OnRxCplt(UartRB *p, UART_HandleTypeDef *huart) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
	if (huart != p->huart)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d12d      	bne.n	80028b8 <uartRB_OnRxCplt+0x70>
		return;

	if (1 < rb_free_rx(p))                        // noch Platz f�r ein Zeichen?
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f8ac 	bl	80029ba <rb_free_rx>
 8002862:	4603      	mov	r3, r0
 8002864:	2b01      	cmp	r3, #1
 8002866:	dd19      	ble.n	800289c <uartRB_OnRxCplt+0x54>
			{
		p->rx[p->rx_in] = p->it_rx;                      // Zeichen �bernehmen
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	895b      	ldrh	r3, [r3, #10]
 800286c:	b29b      	uxth	r3, r3
 800286e:	4619      	mov	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	440b      	add	r3, r1
 800287a:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		p->rx_in++;                                       // Zeiger weiterr�cken
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	895b      	ldrh	r3, [r3, #10]
 8002882:	b29b      	uxth	r3, r3
 8002884:	3301      	adds	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	815a      	strh	r2, [r3, #10]
		if (p->rx_in >= BUFLEN)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	895b      	ldrh	r3, [r3, #10]
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b7e      	cmp	r3, #126	@ 0x7e
 8002894:	d902      	bls.n	800289c <uartRB_OnRxCplt+0x54>
			p->rx_in = 0;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	815a      	strh	r2, [r3, #10]
	}

	while (HAL_UART_Receive_IT(p->huart, &p->it_rx, 1) != HAL_OK) {
 800289c:	bf00      	nop
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80028a8:	2201      	movs	r2, #1
 80028aa:	4619      	mov	r1, r3
 80028ac:	f003 fe52 	bl	8006554 <HAL_UART_Receive_IT>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f3      	bne.n	800289e <uartRB_OnRxCplt+0x56>
 80028b6:	e000      	b.n	80028ba <uartRB_OnRxCplt+0x72>
		return;
 80028b8:	bf00      	nop
	}
}
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <uart_initAll>:

//----- FUNKTIONSDEFINITIONEN -------------------------------------------------

/******************** RS232 ***********************/

void uart_initAll(void) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	uartRB_Init(&uart4_rb, &huart4, UART4_IRQn);
 80028c4:	2234      	movs	r2, #52	@ 0x34
 80028c6:	490a      	ldr	r1, [pc, #40]	@ (80028f0 <uart_initAll+0x30>)
 80028c8:	480a      	ldr	r0, [pc, #40]	@ (80028f4 <uart_initAll+0x34>)
 80028ca:	f000 f821 	bl	8002910 <uartRB_Init>
	uartRB_Init(&uart5_rb, &huart5, UART5_IRQn);
 80028ce:	2235      	movs	r2, #53	@ 0x35
 80028d0:	4909      	ldr	r1, [pc, #36]	@ (80028f8 <uart_initAll+0x38>)
 80028d2:	480a      	ldr	r0, [pc, #40]	@ (80028fc <uart_initAll+0x3c>)
 80028d4:	f000 f81c 	bl	8002910 <uartRB_Init>
	uartRB_Init(&usart1_rb, &huart1, USART1_IRQn);
 80028d8:	2225      	movs	r2, #37	@ 0x25
 80028da:	4909      	ldr	r1, [pc, #36]	@ (8002900 <uart_initAll+0x40>)
 80028dc:	4809      	ldr	r0, [pc, #36]	@ (8002904 <uart_initAll+0x44>)
 80028de:	f000 f817 	bl	8002910 <uartRB_Init>
	uartRB_Init(&usart3_rb, &huart3, USART3_IRQn);
 80028e2:	2227      	movs	r2, #39	@ 0x27
 80028e4:	4908      	ldr	r1, [pc, #32]	@ (8002908 <uart_initAll+0x48>)
 80028e6:	4809      	ldr	r0, [pc, #36]	@ (800290c <uart_initAll+0x4c>)
 80028e8:	f000 f812 	bl	8002910 <uartRB_Init>
}
 80028ec:	bf00      	nop
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000f5c 	.word	0x20000f5c
 80028f4:	2000091c 	.word	0x2000091c
 80028f8:	20000ff0 	.word	0x20000ff0
 80028fc:	20000aac 	.word	0x20000aac
 8002900:	20001084 	.word	0x20001084
 8002904:	20000c3c 	.word	0x20000c3c
 8002908:	200011ac 	.word	0x200011ac
 800290c:	20000dcc 	.word	0x20000dcc

08002910 <uartRB_Init>:

void uartRB_Init(UartRB *p, UART_HandleTypeDef *huart, IRQn_Type irqn) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	4613      	mov	r3, r2
 800291c:	71fb      	strb	r3, [r7, #7]
	p->huart = huart;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	601a      	str	r2, [r3, #0]
	p->irqn = irqn;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	79fa      	ldrb	r2, [r7, #7]
 8002928:	711a      	strb	r2, [r3, #4]
	p->tx_in = p->tx_out = p->rx_in = p->rx_out = 0;
 800292a:	2200      	movs	r2, #0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4611      	mov	r1, r2
 8002930:	8199      	strh	r1, [r3, #12]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4611      	mov	r1, r2
 8002936:	8159      	strh	r1, [r3, #10]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4611      	mov	r1, r2
 800293c:	8119      	strh	r1, [r3, #8]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	80da      	strh	r2, [r3, #6]
	HAL_UART_Receive_IT(p->huart, &p->it_rx, 1);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800294c:	2201      	movs	r2, #1
 800294e:	4619      	mov	r1, r3
 8002950:	f003 fe00 	bl	8006554 <HAL_UART_Receive_IT>
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <rb_free_tx>:

int16_t rb_free_tx(UartRB *p) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	int16_t x;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800296a:	4618      	mov	r0, r3
 800296c:	f001 fdeb 	bl	8004546 <HAL_NVIC_DisableIRQ>
	x = (int16_t) p->tx_in - (int8_t) p->tx_out;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	88db      	ldrh	r3, [r3, #6]
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	891b      	ldrh	r3, [r3, #8]
 800297a:	b29b      	uxth	r3, r3
 800297c:	b25b      	sxtb	r3, r3
 800297e:	b29b      	uxth	r3, r3
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	b29b      	uxth	r3, r3
 8002984:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 8002986:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800298a:	2b00      	cmp	r3, #0
 800298c:	da03      	bge.n	8002996 <rb_free_tx+0x3a>
		x += BUFLEN;
 800298e:	89fb      	ldrh	r3, [r7, #14]
 8002990:	337f      	adds	r3, #127	@ 0x7f
 8002992:	b29b      	uxth	r3, r3
 8002994:	81fb      	strh	r3, [r7, #14]
	x = BUFLEN - x;
 8002996:	89fb      	ldrh	r3, [r7, #14]
 8002998:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800299c:	b29b      	uxth	r3, r3
 800299e:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_EnableIRQ(p->irqn);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 fdbf 	bl	800452a <HAL_NVIC_EnableIRQ>
	return (uint8_t) x;
 80029ac:	89fb      	ldrh	r3, [r7, #14]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	b21b      	sxth	r3, r3
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <rb_free_rx>:

int16_t rb_free_rx(UartRB *p) {
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
	int16_t x;
	HAL_NVIC_DisableIRQ(p->irqn);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f001 fdbc 	bl	8004546 <HAL_NVIC_DisableIRQ>
	x = p->rx_in - p->rx_out;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	895b      	ldrh	r3, [r3, #10]
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	899b      	ldrh	r3, [r3, #12]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	b29b      	uxth	r3, r3
 80029de:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 80029e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	da03      	bge.n	80029f0 <rb_free_rx+0x36>
		x += BUFLEN;
 80029e8:	89fb      	ldrh	r3, [r7, #14]
 80029ea:	337f      	adds	r3, #127	@ 0x7f
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	81fb      	strh	r3, [r7, #14]
	x = BUFLEN - x;
 80029f0:	89fb      	ldrh	r3, [r7, #14]
 80029f2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_EnableIRQ(p->irqn);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 fd92 	bl	800452a <HAL_NVIC_EnableIRQ>
	return x;
 8002a06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <rb_rx_used>:

int16_t rb_rx_used(const UartRB *p)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
	int16_t used;
    HAL_NVIC_DisableIRQ(p->irqn);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f001 fd90 	bl	8004546 <HAL_NVIC_DisableIRQ>
    used = (int16_t)p->rx_in - (int32_t)p->rx_out;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	895b      	ldrh	r3, [r3, #10]
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	899b      	ldrh	r3, [r3, #12]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	81fb      	strh	r3, [r7, #14]
    if (used < 0) used += BUFLEN;
 8002a38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	da03      	bge.n	8002a48 <rb_rx_used+0x36>
 8002a40:	89fb      	ldrh	r3, [r7, #14]
 8002a42:	337f      	adds	r3, #127	@ 0x7f
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	81fb      	strh	r3, [r7, #14]
    HAL_NVIC_EnableIRQ(p->irqn);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 fd6b 	bl	800452a <HAL_NVIC_EnableIRQ>
    return used;
 8002a54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <uartRB_KickTx>:

// is this correct
void uartRB_KickTx(UartRB *p) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

	if (__HAL_UART_GET_FLAG(p->huart, UART_FLAG_TC) == 0)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a74:	2b40      	cmp	r3, #64	@ 0x40
 8002a76:	d134      	bne.n	8002ae2 <uartRB_KickTx+0x82>
		return;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f001 fd61 	bl	8004546 <HAL_NVIC_DisableIRQ>
// No, we still have something to transmit?
	int16_t free = rb_free_tx(p);          // how many free slots in TX ring
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff69 	bl	800295c <rb_free_tx>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	81fb      	strh	r3, [r7, #14]
	int16_t tmpBuf_out = p->tx_out;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	891b      	ldrh	r3, [r3, #8]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	81bb      	strh	r3, [r7, #12]
	if (free < BUFLEN) {               // => there is at least 1 byte pending
 8002a96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a9a:	2b7e      	cmp	r3, #126	@ 0x7e
 8002a9c:	dc1a      	bgt.n	8002ad4 <uartRB_KickTx+0x74>
		p->tx_out++;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	891b      	ldrh	r3, [r3, #8]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	811a      	strh	r2, [r3, #8]
		if (p->tx_out >= BUFLEN) p->tx_out = 0;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	891b      	ldrh	r3, [r3, #8]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b7e      	cmp	r3, #126	@ 0x7e
 8002ab4:	d902      	bls.n	8002abc <uartRB_KickTx+0x5c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	811a      	strh	r2, [r3, #8]
		HAL_UART_Transmit_IT(p->huart, &p->tx[tmpBuf_out], 1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ac4:	3308      	adds	r3, #8
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	3306      	adds	r3, #6
 8002acc:	2201      	movs	r2, #1
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f003 fcac 	bl	800642c <HAL_UART_Transmit_IT>
	}
	HAL_NVIC_EnableIRQ(p->irqn);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f001 fd25 	bl	800452a <HAL_NVIC_EnableIRQ>
 8002ae0:	e000      	b.n	8002ae4 <uartRB_KickTx+0x84>
		return;
 8002ae2:	bf00      	nop
}
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <uartRB_Put>:

uint8_t uartRB_Put(UartRB *p, const void *buf, uint8_t n) {
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	4613      	mov	r3, r2
 8002af8:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(p->irqn);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f001 fd20 	bl	8004546 <HAL_NVIC_DisableIRQ>
	const uint8_t *src = (const uint8_t *)buf;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	613b      	str	r3, [r7, #16]
	if (n > rb_free_tx(p)){
 8002b0a:	79fc      	ldrb	r4, [r7, #7]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f7ff ff25 	bl	800295c <rb_free_tx>
 8002b12:	4603      	mov	r3, r0
 8002b14:	429c      	cmp	r4, r3
 8002b16:	dd07      	ble.n	8002b28 <uartRB_Put+0x3c>
		HAL_NVIC_EnableIRQ(p->irqn);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f001 fd03 	bl	800452a <HAL_NVIC_EnableIRQ>
		return 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	e02f      	b.n	8002b88 <uartRB_Put+0x9c>
	}
	for (uint8_t i = 1; i <= n; i++) {
 8002b28:	2301      	movs	r3, #1
 8002b2a:	75fb      	strb	r3, [r7, #23]
 8002b2c:	e021      	b.n	8002b72 <uartRB_Put+0x86>
		p->tx[p->tx_in] = src[i-1];
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	88d2      	ldrh	r2, [r2, #6]
 8002b3a:	b292      	uxth	r2, r2
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	440b      	add	r3, r1
 8002b44:	739a      	strb	r2, [r3, #14]
		p->tx_in = (uint8_t) ((p->tx_in + 1) % BUFLEN);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	88db      	ldrh	r3, [r3, #6]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	4b10      	ldr	r3, [pc, #64]	@ (8002b90 <uartRB_Put+0xa4>)
 8002b50:	fb83 1302 	smull	r1, r3, r3, r2
 8002b54:	4413      	add	r3, r2
 8002b56:	1199      	asrs	r1, r3, #6
 8002b58:	17d3      	asrs	r3, r2, #31
 8002b5a:	1ac9      	subs	r1, r1, r3
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	01db      	lsls	r3, r3, #7
 8002b60:	1a5b      	subs	r3, r3, r1
 8002b62:	1ad1      	subs	r1, r2, r3
 8002b64:	b2cb      	uxtb	r3, r1
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	80da      	strh	r2, [r3, #6]
	for (uint8_t i = 1; i <= n; i++) {
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
 8002b72:	7dfa      	ldrb	r2, [r7, #23]
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d9d9      	bls.n	8002b2e <uartRB_Put+0x42>
	}
	HAL_NVIC_EnableIRQ(p->irqn);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 fcd2 	bl	800452a <HAL_NVIC_EnableIRQ>
	return 1;
 8002b86:	2301      	movs	r3, #1
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd90      	pop	{r4, r7, pc}
 8002b90:	81020409 	.word	0x81020409

08002b94 <uartRB_Getc>:

uint8_t uartRB_Getc(UartRB *p) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	uint8_t c;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f001 fccf 	bl	8004546 <HAL_NVIC_DisableIRQ>
	c = p->rx[p->rx_out];
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	899b      	ldrh	r3, [r3, #12]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002bb8:	73fb      	strb	r3, [r7, #15]
	p->rx_out++;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	899b      	ldrh	r3, [r3, #12]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	819a      	strh	r2, [r3, #12]
	if (p->rx_out >= BUFLEN) p->rx_out = 0;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	899b      	ldrh	r3, [r3, #12]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b7e      	cmp	r3, #126	@ 0x7e
 8002bd0:	d902      	bls.n	8002bd8 <uartRB_Getc+0x44>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	819a      	strh	r2, [r3, #12]
	HAL_NVIC_EnableIRQ(p->irqn);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 fca3 	bl	800452a <HAL_NVIC_EnableIRQ>
	return c;
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002bf4:	4b22      	ldr	r3, [pc, #136]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002bf6:	4a23      	ldr	r2, [pc, #140]	@ (8002c84 <MX_UART4_Init+0x94>)
 8002bf8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 19200;
 8002bfa:	4b21      	ldr	r3, [pc, #132]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002bfc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002c00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c02:	4b1f      	ldr	r3, [pc, #124]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c08:	4b1d      	ldr	r3, [pc, #116]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c14:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002c16:	220c      	movs	r2, #12
 8002c18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1a:	4b19      	ldr	r3, [pc, #100]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c20:	4b17      	ldr	r3, [pc, #92]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c26:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c2c:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c32:	4b13      	ldr	r3, [pc, #76]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c38:	4811      	ldr	r0, [pc, #68]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002c3a:	f003 fba7 	bl	800638c <HAL_UART_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002c44:	f7fd fe8b 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c48:	2100      	movs	r1, #0
 8002c4a:	480d      	ldr	r0, [pc, #52]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002c4c:	f005 fa1d 	bl	800808a <HAL_UARTEx_SetTxFifoThreshold>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002c56:	f7fd fe82 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4808      	ldr	r0, [pc, #32]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002c5e:	f005 fa52 	bl	8008106 <HAL_UARTEx_SetRxFifoThreshold>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002c68:	f7fd fe79 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002c6c:	4804      	ldr	r0, [pc, #16]	@ (8002c80 <MX_UART4_Init+0x90>)
 8002c6e:	f005 f9d3 	bl	8008018 <HAL_UARTEx_DisableFifoMode>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002c78:	f7fd fe71 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000f5c 	.word	0x20000f5c
 8002c84:	40004c00 	.word	0x40004c00

08002c88 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002c8c:	4b22      	ldr	r3, [pc, #136]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002c8e:	4a23      	ldr	r2, [pc, #140]	@ (8002d1c <MX_UART5_Init+0x94>)
 8002c90:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 8002c92:	4b21      	ldr	r3, [pc, #132]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002c94:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002c98:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002cac:	4b1a      	ldr	r3, [pc, #104]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002cae:	220c      	movs	r2, #12
 8002cb0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cb2:	4b19      	ldr	r3, [pc, #100]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cb8:	4b17      	ldr	r3, [pc, #92]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cbe:	4b16      	ldr	r3, [pc, #88]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cc4:	4b14      	ldr	r3, [pc, #80]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cca:	4b13      	ldr	r3, [pc, #76]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002cd0:	4811      	ldr	r0, [pc, #68]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002cd2:	f003 fb5b 	bl	800638c <HAL_UART_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002cdc:	f7fd fe3f 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	480d      	ldr	r0, [pc, #52]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002ce4:	f005 f9d1 	bl	800808a <HAL_UARTEx_SetTxFifoThreshold>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002cee:	f7fd fe36 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4808      	ldr	r0, [pc, #32]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002cf6:	f005 fa06 	bl	8008106 <HAL_UARTEx_SetRxFifoThreshold>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002d00:	f7fd fe2d 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002d04:	4804      	ldr	r0, [pc, #16]	@ (8002d18 <MX_UART5_Init+0x90>)
 8002d06:	f005 f987 	bl	8008018 <HAL_UARTEx_DisableFifoMode>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002d10:	f7fd fe25 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000ff0 	.word	0x20000ff0
 8002d1c:	40005000 	.word	0x40005000

08002d20 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d24:	4b22      	ldr	r3, [pc, #136]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d26:	4a23      	ldr	r2, [pc, #140]	@ (8002db4 <MX_USART1_UART_Init+0x94>)
 8002d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8002d2a:	4b21      	ldr	r3, [pc, #132]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d2c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d32:	4b1f      	ldr	r3, [pc, #124]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d38:	4b1d      	ldr	r3, [pc, #116]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d44:	4b1a      	ldr	r3, [pc, #104]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d46:	220c      	movs	r2, #12
 8002d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d4a:	4b19      	ldr	r3, [pc, #100]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d50:	4b17      	ldr	r3, [pc, #92]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d56:	4b16      	ldr	r3, [pc, #88]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d5c:	4b14      	ldr	r3, [pc, #80]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d62:	4b13      	ldr	r3, [pc, #76]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d68:	4811      	ldr	r0, [pc, #68]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d6a:	f003 fb0f 	bl	800638c <HAL_UART_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d74:	f7fd fdf3 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d78:	2100      	movs	r1, #0
 8002d7a:	480d      	ldr	r0, [pc, #52]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d7c:	f005 f985 	bl	800808a <HAL_UARTEx_SetTxFifoThreshold>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d86:	f7fd fdea 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4808      	ldr	r0, [pc, #32]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d8e:	f005 f9ba 	bl	8008106 <HAL_UARTEx_SetRxFifoThreshold>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d98:	f7fd fde1 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d9c:	4804      	ldr	r0, [pc, #16]	@ (8002db0 <MX_USART1_UART_Init+0x90>)
 8002d9e:	f005 f93b 	bl	8008018 <HAL_UARTEx_DisableFifoMode>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002da8:	f7fd fdd9 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20001084 	.word	0x20001084
 8002db4:	40013800 	.word	0x40013800

08002db8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dbc:	4b23      	ldr	r3, [pc, #140]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dbe:	4a24      	ldr	r2, [pc, #144]	@ (8002e50 <MX_USART2_UART_Init+0x98>)
 8002dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002dc2:	4b22      	ldr	r3, [pc, #136]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dc4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dca:	4b20      	ldr	r3, [pc, #128]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dde:	220c      	movs	r2, #12
 8002de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002de2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002de4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002de8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dea:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002df0:	4b16      	ldr	r3, [pc, #88]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002df6:	4b15      	ldr	r3, [pc, #84]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dfc:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e02:	4812      	ldr	r0, [pc, #72]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002e04:	f003 fac2 	bl	800638c <HAL_UART_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002e0e:	f7fd fda6 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e12:	2100      	movs	r1, #0
 8002e14:	480d      	ldr	r0, [pc, #52]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002e16:	f005 f938 	bl	800808a <HAL_UARTEx_SetTxFifoThreshold>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002e20:	f7fd fd9d 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e24:	2100      	movs	r1, #0
 8002e26:	4809      	ldr	r0, [pc, #36]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002e28:	f005 f96d 	bl	8008106 <HAL_UARTEx_SetRxFifoThreshold>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002e32:	f7fd fd94 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002e36:	4805      	ldr	r0, [pc, #20]	@ (8002e4c <MX_USART2_UART_Init+0x94>)
 8002e38:	f005 f8ee 	bl	8008018 <HAL_UARTEx_DisableFifoMode>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002e42:	f7fd fd8c 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20001118 	.word	0x20001118
 8002e50:	40004400 	.word	0x40004400

08002e54 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e58:	4b23      	ldr	r3, [pc, #140]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002e5a:	4a24      	ldr	r2, [pc, #144]	@ (8002eec <MX_USART3_UART_Init+0x98>)
 8002e5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8002e5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002e60:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002e64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e66:	4b20      	ldr	r3, [pc, #128]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002e80:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002e84:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e86:	4b18      	ldr	r3, [pc, #96]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e8c:	4b16      	ldr	r3, [pc, #88]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e92:	4b15      	ldr	r3, [pc, #84]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e98:	4b13      	ldr	r3, [pc, #76]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e9e:	4812      	ldr	r0, [pc, #72]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002ea0:	f003 fa74 	bl	800638c <HAL_UART_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8002eaa:	f7fd fd58 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eae:	2100      	movs	r1, #0
 8002eb0:	480d      	ldr	r0, [pc, #52]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002eb2:	f005 f8ea 	bl	800808a <HAL_UARTEx_SetTxFifoThreshold>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8002ebc:	f7fd fd4f 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4809      	ldr	r0, [pc, #36]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002ec4:	f005 f91f 	bl	8008106 <HAL_UARTEx_SetRxFifoThreshold>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8002ece:	f7fd fd46 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ed2:	4805      	ldr	r0, [pc, #20]	@ (8002ee8 <MX_USART3_UART_Init+0x94>)
 8002ed4:	f005 f8a0 	bl	8008018 <HAL_UARTEx_DisableFifoMode>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8002ede:	f7fd fd3e 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200011ac 	.word	0x200011ac
 8002eec:	40004800 	.word	0x40004800

08002ef0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b0a8      	sub	sp, #160	@ 0xa0
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f08:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f0c:	2254      	movs	r2, #84	@ 0x54
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f005 f9a5 	bl	8008260 <memset>
  if(uartHandle->Instance==UART4)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a93      	ldr	r2, [pc, #588]	@ (8003168 <HAL_UART_MspInit+0x278>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d13c      	bne.n	8002f9a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002f20:	2308      	movs	r3, #8
 8002f22:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002f24:	2300      	movs	r3, #0
 8002f26:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f002 fad3 	bl	80054d8 <HAL_RCCEx_PeriphCLKConfig>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f38:	f7fd fd11 	bl	800095e <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f3c:	4b8b      	ldr	r3, [pc, #556]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f40:	4a8a      	ldr	r2, [pc, #552]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002f42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002f46:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f48:	4b88      	ldr	r3, [pc, #544]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f54:	4b85      	ldr	r3, [pc, #532]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f58:	4a84      	ldr	r2, [pc, #528]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f60:	4b82      	ldr	r3, [pc, #520]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f6c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f74:	2302      	movs	r3, #2
 8002f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002f86:	2305      	movs	r3, #5
 8002f88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002f90:	4619      	mov	r1, r3
 8002f92:	4877      	ldr	r0, [pc, #476]	@ (8003170 <HAL_UART_MspInit+0x280>)
 8002f94:	f001 faf2 	bl	800457c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f98:	e157      	b.n	800324a <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==UART5)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a75      	ldr	r2, [pc, #468]	@ (8003174 <HAL_UART_MspInit+0x284>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d15d      	bne.n	8003060 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f002 fa91 	bl	80054d8 <HAL_RCCEx_PeriphCLKConfig>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002fbc:	f7fd fccf 	bl	800095e <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002fc0:	4b6a      	ldr	r3, [pc, #424]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc4:	4a69      	ldr	r2, [pc, #420]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fcc:	4b67      	ldr	r3, [pc, #412]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd8:	4b64      	ldr	r3, [pc, #400]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fdc:	4a63      	ldr	r2, [pc, #396]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002fde:	f043 0304 	orr.w	r3, r3, #4
 8002fe2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fe4:	4b61      	ldr	r3, [pc, #388]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ff0:	4b5e      	ldr	r3, [pc, #376]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff4:	4a5d      	ldr	r2, [pc, #372]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002ff6:	f043 0308 	orr.w	r3, r3, #8
 8002ffa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ffc:	4b5b      	ldr	r3, [pc, #364]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8002ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800300c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003022:	2305      	movs	r3, #5
 8003024:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003028:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800302c:	4619      	mov	r1, r3
 800302e:	4850      	ldr	r0, [pc, #320]	@ (8003170 <HAL_UART_MspInit+0x280>)
 8003030:	f001 faa4 	bl	800457c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003034:	2304      	movs	r3, #4
 8003036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	2302      	movs	r3, #2
 800303c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800304c:	2305      	movs	r3, #5
 800304e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003052:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003056:	4619      	mov	r1, r3
 8003058:	4847      	ldr	r0, [pc, #284]	@ (8003178 <HAL_UART_MspInit+0x288>)
 800305a:	f001 fa8f 	bl	800457c <HAL_GPIO_Init>
}
 800305e:	e0f4      	b.n	800324a <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==USART1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a45      	ldr	r2, [pc, #276]	@ (800317c <HAL_UART_MspInit+0x28c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d13b      	bne.n	80030e2 <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800306a:	2301      	movs	r3, #1
 800306c:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800306e:	2300      	movs	r3, #0
 8003070:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003072:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003076:	4618      	mov	r0, r3
 8003078:	f002 fa2e 	bl	80054d8 <HAL_RCCEx_PeriphCLKConfig>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_UART_MspInit+0x196>
      Error_Handler();
 8003082:	f7fd fc6c 	bl	800095e <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003086:	4b39      	ldr	r3, [pc, #228]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8003088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308a:	4a38      	ldr	r2, [pc, #224]	@ (800316c <HAL_UART_MspInit+0x27c>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003090:	6613      	str	r3, [r2, #96]	@ 0x60
 8003092:	4b36      	ldr	r3, [pc, #216]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8003094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309a:	623b      	str	r3, [r7, #32]
 800309c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800309e:	4b33      	ldr	r3, [pc, #204]	@ (800316c <HAL_UART_MspInit+0x27c>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a2:	4a32      	ldr	r2, [pc, #200]	@ (800316c <HAL_UART_MspInit+0x27c>)
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030aa:	4b30      	ldr	r3, [pc, #192]	@ (800316c <HAL_UART_MspInit+0x27c>)
 80030ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80030b6:	2330      	movs	r3, #48	@ 0x30
 80030b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030ce:	2307      	movs	r3, #7
 80030d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80030d8:	4619      	mov	r1, r3
 80030da:	4825      	ldr	r0, [pc, #148]	@ (8003170 <HAL_UART_MspInit+0x280>)
 80030dc:	f001 fa4e 	bl	800457c <HAL_GPIO_Init>
}
 80030e0:	e0b3      	b.n	800324a <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==USART2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a26      	ldr	r2, [pc, #152]	@ (8003180 <HAL_UART_MspInit+0x290>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d14b      	bne.n	8003184 <HAL_UART_MspInit+0x294>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80030ec:	2302      	movs	r3, #2
 80030ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80030f0:	2300      	movs	r3, #0
 80030f2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80030f8:	4618      	mov	r0, r3
 80030fa:	f002 f9ed 	bl	80054d8 <HAL_RCCEx_PeriphCLKConfig>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8003104:	f7fd fc2b 	bl	800095e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003108:	4b18      	ldr	r3, [pc, #96]	@ (800316c <HAL_UART_MspInit+0x27c>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310c:	4a17      	ldr	r2, [pc, #92]	@ (800316c <HAL_UART_MspInit+0x27c>)
 800310e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003112:	6593      	str	r3, [r2, #88]	@ 0x58
 8003114:	4b15      	ldr	r3, [pc, #84]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003120:	4b12      	ldr	r3, [pc, #72]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8003122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003124:	4a11      	ldr	r2, [pc, #68]	@ (800316c <HAL_UART_MspInit+0x27c>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800312c:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <HAL_UART_MspInit+0x27c>)
 800312e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003138:	230f      	movs	r3, #15
 800313a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313e:	2302      	movs	r3, #2
 8003140:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314a:	2300      	movs	r3, #0
 800314c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003150:	2307      	movs	r3, #7
 8003152:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003156:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800315a:	4619      	mov	r1, r3
 800315c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003160:	f001 fa0c 	bl	800457c <HAL_GPIO_Init>
}
 8003164:	e071      	b.n	800324a <HAL_UART_MspInit+0x35a>
 8003166:	bf00      	nop
 8003168:	40004c00 	.word	0x40004c00
 800316c:	40021000 	.word	0x40021000
 8003170:	48000800 	.word	0x48000800
 8003174:	40005000 	.word	0x40005000
 8003178:	48000c00 	.word	0x48000c00
 800317c:	40013800 	.word	0x40013800
 8003180:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a32      	ldr	r2, [pc, #200]	@ (8003254 <HAL_UART_MspInit+0x364>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d15d      	bne.n	800324a <HAL_UART_MspInit+0x35a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800318e:	2304      	movs	r3, #4
 8003190:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003192:	2300      	movs	r3, #0
 8003194:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003196:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800319a:	4618      	mov	r0, r3
 800319c:	f002 f99c 	bl	80054d8 <HAL_RCCEx_PeriphCLKConfig>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 80031a6:	f7fd fbda 	bl	800095e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003258 <HAL_UART_MspInit+0x368>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003258 <HAL_UART_MspInit+0x368>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80031b6:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <HAL_UART_MspInit+0x368>)
 80031b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031c2:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <HAL_UART_MspInit+0x368>)
 80031c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c6:	4a24      	ldr	r2, [pc, #144]	@ (8003258 <HAL_UART_MspInit+0x368>)
 80031c8:	f043 0310 	orr.w	r3, r3, #16
 80031cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ce:	4b22      	ldr	r3, [pc, #136]	@ (8003258 <HAL_UART_MspInit+0x368>)
 80031d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031da:	4b1f      	ldr	r3, [pc, #124]	@ (8003258 <HAL_UART_MspInit+0x368>)
 80031dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031de:	4a1e      	ldr	r2, [pc, #120]	@ (8003258 <HAL_UART_MspInit+0x368>)
 80031e0:	f043 0302 	orr.w	r3, r3, #2
 80031e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003258 <HAL_UART_MspInit+0x368>)
 80031e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003206:	2300      	movs	r3, #0
 8003208:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800320c:	2307      	movs	r3, #7
 800320e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003212:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003216:	4619      	mov	r1, r3
 8003218:	4810      	ldr	r0, [pc, #64]	@ (800325c <HAL_UART_MspInit+0x36c>)
 800321a:	f001 f9af 	bl	800457c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14;
 800321e:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003222:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003232:	2300      	movs	r3, #0
 8003234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003238:	2307      	movs	r3, #7
 800323a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003242:	4619      	mov	r1, r3
 8003244:	4806      	ldr	r0, [pc, #24]	@ (8003260 <HAL_UART_MspInit+0x370>)
 8003246:	f001 f999 	bl	800457c <HAL_GPIO_Init>
}
 800324a:	bf00      	nop
 800324c:	37a0      	adds	r7, #160	@ 0xa0
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40004800 	.word	0x40004800
 8003258:	40021000 	.word	0x40021000
 800325c:	48001000 	.word	0x48001000
 8003260:	48000400 	.word	0x48000400

08003264 <zentrale_init>:


//-----------------FUNKTIONSDEFINITIONEN---------------------------------------

// Zentrale initialisieren.
void zentrale_init(void) {
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
	z_status = POWERON;
 8003268:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <zentrale_init+0x2c>)
 800326a:	2202      	movs	r2, #2
 800326c:	701a      	strb	r2, [r3, #0]
	z_status_h = NOP;
 800326e:	4b09      	ldr	r3, [pc, #36]	@ (8003294 <zentrale_init+0x30>)
 8003270:	22ff      	movs	r2, #255	@ 0xff
 8003272:	701a      	strb	r2, [r3, #0]
	z_status_tend = NOP;
 8003274:	4b08      	ldr	r3, [pc, #32]	@ (8003298 <zentrale_init+0x34>)
 8003276:	22ff      	movs	r2, #255	@ 0xff
 8003278:	701a      	strb	r2, [r3, #0]
	z_error_akt = 0;
 800327a:	4b08      	ldr	r3, [pc, #32]	@ (800329c <zentrale_init+0x38>)
 800327c:	2200      	movs	r2, #0
 800327e:	801a      	strh	r2, [r3, #0]
	z_error_kum = 0;
 8003280:	4b07      	ldr	r3, [pc, #28]	@ (80032a0 <zentrale_init+0x3c>)
 8003282:	2200      	movs	r2, #0
 8003284:	801a      	strh	r2, [r3, #0]

}
 8003286:	bf00      	nop
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	20001240 	.word	0x20001240
 8003294:	20001241 	.word	0x20001241
 8003298:	20001242 	.word	0x20001242
 800329c:	20001244 	.word	0x20001244
 80032a0:	20001246 	.word	0x20001246

080032a4 <z_update_power_errors>:

static void z_update_power_errors(void) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
	// If you only have update_uok():
	if (!update_uok()) {
 80032aa:	f7fd f9cb 	bl	8000644 <update_uok>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d117      	bne.n	80032e4 <z_update_power_errors+0x40>
		// If you want individual bits, read pins directly (or add helpers):
		uint8_t ok5 = u_ok(UC__5VOK_GPIO_Port, UC__5VOK_Pin);
 80032b4:	2110      	movs	r1, #16
 80032b6:	480d      	ldr	r0, [pc, #52]	@ (80032ec <z_update_power_errors+0x48>)
 80032b8:	f7fd f9ac 	bl	8000614 <u_ok>
 80032bc:	4603      	mov	r3, r0
 80032be:	71fb      	strb	r3, [r7, #7]
		uint8_t ok12 = u_ok(UC__12VOK_GPIO_Port, UC__12VOK_Pin);
 80032c0:	2120      	movs	r1, #32
 80032c2:	480a      	ldr	r0, [pc, #40]	@ (80032ec <z_update_power_errors+0x48>)
 80032c4:	f7fd f9a6 	bl	8000614 <u_ok>
 80032c8:	4603      	mov	r3, r0
 80032ca:	71bb      	strb	r3, [r7, #6]
		if (!ok5)
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d102      	bne.n	80032d8 <z_update_power_errors+0x34>
			z_set_error(SG_ERR_U5V);
 80032d2:	2002      	movs	r0, #2
 80032d4:	f000 f918 	bl	8003508 <z_set_error>
		if (!ok12)
 80032d8:	79bb      	ldrb	r3, [r7, #6]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <z_update_power_errors+0x40>
			z_set_error(SG_ERR_U12V);
 80032de:	2003      	movs	r0, #3
 80032e0:	f000 f912 	bl	8003508 <z_set_error>
	}
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	48000c00 	.word	0x48000c00

080032f0 <zentrale>:

// Zentrale denken und entscheiden.
void zentrale(void) {	// ----- DENKEN -----
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0

	z_update_power_errors();
 80032f4:	f7ff ffd6 	bl	80032a4 <z_update_power_errors>

	if (readPumpAlarm()) {
 80032f8:	f7fd f9d8 	bl	80006ac <readPumpAlarm>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <zentrale+0x18>
		z_set_error(SG_ERR_PUMP_ALARM);
 8003302:	2004      	movs	r0, #4
 8003304:	f000 f900 	bl	8003508 <z_set_error>
	}
	if (readPumpWarning()) {
 8003308:	f7fd f9ba 	bl	8000680 <readPumpWarning>
		//z_set_error(SG_ERR_PUMP_WARNING);
	}

	// Fehlerüberprüfung
	if (z_error_akt != 0)
 800330c:	4b66      	ldr	r3, [pc, #408]	@ (80034a8 <zentrale+0x1b8>)
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <zentrale+0x2a>
		z_set_status_tend(ZERROR);
 8003314:	2001      	movs	r0, #1
 8003316:	f000 f8d5 	bl	80034c4 <z_set_status_tend>

	switch (z_status)// Je nach aktuellem Systemzustand auf Anfragen zur Zustands�nderung
 800331a:	4b64      	ldr	r3, [pc, #400]	@ (80034ac <zentrale+0x1bc>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	3b01      	subs	r3, #1
 8003320:	2b0a      	cmp	r3, #10
 8003322:	f200 80ac 	bhi.w	800347e <zentrale+0x18e>
 8003326:	a201      	add	r2, pc, #4	@ (adr r2, 800332c <zentrale+0x3c>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003359 	.word	0x08003359
 8003330:	080033b1 	.word	0x080033b1
 8003334:	0800347f 	.word	0x0800347f
 8003338:	0800347f 	.word	0x0800347f
 800333c:	0800347f 	.word	0x0800347f
 8003340:	0800347f 	.word	0x0800347f
 8003344:	0800347f 	.word	0x0800347f
 8003348:	0800347f 	.word	0x0800347f
 800334c:	080033e9 	.word	0x080033e9
 8003350:	0800347f 	.word	0x0800347f
 8003354:	08003437 	.word	0x08003437
	{// reagieren
	case ZERROR:
		if (z_status_h != ZERROR) {				// add what to do when error
 8003358:	4b55      	ldr	r3, [pc, #340]	@ (80034b0 <zentrale+0x1c0>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d005      	beq.n	800336c <zentrale+0x7c>
			z_status_h = ZERROR;
 8003360:	4b53      	ldr	r3, [pc, #332]	@ (80034b0 <zentrale+0x1c0>)
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
			z_rf_state = 0;
 8003366:	4b53      	ldr	r3, [pc, #332]	@ (80034b4 <zentrale+0x1c4>)
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
		}

		if ((z_error_akt) > 0) // Wenn aktuell noch ein Fehler mit Ausnahme des ERREXT vorliegt
 800336c:	4b4e      	ldr	r3, [pc, #312]	@ (80034a8 <zentrale+0x1b8>)
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <zentrale+0x9a>
				{
			z_error_kum |= z_error_akt; // Wir aktualisieren hier schon mal den Kummulierten Fehler
 8003374:	4b50      	ldr	r3, [pc, #320]	@ (80034b8 <zentrale+0x1c8>)
 8003376:	881a      	ldrh	r2, [r3, #0]
 8003378:	4b4b      	ldr	r3, [pc, #300]	@ (80034a8 <zentrale+0x1b8>)
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	4313      	orrs	r3, r2
 800337e:	b29a      	uxth	r2, r3
 8003380:	4b4d      	ldr	r3, [pc, #308]	@ (80034b8 <zentrale+0x1c8>)
 8003382:	801a      	strh	r2, [r3, #0]
			z_set_status_tend(ZERROR); // kann als Folgezustand nur der Zustand ERROR eingenommen werden!
 8003384:	2001      	movs	r0, #1
 8003386:	f000 f89d 	bl	80034c4 <z_set_status_tend>
		} else {       // Falls kein Fehler im Modul vorliegt schließen wir hier
		}

		switch (z_status_tend) // Wünsche bezüglich einer Zustandsänderung bearbeiten
 800338a:	4b4c      	ldr	r3, [pc, #304]	@ (80034bc <zentrale+0x1cc>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d002      	beq.n	8003398 <zentrale+0xa8>
 8003392:	2b09      	cmp	r3, #9
 8003394:	d004      	beq.n	80033a0 <zentrale+0xb0>
			break;
		case INACTIVE:
			z_status = INACTIVE;                // Zustand INACTIVE vorbereiten
			break;
		default:
			break;
 8003396:	e007      	b.n	80033a8 <zentrale+0xb8>
			z_status = POWERON;
 8003398:	4b44      	ldr	r3, [pc, #272]	@ (80034ac <zentrale+0x1bc>)
 800339a:	2202      	movs	r2, #2
 800339c:	701a      	strb	r2, [r3, #0]
			break;
 800339e:	e003      	b.n	80033a8 <zentrale+0xb8>
			z_status = INACTIVE;                // Zustand INACTIVE vorbereiten
 80033a0:	4b42      	ldr	r3, [pc, #264]	@ (80034ac <zentrale+0x1bc>)
 80033a2:	2209      	movs	r2, #9
 80033a4:	701a      	strb	r2, [r3, #0]
			break;
 80033a6:	bf00      	nop
		}
		z_status_tend = NOP;                         // Status_tend zurücksetzen
 80033a8:	4b44      	ldr	r3, [pc, #272]	@ (80034bc <zentrale+0x1cc>)
 80033aa:	22ff      	movs	r2, #255	@ 0xff
 80033ac:	701a      	strb	r2, [r3, #0]
		break;
 80033ae:	e06d      	b.n	800348c <zentrale+0x19c>
//			if(((z_error_kum && ((1<<SG_ERREN) + (1<<SG_ERRDTC))) != 0) && (adc7927_chk_en() != 1))
//				z_set_status_tend(Z_ERROR);


	case POWERON:// Startzustand nach Einschalten des Ger�tes. Keine Fehlerbehandlung!
		if (z_status_h != POWERON) {
 80033b0:	4b3f      	ldr	r3, [pc, #252]	@ (80034b0 <zentrale+0x1c0>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d008      	beq.n	80033ca <zentrale+0xda>
			z_init_done = 0;
 80033b8:	4b41      	ldr	r3, [pc, #260]	@ (80034c0 <zentrale+0x1d0>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
			z_rf_state = 0;
 80033be:	4b3d      	ldr	r3, [pc, #244]	@ (80034b4 <zentrale+0x1c4>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
			z_status_h = POWERON;
 80033c4:	4b3a      	ldr	r3, [pc, #232]	@ (80034b0 <zentrale+0x1c0>)
 80033c6:	2202      	movs	r2, #2
 80033c8:	701a      	strb	r2, [r3, #0]
		}

		if (ct_init_null()) {
 80033ca:	f7ff fa0f 	bl	80027ec <ct_init_null>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <zentrale+0xf0>
			z_init_done = 1;
 80033d4:	4b3a      	ldr	r3, [pc, #232]	@ (80034c0 <zentrale+0x1d0>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
			z_status = INACTIVE;
 80033da:	4b34      	ldr	r3, [pc, #208]	@ (80034ac <zentrale+0x1bc>)
 80033dc:	2209      	movs	r2, #9
 80033de:	701a      	strb	r2, [r3, #0]
		}

		z_status_tend = NOP;					// z_status_tend zur�cksetzen
 80033e0:	4b36      	ldr	r3, [pc, #216]	@ (80034bc <zentrale+0x1cc>)
 80033e2:	22ff      	movs	r2, #255	@ 0xff
 80033e4:	701a      	strb	r2, [r3, #0]
		break;
 80033e6:	e051      	b.n	800348c <zentrale+0x19c>

	case INACTIVE:						//----- System im INACTIVE-Zustand

		if (z_status_h != INACTIVE) {
 80033e8:	4b31      	ldr	r3, [pc, #196]	@ (80034b0 <zentrale+0x1c0>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b09      	cmp	r3, #9
 80033ee:	d008      	beq.n	8003402 <zentrale+0x112>
			z_error_kum = 0;
 80033f0:	4b31      	ldr	r3, [pc, #196]	@ (80034b8 <zentrale+0x1c8>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	801a      	strh	r2, [r3, #0]
			z_rf_state = 0;
 80033f6:	4b2f      	ldr	r3, [pc, #188]	@ (80034b4 <zentrale+0x1c4>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
			z_status_h = INACTIVE;
 80033fc:	4b2c      	ldr	r3, [pc, #176]	@ (80034b0 <zentrale+0x1c0>)
 80033fe:	2209      	movs	r2, #9
 8003400:	701a      	strb	r2, [r3, #0]
		}

		if (z_error_akt != 0)
 8003402:	4b29      	ldr	r3, [pc, #164]	@ (80034a8 <zentrale+0x1b8>)
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <zentrale+0x120>
			z_set_status_tend(ZERROR);
 800340a:	2001      	movs	r0, #1
 800340c:	f000 f85a 	bl	80034c4 <z_set_status_tend>

		switch (z_status_tend) {
 8003410:	4b2a      	ldr	r3, [pc, #168]	@ (80034bc <zentrale+0x1cc>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d002      	beq.n	800341e <zentrale+0x12e>
 8003418:	2b0b      	cmp	r3, #11
 800341a:	d004      	beq.n	8003426 <zentrale+0x136>
			z_status = ZERROR;
			break;
		case ACTIVE:
			z_status = ACTIVE;
		default:
			break;
 800341c:	e006      	b.n	800342c <zentrale+0x13c>
			z_status = ZERROR;
 800341e:	4b23      	ldr	r3, [pc, #140]	@ (80034ac <zentrale+0x1bc>)
 8003420:	2201      	movs	r2, #1
 8003422:	701a      	strb	r2, [r3, #0]
			break;
 8003424:	e003      	b.n	800342e <zentrale+0x13e>
			z_status = ACTIVE;
 8003426:	4b21      	ldr	r3, [pc, #132]	@ (80034ac <zentrale+0x1bc>)
 8003428:	220b      	movs	r2, #11
 800342a:	701a      	strb	r2, [r3, #0]
			break;
 800342c:	bf00      	nop
		}
		z_status_tend = NOP;
 800342e:	4b23      	ldr	r3, [pc, #140]	@ (80034bc <zentrale+0x1cc>)
 8003430:	22ff      	movs	r2, #255	@ 0xff
 8003432:	701a      	strb	r2, [r3, #0]
		break;
 8003434:	e02a      	b.n	800348c <zentrale+0x19c>

	case ACTIVE:
		if (z_status_h != ACTIVE) {
 8003436:	4b1e      	ldr	r3, [pc, #120]	@ (80034b0 <zentrale+0x1c0>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b0b      	cmp	r3, #11
 800343c:	d005      	beq.n	800344a <zentrale+0x15a>
			z_rf_state = 1;
 800343e:	4b1d      	ldr	r3, [pc, #116]	@ (80034b4 <zentrale+0x1c4>)
 8003440:	2201      	movs	r2, #1
 8003442:	701a      	strb	r2, [r3, #0]
			z_status_h = ACTIVE;
 8003444:	4b1a      	ldr	r3, [pc, #104]	@ (80034b0 <zentrale+0x1c0>)
 8003446:	220b      	movs	r2, #11
 8003448:	701a      	strb	r2, [r3, #0]
		}

		if (z_error_akt != 0)
 800344a:	4b17      	ldr	r3, [pc, #92]	@ (80034a8 <zentrale+0x1b8>)
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <zentrale+0x168>
			z_set_status_tend(ZERROR);
 8003452:	2001      	movs	r0, #1
 8003454:	f000 f836 	bl	80034c4 <z_set_status_tend>

		switch (z_status_tend) {
 8003458:	4b18      	ldr	r3, [pc, #96]	@ (80034bc <zentrale+0x1cc>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d002      	beq.n	8003466 <zentrale+0x176>
 8003460:	2b09      	cmp	r3, #9
 8003462:	d004      	beq.n	800346e <zentrale+0x17e>
			z_status = ZERROR;
			break;
		case INACTIVE:
			z_status = INACTIVE;
		default:
			break;
 8003464:	e006      	b.n	8003474 <zentrale+0x184>
			z_status = ZERROR;
 8003466:	4b11      	ldr	r3, [pc, #68]	@ (80034ac <zentrale+0x1bc>)
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
			break;
 800346c:	e003      	b.n	8003476 <zentrale+0x186>
			z_status = INACTIVE;
 800346e:	4b0f      	ldr	r3, [pc, #60]	@ (80034ac <zentrale+0x1bc>)
 8003470:	2209      	movs	r2, #9
 8003472:	701a      	strb	r2, [r3, #0]
			break;
 8003474:	bf00      	nop
		}
		z_status_tend = NOP;
 8003476:	4b11      	ldr	r3, [pc, #68]	@ (80034bc <zentrale+0x1cc>)
 8003478:	22ff      	movs	r2, #255	@ 0xff
 800347a:	701a      	strb	r2, [r3, #0]
		break;
 800347c:	e006      	b.n	800348c <zentrale+0x19c>

	default:
		z_status_tend = NOP;
 800347e:	4b0f      	ldr	r3, [pc, #60]	@ (80034bc <zentrale+0x1cc>)
 8003480:	22ff      	movs	r2, #255	@ 0xff
 8003482:	701a      	strb	r2, [r3, #0]
		z_status_h = NOP;
 8003484:	4b0a      	ldr	r3, [pc, #40]	@ (80034b0 <zentrale+0x1c0>)
 8003486:	22ff      	movs	r2, #255	@ 0xff
 8003488:	701a      	strb	r2, [r3, #0]
		break;
 800348a:	bf00      	nop
	}
	z_error_kum |= z_error_akt;	// Eventuell aufgetretenen neuen Fehler zur kummulierten
 800348c:	4b0a      	ldr	r3, [pc, #40]	@ (80034b8 <zentrale+0x1c8>)
 800348e:	881a      	ldrh	r2, [r3, #0]
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <zentrale+0x1b8>)
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	4313      	orrs	r3, r2
 8003496:	b29a      	uxth	r2, r3
 8003498:	4b07      	ldr	r3, [pc, #28]	@ (80034b8 <zentrale+0x1c8>)
 800349a:	801a      	strh	r2, [r3, #0]
	z_error_akt = 0;// Fehleranzeige für aktuell vorliegende Fehler zurücksetzen
 800349c:	4b02      	ldr	r3, [pc, #8]	@ (80034a8 <zentrale+0x1b8>)
 800349e:	2200      	movs	r2, #0
 80034a0:	801a      	strh	r2, [r3, #0]

}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20001244 	.word	0x20001244
 80034ac:	20001240 	.word	0x20001240
 80034b0:	20001241 	.word	0x20001241
 80034b4:	20001249 	.word	0x20001249
 80034b8:	20001246 	.word	0x20001246
 80034bc:	20001242 	.word	0x20001242
 80034c0:	20001248 	.word	0x20001248

080034c4 <z_set_status_tend>:
	return z_status;
}

// Statuswunsch setzen
// Priorität:   error, inactive, start, active
void z_set_status_tend(uint8_t statnew) {
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
	if (z_status_tend > statnew)
 80034ce:	4b07      	ldr	r3, [pc, #28]	@ (80034ec <z_set_status_tend+0x28>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	79fa      	ldrb	r2, [r7, #7]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d203      	bcs.n	80034e0 <z_set_status_tend+0x1c>
		z_status_tend = statnew;    // nur Status höherer Priorität übernehmen
 80034d8:	4a04      	ldr	r2, [pc, #16]	@ (80034ec <z_set_status_tend+0x28>)
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	7013      	strb	r3, [r2, #0]

	return;
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
}
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	20001242 	.word	0x20001242

080034f0 <z_get_error>:

uint16_t z_get_error(void) {
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
	return z_error_kum;
 80034f4:	4b03      	ldr	r3, [pc, #12]	@ (8003504 <z_get_error+0x14>)
 80034f6:	881b      	ldrh	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20001246 	.word	0x20001246

08003508 <z_set_error>:

// Fehler an Zentrale melden
void z_set_error(uint8_t errnr) {
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
	if (errnr <= 15)
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	2b0f      	cmp	r3, #15
 8003516:	d80c      	bhi.n	8003532 <z_set_error+0x2a>
		z_error_akt |= (1 << errnr);
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	2201      	movs	r2, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	b21a      	sxth	r2, r3
 8003522:	4b07      	ldr	r3, [pc, #28]	@ (8003540 <z_set_error+0x38>)
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	b21b      	sxth	r3, r3
 8003528:	4313      	orrs	r3, r2
 800352a:	b21b      	sxth	r3, r3
 800352c:	b29a      	uxth	r2, r3
 800352e:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <z_set_error+0x38>)
 8003530:	801a      	strh	r2, [r3, #0]
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20001244 	.word	0x20001244

08003544 <z_get_status>:

uint8_t z_get_status(void) {
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
	return z_status;
 8003548:	4b03      	ldr	r3, [pc, #12]	@ (8003558 <z_get_status+0x14>)
 800354a:	781b      	ldrb	r3, [r3, #0]
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	20001240 	.word	0x20001240

0800355c <z_reset>:

uint8_t z_reset(void) {
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
	z_error_kum = 0;
 8003560:	4b06      	ldr	r3, [pc, #24]	@ (800357c <z_reset+0x20>)
 8003562:	2200      	movs	r2, #0
 8003564:	801a      	strh	r2, [r3, #0]
	if (z_status == ERROR) {
 8003566:	4b06      	ldr	r3, [pc, #24]	@ (8003580 <z_reset+0x24>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d102      	bne.n	8003574 <z_reset+0x18>
		z_set_status_tend(INACTIVE);
 800356e:	2009      	movs	r0, #9
 8003570:	f7ff ffa8 	bl	80034c4 <z_set_status_tend>
	}
	return CMR_SUCCESSFULL;
 8003574:	2380      	movs	r3, #128	@ 0x80
}
 8003576:	4618      	mov	r0, r3
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20001246 	.word	0x20001246
 8003580:	20001240 	.word	0x20001240

08003584 <z_get_remote_mode>:

int32_t z_get_remote_mode(void) {
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
	return z_remote_mode;
 8003588:	4b03      	ldr	r3, [pc, #12]	@ (8003598 <z_get_remote_mode+0x14>)
 800358a:	781b      	ldrb	r3, [r3, #0]
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000008 	.word	0x20000008

0800359c <z_set_remote_mode>:
		return 1;
	else
		return 0;
}

uint8_t z_set_remote_mode(uint8_t opmode) {
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
	switch (opmode) {
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <z_set_remote_mode+0x16>
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d005      	beq.n	80035bc <z_set_remote_mode+0x20>
 80035b0:	e009      	b.n	80035c6 <z_set_remote_mode+0x2a>
	case z_rmt_off:
		z_remote_mode = z_rmt_off;
 80035b2:	4b08      	ldr	r3, [pc, #32]	@ (80035d4 <z_set_remote_mode+0x38>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
		return CMR_SUCCESSFULL;
 80035b8:	2380      	movs	r3, #128	@ 0x80
 80035ba:	e005      	b.n	80035c8 <z_set_remote_mode+0x2c>
		break;

	case z_rmt_rs232:
		z_remote_mode = z_rmt_rs232;
 80035bc:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <z_set_remote_mode+0x38>)
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
		return CMR_SUCCESSFULL;
 80035c2:	2380      	movs	r3, #128	@ 0x80
 80035c4:	e000      	b.n	80035c8 <z_set_remote_mode+0x2c>
		break;

	default:
		return CMR_PARAMETERINVALID;
 80035c6:	2301      	movs	r3, #1
		break;
	}
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	20000008 	.word	0x20000008

080035d8 <z_set_rf>:

uint8_t z_set_rf(uint8_t x) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
	uint8_t retVal = CMR_SUCCESSFULL;
 80035e2:	2380      	movs	r3, #128	@ 0x80
 80035e4:	73fb      	strb	r3, [r7, #15]
	switch (x) {
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <z_set_rf+0x1a>
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d004      	beq.n	80035fa <z_set_rf+0x22>
 80035f0:	e007      	b.n	8003602 <z_set_rf+0x2a>
	case 0:
		z_set_status_tend(INACTIVE);
 80035f2:	2009      	movs	r0, #9
 80035f4:	f7ff ff66 	bl	80034c4 <z_set_status_tend>
//            z_rf_state = 0;
		break;
 80035f8:	e005      	b.n	8003606 <z_set_rf+0x2e>
	case 1:
		z_set_status_tend(ACTIVE);
 80035fa:	200b      	movs	r0, #11
 80035fc:	f7ff ff62 	bl	80034c4 <z_set_status_tend>
//            z_rf_state = 1;
		break;
 8003600:	e001      	b.n	8003606 <z_set_rf+0x2e>
	default:
		retVal = CMR_PARAMETERINVALID;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
	}

	return retVal;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <z_get_rf>:

uint8_t z_get_rf(void) {
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
	return z_rf_state;
 8003614:	4b03      	ldr	r3, [pc, #12]	@ (8003624 <z_get_rf+0x14>)
 8003616:	781b      	ldrb	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20001249 	.word	0x20001249

08003628 <z_get_pf_a>:

int32_t z_get_pf_a(void) {
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 800362c:	4b05      	ldr	r3, [pc, #20]	@ (8003644 <z_get_pf_a+0x1c>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <z_get_pf_a+0x10>
		return 0;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <z_get_pf_a+0x12>
	else
		return 1;//get_lcd1234Val_filt(PF1);
 8003638:	2301      	movs	r3, #1
}
 800363a:	4618      	mov	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	20001249 	.word	0x20001249

08003648 <z_get_pr_a>:

int32_t z_get_pr_a(void) {
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 800364c:	4b05      	ldr	r3, [pc, #20]	@ (8003664 <z_get_pr_a+0x1c>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <z_get_pr_a+0x10>
		return 0;
 8003654:	2300      	movs	r3, #0
 8003656:	e000      	b.n	800365a <z_get_pr_a+0x12>
	else
		return 1;//get_lcd1234Val_filt(PR1);
 8003658:	2301      	movs	r3, #1
}
 800365a:	4618      	mov	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	20001249 	.word	0x20001249

08003668 <z_get_pf_b>:

int32_t z_get_pf_b(void) {
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 800366c:	4b05      	ldr	r3, [pc, #20]	@ (8003684 <z_get_pf_b+0x1c>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <z_get_pf_b+0x10>
		return 0;
 8003674:	2300      	movs	r3, #0
 8003676:	e000      	b.n	800367a <z_get_pf_b+0x12>
	else
		return 1;//get_lcd1234Val_filt(PF2);
 8003678:	2301      	movs	r3, #1
}
 800367a:	4618      	mov	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	20001249 	.word	0x20001249

08003688 <z_get_pr_b>:

int32_t z_get_pr_b(void) {
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 800368c:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <z_get_pr_b+0x1c>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <z_get_pr_b+0x10>
		return 0;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <z_get_pr_b+0x12>
	else
		return 1;//get_lcd1234Val_filt(PR2);
 8003698:	2301      	movs	r3, #1
}
 800369a:	4618      	mov	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	20001249 	.word	0x20001249

080036a8 <z_get_pf_c>:

int32_t z_get_pf_c(void) {
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 80036ac:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <z_get_pf_c+0x1c>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <z_get_pf_c+0x10>
		return 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	e000      	b.n	80036ba <z_get_pf_c+0x12>
	else
		return 1;//get_lcd1234Val_filt(PF3);
 80036b8:	2301      	movs	r3, #1
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	20001249 	.word	0x20001249

080036c8 <z_get_pr_c>:

int32_t z_get_pr_c(void) {
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 80036cc:	4b05      	ldr	r3, [pc, #20]	@ (80036e4 <z_get_pr_c+0x1c>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <z_get_pr_c+0x10>
		return 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e000      	b.n	80036da <z_get_pr_c+0x12>
	else
		return 1;//get_lcd1234Val_filt(PR3);
 80036d8:	2301      	movs	r3, #1
}
 80036da:	4618      	mov	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	20001249 	.word	0x20001249

080036e8 <z_get_pf_d>:

int32_t z_get_pf_d(void) {
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 80036ec:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <z_get_pf_d+0x1c>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <z_get_pf_d+0x10>
		return 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <z_get_pf_d+0x12>
	else
		return 1;//get_lcd1234Val_filt(PF4);
 80036f8:	2301      	movs	r3, #1
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	20001249 	.word	0x20001249

08003708 <z_get_pr_d>:

int32_t z_get_pr_d(void) {
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 800370c:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <z_get_pr_d+0x1c>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <z_get_pr_d+0x10>
		return 0;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <z_get_pr_d+0x12>
	else
		return 1;//get_lcd1234Val_filt(PR4);
 8003718:	2301      	movs	r3, #1
}
 800371a:	4618      	mov	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	20001249 	.word	0x20001249

08003728 <z_set_a_ampphase>:

uint8_t z_set_a_ampphase(uint32_t val) {
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	int32_t tmp_phase = val & 0x0000FFFF;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	b29b      	uxth	r3, r3
 8003734:	613b      	str	r3, [r7, #16]
	int32_t tmp_amplitude = (val & 0xFFFF0000) >> 16;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	60fb      	str	r3, [r7, #12]

	uint8_t retVal = CMR_SUCCESSFULL;
 800373c:	2380      	movs	r3, #128	@ 0x80
 800373e:	75fb      	strb	r3, [r7, #23]

	if (tmp_phase < min_phase) {
 8003740:	2200      	movs	r2, #0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4293      	cmp	r3, r2
 8003746:	da05      	bge.n	8003754 <z_set_a_ampphase+0x2c>
		retVal = CMR_PARAMETERADJUSTED;
 8003748:	238a      	movs	r3, #138	@ 0x8a
 800374a:	75fb      	strb	r3, [r7, #23]
		chan1_phase = min_phase;
 800374c:	2200      	movs	r2, #0
 800374e:	4b19      	ldr	r3, [pc, #100]	@ (80037b4 <z_set_a_ampphase+0x8c>)
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	e00e      	b.n	8003772 <z_set_a_ampphase+0x4a>
	} else if (tmp_phase > max_phase) {
 8003754:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4293      	cmp	r3, r2
 800375c:	dd06      	ble.n	800376c <z_set_a_ampphase+0x44>
		retVal = CMR_PARAMETERADJUSTED;
 800375e:	238a      	movs	r3, #138	@ 0x8a
 8003760:	75fb      	strb	r3, [r7, #23]
		chan1_phase = max_phase;
 8003762:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003766:	4b13      	ldr	r3, [pc, #76]	@ (80037b4 <z_set_a_ampphase+0x8c>)
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e002      	b.n	8003772 <z_set_a_ampphase+0x4a>
	} else {
		chan1_phase = tmp_phase;
 800376c:	4a11      	ldr	r2, [pc, #68]	@ (80037b4 <z_set_a_ampphase+0x8c>)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	6013      	str	r3, [r2, #0]
	}

	if (tmp_amplitude < min_amplitude) {
 8003772:	2200      	movs	r2, #0
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4293      	cmp	r3, r2
 8003778:	da05      	bge.n	8003786 <z_set_a_ampphase+0x5e>
		retVal = CMR_PARAMETERADJUSTED;
 800377a:	238a      	movs	r3, #138	@ 0x8a
 800377c:	75fb      	strb	r3, [r7, #23]
		chan1_amplitude = min_amplitude;
 800377e:	2200      	movs	r2, #0
 8003780:	4b0d      	ldr	r3, [pc, #52]	@ (80037b8 <z_set_a_ampphase+0x90>)
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	e00e      	b.n	80037a4 <z_set_a_ampphase+0x7c>
	} else if (tmp_amplitude > max_amplitude) {
 8003786:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4293      	cmp	r3, r2
 800378e:	dd06      	ble.n	800379e <z_set_a_ampphase+0x76>
		retVal = CMR_PARAMETERADJUSTED;
 8003790:	238a      	movs	r3, #138	@ 0x8a
 8003792:	75fb      	strb	r3, [r7, #23]
		chan1_amplitude = max_amplitude;
 8003794:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003798:	4b07      	ldr	r3, [pc, #28]	@ (80037b8 <z_set_a_ampphase+0x90>)
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	e002      	b.n	80037a4 <z_set_a_ampphase+0x7c>
	} else {
		chan1_amplitude = tmp_amplitude;
 800379e:	4a06      	ldr	r2, [pc, #24]	@ (80037b8 <z_set_a_ampphase+0x90>)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6013      	str	r3, [r2, #0]

	//dds_set_cpow_x(chan1_phase, 1);
	//dds_set_amp_x(chan1_amplitude, 1);
	//dds_apply();

	return retVal;
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	2000124c 	.word	0x2000124c
 80037b8:	2000125c 	.word	0x2000125c

080037bc <z_set_b_ampphase>:

uint8_t z_set_b_ampphase(uint32_t val) {
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	int32_t tmp_phase = val & 0x0000FFFF;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	613b      	str	r3, [r7, #16]
	int32_t tmp_amplitude = (val & 0xFFFF0000) >> 16;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	60fb      	str	r3, [r7, #12]

	uint8_t retVal = CMR_SUCCESSFULL;
 80037d0:	2380      	movs	r3, #128	@ 0x80
 80037d2:	75fb      	strb	r3, [r7, #23]

	if (tmp_phase < min_phase) {
 80037d4:	2200      	movs	r2, #0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4293      	cmp	r3, r2
 80037da:	da05      	bge.n	80037e8 <z_set_b_ampphase+0x2c>
		retVal = CMR_PARAMETERADJUSTED;
 80037dc:	238a      	movs	r3, #138	@ 0x8a
 80037de:	75fb      	strb	r3, [r7, #23]
		chan2_phase = min_phase;
 80037e0:	2200      	movs	r2, #0
 80037e2:	4b19      	ldr	r3, [pc, #100]	@ (8003848 <z_set_b_ampphase+0x8c>)
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e00e      	b.n	8003806 <z_set_b_ampphase+0x4a>
	} else if (tmp_phase > max_phase) {
 80037e8:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4293      	cmp	r3, r2
 80037f0:	dd06      	ble.n	8003800 <z_set_b_ampphase+0x44>
		retVal = CMR_PARAMETERADJUSTED;
 80037f2:	238a      	movs	r3, #138	@ 0x8a
 80037f4:	75fb      	strb	r3, [r7, #23]
		chan2_phase = max_phase;
 80037f6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80037fa:	4b13      	ldr	r3, [pc, #76]	@ (8003848 <z_set_b_ampphase+0x8c>)
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e002      	b.n	8003806 <z_set_b_ampphase+0x4a>
	} else {
		chan2_phase = tmp_phase;
 8003800:	4a11      	ldr	r2, [pc, #68]	@ (8003848 <z_set_b_ampphase+0x8c>)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	6013      	str	r3, [r2, #0]
	}

	if (tmp_amplitude < min_amplitude) {
 8003806:	2200      	movs	r2, #0
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4293      	cmp	r3, r2
 800380c:	da05      	bge.n	800381a <z_set_b_ampphase+0x5e>
		retVal = CMR_PARAMETERADJUSTED;
 800380e:	238a      	movs	r3, #138	@ 0x8a
 8003810:	75fb      	strb	r3, [r7, #23]
		chan2_amplitude = min_amplitude;
 8003812:	2200      	movs	r2, #0
 8003814:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <z_set_b_ampphase+0x90>)
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e00e      	b.n	8003838 <z_set_b_ampphase+0x7c>
	} else if (tmp_amplitude > max_amplitude) {
 800381a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4293      	cmp	r3, r2
 8003822:	dd06      	ble.n	8003832 <z_set_b_ampphase+0x76>
		retVal = CMR_PARAMETERADJUSTED;
 8003824:	238a      	movs	r3, #138	@ 0x8a
 8003826:	75fb      	strb	r3, [r7, #23]
		chan2_amplitude = max_amplitude;
 8003828:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800382c:	4b07      	ldr	r3, [pc, #28]	@ (800384c <z_set_b_ampphase+0x90>)
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e002      	b.n	8003838 <z_set_b_ampphase+0x7c>
	} else {
		chan2_amplitude = tmp_amplitude;
 8003832:	4a06      	ldr	r2, [pc, #24]	@ (800384c <z_set_b_ampphase+0x90>)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6013      	str	r3, [r2, #0]

	//dds_set_cpow_x(chan2_phase, 2);
	//dds_set_amp_x(chan2_amplitude, 2);
	//dds_apply();

	return retVal;
 8003838:	7dfb      	ldrb	r3, [r7, #23]
}
 800383a:	4618      	mov	r0, r3
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20001250 	.word	0x20001250
 800384c:	20001260 	.word	0x20001260

08003850 <z_set_c_ampphase>:

uint8_t z_set_c_ampphase(uint32_t val) {
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	int32_t tmp_phase = val & 0x0000FFFF;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	b29b      	uxth	r3, r3
 800385c:	613b      	str	r3, [r7, #16]
	int32_t tmp_amplitude = (val & 0xFFFF0000) >> 16;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	60fb      	str	r3, [r7, #12]

	uint8_t retVal = CMR_SUCCESSFULL;
 8003864:	2380      	movs	r3, #128	@ 0x80
 8003866:	75fb      	strb	r3, [r7, #23]

	if (tmp_phase < min_phase) {
 8003868:	2200      	movs	r2, #0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4293      	cmp	r3, r2
 800386e:	da05      	bge.n	800387c <z_set_c_ampphase+0x2c>
		retVal = CMR_PARAMETERADJUSTED;
 8003870:	238a      	movs	r3, #138	@ 0x8a
 8003872:	75fb      	strb	r3, [r7, #23]
		chan3_phase = min_phase;
 8003874:	2200      	movs	r2, #0
 8003876:	4b19      	ldr	r3, [pc, #100]	@ (80038dc <z_set_c_ampphase+0x8c>)
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e00e      	b.n	800389a <z_set_c_ampphase+0x4a>
	} else if (tmp_phase > max_phase) {
 800387c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4293      	cmp	r3, r2
 8003884:	dd06      	ble.n	8003894 <z_set_c_ampphase+0x44>
		retVal = CMR_PARAMETERADJUSTED;
 8003886:	238a      	movs	r3, #138	@ 0x8a
 8003888:	75fb      	strb	r3, [r7, #23]
		chan3_phase = max_phase;
 800388a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800388e:	4b13      	ldr	r3, [pc, #76]	@ (80038dc <z_set_c_ampphase+0x8c>)
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e002      	b.n	800389a <z_set_c_ampphase+0x4a>
	} else {
		chan3_phase = tmp_phase;
 8003894:	4a11      	ldr	r2, [pc, #68]	@ (80038dc <z_set_c_ampphase+0x8c>)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	6013      	str	r3, [r2, #0]
	}

	if (tmp_amplitude < min_amplitude) {
 800389a:	2200      	movs	r2, #0
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4293      	cmp	r3, r2
 80038a0:	da05      	bge.n	80038ae <z_set_c_ampphase+0x5e>
		retVal = CMR_PARAMETERADJUSTED;
 80038a2:	238a      	movs	r3, #138	@ 0x8a
 80038a4:	75fb      	strb	r3, [r7, #23]
		chan3_amplitude = min_amplitude;
 80038a6:	2200      	movs	r2, #0
 80038a8:	4b0d      	ldr	r3, [pc, #52]	@ (80038e0 <z_set_c_ampphase+0x90>)
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	e00e      	b.n	80038cc <z_set_c_ampphase+0x7c>
	} else if (tmp_amplitude > max_amplitude) {
 80038ae:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4293      	cmp	r3, r2
 80038b6:	dd06      	ble.n	80038c6 <z_set_c_ampphase+0x76>
		retVal = CMR_PARAMETERADJUSTED;
 80038b8:	238a      	movs	r3, #138	@ 0x8a
 80038ba:	75fb      	strb	r3, [r7, #23]
		chan3_amplitude = max_amplitude;
 80038bc:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80038c0:	4b07      	ldr	r3, [pc, #28]	@ (80038e0 <z_set_c_ampphase+0x90>)
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	e002      	b.n	80038cc <z_set_c_ampphase+0x7c>
	} else {
		chan3_amplitude = tmp_amplitude;
 80038c6:	4a06      	ldr	r2, [pc, #24]	@ (80038e0 <z_set_c_ampphase+0x90>)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6013      	str	r3, [r2, #0]

	//dds_set_cpow_x(chan3_phase, 3);
	//dds_set_amp_x(chan3_amplitude, 3);
	//dds_apply();

	return retVal;
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20001254 	.word	0x20001254
 80038e0:	20001264 	.word	0x20001264

080038e4 <z_set_d_ampphase>:

uint8_t z_set_d_ampphase(uint32_t val) {
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	int32_t tmp_phase = val & 0x0000FFFF;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	613b      	str	r3, [r7, #16]
	int32_t tmp_amplitude = (val & 0xFFFF0000) >> 16;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	60fb      	str	r3, [r7, #12]

	uint8_t retVal = CMR_SUCCESSFULL;
 80038f8:	2380      	movs	r3, #128	@ 0x80
 80038fa:	75fb      	strb	r3, [r7, #23]

	if (tmp_phase < min_phase) {
 80038fc:	2200      	movs	r2, #0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4293      	cmp	r3, r2
 8003902:	da05      	bge.n	8003910 <z_set_d_ampphase+0x2c>
		retVal = CMR_PARAMETERADJUSTED;
 8003904:	238a      	movs	r3, #138	@ 0x8a
 8003906:	75fb      	strb	r3, [r7, #23]
		chan4_phase = min_phase;
 8003908:	2200      	movs	r2, #0
 800390a:	4b19      	ldr	r3, [pc, #100]	@ (8003970 <z_set_d_ampphase+0x8c>)
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e00e      	b.n	800392e <z_set_d_ampphase+0x4a>
	} else if (tmp_phase > max_phase) {
 8003910:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4293      	cmp	r3, r2
 8003918:	dd06      	ble.n	8003928 <z_set_d_ampphase+0x44>
		retVal = CMR_PARAMETERADJUSTED;
 800391a:	238a      	movs	r3, #138	@ 0x8a
 800391c:	75fb      	strb	r3, [r7, #23]
		chan4_phase = max_phase;
 800391e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003922:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <z_set_d_ampphase+0x8c>)
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e002      	b.n	800392e <z_set_d_ampphase+0x4a>
	} else {
		chan4_phase = tmp_phase;
 8003928:	4a11      	ldr	r2, [pc, #68]	@ (8003970 <z_set_d_ampphase+0x8c>)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	6013      	str	r3, [r2, #0]
	}

	if (tmp_amplitude < min_amplitude) {
 800392e:	2200      	movs	r2, #0
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4293      	cmp	r3, r2
 8003934:	da05      	bge.n	8003942 <z_set_d_ampphase+0x5e>
		retVal = CMR_PARAMETERADJUSTED;
 8003936:	238a      	movs	r3, #138	@ 0x8a
 8003938:	75fb      	strb	r3, [r7, #23]
		chan4_amplitude = min_amplitude;
 800393a:	2200      	movs	r2, #0
 800393c:	4b0d      	ldr	r3, [pc, #52]	@ (8003974 <z_set_d_ampphase+0x90>)
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e00e      	b.n	8003960 <z_set_d_ampphase+0x7c>
	} else if (tmp_amplitude > max_amplitude) {
 8003942:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4293      	cmp	r3, r2
 800394a:	dd06      	ble.n	800395a <z_set_d_ampphase+0x76>
		retVal = CMR_PARAMETERADJUSTED;
 800394c:	238a      	movs	r3, #138	@ 0x8a
 800394e:	75fb      	strb	r3, [r7, #23]
		chan4_amplitude = max_amplitude;
 8003950:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003954:	4b07      	ldr	r3, [pc, #28]	@ (8003974 <z_set_d_ampphase+0x90>)
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e002      	b.n	8003960 <z_set_d_ampphase+0x7c>
	} else {
		chan4_amplitude = tmp_amplitude;
 800395a:	4a06      	ldr	r2, [pc, #24]	@ (8003974 <z_set_d_ampphase+0x90>)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6013      	str	r3, [r2, #0]

	//dds_set_cpow_x(chan4_phase, 4);
	//dds_set_amp_x(chan4_amplitude, 4);
	//dds_apply();

	return retVal;
 8003960:	7dfb      	ldrb	r3, [r7, #23]
}
 8003962:	4618      	mov	r0, r3
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20001258 	.word	0x20001258
 8003974:	20001268 	.word	0x20001268

08003978 <z_set_amp_a>:

uint8_t z_set_amp_a(int32_t val) {
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 8003980:	2380      	movs	r3, #128	@ 0x80
 8003982:	73fb      	strb	r3, [r7, #15]

	if (val < min_amplitude) {
 8003984:	2200      	movs	r2, #0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4293      	cmp	r3, r2
 800398a:	da05      	bge.n	8003998 <z_set_amp_a+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 800398c:	2382      	movs	r3, #130	@ 0x82
 800398e:	73fb      	strb	r3, [r7, #15]
		chan1_amplitude = min_amplitude;
 8003990:	2200      	movs	r2, #0
 8003992:	4b0c      	ldr	r3, [pc, #48]	@ (80039c4 <z_set_amp_a+0x4c>)
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	e00e      	b.n	80039b6 <z_set_amp_a+0x3e>
	} else if (val > max_amplitude) {
 8003998:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4293      	cmp	r3, r2
 80039a0:	dd06      	ble.n	80039b0 <z_set_amp_a+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 80039a2:	2383      	movs	r3, #131	@ 0x83
 80039a4:	73fb      	strb	r3, [r7, #15]
		chan1_amplitude = max_amplitude;
 80039a6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80039aa:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <z_set_amp_a+0x4c>)
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	e002      	b.n	80039b6 <z_set_amp_a+0x3e>
	} else {
		chan1_amplitude = val;
 80039b0:	4a04      	ldr	r2, [pc, #16]	@ (80039c4 <z_set_amp_a+0x4c>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6013      	str	r3, [r2, #0]
	}
	//dds_set_amp_x(chan1_amplitude, 1);

	return retVal;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	2000125c 	.word	0x2000125c

080039c8 <z_get_amp_a>:

int32_t z_get_amp_a(void) {
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
	return chan1_amplitude;
 80039cc:	4b03      	ldr	r3, [pc, #12]	@ (80039dc <z_get_amp_a+0x14>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	2000125c 	.word	0x2000125c

080039e0 <z_set_amp_b>:

uint8_t z_set_amp_b(int32_t val) {
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 80039e8:	2380      	movs	r3, #128	@ 0x80
 80039ea:	73fb      	strb	r3, [r7, #15]

	if (val < min_amplitude) {
 80039ec:	2200      	movs	r2, #0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4293      	cmp	r3, r2
 80039f2:	da05      	bge.n	8003a00 <z_set_amp_b+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 80039f4:	2382      	movs	r3, #130	@ 0x82
 80039f6:	73fb      	strb	r3, [r7, #15]
		chan2_amplitude = min_amplitude;
 80039f8:	2200      	movs	r2, #0
 80039fa:	4b0c      	ldr	r3, [pc, #48]	@ (8003a2c <z_set_amp_b+0x4c>)
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	e00e      	b.n	8003a1e <z_set_amp_b+0x3e>
	} else if (val > max_amplitude) {
 8003a00:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4293      	cmp	r3, r2
 8003a08:	dd06      	ble.n	8003a18 <z_set_amp_b+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 8003a0a:	2383      	movs	r3, #131	@ 0x83
 8003a0c:	73fb      	strb	r3, [r7, #15]
		chan2_amplitude = max_amplitude;
 8003a0e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003a12:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <z_set_amp_b+0x4c>)
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e002      	b.n	8003a1e <z_set_amp_b+0x3e>
	} else {
		chan2_amplitude = val;
 8003a18:	4a04      	ldr	r2, [pc, #16]	@ (8003a2c <z_set_amp_b+0x4c>)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6013      	str	r3, [r2, #0]
	}
	//dds_set_amp_x(chan2_amplitude, 2);

	return retVal;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	20001260 	.word	0x20001260

08003a30 <z_get_amp_b>:

int32_t z_get_amp_b(void) {
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
	return chan2_amplitude;
 8003a34:	4b03      	ldr	r3, [pc, #12]	@ (8003a44 <z_get_amp_b+0x14>)
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20001260 	.word	0x20001260

08003a48 <z_set_amp_c>:

uint8_t z_set_amp_c(int32_t val) {
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 8003a50:	2380      	movs	r3, #128	@ 0x80
 8003a52:	73fb      	strb	r3, [r7, #15]

	if (val < min_amplitude) {
 8003a54:	2200      	movs	r2, #0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	da05      	bge.n	8003a68 <z_set_amp_c+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 8003a5c:	2382      	movs	r3, #130	@ 0x82
 8003a5e:	73fb      	strb	r3, [r7, #15]
		chan3_amplitude = min_amplitude;
 8003a60:	2200      	movs	r2, #0
 8003a62:	4b0c      	ldr	r3, [pc, #48]	@ (8003a94 <z_set_amp_c+0x4c>)
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e00e      	b.n	8003a86 <z_set_amp_c+0x3e>
	} else if (val > max_amplitude) {
 8003a68:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	dd06      	ble.n	8003a80 <z_set_amp_c+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 8003a72:	2383      	movs	r3, #131	@ 0x83
 8003a74:	73fb      	strb	r3, [r7, #15]
		chan3_amplitude = max_amplitude;
 8003a76:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003a7a:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <z_set_amp_c+0x4c>)
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e002      	b.n	8003a86 <z_set_amp_c+0x3e>
	} else {
		chan3_amplitude = val;
 8003a80:	4a04      	ldr	r2, [pc, #16]	@ (8003a94 <z_set_amp_c+0x4c>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6013      	str	r3, [r2, #0]
	}
	//dds_set_amp_x(chan3_amplitude, 3);

	return retVal;
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	20001264 	.word	0x20001264

08003a98 <z_get_amp_c>:

int32_t z_get_amp_c(void) {
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
	return chan3_amplitude;
 8003a9c:	4b03      	ldr	r3, [pc, #12]	@ (8003aac <z_get_amp_c+0x14>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20001264 	.word	0x20001264

08003ab0 <z_set_amp_d>:

uint8_t z_set_amp_d(int32_t val) {
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 8003ab8:	2380      	movs	r3, #128	@ 0x80
 8003aba:	73fb      	strb	r3, [r7, #15]

	if (val < min_amplitude) {
 8003abc:	2200      	movs	r2, #0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	da05      	bge.n	8003ad0 <z_set_amp_d+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 8003ac4:	2382      	movs	r3, #130	@ 0x82
 8003ac6:	73fb      	strb	r3, [r7, #15]
		chan4_amplitude = min_amplitude;
 8003ac8:	2200      	movs	r2, #0
 8003aca:	4b0c      	ldr	r3, [pc, #48]	@ (8003afc <z_set_amp_d+0x4c>)
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e00e      	b.n	8003aee <z_set_amp_d+0x3e>
	} else if (val > max_amplitude) {
 8003ad0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	dd06      	ble.n	8003ae8 <z_set_amp_d+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 8003ada:	2383      	movs	r3, #131	@ 0x83
 8003adc:	73fb      	strb	r3, [r7, #15]
		chan4_amplitude = max_amplitude;
 8003ade:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003ae2:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <z_set_amp_d+0x4c>)
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e002      	b.n	8003aee <z_set_amp_d+0x3e>
	} else {
		chan4_amplitude = val;
 8003ae8:	4a04      	ldr	r2, [pc, #16]	@ (8003afc <z_set_amp_d+0x4c>)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6013      	str	r3, [r2, #0]
	}
	//dds_set_amp_x(chan4_amplitude, 4);

	return retVal;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	20001268 	.word	0x20001268

08003b00 <z_get_amp_d>:

int32_t z_get_amp_d(void) {
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
	return chan4_amplitude;
 8003b04:	4b03      	ldr	r3, [pc, #12]	@ (8003b14 <z_get_amp_d+0x14>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20001268 	.word	0x20001268

08003b18 <z_set_phase_a>:

uint8_t z_set_phase_a(int32_t val) {
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 8003b20:	2380      	movs	r3, #128	@ 0x80
 8003b22:	73fb      	strb	r3, [r7, #15]

	if (val < min_phase) {
 8003b24:	2200      	movs	r2, #0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	da05      	bge.n	8003b38 <z_set_phase_a+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 8003b2c:	2382      	movs	r3, #130	@ 0x82
 8003b2e:	73fb      	strb	r3, [r7, #15]
		chan1_phase = min_phase;
 8003b30:	2200      	movs	r2, #0
 8003b32:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <z_set_phase_a+0x4c>)
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e00e      	b.n	8003b56 <z_set_phase_a+0x3e>
	} else if (val > max_phase) {
 8003b38:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	dd06      	ble.n	8003b50 <z_set_phase_a+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 8003b42:	2383      	movs	r3, #131	@ 0x83
 8003b44:	73fb      	strb	r3, [r7, #15]
		chan1_phase = max_phase;
 8003b46:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003b4a:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <z_set_phase_a+0x4c>)
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	e002      	b.n	8003b56 <z_set_phase_a+0x3e>
	} else {
		chan1_phase = val;
 8003b50:	4a04      	ldr	r2, [pc, #16]	@ (8003b64 <z_set_phase_a+0x4c>)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6013      	str	r3, [r2, #0]
	}

	//dds_set_cpow_x(chan1_phase, 1);
	return retVal;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	2000124c 	.word	0x2000124c

08003b68 <z_get_phase_a>:

int32_t z_get_phase_a(void) {
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
	return chan1_phase;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <z_get_phase_a+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	2000124c 	.word	0x2000124c

08003b80 <z_set_phase_b>:

uint8_t z_set_phase_b(int32_t val) {
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	73fb      	strb	r3, [r7, #15]

	if (val < min_phase) {
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4293      	cmp	r3, r2
 8003b92:	da05      	bge.n	8003ba0 <z_set_phase_b+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 8003b94:	2382      	movs	r3, #130	@ 0x82
 8003b96:	73fb      	strb	r3, [r7, #15]
		chan2_phase = min_phase;
 8003b98:	2200      	movs	r2, #0
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bcc <z_set_phase_b+0x4c>)
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	e00e      	b.n	8003bbe <z_set_phase_b+0x3e>
	} else if (val > max_phase) {
 8003ba0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	dd06      	ble.n	8003bb8 <z_set_phase_b+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 8003baa:	2383      	movs	r3, #131	@ 0x83
 8003bac:	73fb      	strb	r3, [r7, #15]
		chan2_phase = max_phase;
 8003bae:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003bb2:	4b06      	ldr	r3, [pc, #24]	@ (8003bcc <z_set_phase_b+0x4c>)
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e002      	b.n	8003bbe <z_set_phase_b+0x3e>
	} else {
		chan2_phase = val;
 8003bb8:	4a04      	ldr	r2, [pc, #16]	@ (8003bcc <z_set_phase_b+0x4c>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6013      	str	r3, [r2, #0]
	}

	//dds_set_cpow_x(chan2_phase, 2);
	return retVal;
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	20001250 	.word	0x20001250

08003bd0 <z_get_phase_b>:

int32_t z_get_phase_b(void) {
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
	return chan2_phase;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	@ (8003be4 <z_get_phase_b+0x14>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20001250 	.word	0x20001250

08003be8 <z_set_phase_c>:

uint8_t z_set_phase_c(int32_t val) {
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 8003bf0:	2380      	movs	r3, #128	@ 0x80
 8003bf2:	73fb      	strb	r3, [r7, #15]

	if (val < min_phase) {
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	da05      	bge.n	8003c08 <z_set_phase_c+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 8003bfc:	2382      	movs	r3, #130	@ 0x82
 8003bfe:	73fb      	strb	r3, [r7, #15]
		chan3_phase = min_phase;
 8003c00:	2200      	movs	r2, #0
 8003c02:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <z_set_phase_c+0x4c>)
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e00e      	b.n	8003c26 <z_set_phase_c+0x3e>
	} else if (val > max_phase) {
 8003c08:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	dd06      	ble.n	8003c20 <z_set_phase_c+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 8003c12:	2383      	movs	r3, #131	@ 0x83
 8003c14:	73fb      	strb	r3, [r7, #15]
		chan3_phase = max_phase;
 8003c16:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003c1a:	4b06      	ldr	r3, [pc, #24]	@ (8003c34 <z_set_phase_c+0x4c>)
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e002      	b.n	8003c26 <z_set_phase_c+0x3e>
	} else {
		chan3_phase = val;
 8003c20:	4a04      	ldr	r2, [pc, #16]	@ (8003c34 <z_set_phase_c+0x4c>)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6013      	str	r3, [r2, #0]
	}

	//dds_set_cpow_x(chan3_phase, 3);
	return retVal;
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	20001254 	.word	0x20001254

08003c38 <z_get_phase_c>:

int32_t z_get_phase_c(void) {
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
	return chan3_phase;
 8003c3c:	4b03      	ldr	r3, [pc, #12]	@ (8003c4c <z_get_phase_c+0x14>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20001254 	.word	0x20001254

08003c50 <z_set_phase_d>:

uint8_t z_set_phase_d(int32_t val) {
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 8003c58:	2380      	movs	r3, #128	@ 0x80
 8003c5a:	73fb      	strb	r3, [r7, #15]

	if (val < min_phase) {
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4293      	cmp	r3, r2
 8003c62:	da05      	bge.n	8003c70 <z_set_phase_d+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 8003c64:	2382      	movs	r3, #130	@ 0x82
 8003c66:	73fb      	strb	r3, [r7, #15]
		chan4_phase = min_phase;
 8003c68:	2200      	movs	r2, #0
 8003c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c9c <z_set_phase_d+0x4c>)
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e00e      	b.n	8003c8e <z_set_phase_d+0x3e>
	} else if (val > max_phase) {
 8003c70:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4293      	cmp	r3, r2
 8003c78:	dd06      	ble.n	8003c88 <z_set_phase_d+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 8003c7a:	2383      	movs	r3, #131	@ 0x83
 8003c7c:	73fb      	strb	r3, [r7, #15]
		chan4_phase = max_phase;
 8003c7e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003c82:	4b06      	ldr	r3, [pc, #24]	@ (8003c9c <z_set_phase_d+0x4c>)
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e002      	b.n	8003c8e <z_set_phase_d+0x3e>
	} else {
		chan4_phase = val;
 8003c88:	4a04      	ldr	r2, [pc, #16]	@ (8003c9c <z_set_phase_d+0x4c>)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6013      	str	r3, [r2, #0]
	}

	//dds_set_cpow_x(chan4_phase, 4);
	return retVal;
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	20001258 	.word	0x20001258

08003ca0 <z_get_phase_d>:

int32_t z_get_phase_d(void) {
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
	return chan4_phase;
 8003ca4:	4b03      	ldr	r3, [pc, #12]	@ (8003cb4 <z_get_phase_d+0x14>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20001258 	.word	0x20001258

08003cb8 <z_set_apply>:

uint8_t z_set_apply(void) {
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0

	uint8_t retVal = CMR_SUCCESSFULL;
 8003cbe:	2380      	movs	r3, #128	@ 0x80
 8003cc0:	71fb      	strb	r3, [r7, #7]

	//retVal = dds_apply();
	return retVal;
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <z_cmd_scheduler>:
//die Mechanimus zur Verarbeitung der Befehle mit den unterschiedlichen Prioritäten
void z_cmd_scheduler(void);

//--- FUNKTIONSDEFINITIONS --------------------------------------------------------------------------------------------------
void z_cmd_scheduler(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
	uint8_t priolevel0_null_flg = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	75fb      	strb	r3, [r7, #23]
	uint8_t priolevel1_null_flg = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	75bb      	strb	r3, [r7, #22]
	uint8_t priolevel2_null_flg = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	757b      	strb	r3, [r7, #21]

	uint8_t cmdcount = 0;                       //Zähler für die zu verarbeitenden Befehle
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	753b      	strb	r3, [r7, #20]
	uint8_t cmd_flg = 0;                       //Falls cmd_flg = 1 ist, d.h. keinen Befehl zu verarbeiten; cmd_flg = 0, d.h. noch Befehl zu verarbeiten
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	74fb      	strb	r3, [r7, #19]
	stack_item cmd;

	uint8_t resultflg = get_anzFrei_resultQueue();
 8003cea:	f7fe f8c5 	bl	8001e78 <get_anzFrei_resultQueue>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	74bb      	strb	r3, [r7, #18]

	if (resultflg > 1 )            //prüft, ob es noch freien Platz in resultqueue.
 8003cf2:	7cbb      	ldrb	r3, [r7, #18]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d953      	bls.n	8003da0 <z_cmd_scheduler+0xd0>
	{
		do
		{
			while ((cmdcount < Z_MAX_HIGHPRIO_NUM) && (priolevel0_null_flg == 0))
 8003cf8:	e012      	b.n	8003d20 <z_cmd_scheduler+0x50>
			{
				if (z_priolevel_header[PRIO_LEVEL0] != NONEXT)
 8003cfa:	4b2b      	ldr	r3, [pc, #172]	@ (8003da8 <z_cmd_scheduler+0xd8>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2bff      	cmp	r3, #255	@ 0xff
 8003d00:	d00c      	beq.n	8003d1c <z_cmd_scheduler+0x4c>
				{
					zstack_pop(&cmd, PRIO_LEVEL0);
 8003d02:	463b      	mov	r3, r7
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fbe0 	bl	80024cc <zstack_pop>
					z_cmd_sero(cmd);
 8003d0c:	463b      	mov	r3, r7
 8003d0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d10:	f000 f84c 	bl	8003dac <z_cmd_sero>
					cmdcount++;
 8003d14:	7d3b      	ldrb	r3, [r7, #20]
 8003d16:	3301      	adds	r3, #1
 8003d18:	753b      	strb	r3, [r7, #20]
 8003d1a:	e001      	b.n	8003d20 <z_cmd_scheduler+0x50>

				}
				else
				{
					priolevel0_null_flg = 1;      //es gibt keinen Befehl in der Prioritätliste mit Level 0
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	75fb      	strb	r3, [r7, #23]
			while ((cmdcount < Z_MAX_HIGHPRIO_NUM) && (priolevel0_null_flg == 0))
 8003d20:	7d3b      	ldrb	r3, [r7, #20]
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d802      	bhi.n	8003d2c <z_cmd_scheduler+0x5c>
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0e6      	beq.n	8003cfa <z_cmd_scheduler+0x2a>
				};
			};

			if (z_priolevel_header[PRIO_LEVEL1] != NONEXT)
 8003d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003da8 <z_cmd_scheduler+0xd8>)
 8003d2e:	785b      	ldrb	r3, [r3, #1]
 8003d30:	2bff      	cmp	r3, #255	@ 0xff
 8003d32:	d00f      	beq.n	8003d54 <z_cmd_scheduler+0x84>
			{
				if (cmdcount < Z_MAXCMD)
 8003d34:	7d3b      	ldrb	r3, [r7, #20]
 8003d36:	2b09      	cmp	r3, #9
 8003d38:	d80e      	bhi.n	8003d58 <z_cmd_scheduler+0x88>
				{
					zstack_pop(&cmd, PRIO_LEVEL1);
 8003d3a:	463b      	mov	r3, r7
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe fbc4 	bl	80024cc <zstack_pop>
					z_cmd_sero(cmd);
 8003d44:	463b      	mov	r3, r7
 8003d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d48:	f000 f830 	bl	8003dac <z_cmd_sero>
					cmdcount++;
 8003d4c:	7d3b      	ldrb	r3, [r7, #20]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	753b      	strb	r3, [r7, #20]
 8003d52:	e001      	b.n	8003d58 <z_cmd_scheduler+0x88>

				};
			}
			else
			{
				priolevel1_null_flg = 1;   //es gibt keinen Befehl in der Prioritätliste mit Level 1
 8003d54:	2301      	movs	r3, #1
 8003d56:	75bb      	strb	r3, [r7, #22]
			};

			if (z_priolevel_header[PRIO_LEVEL2] != NONEXT)
 8003d58:	4b13      	ldr	r3, [pc, #76]	@ (8003da8 <z_cmd_scheduler+0xd8>)
 8003d5a:	789b      	ldrb	r3, [r3, #2]
 8003d5c:	2bff      	cmp	r3, #255	@ 0xff
 8003d5e:	d00f      	beq.n	8003d80 <z_cmd_scheduler+0xb0>
			{
				if (cmdcount < Z_MAXCMD)
 8003d60:	7d3b      	ldrb	r3, [r7, #20]
 8003d62:	2b09      	cmp	r3, #9
 8003d64:	d80e      	bhi.n	8003d84 <z_cmd_scheduler+0xb4>
				{
					zstack_pop(&cmd, PRIO_LEVEL2);
 8003d66:	463b      	mov	r3, r7
 8003d68:	2102      	movs	r1, #2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe fbae 	bl	80024cc <zstack_pop>
					z_cmd_sero(cmd);
 8003d70:	463b      	mov	r3, r7
 8003d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d74:	f000 f81a 	bl	8003dac <z_cmd_sero>
					cmdcount++;
 8003d78:	7d3b      	ldrb	r3, [r7, #20]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	753b      	strb	r3, [r7, #20]
 8003d7e:	e001      	b.n	8003d84 <z_cmd_scheduler+0xb4>
				};
			}
			else
			{
				priolevel2_null_flg = 1;   //es gibt keinen Befehl in der Prioritätliste mit Level 2
 8003d80:	2301      	movs	r3, #1
 8003d82:	757b      	strb	r3, [r7, #21]
			};

			//prüft, ob die drei Prioritätslisten alle leer sind.
			cmd_flg = priolevel0_null_flg & priolevel1_null_flg;
 8003d84:	7dfa      	ldrb	r2, [r7, #23]
 8003d86:	7dbb      	ldrb	r3, [r7, #22]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	74fb      	strb	r3, [r7, #19]
			cmd_flg &= priolevel2_null_flg;
 8003d8c:	7cfa      	ldrb	r2, [r7, #19]
 8003d8e:	7d7b      	ldrb	r3, [r7, #21]
 8003d90:	4013      	ands	r3, r2
 8003d92:	74fb      	strb	r3, [r7, #19]

		}while ( (cmdcount < Z_MAXCMD) && (cmd_flg == 0));
 8003d94:	7d3b      	ldrb	r3, [r7, #20]
 8003d96:	2b09      	cmp	r3, #9
 8003d98:	d802      	bhi.n	8003da0 <z_cmd_scheduler+0xd0>
 8003d9a:	7cfb      	ldrb	r3, [r7, #19]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0bf      	beq.n	8003d20 <z_cmd_scheduler+0x50>
	};

}
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	200000e4 	.word	0x200000e4

08003dac <z_cmd_sero>:

void z_cmd_sero(stack_item cmd)
{
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	463c      	mov	r4, r7
 8003db4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch (cmd.cmd_index)
 8003db8:	887b      	ldrh	r3, [r7, #2]
 8003dba:	3b03      	subs	r3, #3
 8003dbc:	2b63      	cmp	r3, #99	@ 0x63
 8003dbe:	f200 81d4 	bhi.w	800416a <z_cmd_sero+0x3be>
 8003dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc8 <z_cmd_sero+0x1c>)
 8003dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc8:	08003f59 	.word	0x08003f59
 8003dcc:	08003f69 	.word	0x08003f69
 8003dd0:	08003f77 	.word	0x08003f77
 8003dd4:	08003f87 	.word	0x08003f87
 8003dd8:	0800416b 	.word	0x0800416b
 8003ddc:	0800416b 	.word	0x0800416b
 8003de0:	08003f95 	.word	0x08003f95
 8003de4:	0800416b 	.word	0x0800416b
 8003de8:	0800416b 	.word	0x0800416b
 8003dec:	08003f9f 	.word	0x08003f9f
 8003df0:	0800416b 	.word	0x0800416b
 8003df4:	08003fad 	.word	0x08003fad
 8003df8:	0800416b 	.word	0x0800416b
 8003dfc:	0800416b 	.word	0x0800416b
 8003e00:	0800416b 	.word	0x0800416b
 8003e04:	0800416b 	.word	0x0800416b
 8003e08:	0800416b 	.word	0x0800416b
 8003e0c:	0800416b 	.word	0x0800416b
 8003e10:	0800416b 	.word	0x0800416b
 8003e14:	0800416b 	.word	0x0800416b
 8003e18:	0800416b 	.word	0x0800416b
 8003e1c:	0800416b 	.word	0x0800416b
 8003e20:	0800416b 	.word	0x0800416b
 8003e24:	0800416b 	.word	0x0800416b
 8003e28:	0800416b 	.word	0x0800416b
 8003e2c:	0800416b 	.word	0x0800416b
 8003e30:	0800416b 	.word	0x0800416b
 8003e34:	08003fbb 	.word	0x08003fbb
 8003e38:	0800416b 	.word	0x0800416b
 8003e3c:	08003fc9 	.word	0x08003fc9
 8003e40:	08003fd7 	.word	0x08003fd7
 8003e44:	08003fe5 	.word	0x08003fe5
 8003e48:	08003ff3 	.word	0x08003ff3
 8003e4c:	08004001 	.word	0x08004001
 8003e50:	0800400f 	.word	0x0800400f
 8003e54:	0800416b 	.word	0x0800416b
 8003e58:	0800416b 	.word	0x0800416b
 8003e5c:	0800401d 	.word	0x0800401d
 8003e60:	0800416b 	.word	0x0800416b
 8003e64:	0800402b 	.word	0x0800402b
 8003e68:	08004039 	.word	0x08004039
 8003e6c:	08004047 	.word	0x08004047
 8003e70:	08004055 	.word	0x08004055
 8003e74:	08004063 	.word	0x08004063
 8003e78:	08004071 	.word	0x08004071
 8003e7c:	0800416b 	.word	0x0800416b
 8003e80:	0800416b 	.word	0x0800416b
 8003e84:	0800407f 	.word	0x0800407f
 8003e88:	0800416b 	.word	0x0800416b
 8003e8c:	0800408d 	.word	0x0800408d
 8003e90:	0800409b 	.word	0x0800409b
 8003e94:	080040a9 	.word	0x080040a9
 8003e98:	080040b7 	.word	0x080040b7
 8003e9c:	080040c5 	.word	0x080040c5
 8003ea0:	080040d3 	.word	0x080040d3
 8003ea4:	0800416b 	.word	0x0800416b
 8003ea8:	0800416b 	.word	0x0800416b
 8003eac:	080040e1 	.word	0x080040e1
 8003eb0:	0800416b 	.word	0x0800416b
 8003eb4:	080040ef 	.word	0x080040ef
 8003eb8:	080040fd 	.word	0x080040fd
 8003ebc:	0800410b 	.word	0x0800410b
 8003ec0:	08004119 	.word	0x08004119
 8003ec4:	08004127 	.word	0x08004127
 8003ec8:	08004135 	.word	0x08004135
 8003ecc:	0800416b 	.word	0x0800416b
 8003ed0:	0800416b 	.word	0x0800416b
 8003ed4:	0800416b 	.word	0x0800416b
 8003ed8:	0800416b 	.word	0x0800416b
 8003edc:	0800416b 	.word	0x0800416b
 8003ee0:	0800416b 	.word	0x0800416b
 8003ee4:	0800416b 	.word	0x0800416b
 8003ee8:	0800416b 	.word	0x0800416b
 8003eec:	0800416b 	.word	0x0800416b
 8003ef0:	0800416b 	.word	0x0800416b
 8003ef4:	0800416b 	.word	0x0800416b
 8003ef8:	0800416b 	.word	0x0800416b
 8003efc:	0800416b 	.word	0x0800416b
 8003f00:	0800416b 	.word	0x0800416b
 8003f04:	0800416b 	.word	0x0800416b
 8003f08:	0800416b 	.word	0x0800416b
 8003f0c:	0800416b 	.word	0x0800416b
 8003f10:	0800416b 	.word	0x0800416b
 8003f14:	0800416b 	.word	0x0800416b
 8003f18:	0800416b 	.word	0x0800416b
 8003f1c:	08004143 	.word	0x08004143
 8003f20:	0800416b 	.word	0x0800416b
 8003f24:	0800416b 	.word	0x0800416b
 8003f28:	0800414d 	.word	0x0800414d
 8003f2c:	0800416b 	.word	0x0800416b
 8003f30:	0800416b 	.word	0x0800416b
 8003f34:	0800416b 	.word	0x0800416b
 8003f38:	0800416b 	.word	0x0800416b
 8003f3c:	0800416b 	.word	0x0800416b
 8003f40:	0800416b 	.word	0x0800416b
 8003f44:	0800416b 	.word	0x0800416b
 8003f48:	0800416b 	.word	0x0800416b
 8003f4c:	08004157 	.word	0x08004157
 8003f50:	0800416b 	.word	0x0800416b
 8003f54:	08004161 	.word	0x08004161
	{
		case CMD_SET_REM_CTL:
			cmd.cmd_ack = z_set_remote_mode(cmd.parameter);
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fb1d 	bl	800359c <z_set_remote_mode>
 8003f62:	4603      	mov	r3, r0
 8003f64:	713b      	strb	r3, [r7, #4]
			break;
 8003f66:	e103      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_RF:
			cmd.parameter = z_get_rf();
 8003f68:	f7ff fb52 	bl	8003610 <z_get_rf>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	713b      	strb	r3, [r7, #4]
			break;
 8003f74:	e0fc      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_SET_RF:
			cmd.cmd_ack = z_set_rf(cmd.parameter);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fb2c 	bl	80035d8 <z_set_rf>
 8003f80:	4603      	mov	r3, r0
 8003f82:	713b      	strb	r3, [r7, #4]
			break;
 8003f84:	e0f4      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_REM_CTL:
			cmd.parameter = z_get_remote_mode ();
 8003f86:	f7ff fafd 	bl	8003584 <z_get_remote_mode>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8003f8e:	2380      	movs	r3, #128	@ 0x80
 8003f90:	713b      	strb	r3, [r7, #4]
			break;
 8003f92:	e0ed      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_RESET_ERROR:
			cmd.cmd_ack = z_reset();
 8003f94:	f7ff fae2 	bl	800355c <z_reset>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	713b      	strb	r3, [r7, #4]
			break;
 8003f9c:	e0e8      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_STATUS:
			cmd.parameter = z_get_status();
 8003f9e:	f7ff fad1 	bl	8003544 <z_get_status>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8003fa6:	2380      	movs	r3, #128	@ 0x80
 8003fa8:	713b      	strb	r3, [r7, #4]
			break;
 8003faa:	e0e1      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_ERR:
			cmd.parameter = z_get_error();
 8003fac:	f7ff faa0 	bl	80034f0 <z_get_error>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8003fb4:	2380      	movs	r3, #128	@ 0x80
 8003fb6:	713b      	strb	r3, [r7, #4]
			break;
 8003fb8:	e0da      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_A_PF:
			cmd.parameter = z_get_pf_a();
 8003fba:	f7ff fb35 	bl	8003628 <z_get_pf_a>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8003fc2:	2380      	movs	r3, #128	@ 0x80
 8003fc4:	713b      	strb	r3, [r7, #4]
			break;
 8003fc6:	e0d3      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_A_PR:
			cmd.parameter = z_get_pr_a();
 8003fc8:	f7ff fb3e 	bl	8003648 <z_get_pr_a>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8003fd0:	2380      	movs	r3, #128	@ 0x80
 8003fd2:	713b      	strb	r3, [r7, #4]
			break;
 8003fd4:	e0cc      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_SET_A_AMPLITUDE:
			cmd.cmd_ack = z_set_amp_a(cmd.parameter);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fccd 	bl	8003978 <z_set_amp_a>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	713b      	strb	r3, [r7, #4]
			break;
 8003fe2:	e0c5      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_A_AMPLITUDE:
			cmd.parameter = z_get_amp_a();
 8003fe4:	f7ff fcf0 	bl	80039c8 <z_get_amp_a>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8003fec:	2380      	movs	r3, #128	@ 0x80
 8003fee:	713b      	strb	r3, [r7, #4]
			break;
 8003ff0:	e0be      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_SET_A_PHASE:
			cmd.cmd_ack = z_set_phase_a(cmd.parameter);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fd8f 	bl	8003b18 <z_set_phase_a>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	713b      	strb	r3, [r7, #4]
			break;
 8003ffe:	e0b7      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_A_PHASE:
			cmd.parameter = z_get_phase_a();
 8004000:	f7ff fdb2 	bl	8003b68 <z_get_phase_a>
 8004004:	4603      	mov	r3, r0
 8004006:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004008:	2380      	movs	r3, #128	@ 0x80
 800400a:	713b      	strb	r3, [r7, #4]
			break;
 800400c:	e0b0      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_SET_A_AMPPHASE:
			cmd.cmd_ack = z_set_a_ampphase(cmd.parameter);
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fb89 	bl	8003728 <z_set_a_ampphase>
 8004016:	4603      	mov	r3, r0
 8004018:	713b      	strb	r3, [r7, #4]
			break;
 800401a:	e0a9      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_B_PF:
			cmd.parameter = z_get_pf_b();
 800401c:	f7ff fb24 	bl	8003668 <z_get_pf_b>
 8004020:	4603      	mov	r3, r0
 8004022:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004024:	2380      	movs	r3, #128	@ 0x80
 8004026:	713b      	strb	r3, [r7, #4]
			break;
 8004028:	e0a2      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_B_PR:
			cmd.parameter = z_get_pr_b();
 800402a:	f7ff fb2d 	bl	8003688 <z_get_pr_b>
 800402e:	4603      	mov	r3, r0
 8004030:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004032:	2380      	movs	r3, #128	@ 0x80
 8004034:	713b      	strb	r3, [r7, #4]
			break;
 8004036:	e09b      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_SET_B_AMPLITUDE:
			cmd.cmd_ack = z_set_amp_b(cmd.parameter);
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fcd0 	bl	80039e0 <z_set_amp_b>
 8004040:	4603      	mov	r3, r0
 8004042:	713b      	strb	r3, [r7, #4]
			break;
 8004044:	e094      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_B_AMPLITUDE:
			cmd.parameter = z_get_amp_b();
 8004046:	f7ff fcf3 	bl	8003a30 <z_get_amp_b>
 800404a:	4603      	mov	r3, r0
 800404c:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 800404e:	2380      	movs	r3, #128	@ 0x80
 8004050:	713b      	strb	r3, [r7, #4]
			break;
 8004052:	e08d      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_SET_B_PHASE:
			cmd.cmd_ack = z_set_phase_b(cmd.parameter);
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fd92 	bl	8003b80 <z_set_phase_b>
 800405c:	4603      	mov	r3, r0
 800405e:	713b      	strb	r3, [r7, #4]
			break;
 8004060:	e086      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_B_PHASE:
			cmd.parameter = z_get_phase_b();
 8004062:	f7ff fdb5 	bl	8003bd0 <z_get_phase_b>
 8004066:	4603      	mov	r3, r0
 8004068:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 800406a:	2380      	movs	r3, #128	@ 0x80
 800406c:	713b      	strb	r3, [r7, #4]
			break;
 800406e:	e07f      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_SET_B_AMPPHASE:
			cmd.cmd_ack = z_set_b_ampphase(cmd.parameter);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff fba2 	bl	80037bc <z_set_b_ampphase>
 8004078:	4603      	mov	r3, r0
 800407a:	713b      	strb	r3, [r7, #4]
			break;
 800407c:	e078      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_C_PF:
			cmd.parameter = z_get_pf_c();
 800407e:	f7ff fb13 	bl	80036a8 <z_get_pf_c>
 8004082:	4603      	mov	r3, r0
 8004084:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004086:	2380      	movs	r3, #128	@ 0x80
 8004088:	713b      	strb	r3, [r7, #4]
			break;
 800408a:	e071      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_C_PR:
			cmd.parameter = z_get_pr_c();
 800408c:	f7ff fb1c 	bl	80036c8 <z_get_pr_c>
 8004090:	4603      	mov	r3, r0
 8004092:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004094:	2380      	movs	r3, #128	@ 0x80
 8004096:	713b      	strb	r3, [r7, #4]
			break;
 8004098:	e06a      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_SET_C_AMPLITUDE:
			cmd.cmd_ack = z_set_amp_c(cmd.parameter);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fcd3 	bl	8003a48 <z_set_amp_c>
 80040a2:	4603      	mov	r3, r0
 80040a4:	713b      	strb	r3, [r7, #4]
			break;
 80040a6:	e063      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_C_AMPLITUDE:
			cmd.parameter = z_get_amp_c();
 80040a8:	f7ff fcf6 	bl	8003a98 <z_get_amp_c>
 80040ac:	4603      	mov	r3, r0
 80040ae:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 80040b0:	2380      	movs	r3, #128	@ 0x80
 80040b2:	713b      	strb	r3, [r7, #4]
			break;
 80040b4:	e05c      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_SET_C_PHASE:
			cmd.cmd_ack = z_set_phase_c(cmd.parameter);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff fd95 	bl	8003be8 <z_set_phase_c>
 80040be:	4603      	mov	r3, r0
 80040c0:	713b      	strb	r3, [r7, #4]
			break;
 80040c2:	e055      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_C_PHASE:
			cmd.parameter = z_get_phase_c();
 80040c4:	f7ff fdb8 	bl	8003c38 <z_get_phase_c>
 80040c8:	4603      	mov	r3, r0
 80040ca:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 80040cc:	2380      	movs	r3, #128	@ 0x80
 80040ce:	713b      	strb	r3, [r7, #4]
			break;
 80040d0:	e04e      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_SET_C_AMPPHASE:
			cmd.cmd_ack = z_set_c_ampphase(cmd.parameter);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fbbb 	bl	8003850 <z_set_c_ampphase>
 80040da:	4603      	mov	r3, r0
 80040dc:	713b      	strb	r3, [r7, #4]
			break;
 80040de:	e047      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_D_PF:
			cmd.parameter = z_get_pf_d();
 80040e0:	f7ff fb02 	bl	80036e8 <z_get_pf_d>
 80040e4:	4603      	mov	r3, r0
 80040e6:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 80040e8:	2380      	movs	r3, #128	@ 0x80
 80040ea:	713b      	strb	r3, [r7, #4]
			break;
 80040ec:	e040      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_D_PR:
			cmd.parameter = z_get_pr_d();
 80040ee:	f7ff fb0b 	bl	8003708 <z_get_pr_d>
 80040f2:	4603      	mov	r3, r0
 80040f4:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 80040f6:	2380      	movs	r3, #128	@ 0x80
 80040f8:	713b      	strb	r3, [r7, #4]
			break;
 80040fa:	e039      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_SET_D_AMPLITUDE:
			cmd.cmd_ack = z_set_amp_d(cmd.parameter);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fcd6 	bl	8003ab0 <z_set_amp_d>
 8004104:	4603      	mov	r3, r0
 8004106:	713b      	strb	r3, [r7, #4]
			break;
 8004108:	e032      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_D_AMPLITUDE:
			cmd.parameter = z_get_amp_d();
 800410a:	f7ff fcf9 	bl	8003b00 <z_get_amp_d>
 800410e:	4603      	mov	r3, r0
 8004110:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004112:	2380      	movs	r3, #128	@ 0x80
 8004114:	713b      	strb	r3, [r7, #4]
			break;
 8004116:	e02b      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_SET_D_PHASE:
			cmd.cmd_ack = z_set_phase_d(cmd.parameter);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fd98 	bl	8003c50 <z_set_phase_d>
 8004120:	4603      	mov	r3, r0
 8004122:	713b      	strb	r3, [r7, #4]
			break;
 8004124:	e024      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_D_PHASE:
			cmd.parameter = z_get_phase_d();
 8004126:	f7ff fdbb 	bl	8003ca0 <z_get_phase_d>
 800412a:	4603      	mov	r3, r0
 800412c:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 800412e:	2380      	movs	r3, #128	@ 0x80
 8004130:	713b      	strb	r3, [r7, #4]
			break;
 8004132:	e01d      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_SET_D_AMPPHASE:
			cmd.cmd_ack = z_set_d_ampphase(cmd.parameter);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fbd4 	bl	80038e4 <z_set_d_ampphase>
 800413c:	4603      	mov	r3, r0
 800413e:	713b      	strb	r3, [r7, #4]
			break;
 8004140:	e016      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_MON_UDC:
			cmd.parameter = 0;//z_get_u_act_lcd();
 8004142:	2300      	movs	r3, #0
 8004144:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004146:	2380      	movs	r3, #128	@ 0x80
 8004148:	713b      	strb	r3, [r7, #4]
			break;
 800414a:	e011      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_SET_APPLY:
			cmd.cmd_ack = z_set_apply();
 800414c:	f7ff fdb4 	bl	8003cb8 <z_set_apply>
 8004150:	4603      	mov	r3, r0
 8004152:	713b      	strb	r3, [r7, #4]
			break;
 8004154:	e00c      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_MON_T1:
			cmd.parameter = 1;//z_get_t1_act_lcd();
 8004156:	2301      	movs	r3, #1
 8004158:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 800415a:	2380      	movs	r3, #128	@ 0x80
 800415c:	713b      	strb	r3, [r7, #4]
			break;
 800415e:	e007      	b.n	8004170 <z_cmd_sero+0x3c4>
		case CMD_GET_MON_T2:
			cmd.parameter = 1;//z_get_t2_act_lcd();
 8004160:	2301      	movs	r3, #1
 8004162:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004164:	2380      	movs	r3, #128	@ 0x80
 8004166:	713b      	strb	r3, [r7, #4]
			break;
 8004168:	e002      	b.n	8004170 <z_cmd_sero+0x3c4>


        default:
            cmd.cmd_ack = CMR_UNKNOWNCOMMAND;
 800416a:	2306      	movs	r3, #6
 800416c:	713b      	strb	r3, [r7, #4]
            break;
 800416e:	bf00      	nop
	};
	resultQueue_push(cmd);
 8004170:	463b      	mov	r3, r7
 8004172:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004174:	f7fd fec0 	bl	8001ef8 <resultQueue_push>

}
 8004178:	bf00      	nop
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	bd90      	pop	{r4, r7, pc}

08004180 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004180:	480d      	ldr	r0, [pc, #52]	@ (80041b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004182:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004184:	f7fe fa72 	bl	800266c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004188:	480c      	ldr	r0, [pc, #48]	@ (80041bc <LoopForever+0x6>)
  ldr r1, =_edata
 800418a:	490d      	ldr	r1, [pc, #52]	@ (80041c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800418c:	4a0d      	ldr	r2, [pc, #52]	@ (80041c4 <LoopForever+0xe>)
  movs r3, #0
 800418e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004190:	e002      	b.n	8004198 <LoopCopyDataInit>

08004192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004196:	3304      	adds	r3, #4

08004198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800419a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800419c:	d3f9      	bcc.n	8004192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800419e:	4a0a      	ldr	r2, [pc, #40]	@ (80041c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80041a0:	4c0a      	ldr	r4, [pc, #40]	@ (80041cc <LoopForever+0x16>)
  movs r3, #0
 80041a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041a4:	e001      	b.n	80041aa <LoopFillZerobss>

080041a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041a8:	3204      	adds	r2, #4

080041aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041ac:	d3fb      	bcc.n	80041a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80041ae:	f004 f875 	bl	800829c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80041b2:	f7fc fb53 	bl	800085c <main>

080041b6 <LoopForever>:

LoopForever:
    b LoopForever
 80041b6:	e7fe      	b.n	80041b6 <LoopForever>
  ldr   r0, =_estack
 80041b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041c0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80041c4:	08008e24 	.word	0x08008e24
  ldr r2, =_sbss
 80041c8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80041cc:	200013b8 	.word	0x200013b8

080041d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80041d0:	e7fe      	b.n	80041d0 <ADC1_2_IRQHandler>

080041d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041dc:	2003      	movs	r0, #3
 80041de:	f000 f97f 	bl	80044e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041e2:	200f      	movs	r0, #15
 80041e4:	f000 f80e 	bl	8004204 <HAL_InitTick>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	71fb      	strb	r3, [r7, #7]
 80041f2:	e001      	b.n	80041f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041f4:	f7fe f9b0 	bl	8002558 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041f8:	79fb      	ldrb	r3, [r7, #7]

}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004210:	4b16      	ldr	r3, [pc, #88]	@ (800426c <HAL_InitTick+0x68>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d022      	beq.n	800425e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004218:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <HAL_InitTick+0x6c>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4b13      	ldr	r3, [pc, #76]	@ (800426c <HAL_InitTick+0x68>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004224:	fbb1 f3f3 	udiv	r3, r1, r3
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	4618      	mov	r0, r3
 800422e:	f000 f998 	bl	8004562 <HAL_SYSTICK_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10f      	bne.n	8004258 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b0f      	cmp	r3, #15
 800423c:	d809      	bhi.n	8004252 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800423e:	2200      	movs	r2, #0
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	f04f 30ff 	mov.w	r0, #4294967295
 8004246:	f000 f956 	bl	80044f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800424a:	4a0a      	ldr	r2, [pc, #40]	@ (8004274 <HAL_InitTick+0x70>)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	e007      	b.n	8004262 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
 8004256:	e004      	b.n	8004262 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
 800425c:	e001      	b.n	8004262 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004262:	7bfb      	ldrb	r3, [r7, #15]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000010 	.word	0x20000010
 8004270:	20000004 	.word	0x20000004
 8004274:	2000000c 	.word	0x2000000c

08004278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800427c:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <HAL_IncTick+0x1c>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4b05      	ldr	r3, [pc, #20]	@ (8004298 <HAL_IncTick+0x20>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4413      	add	r3, r2
 8004286:	4a03      	ldr	r2, [pc, #12]	@ (8004294 <HAL_IncTick+0x1c>)
 8004288:	6013      	str	r3, [r2, #0]
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	2000126c 	.word	0x2000126c
 8004298:	20000010 	.word	0x20000010

0800429c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return uwTick;
 80042a0:	4b03      	ldr	r3, [pc, #12]	@ (80042b0 <HAL_GetTick+0x14>)
 80042a2:	681b      	ldr	r3, [r3, #0]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	2000126c 	.word	0x2000126c

080042b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042bc:	f7ff ffee 	bl	800429c <HAL_GetTick>
 80042c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042cc:	d004      	beq.n	80042d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80042ce:	4b09      	ldr	r3, [pc, #36]	@ (80042f4 <HAL_Delay+0x40>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4413      	add	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042d8:	bf00      	nop
 80042da:	f7ff ffdf 	bl	800429c <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d8f7      	bhi.n	80042da <HAL_Delay+0x26>
  {
  }
}
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20000010 	.word	0x20000010

080042f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004308:	4b0c      	ldr	r3, [pc, #48]	@ (800433c <__NVIC_SetPriorityGrouping+0x44>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004314:	4013      	ands	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800432a:	4a04      	ldr	r2, [pc, #16]	@ (800433c <__NVIC_SetPriorityGrouping+0x44>)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	60d3      	str	r3, [r2, #12]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004344:	4b04      	ldr	r3, [pc, #16]	@ (8004358 <__NVIC_GetPriorityGrouping+0x18>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	0a1b      	lsrs	r3, r3, #8
 800434a:	f003 0307 	and.w	r3, r3, #7
}
 800434e:	4618      	mov	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	e000ed00 	.word	0xe000ed00

0800435c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436a:	2b00      	cmp	r3, #0
 800436c:	db0b      	blt.n	8004386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	f003 021f 	and.w	r2, r3, #31
 8004374:	4907      	ldr	r1, [pc, #28]	@ (8004394 <__NVIC_EnableIRQ+0x38>)
 8004376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	2001      	movs	r0, #1
 800437e:	fa00 f202 	lsl.w	r2, r0, r2
 8004382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	e000e100 	.word	0xe000e100

08004398 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	db12      	blt.n	80043d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	f003 021f 	and.w	r2, r3, #31
 80043b0:	490a      	ldr	r1, [pc, #40]	@ (80043dc <__NVIC_DisableIRQ+0x44>)
 80043b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2001      	movs	r0, #1
 80043ba:	fa00 f202 	lsl.w	r2, r0, r2
 80043be:	3320      	adds	r3, #32
 80043c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80043c4:	f3bf 8f4f 	dsb	sy
}
 80043c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80043ca:	f3bf 8f6f 	isb	sy
}
 80043ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	e000e100 	.word	0xe000e100

080043e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	6039      	str	r1, [r7, #0]
 80043ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	db0a      	blt.n	800440a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	490c      	ldr	r1, [pc, #48]	@ (800442c <__NVIC_SetPriority+0x4c>)
 80043fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fe:	0112      	lsls	r2, r2, #4
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	440b      	add	r3, r1
 8004404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004408:	e00a      	b.n	8004420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	b2da      	uxtb	r2, r3
 800440e:	4908      	ldr	r1, [pc, #32]	@ (8004430 <__NVIC_SetPriority+0x50>)
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	3b04      	subs	r3, #4
 8004418:	0112      	lsls	r2, r2, #4
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	440b      	add	r3, r1
 800441e:	761a      	strb	r2, [r3, #24]
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	e000e100 	.word	0xe000e100
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004434:	b480      	push	{r7}
 8004436:	b089      	sub	sp, #36	@ 0x24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f1c3 0307 	rsb	r3, r3, #7
 800444e:	2b04      	cmp	r3, #4
 8004450:	bf28      	it	cs
 8004452:	2304      	movcs	r3, #4
 8004454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	3304      	adds	r3, #4
 800445a:	2b06      	cmp	r3, #6
 800445c:	d902      	bls.n	8004464 <NVIC_EncodePriority+0x30>
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3b03      	subs	r3, #3
 8004462:	e000      	b.n	8004466 <NVIC_EncodePriority+0x32>
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004468:	f04f 32ff 	mov.w	r2, #4294967295
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	43da      	mvns	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	401a      	ands	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800447c:	f04f 31ff 	mov.w	r1, #4294967295
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	fa01 f303 	lsl.w	r3, r1, r3
 8004486:	43d9      	mvns	r1, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800448c:	4313      	orrs	r3, r2
         );
}
 800448e:	4618      	mov	r0, r3
 8004490:	3724      	adds	r7, #36	@ 0x24
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
	...

0800449c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044ac:	d301      	bcc.n	80044b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ae:	2301      	movs	r3, #1
 80044b0:	e00f      	b.n	80044d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044b2:	4a0a      	ldr	r2, [pc, #40]	@ (80044dc <SysTick_Config+0x40>)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ba:	210f      	movs	r1, #15
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	f7ff ff8e 	bl	80043e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044c4:	4b05      	ldr	r3, [pc, #20]	@ (80044dc <SysTick_Config+0x40>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ca:	4b04      	ldr	r3, [pc, #16]	@ (80044dc <SysTick_Config+0x40>)
 80044cc:	2207      	movs	r2, #7
 80044ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	e000e010 	.word	0xe000e010

080044e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff ff05 	bl	80042f8 <__NVIC_SetPriorityGrouping>
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b086      	sub	sp, #24
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	4603      	mov	r3, r0
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
 8004502:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004504:	f7ff ff1c 	bl	8004340 <__NVIC_GetPriorityGrouping>
 8004508:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	6978      	ldr	r0, [r7, #20]
 8004510:	f7ff ff90 	bl	8004434 <NVIC_EncodePriority>
 8004514:	4602      	mov	r2, r0
 8004516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800451a:	4611      	mov	r1, r2
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff ff5f 	bl	80043e0 <__NVIC_SetPriority>
}
 8004522:	bf00      	nop
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	4603      	mov	r3, r0
 8004532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff ff0f 	bl	800435c <__NVIC_EnableIRQ>
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	4603      	mov	r3, r0
 800454e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff ff1f 	bl	8004398 <__NVIC_DisableIRQ>
}
 800455a:	bf00      	nop
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff ff96 	bl	800449c <SysTick_Config>
 8004570:	4603      	mov	r3, r0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800458a:	e15a      	b.n	8004842 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	2101      	movs	r1, #1
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	4013      	ands	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 814c 	beq.w	800483c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d005      	beq.n	80045bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d130      	bne.n	800461e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	2203      	movs	r2, #3
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43db      	mvns	r3, r3
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4013      	ands	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045f2:	2201      	movs	r2, #1
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43db      	mvns	r3, r3
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4013      	ands	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	091b      	lsrs	r3, r3, #4
 8004608:	f003 0201 	and.w	r2, r3, #1
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b03      	cmp	r3, #3
 8004628:	d017      	beq.n	800465a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	2203      	movs	r2, #3
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4013      	ands	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d123      	bne.n	80046ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	08da      	lsrs	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3208      	adds	r2, #8
 800466e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004672:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	220f      	movs	r2, #15
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	43db      	mvns	r3, r3
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4013      	ands	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	08da      	lsrs	r2, r3, #3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3208      	adds	r2, #8
 80046a8:	6939      	ldr	r1, [r7, #16]
 80046aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	2203      	movs	r2, #3
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	43db      	mvns	r3, r3
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4013      	ands	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 0203 	and.w	r2, r3, #3
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 80a6 	beq.w	800483c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046f0:	4b5b      	ldr	r3, [pc, #364]	@ (8004860 <HAL_GPIO_Init+0x2e4>)
 80046f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f4:	4a5a      	ldr	r2, [pc, #360]	@ (8004860 <HAL_GPIO_Init+0x2e4>)
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80046fc:	4b58      	ldr	r3, [pc, #352]	@ (8004860 <HAL_GPIO_Init+0x2e4>)
 80046fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004708:	4a56      	ldr	r2, [pc, #344]	@ (8004864 <HAL_GPIO_Init+0x2e8>)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	089b      	lsrs	r3, r3, #2
 800470e:	3302      	adds	r3, #2
 8004710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004714:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	220f      	movs	r2, #15
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4013      	ands	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004732:	d01f      	beq.n	8004774 <HAL_GPIO_Init+0x1f8>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a4c      	ldr	r2, [pc, #304]	@ (8004868 <HAL_GPIO_Init+0x2ec>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d019      	beq.n	8004770 <HAL_GPIO_Init+0x1f4>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a4b      	ldr	r2, [pc, #300]	@ (800486c <HAL_GPIO_Init+0x2f0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d013      	beq.n	800476c <HAL_GPIO_Init+0x1f0>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a4a      	ldr	r2, [pc, #296]	@ (8004870 <HAL_GPIO_Init+0x2f4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00d      	beq.n	8004768 <HAL_GPIO_Init+0x1ec>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a49      	ldr	r2, [pc, #292]	@ (8004874 <HAL_GPIO_Init+0x2f8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d007      	beq.n	8004764 <HAL_GPIO_Init+0x1e8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a48      	ldr	r2, [pc, #288]	@ (8004878 <HAL_GPIO_Init+0x2fc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d101      	bne.n	8004760 <HAL_GPIO_Init+0x1e4>
 800475c:	2305      	movs	r3, #5
 800475e:	e00a      	b.n	8004776 <HAL_GPIO_Init+0x1fa>
 8004760:	2306      	movs	r3, #6
 8004762:	e008      	b.n	8004776 <HAL_GPIO_Init+0x1fa>
 8004764:	2304      	movs	r3, #4
 8004766:	e006      	b.n	8004776 <HAL_GPIO_Init+0x1fa>
 8004768:	2303      	movs	r3, #3
 800476a:	e004      	b.n	8004776 <HAL_GPIO_Init+0x1fa>
 800476c:	2302      	movs	r3, #2
 800476e:	e002      	b.n	8004776 <HAL_GPIO_Init+0x1fa>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <HAL_GPIO_Init+0x1fa>
 8004774:	2300      	movs	r3, #0
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	f002 0203 	and.w	r2, r2, #3
 800477c:	0092      	lsls	r2, r2, #2
 800477e:	4093      	lsls	r3, r2
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004786:	4937      	ldr	r1, [pc, #220]	@ (8004864 <HAL_GPIO_Init+0x2e8>)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	089b      	lsrs	r3, r3, #2
 800478c:	3302      	adds	r3, #2
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004794:	4b39      	ldr	r3, [pc, #228]	@ (800487c <HAL_GPIO_Init+0x300>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	43db      	mvns	r3, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4013      	ands	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047b8:	4a30      	ldr	r2, [pc, #192]	@ (800487c <HAL_GPIO_Init+0x300>)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047be:	4b2f      	ldr	r3, [pc, #188]	@ (800487c <HAL_GPIO_Init+0x300>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4013      	ands	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047e2:	4a26      	ldr	r2, [pc, #152]	@ (800487c <HAL_GPIO_Init+0x300>)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80047e8:	4b24      	ldr	r3, [pc, #144]	@ (800487c <HAL_GPIO_Init+0x300>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	43db      	mvns	r3, r3
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4013      	ands	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800480c:	4a1b      	ldr	r2, [pc, #108]	@ (800487c <HAL_GPIO_Init+0x300>)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004812:	4b1a      	ldr	r3, [pc, #104]	@ (800487c <HAL_GPIO_Init+0x300>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	43db      	mvns	r3, r3
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4013      	ands	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004836:	4a11      	ldr	r2, [pc, #68]	@ (800487c <HAL_GPIO_Init+0x300>)
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	3301      	adds	r3, #1
 8004840:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	f47f ae9d 	bne.w	800458c <HAL_GPIO_Init+0x10>
  }
}
 8004852:	bf00      	nop
 8004854:	bf00      	nop
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	40021000 	.word	0x40021000
 8004864:	40010000 	.word	0x40010000
 8004868:	48000400 	.word	0x48000400
 800486c:	48000800 	.word	0x48000800
 8004870:	48000c00 	.word	0x48000c00
 8004874:	48001000 	.word	0x48001000
 8004878:	48001400 	.word	0x48001400
 800487c:	40010400 	.word	0x40010400

08004880 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	887b      	ldrh	r3, [r7, #2]
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004898:	2301      	movs	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	e001      	b.n	80048a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
 80048bc:	4613      	mov	r3, r2
 80048be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048c0:	787b      	ldrb	r3, [r7, #1]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048c6:	887a      	ldrh	r2, [r7, #2]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048cc:	e002      	b.n	80048d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048ce:	887a      	ldrh	r2, [r7, #2]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048f2:	887a      	ldrh	r2, [r7, #2]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4013      	ands	r3, r2
 80048f8:	041a      	lsls	r2, r3, #16
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	43d9      	mvns	r1, r3
 80048fe:	887b      	ldrh	r3, [r7, #2]
 8004900:	400b      	ands	r3, r1
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	619a      	str	r2, [r3, #24]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d141      	bne.n	80049a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004922:	4b4b      	ldr	r3, [pc, #300]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800492a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800492e:	d131      	bne.n	8004994 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004930:	4b47      	ldr	r3, [pc, #284]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004936:	4a46      	ldr	r2, [pc, #280]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800493c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004940:	4b43      	ldr	r3, [pc, #268]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004948:	4a41      	ldr	r2, [pc, #260]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800494e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004950:	4b40      	ldr	r3, [pc, #256]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2232      	movs	r2, #50	@ 0x32
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	4a3f      	ldr	r2, [pc, #252]	@ (8004a58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800495c:	fba2 2303 	umull	r2, r3, r2, r3
 8004960:	0c9b      	lsrs	r3, r3, #18
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004966:	e002      	b.n	800496e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3b01      	subs	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800496e:	4b38      	ldr	r3, [pc, #224]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497a:	d102      	bne.n	8004982 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f2      	bne.n	8004968 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004982:	4b33      	ldr	r3, [pc, #204]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800498e:	d158      	bne.n	8004a42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e057      	b.n	8004a44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004994:	4b2e      	ldr	r3, [pc, #184]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800499a:	4a2d      	ldr	r2, [pc, #180]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049a4:	e04d      	b.n	8004a42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049ac:	d141      	bne.n	8004a32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049ae:	4b28      	ldr	r3, [pc, #160]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ba:	d131      	bne.n	8004a20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049bc:	4b24      	ldr	r3, [pc, #144]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049c2:	4a23      	ldr	r2, [pc, #140]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049cc:	4b20      	ldr	r3, [pc, #128]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2232      	movs	r2, #50	@ 0x32
 80049e2:	fb02 f303 	mul.w	r3, r2, r3
 80049e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049e8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ec:	0c9b      	lsrs	r3, r3, #18
 80049ee:	3301      	adds	r3, #1
 80049f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049f2:	e002      	b.n	80049fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049fa:	4b15      	ldr	r3, [pc, #84]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a06:	d102      	bne.n	8004a0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f2      	bne.n	80049f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a0e:	4b10      	ldr	r3, [pc, #64]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a1a:	d112      	bne.n	8004a42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e011      	b.n	8004a44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a20:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a26:	4a0a      	ldr	r2, [pc, #40]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a30:	e007      	b.n	8004a42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a32:	4b07      	ldr	r3, [pc, #28]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a3a:	4a05      	ldr	r2, [pc, #20]	@ (8004a50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40007000 	.word	0x40007000
 8004a54:	20000004 	.word	0x20000004
 8004a58:	431bde83 	.word	0x431bde83

08004a5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004a60:	4b05      	ldr	r3, [pc, #20]	@ (8004a78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4a04      	ldr	r2, [pc, #16]	@ (8004a78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a6a:	6093      	str	r3, [r2, #8]
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40007000 	.word	0x40007000

08004a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e2fe      	b.n	800508c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d075      	beq.n	8004b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a9a:	4b97      	ldr	r3, [pc, #604]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
 8004aa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa4:	4b94      	ldr	r3, [pc, #592]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b0c      	cmp	r3, #12
 8004ab2:	d102      	bne.n	8004aba <HAL_RCC_OscConfig+0x3e>
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d002      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x44>
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d10b      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac0:	4b8d      	ldr	r3, [pc, #564]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d05b      	beq.n	8004b84 <HAL_RCC_OscConfig+0x108>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d157      	bne.n	8004b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e2d9      	b.n	800508c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae0:	d106      	bne.n	8004af0 <HAL_RCC_OscConfig+0x74>
 8004ae2:	4b85      	ldr	r3, [pc, #532]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a84      	ldr	r2, [pc, #528]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	e01d      	b.n	8004b2c <HAL_RCC_OscConfig+0xb0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x98>
 8004afa:	4b7f      	ldr	r3, [pc, #508]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a7e      	ldr	r2, [pc, #504]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	4b7c      	ldr	r3, [pc, #496]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a7b      	ldr	r2, [pc, #492]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	e00b      	b.n	8004b2c <HAL_RCC_OscConfig+0xb0>
 8004b14:	4b78      	ldr	r3, [pc, #480]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a77      	ldr	r2, [pc, #476]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	4b75      	ldr	r3, [pc, #468]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a74      	ldr	r2, [pc, #464]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d013      	beq.n	8004b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b34:	f7ff fbb2 	bl	800429c <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b3c:	f7ff fbae 	bl	800429c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b64      	cmp	r3, #100	@ 0x64
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e29e      	b.n	800508c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0xc0>
 8004b5a:	e014      	b.n	8004b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5c:	f7ff fb9e 	bl	800429c <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b64:	f7ff fb9a 	bl	800429c <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b64      	cmp	r3, #100	@ 0x64
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e28a      	b.n	800508c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b76:	4b60      	ldr	r3, [pc, #384]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f0      	bne.n	8004b64 <HAL_RCC_OscConfig+0xe8>
 8004b82:	e000      	b.n	8004b86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d075      	beq.n	8004c7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b92:	4b59      	ldr	r3, [pc, #356]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b9c:	4b56      	ldr	r3, [pc, #344]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2b0c      	cmp	r3, #12
 8004baa:	d102      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x136>
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d002      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x13c>
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d11f      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bb8:	4b4f      	ldr	r3, [pc, #316]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x154>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e25d      	b.n	800508c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd0:	4b49      	ldr	r3, [pc, #292]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	4946      	ldr	r1, [pc, #280]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004be4:	4b45      	ldr	r3, [pc, #276]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fb0b 	bl	8004204 <HAL_InitTick>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d043      	beq.n	8004c7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e249      	b.n	800508c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d023      	beq.n	8004c48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c00:	4b3d      	ldr	r3, [pc, #244]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a3c      	ldr	r2, [pc, #240]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7ff fb46 	bl	800429c <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c14:	f7ff fb42 	bl	800429c <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e232      	b.n	800508c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c26:	4b34      	ldr	r3, [pc, #208]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c32:	4b31      	ldr	r3, [pc, #196]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	061b      	lsls	r3, r3, #24
 8004c40:	492d      	ldr	r1, [pc, #180]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]
 8004c46:	e01a      	b.n	8004c7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c48:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004c4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7ff fb22 	bl	800429c <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c5c:	f7ff fb1e 	bl	800429c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e20e      	b.n	800508c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c6e:	4b22      	ldr	r3, [pc, #136]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x1e0>
 8004c7a:	e000      	b.n	8004c7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d041      	beq.n	8004d0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01c      	beq.n	8004ccc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c92:	4b19      	ldr	r3, [pc, #100]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c98:	4a17      	ldr	r2, [pc, #92]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca2:	f7ff fafb 	bl	800429c <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004caa:	f7ff faf7 	bl	800429c <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e1e7      	b.n	800508c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0ef      	beq.n	8004caa <HAL_RCC_OscConfig+0x22e>
 8004cca:	e020      	b.n	8004d0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd2:	4a09      	ldr	r2, [pc, #36]	@ (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cdc:	f7ff fade 	bl	800429c <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ce2:	e00d      	b.n	8004d00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce4:	f7ff fada 	bl	800429c <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d906      	bls.n	8004d00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e1ca      	b.n	800508c <HAL_RCC_OscConfig+0x610>
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d00:	4b8c      	ldr	r3, [pc, #560]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1ea      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 80a6 	beq.w	8004e68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d20:	4b84      	ldr	r3, [pc, #528]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_RCC_OscConfig+0x2b4>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <HAL_RCC_OscConfig+0x2b6>
 8004d30:	2300      	movs	r3, #0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00d      	beq.n	8004d52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d36:	4b7f      	ldr	r3, [pc, #508]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3a:	4a7e      	ldr	r2, [pc, #504]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d40:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d42:	4b7c      	ldr	r3, [pc, #496]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d52:	4b79      	ldr	r3, [pc, #484]	@ (8004f38 <HAL_RCC_OscConfig+0x4bc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d118      	bne.n	8004d90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d5e:	4b76      	ldr	r3, [pc, #472]	@ (8004f38 <HAL_RCC_OscConfig+0x4bc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a75      	ldr	r2, [pc, #468]	@ (8004f38 <HAL_RCC_OscConfig+0x4bc>)
 8004d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6a:	f7ff fa97 	bl	800429c <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d72:	f7ff fa93 	bl	800429c <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e183      	b.n	800508c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d84:	4b6c      	ldr	r3, [pc, #432]	@ (8004f38 <HAL_RCC_OscConfig+0x4bc>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d108      	bne.n	8004daa <HAL_RCC_OscConfig+0x32e>
 8004d98:	4b66      	ldr	r3, [pc, #408]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d9e:	4a65      	ldr	r2, [pc, #404]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004da8:	e024      	b.n	8004df4 <HAL_RCC_OscConfig+0x378>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b05      	cmp	r3, #5
 8004db0:	d110      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x358>
 8004db2:	4b60      	ldr	r3, [pc, #384]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db8:	4a5e      	ldr	r2, [pc, #376]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004dba:	f043 0304 	orr.w	r3, r3, #4
 8004dbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc8:	4a5a      	ldr	r2, [pc, #360]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dd2:	e00f      	b.n	8004df4 <HAL_RCC_OscConfig+0x378>
 8004dd4:	4b57      	ldr	r3, [pc, #348]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dda:	4a56      	ldr	r2, [pc, #344]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004de4:	4b53      	ldr	r3, [pc, #332]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dea:	4a52      	ldr	r2, [pc, #328]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004dec:	f023 0304 	bic.w	r3, r3, #4
 8004df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d016      	beq.n	8004e2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfc:	f7ff fa4e 	bl	800429c <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e02:	e00a      	b.n	8004e1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e04:	f7ff fa4a 	bl	800429c <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e138      	b.n	800508c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e1a:	4b46      	ldr	r3, [pc, #280]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0ed      	beq.n	8004e04 <HAL_RCC_OscConfig+0x388>
 8004e28:	e015      	b.n	8004e56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2a:	f7ff fa37 	bl	800429c <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e30:	e00a      	b.n	8004e48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e32:	f7ff fa33 	bl	800429c <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e121      	b.n	800508c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e48:	4b3a      	ldr	r3, [pc, #232]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1ed      	bne.n	8004e32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e56:	7ffb      	ldrb	r3, [r7, #31]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d105      	bne.n	8004e68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e5c:	4b35      	ldr	r3, [pc, #212]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e60:	4a34      	ldr	r2, [pc, #208]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004e62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e66:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0320 	and.w	r3, r3, #32
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d03c      	beq.n	8004eee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01c      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e82:	4a2c      	ldr	r2, [pc, #176]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8c:	f7ff fa06 	bl	800429c <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e94:	f7ff fa02 	bl	800429c <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e0f2      	b.n	800508c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ea6:	4b23      	ldr	r3, [pc, #140]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0ef      	beq.n	8004e94 <HAL_RCC_OscConfig+0x418>
 8004eb4:	e01b      	b.n	8004eee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004ebe:	f023 0301 	bic.w	r3, r3, #1
 8004ec2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec6:	f7ff f9e9 	bl	800429c <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ece:	f7ff f9e5 	bl	800429c <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e0d5      	b.n	800508c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ee0:	4b14      	ldr	r3, [pc, #80]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1ef      	bne.n	8004ece <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 80c9 	beq.w	800508a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 030c 	and.w	r3, r3, #12
 8004f00:	2b0c      	cmp	r3, #12
 8004f02:	f000 8083 	beq.w	800500c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d15e      	bne.n	8004fcc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0e:	4b09      	ldr	r3, [pc, #36]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a08      	ldr	r2, [pc, #32]	@ (8004f34 <HAL_RCC_OscConfig+0x4b8>)
 8004f14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1a:	f7ff f9bf 	bl	800429c <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f20:	e00c      	b.n	8004f3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f22:	f7ff f9bb 	bl	800429c <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d905      	bls.n	8004f3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e0ab      	b.n	800508c <HAL_RCC_OscConfig+0x610>
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f3c:	4b55      	ldr	r3, [pc, #340]	@ (8005094 <HAL_RCC_OscConfig+0x618>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1ec      	bne.n	8004f22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f48:	4b52      	ldr	r3, [pc, #328]	@ (8005094 <HAL_RCC_OscConfig+0x618>)
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	4b52      	ldr	r3, [pc, #328]	@ (8005098 <HAL_RCC_OscConfig+0x61c>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6a11      	ldr	r1, [r2, #32]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f58:	3a01      	subs	r2, #1
 8004f5a:	0112      	lsls	r2, r2, #4
 8004f5c:	4311      	orrs	r1, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f62:	0212      	lsls	r2, r2, #8
 8004f64:	4311      	orrs	r1, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f6a:	0852      	lsrs	r2, r2, #1
 8004f6c:	3a01      	subs	r2, #1
 8004f6e:	0552      	lsls	r2, r2, #21
 8004f70:	4311      	orrs	r1, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f76:	0852      	lsrs	r2, r2, #1
 8004f78:	3a01      	subs	r2, #1
 8004f7a:	0652      	lsls	r2, r2, #25
 8004f7c:	4311      	orrs	r1, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f82:	06d2      	lsls	r2, r2, #27
 8004f84:	430a      	orrs	r2, r1
 8004f86:	4943      	ldr	r1, [pc, #268]	@ (8005094 <HAL_RCC_OscConfig+0x618>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f8c:	4b41      	ldr	r3, [pc, #260]	@ (8005094 <HAL_RCC_OscConfig+0x618>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a40      	ldr	r2, [pc, #256]	@ (8005094 <HAL_RCC_OscConfig+0x618>)
 8004f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f98:	4b3e      	ldr	r3, [pc, #248]	@ (8005094 <HAL_RCC_OscConfig+0x618>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4a3d      	ldr	r2, [pc, #244]	@ (8005094 <HAL_RCC_OscConfig+0x618>)
 8004f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fa2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa4:	f7ff f97a 	bl	800429c <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fac:	f7ff f976 	bl	800429c <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e066      	b.n	800508c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fbe:	4b35      	ldr	r3, [pc, #212]	@ (8005094 <HAL_RCC_OscConfig+0x618>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCC_OscConfig+0x530>
 8004fca:	e05e      	b.n	800508a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fcc:	4b31      	ldr	r3, [pc, #196]	@ (8005094 <HAL_RCC_OscConfig+0x618>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a30      	ldr	r2, [pc, #192]	@ (8005094 <HAL_RCC_OscConfig+0x618>)
 8004fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7ff f960 	bl	800429c <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7ff f95c 	bl	800429c <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e04c      	b.n	800508c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff2:	4b28      	ldr	r3, [pc, #160]	@ (8005094 <HAL_RCC_OscConfig+0x618>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ffe:	4b25      	ldr	r3, [pc, #148]	@ (8005094 <HAL_RCC_OscConfig+0x618>)
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	4924      	ldr	r1, [pc, #144]	@ (8005094 <HAL_RCC_OscConfig+0x618>)
 8005004:	4b25      	ldr	r3, [pc, #148]	@ (800509c <HAL_RCC_OscConfig+0x620>)
 8005006:	4013      	ands	r3, r2
 8005008:	60cb      	str	r3, [r1, #12]
 800500a:	e03e      	b.n	800508a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e039      	b.n	800508c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005018:	4b1e      	ldr	r3, [pc, #120]	@ (8005094 <HAL_RCC_OscConfig+0x618>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f003 0203 	and.w	r2, r3, #3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	429a      	cmp	r2, r3
 800502a:	d12c      	bne.n	8005086 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	3b01      	subs	r3, #1
 8005038:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503a:	429a      	cmp	r2, r3
 800503c:	d123      	bne.n	8005086 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005048:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800504a:	429a      	cmp	r2, r3
 800504c:	d11b      	bne.n	8005086 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005058:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800505a:	429a      	cmp	r2, r3
 800505c:	d113      	bne.n	8005086 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005068:	085b      	lsrs	r3, r3, #1
 800506a:	3b01      	subs	r3, #1
 800506c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800506e:	429a      	cmp	r2, r3
 8005070:	d109      	bne.n	8005086 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800507c:	085b      	lsrs	r3, r3, #1
 800507e:	3b01      	subs	r3, #1
 8005080:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005082:	429a      	cmp	r2, r3
 8005084:	d001      	beq.n	800508a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3720      	adds	r7, #32
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40021000 	.word	0x40021000
 8005098:	019f800c 	.word	0x019f800c
 800509c:	feeefffc 	.word	0xfeeefffc

080050a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e11e      	b.n	80052f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050b8:	4b91      	ldr	r3, [pc, #580]	@ (8005300 <HAL_RCC_ClockConfig+0x260>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d910      	bls.n	80050e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c6:	4b8e      	ldr	r3, [pc, #568]	@ (8005300 <HAL_RCC_ClockConfig+0x260>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f023 020f 	bic.w	r2, r3, #15
 80050ce:	498c      	ldr	r1, [pc, #560]	@ (8005300 <HAL_RCC_ClockConfig+0x260>)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b8a      	ldr	r3, [pc, #552]	@ (8005300 <HAL_RCC_ClockConfig+0x260>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e106      	b.n	80052f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d073      	beq.n	80051dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d129      	bne.n	8005150 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050fc:	4b81      	ldr	r3, [pc, #516]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0f4      	b.n	80052f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800510c:	f000 f99e 	bl	800544c <RCC_GetSysClockFreqFromPLLSource>
 8005110:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4a7c      	ldr	r2, [pc, #496]	@ (8005308 <HAL_RCC_ClockConfig+0x268>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d93f      	bls.n	800519a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800511a:	4b7a      	ldr	r3, [pc, #488]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d009      	beq.n	800513a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800512e:	2b00      	cmp	r3, #0
 8005130:	d033      	beq.n	800519a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005136:	2b00      	cmp	r3, #0
 8005138:	d12f      	bne.n	800519a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800513a:	4b72      	ldr	r3, [pc, #456]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005142:	4a70      	ldr	r2, [pc, #448]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 8005144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005148:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800514a:	2380      	movs	r3, #128	@ 0x80
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	e024      	b.n	800519a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d107      	bne.n	8005168 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005158:	4b6a      	ldr	r3, [pc, #424]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d109      	bne.n	8005178 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0c6      	b.n	80052f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005168:	4b66      	ldr	r3, [pc, #408]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e0be      	b.n	80052f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005178:	f000 f8ce 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 800517c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4a61      	ldr	r2, [pc, #388]	@ (8005308 <HAL_RCC_ClockConfig+0x268>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d909      	bls.n	800519a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005186:	4b5f      	ldr	r3, [pc, #380]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800518e:	4a5d      	ldr	r2, [pc, #372]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 8005190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005194:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005196:	2380      	movs	r3, #128	@ 0x80
 8005198:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800519a:	4b5a      	ldr	r3, [pc, #360]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f023 0203 	bic.w	r2, r3, #3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	4957      	ldr	r1, [pc, #348]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ac:	f7ff f876 	bl	800429c <HAL_GetTick>
 80051b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b2:	e00a      	b.n	80051ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b4:	f7ff f872 	bl	800429c <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e095      	b.n	80052f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 020c 	and.w	r2, r3, #12
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	429a      	cmp	r2, r3
 80051da:	d1eb      	bne.n	80051b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d023      	beq.n	8005230 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d005      	beq.n	8005200 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051f4:	4b43      	ldr	r3, [pc, #268]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	4a42      	ldr	r2, [pc, #264]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 80051fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0308 	and.w	r3, r3, #8
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800520c:	4b3d      	ldr	r3, [pc, #244]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005214:	4a3b      	ldr	r2, [pc, #236]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 8005216:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800521a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800521c:	4b39      	ldr	r3, [pc, #228]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	4936      	ldr	r1, [pc, #216]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 800522a:	4313      	orrs	r3, r2
 800522c:	608b      	str	r3, [r1, #8]
 800522e:	e008      	b.n	8005242 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b80      	cmp	r3, #128	@ 0x80
 8005234:	d105      	bne.n	8005242 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005236:	4b33      	ldr	r3, [pc, #204]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	4a32      	ldr	r2, [pc, #200]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 800523c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005240:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005242:	4b2f      	ldr	r3, [pc, #188]	@ (8005300 <HAL_RCC_ClockConfig+0x260>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d21d      	bcs.n	800528c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005250:	4b2b      	ldr	r3, [pc, #172]	@ (8005300 <HAL_RCC_ClockConfig+0x260>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f023 020f 	bic.w	r2, r3, #15
 8005258:	4929      	ldr	r1, [pc, #164]	@ (8005300 <HAL_RCC_ClockConfig+0x260>)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	4313      	orrs	r3, r2
 800525e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005260:	f7ff f81c 	bl	800429c <HAL_GetTick>
 8005264:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005266:	e00a      	b.n	800527e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005268:	f7ff f818 	bl	800429c <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e03b      	b.n	80052f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800527e:	4b20      	ldr	r3, [pc, #128]	@ (8005300 <HAL_RCC_ClockConfig+0x260>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d1ed      	bne.n	8005268 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d008      	beq.n	80052aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005298:	4b1a      	ldr	r3, [pc, #104]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4917      	ldr	r1, [pc, #92]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d009      	beq.n	80052ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052b6:	4b13      	ldr	r3, [pc, #76]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	490f      	ldr	r1, [pc, #60]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052ca:	f000 f825 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 80052ce:	4602      	mov	r2, r0
 80052d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005304 <HAL_RCC_ClockConfig+0x264>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	490c      	ldr	r1, [pc, #48]	@ (800530c <HAL_RCC_ClockConfig+0x26c>)
 80052dc:	5ccb      	ldrb	r3, [r1, r3]
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	fa22 f303 	lsr.w	r3, r2, r3
 80052e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005310 <HAL_RCC_ClockConfig+0x270>)
 80052e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005314 <HAL_RCC_ClockConfig+0x274>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fe ff88 	bl	8004204 <HAL_InitTick>
 80052f4:	4603      	mov	r3, r0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40022000 	.word	0x40022000
 8005304:	40021000 	.word	0x40021000
 8005308:	04c4b400 	.word	0x04c4b400
 800530c:	08008da0 	.word	0x08008da0
 8005310:	20000004 	.word	0x20000004
 8005314:	2000000c 	.word	0x2000000c

08005318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800531e:	4b2c      	ldr	r3, [pc, #176]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	2b04      	cmp	r3, #4
 8005328:	d102      	bne.n	8005330 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800532a:	4b2a      	ldr	r3, [pc, #168]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	e047      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005330:	4b27      	ldr	r3, [pc, #156]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 030c 	and.w	r3, r3, #12
 8005338:	2b08      	cmp	r3, #8
 800533a:	d102      	bne.n	8005342 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800533c:	4b26      	ldr	r3, [pc, #152]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	e03e      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005342:	4b23      	ldr	r3, [pc, #140]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 030c 	and.w	r3, r3, #12
 800534a:	2b0c      	cmp	r3, #12
 800534c:	d136      	bne.n	80053bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800534e:	4b20      	ldr	r3, [pc, #128]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005358:	4b1d      	ldr	r3, [pc, #116]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	3301      	adds	r3, #1
 8005364:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b03      	cmp	r3, #3
 800536a:	d10c      	bne.n	8005386 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800536c:	4a1a      	ldr	r2, [pc, #104]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
 8005374:	4a16      	ldr	r2, [pc, #88]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005376:	68d2      	ldr	r2, [r2, #12]
 8005378:	0a12      	lsrs	r2, r2, #8
 800537a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800537e:	fb02 f303 	mul.w	r3, r2, r3
 8005382:	617b      	str	r3, [r7, #20]
      break;
 8005384:	e00c      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005386:	4a13      	ldr	r2, [pc, #76]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	fbb2 f3f3 	udiv	r3, r2, r3
 800538e:	4a10      	ldr	r2, [pc, #64]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005390:	68d2      	ldr	r2, [r2, #12]
 8005392:	0a12      	lsrs	r2, r2, #8
 8005394:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005398:	fb02 f303 	mul.w	r3, r2, r3
 800539c:	617b      	str	r3, [r7, #20]
      break;
 800539e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053a0:	4b0b      	ldr	r3, [pc, #44]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	0e5b      	lsrs	r3, r3, #25
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	3301      	adds	r3, #1
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	e001      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053c0:	693b      	ldr	r3, [r7, #16]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40021000 	.word	0x40021000
 80053d4:	00f42400 	.word	0x00f42400
 80053d8:	007a1200 	.word	0x007a1200

080053dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e0:	4b03      	ldr	r3, [pc, #12]	@ (80053f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053e2:	681b      	ldr	r3, [r3, #0]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20000004 	.word	0x20000004

080053f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053f8:	f7ff fff0 	bl	80053dc <HAL_RCC_GetHCLKFreq>
 80053fc:	4602      	mov	r2, r0
 80053fe:	4b06      	ldr	r3, [pc, #24]	@ (8005418 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	0a1b      	lsrs	r3, r3, #8
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	4904      	ldr	r1, [pc, #16]	@ (800541c <HAL_RCC_GetPCLK1Freq+0x28>)
 800540a:	5ccb      	ldrb	r3, [r1, r3]
 800540c:	f003 031f 	and.w	r3, r3, #31
 8005410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005414:	4618      	mov	r0, r3
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40021000 	.word	0x40021000
 800541c:	08008db0 	.word	0x08008db0

08005420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005424:	f7ff ffda 	bl	80053dc <HAL_RCC_GetHCLKFreq>
 8005428:	4602      	mov	r2, r0
 800542a:	4b06      	ldr	r3, [pc, #24]	@ (8005444 <HAL_RCC_GetPCLK2Freq+0x24>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	0adb      	lsrs	r3, r3, #11
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	4904      	ldr	r1, [pc, #16]	@ (8005448 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005436:	5ccb      	ldrb	r3, [r1, r3]
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40021000 	.word	0x40021000
 8005448:	08008db0 	.word	0x08008db0

0800544c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005452:	4b1e      	ldr	r3, [pc, #120]	@ (80054cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800545c:	4b1b      	ldr	r3, [pc, #108]	@ (80054cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	3301      	adds	r3, #1
 8005468:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	2b03      	cmp	r3, #3
 800546e:	d10c      	bne.n	800548a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005470:	4a17      	ldr	r2, [pc, #92]	@ (80054d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	fbb2 f3f3 	udiv	r3, r2, r3
 8005478:	4a14      	ldr	r2, [pc, #80]	@ (80054cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800547a:	68d2      	ldr	r2, [r2, #12]
 800547c:	0a12      	lsrs	r2, r2, #8
 800547e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	617b      	str	r3, [r7, #20]
    break;
 8005488:	e00c      	b.n	80054a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800548a:	4a12      	ldr	r2, [pc, #72]	@ (80054d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005492:	4a0e      	ldr	r2, [pc, #56]	@ (80054cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005494:	68d2      	ldr	r2, [r2, #12]
 8005496:	0a12      	lsrs	r2, r2, #8
 8005498:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800549c:	fb02 f303 	mul.w	r3, r2, r3
 80054a0:	617b      	str	r3, [r7, #20]
    break;
 80054a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054a4:	4b09      	ldr	r3, [pc, #36]	@ (80054cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	0e5b      	lsrs	r3, r3, #25
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	3301      	adds	r3, #1
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80054be:	687b      	ldr	r3, [r7, #4]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	40021000 	.word	0x40021000
 80054d0:	007a1200 	.word	0x007a1200
 80054d4:	00f42400 	.word	0x00f42400

080054d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054e0:	2300      	movs	r3, #0
 80054e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054e4:	2300      	movs	r3, #0
 80054e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 8098 	beq.w	8005626 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054f6:	2300      	movs	r3, #0
 80054f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054fa:	4b43      	ldr	r3, [pc, #268]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10d      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005506:	4b40      	ldr	r3, [pc, #256]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550a:	4a3f      	ldr	r2, [pc, #252]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800550c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005510:	6593      	str	r3, [r2, #88]	@ 0x58
 8005512:	4b3d      	ldr	r3, [pc, #244]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800551e:	2301      	movs	r3, #1
 8005520:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005522:	4b3a      	ldr	r3, [pc, #232]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a39      	ldr	r2, [pc, #228]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800552c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800552e:	f7fe feb5 	bl	800429c <HAL_GetTick>
 8005532:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005534:	e009      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005536:	f7fe feb1 	bl	800429c <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d902      	bls.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	74fb      	strb	r3, [r7, #19]
        break;
 8005548:	e005      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800554a:	4b30      	ldr	r3, [pc, #192]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0ef      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005556:	7cfb      	ldrb	r3, [r7, #19]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d159      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800555c:	4b2a      	ldr	r3, [pc, #168]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005566:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d01e      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	429a      	cmp	r2, r3
 8005576:	d019      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005578:	4b23      	ldr	r3, [pc, #140]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800557e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005582:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005584:	4b20      	ldr	r3, [pc, #128]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558a:	4a1f      	ldr	r2, [pc, #124]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800558c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005594:	4b1c      	ldr	r3, [pc, #112]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559a:	4a1b      	ldr	r2, [pc, #108]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800559c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055a4:	4a18      	ldr	r2, [pc, #96]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d016      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b6:	f7fe fe71 	bl	800429c <HAL_GetTick>
 80055ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055bc:	e00b      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055be:	f7fe fe6d 	bl	800429c <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d902      	bls.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	74fb      	strb	r3, [r7, #19]
            break;
 80055d4:	e006      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0ec      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80055e4:	7cfb      	ldrb	r3, [r7, #19]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10b      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055ea:	4b07      	ldr	r3, [pc, #28]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f8:	4903      	ldr	r1, [pc, #12]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005600:	e008      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005602:	7cfb      	ldrb	r3, [r7, #19]
 8005604:	74bb      	strb	r3, [r7, #18]
 8005606:	e005      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005608:	40021000 	.word	0x40021000
 800560c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005610:	7cfb      	ldrb	r3, [r7, #19]
 8005612:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005614:	7c7b      	ldrb	r3, [r7, #17]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d105      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800561a:	4ba7      	ldr	r3, [pc, #668]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800561e:	4aa6      	ldr	r2, [pc, #664]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005624:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005632:	4ba1      	ldr	r3, [pc, #644]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005638:	f023 0203 	bic.w	r2, r3, #3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	499d      	ldr	r1, [pc, #628]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005642:	4313      	orrs	r3, r2
 8005644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005654:	4b98      	ldr	r3, [pc, #608]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565a:	f023 020c 	bic.w	r2, r3, #12
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	4995      	ldr	r1, [pc, #596]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005676:	4b90      	ldr	r3, [pc, #576]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	498c      	ldr	r1, [pc, #560]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005698:	4b87      	ldr	r3, [pc, #540]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	4984      	ldr	r1, [pc, #528]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056ba:	4b7f      	ldr	r3, [pc, #508]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	497b      	ldr	r1, [pc, #492]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056dc:	4b76      	ldr	r3, [pc, #472]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	4973      	ldr	r1, [pc, #460]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056fe:	4b6e      	ldr	r3, [pc, #440]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005704:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	496a      	ldr	r1, [pc, #424]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005720:	4b65      	ldr	r3, [pc, #404]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005726:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	4962      	ldr	r1, [pc, #392]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005742:	4b5d      	ldr	r3, [pc, #372]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005748:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005750:	4959      	ldr	r1, [pc, #356]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005764:	4b54      	ldr	r3, [pc, #336]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005766:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800576a:	f023 0203 	bic.w	r2, r3, #3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005772:	4951      	ldr	r1, [pc, #324]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005786:	4b4c      	ldr	r3, [pc, #304]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005794:	4948      	ldr	r1, [pc, #288]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d015      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057a8:	4b43      	ldr	r3, [pc, #268]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b6:	4940      	ldr	r1, [pc, #256]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057c6:	d105      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c8:	4b3b      	ldr	r3, [pc, #236]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4a3a      	ldr	r2, [pc, #232]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d015      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057e0:	4b35      	ldr	r3, [pc, #212]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ee:	4932      	ldr	r1, [pc, #200]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057fe:	d105      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005800:	4b2d      	ldr	r3, [pc, #180]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	4a2c      	ldr	r2, [pc, #176]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800580a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d015      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005818:	4b27      	ldr	r3, [pc, #156]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005826:	4924      	ldr	r1, [pc, #144]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005832:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005836:	d105      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005838:	4b1f      	ldr	r3, [pc, #124]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4a1e      	ldr	r2, [pc, #120]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005842:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d015      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005850:	4b19      	ldr	r3, [pc, #100]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005856:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585e:	4916      	ldr	r1, [pc, #88]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800586e:	d105      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005870:	4b11      	ldr	r3, [pc, #68]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4a10      	ldr	r2, [pc, #64]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800587a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d019      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005888:	4b0b      	ldr	r3, [pc, #44]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	4908      	ldr	r1, [pc, #32]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058a6:	d109      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058a8:	4b03      	ldr	r3, [pc, #12]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4a02      	ldr	r2, [pc, #8]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058b2:	60d3      	str	r3, [r2, #12]
 80058b4:	e002      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80058b6:	bf00      	nop
 80058b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d015      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058c8:	4b29      	ldr	r3, [pc, #164]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d6:	4926      	ldr	r1, [pc, #152]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058e6:	d105      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058e8:	4b21      	ldr	r3, [pc, #132]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	4a20      	ldr	r2, [pc, #128]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d015      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005900:	4b1b      	ldr	r3, [pc, #108]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005906:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800590e:	4918      	ldr	r1, [pc, #96]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800591a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800591e:	d105      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005920:	4b13      	ldr	r3, [pc, #76]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	4a12      	ldr	r2, [pc, #72]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800592a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d015      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005938:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800593a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800593e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005946:	490a      	ldr	r1, [pc, #40]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005952:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005956:	d105      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005958:	4b05      	ldr	r3, [pc, #20]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4a04      	ldr	r2, [pc, #16]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800595e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005962:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005964:	7cbb      	ldrb	r3, [r7, #18]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40021000 	.word	0x40021000

08005974 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e09d      	b.n	8005ac2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598a:	2b00      	cmp	r3, #0
 800598c:	d108      	bne.n	80059a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005996:	d009      	beq.n	80059ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	61da      	str	r2, [r3, #28]
 800599e:	e005      	b.n	80059ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fc fb60 	bl	800208c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059ec:	d902      	bls.n	80059f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	e002      	b.n	80059fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005a02:	d007      	beq.n	8005a14 <HAL_SPI_Init+0xa0>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a0c:	d002      	beq.n	8005a14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a56:	ea42 0103 	orr.w	r1, r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	0c1b      	lsrs	r3, r3, #16
 8005a70:	f003 0204 	and.w	r2, r3, #4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005a90:	ea42 0103 	orr.w	r1, r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69da      	ldr	r2, [r3, #28]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ab0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b082      	sub	sp, #8
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e049      	b.n	8005b70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d106      	bne.n	8005af6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7fc fe37 	bl	8002764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3304      	adds	r3, #4
 8005b06:	4619      	mov	r1, r3
 8005b08:	4610      	mov	r0, r2
 8005b0a:	f000 f983 	bl	8005e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_TIM_ConfigClockSource+0x1c>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e0ee      	b.n	8005d72 <HAL_TIM_ConfigClockSource+0x1fa>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005bb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a6b      	ldr	r2, [pc, #428]	@ (8005d7c <HAL_TIM_ConfigClockSource+0x204>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	f000 80b9 	beq.w	8005d46 <HAL_TIM_ConfigClockSource+0x1ce>
 8005bd4:	4a69      	ldr	r2, [pc, #420]	@ (8005d7c <HAL_TIM_ConfigClockSource+0x204>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	f200 80be 	bhi.w	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005bdc:	4a68      	ldr	r2, [pc, #416]	@ (8005d80 <HAL_TIM_ConfigClockSource+0x208>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	f000 80b1 	beq.w	8005d46 <HAL_TIM_ConfigClockSource+0x1ce>
 8005be4:	4a66      	ldr	r2, [pc, #408]	@ (8005d80 <HAL_TIM_ConfigClockSource+0x208>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	f200 80b6 	bhi.w	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005bec:	4a65      	ldr	r2, [pc, #404]	@ (8005d84 <HAL_TIM_ConfigClockSource+0x20c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	f000 80a9 	beq.w	8005d46 <HAL_TIM_ConfigClockSource+0x1ce>
 8005bf4:	4a63      	ldr	r2, [pc, #396]	@ (8005d84 <HAL_TIM_ConfigClockSource+0x20c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	f200 80ae 	bhi.w	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005bfc:	4a62      	ldr	r2, [pc, #392]	@ (8005d88 <HAL_TIM_ConfigClockSource+0x210>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	f000 80a1 	beq.w	8005d46 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c04:	4a60      	ldr	r2, [pc, #384]	@ (8005d88 <HAL_TIM_ConfigClockSource+0x210>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	f200 80a6 	bhi.w	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c0c:	4a5f      	ldr	r2, [pc, #380]	@ (8005d8c <HAL_TIM_ConfigClockSource+0x214>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	f000 8099 	beq.w	8005d46 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c14:	4a5d      	ldr	r2, [pc, #372]	@ (8005d8c <HAL_TIM_ConfigClockSource+0x214>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	f200 809e 	bhi.w	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c20:	f000 8091 	beq.w	8005d46 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c28:	f200 8096 	bhi.w	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c30:	f000 8089 	beq.w	8005d46 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c38:	f200 808e 	bhi.w	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c40:	d03e      	beq.n	8005cc0 <HAL_TIM_ConfigClockSource+0x148>
 8005c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c46:	f200 8087 	bhi.w	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c4e:	f000 8086 	beq.w	8005d5e <HAL_TIM_ConfigClockSource+0x1e6>
 8005c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c56:	d87f      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c58:	2b70      	cmp	r3, #112	@ 0x70
 8005c5a:	d01a      	beq.n	8005c92 <HAL_TIM_ConfigClockSource+0x11a>
 8005c5c:	2b70      	cmp	r3, #112	@ 0x70
 8005c5e:	d87b      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c60:	2b60      	cmp	r3, #96	@ 0x60
 8005c62:	d050      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x18e>
 8005c64:	2b60      	cmp	r3, #96	@ 0x60
 8005c66:	d877      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c68:	2b50      	cmp	r3, #80	@ 0x50
 8005c6a:	d03c      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x16e>
 8005c6c:	2b50      	cmp	r3, #80	@ 0x50
 8005c6e:	d873      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c70:	2b40      	cmp	r3, #64	@ 0x40
 8005c72:	d058      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x1ae>
 8005c74:	2b40      	cmp	r3, #64	@ 0x40
 8005c76:	d86f      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c78:	2b30      	cmp	r3, #48	@ 0x30
 8005c7a:	d064      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c7c:	2b30      	cmp	r3, #48	@ 0x30
 8005c7e:	d86b      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d060      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d867      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d05c      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c8c:	2b10      	cmp	r3, #16
 8005c8e:	d05a      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c90:	e062      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ca2:	f000 fabd 	bl	8006220 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	609a      	str	r2, [r3, #8]
      break;
 8005cbe:	e04f      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cd0:	f000 faa6 	bl	8006220 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ce2:	609a      	str	r2, [r3, #8]
      break;
 8005ce4:	e03c      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f000 fa18 	bl	8006128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2150      	movs	r1, #80	@ 0x50
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fa71 	bl	80061e6 <TIM_ITRx_SetConfig>
      break;
 8005d04:	e02c      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d12:	461a      	mov	r2, r3
 8005d14:	f000 fa37 	bl	8006186 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2160      	movs	r1, #96	@ 0x60
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fa61 	bl	80061e6 <TIM_ITRx_SetConfig>
      break;
 8005d24:	e01c      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d32:	461a      	mov	r2, r3
 8005d34:	f000 f9f8 	bl	8006128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2140      	movs	r1, #64	@ 0x40
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fa51 	bl	80061e6 <TIM_ITRx_SetConfig>
      break;
 8005d44:	e00c      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4610      	mov	r0, r2
 8005d52:	f000 fa48 	bl	80061e6 <TIM_ITRx_SetConfig>
      break;
 8005d56:	e003      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d5c:	e000      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8005d5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	00100070 	.word	0x00100070
 8005d80:	00100050 	.word	0x00100050
 8005d84:	00100040 	.word	0x00100040
 8005d88:	00100030 	.word	0x00100030
 8005d8c:	00100020 	.word	0x00100020

08005d90 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e031      	b.n	8005e0c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f8de 	bl	8005f7c <TIM_SlaveTimer_SetConfig>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e018      	b.n	8005e0c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005de8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005df8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a4c      	ldr	r2, [pc, #304]	@ (8005f58 <TIM_Base_SetConfig+0x144>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d017      	beq.n	8005e5c <TIM_Base_SetConfig+0x48>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e32:	d013      	beq.n	8005e5c <TIM_Base_SetConfig+0x48>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a49      	ldr	r2, [pc, #292]	@ (8005f5c <TIM_Base_SetConfig+0x148>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00f      	beq.n	8005e5c <TIM_Base_SetConfig+0x48>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a48      	ldr	r2, [pc, #288]	@ (8005f60 <TIM_Base_SetConfig+0x14c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00b      	beq.n	8005e5c <TIM_Base_SetConfig+0x48>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a47      	ldr	r2, [pc, #284]	@ (8005f64 <TIM_Base_SetConfig+0x150>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d007      	beq.n	8005e5c <TIM_Base_SetConfig+0x48>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a46      	ldr	r2, [pc, #280]	@ (8005f68 <TIM_Base_SetConfig+0x154>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d003      	beq.n	8005e5c <TIM_Base_SetConfig+0x48>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a45      	ldr	r2, [pc, #276]	@ (8005f6c <TIM_Base_SetConfig+0x158>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d108      	bne.n	8005e6e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a39      	ldr	r2, [pc, #228]	@ (8005f58 <TIM_Base_SetConfig+0x144>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d023      	beq.n	8005ebe <TIM_Base_SetConfig+0xaa>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e7c:	d01f      	beq.n	8005ebe <TIM_Base_SetConfig+0xaa>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a36      	ldr	r2, [pc, #216]	@ (8005f5c <TIM_Base_SetConfig+0x148>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d01b      	beq.n	8005ebe <TIM_Base_SetConfig+0xaa>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a35      	ldr	r2, [pc, #212]	@ (8005f60 <TIM_Base_SetConfig+0x14c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d017      	beq.n	8005ebe <TIM_Base_SetConfig+0xaa>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a34      	ldr	r2, [pc, #208]	@ (8005f64 <TIM_Base_SetConfig+0x150>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d013      	beq.n	8005ebe <TIM_Base_SetConfig+0xaa>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a33      	ldr	r2, [pc, #204]	@ (8005f68 <TIM_Base_SetConfig+0x154>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00f      	beq.n	8005ebe <TIM_Base_SetConfig+0xaa>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a33      	ldr	r2, [pc, #204]	@ (8005f70 <TIM_Base_SetConfig+0x15c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00b      	beq.n	8005ebe <TIM_Base_SetConfig+0xaa>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a32      	ldr	r2, [pc, #200]	@ (8005f74 <TIM_Base_SetConfig+0x160>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d007      	beq.n	8005ebe <TIM_Base_SetConfig+0xaa>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a31      	ldr	r2, [pc, #196]	@ (8005f78 <TIM_Base_SetConfig+0x164>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d003      	beq.n	8005ebe <TIM_Base_SetConfig+0xaa>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8005f6c <TIM_Base_SetConfig+0x158>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d108      	bne.n	8005ed0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a18      	ldr	r2, [pc, #96]	@ (8005f58 <TIM_Base_SetConfig+0x144>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d013      	beq.n	8005f24 <TIM_Base_SetConfig+0x110>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a1a      	ldr	r2, [pc, #104]	@ (8005f68 <TIM_Base_SetConfig+0x154>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00f      	beq.n	8005f24 <TIM_Base_SetConfig+0x110>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a1a      	ldr	r2, [pc, #104]	@ (8005f70 <TIM_Base_SetConfig+0x15c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00b      	beq.n	8005f24 <TIM_Base_SetConfig+0x110>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a19      	ldr	r2, [pc, #100]	@ (8005f74 <TIM_Base_SetConfig+0x160>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d007      	beq.n	8005f24 <TIM_Base_SetConfig+0x110>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a18      	ldr	r2, [pc, #96]	@ (8005f78 <TIM_Base_SetConfig+0x164>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d003      	beq.n	8005f24 <TIM_Base_SetConfig+0x110>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a13      	ldr	r2, [pc, #76]	@ (8005f6c <TIM_Base_SetConfig+0x158>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d103      	bne.n	8005f2c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	691a      	ldr	r2, [r3, #16]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d105      	bne.n	8005f4a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f023 0201 	bic.w	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	611a      	str	r2, [r3, #16]
  }
}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	40000400 	.word	0x40000400
 8005f60:	40000800 	.word	0x40000800
 8005f64:	40000c00 	.word	0x40000c00
 8005f68:	40013400 	.word	0x40013400
 8005f6c:	40015000 	.word	0x40015000
 8005f70:	40014000 	.word	0x40014000
 8005f74:	40014400 	.word	0x40014400
 8005f78:	40014800 	.word	0x40014800

08005f7c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f9c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fae:	f023 0307 	bic.w	r3, r3, #7
 8005fb2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	4a52      	ldr	r2, [pc, #328]	@ (8006114 <TIM_SlaveTimer_SetConfig+0x198>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	f000 809a 	beq.w	8006106 <TIM_SlaveTimer_SetConfig+0x18a>
 8005fd2:	4a50      	ldr	r2, [pc, #320]	@ (8006114 <TIM_SlaveTimer_SetConfig+0x198>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	f200 8093 	bhi.w	8006100 <TIM_SlaveTimer_SetConfig+0x184>
 8005fda:	4a4f      	ldr	r2, [pc, #316]	@ (8006118 <TIM_SlaveTimer_SetConfig+0x19c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	f000 8092 	beq.w	8006106 <TIM_SlaveTimer_SetConfig+0x18a>
 8005fe2:	4a4d      	ldr	r2, [pc, #308]	@ (8006118 <TIM_SlaveTimer_SetConfig+0x19c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	f200 808b 	bhi.w	8006100 <TIM_SlaveTimer_SetConfig+0x184>
 8005fea:	4a4c      	ldr	r2, [pc, #304]	@ (800611c <TIM_SlaveTimer_SetConfig+0x1a0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	f000 808a 	beq.w	8006106 <TIM_SlaveTimer_SetConfig+0x18a>
 8005ff2:	4a4a      	ldr	r2, [pc, #296]	@ (800611c <TIM_SlaveTimer_SetConfig+0x1a0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	f200 8083 	bhi.w	8006100 <TIM_SlaveTimer_SetConfig+0x184>
 8005ffa:	4a49      	ldr	r2, [pc, #292]	@ (8006120 <TIM_SlaveTimer_SetConfig+0x1a4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	f000 8082 	beq.w	8006106 <TIM_SlaveTimer_SetConfig+0x18a>
 8006002:	4a47      	ldr	r2, [pc, #284]	@ (8006120 <TIM_SlaveTimer_SetConfig+0x1a4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d87b      	bhi.n	8006100 <TIM_SlaveTimer_SetConfig+0x184>
 8006008:	4a46      	ldr	r2, [pc, #280]	@ (8006124 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d07b      	beq.n	8006106 <TIM_SlaveTimer_SetConfig+0x18a>
 800600e:	4a45      	ldr	r2, [pc, #276]	@ (8006124 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d875      	bhi.n	8006100 <TIM_SlaveTimer_SetConfig+0x184>
 8006014:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006018:	d075      	beq.n	8006106 <TIM_SlaveTimer_SetConfig+0x18a>
 800601a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800601e:	d86f      	bhi.n	8006100 <TIM_SlaveTimer_SetConfig+0x184>
 8006020:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006024:	d06f      	beq.n	8006106 <TIM_SlaveTimer_SetConfig+0x18a>
 8006026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800602a:	d869      	bhi.n	8006100 <TIM_SlaveTimer_SetConfig+0x184>
 800602c:	2b70      	cmp	r3, #112	@ 0x70
 800602e:	d01a      	beq.n	8006066 <TIM_SlaveTimer_SetConfig+0xea>
 8006030:	2b70      	cmp	r3, #112	@ 0x70
 8006032:	d865      	bhi.n	8006100 <TIM_SlaveTimer_SetConfig+0x184>
 8006034:	2b60      	cmp	r3, #96	@ 0x60
 8006036:	d059      	beq.n	80060ec <TIM_SlaveTimer_SetConfig+0x170>
 8006038:	2b60      	cmp	r3, #96	@ 0x60
 800603a:	d861      	bhi.n	8006100 <TIM_SlaveTimer_SetConfig+0x184>
 800603c:	2b50      	cmp	r3, #80	@ 0x50
 800603e:	d04b      	beq.n	80060d8 <TIM_SlaveTimer_SetConfig+0x15c>
 8006040:	2b50      	cmp	r3, #80	@ 0x50
 8006042:	d85d      	bhi.n	8006100 <TIM_SlaveTimer_SetConfig+0x184>
 8006044:	2b40      	cmp	r3, #64	@ 0x40
 8006046:	d019      	beq.n	800607c <TIM_SlaveTimer_SetConfig+0x100>
 8006048:	2b40      	cmp	r3, #64	@ 0x40
 800604a:	d859      	bhi.n	8006100 <TIM_SlaveTimer_SetConfig+0x184>
 800604c:	2b30      	cmp	r3, #48	@ 0x30
 800604e:	d05a      	beq.n	8006106 <TIM_SlaveTimer_SetConfig+0x18a>
 8006050:	2b30      	cmp	r3, #48	@ 0x30
 8006052:	d855      	bhi.n	8006100 <TIM_SlaveTimer_SetConfig+0x184>
 8006054:	2b20      	cmp	r3, #32
 8006056:	d056      	beq.n	8006106 <TIM_SlaveTimer_SetConfig+0x18a>
 8006058:	2b20      	cmp	r3, #32
 800605a:	d851      	bhi.n	8006100 <TIM_SlaveTimer_SetConfig+0x184>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d052      	beq.n	8006106 <TIM_SlaveTimer_SetConfig+0x18a>
 8006060:	2b10      	cmp	r3, #16
 8006062:	d050      	beq.n	8006106 <TIM_SlaveTimer_SetConfig+0x18a>
 8006064:	e04c      	b.n	8006100 <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006076:	f000 f8d3 	bl	8006220 <TIM_ETR_SetConfig>
      break;
 800607a:	e045      	b.n	8006108 <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b05      	cmp	r3, #5
 8006082:	d004      	beq.n	800608e <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006088:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800608c:	d101      	bne.n	8006092 <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e03b      	b.n	800610a <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6a1a      	ldr	r2, [r3, #32]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0201 	bic.w	r2, r2, #1
 80060a8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060b8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	621a      	str	r2, [r3, #32]
      break;
 80060d6:	e017      	b.n	8006108 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e4:	461a      	mov	r2, r3
 80060e6:	f000 f81f 	bl	8006128 <TIM_TI1_ConfigInputStage>
      break;
 80060ea:	e00d      	b.n	8006108 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060f8:	461a      	mov	r2, r3
 80060fa:	f000 f844 	bl	8006186 <TIM_TI2_ConfigInputStage>
      break;
 80060fe:	e003      	b.n	8006108 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	75fb      	strb	r3, [r7, #23]
      break;
 8006104:	e000      	b.n	8006108 <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 8006106:	bf00      	nop
  }

  return status;
 8006108:	7dfb      	ldrb	r3, [r7, #23]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	00100070 	.word	0x00100070
 8006118:	00100050 	.word	0x00100050
 800611c:	00100040 	.word	0x00100040
 8006120:	00100030 	.word	0x00100030
 8006124:	00100020 	.word	0x00100020

08006128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	f023 0201 	bic.w	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f023 030a 	bic.w	r3, r3, #10
 8006164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	621a      	str	r2, [r3, #32]
}
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006186:	b480      	push	{r7}
 8006188:	b087      	sub	sp, #28
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f023 0210 	bic.w	r2, r3, #16
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	031b      	lsls	r3, r3, #12
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80061fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	f043 0307 	orr.w	r3, r3, #7
 800620c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	609a      	str	r2, [r3, #8]
}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800623a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	021a      	lsls	r2, r3, #8
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	431a      	orrs	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4313      	orrs	r3, r2
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	609a      	str	r2, [r3, #8]
}
 8006254:	bf00      	nop
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006274:	2302      	movs	r3, #2
 8006276:	e074      	b.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a34      	ldr	r2, [pc, #208]	@ (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d009      	beq.n	80062b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a33      	ldr	r2, [pc, #204]	@ (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d004      	beq.n	80062b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a31      	ldr	r2, [pc, #196]	@ (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d108      	bne.n	80062c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80062ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a21      	ldr	r2, [pc, #132]	@ (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d022      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f8:	d01d      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a1f      	ldr	r2, [pc, #124]	@ (800637c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d018      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a1d      	ldr	r2, [pc, #116]	@ (8006380 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a1c      	ldr	r2, [pc, #112]	@ (8006384 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00e      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a15      	ldr	r2, [pc, #84]	@ (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d009      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a18      	ldr	r2, [pc, #96]	@ (8006388 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d004      	beq.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a11      	ldr	r2, [pc, #68]	@ (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d10c      	bne.n	8006350 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800633c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	4313      	orrs	r3, r2
 8006346:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40013400 	.word	0x40013400
 8006378:	40015000 	.word	0x40015000
 800637c:	40000400 	.word	0x40000400
 8006380:	40000800 	.word	0x40000800
 8006384:	40000c00 	.word	0x40000c00
 8006388:	40014000 	.word	0x40014000

0800638c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e042      	b.n	8006424 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d106      	bne.n	80063b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7fc fd9d 	bl	8002ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2224      	movs	r2, #36	@ 0x24
 80063ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0201 	bic.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fc1a 	bl	8006c10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f91b 	bl	8006618 <UART_SetConfig>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e01b      	b.n	8006424 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800640a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fc99 	bl	8006d54 <UART_CheckIdleState>
 8006422:	4603      	mov	r3, r0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800642c:	b480      	push	{r7}
 800642e:	b091      	sub	sp, #68	@ 0x44
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006440:	2b20      	cmp	r3, #32
 8006442:	d178      	bne.n	8006536 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_UART_Transmit_IT+0x24>
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e071      	b.n	8006538 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	88fa      	ldrh	r2, [r7, #6]
 800645e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	88fa      	ldrh	r2, [r7, #6]
 8006466:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2221      	movs	r2, #33	@ 0x21
 800647c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006488:	d12a      	bne.n	80064e0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006492:	d107      	bne.n	80064a4 <HAL_UART_Transmit_IT+0x78>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d103      	bne.n	80064a4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4a29      	ldr	r2, [pc, #164]	@ (8006544 <HAL_UART_Transmit_IT+0x118>)
 80064a0:	679a      	str	r2, [r3, #120]	@ 0x78
 80064a2:	e002      	b.n	80064aa <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4a28      	ldr	r2, [pc, #160]	@ (8006548 <HAL_UART_Transmit_IT+0x11c>)
 80064a8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3308      	adds	r3, #8
 80064b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3308      	adds	r3, #8
 80064c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064ca:	637a      	str	r2, [r7, #52]	@ 0x34
 80064cc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80064d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80064d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e5      	bne.n	80064aa <HAL_UART_Transmit_IT+0x7e>
 80064de:	e028      	b.n	8006532 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064e8:	d107      	bne.n	80064fa <HAL_UART_Transmit_IT+0xce>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d103      	bne.n	80064fa <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4a15      	ldr	r2, [pc, #84]	@ (800654c <HAL_UART_Transmit_IT+0x120>)
 80064f6:	679a      	str	r2, [r3, #120]	@ 0x78
 80064f8:	e002      	b.n	8006500 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4a14      	ldr	r2, [pc, #80]	@ (8006550 <HAL_UART_Transmit_IT+0x124>)
 80064fe:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	613b      	str	r3, [r7, #16]
   return(result);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006514:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	69f9      	ldr	r1, [r7, #28]
 8006524:	6a3a      	ldr	r2, [r7, #32]
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	61bb      	str	r3, [r7, #24]
   return(result);
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e6      	bne.n	8006500 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	e000      	b.n	8006538 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006536:	2302      	movs	r3, #2
  }
}
 8006538:	4618      	mov	r0, r3
 800653a:	3744      	adds	r7, #68	@ 0x44
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	080074ef 	.word	0x080074ef
 8006548:	0800740f 	.word	0x0800740f
 800654c:	0800734d 	.word	0x0800734d
 8006550:	08007295 	.word	0x08007295

08006554 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08a      	sub	sp, #40	@ 0x28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006568:	2b20      	cmp	r3, #32
 800656a:	d137      	bne.n	80065dc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_UART_Receive_IT+0x24>
 8006572:	88fb      	ldrh	r3, [r7, #6]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e030      	b.n	80065de <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a18      	ldr	r2, [pc, #96]	@ (80065e8 <HAL_UART_Receive_IT+0x94>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d01f      	beq.n	80065cc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d018      	beq.n	80065cc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	613b      	str	r3, [r7, #16]
   return(result);
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	623b      	str	r3, [r7, #32]
 80065ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065bc:	69f9      	ldr	r1, [r7, #28]
 80065be:	6a3a      	ldr	r2, [r7, #32]
 80065c0:	e841 2300 	strex	r3, r2, [r1]
 80065c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e6      	bne.n	800659a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	461a      	mov	r2, r3
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fcd6 	bl	8006f84 <UART_Start_Receive_IT>
 80065d8:	4603      	mov	r3, r0
 80065da:	e000      	b.n	80065de <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065dc:	2302      	movs	r3, #2
  }
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3728      	adds	r7, #40	@ 0x28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40008000 	.word	0x40008000

080065ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800661c:	b08c      	sub	sp, #48	@ 0x30
 800661e:	af00      	add	r7, sp, #0
 8006620:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	431a      	orrs	r2, r3
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	431a      	orrs	r2, r3
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	4313      	orrs	r3, r2
 800663e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4baa      	ldr	r3, [pc, #680]	@ (80068f0 <UART_SetConfig+0x2d8>)
 8006648:	4013      	ands	r3, r2
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	6812      	ldr	r2, [r2, #0]
 800664e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006650:	430b      	orrs	r3, r1
 8006652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a9f      	ldr	r2, [pc, #636]	@ (80068f4 <UART_SetConfig+0x2dc>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006680:	4313      	orrs	r3, r2
 8006682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800668e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	6812      	ldr	r2, [r2, #0]
 8006696:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006698:	430b      	orrs	r3, r1
 800669a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a2:	f023 010f 	bic.w	r1, r3, #15
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a90      	ldr	r2, [pc, #576]	@ (80068f8 <UART_SetConfig+0x2e0>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d125      	bne.n	8006708 <UART_SetConfig+0xf0>
 80066bc:	4b8f      	ldr	r3, [pc, #572]	@ (80068fc <UART_SetConfig+0x2e4>)
 80066be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d81a      	bhi.n	8006700 <UART_SetConfig+0xe8>
 80066ca:	a201      	add	r2, pc, #4	@ (adr r2, 80066d0 <UART_SetConfig+0xb8>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	080066e1 	.word	0x080066e1
 80066d4:	080066f1 	.word	0x080066f1
 80066d8:	080066e9 	.word	0x080066e9
 80066dc:	080066f9 	.word	0x080066f9
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066e6:	e116      	b.n	8006916 <UART_SetConfig+0x2fe>
 80066e8:	2302      	movs	r3, #2
 80066ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ee:	e112      	b.n	8006916 <UART_SetConfig+0x2fe>
 80066f0:	2304      	movs	r3, #4
 80066f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066f6:	e10e      	b.n	8006916 <UART_SetConfig+0x2fe>
 80066f8:	2308      	movs	r3, #8
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066fe:	e10a      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006700:	2310      	movs	r3, #16
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006706:	e106      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a7c      	ldr	r2, [pc, #496]	@ (8006900 <UART_SetConfig+0x2e8>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d138      	bne.n	8006784 <UART_SetConfig+0x16c>
 8006712:	4b7a      	ldr	r3, [pc, #488]	@ (80068fc <UART_SetConfig+0x2e4>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006718:	f003 030c 	and.w	r3, r3, #12
 800671c:	2b0c      	cmp	r3, #12
 800671e:	d82d      	bhi.n	800677c <UART_SetConfig+0x164>
 8006720:	a201      	add	r2, pc, #4	@ (adr r2, 8006728 <UART_SetConfig+0x110>)
 8006722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006726:	bf00      	nop
 8006728:	0800675d 	.word	0x0800675d
 800672c:	0800677d 	.word	0x0800677d
 8006730:	0800677d 	.word	0x0800677d
 8006734:	0800677d 	.word	0x0800677d
 8006738:	0800676d 	.word	0x0800676d
 800673c:	0800677d 	.word	0x0800677d
 8006740:	0800677d 	.word	0x0800677d
 8006744:	0800677d 	.word	0x0800677d
 8006748:	08006765 	.word	0x08006765
 800674c:	0800677d 	.word	0x0800677d
 8006750:	0800677d 	.word	0x0800677d
 8006754:	0800677d 	.word	0x0800677d
 8006758:	08006775 	.word	0x08006775
 800675c:	2300      	movs	r3, #0
 800675e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006762:	e0d8      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006764:	2302      	movs	r3, #2
 8006766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800676a:	e0d4      	b.n	8006916 <UART_SetConfig+0x2fe>
 800676c:	2304      	movs	r3, #4
 800676e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006772:	e0d0      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006774:	2308      	movs	r3, #8
 8006776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800677a:	e0cc      	b.n	8006916 <UART_SetConfig+0x2fe>
 800677c:	2310      	movs	r3, #16
 800677e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006782:	e0c8      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a5e      	ldr	r2, [pc, #376]	@ (8006904 <UART_SetConfig+0x2ec>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d125      	bne.n	80067da <UART_SetConfig+0x1c2>
 800678e:	4b5b      	ldr	r3, [pc, #364]	@ (80068fc <UART_SetConfig+0x2e4>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006794:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006798:	2b30      	cmp	r3, #48	@ 0x30
 800679a:	d016      	beq.n	80067ca <UART_SetConfig+0x1b2>
 800679c:	2b30      	cmp	r3, #48	@ 0x30
 800679e:	d818      	bhi.n	80067d2 <UART_SetConfig+0x1ba>
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d00a      	beq.n	80067ba <UART_SetConfig+0x1a2>
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d814      	bhi.n	80067d2 <UART_SetConfig+0x1ba>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <UART_SetConfig+0x19a>
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d008      	beq.n	80067c2 <UART_SetConfig+0x1aa>
 80067b0:	e00f      	b.n	80067d2 <UART_SetConfig+0x1ba>
 80067b2:	2300      	movs	r3, #0
 80067b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067b8:	e0ad      	b.n	8006916 <UART_SetConfig+0x2fe>
 80067ba:	2302      	movs	r3, #2
 80067bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c0:	e0a9      	b.n	8006916 <UART_SetConfig+0x2fe>
 80067c2:	2304      	movs	r3, #4
 80067c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c8:	e0a5      	b.n	8006916 <UART_SetConfig+0x2fe>
 80067ca:	2308      	movs	r3, #8
 80067cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d0:	e0a1      	b.n	8006916 <UART_SetConfig+0x2fe>
 80067d2:	2310      	movs	r3, #16
 80067d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d8:	e09d      	b.n	8006916 <UART_SetConfig+0x2fe>
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a4a      	ldr	r2, [pc, #296]	@ (8006908 <UART_SetConfig+0x2f0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d125      	bne.n	8006830 <UART_SetConfig+0x218>
 80067e4:	4b45      	ldr	r3, [pc, #276]	@ (80068fc <UART_SetConfig+0x2e4>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80067ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80067f0:	d016      	beq.n	8006820 <UART_SetConfig+0x208>
 80067f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80067f4:	d818      	bhi.n	8006828 <UART_SetConfig+0x210>
 80067f6:	2b80      	cmp	r3, #128	@ 0x80
 80067f8:	d00a      	beq.n	8006810 <UART_SetConfig+0x1f8>
 80067fa:	2b80      	cmp	r3, #128	@ 0x80
 80067fc:	d814      	bhi.n	8006828 <UART_SetConfig+0x210>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <UART_SetConfig+0x1f0>
 8006802:	2b40      	cmp	r3, #64	@ 0x40
 8006804:	d008      	beq.n	8006818 <UART_SetConfig+0x200>
 8006806:	e00f      	b.n	8006828 <UART_SetConfig+0x210>
 8006808:	2300      	movs	r3, #0
 800680a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800680e:	e082      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006810:	2302      	movs	r3, #2
 8006812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006816:	e07e      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006818:	2304      	movs	r3, #4
 800681a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800681e:	e07a      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006820:	2308      	movs	r3, #8
 8006822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006826:	e076      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006828:	2310      	movs	r3, #16
 800682a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800682e:	e072      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a35      	ldr	r2, [pc, #212]	@ (800690c <UART_SetConfig+0x2f4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d12a      	bne.n	8006890 <UART_SetConfig+0x278>
 800683a:	4b30      	ldr	r3, [pc, #192]	@ (80068fc <UART_SetConfig+0x2e4>)
 800683c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006840:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006844:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006848:	d01a      	beq.n	8006880 <UART_SetConfig+0x268>
 800684a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800684e:	d81b      	bhi.n	8006888 <UART_SetConfig+0x270>
 8006850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006854:	d00c      	beq.n	8006870 <UART_SetConfig+0x258>
 8006856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800685a:	d815      	bhi.n	8006888 <UART_SetConfig+0x270>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <UART_SetConfig+0x250>
 8006860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006864:	d008      	beq.n	8006878 <UART_SetConfig+0x260>
 8006866:	e00f      	b.n	8006888 <UART_SetConfig+0x270>
 8006868:	2300      	movs	r3, #0
 800686a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800686e:	e052      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006870:	2302      	movs	r3, #2
 8006872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006876:	e04e      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006878:	2304      	movs	r3, #4
 800687a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800687e:	e04a      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006880:	2308      	movs	r3, #8
 8006882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006886:	e046      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006888:	2310      	movs	r3, #16
 800688a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800688e:	e042      	b.n	8006916 <UART_SetConfig+0x2fe>
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a17      	ldr	r2, [pc, #92]	@ (80068f4 <UART_SetConfig+0x2dc>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d13a      	bne.n	8006910 <UART_SetConfig+0x2f8>
 800689a:	4b18      	ldr	r3, [pc, #96]	@ (80068fc <UART_SetConfig+0x2e4>)
 800689c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80068a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068a8:	d01a      	beq.n	80068e0 <UART_SetConfig+0x2c8>
 80068aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068ae:	d81b      	bhi.n	80068e8 <UART_SetConfig+0x2d0>
 80068b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b4:	d00c      	beq.n	80068d0 <UART_SetConfig+0x2b8>
 80068b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068ba:	d815      	bhi.n	80068e8 <UART_SetConfig+0x2d0>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <UART_SetConfig+0x2b0>
 80068c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c4:	d008      	beq.n	80068d8 <UART_SetConfig+0x2c0>
 80068c6:	e00f      	b.n	80068e8 <UART_SetConfig+0x2d0>
 80068c8:	2300      	movs	r3, #0
 80068ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ce:	e022      	b.n	8006916 <UART_SetConfig+0x2fe>
 80068d0:	2302      	movs	r3, #2
 80068d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d6:	e01e      	b.n	8006916 <UART_SetConfig+0x2fe>
 80068d8:	2304      	movs	r3, #4
 80068da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068de:	e01a      	b.n	8006916 <UART_SetConfig+0x2fe>
 80068e0:	2308      	movs	r3, #8
 80068e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068e6:	e016      	b.n	8006916 <UART_SetConfig+0x2fe>
 80068e8:	2310      	movs	r3, #16
 80068ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ee:	e012      	b.n	8006916 <UART_SetConfig+0x2fe>
 80068f0:	cfff69f3 	.word	0xcfff69f3
 80068f4:	40008000 	.word	0x40008000
 80068f8:	40013800 	.word	0x40013800
 80068fc:	40021000 	.word	0x40021000
 8006900:	40004400 	.word	0x40004400
 8006904:	40004800 	.word	0x40004800
 8006908:	40004c00 	.word	0x40004c00
 800690c:	40005000 	.word	0x40005000
 8006910:	2310      	movs	r3, #16
 8006912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4aae      	ldr	r2, [pc, #696]	@ (8006bd4 <UART_SetConfig+0x5bc>)
 800691c:	4293      	cmp	r3, r2
 800691e:	f040 8097 	bne.w	8006a50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006922:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006926:	2b08      	cmp	r3, #8
 8006928:	d823      	bhi.n	8006972 <UART_SetConfig+0x35a>
 800692a:	a201      	add	r2, pc, #4	@ (adr r2, 8006930 <UART_SetConfig+0x318>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006955 	.word	0x08006955
 8006934:	08006973 	.word	0x08006973
 8006938:	0800695d 	.word	0x0800695d
 800693c:	08006973 	.word	0x08006973
 8006940:	08006963 	.word	0x08006963
 8006944:	08006973 	.word	0x08006973
 8006948:	08006973 	.word	0x08006973
 800694c:	08006973 	.word	0x08006973
 8006950:	0800696b 	.word	0x0800696b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006954:	f7fe fd4e 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 8006958:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800695a:	e010      	b.n	800697e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800695c:	4b9e      	ldr	r3, [pc, #632]	@ (8006bd8 <UART_SetConfig+0x5c0>)
 800695e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006960:	e00d      	b.n	800697e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006962:	f7fe fcd9 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 8006966:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006968:	e009      	b.n	800697e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800696e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006970:	e005      	b.n	800697e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800697c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 8130 	beq.w	8006be6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698a:	4a94      	ldr	r2, [pc, #592]	@ (8006bdc <UART_SetConfig+0x5c4>)
 800698c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006990:	461a      	mov	r2, r3
 8006992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006994:	fbb3 f3f2 	udiv	r3, r3, r2
 8006998:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	4613      	mov	r3, r2
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	4413      	add	r3, r2
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d305      	bcc.n	80069b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d903      	bls.n	80069be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80069bc:	e113      	b.n	8006be6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c0:	2200      	movs	r2, #0
 80069c2:	60bb      	str	r3, [r7, #8]
 80069c4:	60fa      	str	r2, [r7, #12]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ca:	4a84      	ldr	r2, [pc, #528]	@ (8006bdc <UART_SetConfig+0x5c4>)
 80069cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2200      	movs	r2, #0
 80069d4:	603b      	str	r3, [r7, #0]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069e0:	f7f9 fc86 	bl	80002f0 <__aeabi_uldivmod>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4610      	mov	r0, r2
 80069ea:	4619      	mov	r1, r3
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	020b      	lsls	r3, r1, #8
 80069f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069fa:	0202      	lsls	r2, r0, #8
 80069fc:	6979      	ldr	r1, [r7, #20]
 80069fe:	6849      	ldr	r1, [r1, #4]
 8006a00:	0849      	lsrs	r1, r1, #1
 8006a02:	2000      	movs	r0, #0
 8006a04:	460c      	mov	r4, r1
 8006a06:	4605      	mov	r5, r0
 8006a08:	eb12 0804 	adds.w	r8, r2, r4
 8006a0c:	eb43 0905 	adc.w	r9, r3, r5
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	469a      	mov	sl, r3
 8006a18:	4693      	mov	fp, r2
 8006a1a:	4652      	mov	r2, sl
 8006a1c:	465b      	mov	r3, fp
 8006a1e:	4640      	mov	r0, r8
 8006a20:	4649      	mov	r1, r9
 8006a22:	f7f9 fc65 	bl	80002f0 <__aeabi_uldivmod>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a34:	d308      	bcc.n	8006a48 <UART_SetConfig+0x430>
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a3c:	d204      	bcs.n	8006a48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6a3a      	ldr	r2, [r7, #32]
 8006a44:	60da      	str	r2, [r3, #12]
 8006a46:	e0ce      	b.n	8006be6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a4e:	e0ca      	b.n	8006be6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a58:	d166      	bne.n	8006b28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006a5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a5e:	2b08      	cmp	r3, #8
 8006a60:	d827      	bhi.n	8006ab2 <UART_SetConfig+0x49a>
 8006a62:	a201      	add	r2, pc, #4	@ (adr r2, 8006a68 <UART_SetConfig+0x450>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a8d 	.word	0x08006a8d
 8006a6c:	08006a95 	.word	0x08006a95
 8006a70:	08006a9d 	.word	0x08006a9d
 8006a74:	08006ab3 	.word	0x08006ab3
 8006a78:	08006aa3 	.word	0x08006aa3
 8006a7c:	08006ab3 	.word	0x08006ab3
 8006a80:	08006ab3 	.word	0x08006ab3
 8006a84:	08006ab3 	.word	0x08006ab3
 8006a88:	08006aab 	.word	0x08006aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a8c:	f7fe fcb2 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 8006a90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a92:	e014      	b.n	8006abe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a94:	f7fe fcc4 	bl	8005420 <HAL_RCC_GetPCLK2Freq>
 8006a98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a9a:	e010      	b.n	8006abe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a9c:	4b4e      	ldr	r3, [pc, #312]	@ (8006bd8 <UART_SetConfig+0x5c0>)
 8006a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006aa0:	e00d      	b.n	8006abe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aa2:	f7fe fc39 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 8006aa6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006aa8:	e009      	b.n	8006abe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ab0:	e005      	b.n	8006abe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006abc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8090 	beq.w	8006be6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aca:	4a44      	ldr	r2, [pc, #272]	@ (8006bdc <UART_SetConfig+0x5c4>)
 8006acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ad8:	005a      	lsls	r2, r3, #1
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	441a      	add	r2, r3
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	2b0f      	cmp	r3, #15
 8006af0:	d916      	bls.n	8006b20 <UART_SetConfig+0x508>
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006af8:	d212      	bcs.n	8006b20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f023 030f 	bic.w	r3, r3, #15
 8006b02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	8bfb      	ldrh	r3, [r7, #30]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	8bfa      	ldrh	r2, [r7, #30]
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	e062      	b.n	8006be6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b26:	e05e      	b.n	8006be6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d828      	bhi.n	8006b82 <UART_SetConfig+0x56a>
 8006b30:	a201      	add	r2, pc, #4	@ (adr r2, 8006b38 <UART_SetConfig+0x520>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b5d 	.word	0x08006b5d
 8006b3c:	08006b65 	.word	0x08006b65
 8006b40:	08006b6d 	.word	0x08006b6d
 8006b44:	08006b83 	.word	0x08006b83
 8006b48:	08006b73 	.word	0x08006b73
 8006b4c:	08006b83 	.word	0x08006b83
 8006b50:	08006b83 	.word	0x08006b83
 8006b54:	08006b83 	.word	0x08006b83
 8006b58:	08006b7b 	.word	0x08006b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b5c:	f7fe fc4a 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 8006b60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b62:	e014      	b.n	8006b8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b64:	f7fe fc5c 	bl	8005420 <HAL_RCC_GetPCLK2Freq>
 8006b68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b6a:	e010      	b.n	8006b8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd8 <UART_SetConfig+0x5c0>)
 8006b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b70:	e00d      	b.n	8006b8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b72:	f7fe fbd1 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 8006b76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b78:	e009      	b.n	8006b8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b80:	e005      	b.n	8006b8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b8c:	bf00      	nop
    }

    if (pclk != 0U)
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d028      	beq.n	8006be6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b98:	4a10      	ldr	r2, [pc, #64]	@ (8006bdc <UART_SetConfig+0x5c4>)
 8006b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	441a      	add	r2, r3
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	2b0f      	cmp	r3, #15
 8006bbc:	d910      	bls.n	8006be0 <UART_SetConfig+0x5c8>
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc4:	d20c      	bcs.n	8006be0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	60da      	str	r2, [r3, #12]
 8006bd0:	e009      	b.n	8006be6 <UART_SetConfig+0x5ce>
 8006bd2:	bf00      	nop
 8006bd4:	40008000 	.word	0x40008000
 8006bd8:	00f42400 	.word	0x00f42400
 8006bdc:	08008db8 	.word	0x08008db8
      }
      else
      {
        ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006c02:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3730      	adds	r7, #48	@ 0x30
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca4:	f003 0310 	and.w	r3, r3, #16
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00a      	beq.n	8006cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01a      	beq.n	8006d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d0e:	d10a      	bne.n	8006d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	605a      	str	r2, [r3, #4]
  }
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b098      	sub	sp, #96	@ 0x60
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d64:	f7fd fa9a 	bl	800429c <HAL_GetTick>
 8006d68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0308 	and.w	r3, r3, #8
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d12f      	bne.n	8006dd8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d80:	2200      	movs	r2, #0
 8006d82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f88e 	bl	8006ea8 <UART_WaitOnFlagUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d022      	beq.n	8006dd8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9a:	e853 3f00 	ldrex	r3, [r3]
 8006d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006da6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	461a      	mov	r2, r3
 8006dae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006db2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006db6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006db8:	e841 2300 	strex	r3, r2, [r1]
 8006dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1e6      	bne.n	8006d92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e063      	b.n	8006ea0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0304 	and.w	r3, r3, #4
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d149      	bne.n	8006e7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006de6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dee:	2200      	movs	r2, #0
 8006df0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f857 	bl	8006ea8 <UART_WaitOnFlagUntilTimeout>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d03c      	beq.n	8006e7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	e853 3f00 	ldrex	r3, [r3]
 8006e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1e6      	bne.n	8006e00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3308      	adds	r3, #8
 8006e38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f023 0301 	bic.w	r3, r3, #1
 8006e48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3308      	adds	r3, #8
 8006e50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e52:	61fa      	str	r2, [r7, #28]
 8006e54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	69b9      	ldr	r1, [r7, #24]
 8006e58:	69fa      	ldr	r2, [r7, #28]
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e5      	bne.n	8006e32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e012      	b.n	8006ea0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3758      	adds	r7, #88	@ 0x58
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb8:	e04f      	b.n	8006f5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec0:	d04b      	beq.n	8006f5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec2:	f7fd f9eb 	bl	800429c <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d302      	bcc.n	8006ed8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e04e      	b.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0304 	and.w	r3, r3, #4
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d037      	beq.n	8006f5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b80      	cmp	r3, #128	@ 0x80
 8006eee:	d034      	beq.n	8006f5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b40      	cmp	r3, #64	@ 0x40
 8006ef4:	d031      	beq.n	8006f5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	f003 0308 	and.w	r3, r3, #8
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d110      	bne.n	8006f26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2208      	movs	r2, #8
 8006f0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f95b 	bl	80071c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2208      	movs	r2, #8
 8006f16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e029      	b.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f34:	d111      	bne.n	8006f5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f941 	bl	80071c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e00f      	b.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69da      	ldr	r2, [r3, #28]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	4013      	ands	r3, r2
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	bf0c      	ite	eq
 8006f6a:	2301      	moveq	r3, #1
 8006f6c:	2300      	movne	r3, #0
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d0a0      	beq.n	8006eba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b0a3      	sub	sp, #140	@ 0x8c
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	88fa      	ldrh	r2, [r7, #6]
 8006f9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	88fa      	ldrh	r2, [r7, #6]
 8006fa4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fb6:	d10e      	bne.n	8006fd6 <UART_Start_Receive_IT+0x52>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d105      	bne.n	8006fcc <UART_Start_Receive_IT+0x48>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006fc6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006fca:	e02d      	b.n	8007028 <UART_Start_Receive_IT+0xa4>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	22ff      	movs	r2, #255	@ 0xff
 8006fd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006fd4:	e028      	b.n	8007028 <UART_Start_Receive_IT+0xa4>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10d      	bne.n	8006ffa <UART_Start_Receive_IT+0x76>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d104      	bne.n	8006ff0 <UART_Start_Receive_IT+0x6c>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	22ff      	movs	r2, #255	@ 0xff
 8006fea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006fee:	e01b      	b.n	8007028 <UART_Start_Receive_IT+0xa4>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	227f      	movs	r2, #127	@ 0x7f
 8006ff4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ff8:	e016      	b.n	8007028 <UART_Start_Receive_IT+0xa4>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007002:	d10d      	bne.n	8007020 <UART_Start_Receive_IT+0x9c>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d104      	bne.n	8007016 <UART_Start_Receive_IT+0x92>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	227f      	movs	r2, #127	@ 0x7f
 8007010:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007014:	e008      	b.n	8007028 <UART_Start_Receive_IT+0xa4>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	223f      	movs	r2, #63	@ 0x3f
 800701a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800701e:	e003      	b.n	8007028 <UART_Start_Receive_IT+0xa4>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2222      	movs	r2, #34	@ 0x22
 8007034:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3308      	adds	r3, #8
 800703e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007048:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800704a:	f043 0301 	orr.w	r3, r3, #1
 800704e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3308      	adds	r3, #8
 8007058:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800705c:	673a      	str	r2, [r7, #112]	@ 0x70
 800705e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007062:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800706a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e3      	bne.n	8007038 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007078:	d14f      	bne.n	800711a <UART_Start_Receive_IT+0x196>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007080:	88fa      	ldrh	r2, [r7, #6]
 8007082:	429a      	cmp	r2, r3
 8007084:	d349      	bcc.n	800711a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800708e:	d107      	bne.n	80070a0 <UART_Start_Receive_IT+0x11c>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d103      	bne.n	80070a0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4a47      	ldr	r2, [pc, #284]	@ (80071b8 <UART_Start_Receive_IT+0x234>)
 800709c:	675a      	str	r2, [r3, #116]	@ 0x74
 800709e:	e002      	b.n	80070a6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4a46      	ldr	r2, [pc, #280]	@ (80071bc <UART_Start_Receive_IT+0x238>)
 80070a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d01a      	beq.n	80070e4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80070bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80070d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070d2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80070d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80070de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e4      	bne.n	80070ae <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3308      	adds	r3, #8
 80070ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3308      	adds	r3, #8
 8007102:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007104:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007106:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800710a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e5      	bne.n	80070e4 <UART_Start_Receive_IT+0x160>
 8007118:	e046      	b.n	80071a8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007122:	d107      	bne.n	8007134 <UART_Start_Receive_IT+0x1b0>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d103      	bne.n	8007134 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4a24      	ldr	r2, [pc, #144]	@ (80071c0 <UART_Start_Receive_IT+0x23c>)
 8007130:	675a      	str	r2, [r3, #116]	@ 0x74
 8007132:	e002      	b.n	800713a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4a23      	ldr	r2, [pc, #140]	@ (80071c4 <UART_Start_Receive_IT+0x240>)
 8007138:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d019      	beq.n	8007176 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007152:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007156:	677b      	str	r3, [r7, #116]	@ 0x74
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007160:	637b      	str	r3, [r7, #52]	@ 0x34
 8007162:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007166:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800716e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e6      	bne.n	8007142 <UART_Start_Receive_IT+0x1be>
 8007174:	e018      	b.n	80071a8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	e853 3f00 	ldrex	r3, [r3]
 8007182:	613b      	str	r3, [r7, #16]
   return(result);
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f043 0320 	orr.w	r3, r3, #32
 800718a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007194:	623b      	str	r3, [r7, #32]
 8007196:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007198:	69f9      	ldr	r1, [r7, #28]
 800719a:	6a3a      	ldr	r2, [r7, #32]
 800719c:	e841 2300 	strex	r3, r2, [r1]
 80071a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1e6      	bne.n	8007176 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	378c      	adds	r7, #140	@ 0x8c
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	08007cad 	.word	0x08007cad
 80071bc:	08007949 	.word	0x08007949
 80071c0:	08007791 	.word	0x08007791
 80071c4:	080075d9 	.word	0x080075d9

080071c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b095      	sub	sp, #84	@ 0x54
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80071f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e6      	bne.n	80071d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	61fb      	str	r3, [r7, #28]
   return(result);
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007218:	f023 0301 	bic.w	r3, r3, #1
 800721c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3308      	adds	r3, #8
 8007224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007226:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007228:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800722c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e3      	bne.n	8007202 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800723e:	2b01      	cmp	r3, #1
 8007240:	d118      	bne.n	8007274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f023 0310 	bic.w	r3, r3, #16
 8007256:	647b      	str	r3, [r7, #68]	@ 0x44
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	6979      	ldr	r1, [r7, #20]
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	613b      	str	r3, [r7, #16]
   return(result);
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e6      	bne.n	8007242 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007288:	bf00      	nop
 800728a:	3754      	adds	r7, #84	@ 0x54
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007294:	b480      	push	{r7}
 8007296:	b08f      	sub	sp, #60	@ 0x3c
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a2:	2b21      	cmp	r3, #33	@ 0x21
 80072a4:	d14c      	bne.n	8007340 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d132      	bne.n	8007318 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	61fb      	str	r3, [r7, #28]
   return(result);
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072d8:	e841 2300 	strex	r3, r2, [r1]
 80072dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e6      	bne.n	80072b2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007302:	61bb      	str	r3, [r7, #24]
 8007304:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6979      	ldr	r1, [r7, #20]
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	613b      	str	r3, [r7, #16]
   return(result);
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e6      	bne.n	80072e4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007316:	e013      	b.n	8007340 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800731c:	781a      	ldrb	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007334:	b29b      	uxth	r3, r3
 8007336:	3b01      	subs	r3, #1
 8007338:	b29a      	uxth	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007340:	bf00      	nop
 8007342:	373c      	adds	r7, #60	@ 0x3c
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800734c:	b480      	push	{r7}
 800734e:	b091      	sub	sp, #68	@ 0x44
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800735a:	2b21      	cmp	r3, #33	@ 0x21
 800735c:	d151      	bne.n	8007402 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d132      	bne.n	80073d0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	623b      	str	r3, [r7, #32]
   return(result);
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800737e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	461a      	mov	r2, r3
 8007386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007388:	633b      	str	r3, [r7, #48]	@ 0x30
 800738a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800738e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e6      	bne.n	800736a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	69b9      	ldr	r1, [r7, #24]
 80073c0:	69fa      	ldr	r2, [r7, #28]
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	617b      	str	r3, [r7, #20]
   return(result);
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e6      	bne.n	800739c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80073ce:	e018      	b.n	8007402 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80073d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073e4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ea:	1c9a      	adds	r2, r3, #2
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3b01      	subs	r3, #1
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007402:	bf00      	nop
 8007404:	3744      	adds	r7, #68	@ 0x44
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800740e:	b480      	push	{r7}
 8007410:	b091      	sub	sp, #68	@ 0x44
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800741c:	2b21      	cmp	r3, #33	@ 0x21
 800741e:	d160      	bne.n	80074e2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007426:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007428:	e057      	b.n	80074da <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d133      	bne.n	800749e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3308      	adds	r3, #8
 800743c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	623b      	str	r3, [r7, #32]
   return(result);
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800744c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3308      	adds	r3, #8
 8007454:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007456:	633a      	str	r2, [r7, #48]	@ 0x30
 8007458:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800745c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e5      	bne.n	8007436 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	60fb      	str	r3, [r7, #12]
   return(result);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800747e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007488:	61fb      	str	r3, [r7, #28]
 800748a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	69b9      	ldr	r1, [r7, #24]
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	617b      	str	r3, [r7, #20]
   return(result);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e6      	bne.n	800746a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800749c:	e021      	b.n	80074e2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d013      	beq.n	80074d4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b0:	781a      	ldrb	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80074d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80074d6:	3b01      	subs	r3, #1
 80074d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80074da:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1a4      	bne.n	800742a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80074e0:	e7ff      	b.n	80074e2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80074e2:	bf00      	nop
 80074e4:	3744      	adds	r7, #68	@ 0x44
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b091      	sub	sp, #68	@ 0x44
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fc:	2b21      	cmp	r3, #33	@ 0x21
 80074fe:	d165      	bne.n	80075cc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007506:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007508:	e05c      	b.n	80075c4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d133      	bne.n	800757e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3308      	adds	r3, #8
 800751c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	61fb      	str	r3, [r7, #28]
   return(result);
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800752c:	637b      	str	r3, [r7, #52]	@ 0x34
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007536:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007538:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800753c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e5      	bne.n	8007516 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	e853 3f00 	ldrex	r3, [r3]
 8007556:	60bb      	str	r3, [r7, #8]
   return(result);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800755e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	461a      	mov	r2, r3
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	6979      	ldr	r1, [r7, #20]
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	e841 2300 	strex	r3, r2, [r1]
 8007574:	613b      	str	r3, [r7, #16]
   return(result);
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e6      	bne.n	800754a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800757c:	e026      	b.n	80075cc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007588:	2b00      	cmp	r3, #0
 800758a:	d018      	beq.n	80075be <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007590:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075a0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a6:	1c9a      	adds	r2, r3, #2
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80075be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80075c0:	3b01      	subs	r3, #1
 80075c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80075c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d19f      	bne.n	800750a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80075ca:	e7ff      	b.n	80075cc <UART_TxISR_16BIT_FIFOEN+0xde>
 80075cc:	bf00      	nop
 80075ce:	3744      	adds	r7, #68	@ 0x44
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b09c      	sub	sp, #112	@ 0x70
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80075e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075f0:	2b22      	cmp	r3, #34	@ 0x22
 80075f2:	f040 80be 	bne.w	8007772 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007600:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007604:	b2d9      	uxtb	r1, r3
 8007606:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800760a:	b2da      	uxtb	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007610:	400a      	ands	r2, r1
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007626:	b29b      	uxth	r3, r3
 8007628:	3b01      	subs	r3, #1
 800762a:	b29a      	uxth	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	f040 80a1 	bne.w	8007782 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007646:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007648:	e853 3f00 	ldrex	r3, [r3]
 800764c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800764e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007650:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007654:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800765e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007660:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007664:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800766c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e6      	bne.n	8007640 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3308      	adds	r3, #8
 8007678:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007684:	f023 0301 	bic.w	r3, r3, #1
 8007688:	667b      	str	r3, [r7, #100]	@ 0x64
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3308      	adds	r3, #8
 8007690:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007692:	647a      	str	r2, [r7, #68]	@ 0x44
 8007694:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e5      	bne.n	8007672 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2220      	movs	r2, #32
 80076aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a33      	ldr	r2, [pc, #204]	@ (800778c <UART_RxISR_8BIT+0x1b4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d01f      	beq.n	8007704 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d018      	beq.n	8007704 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	623b      	str	r3, [r7, #32]
   return(result);
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80076f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e6      	bne.n	80076d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007708:	2b01      	cmp	r3, #1
 800770a:	d12e      	bne.n	800776a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 0310 	bic.w	r3, r3, #16
 8007726:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007730:	61fb      	str	r3, [r7, #28]
 8007732:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	69b9      	ldr	r1, [r7, #24]
 8007736:	69fa      	ldr	r2, [r7, #28]
 8007738:	e841 2300 	strex	r3, r2, [r1]
 800773c:	617b      	str	r3, [r7, #20]
   return(result);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e6      	bne.n	8007712 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	f003 0310 	and.w	r3, r3, #16
 800774e:	2b10      	cmp	r3, #16
 8007750:	d103      	bne.n	800775a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2210      	movs	r2, #16
 8007758:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7fe ff4c 	bl	8006600 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007768:	e00b      	b.n	8007782 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fb f852 	bl	8002814 <HAL_UART_RxCpltCallback>
}
 8007770:	e007      	b.n	8007782 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	699a      	ldr	r2, [r3, #24]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f042 0208 	orr.w	r2, r2, #8
 8007780:	619a      	str	r2, [r3, #24]
}
 8007782:	bf00      	nop
 8007784:	3770      	adds	r7, #112	@ 0x70
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	40008000 	.word	0x40008000

08007790 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b09c      	sub	sp, #112	@ 0x70
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800779e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077a8:	2b22      	cmp	r3, #34	@ 0x22
 80077aa:	f040 80be 	bne.w	800792a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80077be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80077c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80077c6:	4013      	ands	r3, r2
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077d2:	1c9a      	adds	r2, r3, #2
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077de:	b29b      	uxth	r3, r3
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f040 80a1 	bne.w	800793a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007808:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800780c:	667b      	str	r3, [r7, #100]	@ 0x64
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007816:	657b      	str	r3, [r7, #84]	@ 0x54
 8007818:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800781c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e6      	bne.n	80077f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3308      	adds	r3, #8
 8007830:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	f023 0301 	bic.w	r3, r3, #1
 8007840:	663b      	str	r3, [r7, #96]	@ 0x60
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3308      	adds	r3, #8
 8007848:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800784a:	643a      	str	r2, [r7, #64]	@ 0x40
 800784c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007850:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e5      	bne.n	800782a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a33      	ldr	r2, [pc, #204]	@ (8007944 <UART_RxISR_16BIT+0x1b4>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d01f      	beq.n	80078bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d018      	beq.n	80078bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	61fb      	str	r3, [r7, #28]
   return(result);
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800789e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078aa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e6      	bne.n	800788a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d12e      	bne.n	8007922 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	e853 3f00 	ldrex	r3, [r3]
 80078d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f023 0310 	bic.w	r3, r3, #16
 80078de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	6979      	ldr	r1, [r7, #20]
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	613b      	str	r3, [r7, #16]
   return(result);
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e6      	bne.n	80078ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	f003 0310 	and.w	r3, r3, #16
 8007906:	2b10      	cmp	r3, #16
 8007908:	d103      	bne.n	8007912 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2210      	movs	r2, #16
 8007910:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fe fe70 	bl	8006600 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007920:	e00b      	b.n	800793a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7fa ff76 	bl	8002814 <HAL_UART_RxCpltCallback>
}
 8007928:	e007      	b.n	800793a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	699a      	ldr	r2, [r3, #24]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f042 0208 	orr.w	r2, r2, #8
 8007938:	619a      	str	r2, [r3, #24]
}
 800793a:	bf00      	nop
 800793c:	3770      	adds	r7, #112	@ 0x70
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40008000 	.word	0x40008000

08007948 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b0ac      	sub	sp, #176	@ 0xb0
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007956:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800797e:	2b22      	cmp	r3, #34	@ 0x22
 8007980:	f040 8183 	bne.w	8007c8a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800798a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800798e:	e126      	b.n	8007bde <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007996:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800799a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800799e:	b2d9      	uxtb	r1, r3
 80079a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079aa:	400a      	ands	r2, r1
 80079ac:	b2d2      	uxtb	r2, r2
 80079ae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	3b01      	subs	r3, #1
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80079d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079da:	f003 0307 	and.w	r3, r3, #7
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d053      	beq.n	8007a8a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d011      	beq.n	8007a12 <UART_RxISR_8BIT_FIFOEN+0xca>
 80079ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00b      	beq.n	8007a12 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2201      	movs	r2, #1
 8007a00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a08:	f043 0201 	orr.w	r2, r3, #1
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d011      	beq.n	8007a42 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007a1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00b      	beq.n	8007a42 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a38:	f043 0204 	orr.w	r2, r3, #4
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a46:	f003 0304 	and.w	r3, r3, #4
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d011      	beq.n	8007a72 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2204      	movs	r2, #4
 8007a60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a68:	f043 0202 	orr.w	r2, r3, #2
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d006      	beq.n	8007a8a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7fe fdb5 	bl	80065ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f040 80a3 	bne.w	8007bde <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007aba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007abc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007ac0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007ac2:	e841 2300 	strex	r3, r2, [r1]
 8007ac6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007ac8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1e4      	bne.n	8007a98 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ad8:	e853 3f00 	ldrex	r3, [r3]
 8007adc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007ade:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ae4:	f023 0301 	bic.w	r3, r3, #1
 8007ae8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3308      	adds	r3, #8
 8007af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007af6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007af8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007afc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007b04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e1      	bne.n	8007ace <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a60      	ldr	r2, [pc, #384]	@ (8007ca4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d021      	beq.n	8007b6c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d01a      	beq.n	8007b6c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b3e:	e853 3f00 	ldrex	r3, [r3]
 8007b42:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b58:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b5a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b60:	e841 2300 	strex	r3, r2, [r1]
 8007b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1e4      	bne.n	8007b36 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d130      	bne.n	8007bd6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8a:	f023 0310 	bic.w	r3, r3, #16
 8007b8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ba2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e4      	bne.n	8007b7a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	f003 0310 	and.w	r3, r3, #16
 8007bba:	2b10      	cmp	r3, #16
 8007bbc:	d103      	bne.n	8007bc6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2210      	movs	r2, #16
 8007bc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7fe fd16 	bl	8006600 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007bd4:	e00e      	b.n	8007bf4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7fa fe1c 	bl	8002814 <HAL_UART_RxCpltCallback>
        break;
 8007bdc:	e00a      	b.n	8007bf4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bde:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d006      	beq.n	8007bf4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007be6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f47f aece 	bne.w	8007990 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bfa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007bfe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d049      	beq.n	8007c9a <UART_RxISR_8BIT_FIFOEN+0x352>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c0c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d242      	bcs.n	8007c9a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3308      	adds	r3, #8
 8007c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	e853 3f00 	ldrex	r3, [r3]
 8007c22:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3308      	adds	r3, #8
 8007c34:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007c38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c40:	e841 2300 	strex	r3, r2, [r1]
 8007c44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e3      	bne.n	8007c14 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a16      	ldr	r2, [pc, #88]	@ (8007ca8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007c50:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f043 0320 	orr.w	r3, r3, #32
 8007c66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6979      	ldr	r1, [r7, #20]
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	613b      	str	r3, [r7, #16]
   return(result);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e4      	bne.n	8007c52 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c88:	e007      	b.n	8007c9a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699a      	ldr	r2, [r3, #24]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f042 0208 	orr.w	r2, r2, #8
 8007c98:	619a      	str	r2, [r3, #24]
}
 8007c9a:	bf00      	nop
 8007c9c:	37b0      	adds	r7, #176	@ 0xb0
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	40008000 	.word	0x40008000
 8007ca8:	080075d9 	.word	0x080075d9

08007cac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b0ae      	sub	sp, #184	@ 0xb8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007cba:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ce2:	2b22      	cmp	r3, #34	@ 0x22
 8007ce4:	f040 8187 	bne.w	8007ff6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007cee:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007cf2:	e12a      	b.n	8007f4a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007d06:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007d0a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007d0e:	4013      	ands	r3, r2
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d1c:	1c9a      	adds	r2, r3, #2
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d053      	beq.n	8007df2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d011      	beq.n	8007d7a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00b      	beq.n	8007d7a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2201      	movs	r2, #1
 8007d68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d70:	f043 0201 	orr.w	r2, r3, #1
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d011      	beq.n	8007daa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007d86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00b      	beq.n	8007daa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2202      	movs	r2, #2
 8007d98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da0:	f043 0204 	orr.w	r2, r3, #4
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007daa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007dae:	f003 0304 	and.w	r3, r3, #4
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d011      	beq.n	8007dda <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00b      	beq.n	8007dda <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2204      	movs	r2, #4
 8007dc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dd0:	f043 0202 	orr.w	r2, r3, #2
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d006      	beq.n	8007df2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7fe fc01 	bl	80065ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f040 80a5 	bne.w	8007f4a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e26:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e2      	bne.n	8007e00 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3308      	adds	r3, #8
 8007e40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e50:	f023 0301 	bic.w	r3, r3, #1
 8007e54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007e62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e6a:	e841 2300 	strex	r3, r2, [r1]
 8007e6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1e1      	bne.n	8007e3a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a60      	ldr	r2, [pc, #384]	@ (8008010 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d021      	beq.n	8007ed8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d01a      	beq.n	8007ed8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eaa:	e853 3f00 	ldrex	r3, [r3]
 8007eae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007eb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007eb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ec6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007eca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e4      	bne.n	8007ea2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d130      	bne.n	8007f42 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eee:	e853 3f00 	ldrex	r3, [r3]
 8007ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef6:	f023 0310 	bic.w	r3, r3, #16
 8007efa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f10:	e841 2300 	strex	r3, r2, [r1]
 8007f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1e4      	bne.n	8007ee6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	f003 0310 	and.w	r3, r3, #16
 8007f26:	2b10      	cmp	r3, #16
 8007f28:	d103      	bne.n	8007f32 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2210      	movs	r2, #16
 8007f30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7fe fb60 	bl	8006600 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007f40:	e00e      	b.n	8007f60 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7fa fc66 	bl	8002814 <HAL_UART_RxCpltCallback>
        break;
 8007f48:	e00a      	b.n	8007f60 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f4a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d006      	beq.n	8007f60 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f47f aeca 	bne.w	8007cf4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f66:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f6a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d049      	beq.n	8008006 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007f78:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d242      	bcs.n	8008006 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3308      	adds	r3, #8
 8007f86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	623b      	str	r3, [r7, #32]
   return(result);
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007fa4:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e3      	bne.n	8007f80 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a16      	ldr	r2, [pc, #88]	@ (8008014 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007fbc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f043 0320 	orr.w	r3, r3, #32
 8007fd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007fe0:	61fb      	str	r3, [r7, #28]
 8007fe2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	69b9      	ldr	r1, [r7, #24]
 8007fe6:	69fa      	ldr	r2, [r7, #28]
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	617b      	str	r3, [r7, #20]
   return(result);
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e4      	bne.n	8007fbe <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ff4:	e007      	b.n	8008006 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	699a      	ldr	r2, [r3, #24]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f042 0208 	orr.w	r2, r2, #8
 8008004:	619a      	str	r2, [r3, #24]
}
 8008006:	bf00      	nop
 8008008:	37b8      	adds	r7, #184	@ 0xb8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	40008000 	.word	0x40008000
 8008014:	08007791 	.word	0x08007791

08008018 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008026:	2b01      	cmp	r3, #1
 8008028:	d101      	bne.n	800802e <HAL_UARTEx_DisableFifoMode+0x16>
 800802a:	2302      	movs	r3, #2
 800802c:	e027      	b.n	800807e <HAL_UARTEx_DisableFifoMode+0x66>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2224      	movs	r2, #36	@ 0x24
 800803a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0201 	bic.w	r2, r2, #1
 8008054:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800805c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800809a:	2b01      	cmp	r3, #1
 800809c:	d101      	bne.n	80080a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800809e:	2302      	movs	r3, #2
 80080a0:	e02d      	b.n	80080fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2224      	movs	r2, #36	@ 0x24
 80080ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 0201 	bic.w	r2, r2, #1
 80080c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f850 	bl	8008184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2220      	movs	r2, #32
 80080f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008116:	2b01      	cmp	r3, #1
 8008118:	d101      	bne.n	800811e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800811a:	2302      	movs	r3, #2
 800811c:	e02d      	b.n	800817a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2224      	movs	r2, #36	@ 0x24
 800812a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f022 0201 	bic.w	r2, r2, #1
 8008144:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f812 	bl	8008184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
	...

08008184 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008190:	2b00      	cmp	r3, #0
 8008192:	d108      	bne.n	80081a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081a4:	e031      	b.n	800820a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081a6:	2308      	movs	r3, #8
 80081a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081aa:	2308      	movs	r3, #8
 80081ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	0e5b      	lsrs	r3, r3, #25
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	0f5b      	lsrs	r3, r3, #29
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	f003 0307 	and.w	r3, r3, #7
 80081cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	7b3a      	ldrb	r2, [r7, #12]
 80081d2:	4911      	ldr	r1, [pc, #68]	@ (8008218 <UARTEx_SetNbDataToProcess+0x94>)
 80081d4:	5c8a      	ldrb	r2, [r1, r2]
 80081d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081da:	7b3a      	ldrb	r2, [r7, #12]
 80081dc:	490f      	ldr	r1, [pc, #60]	@ (800821c <UARTEx_SetNbDataToProcess+0x98>)
 80081de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	7b7a      	ldrb	r2, [r7, #13]
 80081f0:	4909      	ldr	r1, [pc, #36]	@ (8008218 <UARTEx_SetNbDataToProcess+0x94>)
 80081f2:	5c8a      	ldrb	r2, [r1, r2]
 80081f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081f8:	7b7a      	ldrb	r2, [r7, #13]
 80081fa:	4908      	ldr	r1, [pc, #32]	@ (800821c <UARTEx_SetNbDataToProcess+0x98>)
 80081fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008202:	b29a      	uxth	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800820a:	bf00      	nop
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	08008dd0 	.word	0x08008dd0
 800821c:	08008dd8 	.word	0x08008dd8

08008220 <siprintf>:
 8008220:	b40e      	push	{r1, r2, r3}
 8008222:	b500      	push	{lr}
 8008224:	b09c      	sub	sp, #112	@ 0x70
 8008226:	ab1d      	add	r3, sp, #116	@ 0x74
 8008228:	9002      	str	r0, [sp, #8]
 800822a:	9006      	str	r0, [sp, #24]
 800822c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008230:	4809      	ldr	r0, [pc, #36]	@ (8008258 <siprintf+0x38>)
 8008232:	9107      	str	r1, [sp, #28]
 8008234:	9104      	str	r1, [sp, #16]
 8008236:	4909      	ldr	r1, [pc, #36]	@ (800825c <siprintf+0x3c>)
 8008238:	f853 2b04 	ldr.w	r2, [r3], #4
 800823c:	9105      	str	r1, [sp, #20]
 800823e:	6800      	ldr	r0, [r0, #0]
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	a902      	add	r1, sp, #8
 8008244:	f000 f9a4 	bl	8008590 <_svfiprintf_r>
 8008248:	9b02      	ldr	r3, [sp, #8]
 800824a:	2200      	movs	r2, #0
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	b01c      	add	sp, #112	@ 0x70
 8008250:	f85d eb04 	ldr.w	lr, [sp], #4
 8008254:	b003      	add	sp, #12
 8008256:	4770      	bx	lr
 8008258:	20000014 	.word	0x20000014
 800825c:	ffff0208 	.word	0xffff0208

08008260 <memset>:
 8008260:	4402      	add	r2, r0
 8008262:	4603      	mov	r3, r0
 8008264:	4293      	cmp	r3, r2
 8008266:	d100      	bne.n	800826a <memset+0xa>
 8008268:	4770      	bx	lr
 800826a:	f803 1b01 	strb.w	r1, [r3], #1
 800826e:	e7f9      	b.n	8008264 <memset+0x4>

08008270 <strcat>:
 8008270:	b510      	push	{r4, lr}
 8008272:	4602      	mov	r2, r0
 8008274:	7814      	ldrb	r4, [r2, #0]
 8008276:	4613      	mov	r3, r2
 8008278:	3201      	adds	r2, #1
 800827a:	2c00      	cmp	r4, #0
 800827c:	d1fa      	bne.n	8008274 <strcat+0x4>
 800827e:	3b01      	subs	r3, #1
 8008280:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008284:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008288:	2a00      	cmp	r2, #0
 800828a:	d1f9      	bne.n	8008280 <strcat+0x10>
 800828c:	bd10      	pop	{r4, pc}
	...

08008290 <__errno>:
 8008290:	4b01      	ldr	r3, [pc, #4]	@ (8008298 <__errno+0x8>)
 8008292:	6818      	ldr	r0, [r3, #0]
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	20000014 	.word	0x20000014

0800829c <__libc_init_array>:
 800829c:	b570      	push	{r4, r5, r6, lr}
 800829e:	4d0d      	ldr	r5, [pc, #52]	@ (80082d4 <__libc_init_array+0x38>)
 80082a0:	4c0d      	ldr	r4, [pc, #52]	@ (80082d8 <__libc_init_array+0x3c>)
 80082a2:	1b64      	subs	r4, r4, r5
 80082a4:	10a4      	asrs	r4, r4, #2
 80082a6:	2600      	movs	r6, #0
 80082a8:	42a6      	cmp	r6, r4
 80082aa:	d109      	bne.n	80082c0 <__libc_init_array+0x24>
 80082ac:	4d0b      	ldr	r5, [pc, #44]	@ (80082dc <__libc_init_array+0x40>)
 80082ae:	4c0c      	ldr	r4, [pc, #48]	@ (80082e0 <__libc_init_array+0x44>)
 80082b0:	f000 fc66 	bl	8008b80 <_init>
 80082b4:	1b64      	subs	r4, r4, r5
 80082b6:	10a4      	asrs	r4, r4, #2
 80082b8:	2600      	movs	r6, #0
 80082ba:	42a6      	cmp	r6, r4
 80082bc:	d105      	bne.n	80082ca <__libc_init_array+0x2e>
 80082be:	bd70      	pop	{r4, r5, r6, pc}
 80082c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c4:	4798      	blx	r3
 80082c6:	3601      	adds	r6, #1
 80082c8:	e7ee      	b.n	80082a8 <__libc_init_array+0xc>
 80082ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ce:	4798      	blx	r3
 80082d0:	3601      	adds	r6, #1
 80082d2:	e7f2      	b.n	80082ba <__libc_init_array+0x1e>
 80082d4:	08008e1c 	.word	0x08008e1c
 80082d8:	08008e1c 	.word	0x08008e1c
 80082dc:	08008e1c 	.word	0x08008e1c
 80082e0:	08008e20 	.word	0x08008e20

080082e4 <__retarget_lock_acquire_recursive>:
 80082e4:	4770      	bx	lr

080082e6 <__retarget_lock_release_recursive>:
 80082e6:	4770      	bx	lr

080082e8 <_free_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4605      	mov	r5, r0
 80082ec:	2900      	cmp	r1, #0
 80082ee:	d041      	beq.n	8008374 <_free_r+0x8c>
 80082f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082f4:	1f0c      	subs	r4, r1, #4
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	bfb8      	it	lt
 80082fa:	18e4      	addlt	r4, r4, r3
 80082fc:	f000 f8e0 	bl	80084c0 <__malloc_lock>
 8008300:	4a1d      	ldr	r2, [pc, #116]	@ (8008378 <_free_r+0x90>)
 8008302:	6813      	ldr	r3, [r2, #0]
 8008304:	b933      	cbnz	r3, 8008314 <_free_r+0x2c>
 8008306:	6063      	str	r3, [r4, #4]
 8008308:	6014      	str	r4, [r2, #0]
 800830a:	4628      	mov	r0, r5
 800830c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008310:	f000 b8dc 	b.w	80084cc <__malloc_unlock>
 8008314:	42a3      	cmp	r3, r4
 8008316:	d908      	bls.n	800832a <_free_r+0x42>
 8008318:	6820      	ldr	r0, [r4, #0]
 800831a:	1821      	adds	r1, r4, r0
 800831c:	428b      	cmp	r3, r1
 800831e:	bf01      	itttt	eq
 8008320:	6819      	ldreq	r1, [r3, #0]
 8008322:	685b      	ldreq	r3, [r3, #4]
 8008324:	1809      	addeq	r1, r1, r0
 8008326:	6021      	streq	r1, [r4, #0]
 8008328:	e7ed      	b.n	8008306 <_free_r+0x1e>
 800832a:	461a      	mov	r2, r3
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	b10b      	cbz	r3, 8008334 <_free_r+0x4c>
 8008330:	42a3      	cmp	r3, r4
 8008332:	d9fa      	bls.n	800832a <_free_r+0x42>
 8008334:	6811      	ldr	r1, [r2, #0]
 8008336:	1850      	adds	r0, r2, r1
 8008338:	42a0      	cmp	r0, r4
 800833a:	d10b      	bne.n	8008354 <_free_r+0x6c>
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	4401      	add	r1, r0
 8008340:	1850      	adds	r0, r2, r1
 8008342:	4283      	cmp	r3, r0
 8008344:	6011      	str	r1, [r2, #0]
 8008346:	d1e0      	bne.n	800830a <_free_r+0x22>
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	6053      	str	r3, [r2, #4]
 800834e:	4408      	add	r0, r1
 8008350:	6010      	str	r0, [r2, #0]
 8008352:	e7da      	b.n	800830a <_free_r+0x22>
 8008354:	d902      	bls.n	800835c <_free_r+0x74>
 8008356:	230c      	movs	r3, #12
 8008358:	602b      	str	r3, [r5, #0]
 800835a:	e7d6      	b.n	800830a <_free_r+0x22>
 800835c:	6820      	ldr	r0, [r4, #0]
 800835e:	1821      	adds	r1, r4, r0
 8008360:	428b      	cmp	r3, r1
 8008362:	bf04      	itt	eq
 8008364:	6819      	ldreq	r1, [r3, #0]
 8008366:	685b      	ldreq	r3, [r3, #4]
 8008368:	6063      	str	r3, [r4, #4]
 800836a:	bf04      	itt	eq
 800836c:	1809      	addeq	r1, r1, r0
 800836e:	6021      	streq	r1, [r4, #0]
 8008370:	6054      	str	r4, [r2, #4]
 8008372:	e7ca      	b.n	800830a <_free_r+0x22>
 8008374:	bd38      	pop	{r3, r4, r5, pc}
 8008376:	bf00      	nop
 8008378:	200013b4 	.word	0x200013b4

0800837c <sbrk_aligned>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	4e0f      	ldr	r6, [pc, #60]	@ (80083bc <sbrk_aligned+0x40>)
 8008380:	460c      	mov	r4, r1
 8008382:	6831      	ldr	r1, [r6, #0]
 8008384:	4605      	mov	r5, r0
 8008386:	b911      	cbnz	r1, 800838e <sbrk_aligned+0x12>
 8008388:	f000 fba6 	bl	8008ad8 <_sbrk_r>
 800838c:	6030      	str	r0, [r6, #0]
 800838e:	4621      	mov	r1, r4
 8008390:	4628      	mov	r0, r5
 8008392:	f000 fba1 	bl	8008ad8 <_sbrk_r>
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	d103      	bne.n	80083a2 <sbrk_aligned+0x26>
 800839a:	f04f 34ff 	mov.w	r4, #4294967295
 800839e:	4620      	mov	r0, r4
 80083a0:	bd70      	pop	{r4, r5, r6, pc}
 80083a2:	1cc4      	adds	r4, r0, #3
 80083a4:	f024 0403 	bic.w	r4, r4, #3
 80083a8:	42a0      	cmp	r0, r4
 80083aa:	d0f8      	beq.n	800839e <sbrk_aligned+0x22>
 80083ac:	1a21      	subs	r1, r4, r0
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 fb92 	bl	8008ad8 <_sbrk_r>
 80083b4:	3001      	adds	r0, #1
 80083b6:	d1f2      	bne.n	800839e <sbrk_aligned+0x22>
 80083b8:	e7ef      	b.n	800839a <sbrk_aligned+0x1e>
 80083ba:	bf00      	nop
 80083bc:	200013b0 	.word	0x200013b0

080083c0 <_malloc_r>:
 80083c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c4:	1ccd      	adds	r5, r1, #3
 80083c6:	f025 0503 	bic.w	r5, r5, #3
 80083ca:	3508      	adds	r5, #8
 80083cc:	2d0c      	cmp	r5, #12
 80083ce:	bf38      	it	cc
 80083d0:	250c      	movcc	r5, #12
 80083d2:	2d00      	cmp	r5, #0
 80083d4:	4606      	mov	r6, r0
 80083d6:	db01      	blt.n	80083dc <_malloc_r+0x1c>
 80083d8:	42a9      	cmp	r1, r5
 80083da:	d904      	bls.n	80083e6 <_malloc_r+0x26>
 80083dc:	230c      	movs	r3, #12
 80083de:	6033      	str	r3, [r6, #0]
 80083e0:	2000      	movs	r0, #0
 80083e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084bc <_malloc_r+0xfc>
 80083ea:	f000 f869 	bl	80084c0 <__malloc_lock>
 80083ee:	f8d8 3000 	ldr.w	r3, [r8]
 80083f2:	461c      	mov	r4, r3
 80083f4:	bb44      	cbnz	r4, 8008448 <_malloc_r+0x88>
 80083f6:	4629      	mov	r1, r5
 80083f8:	4630      	mov	r0, r6
 80083fa:	f7ff ffbf 	bl	800837c <sbrk_aligned>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	4604      	mov	r4, r0
 8008402:	d158      	bne.n	80084b6 <_malloc_r+0xf6>
 8008404:	f8d8 4000 	ldr.w	r4, [r8]
 8008408:	4627      	mov	r7, r4
 800840a:	2f00      	cmp	r7, #0
 800840c:	d143      	bne.n	8008496 <_malloc_r+0xd6>
 800840e:	2c00      	cmp	r4, #0
 8008410:	d04b      	beq.n	80084aa <_malloc_r+0xea>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	4639      	mov	r1, r7
 8008416:	4630      	mov	r0, r6
 8008418:	eb04 0903 	add.w	r9, r4, r3
 800841c:	f000 fb5c 	bl	8008ad8 <_sbrk_r>
 8008420:	4581      	cmp	r9, r0
 8008422:	d142      	bne.n	80084aa <_malloc_r+0xea>
 8008424:	6821      	ldr	r1, [r4, #0]
 8008426:	1a6d      	subs	r5, r5, r1
 8008428:	4629      	mov	r1, r5
 800842a:	4630      	mov	r0, r6
 800842c:	f7ff ffa6 	bl	800837c <sbrk_aligned>
 8008430:	3001      	adds	r0, #1
 8008432:	d03a      	beq.n	80084aa <_malloc_r+0xea>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	442b      	add	r3, r5
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	f8d8 3000 	ldr.w	r3, [r8]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	bb62      	cbnz	r2, 800849c <_malloc_r+0xdc>
 8008442:	f8c8 7000 	str.w	r7, [r8]
 8008446:	e00f      	b.n	8008468 <_malloc_r+0xa8>
 8008448:	6822      	ldr	r2, [r4, #0]
 800844a:	1b52      	subs	r2, r2, r5
 800844c:	d420      	bmi.n	8008490 <_malloc_r+0xd0>
 800844e:	2a0b      	cmp	r2, #11
 8008450:	d917      	bls.n	8008482 <_malloc_r+0xc2>
 8008452:	1961      	adds	r1, r4, r5
 8008454:	42a3      	cmp	r3, r4
 8008456:	6025      	str	r5, [r4, #0]
 8008458:	bf18      	it	ne
 800845a:	6059      	strne	r1, [r3, #4]
 800845c:	6863      	ldr	r3, [r4, #4]
 800845e:	bf08      	it	eq
 8008460:	f8c8 1000 	streq.w	r1, [r8]
 8008464:	5162      	str	r2, [r4, r5]
 8008466:	604b      	str	r3, [r1, #4]
 8008468:	4630      	mov	r0, r6
 800846a:	f000 f82f 	bl	80084cc <__malloc_unlock>
 800846e:	f104 000b 	add.w	r0, r4, #11
 8008472:	1d23      	adds	r3, r4, #4
 8008474:	f020 0007 	bic.w	r0, r0, #7
 8008478:	1ac2      	subs	r2, r0, r3
 800847a:	bf1c      	itt	ne
 800847c:	1a1b      	subne	r3, r3, r0
 800847e:	50a3      	strne	r3, [r4, r2]
 8008480:	e7af      	b.n	80083e2 <_malloc_r+0x22>
 8008482:	6862      	ldr	r2, [r4, #4]
 8008484:	42a3      	cmp	r3, r4
 8008486:	bf0c      	ite	eq
 8008488:	f8c8 2000 	streq.w	r2, [r8]
 800848c:	605a      	strne	r2, [r3, #4]
 800848e:	e7eb      	b.n	8008468 <_malloc_r+0xa8>
 8008490:	4623      	mov	r3, r4
 8008492:	6864      	ldr	r4, [r4, #4]
 8008494:	e7ae      	b.n	80083f4 <_malloc_r+0x34>
 8008496:	463c      	mov	r4, r7
 8008498:	687f      	ldr	r7, [r7, #4]
 800849a:	e7b6      	b.n	800840a <_malloc_r+0x4a>
 800849c:	461a      	mov	r2, r3
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	d1fb      	bne.n	800849c <_malloc_r+0xdc>
 80084a4:	2300      	movs	r3, #0
 80084a6:	6053      	str	r3, [r2, #4]
 80084a8:	e7de      	b.n	8008468 <_malloc_r+0xa8>
 80084aa:	230c      	movs	r3, #12
 80084ac:	6033      	str	r3, [r6, #0]
 80084ae:	4630      	mov	r0, r6
 80084b0:	f000 f80c 	bl	80084cc <__malloc_unlock>
 80084b4:	e794      	b.n	80083e0 <_malloc_r+0x20>
 80084b6:	6005      	str	r5, [r0, #0]
 80084b8:	e7d6      	b.n	8008468 <_malloc_r+0xa8>
 80084ba:	bf00      	nop
 80084bc:	200013b4 	.word	0x200013b4

080084c0 <__malloc_lock>:
 80084c0:	4801      	ldr	r0, [pc, #4]	@ (80084c8 <__malloc_lock+0x8>)
 80084c2:	f7ff bf0f 	b.w	80082e4 <__retarget_lock_acquire_recursive>
 80084c6:	bf00      	nop
 80084c8:	200013ac 	.word	0x200013ac

080084cc <__malloc_unlock>:
 80084cc:	4801      	ldr	r0, [pc, #4]	@ (80084d4 <__malloc_unlock+0x8>)
 80084ce:	f7ff bf0a 	b.w	80082e6 <__retarget_lock_release_recursive>
 80084d2:	bf00      	nop
 80084d4:	200013ac 	.word	0x200013ac

080084d8 <__ssputs_r>:
 80084d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084dc:	688e      	ldr	r6, [r1, #8]
 80084de:	461f      	mov	r7, r3
 80084e0:	42be      	cmp	r6, r7
 80084e2:	680b      	ldr	r3, [r1, #0]
 80084e4:	4682      	mov	sl, r0
 80084e6:	460c      	mov	r4, r1
 80084e8:	4690      	mov	r8, r2
 80084ea:	d82d      	bhi.n	8008548 <__ssputs_r+0x70>
 80084ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084f4:	d026      	beq.n	8008544 <__ssputs_r+0x6c>
 80084f6:	6965      	ldr	r5, [r4, #20]
 80084f8:	6909      	ldr	r1, [r1, #16]
 80084fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084fe:	eba3 0901 	sub.w	r9, r3, r1
 8008502:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008506:	1c7b      	adds	r3, r7, #1
 8008508:	444b      	add	r3, r9
 800850a:	106d      	asrs	r5, r5, #1
 800850c:	429d      	cmp	r5, r3
 800850e:	bf38      	it	cc
 8008510:	461d      	movcc	r5, r3
 8008512:	0553      	lsls	r3, r2, #21
 8008514:	d527      	bpl.n	8008566 <__ssputs_r+0x8e>
 8008516:	4629      	mov	r1, r5
 8008518:	f7ff ff52 	bl	80083c0 <_malloc_r>
 800851c:	4606      	mov	r6, r0
 800851e:	b360      	cbz	r0, 800857a <__ssputs_r+0xa2>
 8008520:	6921      	ldr	r1, [r4, #16]
 8008522:	464a      	mov	r2, r9
 8008524:	f000 fae8 	bl	8008af8 <memcpy>
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800852e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	6126      	str	r6, [r4, #16]
 8008536:	6165      	str	r5, [r4, #20]
 8008538:	444e      	add	r6, r9
 800853a:	eba5 0509 	sub.w	r5, r5, r9
 800853e:	6026      	str	r6, [r4, #0]
 8008540:	60a5      	str	r5, [r4, #8]
 8008542:	463e      	mov	r6, r7
 8008544:	42be      	cmp	r6, r7
 8008546:	d900      	bls.n	800854a <__ssputs_r+0x72>
 8008548:	463e      	mov	r6, r7
 800854a:	6820      	ldr	r0, [r4, #0]
 800854c:	4632      	mov	r2, r6
 800854e:	4641      	mov	r1, r8
 8008550:	f000 faa8 	bl	8008aa4 <memmove>
 8008554:	68a3      	ldr	r3, [r4, #8]
 8008556:	1b9b      	subs	r3, r3, r6
 8008558:	60a3      	str	r3, [r4, #8]
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	4433      	add	r3, r6
 800855e:	6023      	str	r3, [r4, #0]
 8008560:	2000      	movs	r0, #0
 8008562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008566:	462a      	mov	r2, r5
 8008568:	f000 fad4 	bl	8008b14 <_realloc_r>
 800856c:	4606      	mov	r6, r0
 800856e:	2800      	cmp	r0, #0
 8008570:	d1e0      	bne.n	8008534 <__ssputs_r+0x5c>
 8008572:	6921      	ldr	r1, [r4, #16]
 8008574:	4650      	mov	r0, sl
 8008576:	f7ff feb7 	bl	80082e8 <_free_r>
 800857a:	230c      	movs	r3, #12
 800857c:	f8ca 3000 	str.w	r3, [sl]
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008586:	81a3      	strh	r3, [r4, #12]
 8008588:	f04f 30ff 	mov.w	r0, #4294967295
 800858c:	e7e9      	b.n	8008562 <__ssputs_r+0x8a>
	...

08008590 <_svfiprintf_r>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	4698      	mov	r8, r3
 8008596:	898b      	ldrh	r3, [r1, #12]
 8008598:	061b      	lsls	r3, r3, #24
 800859a:	b09d      	sub	sp, #116	@ 0x74
 800859c:	4607      	mov	r7, r0
 800859e:	460d      	mov	r5, r1
 80085a0:	4614      	mov	r4, r2
 80085a2:	d510      	bpl.n	80085c6 <_svfiprintf_r+0x36>
 80085a4:	690b      	ldr	r3, [r1, #16]
 80085a6:	b973      	cbnz	r3, 80085c6 <_svfiprintf_r+0x36>
 80085a8:	2140      	movs	r1, #64	@ 0x40
 80085aa:	f7ff ff09 	bl	80083c0 <_malloc_r>
 80085ae:	6028      	str	r0, [r5, #0]
 80085b0:	6128      	str	r0, [r5, #16]
 80085b2:	b930      	cbnz	r0, 80085c2 <_svfiprintf_r+0x32>
 80085b4:	230c      	movs	r3, #12
 80085b6:	603b      	str	r3, [r7, #0]
 80085b8:	f04f 30ff 	mov.w	r0, #4294967295
 80085bc:	b01d      	add	sp, #116	@ 0x74
 80085be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c2:	2340      	movs	r3, #64	@ 0x40
 80085c4:	616b      	str	r3, [r5, #20]
 80085c6:	2300      	movs	r3, #0
 80085c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ca:	2320      	movs	r3, #32
 80085cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80085d4:	2330      	movs	r3, #48	@ 0x30
 80085d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008774 <_svfiprintf_r+0x1e4>
 80085da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085de:	f04f 0901 	mov.w	r9, #1
 80085e2:	4623      	mov	r3, r4
 80085e4:	469a      	mov	sl, r3
 80085e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ea:	b10a      	cbz	r2, 80085f0 <_svfiprintf_r+0x60>
 80085ec:	2a25      	cmp	r2, #37	@ 0x25
 80085ee:	d1f9      	bne.n	80085e4 <_svfiprintf_r+0x54>
 80085f0:	ebba 0b04 	subs.w	fp, sl, r4
 80085f4:	d00b      	beq.n	800860e <_svfiprintf_r+0x7e>
 80085f6:	465b      	mov	r3, fp
 80085f8:	4622      	mov	r2, r4
 80085fa:	4629      	mov	r1, r5
 80085fc:	4638      	mov	r0, r7
 80085fe:	f7ff ff6b 	bl	80084d8 <__ssputs_r>
 8008602:	3001      	adds	r0, #1
 8008604:	f000 80a7 	beq.w	8008756 <_svfiprintf_r+0x1c6>
 8008608:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800860a:	445a      	add	r2, fp
 800860c:	9209      	str	r2, [sp, #36]	@ 0x24
 800860e:	f89a 3000 	ldrb.w	r3, [sl]
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 809f 	beq.w	8008756 <_svfiprintf_r+0x1c6>
 8008618:	2300      	movs	r3, #0
 800861a:	f04f 32ff 	mov.w	r2, #4294967295
 800861e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008622:	f10a 0a01 	add.w	sl, sl, #1
 8008626:	9304      	str	r3, [sp, #16]
 8008628:	9307      	str	r3, [sp, #28]
 800862a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800862e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008630:	4654      	mov	r4, sl
 8008632:	2205      	movs	r2, #5
 8008634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008638:	484e      	ldr	r0, [pc, #312]	@ (8008774 <_svfiprintf_r+0x1e4>)
 800863a:	f7f7 fe09 	bl	8000250 <memchr>
 800863e:	9a04      	ldr	r2, [sp, #16]
 8008640:	b9d8      	cbnz	r0, 800867a <_svfiprintf_r+0xea>
 8008642:	06d0      	lsls	r0, r2, #27
 8008644:	bf44      	itt	mi
 8008646:	2320      	movmi	r3, #32
 8008648:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800864c:	0711      	lsls	r1, r2, #28
 800864e:	bf44      	itt	mi
 8008650:	232b      	movmi	r3, #43	@ 0x2b
 8008652:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008656:	f89a 3000 	ldrb.w	r3, [sl]
 800865a:	2b2a      	cmp	r3, #42	@ 0x2a
 800865c:	d015      	beq.n	800868a <_svfiprintf_r+0xfa>
 800865e:	9a07      	ldr	r2, [sp, #28]
 8008660:	4654      	mov	r4, sl
 8008662:	2000      	movs	r0, #0
 8008664:	f04f 0c0a 	mov.w	ip, #10
 8008668:	4621      	mov	r1, r4
 800866a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800866e:	3b30      	subs	r3, #48	@ 0x30
 8008670:	2b09      	cmp	r3, #9
 8008672:	d94b      	bls.n	800870c <_svfiprintf_r+0x17c>
 8008674:	b1b0      	cbz	r0, 80086a4 <_svfiprintf_r+0x114>
 8008676:	9207      	str	r2, [sp, #28]
 8008678:	e014      	b.n	80086a4 <_svfiprintf_r+0x114>
 800867a:	eba0 0308 	sub.w	r3, r0, r8
 800867e:	fa09 f303 	lsl.w	r3, r9, r3
 8008682:	4313      	orrs	r3, r2
 8008684:	9304      	str	r3, [sp, #16]
 8008686:	46a2      	mov	sl, r4
 8008688:	e7d2      	b.n	8008630 <_svfiprintf_r+0xa0>
 800868a:	9b03      	ldr	r3, [sp, #12]
 800868c:	1d19      	adds	r1, r3, #4
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	9103      	str	r1, [sp, #12]
 8008692:	2b00      	cmp	r3, #0
 8008694:	bfbb      	ittet	lt
 8008696:	425b      	neglt	r3, r3
 8008698:	f042 0202 	orrlt.w	r2, r2, #2
 800869c:	9307      	strge	r3, [sp, #28]
 800869e:	9307      	strlt	r3, [sp, #28]
 80086a0:	bfb8      	it	lt
 80086a2:	9204      	strlt	r2, [sp, #16]
 80086a4:	7823      	ldrb	r3, [r4, #0]
 80086a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80086a8:	d10a      	bne.n	80086c0 <_svfiprintf_r+0x130>
 80086aa:	7863      	ldrb	r3, [r4, #1]
 80086ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80086ae:	d132      	bne.n	8008716 <_svfiprintf_r+0x186>
 80086b0:	9b03      	ldr	r3, [sp, #12]
 80086b2:	1d1a      	adds	r2, r3, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	9203      	str	r2, [sp, #12]
 80086b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086bc:	3402      	adds	r4, #2
 80086be:	9305      	str	r3, [sp, #20]
 80086c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008784 <_svfiprintf_r+0x1f4>
 80086c4:	7821      	ldrb	r1, [r4, #0]
 80086c6:	2203      	movs	r2, #3
 80086c8:	4650      	mov	r0, sl
 80086ca:	f7f7 fdc1 	bl	8000250 <memchr>
 80086ce:	b138      	cbz	r0, 80086e0 <_svfiprintf_r+0x150>
 80086d0:	9b04      	ldr	r3, [sp, #16]
 80086d2:	eba0 000a 	sub.w	r0, r0, sl
 80086d6:	2240      	movs	r2, #64	@ 0x40
 80086d8:	4082      	lsls	r2, r0
 80086da:	4313      	orrs	r3, r2
 80086dc:	3401      	adds	r4, #1
 80086de:	9304      	str	r3, [sp, #16]
 80086e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e4:	4824      	ldr	r0, [pc, #144]	@ (8008778 <_svfiprintf_r+0x1e8>)
 80086e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086ea:	2206      	movs	r2, #6
 80086ec:	f7f7 fdb0 	bl	8000250 <memchr>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d036      	beq.n	8008762 <_svfiprintf_r+0x1d2>
 80086f4:	4b21      	ldr	r3, [pc, #132]	@ (800877c <_svfiprintf_r+0x1ec>)
 80086f6:	bb1b      	cbnz	r3, 8008740 <_svfiprintf_r+0x1b0>
 80086f8:	9b03      	ldr	r3, [sp, #12]
 80086fa:	3307      	adds	r3, #7
 80086fc:	f023 0307 	bic.w	r3, r3, #7
 8008700:	3308      	adds	r3, #8
 8008702:	9303      	str	r3, [sp, #12]
 8008704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008706:	4433      	add	r3, r6
 8008708:	9309      	str	r3, [sp, #36]	@ 0x24
 800870a:	e76a      	b.n	80085e2 <_svfiprintf_r+0x52>
 800870c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008710:	460c      	mov	r4, r1
 8008712:	2001      	movs	r0, #1
 8008714:	e7a8      	b.n	8008668 <_svfiprintf_r+0xd8>
 8008716:	2300      	movs	r3, #0
 8008718:	3401      	adds	r4, #1
 800871a:	9305      	str	r3, [sp, #20]
 800871c:	4619      	mov	r1, r3
 800871e:	f04f 0c0a 	mov.w	ip, #10
 8008722:	4620      	mov	r0, r4
 8008724:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008728:	3a30      	subs	r2, #48	@ 0x30
 800872a:	2a09      	cmp	r2, #9
 800872c:	d903      	bls.n	8008736 <_svfiprintf_r+0x1a6>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0c6      	beq.n	80086c0 <_svfiprintf_r+0x130>
 8008732:	9105      	str	r1, [sp, #20]
 8008734:	e7c4      	b.n	80086c0 <_svfiprintf_r+0x130>
 8008736:	fb0c 2101 	mla	r1, ip, r1, r2
 800873a:	4604      	mov	r4, r0
 800873c:	2301      	movs	r3, #1
 800873e:	e7f0      	b.n	8008722 <_svfiprintf_r+0x192>
 8008740:	ab03      	add	r3, sp, #12
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	462a      	mov	r2, r5
 8008746:	4b0e      	ldr	r3, [pc, #56]	@ (8008780 <_svfiprintf_r+0x1f0>)
 8008748:	a904      	add	r1, sp, #16
 800874a:	4638      	mov	r0, r7
 800874c:	f3af 8000 	nop.w
 8008750:	1c42      	adds	r2, r0, #1
 8008752:	4606      	mov	r6, r0
 8008754:	d1d6      	bne.n	8008704 <_svfiprintf_r+0x174>
 8008756:	89ab      	ldrh	r3, [r5, #12]
 8008758:	065b      	lsls	r3, r3, #25
 800875a:	f53f af2d 	bmi.w	80085b8 <_svfiprintf_r+0x28>
 800875e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008760:	e72c      	b.n	80085bc <_svfiprintf_r+0x2c>
 8008762:	ab03      	add	r3, sp, #12
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	462a      	mov	r2, r5
 8008768:	4b05      	ldr	r3, [pc, #20]	@ (8008780 <_svfiprintf_r+0x1f0>)
 800876a:	a904      	add	r1, sp, #16
 800876c:	4638      	mov	r0, r7
 800876e:	f000 f879 	bl	8008864 <_printf_i>
 8008772:	e7ed      	b.n	8008750 <_svfiprintf_r+0x1c0>
 8008774:	08008de0 	.word	0x08008de0
 8008778:	08008dea 	.word	0x08008dea
 800877c:	00000000 	.word	0x00000000
 8008780:	080084d9 	.word	0x080084d9
 8008784:	08008de6 	.word	0x08008de6

08008788 <_printf_common>:
 8008788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800878c:	4616      	mov	r6, r2
 800878e:	4698      	mov	r8, r3
 8008790:	688a      	ldr	r2, [r1, #8]
 8008792:	690b      	ldr	r3, [r1, #16]
 8008794:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008798:	4293      	cmp	r3, r2
 800879a:	bfb8      	it	lt
 800879c:	4613      	movlt	r3, r2
 800879e:	6033      	str	r3, [r6, #0]
 80087a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087a4:	4607      	mov	r7, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	b10a      	cbz	r2, 80087ae <_printf_common+0x26>
 80087aa:	3301      	adds	r3, #1
 80087ac:	6033      	str	r3, [r6, #0]
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	0699      	lsls	r1, r3, #26
 80087b2:	bf42      	ittt	mi
 80087b4:	6833      	ldrmi	r3, [r6, #0]
 80087b6:	3302      	addmi	r3, #2
 80087b8:	6033      	strmi	r3, [r6, #0]
 80087ba:	6825      	ldr	r5, [r4, #0]
 80087bc:	f015 0506 	ands.w	r5, r5, #6
 80087c0:	d106      	bne.n	80087d0 <_printf_common+0x48>
 80087c2:	f104 0a19 	add.w	sl, r4, #25
 80087c6:	68e3      	ldr	r3, [r4, #12]
 80087c8:	6832      	ldr	r2, [r6, #0]
 80087ca:	1a9b      	subs	r3, r3, r2
 80087cc:	42ab      	cmp	r3, r5
 80087ce:	dc26      	bgt.n	800881e <_printf_common+0x96>
 80087d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087d4:	6822      	ldr	r2, [r4, #0]
 80087d6:	3b00      	subs	r3, #0
 80087d8:	bf18      	it	ne
 80087da:	2301      	movne	r3, #1
 80087dc:	0692      	lsls	r2, r2, #26
 80087de:	d42b      	bmi.n	8008838 <_printf_common+0xb0>
 80087e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087e4:	4641      	mov	r1, r8
 80087e6:	4638      	mov	r0, r7
 80087e8:	47c8      	blx	r9
 80087ea:	3001      	adds	r0, #1
 80087ec:	d01e      	beq.n	800882c <_printf_common+0xa4>
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	6922      	ldr	r2, [r4, #16]
 80087f2:	f003 0306 	and.w	r3, r3, #6
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	bf02      	ittt	eq
 80087fa:	68e5      	ldreq	r5, [r4, #12]
 80087fc:	6833      	ldreq	r3, [r6, #0]
 80087fe:	1aed      	subeq	r5, r5, r3
 8008800:	68a3      	ldr	r3, [r4, #8]
 8008802:	bf0c      	ite	eq
 8008804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008808:	2500      	movne	r5, #0
 800880a:	4293      	cmp	r3, r2
 800880c:	bfc4      	itt	gt
 800880e:	1a9b      	subgt	r3, r3, r2
 8008810:	18ed      	addgt	r5, r5, r3
 8008812:	2600      	movs	r6, #0
 8008814:	341a      	adds	r4, #26
 8008816:	42b5      	cmp	r5, r6
 8008818:	d11a      	bne.n	8008850 <_printf_common+0xc8>
 800881a:	2000      	movs	r0, #0
 800881c:	e008      	b.n	8008830 <_printf_common+0xa8>
 800881e:	2301      	movs	r3, #1
 8008820:	4652      	mov	r2, sl
 8008822:	4641      	mov	r1, r8
 8008824:	4638      	mov	r0, r7
 8008826:	47c8      	blx	r9
 8008828:	3001      	adds	r0, #1
 800882a:	d103      	bne.n	8008834 <_printf_common+0xac>
 800882c:	f04f 30ff 	mov.w	r0, #4294967295
 8008830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008834:	3501      	adds	r5, #1
 8008836:	e7c6      	b.n	80087c6 <_printf_common+0x3e>
 8008838:	18e1      	adds	r1, r4, r3
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	2030      	movs	r0, #48	@ 0x30
 800883e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008842:	4422      	add	r2, r4
 8008844:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008848:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800884c:	3302      	adds	r3, #2
 800884e:	e7c7      	b.n	80087e0 <_printf_common+0x58>
 8008850:	2301      	movs	r3, #1
 8008852:	4622      	mov	r2, r4
 8008854:	4641      	mov	r1, r8
 8008856:	4638      	mov	r0, r7
 8008858:	47c8      	blx	r9
 800885a:	3001      	adds	r0, #1
 800885c:	d0e6      	beq.n	800882c <_printf_common+0xa4>
 800885e:	3601      	adds	r6, #1
 8008860:	e7d9      	b.n	8008816 <_printf_common+0x8e>
	...

08008864 <_printf_i>:
 8008864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008868:	7e0f      	ldrb	r7, [r1, #24]
 800886a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800886c:	2f78      	cmp	r7, #120	@ 0x78
 800886e:	4691      	mov	r9, r2
 8008870:	4680      	mov	r8, r0
 8008872:	460c      	mov	r4, r1
 8008874:	469a      	mov	sl, r3
 8008876:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800887a:	d807      	bhi.n	800888c <_printf_i+0x28>
 800887c:	2f62      	cmp	r7, #98	@ 0x62
 800887e:	d80a      	bhi.n	8008896 <_printf_i+0x32>
 8008880:	2f00      	cmp	r7, #0
 8008882:	f000 80d2 	beq.w	8008a2a <_printf_i+0x1c6>
 8008886:	2f58      	cmp	r7, #88	@ 0x58
 8008888:	f000 80b9 	beq.w	80089fe <_printf_i+0x19a>
 800888c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008890:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008894:	e03a      	b.n	800890c <_printf_i+0xa8>
 8008896:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800889a:	2b15      	cmp	r3, #21
 800889c:	d8f6      	bhi.n	800888c <_printf_i+0x28>
 800889e:	a101      	add	r1, pc, #4	@ (adr r1, 80088a4 <_printf_i+0x40>)
 80088a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088a4:	080088fd 	.word	0x080088fd
 80088a8:	08008911 	.word	0x08008911
 80088ac:	0800888d 	.word	0x0800888d
 80088b0:	0800888d 	.word	0x0800888d
 80088b4:	0800888d 	.word	0x0800888d
 80088b8:	0800888d 	.word	0x0800888d
 80088bc:	08008911 	.word	0x08008911
 80088c0:	0800888d 	.word	0x0800888d
 80088c4:	0800888d 	.word	0x0800888d
 80088c8:	0800888d 	.word	0x0800888d
 80088cc:	0800888d 	.word	0x0800888d
 80088d0:	08008a11 	.word	0x08008a11
 80088d4:	0800893b 	.word	0x0800893b
 80088d8:	080089cb 	.word	0x080089cb
 80088dc:	0800888d 	.word	0x0800888d
 80088e0:	0800888d 	.word	0x0800888d
 80088e4:	08008a33 	.word	0x08008a33
 80088e8:	0800888d 	.word	0x0800888d
 80088ec:	0800893b 	.word	0x0800893b
 80088f0:	0800888d 	.word	0x0800888d
 80088f4:	0800888d 	.word	0x0800888d
 80088f8:	080089d3 	.word	0x080089d3
 80088fc:	6833      	ldr	r3, [r6, #0]
 80088fe:	1d1a      	adds	r2, r3, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6032      	str	r2, [r6, #0]
 8008904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008908:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800890c:	2301      	movs	r3, #1
 800890e:	e09d      	b.n	8008a4c <_printf_i+0x1e8>
 8008910:	6833      	ldr	r3, [r6, #0]
 8008912:	6820      	ldr	r0, [r4, #0]
 8008914:	1d19      	adds	r1, r3, #4
 8008916:	6031      	str	r1, [r6, #0]
 8008918:	0606      	lsls	r6, r0, #24
 800891a:	d501      	bpl.n	8008920 <_printf_i+0xbc>
 800891c:	681d      	ldr	r5, [r3, #0]
 800891e:	e003      	b.n	8008928 <_printf_i+0xc4>
 8008920:	0645      	lsls	r5, r0, #25
 8008922:	d5fb      	bpl.n	800891c <_printf_i+0xb8>
 8008924:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008928:	2d00      	cmp	r5, #0
 800892a:	da03      	bge.n	8008934 <_printf_i+0xd0>
 800892c:	232d      	movs	r3, #45	@ 0x2d
 800892e:	426d      	negs	r5, r5
 8008930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008934:	4859      	ldr	r0, [pc, #356]	@ (8008a9c <_printf_i+0x238>)
 8008936:	230a      	movs	r3, #10
 8008938:	e011      	b.n	800895e <_printf_i+0xfa>
 800893a:	6821      	ldr	r1, [r4, #0]
 800893c:	6833      	ldr	r3, [r6, #0]
 800893e:	0608      	lsls	r0, r1, #24
 8008940:	f853 5b04 	ldr.w	r5, [r3], #4
 8008944:	d402      	bmi.n	800894c <_printf_i+0xe8>
 8008946:	0649      	lsls	r1, r1, #25
 8008948:	bf48      	it	mi
 800894a:	b2ad      	uxthmi	r5, r5
 800894c:	2f6f      	cmp	r7, #111	@ 0x6f
 800894e:	4853      	ldr	r0, [pc, #332]	@ (8008a9c <_printf_i+0x238>)
 8008950:	6033      	str	r3, [r6, #0]
 8008952:	bf14      	ite	ne
 8008954:	230a      	movne	r3, #10
 8008956:	2308      	moveq	r3, #8
 8008958:	2100      	movs	r1, #0
 800895a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800895e:	6866      	ldr	r6, [r4, #4]
 8008960:	60a6      	str	r6, [r4, #8]
 8008962:	2e00      	cmp	r6, #0
 8008964:	bfa2      	ittt	ge
 8008966:	6821      	ldrge	r1, [r4, #0]
 8008968:	f021 0104 	bicge.w	r1, r1, #4
 800896c:	6021      	strge	r1, [r4, #0]
 800896e:	b90d      	cbnz	r5, 8008974 <_printf_i+0x110>
 8008970:	2e00      	cmp	r6, #0
 8008972:	d04b      	beq.n	8008a0c <_printf_i+0x1a8>
 8008974:	4616      	mov	r6, r2
 8008976:	fbb5 f1f3 	udiv	r1, r5, r3
 800897a:	fb03 5711 	mls	r7, r3, r1, r5
 800897e:	5dc7      	ldrb	r7, [r0, r7]
 8008980:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008984:	462f      	mov	r7, r5
 8008986:	42bb      	cmp	r3, r7
 8008988:	460d      	mov	r5, r1
 800898a:	d9f4      	bls.n	8008976 <_printf_i+0x112>
 800898c:	2b08      	cmp	r3, #8
 800898e:	d10b      	bne.n	80089a8 <_printf_i+0x144>
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	07df      	lsls	r7, r3, #31
 8008994:	d508      	bpl.n	80089a8 <_printf_i+0x144>
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	6861      	ldr	r1, [r4, #4]
 800899a:	4299      	cmp	r1, r3
 800899c:	bfde      	ittt	le
 800899e:	2330      	movle	r3, #48	@ 0x30
 80089a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089a8:	1b92      	subs	r2, r2, r6
 80089aa:	6122      	str	r2, [r4, #16]
 80089ac:	f8cd a000 	str.w	sl, [sp]
 80089b0:	464b      	mov	r3, r9
 80089b2:	aa03      	add	r2, sp, #12
 80089b4:	4621      	mov	r1, r4
 80089b6:	4640      	mov	r0, r8
 80089b8:	f7ff fee6 	bl	8008788 <_printf_common>
 80089bc:	3001      	adds	r0, #1
 80089be:	d14a      	bne.n	8008a56 <_printf_i+0x1f2>
 80089c0:	f04f 30ff 	mov.w	r0, #4294967295
 80089c4:	b004      	add	sp, #16
 80089c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	f043 0320 	orr.w	r3, r3, #32
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	4833      	ldr	r0, [pc, #204]	@ (8008aa0 <_printf_i+0x23c>)
 80089d4:	2778      	movs	r7, #120	@ 0x78
 80089d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	6831      	ldr	r1, [r6, #0]
 80089de:	061f      	lsls	r7, r3, #24
 80089e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80089e4:	d402      	bmi.n	80089ec <_printf_i+0x188>
 80089e6:	065f      	lsls	r7, r3, #25
 80089e8:	bf48      	it	mi
 80089ea:	b2ad      	uxthmi	r5, r5
 80089ec:	6031      	str	r1, [r6, #0]
 80089ee:	07d9      	lsls	r1, r3, #31
 80089f0:	bf44      	itt	mi
 80089f2:	f043 0320 	orrmi.w	r3, r3, #32
 80089f6:	6023      	strmi	r3, [r4, #0]
 80089f8:	b11d      	cbz	r5, 8008a02 <_printf_i+0x19e>
 80089fa:	2310      	movs	r3, #16
 80089fc:	e7ac      	b.n	8008958 <_printf_i+0xf4>
 80089fe:	4827      	ldr	r0, [pc, #156]	@ (8008a9c <_printf_i+0x238>)
 8008a00:	e7e9      	b.n	80089d6 <_printf_i+0x172>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	f023 0320 	bic.w	r3, r3, #32
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	e7f6      	b.n	80089fa <_printf_i+0x196>
 8008a0c:	4616      	mov	r6, r2
 8008a0e:	e7bd      	b.n	800898c <_printf_i+0x128>
 8008a10:	6833      	ldr	r3, [r6, #0]
 8008a12:	6825      	ldr	r5, [r4, #0]
 8008a14:	6961      	ldr	r1, [r4, #20]
 8008a16:	1d18      	adds	r0, r3, #4
 8008a18:	6030      	str	r0, [r6, #0]
 8008a1a:	062e      	lsls	r6, r5, #24
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	d501      	bpl.n	8008a24 <_printf_i+0x1c0>
 8008a20:	6019      	str	r1, [r3, #0]
 8008a22:	e002      	b.n	8008a2a <_printf_i+0x1c6>
 8008a24:	0668      	lsls	r0, r5, #25
 8008a26:	d5fb      	bpl.n	8008a20 <_printf_i+0x1bc>
 8008a28:	8019      	strh	r1, [r3, #0]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6123      	str	r3, [r4, #16]
 8008a2e:	4616      	mov	r6, r2
 8008a30:	e7bc      	b.n	80089ac <_printf_i+0x148>
 8008a32:	6833      	ldr	r3, [r6, #0]
 8008a34:	1d1a      	adds	r2, r3, #4
 8008a36:	6032      	str	r2, [r6, #0]
 8008a38:	681e      	ldr	r6, [r3, #0]
 8008a3a:	6862      	ldr	r2, [r4, #4]
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f7f7 fc06 	bl	8000250 <memchr>
 8008a44:	b108      	cbz	r0, 8008a4a <_printf_i+0x1e6>
 8008a46:	1b80      	subs	r0, r0, r6
 8008a48:	6060      	str	r0, [r4, #4]
 8008a4a:	6863      	ldr	r3, [r4, #4]
 8008a4c:	6123      	str	r3, [r4, #16]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a54:	e7aa      	b.n	80089ac <_printf_i+0x148>
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	4632      	mov	r2, r6
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	4640      	mov	r0, r8
 8008a5e:	47d0      	blx	sl
 8008a60:	3001      	adds	r0, #1
 8008a62:	d0ad      	beq.n	80089c0 <_printf_i+0x15c>
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	079b      	lsls	r3, r3, #30
 8008a68:	d413      	bmi.n	8008a92 <_printf_i+0x22e>
 8008a6a:	68e0      	ldr	r0, [r4, #12]
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	4298      	cmp	r0, r3
 8008a70:	bfb8      	it	lt
 8008a72:	4618      	movlt	r0, r3
 8008a74:	e7a6      	b.n	80089c4 <_printf_i+0x160>
 8008a76:	2301      	movs	r3, #1
 8008a78:	4632      	mov	r2, r6
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	47d0      	blx	sl
 8008a80:	3001      	adds	r0, #1
 8008a82:	d09d      	beq.n	80089c0 <_printf_i+0x15c>
 8008a84:	3501      	adds	r5, #1
 8008a86:	68e3      	ldr	r3, [r4, #12]
 8008a88:	9903      	ldr	r1, [sp, #12]
 8008a8a:	1a5b      	subs	r3, r3, r1
 8008a8c:	42ab      	cmp	r3, r5
 8008a8e:	dcf2      	bgt.n	8008a76 <_printf_i+0x212>
 8008a90:	e7eb      	b.n	8008a6a <_printf_i+0x206>
 8008a92:	2500      	movs	r5, #0
 8008a94:	f104 0619 	add.w	r6, r4, #25
 8008a98:	e7f5      	b.n	8008a86 <_printf_i+0x222>
 8008a9a:	bf00      	nop
 8008a9c:	08008df1 	.word	0x08008df1
 8008aa0:	08008e02 	.word	0x08008e02

08008aa4 <memmove>:
 8008aa4:	4288      	cmp	r0, r1
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	eb01 0402 	add.w	r4, r1, r2
 8008aac:	d902      	bls.n	8008ab4 <memmove+0x10>
 8008aae:	4284      	cmp	r4, r0
 8008ab0:	4623      	mov	r3, r4
 8008ab2:	d807      	bhi.n	8008ac4 <memmove+0x20>
 8008ab4:	1e43      	subs	r3, r0, #1
 8008ab6:	42a1      	cmp	r1, r4
 8008ab8:	d008      	beq.n	8008acc <memmove+0x28>
 8008aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ac2:	e7f8      	b.n	8008ab6 <memmove+0x12>
 8008ac4:	4402      	add	r2, r0
 8008ac6:	4601      	mov	r1, r0
 8008ac8:	428a      	cmp	r2, r1
 8008aca:	d100      	bne.n	8008ace <memmove+0x2a>
 8008acc:	bd10      	pop	{r4, pc}
 8008ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ad6:	e7f7      	b.n	8008ac8 <memmove+0x24>

08008ad8 <_sbrk_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	4d06      	ldr	r5, [pc, #24]	@ (8008af4 <_sbrk_r+0x1c>)
 8008adc:	2300      	movs	r3, #0
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	602b      	str	r3, [r5, #0]
 8008ae4:	f7f9 fd8c 	bl	8002600 <_sbrk>
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	d102      	bne.n	8008af2 <_sbrk_r+0x1a>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	b103      	cbz	r3, 8008af2 <_sbrk_r+0x1a>
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	200013a8 	.word	0x200013a8

08008af8 <memcpy>:
 8008af8:	440a      	add	r2, r1
 8008afa:	4291      	cmp	r1, r2
 8008afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b00:	d100      	bne.n	8008b04 <memcpy+0xc>
 8008b02:	4770      	bx	lr
 8008b04:	b510      	push	{r4, lr}
 8008b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b0e:	4291      	cmp	r1, r2
 8008b10:	d1f9      	bne.n	8008b06 <memcpy+0xe>
 8008b12:	bd10      	pop	{r4, pc}

08008b14 <_realloc_r>:
 8008b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b18:	4680      	mov	r8, r0
 8008b1a:	4615      	mov	r5, r2
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	b921      	cbnz	r1, 8008b2a <_realloc_r+0x16>
 8008b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b24:	4611      	mov	r1, r2
 8008b26:	f7ff bc4b 	b.w	80083c0 <_malloc_r>
 8008b2a:	b92a      	cbnz	r2, 8008b38 <_realloc_r+0x24>
 8008b2c:	f7ff fbdc 	bl	80082e8 <_free_r>
 8008b30:	2400      	movs	r4, #0
 8008b32:	4620      	mov	r0, r4
 8008b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b38:	f000 f81a 	bl	8008b70 <_malloc_usable_size_r>
 8008b3c:	4285      	cmp	r5, r0
 8008b3e:	4606      	mov	r6, r0
 8008b40:	d802      	bhi.n	8008b48 <_realloc_r+0x34>
 8008b42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b46:	d8f4      	bhi.n	8008b32 <_realloc_r+0x1e>
 8008b48:	4629      	mov	r1, r5
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	f7ff fc38 	bl	80083c0 <_malloc_r>
 8008b50:	4607      	mov	r7, r0
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d0ec      	beq.n	8008b30 <_realloc_r+0x1c>
 8008b56:	42b5      	cmp	r5, r6
 8008b58:	462a      	mov	r2, r5
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	bf28      	it	cs
 8008b5e:	4632      	movcs	r2, r6
 8008b60:	f7ff ffca 	bl	8008af8 <memcpy>
 8008b64:	4621      	mov	r1, r4
 8008b66:	4640      	mov	r0, r8
 8008b68:	f7ff fbbe 	bl	80082e8 <_free_r>
 8008b6c:	463c      	mov	r4, r7
 8008b6e:	e7e0      	b.n	8008b32 <_realloc_r+0x1e>

08008b70 <_malloc_usable_size_r>:
 8008b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b74:	1f18      	subs	r0, r3, #4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bfbc      	itt	lt
 8008b7a:	580b      	ldrlt	r3, [r1, r0]
 8008b7c:	18c0      	addlt	r0, r0, r3
 8008b7e:	4770      	bx	lr

08008b80 <_init>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	bf00      	nop
 8008b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b86:	bc08      	pop	{r3}
 8008b88:	469e      	mov	lr, r3
 8008b8a:	4770      	bx	lr

08008b8c <_fini>:
 8008b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8e:	bf00      	nop
 8008b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b92:	bc08      	pop	{r3}
 8008b94:	469e      	mov	lr, r3
 8008b96:	4770      	bx	lr
