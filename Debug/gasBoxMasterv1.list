
gasBoxMasterv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089ec  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08008bcc  08008bcc  00009bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e74  08008e74  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  08008e74  08008e74  00009e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e7c  08008e7c  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e7c  08008e7c  00009e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e80  08008e80  00009e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08008e84  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001378  20000064  08008ee8  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013dc  08008ee8  0000a3dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a40  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cd2  00000000  00000000  00022ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  000267a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d4  00000000  00000000  00027ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000236a9  00000000  00000000  000290b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e53c  00000000  00000000  0004c75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcb02  00000000  00000000  0006ac99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014779b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006484  00000000  00000000  001477e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0014dc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008bb4 	.word	0x08008bb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08008bb4 	.word	0x08008bb4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <hw_sero_get>:


// Serviceroutine Hadware Get
// Prueft im wesentlichen auf Harwarefehlersignale
void hw_sero_get(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <hw_sero_set>:

// Serviceroutine Hadware Set
// Verwaltet die Heartbeat LED
void hw_sero_set(void)
{	if (ct_hbeat_null()==1)
 80005ee:	b580      	push	{r7, lr}
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	f002 f8fb 	bl	80027ec <ct_hbeat_null>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d109      	bne.n	8000610 <hw_sero_set+0x22>
	 { set_ct_hbeat(500);
 80005fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000600:	f002 f8e4 	bl	80027cc <set_ct_hbeat>
	 HAL_GPIO_TogglePin(UC_HEARTBEAT_GPIO_Port, UC_HEARTBEAT_Pin);
 8000604:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060c:	f004 f982 	bl	8004914 <HAL_GPIO_TogglePin>
	}
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <u_ok>:
void hw_set_error_out(uint8_t p)
{

}

uint8_t u_ok(GPIO_TypeDef *port, uint16_t pin) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
    GPIO_PinState s = HAL_GPIO_ReadPin(port, pin);
 8000620:	887b      	ldrh	r3, [r7, #2]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f004 f945 	bl	80048b4 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	73fb      	strb	r3, [r7, #15]
    return (s == GPIO_PIN_SET) ? 1u : 0u;
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d101      	bne.n	8000638 <u_ok+0x24>
 8000634:	2301      	movs	r3, #1
 8000636:	e000      	b.n	800063a <u_ok+0x26>
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <update_uok>:

uint8_t update_uok(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	uint8_t res1 = u_ok(UC__5VOK_GPIO_Port,UC__5VOK_Pin);
 800064a:	2110      	movs	r1, #16
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <update_uok+0x38>)
 800064e:	f7ff ffe1 	bl	8000614 <u_ok>
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	uint8_t res2 = u_ok(UC__12VOK_GPIO_Port,UC__12VOK_Pin);
 8000656:	2120      	movs	r1, #32
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <update_uok+0x38>)
 800065a:	f7ff ffdb 	bl	8000614 <u_ok>
 800065e:	4603      	mov	r3, r0
 8000660:	71bb      	strb	r3, [r7, #6]
	if((res1 && res2)){
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d004      	beq.n	8000672 <update_uok+0x2e>
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <update_uok+0x2e>
		return 1;
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <update_uok+0x30>
	}
	return 0;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	48000c00 	.word	0x48000c00

08000680 <readPumpWarning>:
                      set ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

// these two functions might just need a pulse

uint8_t readPumpWarning(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	GPIO_PinState s = HAL_GPIO_ReadPin(UC_PUMP_WARNING_GPIO_Port, UC_PUMP_WARNING_Pin);
 8000686:	2110      	movs	r1, #16
 8000688:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <readPumpWarning+0x28>)
 800068a:	f004 f913 	bl	80048b4 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	return (s == GPIO_PIN_SET) ? 1u : 0u;
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d101      	bne.n	800069c <readPumpWarning+0x1c>
 8000698:	2301      	movs	r3, #1
 800069a:	e000      	b.n	800069e <readPumpWarning+0x1e>
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	48001000 	.word	0x48001000

080006ac <readPumpAlarm>:

uint8_t readPumpAlarm(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
	GPIO_PinState s = HAL_GPIO_ReadPin(UC_PUMP_ALARM_GPIO_Port, UC_PUMP_ALARM_Pin);
 80006b2:	2120      	movs	r1, #32
 80006b4:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <readPumpAlarm+0x28>)
 80006b6:	f004 f8fd 	bl	80048b4 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	return (s == GPIO_PIN_SET) ? 1u : 0u;
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d101      	bne.n	80006c8 <readPumpAlarm+0x1c>
 80006c4:	2301      	movs	r3, #1
 80006c6:	e000      	b.n	80006ca <readPumpAlarm+0x1e>
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	48001000 	.word	0x48001000

080006d8 <delay_ms>:
	for(volatile uint32_t i=0; i<m; i++);				// volatile, damit nicht vom Compiler wegoptimiert
}

//Verz�gerung um n * 1ms
void delay_ms(uint16_t n)
{	HAL_Delay(n);
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fdff 	bl	80042e8 <HAL_Delay>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <gb_sero_get>:

//----- GASBOX CONTROLLER -------------------------------------------------

// Gasbox (UART4, binary)
void gb_sero_get(void)
{
 80006f4:	b598      	push	{r3, r4, r7, lr}
 80006f6:	af00      	add	r7, sp, #0
    nzeichen = 0;
 80006f8:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <gb_sero_get+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
    while ((rb_rx_used(&uart4_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 80006fe:	e00e      	b.n	800071e <gb_sero_get+0x2a>
        msg[nzeichen++] = (uint8_t)uartRB_Getc(&uart4_rb);
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <gb_sero_get+0x54>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	b2d1      	uxtb	r1, r2
 800070a:	4a0f      	ldr	r2, [pc, #60]	@ (8000748 <gb_sero_get+0x54>)
 800070c:	7011      	strb	r1, [r2, #0]
 800070e:	461c      	mov	r4, r3
 8000710:	480e      	ldr	r0, [pc, #56]	@ (800074c <gb_sero_get+0x58>)
 8000712:	f002 fa53 	bl	8002bbc <uartRB_Getc>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <gb_sero_get+0x5c>)
 800071c:	551a      	strb	r2, [r3, r4]
    while ((rb_rx_used(&uart4_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 800071e:	480b      	ldr	r0, [pc, #44]	@ (800074c <gb_sero_get+0x58>)
 8000720:	f002 f98b 	bl	8002a3a <rb_rx_used>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	dd04      	ble.n	8000734 <gb_sero_get+0x40>
 800072a:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <gb_sero_get+0x54>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b0d      	cmp	r3, #13
 8000732:	d9e5      	bls.n	8000700 <gb_sero_get+0xc>
    }
    if (nzeichen) parse_binary_gasbox();
 8000734:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <gb_sero_get+0x54>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <gb_sero_get+0x4e>
 800073e:	f000 f809 	bl	8000754 <parse_binary_gasbox>
}
 8000742:	bf00      	nop
 8000744:	bd98      	pop	{r3, r4, r7, pc}
 8000746:	bf00      	nop
 8000748:	2000008f 	.word	0x2000008f
 800074c:	20000940 	.word	0x20000940
 8000750:	20000080 	.word	0x20000080

08000754 <parse_binary_gasbox>:


// ---- parser  ----
static void parse_binary_gasbox(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
	uint8_t data;
	uint8_t ptr = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	73fb      	strb	r3, [r7, #15]

	do {
		switch (state) {
 800075e:	4b7a      	ldr	r3, [pc, #488]	@ (8000948 <parse_binary_gasbox+0x1f4>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b03      	cmp	r3, #3
 8000764:	f000 80a8 	beq.w	80008b8 <parse_binary_gasbox+0x164>
 8000768:	2b03      	cmp	r3, #3
 800076a:	f300 80e1 	bgt.w	8000930 <parse_binary_gasbox+0x1dc>
 800076e:	2b01      	cmp	r3, #1
 8000770:	d030      	beq.n	80007d4 <parse_binary_gasbox+0x80>
 8000772:	2b02      	cmp	r3, #2
 8000774:	f000 8098 	beq.w	80008a8 <parse_binary_gasbox+0x154>
 8000778:	e0da      	b.n	8000930 <parse_binary_gasbox+0x1dc>
		case RMT_WAIT_FOR_PAKET_START: {
			// scan for DLE 'S'
			while (ptr < nzeichen) {
				data = msg[ptr++];
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	73fa      	strb	r2, [r7, #15]
 8000780:	461a      	mov	r2, r3
 8000782:	4b72      	ldr	r3, [pc, #456]	@ (800094c <parse_binary_gasbox+0x1f8>)
 8000784:	5c9b      	ldrb	r3, [r3, r2]
 8000786:	717b      	strb	r3, [r7, #5]
				if (dleFlag) {
 8000788:	4b71      	ldr	r3, [pc, #452]	@ (8000950 <parse_binary_gasbox+0x1fc>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d01b      	beq.n	80007c8 <parse_binary_gasbox+0x74>
					// second control char after DLE
					if (data == GB_DLE) {
 8000790:	797b      	ldrb	r3, [r7, #5]
 8000792:	2b3d      	cmp	r3, #61	@ 0x3d
 8000794:	d103      	bne.n	800079e <parse_binary_gasbox+0x4a>
						// interpret as literal DLE
						dleFlag = 0;
 8000796:	4b6e      	ldr	r3, [pc, #440]	@ (8000950 <parse_binary_gasbox+0x1fc>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
 800079c:	e01a      	b.n	80007d4 <parse_binary_gasbox+0x80>
						// (no payload yet in WAIT state)
					} else if (data == GB_SOT) {
 800079e:	797b      	ldrb	r3, [r7, #5]
 80007a0:	2b53      	cmp	r3, #83	@ 0x53
 80007a2:	d10d      	bne.n	80007c0 <parse_binary_gasbox+0x6c>
						// start of frame
						lengthRx = 0;
 80007a4:	4b6b      	ldr	r3, [pc, #428]	@ (8000954 <parse_binary_gasbox+0x200>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
						checksum = 0;
 80007aa:	4b6b      	ldr	r3, [pc, #428]	@ (8000958 <parse_binary_gasbox+0x204>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 80007b0:	4b67      	ldr	r3, [pc, #412]	@ (8000950 <parse_binary_gasbox+0x1fc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
						state = RMT_READ_PAKET;
 80007b6:	4b64      	ldr	r3, [pc, #400]	@ (8000948 <parse_binary_gasbox+0x1f4>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	701a      	strb	r2, [r3, #0]
						break;
 80007bc:	bf00      	nop
					if (data == GB_DLE)
						dleFlag = 1;
				}
			}
		}
			break;
 80007be:	e0b7      	b.n	8000930 <parse_binary_gasbox+0x1dc>
						dleFlag = 0;
 80007c0:	4b63      	ldr	r3, [pc, #396]	@ (8000950 <parse_binary_gasbox+0x1fc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	e005      	b.n	80007d4 <parse_binary_gasbox+0x80>
					if (data == GB_DLE)
 80007c8:	797b      	ldrb	r3, [r7, #5]
 80007ca:	2b3d      	cmp	r3, #61	@ 0x3d
 80007cc:	d102      	bne.n	80007d4 <parse_binary_gasbox+0x80>
						dleFlag = 1;
 80007ce:	4b60      	ldr	r3, [pc, #384]	@ (8000950 <parse_binary_gasbox+0x1fc>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	701a      	strb	r2, [r3, #0]
			while (ptr < nzeichen) {
 80007d4:	4b61      	ldr	r3, [pc, #388]	@ (800095c <parse_binary_gasbox+0x208>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	7bfa      	ldrb	r2, [r7, #15]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d3cc      	bcc.n	800077a <parse_binary_gasbox+0x26>
			break;
 80007e0:	e0a6      	b.n	8000930 <parse_binary_gasbox+0x1dc>

		case RMT_READ_PAKET: {
			while (ptr < nzeichen) {
				data = msg[ptr++];
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	73fa      	strb	r2, [r7, #15]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b58      	ldr	r3, [pc, #352]	@ (800094c <parse_binary_gasbox+0x1f8>)
 80007ec:	5c9b      	ldrb	r3, [r3, r2]
 80007ee:	717b      	strb	r3, [r7, #5]

				// avoid runaway frames
				if (lengthRx > RMT_MAX_PAKET_LENGTH) {
 80007f0:	4b58      	ldr	r3, [pc, #352]	@ (8000954 <parse_binary_gasbox+0x200>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b0e      	cmp	r3, #14
 80007f6:	d906      	bls.n	8000806 <parse_binary_gasbox+0xb2>
					dleFlag = 0;
 80007f8:	4b55      	ldr	r3, [pc, #340]	@ (8000950 <parse_binary_gasbox+0x1fc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
					state = RMT_WAIT_FOR_PAKET_START;
 80007fe:	4b52      	ldr	r3, [pc, #328]	@ (8000948 <parse_binary_gasbox+0x1f4>)
 8000800:	2201      	movs	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
					break;
 8000804:	e057      	b.n	80008b6 <parse_binary_gasbox+0x162>
				}

				if (dleFlag) {
 8000806:	4b52      	ldr	r3, [pc, #328]	@ (8000950 <parse_binary_gasbox+0x1fc>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d034      	beq.n	8000878 <parse_binary_gasbox+0x124>
					if (data == GB_DLE) {
 800080e:	797b      	ldrb	r3, [r7, #5]
 8000810:	2b3d      	cmp	r3, #61	@ 0x3d
 8000812:	d113      	bne.n	800083c <parse_binary_gasbox+0xe8>
						// stuffed DLE as data
						dleFlag = 0;
 8000814:	4b4e      	ldr	r3, [pc, #312]	@ (8000950 <parse_binary_gasbox+0x1fc>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
						bufferRx[lengthRx++] = GB_DLE;
 800081a:	4b4e      	ldr	r3, [pc, #312]	@ (8000954 <parse_binary_gasbox+0x200>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	b2d1      	uxtb	r1, r2
 8000822:	4a4c      	ldr	r2, [pc, #304]	@ (8000954 <parse_binary_gasbox+0x200>)
 8000824:	7011      	strb	r1, [r2, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	4b4d      	ldr	r3, [pc, #308]	@ (8000960 <parse_binary_gasbox+0x20c>)
 800082a:	213d      	movs	r1, #61	@ 0x3d
 800082c:	5499      	strb	r1, [r3, r2]
						checksum += GB_DLE;
 800082e:	4b4a      	ldr	r3, [pc, #296]	@ (8000958 <parse_binary_gasbox+0x204>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	333d      	adds	r3, #61	@ 0x3d
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b48      	ldr	r3, [pc, #288]	@ (8000958 <parse_binary_gasbox+0x204>)
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e035      	b.n	80008a8 <parse_binary_gasbox+0x154>
					} else if (data == GB_SOT) {
 800083c:	797b      	ldrb	r3, [r7, #5]
 800083e:	2b53      	cmp	r3, #83	@ 0x53
 8000840:	d10c      	bne.n	800085c <parse_binary_gasbox+0x108>
						// unexpected new start → restart frame
						lengthRx = 0;
 8000842:	4b44      	ldr	r3, [pc, #272]	@ (8000954 <parse_binary_gasbox+0x200>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
						checksum = 0;
 8000848:	4b43      	ldr	r3, [pc, #268]	@ (8000958 <parse_binary_gasbox+0x204>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 800084e:	4b40      	ldr	r3, [pc, #256]	@ (8000950 <parse_binary_gasbox+0x1fc>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
						state = RMT_READ_PAKET;
 8000854:	4b3c      	ldr	r3, [pc, #240]	@ (8000948 <parse_binary_gasbox+0x1f4>)
 8000856:	2202      	movs	r2, #2
 8000858:	701a      	strb	r2, [r3, #0]
						break;
 800085a:	e02c      	b.n	80008b6 <parse_binary_gasbox+0x162>
					} else if (data == GB_EOT) {
 800085c:	797b      	ldrb	r3, [r7, #5]
 800085e:	2b45      	cmp	r3, #69	@ 0x45
 8000860:	d106      	bne.n	8000870 <parse_binary_gasbox+0x11c>
						// proper trailer -> parse
						state = RMT_PARSE_PAKET;
 8000862:	4b39      	ldr	r3, [pc, #228]	@ (8000948 <parse_binary_gasbox+0x1f4>)
 8000864:	2203      	movs	r2, #3
 8000866:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000868:	4b39      	ldr	r3, [pc, #228]	@ (8000950 <parse_binary_gasbox+0x1fc>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
						break;
 800086e:	e022      	b.n	80008b6 <parse_binary_gasbox+0x162>
					} else {
						dleFlag = 0; // unknown after DLE -> ignore
 8000870:	4b37      	ldr	r3, [pc, #220]	@ (8000950 <parse_binary_gasbox+0x1fc>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	e017      	b.n	80008a8 <parse_binary_gasbox+0x154>
					}
				} else {
					if (data == GB_DLE) {
 8000878:	797b      	ldrb	r3, [r7, #5]
 800087a:	2b3d      	cmp	r3, #61	@ 0x3d
 800087c:	d103      	bne.n	8000886 <parse_binary_gasbox+0x132>
						dleFlag = 1;            // next is control
 800087e:	4b34      	ldr	r3, [pc, #208]	@ (8000950 <parse_binary_gasbox+0x1fc>)
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
 8000884:	e010      	b.n	80008a8 <parse_binary_gasbox+0x154>
					} else {
						bufferRx[lengthRx++] = data;
 8000886:	4b33      	ldr	r3, [pc, #204]	@ (8000954 <parse_binary_gasbox+0x200>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	b2d1      	uxtb	r1, r2
 800088e:	4a31      	ldr	r2, [pc, #196]	@ (8000954 <parse_binary_gasbox+0x200>)
 8000890:	7011      	strb	r1, [r2, #0]
 8000892:	4619      	mov	r1, r3
 8000894:	4a32      	ldr	r2, [pc, #200]	@ (8000960 <parse_binary_gasbox+0x20c>)
 8000896:	797b      	ldrb	r3, [r7, #5]
 8000898:	5453      	strb	r3, [r2, r1]
						checksum += data;
 800089a:	4b2f      	ldr	r3, [pc, #188]	@ (8000958 <parse_binary_gasbox+0x204>)
 800089c:	781a      	ldrb	r2, [r3, #0]
 800089e:	797b      	ldrb	r3, [r7, #5]
 80008a0:	4413      	add	r3, r2
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000958 <parse_binary_gasbox+0x204>)
 80008a6:	701a      	strb	r2, [r3, #0]
			while (ptr < nzeichen) {
 80008a8:	4b2c      	ldr	r3, [pc, #176]	@ (800095c <parse_binary_gasbox+0x208>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	7bfa      	ldrb	r2, [r7, #15]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d396      	bcc.n	80007e2 <parse_binary_gasbox+0x8e>
					}
				}
			}
		}
			break;
 80008b4:	e03c      	b.n	8000930 <parse_binary_gasbox+0x1dc>
 80008b6:	e03b      	b.n	8000930 <parse_binary_gasbox+0x1dc>

		case RMT_PARSE_PAKET: {
		    // Expect 4 payload bytes + 1 checksum (net length 5)
		    if (lengthRx == 5) {
 80008b8:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <parse_binary_gasbox+0x200>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b05      	cmp	r3, #5
 80008be:	d12a      	bne.n	8000916 <parse_binary_gasbox+0x1c2>
		        uint8_t cmd    = bufferRx[0];
 80008c0:	4b27      	ldr	r3, [pc, #156]	@ (8000960 <parse_binary_gasbox+0x20c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	73bb      	strb	r3, [r7, #14]
		        uint8_t status = bufferRx[1];
 80008c6:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <parse_binary_gasbox+0x20c>)
 80008c8:	785b      	ldrb	r3, [r3, #1]
 80008ca:	737b      	strb	r3, [r7, #13]
		        uint8_t pH     = bufferRx[2];
 80008cc:	4b24      	ldr	r3, [pc, #144]	@ (8000960 <parse_binary_gasbox+0x20c>)
 80008ce:	789b      	ldrb	r3, [r3, #2]
 80008d0:	733b      	strb	r3, [r7, #12]
		        uint8_t pL     = bufferRx[3];
 80008d2:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <parse_binary_gasbox+0x20c>)
 80008d4:	78db      	ldrb	r3, [r3, #3]
 80008d6:	72fb      	strb	r3, [r7, #11]
		        uint8_t cks    = bufferRx[4];
 80008d8:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <parse_binary_gasbox+0x20c>)
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	72bb      	strb	r3, [r7, #10]

		        // checksum over the 4 payload bytes
		        uint8_t sum = (uint8_t)(cmd + status + pH + pL);
 80008de:	7bba      	ldrb	r2, [r7, #14]
 80008e0:	7b7b      	ldrb	r3, [r7, #13]
 80008e2:	4413      	add	r3, r2
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	7b3b      	ldrb	r3, [r7, #12]
 80008e8:	4413      	add	r3, r2
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	4413      	add	r3, r2
 80008f0:	727b      	strb	r3, [r7, #9]

		        if (sum == cks) {
 80008f2:	7a7a      	ldrb	r2, [r7, #9]
 80008f4:	7abb      	ldrb	r3, [r7, #10]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d10d      	bne.n	8000916 <parse_binary_gasbox+0x1c2>
		            uint16_t val = ((uint16_t)pH << 8) | pL;
 80008fa:	7b3b      	ldrb	r3, [r7, #12]
 80008fc:	021b      	lsls	r3, r3, #8
 80008fe:	b21a      	sxth	r2, r3
 8000900:	7afb      	ldrb	r3, [r7, #11]
 8000902:	b21b      	sxth	r3, r3
 8000904:	4313      	orrs	r3, r2
 8000906:	b21b      	sxth	r3, r3
 8000908:	80fb      	strh	r3, [r7, #6]
		            // Publish to mailbox: if someone is waiting for this cmd, wake them.
		            gb_on_frame(cmd, status, val);
 800090a:	88fa      	ldrh	r2, [r7, #6]
 800090c:	7b79      	ldrb	r1, [r7, #13]
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f827 	bl	8000964 <gb_on_frame>
		        }
		        // else: bad checksum -> drop silently (or raise an error flag if you want)
		    }
		    // reset for next frame
		    state     = RMT_WAIT_FOR_PAKET_START;
 8000916:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <parse_binary_gasbox+0x1f4>)
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
		    lengthRx  = 0;
 800091c:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <parse_binary_gasbox+0x200>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
		    checksum  = 0;
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <parse_binary_gasbox+0x204>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
		    dleFlag   = 0;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <parse_binary_gasbox+0x1fc>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
		} break;
 800092e:	bf00      	nop
		}
	} while (ptr < nzeichen);
 8000930:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <parse_binary_gasbox+0x208>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	7bfa      	ldrb	r2, [r7, #15]
 8000938:	429a      	cmp	r2, r3
 800093a:	f4ff af10 	bcc.w	800075e <parse_binary_gasbox+0xa>
}
 800093e:	bf00      	nop
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	20000080 	.word	0x20000080
 8000950:	200000a0 	.word	0x200000a0
 8000954:	2000009f 	.word	0x2000009f
 8000958:	200000a1 	.word	0x200000a1
 800095c:	2000008f 	.word	0x2000008f
 8000960:	20000090 	.word	0x20000090

08000964 <gb_on_frame>:
    volatile uint8_t have;
    GbReply          r;
} gb_sync = {0};

void gb_on_frame(uint8_t cmd, uint8_t status, uint16_t value)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	460b      	mov	r3, r1
 8000970:	71bb      	strb	r3, [r7, #6]
 8000972:	4613      	mov	r3, r2
 8000974:	80bb      	strh	r3, [r7, #4]
    // deliver to a waiting xfer if it matches the command we sent
    if (gb_sync.waiting && gb_sync.expect_cmd == cmd) {
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <gb_on_frame+0x54>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d015      	beq.n	80009ac <gb_on_frame+0x48>
 8000980:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <gb_on_frame+0x54>)
 8000982:	785b      	ldrb	r3, [r3, #1]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	79fa      	ldrb	r2, [r7, #7]
 8000988:	429a      	cmp	r2, r3
 800098a:	d10f      	bne.n	80009ac <gb_on_frame+0x48>
        gb_sync.r.cmd = cmd; gb_sync.r.status = status; gb_sync.r.value = value;
 800098c:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <gb_on_frame+0x54>)
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	7113      	strb	r3, [r2, #4]
 8000992:	4a09      	ldr	r2, [pc, #36]	@ (80009b8 <gb_on_frame+0x54>)
 8000994:	79bb      	ldrb	r3, [r7, #6]
 8000996:	7153      	strb	r3, [r2, #5]
 8000998:	4a07      	ldr	r2, [pc, #28]	@ (80009b8 <gb_on_frame+0x54>)
 800099a:	88bb      	ldrh	r3, [r7, #4]
 800099c:	80d3      	strh	r3, [r2, #6]
        gb_sync.have = 1;
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <gb_on_frame+0x54>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	709a      	strb	r2, [r3, #2]
        gb_sync.waiting = 0;
 80009a4:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <gb_on_frame+0x54>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
        return;
 80009aa:	bf00      	nop
    }
    // else: unsolicited → raise events / z_set_error(...) as you like
}
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	200000a4 	.word	0x200000a4

080009bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	@ 0x30
 80009c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d2:	4b50      	ldr	r3, [pc, #320]	@ (8000b14 <MX_GPIO_Init+0x158>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	4a4f      	ldr	r2, [pc, #316]	@ (8000b14 <MX_GPIO_Init+0x158>)
 80009d8:	f043 0310 	orr.w	r3, r3, #16
 80009dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009de:	4b4d      	ldr	r3, [pc, #308]	@ (8000b14 <MX_GPIO_Init+0x158>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	61bb      	str	r3, [r7, #24]
 80009e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ea:	4b4a      	ldr	r3, [pc, #296]	@ (8000b14 <MX_GPIO_Init+0x158>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	4a49      	ldr	r2, [pc, #292]	@ (8000b14 <MX_GPIO_Init+0x158>)
 80009f0:	f043 0320 	orr.w	r3, r3, #32
 80009f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f6:	4b47      	ldr	r3, [pc, #284]	@ (8000b14 <MX_GPIO_Init+0x158>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	f003 0320 	and.w	r3, r3, #32
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b44      	ldr	r3, [pc, #272]	@ (8000b14 <MX_GPIO_Init+0x158>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	4a43      	ldr	r2, [pc, #268]	@ (8000b14 <MX_GPIO_Init+0x158>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0e:	4b41      	ldr	r3, [pc, #260]	@ (8000b14 <MX_GPIO_Init+0x158>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b14 <MX_GPIO_Init+0x158>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b14 <MX_GPIO_Init+0x158>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a26:	4b3b      	ldr	r3, [pc, #236]	@ (8000b14 <MX_GPIO_Init+0x158>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b38      	ldr	r3, [pc, #224]	@ (8000b14 <MX_GPIO_Init+0x158>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	4a37      	ldr	r2, [pc, #220]	@ (8000b14 <MX_GPIO_Init+0x158>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3e:	4b35      	ldr	r3, [pc, #212]	@ (8000b14 <MX_GPIO_Init+0x158>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	4b32      	ldr	r3, [pc, #200]	@ (8000b14 <MX_GPIO_Init+0x158>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	4a31      	ldr	r2, [pc, #196]	@ (8000b14 <MX_GPIO_Init+0x158>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a56:	4b2f      	ldr	r3, [pc, #188]	@ (8000b14 <MX_GPIO_Init+0x158>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, UC_PUMP_START_Pin|UC_PUMP_STOP_Pin|UC_PUMP_REMOTE_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	214c      	movs	r1, #76	@ 0x4c
 8000a66:	482c      	ldr	r0, [pc, #176]	@ (8000b18 <MX_GPIO_Init+0x15c>)
 8000a68:	f003 ff3c 	bl	80048e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UC_CS_SPS_OUT_Pin|UC_CS_SPS_IN_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2106      	movs	r1, #6
 8000a70:	482a      	ldr	r0, [pc, #168]	@ (8000b1c <MX_GPIO_Init+0x160>)
 8000a72:	f003 ff37 	bl	80048e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UC_HEARTBEAT_GPIO_Port, UC_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a80:	f003 ff30 	bl	80048e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = UC_PUMP_START_Pin|UC_PUMP_STOP_Pin|UC_PUMP_REMOTE_Pin;
 8000a84:	234c      	movs	r3, #76	@ 0x4c
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	481f      	ldr	r0, [pc, #124]	@ (8000b18 <MX_GPIO_Init+0x15c>)
 8000a9c:	f003 fd88 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = UC_PUMP_WARNING_Pin|UC_PUMP_ALARM_Pin;
 8000aa0:	2330      	movs	r3, #48	@ 0x30
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4819      	ldr	r0, [pc, #100]	@ (8000b18 <MX_GPIO_Init+0x15c>)
 8000ab4:	f003 fd7c 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UC_CS_SPS_OUT_Pin|UC_CS_SPS_IN_Pin;
 8000ab8:	2306      	movs	r3, #6
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4813      	ldr	r0, [pc, #76]	@ (8000b1c <MX_GPIO_Init+0x160>)
 8000ad0:	f003 fd6e 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UC_HEARTBEAT_Pin;
 8000ad4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UC_HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af0:	f003 fd5e 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = UC__5VOK_Pin|UC__12VOK_Pin;
 8000af4:	2330      	movs	r3, #48	@ 0x30
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4806      	ldr	r0, [pc, #24]	@ (8000b20 <MX_GPIO_Init+0x164>)
 8000b08:	f003 fd52 	bl	80045b0 <HAL_GPIO_Init>

}
 8000b0c:	bf00      	nop
 8000b0e:	3730      	adds	r7, #48	@ 0x30
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48001000 	.word	0x48001000
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	48000c00 	.word	0x48000c00

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b28:	f003 fb6d 	bl	8004206 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2c:	f000 f832 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b30:	f7ff ff44 	bl	80009bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b34:	f001 fa80 	bl	8002038 <MX_SPI1_Init>
  MX_UART4_Init();
 8000b38:	f002 f86e 	bl	8002c18 <MX_UART4_Init>
  MX_UART5_Init();
 8000b3c:	f002 f8b8 	bl	8002cb0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000b40:	f002 f902 	bl	8002d48 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b44:	f002 f94c 	bl	8002de0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000b48:	f002 f998 	bl	8002e7c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000b4c:	f001 fdb4 	bl	80026b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //--- Stacks fuer die Anfragen an Zentrale und MatchingCube vorbereiten ------
  priolist_init();
 8000b50:	f000 f950 	bl	8000df4 <priolist_init>
  stacks_init();
 8000b54:	f001 faf0 	bl	8002138 <stacks_init>
  //--- Ergbenissstack fuer die Antworten von Zentrale und MatchingCube vorbereiten -------
  resultQueue_init();
 8000b58:	f001 f990 	bl	8001e7c <resultQueue_init>
  uart_initAll();
 8000b5c:	f001 fec4 	bl	80028e8 <uart_initAll>
  remote_init();
 8000b60:	f000 f9b0 	bl	8000ec4 <remote_init>
  zentrale_init();
 8000b64:	f002 fb92 	bl	800328c <zentrale_init>

  delay_ms(500);
 8000b68:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b6c:	f7ff fdb4 	bl	80006d8 <delay_ms>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hw_sero_get();
 8000b70:	f7ff fd36 	bl	80005e0 <hw_sero_get>
	  remote_sero_get();
 8000b74:	f000 f9d2 	bl	8000f1c <remote_sero_get>
	  gb_sero_get();
 8000b78:	f7ff fdbc 	bl	80006f4 <gb_sero_get>
	  result_get_sero();
 8000b7c:	f001 fa30 	bl	8001fe0 <result_get_sero>

	  zentrale();
 8000b80:	f002 fbca 	bl	8003318 <zentrale>

		hw_sero_set();
 8000b84:	f7ff fd33 	bl	80005ee <hw_sero_set>
		z_cmd_scheduler();
 8000b88:	f003 f8b6 	bl	8003cf8 <z_cmd_scheduler>
		result_get_sero();
 8000b8c:	f001 fa28 	bl	8001fe0 <result_get_sero>
	  hw_sero_get();
 8000b90:	bf00      	nop
 8000b92:	e7ed      	b.n	8000b70 <main+0x4c>

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b094      	sub	sp, #80	@ 0x50
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0318 	add.w	r3, r7, #24
 8000b9e:	2238      	movs	r2, #56	@ 0x38
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f007 fb76 	bl	8008294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f003 fec6 	bl	8004948 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bc0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bc4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bd2:	2328      	movs	r3, #40	@ 0x28
 8000bd4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 ff62 	bl	8004ab0 <HAL_RCC_OscConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000bf2:	f000 f818 	bl	8000c26 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f004 fa60 	bl	80050d4 <HAL_RCC_ClockConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c1a:	f000 f804 	bl	8000c26 <Error_Handler>
  }
}
 8000c1e:	bf00      	nop
 8000c20:	3750      	adds	r7, #80	@ 0x50
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2a:	b672      	cpsid	i
}
 8000c2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2e:	bf00      	nop
 8000c30:	e7fd      	b.n	8000c2e <Error_Handler+0x8>

08000c32 <priolist_push>:
uint8_t priolist_pop (priority_item prio_list[], uint8_t priolevel_header[], uint8_t *firstunused, uint8_t priolevel_data);


//--------------FUNKTIONSDEFINITIONS----------------------------
uint8_t priolist_push (priority_item prio_list[], uint8_t priolist_length,  uint8_t priolevel_header[], uint8_t *firstunused, uint8_t stack_index, uint8_t priolevel_data)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b088      	sub	sp, #32
 8000c36:	af02      	add	r7, sp, #8
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	72fb      	strb	r3, [r7, #11]

	uint8_t flag = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	75fb      	strb	r3, [r7, #23]

	if (*firstunused == NONEXT )            //wenn es keinen freien Platz in der prio_list gibt,
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2bff      	cmp	r3, #255	@ 0xff
 8000c4c:	d102      	bne.n	8000c54 <priolist_push+0x22>
	{
		flag = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	75fb      	strb	r3, [r7, #23]
 8000c52:	e034      	b.n	8000cbe <priolist_push+0x8c>
	}
	else
	{
		switch (priolevel_data)
 8000c54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d022      	beq.n	8000ca2 <priolist_push+0x70>
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	dc2e      	bgt.n	8000cbe <priolist_push+0x8c>
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <priolist_push+0x38>
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d00e      	beq.n	8000c86 <priolist_push+0x54>
 8000c68:	e029      	b.n	8000cbe <priolist_push+0x8c>
		{
			case  PRIO_LEVEL0:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL0);
 8000c6a:	7af9      	ldrb	r1, [r7, #11]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f000 f824 	bl	8000cc8 <priolist_node_insert>
			flag = 1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	75fb      	strb	r3, [r7, #23]
			break;
 8000c84:	e01b      	b.n	8000cbe <priolist_push+0x8c>
			case  PRIO_LEVEL1:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL1);
 8000c86:	7af9      	ldrb	r1, [r7, #11]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	9301      	str	r3, [sp, #4]
 8000c8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f000 f816 	bl	8000cc8 <priolist_node_insert>
			flag = 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	75fb      	strb	r3, [r7, #23]
			break;
 8000ca0:	e00d      	b.n	8000cbe <priolist_push+0x8c>
			case  PRIO_LEVEL2:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL2);
 8000ca2:	7af9      	ldrb	r1, [r7, #11]
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f000 f808 	bl	8000cc8 <priolist_node_insert>
			flag = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	75fb      	strb	r3, [r7, #23]
			break;
 8000cbc:	bf00      	nop
		};
	};
	return flag;
 8000cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <priolist_node_insert>:

void priolist_node_insert(priority_item prio_list[], uint8_t priolist_length,  uint8_t priolevel_header[], uint8_t *unused_list, uint8_t stackindex, uint8_t priolevel)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	72fb      	strb	r3, [r7, #11]
	uint8_t act_index ;
	uint8_t last;

	act_index = *unused_list;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	75bb      	strb	r3, [r7, #22]
	*unused_list = prio_list[act_index].next;
 8000cde:	7dbb      	ldrb	r3, [r7, #22]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	785a      	ldrb	r2, [r3, #1]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	701a      	strb	r2, [r3, #0]
	if (priolevel_header[priolevel] == NONEXT)                //Wenn die Prioritätsliste mit dem Level0 noch leer ist,
 8000cec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2bff      	cmp	r3, #255	@ 0xff
 8000cf8:	d112      	bne.n	8000d20 <priolist_node_insert+0x58>
	{

		prio_list[act_index].stackindex = stackindex;
 8000cfa:	7dbb      	ldrb	r3, [r7, #22]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	4413      	add	r3, r2
 8000d02:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d06:	701a      	strb	r2, [r3, #0]
		priolevel_header[priolevel] = act_index;
 8000d08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	7dba      	ldrb	r2, [r7, #22]
 8000d12:	701a      	strb	r2, [r3, #0]
		prio_list[act_index].next = NONEXT;
 8000d14:	7dbb      	ldrb	r3, [r7, #22]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	22ff      	movs	r2, #255	@ 0xff
 8000d1e:	705a      	strb	r2, [r3, #1]
	};
	if (priolevel_header[priolevel] < priolist_length)    //Wenn die Prioritätsliste schon existiert,
 8000d20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	4413      	add	r3, r2
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	7afa      	ldrb	r2, [r7, #11]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d926      	bls.n	8000d7e <priolist_node_insert+0xb6>
	{
		prio_list[act_index].stackindex = stackindex;
 8000d30:	7dbb      	ldrb	r3, [r7, #22]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d3c:	701a      	strb	r2, [r3, #0]
		last =  priolevel_header[priolevel];                  //das erste Element der Prioritätsliste
 8000d3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	75fb      	strb	r3, [r7, #23]
		while (prio_list[last].next != NONEXT)               //Suche den Ende der Prioritätsliste, um das neue Element hineinzufügen
 8000d4a:	e005      	b.n	8000d58 <priolist_node_insert+0x90>
		{
			last = prio_list[last].next;
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	785b      	ldrb	r3, [r3, #1]
 8000d56:	75fb      	strb	r3, [r7, #23]
		while (prio_list[last].next != NONEXT)               //Suche den Ende der Prioritätsliste, um das neue Element hineinzufügen
 8000d58:	7dfb      	ldrb	r3, [r7, #23]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	785b      	ldrb	r3, [r3, #1]
 8000d62:	2bff      	cmp	r3, #255	@ 0xff
 8000d64:	d1f2      	bne.n	8000d4c <priolist_node_insert+0x84>
		};
		prio_list[last].next = act_index;
 8000d66:	7dfb      	ldrb	r3, [r7, #23]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	7dba      	ldrb	r2, [r7, #22]
 8000d70:	705a      	strb	r2, [r3, #1]
		prio_list[act_index].next = NONEXT;
 8000d72:	7dbb      	ldrb	r3, [r7, #22]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4413      	add	r3, r2
 8000d7a:	22ff      	movs	r2, #255	@ 0xff
 8000d7c:	705a      	strb	r2, [r3, #1]
	};
}
 8000d7e:	bf00      	nop
 8000d80:	371c      	adds	r7, #28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <priolist_pop>:

uint8_t priolist_pop (priority_item prio_list[], uint8_t priolevel_header[], uint8_t *firstunused, uint8_t priolevel_data)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b087      	sub	sp, #28
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	70fb      	strb	r3, [r7, #3]
	uint8_t stack_index = NONEXT ;  //ungültige Wert, wenn die Prioritätsliste noch leer oder ein Fehler
 8000d98:	23ff      	movs	r3, #255	@ 0xff
 8000d9a:	75fb      	strb	r3, [r7, #23]

	if (priolevel_header[priolevel_data] != NONEXT)
 8000d9c:	78fb      	ldrb	r3, [r7, #3]
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	4413      	add	r3, r2
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2bff      	cmp	r3, #255	@ 0xff
 8000da6:	d01d      	beq.n	8000de4 <priolist_pop+0x5a>
	{
		uint8_t act_index = priolevel_header[priolevel_data];
 8000da8:	78fb      	ldrb	r3, [r7, #3]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	75bb      	strb	r3, [r7, #22]
		stack_index = prio_list[act_index].stackindex;
 8000db2:	7dbb      	ldrb	r3, [r7, #22]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	4413      	add	r3, r2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	75fb      	strb	r3, [r7, #23]
		priolevel_header[priolevel_data] = prio_list[act_index].next;
 8000dbe:	7dbb      	ldrb	r3, [r7, #22]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	441a      	add	r2, r3
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	440b      	add	r3, r1
 8000dcc:	7852      	ldrb	r2, [r2, #1]
 8000dce:	701a      	strb	r2, [r3, #0]

		prio_list[act_index].next = *firstunused;
 8000dd0:	7dbb      	ldrb	r3, [r7, #22]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	7812      	ldrb	r2, [r2, #0]
 8000ddc:	705a      	strb	r2, [r3, #1]
		*firstunused = act_index;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7dba      	ldrb	r2, [r7, #22]
 8000de2:	701a      	strb	r2, [r3, #0]
	};

	return stack_index;
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <priolist_init>:
//--------------FUNKTIONSDEKLARATIONS----------------------------------------------------------------------------------------
void priolist_init(void);

//--------------FUNKTIONSDEFINITIONS-----------------------------------------------------------------------------------------
void priolist_init(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71fb      	strb	r3, [r7, #7]

	zpriolist_firstunused_index = 0;         //der gültige Wert liegt zwischen 0 und (Z_STACK_SIZE-1); wenn = NONEXT, d.h. keinen freien Platz in der Prioliste.
 8000dfe:	4b2b      	ldr	r3, [pc, #172]	@ (8000eac <priolist_init+0xb8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
	mcpriolist_firstunused_index = 0;		//der Wert liegt zwischen 0 und (MC_STACK_SIZE-1)
 8000e04:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb0 <priolist_init+0xbc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]

	for (i = 0;  i < PRIO_LEVELS; i++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	e00a      	b.n	8000e26 <priolist_init+0x32>
	{
		z_priolevel_header[i] = NONEXT;    //d.h. es gibt noch keinen Befehl in der i-te. Prioritätsliste.
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4a28      	ldr	r2, [pc, #160]	@ (8000eb4 <priolist_init+0xc0>)
 8000e14:	21ff      	movs	r1, #255	@ 0xff
 8000e16:	54d1      	strb	r1, [r2, r3]

		mc_priolevel_header[i] = NONEXT;
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	4a27      	ldr	r2, [pc, #156]	@ (8000eb8 <priolist_init+0xc4>)
 8000e1c:	21ff      	movs	r1, #255	@ 0xff
 8000e1e:	54d1      	strb	r1, [r2, r3]
	for (i = 0;  i < PRIO_LEVELS; i++)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	3301      	adds	r3, #1
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d9f1      	bls.n	8000e10 <priolist_init+0x1c>

	}

	for ( i= 0; i < Z_STACK_SIZE; i++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	e015      	b.n	8000e5e <priolist_init+0x6a>
	{
		if (i == (Z_STACK_SIZE-1) )
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b1d      	cmp	r3, #29
 8000e36:	d106      	bne.n	8000e46 <priolist_init+0x52>
		{
			z_priolist[i].next = NONEXT;
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4a20      	ldr	r2, [pc, #128]	@ (8000ebc <priolist_init+0xc8>)
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	22ff      	movs	r2, #255	@ 0xff
 8000e42:	705a      	strb	r2, [r3, #1]
 8000e44:	e008      	b.n	8000e58 <priolist_init+0x64>
		}
		else
		{
			z_priolist[i].next = i+1;
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	79fa      	ldrb	r2, [r7, #7]
 8000e4a:	3201      	adds	r2, #1
 8000e4c:	b2d1      	uxtb	r1, r2
 8000e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ebc <priolist_init+0xc8>)
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	460a      	mov	r2, r1
 8000e56:	705a      	strb	r2, [r3, #1]
	for ( i= 0; i < Z_STACK_SIZE; i++)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	71fb      	strb	r3, [r7, #7]
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b1d      	cmp	r3, #29
 8000e62:	d9e6      	bls.n	8000e32 <priolist_init+0x3e>
		};
	};

	for ( i= 0; i < MC_STACK_SIZE; i++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	e015      	b.n	8000e96 <priolist_init+0xa2>
	{
		if (i == (MC_STACK_SIZE-1) )
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b13      	cmp	r3, #19
 8000e6e:	d106      	bne.n	8000e7e <priolist_init+0x8a>
		{
			mc_priolist[i].next = NONEXT;
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	4a13      	ldr	r2, [pc, #76]	@ (8000ec0 <priolist_init+0xcc>)
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	22ff      	movs	r2, #255	@ 0xff
 8000e7a:	705a      	strb	r2, [r3, #1]
 8000e7c:	e008      	b.n	8000e90 <priolist_init+0x9c>
		}
		else
		{
			mc_priolist[i].next = i+1;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	79fa      	ldrb	r2, [r7, #7]
 8000e82:	3201      	adds	r2, #1
 8000e84:	b2d1      	uxtb	r1, r2
 8000e86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec0 <priolist_init+0xcc>)
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	705a      	strb	r2, [r3, #1]
	for ( i= 0; i < MC_STACK_SIZE; i++)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	3301      	adds	r3, #1
 8000e94:	71fb      	strb	r3, [r7, #7]
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b13      	cmp	r3, #19
 8000e9a:	d9e6      	bls.n	8000e6a <priolist_init+0x76>
		};
	};
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000117 	.word	0x20000117
 8000eb0:	20000118 	.word	0x20000118
 8000eb4:	20000110 	.word	0x20000110
 8000eb8:	20000114 	.word	0x20000114
 8000ebc:	200000ac 	.word	0x200000ac
 8000ec0:	200000e8 	.word	0x200000e8

08000ec4 <remote_init>:
void output_ascii(int32_t);
void Binary_Search(uint8_t ncmd, char* key, uint16_t *cmdindex);
void output_ascii_cmdack(uint8_t verbose_flg, uint8_t crlf_flg, uint8_t cmd_ack);

// ---- public API ----
void remote_init(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	nzeichen = 0;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <remote_init+0x3c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
	state = RMT_WAIT_FOR_PAKET_START;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <remote_init+0x40>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
	lengthRx = 0;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <remote_init+0x44>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
	dleFlag = 0;
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <remote_init+0x48>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <remote_init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
	memset((void*) msg, 0, sizeof(msg));
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	2100      	movs	r1, #0
 8000eea:	480a      	ldr	r0, [pc, #40]	@ (8000f14 <remote_init+0x50>)
 8000eec:	f007 f9d2 	bl	8008294 <memset>
	memset(bufferRx, 0, sizeof(bufferRx));
 8000ef0:	220f      	movs	r2, #15
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <remote_init+0x54>)
 8000ef6:	f007 f9cd 	bl	8008294 <memset>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000012f 	.word	0x2000012f
 8000f04:	20000001 	.word	0x20000001
 8000f08:	2000013f 	.word	0x2000013f
 8000f0c:	20000140 	.word	0x20000140
 8000f10:	20000141 	.word	0x20000141
 8000f14:	20000120 	.word	0x20000120
 8000f18:	20000130 	.word	0x20000130

08000f1c <remote_sero_get>:

// Pull bytes from UART4 RX ring into msg[] and feed parser
void remote_sero_get(void)
{
 8000f1c:	b598      	push	{r3, r4, r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	nzeichen = 0;
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <remote_sero_get+0x54>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
	while ((rb_rx_used(&usart3_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8000f26:	e00e      	b.n	8000f46 <remote_sero_get+0x2a>
		msg[nzeichen++] = (uint8_t) uartRB_Getc(&usart3_rb);   // legacy getc()
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <remote_sero_get+0x54>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	b2d1      	uxtb	r1, r2
 8000f32:	4a0f      	ldr	r2, [pc, #60]	@ (8000f70 <remote_sero_get+0x54>)
 8000f34:	7011      	strb	r1, [r2, #0]
 8000f36:	461c      	mov	r4, r3
 8000f38:	480e      	ldr	r0, [pc, #56]	@ (8000f74 <remote_sero_get+0x58>)
 8000f3a:	f001 fe3f 	bl	8002bbc <uartRB_Getc>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <remote_sero_get+0x5c>)
 8000f44:	551a      	strb	r2, [r3, r4]
	while ((rb_rx_used(&usart3_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8000f46:	480b      	ldr	r0, [pc, #44]	@ (8000f74 <remote_sero_get+0x58>)
 8000f48:	f001 fd77 	bl	8002a3a <rb_rx_used>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	dd04      	ble.n	8000f5c <remote_sero_get+0x40>
 8000f52:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <remote_sero_get+0x54>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b0d      	cmp	r3, #13
 8000f5a:	d9e5      	bls.n	8000f28 <remote_sero_get+0xc>
	}
	if (nzeichen) parse_ascii();
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <remote_sero_get+0x54>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <remote_sero_get+0x4e>
 8000f66:	f000 f809 	bl	8000f7c <parse_ascii>
}
 8000f6a:	bf00      	nop
 8000f6c:	bd98      	pop	{r3, r4, r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000012f 	.word	0x2000012f
 8000f74:	20000df0 	.word	0x20000df0
 8000f78:	20000120 	.word	0x20000120

08000f7c <parse_ascii>:
	} while (ptr < nzeichen);
}

// das Paket in ASCII-Format analysieren und das Paket in den Stack einfügen.
void parse_ascii(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
	volatile static uint8_t pflag=0;
	volatile static uint8_t eflag=0;

	static uint8_t negativ_zahl = 0;

	uint8_t ptr=0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	75fb      	strb	r3, [r7, #23]
	uint16_t cmd_index = BINARY_INDEX_MAX;
 8000f86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f8a:	82bb      	strh	r3, [r7, #20]


	do
	{
		// wenn es ein Zeichen in UART1 Buffer gibt und die Automate nicht im Bearbeitungszustand ist
		if ((nzeichen>0) && (a_state != proc_cmd))
 8000f8c:	4b9c      	ldr	r3, [pc, #624]	@ (8001200 <parse_ascii+0x284>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d01d      	beq.n	8000fd2 <parse_ascii+0x56>
 8000f96:	4b9b      	ldr	r3, [pc, #620]	@ (8001204 <parse_ascii+0x288>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d018      	beq.n	8000fd2 <parse_ascii+0x56>
		{	nc=msg[ptr++];							// hole ein Zeichen aus msg-buffer
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	75fa      	strb	r2, [r7, #23]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b97      	ldr	r3, [pc, #604]	@ (8001208 <parse_ascii+0x28c>)
 8000faa:	5c9b      	ldrb	r3, [r3, r2]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b97      	ldr	r3, [pc, #604]	@ (800120c <parse_ascii+0x290>)
 8000fb0:	701a      	strb	r2, [r3, #0]
			if(echo==1)								// Wenn die Kommunikationsmode im Echo-Mode ist, wird es das Zeichen direkt wieder zurückgeben.
 8000fb2:	4b97      	ldr	r3, [pc, #604]	@ (8001210 <parse_ascii+0x294>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d10d      	bne.n	8000fd8 <parse_ascii+0x5c>
			{
				char1[0]=nc;
 8000fbc:	4b93      	ldr	r3, [pc, #588]	@ (800120c <parse_ascii+0x290>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b94      	ldr	r3, [pc, #592]	@ (8001214 <parse_ascii+0x298>)
 8000fc4:	701a      	strb	r2, [r3, #0]
				uartRB_Put(&usart3_rb,char1, 1);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4992      	ldr	r1, [pc, #584]	@ (8001214 <parse_ascii+0x298>)
 8000fca:	4893      	ldr	r0, [pc, #588]	@ (8001218 <parse_ascii+0x29c>)
 8000fcc:	f001 fda2 	bl	8002b14 <uartRB_Put>
			if(echo==1)								// Wenn die Kommunikationsmode im Echo-Mode ist, wird es das Zeichen direkt wieder zurückgeben.
 8000fd0:	e002      	b.n	8000fd8 <parse_ascii+0x5c>
			}
		}
		else
		nc = 0;
 8000fd2:	4b8e      	ldr	r3, [pc, #568]	@ (800120c <parse_ascii+0x290>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]

		if(strlen(cmd) > 22)					 // Ascii-Kommando darf nicht länger als 22 Zeichen.
 8000fd8:	4890      	ldr	r0, [pc, #576]	@ (800121c <parse_ascii+0x2a0>)
 8000fda:	f7ff f92b 	bl	8000234 <strlen>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b16      	cmp	r3, #22
 8000fe2:	d90e      	bls.n	8001002 <parse_ascii+0x86>
		{
			strcpy(cmd,"");
 8000fe4:	4b8d      	ldr	r3, [pc, #564]	@ (800121c <parse_ascii+0x2a0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
			val=0;
 8000fea:	4b8d      	ldr	r3, [pc, #564]	@ (8001220 <parse_ascii+0x2a4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
			pflag=0;
 8000ff0:	4b8c      	ldr	r3, [pc, #560]	@ (8001224 <parse_ascii+0x2a8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
			eflag=0;
 8000ff6:	4b8c      	ldr	r3, [pc, #560]	@ (8001228 <parse_ascii+0x2ac>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
			a_state = get_cmd;
 8000ffc:	4b81      	ldr	r3, [pc, #516]	@ (8001204 <parse_ascii+0x288>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
		}

		switch(a_state)
 8001002:	4b80      	ldr	r3, [pc, #512]	@ (8001204 <parse_ascii+0x288>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	3b01      	subs	r3, #1
 800100a:	2b03      	cmp	r3, #3
 800100c:	f200 8323 	bhi.w	8001656 <parse_ascii+0x6da>
 8001010:	a201      	add	r2, pc, #4	@ (adr r2, 8001018 <parse_ascii+0x9c>)
 8001012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001016:	bf00      	nop
 8001018:	08001029 	.word	0x08001029
 800101c:	0800115d 	.word	0x0800115d
 8001020:	08001239 	.word	0x08001239
 8001024:	080012eb 	.word	0x080012eb
		{
			case get_cmd:
			if (((nc>=65) && (nc<=90)) || ((nc>=48) && (nc<=57)) || (nc==58) || (nc==63))
 8001028:	4b78      	ldr	r3, [pc, #480]	@ (800120c <parse_ascii+0x290>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b40      	cmp	r3, #64	@ 0x40
 8001030:	d904      	bls.n	800103c <parse_ascii+0xc0>
 8001032:	4b76      	ldr	r3, [pc, #472]	@ (800120c <parse_ascii+0x290>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b5a      	cmp	r3, #90	@ 0x5a
 800103a:	d913      	bls.n	8001064 <parse_ascii+0xe8>
 800103c:	4b73      	ldr	r3, [pc, #460]	@ (800120c <parse_ascii+0x290>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b2f      	cmp	r3, #47	@ 0x2f
 8001044:	d904      	bls.n	8001050 <parse_ascii+0xd4>
 8001046:	4b71      	ldr	r3, [pc, #452]	@ (800120c <parse_ascii+0x290>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b39      	cmp	r3, #57	@ 0x39
 800104e:	d909      	bls.n	8001064 <parse_ascii+0xe8>
 8001050:	4b6e      	ldr	r3, [pc, #440]	@ (800120c <parse_ascii+0x290>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b3a      	cmp	r3, #58	@ 0x3a
 8001058:	d004      	beq.n	8001064 <parse_ascii+0xe8>
 800105a:	4b6c      	ldr	r3, [pc, #432]	@ (800120c <parse_ascii+0x290>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b3f      	cmp	r3, #63	@ 0x3f
 8001062:	d109      	bne.n	8001078 <parse_ascii+0xfc>
			{ 	char1[0] = nc;				//verkette char1 an cmd
 8001064:	4b69      	ldr	r3, [pc, #420]	@ (800120c <parse_ascii+0x290>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b6a      	ldr	r3, [pc, #424]	@ (8001214 <parse_ascii+0x298>)
 800106c:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 800106e:	4969      	ldr	r1, [pc, #420]	@ (8001214 <parse_ascii+0x298>)
 8001070:	486a      	ldr	r0, [pc, #424]	@ (800121c <parse_ascii+0x2a0>)
 8001072:	f007 f917 	bl	80082a4 <strcat>
 8001076:	e070      	b.n	800115a <parse_ascii+0x1de>
			}
			else if ((nc == 46) && (sloppy == 1))
 8001078:	4b64      	ldr	r3, [pc, #400]	@ (800120c <parse_ascii+0x290>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001080:	d10c      	bne.n	800109c <parse_ascii+0x120>
 8001082:	4b6a      	ldr	r3, [pc, #424]	@ (800122c <parse_ascii+0x2b0>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b01      	cmp	r3, #1
 800108a:	d107      	bne.n	800109c <parse_ascii+0x120>
			{ 	char1[0] = 58;
 800108c:	4b61      	ldr	r3, [pc, #388]	@ (8001214 <parse_ascii+0x298>)
 800108e:	223a      	movs	r2, #58	@ 0x3a
 8001090:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 8001092:	4960      	ldr	r1, [pc, #384]	@ (8001214 <parse_ascii+0x298>)
 8001094:	4861      	ldr	r0, [pc, #388]	@ (800121c <parse_ascii+0x2a0>)
 8001096:	f007 f905 	bl	80082a4 <strcat>
 800109a:	e05e      	b.n	800115a <parse_ascii+0x1de>
			}
			else if ((nc == 35)  && (sloppy == 1))
 800109c:	4b5b      	ldr	r3, [pc, #364]	@ (800120c <parse_ascii+0x290>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b23      	cmp	r3, #35	@ 0x23
 80010a4:	d10c      	bne.n	80010c0 <parse_ascii+0x144>
 80010a6:	4b61      	ldr	r3, [pc, #388]	@ (800122c <parse_ascii+0x2b0>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d107      	bne.n	80010c0 <parse_ascii+0x144>
			{ 	char1[0] = 63;
 80010b0:	4b58      	ldr	r3, [pc, #352]	@ (8001214 <parse_ascii+0x298>)
 80010b2:	223f      	movs	r2, #63	@ 0x3f
 80010b4:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 80010b6:	4957      	ldr	r1, [pc, #348]	@ (8001214 <parse_ascii+0x298>)
 80010b8:	4858      	ldr	r0, [pc, #352]	@ (800121c <parse_ascii+0x2a0>)
 80010ba:	f007 f8f3 	bl	80082a4 <strcat>
 80010be:	e04c      	b.n	800115a <parse_ascii+0x1de>
			}
			else if ((nc>=97) && (nc<=122))
 80010c0:	4b52      	ldr	r3, [pc, #328]	@ (800120c <parse_ascii+0x290>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b60      	cmp	r3, #96	@ 0x60
 80010c8:	d910      	bls.n	80010ec <parse_ascii+0x170>
 80010ca:	4b50      	ldr	r3, [pc, #320]	@ (800120c <parse_ascii+0x290>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b7a      	cmp	r3, #122	@ 0x7a
 80010d2:	d80b      	bhi.n	80010ec <parse_ascii+0x170>
			{  char1[0] = (nc - 32);
 80010d4:	4b4d      	ldr	r3, [pc, #308]	@ (800120c <parse_ascii+0x290>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3b20      	subs	r3, #32
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b4d      	ldr	r3, [pc, #308]	@ (8001214 <parse_ascii+0x298>)
 80010e0:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 80010e2:	494c      	ldr	r1, [pc, #304]	@ (8001214 <parse_ascii+0x298>)
 80010e4:	484d      	ldr	r0, [pc, #308]	@ (800121c <parse_ascii+0x2a0>)
 80010e6:	f007 f8dd 	bl	80082a4 <strcat>
 80010ea:	e036      	b.n	800115a <parse_ascii+0x1de>
			}
			else if (nc == 32)
 80010ec:	4b47      	ldr	r3, [pc, #284]	@ (800120c <parse_ascii+0x290>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b20      	cmp	r3, #32
 80010f4:	d10b      	bne.n	800110e <parse_ascii+0x192>
			{
				if(strlen(cmd) > 0)
 80010f6:	4b49      	ldr	r3, [pc, #292]	@ (800121c <parse_ascii+0x2a0>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 82af 	beq.w	800165e <parse_ascii+0x6e2>
				{
					val = 0;
 8001100:	4b47      	ldr	r3, [pc, #284]	@ (8001220 <parse_ascii+0x2a4>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
					a_state = get_sign;
 8001106:	4b3f      	ldr	r3, [pc, #252]	@ (8001204 <parse_ascii+0x288>)
 8001108:	2202      	movs	r2, #2
 800110a:	701a      	strb	r2, [r3, #0]
				a_state = proc_cmd;
			}
			else
			{ if(nc != 0) strcat(cmd, "*");
			}
			break;
 800110c:	e2a7      	b.n	800165e <parse_ascii+0x6e2>
			else if ((nc == 59) || ((nc==13)  && (sloppy == 1)))
 800110e:	4b3f      	ldr	r3, [pc, #252]	@ (800120c <parse_ascii+0x290>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b3b      	cmp	r3, #59	@ 0x3b
 8001116:	d009      	beq.n	800112c <parse_ascii+0x1b0>
 8001118:	4b3c      	ldr	r3, [pc, #240]	@ (800120c <parse_ascii+0x290>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b0d      	cmp	r3, #13
 8001120:	d108      	bne.n	8001134 <parse_ascii+0x1b8>
 8001122:	4b42      	ldr	r3, [pc, #264]	@ (800122c <parse_ascii+0x2b0>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b01      	cmp	r3, #1
 800112a:	d103      	bne.n	8001134 <parse_ascii+0x1b8>
				a_state = proc_cmd;
 800112c:	4b35      	ldr	r3, [pc, #212]	@ (8001204 <parse_ascii+0x288>)
 800112e:	2204      	movs	r2, #4
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e012      	b.n	800115a <parse_ascii+0x1de>
			{ if(nc != 0) strcat(cmd, "*");
 8001134:	4b35      	ldr	r3, [pc, #212]	@ (800120c <parse_ascii+0x290>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 828f 	beq.w	800165e <parse_ascii+0x6e2>
 8001140:	4836      	ldr	r0, [pc, #216]	@ (800121c <parse_ascii+0x2a0>)
 8001142:	f7ff f877 	bl	8000234 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b34      	ldr	r3, [pc, #208]	@ (800121c <parse_ascii+0x2a0>)
 800114c:	4413      	add	r3, r2
 800114e:	4938      	ldr	r1, [pc, #224]	@ (8001230 <parse_ascii+0x2b4>)
 8001150:	461a      	mov	r2, r3
 8001152:	460b      	mov	r3, r1
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	8013      	strh	r3, [r2, #0]
			break;
 8001158:	e281      	b.n	800165e <parse_ascii+0x6e2>
 800115a:	e280      	b.n	800165e <parse_ascii+0x6e2>

			case get_sign:
				if (nc == 45)
 800115c:	4b2b      	ldr	r3, [pc, #172]	@ (800120c <parse_ascii+0x290>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b2d      	cmp	r3, #45	@ 0x2d
 8001164:	d106      	bne.n	8001174 <parse_ascii+0x1f8>
				{
					negativ_zahl = 1;
 8001166:	4b33      	ldr	r3, [pc, #204]	@ (8001234 <parse_ascii+0x2b8>)
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
					a_state = get_val;
 800116c:	4b25      	ldr	r3, [pc, #148]	@ (8001204 <parse_ascii+0x288>)
 800116e:	2203      	movs	r2, #3
 8001170:	701a      	strb	r2, [r3, #0]
					break;
 8001172:	e279      	b.n	8001668 <parse_ascii+0x6ec>
				}
				else if ((nc>=48) && (nc<=57) && (val < INT32_MAX))           //val < 1000000
 8001174:	4b25      	ldr	r3, [pc, #148]	@ (800120c <parse_ascii+0x290>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b2f      	cmp	r3, #47	@ 0x2f
 800117c:	d91f      	bls.n	80011be <parse_ascii+0x242>
 800117e:	4b23      	ldr	r3, [pc, #140]	@ (800120c <parse_ascii+0x290>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b39      	cmp	r3, #57	@ 0x39
 8001186:	d81a      	bhi.n	80011be <parse_ascii+0x242>
 8001188:	4b25      	ldr	r3, [pc, #148]	@ (8001220 <parse_ascii+0x2a4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001190:	4293      	cmp	r3, r2
 8001192:	d014      	beq.n	80011be <parse_ascii+0x242>
				{	val = val * 10 + (nc-48);
 8001194:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <parse_ascii+0x2a4>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <parse_ascii+0x290>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	3b30      	subs	r3, #48	@ 0x30
 80011aa:	4413      	add	r3, r2
 80011ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001220 <parse_ascii+0x2a4>)
 80011ae:	6013      	str	r3, [r2, #0]
					pflag=1;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <parse_ascii+0x2a8>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
					a_state = get_val;
 80011b6:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <parse_ascii+0x288>)
 80011b8:	2203      	movs	r2, #3
 80011ba:	701a      	strb	r2, [r3, #0]
					break;
 80011bc:	e254      	b.n	8001668 <parse_ascii+0x6ec>
				}
				else if ((nc == 59) || (nc==13))
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <parse_ascii+0x290>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b3b      	cmp	r3, #59	@ 0x3b
 80011c6:	d004      	beq.n	80011d2 <parse_ascii+0x256>
 80011c8:	4b10      	ldr	r3, [pc, #64]	@ (800120c <parse_ascii+0x290>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b0d      	cmp	r3, #13
 80011d0:	d103      	bne.n	80011da <parse_ascii+0x25e>
				{
					a_state = proc_cmd;
 80011d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <parse_ascii+0x288>)
 80011d4:	2204      	movs	r2, #4
 80011d6:	701a      	strb	r2, [r3, #0]
						pflag=0;
						eflag=1;
					}

				};
			break;
 80011d8:	e243      	b.n	8001662 <parse_ascii+0x6e6>
				{	if(nc != 0)
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <parse_ascii+0x290>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 823e 	beq.w	8001662 <parse_ascii+0x6e6>
					{	negativ_zahl = 0;
 80011e6:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <parse_ascii+0x2b8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
						val=0;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <parse_ascii+0x2a4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
						pflag=0;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <parse_ascii+0x2a8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
						eflag=1;
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <parse_ascii+0x2ac>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
			break;
 80011fe:	e230      	b.n	8001662 <parse_ascii+0x6e6>
 8001200:	2000012f 	.word	0x2000012f
 8001204:	20000002 	.word	0x20000002
 8001208:	20000120 	.word	0x20000120
 800120c:	20000142 	.word	0x20000142
 8001210:	2000011b 	.word	0x2000011b
 8001214:	20000144 	.word	0x20000144
 8001218:	20000df0 	.word	0x20000df0
 800121c:	20000148 	.word	0x20000148
 8001220:	20000164 	.word	0x20000164
 8001224:	20000168 	.word	0x20000168
 8001228:	20000169 	.word	0x20000169
 800122c:	2000011c 	.word	0x2000011c
 8001230:	08008bcc 	.word	0x08008bcc
 8001234:	2000016a 	.word	0x2000016a
			case get_val:

			if ((nc>=48) && (nc<=57) && (val < INT32_MAX))           //val < 1000000
 8001238:	4b94      	ldr	r3, [pc, #592]	@ (800148c <parse_ascii+0x510>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001240:	d91c      	bls.n	800127c <parse_ascii+0x300>
 8001242:	4b92      	ldr	r3, [pc, #584]	@ (800148c <parse_ascii+0x510>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b39      	cmp	r3, #57	@ 0x39
 800124a:	d817      	bhi.n	800127c <parse_ascii+0x300>
 800124c:	4b90      	ldr	r3, [pc, #576]	@ (8001490 <parse_ascii+0x514>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001254:	4293      	cmp	r3, r2
 8001256:	d011      	beq.n	800127c <parse_ascii+0x300>
			{ val = val * 10 + (nc-48);
 8001258:	4b8d      	ldr	r3, [pc, #564]	@ (8001490 <parse_ascii+0x514>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	461a      	mov	r2, r3
 8001266:	4b89      	ldr	r3, [pc, #548]	@ (800148c <parse_ascii+0x510>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	3b30      	subs	r3, #48	@ 0x30
 800126e:	4413      	add	r3, r2
 8001270:	4a87      	ldr	r2, [pc, #540]	@ (8001490 <parse_ascii+0x514>)
 8001272:	6013      	str	r3, [r2, #0]
				pflag=1;
 8001274:	4b87      	ldr	r3, [pc, #540]	@ (8001494 <parse_ascii+0x518>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	e035      	b.n	80012e8 <parse_ascii+0x36c>
			}
			else if ((nc == 59) || (nc==13))
 800127c:	4b83      	ldr	r3, [pc, #524]	@ (800148c <parse_ascii+0x510>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b3b      	cmp	r3, #59	@ 0x3b
 8001284:	d004      	beq.n	8001290 <parse_ascii+0x314>
 8001286:	4b81      	ldr	r3, [pc, #516]	@ (800148c <parse_ascii+0x510>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b0d      	cmp	r3, #13
 800128e:	d118      	bne.n	80012c2 <parse_ascii+0x346>
			{
				if (negativ_zahl)
 8001290:	4b81      	ldr	r3, [pc, #516]	@ (8001498 <parse_ascii+0x51c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d010      	beq.n	80012ba <parse_ascii+0x33e>
				{
					if (pflag == 0)
 8001298:	4b7e      	ldr	r3, [pc, #504]	@ (8001494 <parse_ascii+0x518>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10b      	bne.n	80012ba <parse_ascii+0x33e>
					{
						negativ_zahl = 0;
 80012a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001498 <parse_ascii+0x51c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
						val=0;
 80012a8:	4b79      	ldr	r3, [pc, #484]	@ (8001490 <parse_ascii+0x514>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
						pflag=0;
 80012ae:	4b79      	ldr	r3, [pc, #484]	@ (8001494 <parse_ascii+0x518>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
						eflag=1;
 80012b4:	4b79      	ldr	r3, [pc, #484]	@ (800149c <parse_ascii+0x520>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
					}
				}
				a_state = proc_cmd;
 80012ba:	4b79      	ldr	r3, [pc, #484]	@ (80014a0 <parse_ascii+0x524>)
 80012bc:	2204      	movs	r2, #4
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e012      	b.n	80012e8 <parse_ascii+0x36c>
			}
			else
			{
				if(nc != 0)
 80012c2:	4b72      	ldr	r3, [pc, #456]	@ (800148c <parse_ascii+0x510>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 81cc 	beq.w	8001666 <parse_ascii+0x6ea>
				{	negativ_zahl = 0;
 80012ce:	4b72      	ldr	r3, [pc, #456]	@ (8001498 <parse_ascii+0x51c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
					val=0;
 80012d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001490 <parse_ascii+0x514>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
					pflag=0;
 80012da:	4b6e      	ldr	r3, [pc, #440]	@ (8001494 <parse_ascii+0x518>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
					eflag=1;
 80012e0:	4b6e      	ldr	r3, [pc, #440]	@ (800149c <parse_ascii+0x520>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
				}

			}
			break;
 80012e6:	e1be      	b.n	8001666 <parse_ascii+0x6ea>
 80012e8:	e1bd      	b.n	8001666 <parse_ascii+0x6ea>

			case proc_cmd:

			if (eflag == 1)
 80012ea:	4b6c      	ldr	r3, [pc, #432]	@ (800149c <parse_ascii+0x520>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d103      	bne.n	80012fc <parse_ascii+0x380>
			{
				ret=CMR_MALFORMATTEDCOMMAND;
 80012f4:	4b6b      	ldr	r3, [pc, #428]	@ (80014a4 <parse_ascii+0x528>)
 80012f6:	221f      	movs	r2, #31
 80012f8:	701a      	strb	r2, [r3, #0]
 80012fa:	e182      	b.n	8001602 <parse_ascii+0x686>
			}
			//hier beginnt die Verarbeitung der Befehle zum Einstellen der Kommunikation
			else if (  strcmp(cmd, "VERB")== 0 )
 80012fc:	496a      	ldr	r1, [pc, #424]	@ (80014a8 <parse_ascii+0x52c>)
 80012fe:	486b      	ldr	r0, [pc, #428]	@ (80014ac <parse_ascii+0x530>)
 8001300:	f7fe ff8e 	bl	8000220 <strcmp>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d12c      	bne.n	8001364 <parse_ascii+0x3e8>
			{
				if(pflag==0)
 800130a:	4b62      	ldr	r3, [pc, #392]	@ (8001494 <parse_ascii+0x518>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d103      	bne.n	800131c <parse_ascii+0x3a0>
				{
					ret=CMR_MISSINGPARAMETER;
 8001314:	4b63      	ldr	r3, [pc, #396]	@ (80014a4 <parse_ascii+0x528>)
 8001316:	220c      	movs	r2, #12
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	e172      	b.n	8001602 <parse_ascii+0x686>
				}
				else
				{
					switch (val)
 800131c:	4b5c      	ldr	r3, [pc, #368]	@ (8001490 <parse_ascii+0x514>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d014      	beq.n	800134e <parse_ascii+0x3d2>
 8001324:	2b02      	cmp	r3, #2
 8001326:	dc19      	bgt.n	800135c <parse_ascii+0x3e0>
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <parse_ascii+0x3b6>
 800132c:	2b01      	cmp	r3, #1
 800132e:	d007      	beq.n	8001340 <parse_ascii+0x3c4>
 8001330:	e014      	b.n	800135c <parse_ascii+0x3e0>
					{
						case 0:
						verbose =0;
 8001332:	4b5f      	ldr	r3, [pc, #380]	@ (80014b0 <parse_ascii+0x534>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001338:	4b5a      	ldr	r3, [pc, #360]	@ (80014a4 <parse_ascii+0x528>)
 800133a:	2280      	movs	r2, #128	@ 0x80
 800133c:	701a      	strb	r2, [r3, #0]
						break;
 800133e:	e160      	b.n	8001602 <parse_ascii+0x686>
						case 1:
						verbose =1;
 8001340:	4b5b      	ldr	r3, [pc, #364]	@ (80014b0 <parse_ascii+0x534>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001346:	4b57      	ldr	r3, [pc, #348]	@ (80014a4 <parse_ascii+0x528>)
 8001348:	2280      	movs	r2, #128	@ 0x80
 800134a:	701a      	strb	r2, [r3, #0]
						break;
 800134c:	e159      	b.n	8001602 <parse_ascii+0x686>
						case 2:
						verbose  =2;
 800134e:	4b58      	ldr	r3, [pc, #352]	@ (80014b0 <parse_ascii+0x534>)
 8001350:	2202      	movs	r2, #2
 8001352:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001354:	4b53      	ldr	r3, [pc, #332]	@ (80014a4 <parse_ascii+0x528>)
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	701a      	strb	r2, [r3, #0]
						break;
 800135a:	e152      	b.n	8001602 <parse_ascii+0x686>
						default:
						ret= CMR_PARAMETERINVALID;
 800135c:	4b51      	ldr	r3, [pc, #324]	@ (80014a4 <parse_ascii+0x528>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
						break;
 8001362:	e14e      	b.n	8001602 <parse_ascii+0x686>
					};
				}
			}
			else if (  strcmp(cmd, "ECHO")== 0 )
 8001364:	4953      	ldr	r1, [pc, #332]	@ (80014b4 <parse_ascii+0x538>)
 8001366:	4851      	ldr	r0, [pc, #324]	@ (80014ac <parse_ascii+0x530>)
 8001368:	f7fe ff5a 	bl	8000220 <strcmp>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d122      	bne.n	80013b8 <parse_ascii+0x43c>
			{
				if(pflag==0)
 8001372:	4b48      	ldr	r3, [pc, #288]	@ (8001494 <parse_ascii+0x518>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d103      	bne.n	8001384 <parse_ascii+0x408>
				{
					ret= CMR_MISSINGPARAMETER;
 800137c:	4b49      	ldr	r3, [pc, #292]	@ (80014a4 <parse_ascii+0x528>)
 800137e:	220c      	movs	r2, #12
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	e13e      	b.n	8001602 <parse_ascii+0x686>
				}
				else
				{
					if(val==0)
 8001384:	4b42      	ldr	r3, [pc, #264]	@ (8001490 <parse_ascii+0x514>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d106      	bne.n	800139a <parse_ascii+0x41e>
					{	echo=0;
 800138c:	4b4a      	ldr	r3, [pc, #296]	@ (80014b8 <parse_ascii+0x53c>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001392:	4b44      	ldr	r3, [pc, #272]	@ (80014a4 <parse_ascii+0x528>)
 8001394:	2280      	movs	r2, #128	@ 0x80
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	e133      	b.n	8001602 <parse_ascii+0x686>
					}
					else if(val==1)
 800139a:	4b3d      	ldr	r3, [pc, #244]	@ (8001490 <parse_ascii+0x514>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d106      	bne.n	80013b0 <parse_ascii+0x434>
					{	echo=1;
 80013a2:	4b45      	ldr	r3, [pc, #276]	@ (80014b8 <parse_ascii+0x53c>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 80013a8:	4b3e      	ldr	r3, [pc, #248]	@ (80014a4 <parse_ascii+0x528>)
 80013aa:	2280      	movs	r2, #128	@ 0x80
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	e128      	b.n	8001602 <parse_ascii+0x686>
					}
					else
					{
						ret= CMR_PARAMETERINVALID;
 80013b0:	4b3c      	ldr	r3, [pc, #240]	@ (80014a4 <parse_ascii+0x528>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	e124      	b.n	8001602 <parse_ascii+0x686>
					}
				}
			}
			else if (  strcmp(cmd, "CRLF")== 0 )
 80013b8:	4940      	ldr	r1, [pc, #256]	@ (80014bc <parse_ascii+0x540>)
 80013ba:	483c      	ldr	r0, [pc, #240]	@ (80014ac <parse_ascii+0x530>)
 80013bc:	f7fe ff30 	bl	8000220 <strcmp>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d138      	bne.n	8001438 <parse_ascii+0x4bc>
			{
				if(pflag==0)
 80013c6:	4b33      	ldr	r3, [pc, #204]	@ (8001494 <parse_ascii+0x518>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d103      	bne.n	80013d8 <parse_ascii+0x45c>
				{
					ret= CMR_MISSINGPARAMETER;
 80013d0:	4b34      	ldr	r3, [pc, #208]	@ (80014a4 <parse_ascii+0x528>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	e114      	b.n	8001602 <parse_ascii+0x686>
				}
				else
				{
					if(val==0)
 80013d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <parse_ascii+0x514>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d106      	bne.n	80013ee <parse_ascii+0x472>
					{	crlf =0;
 80013e0:	4b37      	ldr	r3, [pc, #220]	@ (80014c0 <parse_ascii+0x544>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 80013e6:	4b2f      	ldr	r3, [pc, #188]	@ (80014a4 <parse_ascii+0x528>)
 80013e8:	2280      	movs	r2, #128	@ 0x80
 80013ea:	701a      	strb	r2, [r3, #0]
 80013ec:	e109      	b.n	8001602 <parse_ascii+0x686>
					}
					else if(val==1)
 80013ee:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <parse_ascii+0x514>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d106      	bne.n	8001404 <parse_ascii+0x488>
					{	crlf =1;
 80013f6:	4b32      	ldr	r3, [pc, #200]	@ (80014c0 <parse_ascii+0x544>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 80013fc:	4b29      	ldr	r3, [pc, #164]	@ (80014a4 <parse_ascii+0x528>)
 80013fe:	2280      	movs	r2, #128	@ 0x80
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e0fe      	b.n	8001602 <parse_ascii+0x686>
					}
					else if(val==2)
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <parse_ascii+0x514>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d106      	bne.n	800141a <parse_ascii+0x49e>
					{	crlf =2;
 800140c:	4b2c      	ldr	r3, [pc, #176]	@ (80014c0 <parse_ascii+0x544>)
 800140e:	2202      	movs	r2, #2
 8001410:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001412:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <parse_ascii+0x528>)
 8001414:	2280      	movs	r2, #128	@ 0x80
 8001416:	701a      	strb	r2, [r3, #0]
 8001418:	e0f3      	b.n	8001602 <parse_ascii+0x686>
					}
					else if(val==3)
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <parse_ascii+0x514>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d106      	bne.n	8001430 <parse_ascii+0x4b4>
					{	crlf =3;
 8001422:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <parse_ascii+0x544>)
 8001424:	2203      	movs	r2, #3
 8001426:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001428:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <parse_ascii+0x528>)
 800142a:	2280      	movs	r2, #128	@ 0x80
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	e0e8      	b.n	8001602 <parse_ascii+0x686>
					}
					else
					{
						ret= CMR_PARAMETERINVALID;
 8001430:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <parse_ascii+0x528>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e0e4      	b.n	8001602 <parse_ascii+0x686>
					}
				}
			}
			else if (  strcmp(cmd, "SLOPPY")== 0 )
 8001438:	4922      	ldr	r1, [pc, #136]	@ (80014c4 <parse_ascii+0x548>)
 800143a:	481c      	ldr	r0, [pc, #112]	@ (80014ac <parse_ascii+0x530>)
 800143c:	f7fe fef0 	bl	8000220 <strcmp>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d142      	bne.n	80014cc <parse_ascii+0x550>
			{
				if(pflag==0)
 8001446:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <parse_ascii+0x518>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d103      	bne.n	8001458 <parse_ascii+0x4dc>
				{
					ret= CMR_MISSINGPARAMETER;
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <parse_ascii+0x528>)
 8001452:	220c      	movs	r2, #12
 8001454:	701a      	strb	r2, [r3, #0]
 8001456:	e0d4      	b.n	8001602 <parse_ascii+0x686>
				}
				else
				{
					if(val==0)
 8001458:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <parse_ascii+0x514>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d106      	bne.n	800146e <parse_ascii+0x4f2>
					{	sloppy=0;
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <parse_ascii+0x54c>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <parse_ascii+0x528>)
 8001468:	2280      	movs	r2, #128	@ 0x80
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	e0c9      	b.n	8001602 <parse_ascii+0x686>
					}
					else if(val==1)
 800146e:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <parse_ascii+0x514>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d106      	bne.n	8001484 <parse_ascii+0x508>
					{	sloppy=1;
 8001476:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <parse_ascii+0x54c>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <parse_ascii+0x528>)
 800147e:	2280      	movs	r2, #128	@ 0x80
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	e0be      	b.n	8001602 <parse_ascii+0x686>
					}
					else
					{
						ret= CMR_PARAMETERINVALID;
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <parse_ascii+0x528>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	e0ba      	b.n	8001602 <parse_ascii+0x686>
 800148c:	20000142 	.word	0x20000142
 8001490:	20000164 	.word	0x20000164
 8001494:	20000168 	.word	0x20000168
 8001498:	2000016a 	.word	0x2000016a
 800149c:	20000169 	.word	0x20000169
 80014a0:	20000002 	.word	0x20000002
 80014a4:	2000016b 	.word	0x2000016b
 80014a8:	08008bd0 	.word	0x08008bd0
 80014ac:	20000148 	.word	0x20000148
 80014b0:	20000119 	.word	0x20000119
 80014b4:	08008bd8 	.word	0x08008bd8
 80014b8:	2000011b 	.word	0x2000011b
 80014bc:	08008be0 	.word	0x08008be0
 80014c0:	2000011a 	.word	0x2000011a
 80014c4:	08008be8 	.word	0x08008be8
 80014c8:	2000011c 	.word	0x2000011c
					}
				}
			}
			else if ( strcmp(cmd, "IBL") == 0 )
 80014cc:	496c      	ldr	r1, [pc, #432]	@ (8001680 <parse_ascii+0x704>)
 80014ce:	486d      	ldr	r0, [pc, #436]	@ (8001684 <parse_ascii+0x708>)
 80014d0:	f7fe fea6 	bl	8000220 <strcmp>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10f      	bne.n	80014fa <parse_ascii+0x57e>
			{
				verbose = 2;
 80014da:	4b6b      	ldr	r3, [pc, #428]	@ (8001688 <parse_ascii+0x70c>)
 80014dc:	2202      	movs	r2, #2
 80014de:	701a      	strb	r2, [r3, #0]
				echo = 1;
 80014e0:	4b6a      	ldr	r3, [pc, #424]	@ (800168c <parse_ascii+0x710>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
				crlf = 3;
 80014e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001690 <parse_ascii+0x714>)
 80014e8:	2203      	movs	r2, #3
 80014ea:	701a      	strb	r2, [r3, #0]
				sloppy = 1;
 80014ec:	4b69      	ldr	r3, [pc, #420]	@ (8001694 <parse_ascii+0x718>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
				ret =CMR_SUCCESSFULL;
 80014f2:	4b69      	ldr	r3, [pc, #420]	@ (8001698 <parse_ascii+0x71c>)
 80014f4:	2280      	movs	r2, #128	@ 0x80
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	e083      	b.n	8001602 <parse_ascii+0x686>
			}
			else if (  strcmp(cmd, "") == 0 )
 80014fa:	4b62      	ldr	r3, [pc, #392]	@ (8001684 <parse_ascii+0x708>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d103      	bne.n	800150a <parse_ascii+0x58e>
			{
				ret= CMR_SEMICOLONONLY;
 8001502:	4b65      	ldr	r3, [pc, #404]	@ (8001698 <parse_ascii+0x71c>)
 8001504:	22ff      	movs	r2, #255	@ 0xff
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e07b      	b.n	8001602 <parse_ascii+0x686>
			}
			//die anderen ASCII-Befehle werden per Binäre-Suche-Funktion eine interne Befehlnummer und ein Attribut zugeordnet
			//und in den Stack eingefügt.
			else
			{
				Binary_Search(ASCII_CMD_MAX, cmd, &cmd_index);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	461a      	mov	r2, r3
 8001510:	495c      	ldr	r1, [pc, #368]	@ (8001684 <parse_ascii+0x708>)
 8001512:	201d      	movs	r0, #29
 8001514:	f000 fb8a 	bl	8001c2c <Binary_Search>
				//uart0_puts(cmd);
				//uart0_puti(cmd_index);

				if (cmd_index != BINARY_INDEX_MAX)
 8001518:	8abb      	ldrh	r3, [r7, #20]
 800151a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800151e:	d06d      	beq.n	80015fc <parse_ascii+0x680>
				{	stack_data.cmd_sender = Q_RS232_ASCII;
 8001520:	2304      	movs	r3, #4
 8001522:	713b      	strb	r3, [r7, #4]
					stack_data.cmd_index = cmd_index;
 8001524:	8abb      	ldrh	r3, [r7, #20]
 8001526:	80fb      	strh	r3, [r7, #6]
					stack_data.cmd_ack = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	723b      	strb	r3, [r7, #8]
					stack_data.next = NONEXT;
 800152c:	23ff      	movs	r3, #255	@ 0xff
 800152e:	743b      	strb	r3, [r7, #16]
					stack_data.prio = PRIO_LEVEL1;
 8001530:	2301      	movs	r3, #1
 8001532:	747b      	strb	r3, [r7, #17]

					if (cmd_index & 1)
 8001534:	8abb      	ldrh	r3, [r7, #20]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d051      	beq.n	80015e2 <parse_ascii+0x666>
					{
						if (z_get_remote_mode() == z_rmt_rs232)
 800153e:	f002 f835 	bl	80035ac <z_get_remote_mode>
 8001542:	4603      	mov	r3, r0
 8001544:	2b01      	cmp	r3, #1
 8001546:	d12f      	bne.n	80015a8 <parse_ascii+0x62c>
						{
							if ((pflag == 1))
 8001548:	4b54      	ldr	r3, [pc, #336]	@ (800169c <parse_ascii+0x720>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b01      	cmp	r3, #1
 8001550:	d116      	bne.n	8001580 <parse_ascii+0x604>
							{
								if (negativ_zahl)
 8001552:	4b53      	ldr	r3, [pc, #332]	@ (80016a0 <parse_ascii+0x724>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <parse_ascii+0x5e8>
								{
									stack_data.parameter = -val;
 800155a:	4b52      	ldr	r3, [pc, #328]	@ (80016a4 <parse_ascii+0x728>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	425b      	negs	r3, r3
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	e002      	b.n	800156a <parse_ascii+0x5ee>
								}
								else
								{ stack_data.parameter = val;
 8001564:	4b4f      	ldr	r3, [pc, #316]	@ (80016a4 <parse_ascii+0x728>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
								}

								stack_data.rwflg = WRITE;
 800156a:	2302      	movs	r3, #2
 800156c:	74bb      	strb	r3, [r7, #18]
								ret = stack_insert_sero(stack_data);
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001572:	f000 ff4f 	bl	8002414 <stack_insert_sero>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	4b47      	ldr	r3, [pc, #284]	@ (8001698 <parse_ascii+0x71c>)
 800157c:	701a      	strb	r2, [r3, #0]
 800157e:	e040      	b.n	8001602 <parse_ascii+0x686>
								//uart0_puti(ret);
								//uart0_puti(stack_data.cmd_index);

							}
							else if(cmd_index == CMD_RESET_ERROR)
 8001580:	8abb      	ldrh	r3, [r7, #20]
 8001582:	2b09      	cmp	r3, #9
 8001584:	d10c      	bne.n	80015a0 <parse_ascii+0x624>
							{
								stack_data.parameter = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
								stack_data.rwflg = WRITE;
 800158a:	2302      	movs	r3, #2
 800158c:	74bb      	strb	r3, [r7, #18]
								ret = stack_insert_sero(stack_data);
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001592:	f000 ff3f 	bl	8002414 <stack_insert_sero>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	4b3f      	ldr	r3, [pc, #252]	@ (8001698 <parse_ascii+0x71c>)
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	e030      	b.n	8001602 <parse_ascii+0x686>
							}
							else
							{
								{ ret =CMR_MISSINGPARAMETER;
 80015a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001698 <parse_ascii+0x71c>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	701a      	strb	r2, [r3, #0]
 80015a6:	e02c      	b.n	8001602 <parse_ascii+0x686>
								}
							};
						}
						else
						{
							if ((cmd_index == CMD_SET_REM_CTL))        //SPC:CTL
 80015a8:	8abb      	ldrh	r3, [r7, #20]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d115      	bne.n	80015da <parse_ascii+0x65e>
							{

								if (negativ_zahl) {
 80015ae:	4b3c      	ldr	r3, [pc, #240]	@ (80016a0 <parse_ascii+0x724>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <parse_ascii+0x642>
									ret = CMR_PARAMETERINVALID;
 80015b6:	4b38      	ldr	r3, [pc, #224]	@ (8001698 <parse_ascii+0x71c>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	e021      	b.n	8001602 <parse_ascii+0x686>
								} else {
									stack_data.parameter = val;
 80015be:	4b39      	ldr	r3, [pc, #228]	@ (80016a4 <parse_ascii+0x728>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	60fb      	str	r3, [r7, #12]
									stack_data.rwflg = WRITE;
 80015c4:	2302      	movs	r3, #2
 80015c6:	74bb      	strb	r3, [r7, #18]
									ret = stack_insert_sero(stack_data);
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015cc:	f000 ff22 	bl	8002414 <stack_insert_sero>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <parse_ascii+0x71c>)
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e013      	b.n	8001602 <parse_ascii+0x686>
								}

							} else {
								ret = CMR_COMMANDDENIED;
 80015da:	4b2f      	ldr	r3, [pc, #188]	@ (8001698 <parse_ascii+0x71c>)
 80015dc:	2207      	movs	r2, #7
 80015de:	701a      	strb	r2, [r3, #0]
 80015e0:	e00f      	b.n	8001602 <parse_ascii+0x686>
							};
						};
					}
					else  //Lese-Operation
					{
						stack_data.parameter = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
						stack_data.rwflg = READ;
 80015e6:	2301      	movs	r3, #1
 80015e8:	74bb      	strb	r3, [r7, #18]
						ret = stack_insert_sero(stack_data);
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ee:	f000 ff11 	bl	8002414 <stack_insert_sero>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b28      	ldr	r3, [pc, #160]	@ (8001698 <parse_ascii+0x71c>)
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e002      	b.n	8001602 <parse_ascii+0x686>
					};

				}
				else         //Falls cmd_index = ASCII_CMD_MAX, d.h. der Befehl ist ungültig.
				{
					ret= CMR_UNKNOWNCOMMAND;
 80015fc:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <parse_ascii+0x71c>)
 80015fe:	2206      	movs	r2, #6
 8001600:	701a      	strb	r2, [r3, #0]
				};
			};

			if (ret != STACK_CMDINSTACK)
 8001602:	4b25      	ldr	r3, [pc, #148]	@ (8001698 <parse_ascii+0x71c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b11      	cmp	r3, #17
 800160a:	d00b      	beq.n	8001624 <parse_ascii+0x6a8>
			{
				output_ascii_cmdack(verbose, crlf, ret);
 800160c:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <parse_ascii+0x70c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4a1f      	ldr	r2, [pc, #124]	@ (8001690 <parse_ascii+0x714>)
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	b2d1      	uxtb	r1, r2
 8001618:	4a1f      	ldr	r2, [pc, #124]	@ (8001698 <parse_ascii+0x71c>)
 800161a:	7812      	ldrb	r2, [r2, #0]
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f8de 	bl	80017e0 <output_ascii_cmdack>
			};

			uartRB_KickTx(&usart3_rb);
 8001624:	4820      	ldr	r0, [pc, #128]	@ (80016a8 <parse_ascii+0x72c>)
 8001626:	f001 fa2f 	bl	8002a88 <uartRB_KickTx>
			strcpy(cmd,"");
 800162a:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <parse_ascii+0x708>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
			val=0;
 8001630:	4b1c      	ldr	r3, [pc, #112]	@ (80016a4 <parse_ascii+0x728>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
			ret=0;
 8001636:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <parse_ascii+0x71c>)
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
			pflag = 0;
 800163c:	4b17      	ldr	r3, [pc, #92]	@ (800169c <parse_ascii+0x720>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
			eflag = 0;
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <parse_ascii+0x730>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
			negativ_zahl = 0;
 8001648:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <parse_ascii+0x724>)
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]

			a_state = get_cmd;
 800164e:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <parse_ascii+0x734>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
			break;
 8001654:	e008      	b.n	8001668 <parse_ascii+0x6ec>

			default:
			a_state = get_cmd;
 8001656:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <parse_ascii+0x734>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
			break;
 800165c:	e004      	b.n	8001668 <parse_ascii+0x6ec>
			break;
 800165e:	bf00      	nop
 8001660:	e002      	b.n	8001668 <parse_ascii+0x6ec>
			break;
 8001662:	bf00      	nop
 8001664:	e000      	b.n	8001668 <parse_ascii+0x6ec>
			break;
 8001666:	bf00      	nop

		//	char1[0]=nc;
		//  if(nzeichen >0)	uart1_put(char1, 1);
		//	versandstart1();

	}while ( ptr < nzeichen );
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <parse_ascii+0x738>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	7dfa      	ldrb	r2, [r7, #23]
 8001670:	429a      	cmp	r2, r3
 8001672:	f4ff ac8b 	bcc.w	8000f8c <parse_ascii+0x10>
}
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	08008bf0 	.word	0x08008bf0
 8001684:	20000148 	.word	0x20000148
 8001688:	20000119 	.word	0x20000119
 800168c:	2000011b 	.word	0x2000011b
 8001690:	2000011a 	.word	0x2000011a
 8001694:	2000011c 	.word	0x2000011c
 8001698:	2000016b 	.word	0x2000016b
 800169c:	20000168 	.word	0x20000168
 80016a0:	2000016a 	.word	0x2000016a
 80016a4:	20000164 	.word	0x20000164
 80016a8:	20000df0 	.word	0x20000df0
 80016ac:	20000169 	.word	0x20000169
 80016b0:	20000002 	.word	0x20000002
 80016b4:	2000012f 	.word	0x2000012f

080016b8 <serialSendAnswer>:

void serialSendAnswer(uint8_t *message)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    uint8_t i;
	uint8_t n = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	77bb      	strb	r3, [r7, #30]
    uint8_t checksum = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	777b      	strb	r3, [r7, #29]
	char buffer[RMT_MAX_PAKET_LENGTH + 1];

		if((message[2] == 0x00) || (message[2] == 0x02) || (message[2] == 0x03) || (message[2] == 0x0A))    //für die Kompabilität vom altem MatchingCube-Programm. später zu löschen
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3302      	adds	r3, #2
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00e      	beq.n	80016f0 <serialSendAnswer+0x38>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3302      	adds	r3, #2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d009      	beq.n	80016f0 <serialSendAnswer+0x38>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3302      	adds	r3, #2
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d004      	beq.n	80016f0 <serialSendAnswer+0x38>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3302      	adds	r3, #2
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b0a      	cmp	r3, #10
 80016ee:	d108      	bne.n	8001702 <serialSendAnswer+0x4a>
		{
			message[2] |= 0x80;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3302      	adds	r3, #2
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3302      	adds	r3, #2
 80016fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	701a      	strb	r2, [r3, #0]
		}

    buffer[n++] = RMT_DLE;
 8001702:	7fbb      	ldrb	r3, [r7, #30]
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	77ba      	strb	r2, [r7, #30]
 8001708:	3320      	adds	r3, #32
 800170a:	443b      	add	r3, r7
 800170c:	223d      	movs	r2, #61	@ 0x3d
 800170e:	f803 2c14 	strb.w	r2, [r3, #-20]
    buffer[n++] = RMT_SOT;
 8001712:	7fbb      	ldrb	r3, [r7, #30]
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	77ba      	strb	r2, [r7, #30]
 8001718:	3320      	adds	r3, #32
 800171a:	443b      	add	r3, r7
 800171c:	2253      	movs	r2, #83	@ 0x53
 800171e:	f803 2c14 	strb.w	r2, [r3, #-20]
    for ( i=0; i<(CMR_DATAPAKET_LENGTH-1); i++ )
 8001722:	2300      	movs	r3, #0
 8001724:	77fb      	strb	r3, [r7, #31]
 8001726:	e025      	b.n	8001774 <serialSendAnswer+0xbc>
    {
        buffer[n++] =message[i];
 8001728:	7ffb      	ldrb	r3, [r7, #31]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	441a      	add	r2, r3
 800172e:	7fbb      	ldrb	r3, [r7, #30]
 8001730:	1c59      	adds	r1, r3, #1
 8001732:	77b9      	strb	r1, [r7, #30]
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	3320      	adds	r3, #32
 8001738:	443b      	add	r3, r7
 800173a:	f803 2c14 	strb.w	r2, [r3, #-20]
        if ( message[i] == RMT_DLE )
 800173e:	7ffb      	ldrb	r3, [r7, #31]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b3d      	cmp	r3, #61	@ 0x3d
 8001748:	d10a      	bne.n	8001760 <serialSendAnswer+0xa8>
        {
            buffer[n++] = message[i];
 800174a:	7ffb      	ldrb	r3, [r7, #31]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	441a      	add	r2, r3
 8001750:	7fbb      	ldrb	r3, [r7, #30]
 8001752:	1c59      	adds	r1, r3, #1
 8001754:	77b9      	strb	r1, [r7, #30]
 8001756:	7812      	ldrb	r2, [r2, #0]
 8001758:	3320      	adds	r3, #32
 800175a:	443b      	add	r3, r7
 800175c:	f803 2c14 	strb.w	r2, [r3, #-20]
            // Die Prüfsumme erstreckt sich nur noch über die NETTO-Payload!
            //checksum += message[i];
        }
        checksum += message[i];
 8001760:	7ffb      	ldrb	r3, [r7, #31]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	7f7b      	ldrb	r3, [r7, #29]
 800176a:	4413      	add	r3, r2
 800176c:	777b      	strb	r3, [r7, #29]
    for ( i=0; i<(CMR_DATAPAKET_LENGTH-1); i++ )
 800176e:	7ffb      	ldrb	r3, [r7, #31]
 8001770:	3301      	adds	r3, #1
 8001772:	77fb      	strb	r3, [r7, #31]
 8001774:	7ffb      	ldrb	r3, [r7, #31]
 8001776:	2b06      	cmp	r3, #6
 8001778:	d9d6      	bls.n	8001728 <serialSendAnswer+0x70>
    }
    buffer[n++] =checksum;
 800177a:	7fbb      	ldrb	r3, [r7, #30]
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	77ba      	strb	r2, [r7, #30]
 8001780:	3320      	adds	r3, #32
 8001782:	443b      	add	r3, r7
 8001784:	7f7a      	ldrb	r2, [r7, #29]
 8001786:	f803 2c14 	strb.w	r2, [r3, #-20]
    if ( checksum == RMT_DLE )
 800178a:	7f7b      	ldrb	r3, [r7, #29]
 800178c:	2b3d      	cmp	r3, #61	@ 0x3d
 800178e:	d107      	bne.n	80017a0 <serialSendAnswer+0xe8>
    {
        buffer[n++] = checksum;
 8001790:	7fbb      	ldrb	r3, [r7, #30]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	77ba      	strb	r2, [r7, #30]
 8001796:	3320      	adds	r3, #32
 8001798:	443b      	add	r3, r7
 800179a:	7f7a      	ldrb	r2, [r7, #29]
 800179c:	f803 2c14 	strb.w	r2, [r3, #-20]
    }
    buffer[n++] = RMT_DLE;
 80017a0:	7fbb      	ldrb	r3, [r7, #30]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	77ba      	strb	r2, [r7, #30]
 80017a6:	3320      	adds	r3, #32
 80017a8:	443b      	add	r3, r7
 80017aa:	223d      	movs	r2, #61	@ 0x3d
 80017ac:	f803 2c14 	strb.w	r2, [r3, #-20]
    buffer[n++] = RMT_EOT;
 80017b0:	7fbb      	ldrb	r3, [r7, #30]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	77ba      	strb	r2, [r7, #30]
 80017b6:	3320      	adds	r3, #32
 80017b8:	443b      	add	r3, r7
 80017ba:	2245      	movs	r2, #69	@ 0x45
 80017bc:	f803 2c14 	strb.w	r2, [r3, #-20]

	uartRB_Put(&usart3_rb, buffer, n);
 80017c0:	7fba      	ldrb	r2, [r7, #30]
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	4619      	mov	r1, r3
 80017c8:	4804      	ldr	r0, [pc, #16]	@ (80017dc <serialSendAnswer+0x124>)
 80017ca:	f001 f9a3 	bl	8002b14 <uartRB_Put>
	uartRB_KickTx(&usart3_rb);
 80017ce:	4803      	ldr	r0, [pc, #12]	@ (80017dc <serialSendAnswer+0x124>)
 80017d0:	f001 f95a 	bl	8002a88 <uartRB_KickTx>
}
 80017d4:	bf00      	nop
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000df0 	.word	0x20000df0

080017e0 <output_ascii_cmdack>:

void output_ascii_cmdack(uint8_t verbose_flg, uint8_t crlf_flg, uint8_t cmd_ack)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b09c      	sub	sp, #112	@ 0x70
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	460b      	mov	r3, r1
 80017ec:	71bb      	strb	r3, [r7, #6]
 80017ee:	4613      	mov	r3, r2
 80017f0:	717b      	strb	r3, [r7, #5]

	if(verbose_flg>0)
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 81e3 	beq.w	8001bc0 <output_ascii_cmdack+0x3e0>
	{
		if(cmd_ack== CMR_SUCCESSFULL)
 80017fa:	797b      	ldrb	r3, [r7, #5]
 80017fc:	2b80      	cmp	r3, #128	@ 0x80
 80017fe:	d105      	bne.n	800180c <output_ascii_cmdack+0x2c>
		{
			uartRB_Put(&usart3_rb,">OK;", 4);
 8001800:	2204      	movs	r2, #4
 8001802:	49ba      	ldr	r1, [pc, #744]	@ (8001aec <output_ascii_cmdack+0x30c>)
 8001804:	48ba      	ldr	r0, [pc, #744]	@ (8001af0 <output_ascii_cmdack+0x310>)
 8001806:	f001 f985 	bl	8002b14 <uartRB_Put>
 800180a:	e1e8      	b.n	8001bde <output_ascii_cmdack+0x3fe>
		}
		else if (cmd_ack==CMR_SEMICOLONONLY)
 800180c:	797b      	ldrb	r3, [r7, #5]
 800180e:	2bff      	cmp	r3, #255	@ 0xff
 8001810:	d105      	bne.n	800181e <output_ascii_cmdack+0x3e>
		{
			uartRB_Put(&usart3_rb,";", 1);
 8001812:	2201      	movs	r2, #1
 8001814:	49b7      	ldr	r1, [pc, #732]	@ (8001af4 <output_ascii_cmdack+0x314>)
 8001816:	48b6      	ldr	r0, [pc, #728]	@ (8001af0 <output_ascii_cmdack+0x310>)
 8001818:	f001 f97c 	bl	8002b14 <uartRB_Put>
 800181c:	e1df      	b.n	8001bde <output_ascii_cmdack+0x3fe>
		}
		else
		{
			if(verbose_flg==1)
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d143      	bne.n	80018ac <output_ascii_cmdack+0xcc>
			{
				char tmp[10];
				char tmp2[12];
				sprintf(tmp,"%3.3u",(cmd_ack & 0x7F));
 8001824:	797b      	ldrb	r3, [r7, #5]
 8001826:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800182a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800182e:	49b2      	ldr	r1, [pc, #712]	@ (8001af8 <output_ascii_cmdack+0x318>)
 8001830:	4618      	mov	r0, r3
 8001832:	f006 fd0f 	bl	8008254 <siprintf>

				if(cmd_ack > 128)
 8001836:	797b      	ldrb	r3, [r7, #5]
 8001838:	2b80      	cmp	r3, #128	@ 0x80
 800183a:	d909      	bls.n	8001850 <output_ascii_cmdack+0x70>
				{
					strcpy(tmp2,">W");
 800183c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001840:	4aae      	ldr	r2, [pc, #696]	@ (8001afc <output_ascii_cmdack+0x31c>)
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	4611      	mov	r1, r2
 8001846:	8019      	strh	r1, [r3, #0]
 8001848:	3302      	adds	r3, #2
 800184a:	0c12      	lsrs	r2, r2, #16
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	e008      	b.n	8001862 <output_ascii_cmdack+0x82>
				}
				else
				{
					strcpy(tmp2,">E");
 8001850:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001854:	4aaa      	ldr	r2, [pc, #680]	@ (8001b00 <output_ascii_cmdack+0x320>)
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	4611      	mov	r1, r2
 800185a:	8019      	strh	r1, [r3, #0]
 800185c:	3302      	adds	r3, #2
 800185e:	0c12      	lsrs	r2, r2, #16
 8001860:	701a      	strb	r2, [r3, #0]
				}
				strcat(tmp2,tmp);
 8001862:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001866:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f006 fd19 	bl	80082a4 <strcat>
				strcat(tmp2,";");
 8001872:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fcdc 	bl	8000234 <strlen>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001884:	4413      	add	r3, r2
 8001886:	499b      	ldr	r1, [pc, #620]	@ (8001af4 <output_ascii_cmdack+0x314>)
 8001888:	461a      	mov	r2, r3
 800188a:	460b      	mov	r3, r1
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	8013      	strh	r3, [r2, #0]
				uartRB_Put(&usart3_rb,tmp2, strlen(tmp2));
 8001890:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fccd 	bl	8000234 <strlen>
 800189a:	4603      	mov	r3, r0
 800189c:	b2da      	uxtb	r2, r3
 800189e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80018a2:	4619      	mov	r1, r3
 80018a4:	4892      	ldr	r0, [pc, #584]	@ (8001af0 <output_ascii_cmdack+0x310>)
 80018a6:	f001 f935 	bl	8002b14 <uartRB_Put>
 80018aa:	e198      	b.n	8001bde <output_ascii_cmdack+0x3fe>
			}
			else if (verbose_flg==2)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	f040 8195 	bne.w	8001bde <output_ascii_cmdack+0x3fe>
			{
				char tmp[35];
				char tmp2[40];
				if(cmd_ack > 128)
 80018b4:	797b      	ldrb	r3, [r7, #5]
 80018b6:	2b80      	cmp	r3, #128	@ 0x80
 80018b8:	d904      	bls.n	80018c4 <output_ascii_cmdack+0xe4>
				{
					strcpy(tmp2,">W:");
 80018ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018be:	4a91      	ldr	r2, [pc, #580]	@ (8001b04 <output_ascii_cmdack+0x324>)
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e003      	b.n	80018cc <output_ascii_cmdack+0xec>
				}
				else
				{
					strcpy(tmp2,">E:");
 80018c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018c8:	4a8f      	ldr	r2, [pc, #572]	@ (8001b08 <output_ascii_cmdack+0x328>)
 80018ca:	601a      	str	r2, [r3, #0]
				}

				switch(cmd_ack & 0xFF)          //(cmd_ack & 0x7F)
 80018cc:	797b      	ldrb	r3, [r7, #5]
 80018ce:	2b8a      	cmp	r3, #138	@ 0x8a
 80018d0:	f000 8087 	beq.w	80019e2 <output_ascii_cmdack+0x202>
 80018d4:	2b8a      	cmp	r3, #138	@ 0x8a
 80018d6:	f300 8144 	bgt.w	8001b62 <output_ascii_cmdack+0x382>
 80018da:	2b83      	cmp	r3, #131	@ 0x83
 80018dc:	d075      	beq.n	80019ca <output_ascii_cmdack+0x1ea>
 80018de:	2b83      	cmp	r3, #131	@ 0x83
 80018e0:	f300 813f 	bgt.w	8001b62 <output_ascii_cmdack+0x382>
 80018e4:	2b1f      	cmp	r3, #31
 80018e6:	dc49      	bgt.n	800197c <output_ascii_cmdack+0x19c>
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f2c0 813a 	blt.w	8001b62 <output_ascii_cmdack+0x382>
 80018ee:	2b1f      	cmp	r3, #31
 80018f0:	f200 8137 	bhi.w	8001b62 <output_ascii_cmdack+0x382>
 80018f4:	a201      	add	r2, pc, #4	@ (adr r2, 80018fc <output_ascii_cmdack+0x11c>)
 80018f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fa:	bf00      	nop
 80018fc:	08001983 	.word	0x08001983
 8001900:	08001997 	.word	0x08001997
 8001904:	08001b63 	.word	0x08001b63
 8001908:	08001b63 	.word	0x08001b63
 800190c:	08001b63 	.word	0x08001b63
 8001910:	08001b63 	.word	0x08001b63
 8001914:	08001a0f 	.word	0x08001a0f
 8001918:	08001a23 	.word	0x08001a23
 800191c:	08001a35 	.word	0x08001a35
 8001920:	08001a9d 	.word	0x08001a9d
 8001924:	08001b63 	.word	0x08001b63
 8001928:	080019f7 	.word	0x080019f7
 800192c:	08001ab1 	.word	0x08001ab1
 8001930:	08001a55 	.word	0x08001a55
 8001934:	08001a67 	.word	0x08001a67
 8001938:	08001a83 	.word	0x08001a83
 800193c:	08001acd 	.word	0x08001acd
 8001940:	08001b63 	.word	0x08001b63
 8001944:	08001b63 	.word	0x08001b63
 8001948:	08001b63 	.word	0x08001b63
 800194c:	08001b63 	.word	0x08001b63
 8001950:	08001b63 	.word	0x08001b63
 8001954:	08001b63 	.word	0x08001b63
 8001958:	08001b63 	.word	0x08001b63
 800195c:	08001b63 	.word	0x08001b63
 8001960:	08001b63 	.word	0x08001b63
 8001964:	08001b63 	.word	0x08001b63
 8001968:	08001b63 	.word	0x08001b63
 800196c:	08001b63 	.word	0x08001b63
 8001970:	08001b63 	.word	0x08001b63
 8001974:	08001b63 	.word	0x08001b63
 8001978:	08001b49 	.word	0x08001b49
 800197c:	2b82      	cmp	r3, #130	@ 0x82
 800197e:	d018      	beq.n	80019b2 <output_ascii_cmdack+0x1d2>
 8001980:	e0ef      	b.n	8001b62 <output_ascii_cmdack+0x382>
				{
					case CMR_COMMANDONDEMAND:
					strcpy(tmp, "No Answer!");
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	4a61      	ldr	r2, [pc, #388]	@ (8001b0c <output_ascii_cmdack+0x32c>)
 8001988:	ca07      	ldmia	r2, {r0, r1, r2}
 800198a:	c303      	stmia	r3!, {r0, r1}
 800198c:	801a      	strh	r2, [r3, #0]
 800198e:	3302      	adds	r3, #2
 8001990:	0c12      	lsrs	r2, r2, #16
 8001992:	701a      	strb	r2, [r3, #0]
					break;
 8001994:	e0ef      	b.n	8001b76 <output_ascii_cmdack+0x396>

					case CMR_PARAMETERINVALID:
					strcpy(tmp, "Parameter Invalid!");
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4a5d      	ldr	r2, [pc, #372]	@ (8001b10 <output_ascii_cmdack+0x330>)
 800199c:	461c      	mov	r4, r3
 800199e:	4615      	mov	r5, r2
 80019a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a4:	682b      	ldr	r3, [r5, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	8022      	strh	r2, [r4, #0]
 80019aa:	3402      	adds	r4, #2
 80019ac:	0c1b      	lsrs	r3, r3, #16
 80019ae:	7023      	strb	r3, [r4, #0]
					break;
 80019b0:	e0e1      	b.n	8001b76 <output_ascii_cmdack+0x396>

					case CMR_PARAMETERCLIPEDMIN:
					strcpy(tmp, "Parameter Clipped to Minimum!");
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	4a57      	ldr	r2, [pc, #348]	@ (8001b14 <output_ascii_cmdack+0x334>)
 80019b8:	461c      	mov	r4, r3
 80019ba:	4615      	mov	r5, r2
 80019bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019c4:	c407      	stmia	r4!, {r0, r1, r2}
 80019c6:	8023      	strh	r3, [r4, #0]
					break;
 80019c8:	e0d5      	b.n	8001b76 <output_ascii_cmdack+0x396>

					case CMR_PARAMETERCLIPEDMAX:
					strcpy(tmp, "Parameter Clipped to Maximum!");
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	4a52      	ldr	r2, [pc, #328]	@ (8001b18 <output_ascii_cmdack+0x338>)
 80019d0:	461c      	mov	r4, r3
 80019d2:	4615      	mov	r5, r2
 80019d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019dc:	c407      	stmia	r4!, {r0, r1, r2}
 80019de:	8023      	strh	r3, [r4, #0]
					break;
 80019e0:	e0c9      	b.n	8001b76 <output_ascii_cmdack+0x396>

					case CMR_PARAMETERADJUSTED:
					strcpy(tmp, "Parameter Adjusted!");
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	4a4d      	ldr	r2, [pc, #308]	@ (8001b1c <output_ascii_cmdack+0x33c>)
 80019e8:	461c      	mov	r4, r3
 80019ea:	4615      	mov	r5, r2
 80019ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f0:	682b      	ldr	r3, [r5, #0]
 80019f2:	6023      	str	r3, [r4, #0]
					break;
 80019f4:	e0bf      	b.n	8001b76 <output_ascii_cmdack+0x396>

					case CMR_WRONGPARAMETERFORMAT:
					strcpy(tmp, "Wrong Parameter Format!");
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	4a49      	ldr	r2, [pc, #292]	@ (8001b20 <output_ascii_cmdack+0x340>)
 80019fc:	461c      	mov	r4, r3
 80019fe:	4615      	mov	r5, r2
 8001a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a08:	e884 0003 	stmia.w	r4, {r0, r1}
					break;
 8001a0c:	e0b3      	b.n	8001b76 <output_ascii_cmdack+0x396>

					case CMR_UNKNOWNCOMMAND:
					strcpy(tmp, "Unknown Command!");
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4a44      	ldr	r2, [pc, #272]	@ (8001b24 <output_ascii_cmdack+0x344>)
 8001a14:	461c      	mov	r4, r3
 8001a16:	4615      	mov	r5, r2
 8001a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a1c:	682b      	ldr	r3, [r5, #0]
 8001a1e:	7023      	strb	r3, [r4, #0]
					break;
 8001a20:	e0a9      	b.n	8001b76 <output_ascii_cmdack+0x396>

					case CMR_COMMANDDENIED:
					strcpy(tmp, "Command Denied!");
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	4a40      	ldr	r2, [pc, #256]	@ (8001b28 <output_ascii_cmdack+0x348>)
 8001a28:	461c      	mov	r4, r3
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					break;
 8001a32:	e0a0      	b.n	8001b76 <output_ascii_cmdack+0x396>

					case CMR_COMMANDNOTSUPPORTED:
					strcpy(tmp, "Command Not Supported!");
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	4a3c      	ldr	r2, [pc, #240]	@ (8001b2c <output_ascii_cmdack+0x34c>)
 8001a3a:	461c      	mov	r4, r3
 8001a3c:	4615      	mov	r5, r2
 8001a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a46:	6020      	str	r0, [r4, #0]
 8001a48:	3404      	adds	r4, #4
 8001a4a:	8021      	strh	r1, [r4, #0]
 8001a4c:	3402      	adds	r4, #2
 8001a4e:	0c0b      	lsrs	r3, r1, #16
 8001a50:	7023      	strb	r3, [r4, #0]
					break;
 8001a52:	e090      	b.n	8001b76 <output_ascii_cmdack+0x396>

					case CMR_EEPROMERROR:
					strcpy(tmp, "EEPROM Error!");
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	4a35      	ldr	r2, [pc, #212]	@ (8001b30 <output_ascii_cmdack+0x350>)
 8001a5a:	461c      	mov	r4, r3
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a60:	c407      	stmia	r4!, {r0, r1, r2}
 8001a62:	8023      	strh	r3, [r4, #0]
					break;
 8001a64:	e087      	b.n	8001b76 <output_ascii_cmdack+0x396>

					case CMR_EEPWRLOCKED:
					strcpy(tmp, "EEPROM Write Lock!");
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	4a32      	ldr	r2, [pc, #200]	@ (8001b34 <output_ascii_cmdack+0x354>)
 8001a6c:	461c      	mov	r4, r3
 8001a6e:	4615      	mov	r5, r2
 8001a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a74:	682b      	ldr	r3, [r5, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	8022      	strh	r2, [r4, #0]
 8001a7a:	3402      	adds	r4, #2
 8001a7c:	0c1b      	lsrs	r3, r3, #16
 8001a7e:	7023      	strb	r3, [r4, #0]
					break;
 8001a80:	e079      	b.n	8001b76 <output_ascii_cmdack+0x396>

					case CMR_WRONGOPMODE:
					strcpy(tmp, "Wrong Operation Mode!");
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	4a2c      	ldr	r2, [pc, #176]	@ (8001b38 <output_ascii_cmdack+0x358>)
 8001a88:	461c      	mov	r4, r3
 8001a8a:	4615      	mov	r5, r2
 8001a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a94:	6020      	str	r0, [r4, #0]
 8001a96:	3404      	adds	r4, #4
 8001a98:	8021      	strh	r1, [r4, #0]
					break;
 8001a9a:	e06c      	b.n	8001b76 <output_ascii_cmdack+0x396>

					case CMR_UNITBUSY:
					strcpy(tmp, "Unit Busy!");
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	4a26      	ldr	r2, [pc, #152]	@ (8001b3c <output_ascii_cmdack+0x35c>)
 8001aa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aa4:	c303      	stmia	r3!, {r0, r1}
 8001aa6:	801a      	strh	r2, [r3, #0]
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	0c12      	lsrs	r2, r2, #16
 8001aac:	701a      	strb	r2, [r3, #0]
					break;
 8001aae:	e062      	b.n	8001b76 <output_ascii_cmdack+0x396>

					case CMR_MISSINGPARAMETER:
					strcpy(tmp, "Missing Parameter!");
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	4a22      	ldr	r2, [pc, #136]	@ (8001b40 <output_ascii_cmdack+0x360>)
 8001ab6:	461c      	mov	r4, r3
 8001ab8:	4615      	mov	r5, r2
 8001aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001abe:	682b      	ldr	r3, [r5, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	8022      	strh	r2, [r4, #0]
 8001ac4:	3402      	adds	r4, #2
 8001ac6:	0c1b      	lsrs	r3, r3, #16
 8001ac8:	7023      	strb	r3, [r4, #0]
					break;
 8001aca:	e054      	b.n	8001b76 <output_ascii_cmdack+0x396>

					case CMR_OPTIONNOTINSTALLED:
					strcpy(tmp, "Required Option Not Installed!");
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b44 <output_ascii_cmdack+0x364>)
 8001ad2:	461c      	mov	r4, r3
 8001ad4:	4615      	mov	r5, r2
 8001ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ada:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ade:	c407      	stmia	r4!, {r0, r1, r2}
 8001ae0:	8023      	strh	r3, [r4, #0]
 8001ae2:	3402      	adds	r4, #2
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	7023      	strb	r3, [r4, #0]
					break;
 8001ae8:	e045      	b.n	8001b76 <output_ascii_cmdack+0x396>
 8001aea:	bf00      	nop
 8001aec:	08008bf4 	.word	0x08008bf4
 8001af0:	20000df0 	.word	0x20000df0
 8001af4:	08008bfc 	.word	0x08008bfc
 8001af8:	08008c00 	.word	0x08008c00
 8001afc:	08008c08 	.word	0x08008c08
 8001b00:	08008c0c 	.word	0x08008c0c
 8001b04:	003a573e 	.word	0x003a573e
 8001b08:	003a453e 	.word	0x003a453e
 8001b0c:	08008c10 	.word	0x08008c10
 8001b10:	08008c1c 	.word	0x08008c1c
 8001b14:	08008c30 	.word	0x08008c30
 8001b18:	08008c50 	.word	0x08008c50
 8001b1c:	08008c70 	.word	0x08008c70
 8001b20:	08008c84 	.word	0x08008c84
 8001b24:	08008c9c 	.word	0x08008c9c
 8001b28:	08008cb0 	.word	0x08008cb0
 8001b2c:	08008cc0 	.word	0x08008cc0
 8001b30:	08008cd8 	.word	0x08008cd8
 8001b34:	08008ce8 	.word	0x08008ce8
 8001b38:	08008cfc 	.word	0x08008cfc
 8001b3c:	08008d14 	.word	0x08008d14
 8001b40:	08008d20 	.word	0x08008d20
 8001b44:	08008d34 	.word	0x08008d34

					case CMR_MALFORMATTEDCOMMAND:
					strcpy(tmp, "Malformatted Command!");
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	4a31      	ldr	r2, [pc, #196]	@ (8001c14 <output_ascii_cmdack+0x434>)
 8001b4e:	461c      	mov	r4, r3
 8001b50:	4615      	mov	r5, r2
 8001b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b5a:	6020      	str	r0, [r4, #0]
 8001b5c:	3404      	adds	r4, #4
 8001b5e:	8021      	strh	r1, [r4, #0]
					break;
 8001b60:	e009      	b.n	8001b76 <output_ascii_cmdack+0x396>


					default:
					sprintf(tmp,"%3.3u",(cmd_ack & 0x7F));
 8001b62:	797b      	ldrb	r3, [r7, #5]
 8001b64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	492a      	ldr	r1, [pc, #168]	@ (8001c18 <output_ascii_cmdack+0x438>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f006 fb70 	bl	8008254 <siprintf>
					break;
 8001b74:	bf00      	nop
				}

				strcat(tmp2,tmp);
 8001b76:	f107 020c 	add.w	r2, r7, #12
 8001b7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f006 fb8f 	bl	80082a4 <strcat>
				strcat(tmp2,";");
 8001b86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fb52 	bl	8000234 <strlen>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b98:	4413      	add	r3, r2
 8001b9a:	4920      	ldr	r1, [pc, #128]	@ (8001c1c <output_ascii_cmdack+0x43c>)
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	8013      	strh	r3, [r2, #0]
				uartRB_Put(&usart3_rb,tmp2, strlen(tmp2));
 8001ba4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fb43 	bl	8000234 <strlen>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4819      	ldr	r0, [pc, #100]	@ (8001c20 <output_ascii_cmdack+0x440>)
 8001bba:	f000 ffab 	bl	8002b14 <uartRB_Put>
 8001bbe:	e00e      	b.n	8001bde <output_ascii_cmdack+0x3fe>
			}
		}
	}
	else
	{
		if (cmd_ack != STACK_CMDINSTACK)
 8001bc0:	797b      	ldrb	r3, [r7, #5]
 8001bc2:	2b11      	cmp	r3, #17
 8001bc4:	d00b      	beq.n	8001bde <output_ascii_cmdack+0x3fe>
		{
			//if (((cmd_ack & 0x80) == CMR_SUCCESSFULL))
			if((cmd_ack == CMR_SEMICOLONONLY) || ((cmd_ack & 0x80) == CMR_SUCCESSFULL))
 8001bc6:	797b      	ldrb	r3, [r7, #5]
 8001bc8:	2bff      	cmp	r3, #255	@ 0xff
 8001bca:	d003      	beq.n	8001bd4 <output_ascii_cmdack+0x3f4>
 8001bcc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	da04      	bge.n	8001bde <output_ascii_cmdack+0x3fe>
				uartRB_Put(&usart3_rb,";", 1);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4911      	ldr	r1, [pc, #68]	@ (8001c1c <output_ascii_cmdack+0x43c>)
 8001bd8:	4811      	ldr	r0, [pc, #68]	@ (8001c20 <output_ascii_cmdack+0x440>)
 8001bda:	f000 ff9b 	bl	8002b14 <uartRB_Put>

		};
	}

	if((crlf_flg & 0x01) > 0)
 8001bde:	79bb      	ldrb	r3, [r7, #6]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	dd04      	ble.n	8001bf2 <output_ascii_cmdack+0x412>
	{	//crlf_char= "\r";        //d.h. CR
		uartRB_Put(&usart3_rb,"\r", 1);
 8001be8:	2201      	movs	r2, #1
 8001bea:	490e      	ldr	r1, [pc, #56]	@ (8001c24 <output_ascii_cmdack+0x444>)
 8001bec:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <output_ascii_cmdack+0x440>)
 8001bee:	f000 ff91 	bl	8002b14 <uartRB_Put>
	}
	if((crlf_flg & 0x02) > 0)
 8001bf2:	79bb      	ldrb	r3, [r7, #6]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	dd04      	ble.n	8001c06 <output_ascii_cmdack+0x426>
	{	//*crlf_char=";
		uartRB_Put(&usart3_rb,"\n", 1);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	490a      	ldr	r1, [pc, #40]	@ (8001c28 <output_ascii_cmdack+0x448>)
 8001c00:	4807      	ldr	r0, [pc, #28]	@ (8001c20 <output_ascii_cmdack+0x440>)
 8001c02:	f000 ff87 	bl	8002b14 <uartRB_Put>
	}
	uartRB_KickTx(&usart3_rb);
 8001c06:	4806      	ldr	r0, [pc, #24]	@ (8001c20 <output_ascii_cmdack+0x440>)
 8001c08:	f000 ff3e 	bl	8002a88 <uartRB_KickTx>
}
 8001c0c:	bf00      	nop
 8001c0e:	3770      	adds	r7, #112	@ 0x70
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bdb0      	pop	{r4, r5, r7, pc}
 8001c14:	08008d54 	.word	0x08008d54
 8001c18:	08008c00 	.word	0x08008c00
 8001c1c:	08008bfc 	.word	0x08008bfc
 8001c20:	20000df0 	.word	0x20000df0
 8001c24:	08008d6c 	.word	0x08008d6c
 8001c28:	08008d70 	.word	0x08008d70

08001c2c <Binary_Search>:

//Die interne Befehlnummer werden für den eingegebenen Befehl zurückgeliefert.
void Binary_Search(uint8_t ncmd, char* key, uint16_t *cmdindex)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	73fb      	strb	r3, [r7, #15]
	volatile uint16_t low = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	83fb      	strh	r3, [r7, #30]
	volatile uint16_t high =  ncmd - 1;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	83bb      	strh	r3, [r7, #28]
	volatile uint16_t mid;
	volatile int sflag;
	volatile uint8_t flag = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	74fb      	strb	r3, [r7, #19]

	while ((low <= high) && (flag == 0))
 8001c4c:	e045      	b.n	8001cda <Binary_Search+0xae>
	{
		mid = ((low + high) >> 1);
 8001c4e:	8bfb      	ldrh	r3, [r7, #30]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	8bbb      	ldrh	r3, [r7, #28]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	105b      	asrs	r3, r3, #1
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	837b      	strh	r3, [r7, #26]
		sflag = strcmp(key, (char*)&(ASCIICmdTable[mid].cmdline));
 8001c60:	8b7b      	ldrh	r3, [r7, #26]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	2316      	movs	r3, #22
 8001c68:	fb02 f303 	mul.w	r3, r2, r3
 8001c6c:	4a27      	ldr	r2, [pc, #156]	@ (8001d0c <Binary_Search+0xe0>)
 8001c6e:	4413      	add	r3, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	68b8      	ldr	r0, [r7, #8]
 8001c74:	f7fe fad4 	bl	8000220 <strcmp>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	617b      	str	r3, [r7, #20]

		if(sflag < 0)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	da12      	bge.n	8001ca8 <Binary_Search+0x7c>
		{
		    if(mid != 0) {
 8001c82:	8b7b      	ldrh	r3, [r7, #26]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <Binary_Search+0x6a>
		        high = mid - 1;
 8001c8a:	8b7b      	ldrh	r3, [r7, #26]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	83bb      	strh	r3, [r7, #28]
 8001c94:	e005      	b.n	8001ca2 <Binary_Search+0x76>
		    } else {
		        if(low != 0) {
 8001c96:	8bfb      	ldrh	r3, [r7, #30]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d028      	beq.n	8001cf0 <Binary_Search+0xc4>
		            high = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	83bb      	strh	r3, [r7, #28]
		        } else {
		            break;
		        }
		    }
			flag = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	74fb      	strb	r3, [r7, #19]
 8001ca6:	e018      	b.n	8001cda <Binary_Search+0xae>
		}
		else if(sflag == 0)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10e      	bne.n	8001ccc <Binary_Search+0xa0>
		{

			*cmdindex =ASCIICmdTable[mid].cmdindex;
 8001cae:	8b7b      	ldrh	r3, [r7, #26]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4a15      	ldr	r2, [pc, #84]	@ (8001d0c <Binary_Search+0xe0>)
 8001cb6:	2316      	movs	r3, #22
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3314      	adds	r3, #20
 8001cc0:	881a      	ldrh	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	801a      	strh	r2, [r3, #0]
			flag = 1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	74fb      	strb	r3, [r7, #19]
 8001cca:	e006      	b.n	8001cda <Binary_Search+0xae>
		}
		else
		{
			low = mid + 1;
 8001ccc:	8b7b      	ldrh	r3, [r7, #26]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	83fb      	strh	r3, [r7, #30]
			flag = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	74fb      	strb	r3, [r7, #19]
	while ((low <= high) && (flag == 0))
 8001cda:	8bfb      	ldrh	r3, [r7, #30]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	8bbb      	ldrh	r3, [r7, #28]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d805      	bhi.n	8001cf2 <Binary_Search+0xc6>
 8001ce6:	7cfb      	ldrb	r3, [r7, #19]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0af      	beq.n	8001c4e <Binary_Search+0x22>
 8001cee:	e000      	b.n	8001cf2 <Binary_Search+0xc6>
		            break;
 8001cf0:	bf00      	nop
		}

	};

	if (flag == 0)   //Falls die Tabelle diesen Befehl nicht enthältet,
 8001cf2:	7cfb      	ldrb	r3, [r7, #19]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d103      	bne.n	8001d02 <Binary_Search+0xd6>
	{
		*cmdindex = BINARY_INDEX_MAX;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d00:	801a      	strh	r2, [r3, #0]
	};
}
 8001d02:	bf00      	nop
 8001d04:	3720      	adds	r7, #32
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	08008d7c 	.word	0x08008d7c

08001d10 <output_ascii_result>:


void output_ascii_result(uint8_t verbose_data, uint8_t crlf_data, stack_item *result_data)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	603a      	str	r2, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	71bb      	strb	r3, [r7, #6]
	//uart0_puts("output");
	switch (result_data->rwflg)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	7b9b      	ldrb	r3, [r3, #14]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d002      	beq.n	8001d2e <output_ascii_result+0x1e>
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d029      	beq.n	8001d80 <output_ascii_result+0x70>
		break;
		case WRITE:
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
		break;
	};
}
 8001d2c:	e030      	b.n	8001d90 <output_ascii_result+0x80>
		switch (result_data->cmd_index)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	885b      	ldrh	r3, [r3, #2]
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d017      	beq.n	8001d66 <output_ascii_result+0x56>
 8001d36:	2b0e      	cmp	r3, #14
 8001d38:	d017      	beq.n	8001d6a <output_ascii_result+0x5a>
			if ((result_data->cmd_ack == CMR_SUCCESSFULL)||(result_data->cmd_ack == CMR_PARAMETERCLIPEDMIN) || (result_data->cmd_ack == CMR_PARAMETERCLIPEDMAX) || (result_data->cmd_ack == CMR_PARAMETERADJUSTED))
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	791b      	ldrb	r3, [r3, #4]
 8001d3e:	2b80      	cmp	r3, #128	@ 0x80
 8001d40:	d00b      	beq.n	8001d5a <output_ascii_result+0x4a>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	791b      	ldrb	r3, [r3, #4]
 8001d46:	2b82      	cmp	r3, #130	@ 0x82
 8001d48:	d007      	beq.n	8001d5a <output_ascii_result+0x4a>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	791b      	ldrb	r3, [r3, #4]
 8001d4e:	2b83      	cmp	r3, #131	@ 0x83
 8001d50:	d003      	beq.n	8001d5a <output_ascii_result+0x4a>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	791b      	ldrb	r3, [r3, #4]
 8001d56:	2b8a      	cmp	r3, #138	@ 0x8a
 8001d58:	d109      	bne.n	8001d6e <output_ascii_result+0x5e>
			{output_ascii(result_data->parameter);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 f850 	bl	8001e04 <output_ascii>
			break;
 8001d64:	e003      	b.n	8001d6e <output_ascii_result+0x5e>
			break;
 8001d66:	bf00      	nop
 8001d68:	e002      	b.n	8001d70 <output_ascii_result+0x60>
			break;
 8001d6a:	bf00      	nop
 8001d6c:	e000      	b.n	8001d70 <output_ascii_result+0x60>
			break;
 8001d6e:	bf00      	nop
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	791a      	ldrb	r2, [r3, #4]
 8001d74:	79b9      	ldrb	r1, [r7, #6]
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fd31 	bl	80017e0 <output_ascii_cmdack>
		break;
 8001d7e:	e007      	b.n	8001d90 <output_ascii_result+0x80>
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	791a      	ldrb	r2, [r3, #4]
 8001d84:	79b9      	ldrb	r1, [r7, #6]
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fd29 	bl	80017e0 <output_ascii_cmdack>
		break;
 8001d8e:	bf00      	nop
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <output_binary_result>:

void output_binary_result(stack_item *cmd)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[7];
	uint16_t s_tmp = cmd->cmd_sender;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	82fb      	strh	r3, [r7, #22]
	uint16_t r_tmp = cmd->cmd_receiver;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	785b      	ldrb	r3, [r3, #1]
 8001daa:	82bb      	strh	r3, [r7, #20]
	int32_t param = cmd->parameter;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]

	buffer[0] = (s_tmp << 5) | (r_tmp << 3);
 8001db2:	8afb      	ldrh	r3, [r7, #22]
 8001db4:	015b      	lsls	r3, r3, #5
 8001db6:	b25a      	sxtb	r2, r3
 8001db8:	8abb      	ldrh	r3, [r7, #20]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	b25b      	sxtb	r3, r3
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	723b      	strb	r3, [r7, #8]
	buffer[1] = cmd->cmd_index;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	885b      	ldrh	r3, [r3, #2]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	727b      	strb	r3, [r7, #9]
	buffer[2] = cmd->cmd_ack;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	791b      	ldrb	r3, [r3, #4]
 8001dd2:	72bb      	strb	r3, [r7, #10]
	buffer[3] = (param >> 24) & 0xFF;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	0e1b      	lsrs	r3, r3, #24
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	72fb      	strb	r3, [r7, #11]
	buffer[4] = (param >> 16) & 0xFF;
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	141b      	asrs	r3, r3, #16
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	733b      	strb	r3, [r7, #12]
	buffer[5] = (param >> 8) & 0xFF;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	121b      	asrs	r3, r3, #8
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	737b      	strb	r3, [r7, #13]
	buffer[6] = param & 0xFF;
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	73bb      	strb	r3, [r7, #14]
	serialSendAnswer(buffer);
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fc5e 	bl	80016b8 <serialSendAnswer>
}
 8001dfc:	bf00      	nop
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <output_ascii>:

 void output_ascii(int32_t val)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	@ 0x30
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	char tmp[34];
	sprintf(tmp,"%-ld",val);
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	490c      	ldr	r1, [pc, #48]	@ (8001e44 <output_ascii+0x40>)
 8001e14:	4618      	mov	r0, r3
 8001e16:	f006 fa1d 	bl	8008254 <siprintf>
	uartRB_Put(&usart3_rb,tmp, strlen(tmp));
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fa08 	bl	8000234 <strlen>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	@ (8001e48 <output_ascii+0x44>)
 8001e30:	f000 fe70 	bl	8002b14 <uartRB_Put>
	uartRB_KickTx(&usart3_rb);
 8001e34:	4804      	ldr	r0, [pc, #16]	@ (8001e48 <output_ascii+0x44>)
 8001e36:	f000 fe27 	bl	8002a88 <uartRB_KickTx>
}
 8001e3a:	bf00      	nop
 8001e3c:	3730      	adds	r7, #48	@ 0x30
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	08008d74 	.word	0x08008d74
 8001e48:	20000df0 	.word	0x20000df0

08001e4c <remote_ascii_verbose>:


uint8_t remote_ascii_verbose(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
	return verbose;
 8001e50:	4b03      	ldr	r3, [pc, #12]	@ (8001e60 <remote_ascii_verbose+0x14>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b2db      	uxtb	r3, r3
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	20000119 	.word	0x20000119

08001e64 <remote_ascii_crlf>:

uint8_t remote_ascii_crlf(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
	return crlf;
 8001e68:	4b03      	ldr	r3, [pc, #12]	@ (8001e78 <remote_ascii_crlf+0x14>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b2db      	uxtb	r3, r3
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	2000011a 	.word	0x2000011a

08001e7c <resultQueue_init>:
//void output_touch_result(stack_item *cmd);
//void spi_SendAnswer(uint8_t *message);

//--------------FUNKTIONSDEFINITIONS-----------------------------------------------------------------------------------------
void resultQueue_init(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
	resultQueue_in = 0;
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <resultQueue_init+0x1c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
	resultQueue_out = 0;
 8001e86:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <resultQueue_init+0x20>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	2000052c 	.word	0x2000052c
 8001e9c:	2000052d 	.word	0x2000052d

08001ea0 <get_anzFrei_resultQueue>:

uint8_t get_anzFrei_resultQueue(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
	int8_t x;
	//ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		x = resultQueue_in - resultQueue_out;
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <get_anzFrei_resultQueue+0x3c>)
 8001ea8:	781a      	ldrb	r2, [r3, #0]
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <get_anzFrei_resultQueue+0x40>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	71fb      	strb	r3, [r7, #7]
		if (x < 0) x = x + RESULT_QUEUE_SIZE;
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da03      	bge.n	8001ec4 <get_anzFrei_resultQueue+0x24>
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	333c      	adds	r3, #60	@ 0x3c
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	71fb      	strb	r3, [r7, #7]
		x = RESULT_QUEUE_SIZE - x;
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	71fb      	strb	r3, [r7, #7]
	}
	return x;
 8001ece:	79fb      	ldrb	r3, [r7, #7]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	2000052c 	.word	0x2000052c
 8001ee0:	2000052d 	.word	0x2000052d

08001ee4 <get_anzBes_resultQueue>:

uint8_t get_anzBes_resultQueue(void)
{	int8_t x;
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
	//ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		x = resultQueue_in - resultQueue_out;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <get_anzBes_resultQueue+0x34>)
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <get_anzBes_resultQueue+0x38>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	71fb      	strb	r3, [r7, #7]
		if (x < 0) x = x + RESULT_QUEUE_SIZE;
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	da03      	bge.n	8001f08 <get_anzBes_resultQueue+0x24>
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	333c      	adds	r3, #60	@ 0x3c
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	71fb      	strb	r3, [r7, #7]
	}
	return x;
 8001f08:	79fb      	ldrb	r3, [r7, #7]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	2000052c 	.word	0x2000052c
 8001f1c:	2000052d 	.word	0x2000052d

08001f20 <resultQueue_push>:

uint8_t resultQueue_push (stack_item  sitem)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	463c      	mov	r4, r7
 8001f28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp = get_anzFrei_resultQueue();
 8001f2c:	f7ff ffb8 	bl	8001ea0 <get_anzFrei_resultQueue>
 8001f30:	4603      	mov	r3, r0
 8001f32:	75bb      	strb	r3, [r7, #22]

	uint8_t flag =0;  // der Flag bedeutet, ob das Hinfuegen des Commando in Queue erfolgreich ist: 0= Nicht erfolgreich, 1= Erfolgreich
 8001f34:	2300      	movs	r3, #0
 8001f36:	75fb      	strb	r3, [r7, #23]

	if (tmp > 1)
 8001f38:	7dbb      	ldrb	r3, [r7, #22]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d919      	bls.n	8001f72 <resultQueue_push+0x52>
	{
		resultQueue[resultQueue_in] = sitem;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <resultQueue_push+0x60>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	4a10      	ldr	r2, [pc, #64]	@ (8001f84 <resultQueue_push+0x64>)
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	4413      	add	r3, r2
 8001f48:	461c      	mov	r4, r3
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		resultQueue_in ++;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <resultQueue_push+0x60>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <resultQueue_push+0x60>)
 8001f5c:	701a      	strb	r2, [r3, #0]
		if (resultQueue_in >= RESULT_QUEUE_SIZE) resultQueue_in =0;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <resultQueue_push+0x60>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b3b      	cmp	r3, #59	@ 0x3b
 8001f64:	d902      	bls.n	8001f6c <resultQueue_push+0x4c>
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <resultQueue_push+0x60>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	75fb      	strb	r3, [r7, #23]
 8001f70:	e001      	b.n	8001f76 <resultQueue_push+0x56>
	}
	else
	{
		flag = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	75fb      	strb	r3, [r7, #23]
	};
	return flag;
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	371c      	adds	r7, #28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd90      	pop	{r4, r7, pc}
 8001f80:	2000052c 	.word	0x2000052c
 8001f84:	2000016c 	.word	0x2000016c

08001f88 <resultQueue_pop>:

void resultQueue_pop(stack_item *sitem)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	uint8_t tmp =get_anzFrei_resultQueue();
 8001f90:	f7ff ff86 	bl	8001ea0 <get_anzFrei_resultQueue>
 8001f94:	4603      	mov	r3, r0
 8001f96:	73fb      	strb	r3, [r7, #15]

	if (tmp < RESULT_QUEUE_SIZE )
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	2b3b      	cmp	r3, #59	@ 0x3b
 8001f9c:	d817      	bhi.n	8001fce <resultQueue_pop+0x46>
	{
		*sitem = resultQueue[resultQueue_out];
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <resultQueue_pop+0x50>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001fdc <resultQueue_pop+0x54>)
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4413      	add	r3, r2
 8001faa:	460c      	mov	r4, r1
 8001fac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		resultQueue_out ++;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <resultQueue_pop+0x50>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <resultQueue_pop+0x50>)
 8001fbc:	701a      	strb	r2, [r3, #0]
		if (resultQueue_out >= RESULT_QUEUE_SIZE) resultQueue_out = 0;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <resultQueue_pop+0x50>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b3b      	cmp	r3, #59	@ 0x3b
 8001fc4:	d903      	bls.n	8001fce <resultQueue_pop+0x46>
 8001fc6:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <resultQueue_pop+0x50>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
	};
	return;
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
}
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd90      	pop	{r4, r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000052d 	.word	0x2000052d
 8001fdc:	2000016c 	.word	0x2000016c

08001fe0 <result_get_sero>:

void result_get_sero(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
	stack_item cmd_tmp;
	uint8_t verbose_tmp = remote_ascii_verbose();
 8001fe6:	f7ff ff31 	bl	8001e4c <remote_ascii_verbose>
 8001fea:	4603      	mov	r3, r0
 8001fec:	75fb      	strb	r3, [r7, #23]
	uint8_t crlf_tmp = remote_ascii_crlf();
 8001fee:	f7ff ff39 	bl	8001e64 <remote_ascii_crlf>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	75bb      	strb	r3, [r7, #22]

	while (get_anzBes_resultQueue() > 0 )
 8001ff6:	e015      	b.n	8002024 <result_get_sero+0x44>
	{
		resultQueue_pop(&cmd_tmp);
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff ffc4 	bl	8001f88 <resultQueue_pop>
		//uart0_puts("result");
		//uart0_puti(cmd_tmp.cmd_index);
		//uart0_puti(cmd_tmp.cmd_ack);
		//uart0_puti(cmd_tmp.parameter);
		switch (cmd_tmp.cmd_sender)
 8002000:	793b      	ldrb	r3, [r7, #4]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d008      	beq.n	8002018 <result_get_sero+0x38>
 8002006:	2b04      	cmp	r3, #4
 8002008:	d10b      	bne.n	8002022 <result_get_sero+0x42>
			//case Q_TOUCHPANEL:
				//output_touch_result(&cmd_tmp);
			//	break;
			case Q_RS232_ASCII:
				//uart0_puts("ASC");
				output_ascii_result(verbose_tmp, crlf_tmp, &cmd_tmp);
 800200a:	1d3a      	adds	r2, r7, #4
 800200c:	7db9      	ldrb	r1, [r7, #22]
 800200e:	7dfb      	ldrb	r3, [r7, #23]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fe7d 	bl	8001d10 <output_ascii_result>
				break;
 8002016:	e005      	b.n	8002024 <result_get_sero+0x44>
			case Q_RS232_BINARY:
				output_binary_result(&cmd_tmp);
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff febc 	bl	8001d98 <output_binary_result>
				break;
 8002020:	e000      	b.n	8002024 <result_get_sero+0x44>
//				output_userport_result(&cmd_tmp);
//			case Q_ZENTRALE:
//				zentrale_match_get_sero(&cmd_tmp);
//				break;
			default:
				break;
 8002022:	bf00      	nop
	while (get_anzBes_resultQueue() > 0 )
 8002024:	f7ff ff5e 	bl	8001ee4 <get_anzBes_resultQueue>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1e4      	bne.n	8001ff8 <result_get_sero+0x18>
		};
	};

	return;
 800202e:	bf00      	nop
}
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800203c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <MX_SPI1_Init+0x74>)
 800203e:	4a1c      	ldr	r2, [pc, #112]	@ (80020b0 <MX_SPI1_Init+0x78>)
 8002040:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002042:	4b1a      	ldr	r3, [pc, #104]	@ (80020ac <MX_SPI1_Init+0x74>)
 8002044:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002048:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800204a:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <MX_SPI1_Init+0x74>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002050:	4b16      	ldr	r3, [pc, #88]	@ (80020ac <MX_SPI1_Init+0x74>)
 8002052:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002056:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002058:	4b14      	ldr	r3, [pc, #80]	@ (80020ac <MX_SPI1_Init+0x74>)
 800205a:	2202      	movs	r2, #2
 800205c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800205e:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <MX_SPI1_Init+0x74>)
 8002060:	2200      	movs	r2, #0
 8002062:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <MX_SPI1_Init+0x74>)
 8002066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800206a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800206c:	4b0f      	ldr	r3, [pc, #60]	@ (80020ac <MX_SPI1_Init+0x74>)
 800206e:	2220      	movs	r2, #32
 8002070:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002072:	4b0e      	ldr	r3, [pc, #56]	@ (80020ac <MX_SPI1_Init+0x74>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <MX_SPI1_Init+0x74>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800207e:	4b0b      	ldr	r3, [pc, #44]	@ (80020ac <MX_SPI1_Init+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002084:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <MX_SPI1_Init+0x74>)
 8002086:	2207      	movs	r2, #7
 8002088:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800208a:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <MX_SPI1_Init+0x74>)
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002090:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <MX_SPI1_Init+0x74>)
 8002092:	2200      	movs	r2, #0
 8002094:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002096:	4805      	ldr	r0, [pc, #20]	@ (80020ac <MX_SPI1_Init+0x74>)
 8002098:	f003 fc86 	bl	80059a8 <HAL_SPI_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020a2:	f7fe fdc0 	bl	8000c26 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000530 	.word	0x20000530
 80020b0:	40013000 	.word	0x40013000

080020b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	@ 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a17      	ldr	r2, [pc, #92]	@ (8002130 <HAL_SPI_MspInit+0x7c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d128      	bne.n	8002128 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020d6:	4b17      	ldr	r3, [pc, #92]	@ (8002134 <HAL_SPI_MspInit+0x80>)
 80020d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020da:	4a16      	ldr	r2, [pc, #88]	@ (8002134 <HAL_SPI_MspInit+0x80>)
 80020dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80020e2:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <HAL_SPI_MspInit+0x80>)
 80020e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <HAL_SPI_MspInit+0x80>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	4a10      	ldr	r2, [pc, #64]	@ (8002134 <HAL_SPI_MspInit+0x80>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <HAL_SPI_MspInit+0x80>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002106:	23e0      	movs	r3, #224	@ 0xe0
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002116:	2305      	movs	r3, #5
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002124:	f002 fa44 	bl	80045b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002128:	bf00      	nop
 800212a:	3728      	adds	r7, #40	@ 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40013000 	.word	0x40013000
 8002134:	40021000 	.word	0x40021000

08002138 <stacks_init>:
uint8_t zstackindex_list_act_get(void);
uint8_t mcstackindex_list_act_get(void);

//--- FUNKTIONSDEFINITIONS --------------------------------------------------------------------------------------------------
void stacks_init(void)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	71fb      	strb	r3, [r7, #7]

	zstackindex_list_act = Z_STACK_SIZE -1;        //alle Stackindexe sind frei
 8002142:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <stacks_init+0x8c>)
 8002144:	221d      	movs	r2, #29
 8002146:	701a      	strb	r2, [r3, #0]
	mcstackindex_list_act = MC_STACK_SIZE -1;
 8002148:	4b1f      	ldr	r3, [pc, #124]	@ (80021c8 <stacks_init+0x90>)
 800214a:	2213      	movs	r2, #19
 800214c:	701a      	strb	r2, [r3, #0]
	mcstack_rest_length = MC_STACK_SIZE - MCSTACK_ZENTRALE_RESERVATION;
 800214e:	4b1f      	ldr	r3, [pc, #124]	@ (80021cc <stacks_init+0x94>)
 8002150:	2212      	movs	r2, #18
 8002152:	701a      	strb	r2, [r3, #0]


	for (i = 0; i < Z_STACK_SIZE; i++)
 8002154:	2300      	movs	r3, #0
 8002156:	71fb      	strb	r3, [r7, #7]
 8002158:	e011      	b.n	800217e <stacks_init+0x46>
	{
		zentrale_stack[i].next = NONEXT;
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	4a1c      	ldr	r2, [pc, #112]	@ (80021d0 <stacks_init+0x98>)
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	4413      	add	r3, r2
 8002162:	330c      	adds	r3, #12
 8002164:	22ff      	movs	r2, #255	@ 0xff
 8002166:	701a      	strb	r2, [r3, #0]
		zstackindex_list[i] = zstackindex_list_act - i;   //alle freien Stackindexe sind abwärts in die Stackindex-Liste(aufwärts) gelegt.
 8002168:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <stacks_init+0x8c>)
 800216a:	7819      	ldrb	r1, [r3, #0]
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	79fa      	ldrb	r2, [r7, #7]
 8002170:	1a8a      	subs	r2, r1, r2
 8002172:	b2d1      	uxtb	r1, r2
 8002174:	4a17      	ldr	r2, [pc, #92]	@ (80021d4 <stacks_init+0x9c>)
 8002176:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < Z_STACK_SIZE; i++)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	3301      	adds	r3, #1
 800217c:	71fb      	strb	r3, [r7, #7]
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	2b1d      	cmp	r3, #29
 8002182:	d9ea      	bls.n	800215a <stacks_init+0x22>
	};

	for (i = 0; i < MC_STACK_SIZE; i++)
 8002184:	2300      	movs	r3, #0
 8002186:	71fb      	strb	r3, [r7, #7]
 8002188:	e011      	b.n	80021ae <stacks_init+0x76>
	{
		mc_stack[i].next = NONEXT;
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	4a12      	ldr	r2, [pc, #72]	@ (80021d8 <stacks_init+0xa0>)
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	4413      	add	r3, r2
 8002192:	330c      	adds	r3, #12
 8002194:	22ff      	movs	r2, #255	@ 0xff
 8002196:	701a      	strb	r2, [r3, #0]
		mcstackindex_list[i] = mcstackindex_list_act - i;
 8002198:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <stacks_init+0x90>)
 800219a:	7819      	ldrb	r1, [r3, #0]
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	79fa      	ldrb	r2, [r7, #7]
 80021a0:	1a8a      	subs	r2, r1, r2
 80021a2:	b2d1      	uxtb	r1, r2
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <stacks_init+0xa4>)
 80021a6:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < MC_STACK_SIZE; i++)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	3301      	adds	r3, #1
 80021ac:	71fb      	strb	r3, [r7, #7]
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	2b13      	cmp	r3, #19
 80021b2:	d9ea      	bls.n	800218a <stacks_init+0x52>
	};
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	200008e8 	.word	0x200008e8
 80021c8:	200008e9 	.word	0x200008e9
 80021cc:	200008ea 	.word	0x200008ea
 80021d0:	20000594 	.word	0x20000594
 80021d4:	200008b4 	.word	0x200008b4
 80021d8:	20000774 	.word	0x20000774
 80021dc:	200008d4 	.word	0x200008d4

080021e0 <stacks_insert_cmd>:

uint8_t stacks_insert_cmd(stack_item stack[], uint8_t stack_length, uint8_t stackindex_list[], stack_item stack_data, uint8_t *stackindexlist_act, uint8_t *stackindex)
{
 80021e0:	b082      	sub	sp, #8
 80021e2:	b490      	push	{r4, r7}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ee:	460b      	mov	r3, r1
 80021f0:	72fb      	strb	r3, [r7, #11]
	uint8_t index_tmp;
	uint8_t flag;

	if ( (*stackindexlist_act >= 0)  && (*stackindexlist_act < stack_length) )          //wenn es einen freien Platz gibt,
 80021f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	7afa      	ldrb	r2, [r7, #11]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d923      	bls.n	8002244 <stacks_insert_cmd+0x64>
	{
		index_tmp = *stackindexlist_act;
 80021fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	75bb      	strb	r3, [r7, #22]
		*stackindex = stackindex_list[index_tmp];                    //fügt einen Element in den Stack ein
 8002202:	7dbb      	ldrb	r3, [r7, #22]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4413      	add	r3, r2
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220c:	701a      	strb	r2, [r3, #0]
		stack[*stackindex] = stack_data;
 800220e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	461c      	mov	r4, r3
 800221a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800221e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if (index_tmp == 0 )                                     //d.h. es keine leer Platz mehr im Stack nach dem Einfügen gibt.
 8002224:	7dbb      	ldrb	r3, [r7, #22]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d103      	bne.n	8002232 <stacks_insert_cmd+0x52>
		{
			*stackindexlist_act = NONEXT;           //NONEXT bezeichnet: der Stack ist voll, weil die negative Zahl nicht erlaubt ist.
 800222a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800222c:	22ff      	movs	r2, #255	@ 0xff
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e005      	b.n	800223e <stacks_insert_cmd+0x5e>
		}
		else
		{
			index_tmp -=1;
 8002232:	7dbb      	ldrb	r3, [r7, #22]
 8002234:	3b01      	subs	r3, #1
 8002236:	75bb      	strb	r3, [r7, #22]
			*stackindexlist_act = index_tmp;
 8002238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800223a:	7dba      	ldrb	r2, [r7, #22]
 800223c:	701a      	strb	r2, [r3, #0]
		};
		flag = STACK_INTSERT_OK;
 800223e:	2314      	movs	r3, #20
 8002240:	75fb      	strb	r3, [r7, #23]
 8002242:	e001      	b.n	8002248 <stacks_insert_cmd+0x68>
	}
	else //Falls der Stack voll ist,
	{
		flag = CMR_UNITBUSY;
 8002244:	2309      	movs	r3, #9
 8002246:	75fb      	strb	r3, [r7, #23]
	};

	return flag;
 8002248:	7dfb      	ldrb	r3, [r7, #23]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bc90      	pop	{r4, r7}
 8002252:	b002      	add	sp, #8
 8002254:	4770      	bx	lr
	...

08002258 <z_mc_stack_insert>:

uint8_t z_mc_stack_insert(stack_item stack_data, uint8_t mc_flg)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b091      	sub	sp, #68	@ 0x44
 800225c:	af06      	add	r7, sp, #24
 800225e:	463c      	mov	r4, r7
 8002260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t flag = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t push_result = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t prio_pushflg = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t stack_index = NONEXT;
 8002276:	23ff      	movs	r3, #255	@ 0xff
 8002278:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t mc_push_enable = 0;  //=0: es ist nicht erlaubt, die Befehlen in den MC- Stack einlegen; > 1: es ist erlaubt; =1: die Befehlen aus der Zentrale;
 800227c:	2300      	movs	r3, #0
 800227e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	//=2: aus der anderen Quellen.

	stack_item stack_tmp;

	if (mc_flg)   // d.h. der Befehl ist für den MC
 8002282:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002286:	2b00      	cmp	r3, #0
 8002288:	d067      	beq.n	800235a <z_mc_stack_insert+0x102>
	{
		if (stack_data.cmd_sender == Q_ZENTRALE)
 800228a:	783b      	ldrb	r3, [r7, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d103      	bne.n	8002298 <z_mc_stack_insert+0x40>
		{
			mc_push_enable = 1;
 8002290:	2301      	movs	r3, #1
 8002292:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002296:	e00e      	b.n	80022b6 <z_mc_stack_insert+0x5e>
		}
		else
		{
			if (mcstack_rest_length  > 0)
 8002298:	4b51      	ldr	r3, [pc, #324]	@ (80023e0 <z_mc_stack_insert+0x188>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <z_mc_stack_insert+0x52>
			{
				mc_push_enable = 2;
 80022a2:	2302      	movs	r3, #2
 80022a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80022a8:	e005      	b.n	80022b6 <z_mc_stack_insert+0x5e>
			}
			else
			{
				mc_push_enable = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				flag = CMR_UNITBUSY;
 80022b0:	2309      	movs	r3, #9
 80022b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			};
		};

		if (mc_push_enable > 0)
 80022b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8089 	beq.w	80023d2 <z_mc_stack_insert+0x17a>
		{
			push_result = stacks_insert_cmd(mc_stack, MC_STACK_SIZE, mcstackindex_list, stack_data, &mcstackindex_list_act, &stack_index);
 80022c0:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 80022c4:	9304      	str	r3, [sp, #16]
 80022c6:	4b47      	ldr	r3, [pc, #284]	@ (80023e4 <z_mc_stack_insert+0x18c>)
 80022c8:	9303      	str	r3, [sp, #12]
 80022ca:	466c      	mov	r4, sp
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	4a43      	ldr	r2, [pc, #268]	@ (80023e8 <z_mc_stack_insert+0x190>)
 80022da:	2114      	movs	r1, #20
 80022dc:	4843      	ldr	r0, [pc, #268]	@ (80023ec <z_mc_stack_insert+0x194>)
 80022de:	f7ff ff7f 	bl	80021e0 <stacks_insert_cmd>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			if (push_result == STACK_INTSERT_OK)
 80022e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80022ec:	2b14      	cmp	r3, #20
 80022ee:	d130      	bne.n	8002352 <z_mc_stack_insert+0xfa>
			{
				prio_pushflg = priolist_push(mc_priolist, MC_STACK_SIZE, mc_priolevel_header,  &mcpriolist_firstunused_index, stack_index, stack_data.prio);
 80022f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022f4:	7b7a      	ldrb	r2, [r7, #13]
 80022f6:	9201      	str	r2, [sp, #4]
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	4b3d      	ldr	r3, [pc, #244]	@ (80023f0 <z_mc_stack_insert+0x198>)
 80022fc:	4a3d      	ldr	r2, [pc, #244]	@ (80023f4 <z_mc_stack_insert+0x19c>)
 80022fe:	2114      	movs	r1, #20
 8002300:	483d      	ldr	r0, [pc, #244]	@ (80023f8 <z_mc_stack_insert+0x1a0>)
 8002302:	f7fe fc96 	bl	8000c32 <priolist_push>
 8002306:	4603      	mov	r3, r0
 8002308:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				if (prio_pushflg )
 800230c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002310:	2b00      	cmp	r3, #0
 8002312:	d013      	beq.n	800233c <z_mc_stack_insert+0xe4>
				{
					flag = STACK_CMDINSTACK;
 8002314:	2311      	movs	r3, #17
 8002316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					if (mc_push_enable == 2)
 800231a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800231e:	2b02      	cmp	r3, #2
 8002320:	d157      	bne.n	80023d2 <z_mc_stack_insert+0x17a>
					{
						if (mcstack_rest_length > 0)
 8002322:	4b2f      	ldr	r3, [pc, #188]	@ (80023e0 <z_mc_stack_insert+0x188>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d052      	beq.n	80023d2 <z_mc_stack_insert+0x17a>
						{
							mcstack_rest_length -=1;                   //die Plätze für die Befehle aus den anderen Quelle ausser der Zentrale wird einen weniger sein.
 800232c:	4b2c      	ldr	r3, [pc, #176]	@ (80023e0 <z_mc_stack_insert+0x188>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b2a      	ldr	r3, [pc, #168]	@ (80023e0 <z_mc_stack_insert+0x188>)
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	e04a      	b.n	80023d2 <z_mc_stack_insert+0x17a>

					};
				}
				else
				{
					mcstack_pop(&stack_tmp, stack_data.prio);
 800233c:	7b7a      	ldrb	r2, [r7, #13]
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f000 f87f 	bl	8002448 <mcstack_pop>
					flag = STACK_PRIOLIST_ERROR;
 800234a:	2313      	movs	r3, #19
 800234c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002350:	e03f      	b.n	80023d2 <z_mc_stack_insert+0x17a>
				}
			}
			else
			{
				flag = CMR_UNITBUSY;
 8002352:	2309      	movs	r3, #9
 8002354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002358:	e03b      	b.n	80023d2 <z_mc_stack_insert+0x17a>
		};
	}
	else //d.h. der Befehl wird an die Zentrale gesendet
	{

		push_result = stacks_insert_cmd(zentrale_stack, Z_STACK_SIZE, zstackindex_list, stack_data, &zstackindex_list_act, &stack_index);
 800235a:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800235e:	9304      	str	r3, [sp, #16]
 8002360:	4b26      	ldr	r3, [pc, #152]	@ (80023fc <z_mc_stack_insert+0x1a4>)
 8002362:	9303      	str	r3, [sp, #12]
 8002364:	466c      	mov	r4, sp
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800236c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	4a23      	ldr	r2, [pc, #140]	@ (8002400 <z_mc_stack_insert+0x1a8>)
 8002374:	211e      	movs	r1, #30
 8002376:	4823      	ldr	r0, [pc, #140]	@ (8002404 <z_mc_stack_insert+0x1ac>)
 8002378:	f7ff ff32 	bl	80021e0 <stacks_insert_cmd>
 800237c:	4603      	mov	r3, r0
 800237e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		if (push_result == STACK_INTSERT_OK)
 8002382:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002386:	2b14      	cmp	r3, #20
 8002388:	d120      	bne.n	80023cc <z_mc_stack_insert+0x174>
		{
			prio_pushflg = priolist_push(z_priolist, Z_STACK_SIZE, z_priolevel_header, &zpriolist_firstunused_index, stack_index, stack_data.prio);
 800238a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800238e:	7b7a      	ldrb	r2, [r7, #13]
 8002390:	9201      	str	r2, [sp, #4]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	4b1c      	ldr	r3, [pc, #112]	@ (8002408 <z_mc_stack_insert+0x1b0>)
 8002396:	4a1d      	ldr	r2, [pc, #116]	@ (800240c <z_mc_stack_insert+0x1b4>)
 8002398:	211e      	movs	r1, #30
 800239a:	481d      	ldr	r0, [pc, #116]	@ (8002410 <z_mc_stack_insert+0x1b8>)
 800239c:	f7fe fc49 	bl	8000c32 <priolist_push>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			if (prio_pushflg )
 80023a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <z_mc_stack_insert+0x15e>
			{
				flag = STACK_CMDINSTACK;
 80023ae:	2311      	movs	r3, #17
 80023b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80023b4:	e00d      	b.n	80023d2 <z_mc_stack_insert+0x17a>
			}
			else
			{
				zstack_pop(&stack_tmp, stack_data.prio);
 80023b6:	7b7a      	ldrb	r2, [r7, #13]
 80023b8:	f107 0310 	add.w	r3, r7, #16
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f898 	bl	80024f4 <zstack_pop>
				flag = STACK_PRIOLIST_ERROR;
 80023c4:	2313      	movs	r3, #19
 80023c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80023ca:	e002      	b.n	80023d2 <z_mc_stack_insert+0x17a>
			} ;
		}
		else
		{

			flag = CMR_UNITBUSY;
 80023cc:	2309      	movs	r3, #9
 80023ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		};
	};
	return flag;
 80023d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	372c      	adds	r7, #44	@ 0x2c
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd90      	pop	{r4, r7, pc}
 80023de:	bf00      	nop
 80023e0:	200008ea 	.word	0x200008ea
 80023e4:	200008e9 	.word	0x200008e9
 80023e8:	200008d4 	.word	0x200008d4
 80023ec:	20000774 	.word	0x20000774
 80023f0:	20000118 	.word	0x20000118
 80023f4:	20000114 	.word	0x20000114
 80023f8:	200000e8 	.word	0x200000e8
 80023fc:	200008e8 	.word	0x200008e8
 8002400:	200008b4 	.word	0x200008b4
 8002404:	20000594 	.word	0x20000594
 8002408:	20000117 	.word	0x20000117
 800240c:	20000110 	.word	0x20000110
 8002410:	200000ac 	.word	0x200000ac

08002414 <stack_insert_sero>:



uint8_t stack_insert_sero(stack_item stack_data)
{
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b089      	sub	sp, #36	@ 0x24
 8002418:	af02      	add	r7, sp, #8
 800241a:	463c      	mov	r4, r7
 800241c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t flag = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	75fb      	strb	r3, [r7, #23]
	uint8_t mc_flg = 0;                            //bezeichnet, dass der Befehl für die Zentrale ist, wenn es 0 ist; für den MC , wenn es 1 ist.
 8002424:	2300      	movs	r3, #0
 8002426:	75bb      	strb	r3, [r7, #22]

	//hier gibt es nur die Befehle für die Zentrale,

	mc_flg = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	75bb      	strb	r3, [r7, #22]
	flag = z_mc_stack_insert(stack_data, mc_flg);
 800242c:	7dbb      	ldrb	r3, [r7, #22]
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	463b      	mov	r3, r7
 8002432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002434:	f7ff ff10 	bl	8002258 <z_mc_stack_insert>
 8002438:	4603      	mov	r3, r0
 800243a:	75fb      	strb	r3, [r7, #23]
	return flag;
 800243c:	7dfb      	ldrb	r3, [r7, #23]
}
 800243e:	4618      	mov	r0, r3
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd90      	pop	{r4, r7, pc}
	...

08002448 <mcstack_pop>:


uint8_t mcstack_pop(stack_item *sitem, uint8_t priolevel)
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	70fb      	strb	r3, [r7, #3]
	uint8_t flag = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
	uint8_t sindex;

	sindex = priolist_pop(mc_priolist, mc_priolevel_header, &mcpriolist_firstunused_index, priolevel);
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	4a1f      	ldr	r2, [pc, #124]	@ (80024d8 <mcstack_pop+0x90>)
 800245c:	491f      	ldr	r1, [pc, #124]	@ (80024dc <mcstack_pop+0x94>)
 800245e:	4820      	ldr	r0, [pc, #128]	@ (80024e0 <mcstack_pop+0x98>)
 8002460:	f7fe fc93 	bl	8000d8a <priolist_pop>
 8002464:	4603      	mov	r3, r0
 8002466:	73bb      	strb	r3, [r7, #14]
	if (sindex == NONEXT)  // die zu der Priorität entsprechende MCStacklist ist leer
 8002468:	7bbb      	ldrb	r3, [r7, #14]
 800246a:	2bff      	cmp	r3, #255	@ 0xff
 800246c:	d102      	bne.n	8002474 <mcstack_pop+0x2c>
	{
		flag = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	e02c      	b.n	80024ce <mcstack_pop+0x86>

	}
	else
	{

			*sitem = mc_stack[sindex];
 8002474:	7bbb      	ldrb	r3, [r7, #14]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4a1a      	ldr	r2, [pc, #104]	@ (80024e4 <mcstack_pop+0x9c>)
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	4413      	add	r3, r2
 800247e:	460c      	mov	r4, r1
 8002480:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002482:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if (mcstackindex_list_act == NONEXT)
 8002486:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <mcstack_pop+0xa0>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2bff      	cmp	r3, #255	@ 0xff
 800248c:	d103      	bne.n	8002496 <mcstack_pop+0x4e>
			{
				mcstackindex_list_act =0;
 800248e:	4b16      	ldr	r3, [pc, #88]	@ (80024e8 <mcstack_pop+0xa0>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	e005      	b.n	80024a2 <mcstack_pop+0x5a>

			}
			else
			{
				mcstackindex_list_act +=1;
 8002496:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <mcstack_pop+0xa0>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <mcstack_pop+0xa0>)
 80024a0:	701a      	strb	r2, [r3, #0]

			};

			mcstackindex_list[mcstackindex_list_act] = sindex;
 80024a2:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <mcstack_pop+0xa0>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	4619      	mov	r1, r3
 80024a8:	4a10      	ldr	r2, [pc, #64]	@ (80024ec <mcstack_pop+0xa4>)
 80024aa:	7bbb      	ldrb	r3, [r7, #14]
 80024ac:	5453      	strb	r3, [r2, r1]

			if (mc_stack[sindex].cmd_sender != Q_ZENTRALE)
 80024ae:	7bbb      	ldrb	r3, [r7, #14]
 80024b0:	4a0c      	ldr	r2, [pc, #48]	@ (80024e4 <mcstack_pop+0x9c>)
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	4413      	add	r3, r2
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d006      	beq.n	80024ca <mcstack_pop+0x82>
			{
				mcstack_rest_length += 1;
 80024bc:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <mcstack_pop+0xa8>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	3301      	adds	r3, #1
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	@ (80024f0 <mcstack_pop+0xa8>)
 80024c8:	701a      	strb	r2, [r3, #0]
			};

			flag = 1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]

	};
	return flag;
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	20000118 	.word	0x20000118
 80024dc:	20000114 	.word	0x20000114
 80024e0:	200000e8 	.word	0x200000e8
 80024e4:	20000774 	.word	0x20000774
 80024e8:	200008e9 	.word	0x200008e9
 80024ec:	200008d4 	.word	0x200008d4
 80024f0:	200008ea 	.word	0x200008ea

080024f4 <zstack_pop>:

uint8_t zstack_pop(stack_item *sitem, uint8_t priolevel)
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	70fb      	strb	r3, [r7, #3]
	uint8_t flag = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]
	uint8_t sindex;
	//uint8_t indexlist_tmp;

	sindex =  priolist_pop(z_priolist, z_priolevel_header, &zpriolist_firstunused_index, priolevel);
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	4a18      	ldr	r2, [pc, #96]	@ (8002568 <zstack_pop+0x74>)
 8002508:	4918      	ldr	r1, [pc, #96]	@ (800256c <zstack_pop+0x78>)
 800250a:	4819      	ldr	r0, [pc, #100]	@ (8002570 <zstack_pop+0x7c>)
 800250c:	f7fe fc3d 	bl	8000d8a <priolist_pop>
 8002510:	4603      	mov	r3, r0
 8002512:	73bb      	strb	r3, [r7, #14]

	if (sindex == NONEXT)  // die zu der Priorität entsprechende MCStacklist ist leer
 8002514:	7bbb      	ldrb	r3, [r7, #14]
 8002516:	2bff      	cmp	r3, #255	@ 0xff
 8002518:	d102      	bne.n	8002520 <zstack_pop+0x2c>
	{
		flag = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	e01e      	b.n	800255e <zstack_pop+0x6a>

	}
	else
	{
		*sitem = zentrale_stack[sindex];
 8002520:	7bbb      	ldrb	r3, [r7, #14]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4a13      	ldr	r2, [pc, #76]	@ (8002574 <zstack_pop+0x80>)
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	4413      	add	r3, r2
 800252a:	460c      	mov	r4, r1
 800252c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800252e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if (zstackindex_list_act == NONEXT)
 8002532:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <zstack_pop+0x84>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2bff      	cmp	r3, #255	@ 0xff
 8002538:	d103      	bne.n	8002542 <zstack_pop+0x4e>
		{
			zstackindex_list_act = 0;
 800253a:	4b0f      	ldr	r3, [pc, #60]	@ (8002578 <zstack_pop+0x84>)
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	e005      	b.n	800254e <zstack_pop+0x5a>
		}
		else
		{
			zstackindex_list_act +=1;
 8002542:	4b0d      	ldr	r3, [pc, #52]	@ (8002578 <zstack_pop+0x84>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	3301      	adds	r3, #1
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <zstack_pop+0x84>)
 800254c:	701a      	strb	r2, [r3, #0]
		};
		zstackindex_list[zstackindex_list_act] = sindex;
 800254e:	4b0a      	ldr	r3, [pc, #40]	@ (8002578 <zstack_pop+0x84>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	4619      	mov	r1, r3
 8002554:	4a09      	ldr	r2, [pc, #36]	@ (800257c <zstack_pop+0x88>)
 8002556:	7bbb      	ldrb	r3, [r7, #14]
 8002558:	5453      	strb	r3, [r2, r1]

		flag = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]

	};
	return flag;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	bd90      	pop	{r4, r7, pc}
 8002568:	20000117 	.word	0x20000117
 800256c:	20000110 	.word	0x20000110
 8002570:	200000ac 	.word	0x200000ac
 8002574:	20000594 	.word	0x20000594
 8002578:	200008e8 	.word	0x200008e8
 800257c:	200008b4 	.word	0x200008b4

08002580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002586:	4b0f      	ldr	r3, [pc, #60]	@ (80025c4 <HAL_MspInit+0x44>)
 8002588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258a:	4a0e      	ldr	r2, [pc, #56]	@ (80025c4 <HAL_MspInit+0x44>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6613      	str	r3, [r2, #96]	@ 0x60
 8002592:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <HAL_MspInit+0x44>)
 8002594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <HAL_MspInit+0x44>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a2:	4a08      	ldr	r2, [pc, #32]	@ (80025c4 <HAL_MspInit+0x44>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_MspInit+0x44>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80025b6:	f002 fa6b 	bl	8004a90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000

080025c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <NMI_Handler+0x4>

080025d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <HardFault_Handler+0x4>

080025d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <MemManage_Handler+0x4>

080025e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <BusFault_Handler+0x4>

080025e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <UsageFault_Handler+0x4>

080025f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800261e:	f001 fe45 	bl	80042ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	@ (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	@ (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f005 fe34 	bl	80082c4 <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	@ (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	@ (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a05      	ldr	r2, [pc, #20]	@ (800268c <_sbrk+0x64>)
 8002678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20020000 	.word	0x20020000
 8002688:	00000400 	.word	0x00000400
 800268c:	200008ec 	.word	0x200008ec
 8002690:	200013e0 	.word	0x200013e0

08002694 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002698:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <SystemInit+0x20>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	4a05      	ldr	r2, [pc, #20]	@ (80026b4 <SystemInit+0x20>)
 80026a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08c      	sub	sp, #48	@ 0x30
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026be:	f107 0320 	add.w	r3, r7, #32
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80026cc:	f107 030c 	add.w	r3, r7, #12
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026dc:	463b      	mov	r3, r7
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026e6:	4b27      	ldr	r3, [pc, #156]	@ (8002784 <MX_TIM1_Init+0xcc>)
 80026e8:	4a27      	ldr	r2, [pc, #156]	@ (8002788 <MX_TIM1_Init+0xd0>)
 80026ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80026ec:	4b25      	ldr	r3, [pc, #148]	@ (8002784 <MX_TIM1_Init+0xcc>)
 80026ee:	22a0      	movs	r2, #160	@ 0xa0
 80026f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f2:	4b24      	ldr	r3, [pc, #144]	@ (8002784 <MX_TIM1_Init+0xcc>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59;
 80026f8:	4b22      	ldr	r3, [pc, #136]	@ (8002784 <MX_TIM1_Init+0xcc>)
 80026fa:	223b      	movs	r2, #59	@ 0x3b
 80026fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fe:	4b21      	ldr	r3, [pc, #132]	@ (8002784 <MX_TIM1_Init+0xcc>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002704:	4b1f      	ldr	r3, [pc, #124]	@ (8002784 <MX_TIM1_Init+0xcc>)
 8002706:	2200      	movs	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270a:	4b1e      	ldr	r3, [pc, #120]	@ (8002784 <MX_TIM1_Init+0xcc>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002710:	481c      	ldr	r0, [pc, #112]	@ (8002784 <MX_TIM1_Init+0xcc>)
 8002712:	f003 f9f4 	bl	8005afe <HAL_TIM_Base_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800271c:	f7fe fa83 	bl	8000c26 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002724:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002726:	f107 0320 	add.w	r3, r7, #32
 800272a:	4619      	mov	r1, r3
 800272c:	4815      	ldr	r0, [pc, #84]	@ (8002784 <MX_TIM1_Init+0xcc>)
 800272e:	f003 fa3d 	bl	8005bac <HAL_TIM_ConfigClockSource>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002738:	f7fe fa75 	bl	8000c26 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	4619      	mov	r1, r3
 800274a:	480e      	ldr	r0, [pc, #56]	@ (8002784 <MX_TIM1_Init+0xcc>)
 800274c:	f003 fb3a 	bl	8005dc4 <HAL_TIM_SlaveConfigSynchro>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002756:	f7fe fa66 	bl	8000c26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002766:	463b      	mov	r3, r7
 8002768:	4619      	mov	r1, r3
 800276a:	4806      	ldr	r0, [pc, #24]	@ (8002784 <MX_TIM1_Init+0xcc>)
 800276c:	f003 fd92 	bl	8006294 <HAL_TIMEx_MasterConfigSynchronization>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002776:	f7fe fa56 	bl	8000c26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800277a:	bf00      	nop
 800277c:	3730      	adds	r7, #48	@ 0x30
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200008f0 	.word	0x200008f0
 8002788:	40012c00 	.word	0x40012c00

0800278c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0a      	ldr	r2, [pc, #40]	@ (80027c4 <HAL_TIM_Base_MspInit+0x38>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10b      	bne.n	80027b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800279e:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <HAL_TIM_Base_MspInit+0x3c>)
 80027a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a2:	4a09      	ldr	r2, [pc, #36]	@ (80027c8 <HAL_TIM_Base_MspInit+0x3c>)
 80027a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80027aa:	4b07      	ldr	r3, [pc, #28]	@ (80027c8 <HAL_TIM_Base_MspInit+0x3c>)
 80027ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40012c00 	.word	0x40012c00
 80027c8:	40021000 	.word	0x40021000

080027cc <set_ct_hbeat>:
    else return 0;
}

// HEARTBEAT Stoppuhr setzen
void set_ct_hbeat(uint16_t ct_hbeatval)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	80fb      	strh	r3, [r7, #6]
    ct_hbeat = ct_hbeatval;
 80027d6:	4a04      	ldr	r2, [pc, #16]	@ (80027e8 <set_ct_hbeat+0x1c>)
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	8013      	strh	r3, [r2, #0]

}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	2000093c 	.word	0x2000093c

080027ec <ct_hbeat_null>:

// HEARTBEAT Stoppuhr abfragen
uint8_t ct_hbeat_null(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_hbeat;
 80027f2:	4b07      	ldr	r3, [pc, #28]	@ (8002810 <ct_hbeat_null+0x24>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <ct_hbeat_null+0x16>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <ct_hbeat_null+0x18>
    else return 0;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	2000093c 	.word	0x2000093c

08002814 <ct_init_null>:

}

// INIT Stoppuhr abfragen
uint8_t ct_init_null(void)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_init;
 800281a:	4b07      	ldr	r3, [pc, #28]	@ (8002838 <ct_init_null+0x24>)
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <ct_init_null+0x16>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <ct_init_null+0x18>
    else return 0;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	2000093e 	.word	0x2000093e

0800283c <HAL_UART_RxCpltCallback>:
int16_t rb_free_rx(UartRB *p);
int16_t rb_free_tx(UartRB *p);
//----- INTERRUPT ROUTINEN ----------------------------------------------------

// Reception interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	uartRB_OnRxCplt(&uart4_rb, huart);
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4807      	ldr	r0, [pc, #28]	@ (8002864 <HAL_UART_RxCpltCallback+0x28>)
 8002848:	f000 f812 	bl	8002870 <uartRB_OnRxCplt>
	uartRB_OnRxCplt(&uart5_rb, huart);
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4806      	ldr	r0, [pc, #24]	@ (8002868 <HAL_UART_RxCpltCallback+0x2c>)
 8002850:	f000 f80e 	bl	8002870 <uartRB_OnRxCplt>
	uartRB_OnRxCplt(&usart1_rb, huart);
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4805      	ldr	r0, [pc, #20]	@ (800286c <HAL_UART_RxCpltCallback+0x30>)
 8002858:	f000 f80a 	bl	8002870 <uartRB_OnRxCplt>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000940 	.word	0x20000940
 8002868:	20000ad0 	.word	0x20000ad0
 800286c:	20000c60 	.word	0x20000c60

08002870 <uartRB_OnRxCplt>:
	uartRB_OnTxCplt(&uart4_rb, huart);
	uartRB_OnTxCplt(&uart5_rb, huart);
	uartRB_OnTxCplt(&usart1_rb, huart);
}

void uartRB_OnRxCplt(UartRB *p, UART_HandleTypeDef *huart) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
	if (huart != p->huart)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d12d      	bne.n	80028e0 <uartRB_OnRxCplt+0x70>
		return;

	if (1 < rb_free_rx(p))                        // noch Platz f�r ein Zeichen?
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f8ac 	bl	80029e2 <rb_free_rx>
 800288a:	4603      	mov	r3, r0
 800288c:	2b01      	cmp	r3, #1
 800288e:	dd19      	ble.n	80028c4 <uartRB_OnRxCplt+0x54>
			{
		p->rx[p->rx_in] = p->it_rx;                      // Zeichen �bernehmen
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	895b      	ldrh	r3, [r3, #10]
 8002894:	b29b      	uxth	r3, r3
 8002896:	4619      	mov	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	440b      	add	r3, r1
 80028a2:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		p->rx_in++;                                       // Zeiger weiterr�cken
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	895b      	ldrh	r3, [r3, #10]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	815a      	strh	r2, [r3, #10]
		if (p->rx_in >= BUFLEN)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	895b      	ldrh	r3, [r3, #10]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b7e      	cmp	r3, #126	@ 0x7e
 80028bc:	d902      	bls.n	80028c4 <uartRB_OnRxCplt+0x54>
			p->rx_in = 0;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	815a      	strh	r2, [r3, #10]
	}

	while (HAL_UART_Receive_IT(p->huart, &p->it_rx, 1) != HAL_OK) {
 80028c4:	bf00      	nop
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80028d0:	2201      	movs	r2, #1
 80028d2:	4619      	mov	r1, r3
 80028d4:	f003 fe58 	bl	8006588 <HAL_UART_Receive_IT>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f3      	bne.n	80028c6 <uartRB_OnRxCplt+0x56>
 80028de:	e000      	b.n	80028e2 <uartRB_OnRxCplt+0x72>
		return;
 80028e0:	bf00      	nop
	}
}
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <uart_initAll>:

//----- FUNKTIONSDEFINITIONEN -------------------------------------------------

/******************** RS232 ***********************/

void uart_initAll(void) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	uartRB_Init(&uart4_rb, &huart4, UART4_IRQn);
 80028ec:	2234      	movs	r2, #52	@ 0x34
 80028ee:	490a      	ldr	r1, [pc, #40]	@ (8002918 <uart_initAll+0x30>)
 80028f0:	480a      	ldr	r0, [pc, #40]	@ (800291c <uart_initAll+0x34>)
 80028f2:	f000 f821 	bl	8002938 <uartRB_Init>
	uartRB_Init(&uart5_rb, &huart5, UART5_IRQn);
 80028f6:	2235      	movs	r2, #53	@ 0x35
 80028f8:	4909      	ldr	r1, [pc, #36]	@ (8002920 <uart_initAll+0x38>)
 80028fa:	480a      	ldr	r0, [pc, #40]	@ (8002924 <uart_initAll+0x3c>)
 80028fc:	f000 f81c 	bl	8002938 <uartRB_Init>
	uartRB_Init(&usart1_rb, &huart1, USART1_IRQn);
 8002900:	2225      	movs	r2, #37	@ 0x25
 8002902:	4909      	ldr	r1, [pc, #36]	@ (8002928 <uart_initAll+0x40>)
 8002904:	4809      	ldr	r0, [pc, #36]	@ (800292c <uart_initAll+0x44>)
 8002906:	f000 f817 	bl	8002938 <uartRB_Init>
	uartRB_Init(&usart3_rb, &huart3, USART3_IRQn);
 800290a:	2227      	movs	r2, #39	@ 0x27
 800290c:	4908      	ldr	r1, [pc, #32]	@ (8002930 <uart_initAll+0x48>)
 800290e:	4809      	ldr	r0, [pc, #36]	@ (8002934 <uart_initAll+0x4c>)
 8002910:	f000 f812 	bl	8002938 <uartRB_Init>
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000f80 	.word	0x20000f80
 800291c:	20000940 	.word	0x20000940
 8002920:	20001014 	.word	0x20001014
 8002924:	20000ad0 	.word	0x20000ad0
 8002928:	200010a8 	.word	0x200010a8
 800292c:	20000c60 	.word	0x20000c60
 8002930:	200011d0 	.word	0x200011d0
 8002934:	20000df0 	.word	0x20000df0

08002938 <uartRB_Init>:

void uartRB_Init(UartRB *p, UART_HandleTypeDef *huart, IRQn_Type irqn) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	4613      	mov	r3, r2
 8002944:	71fb      	strb	r3, [r7, #7]
	p->huart = huart;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	601a      	str	r2, [r3, #0]
	p->irqn = irqn;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	79fa      	ldrb	r2, [r7, #7]
 8002950:	711a      	strb	r2, [r3, #4]
	p->tx_in = p->tx_out = p->rx_in = p->rx_out = 0;
 8002952:	2200      	movs	r2, #0
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4611      	mov	r1, r2
 8002958:	8199      	strh	r1, [r3, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4611      	mov	r1, r2
 800295e:	8159      	strh	r1, [r3, #10]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4611      	mov	r1, r2
 8002964:	8119      	strh	r1, [r3, #8]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	80da      	strh	r2, [r3, #6]
	HAL_UART_Receive_IT(p->huart, &p->it_rx, 1);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002974:	2201      	movs	r2, #1
 8002976:	4619      	mov	r1, r3
 8002978:	f003 fe06 	bl	8006588 <HAL_UART_Receive_IT>
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <rb_free_tx>:

int16_t rb_free_tx(UartRB *p) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	int16_t x;
	HAL_NVIC_DisableIRQ(p->irqn);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002992:	4618      	mov	r0, r3
 8002994:	f001 fdf1 	bl	800457a <HAL_NVIC_DisableIRQ>
	x = (int16_t) p->tx_in - (int8_t) p->tx_out;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	88db      	ldrh	r3, [r3, #6]
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	891b      	ldrh	r3, [r3, #8]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	b25b      	sxtb	r3, r3
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 80029ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da03      	bge.n	80029be <rb_free_tx+0x3a>
		x += BUFLEN;
 80029b6:	89fb      	ldrh	r3, [r7, #14]
 80029b8:	337f      	adds	r3, #127	@ 0x7f
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	81fb      	strh	r3, [r7, #14]
	x = BUFLEN - x;
 80029be:	89fb      	ldrh	r3, [r7, #14]
 80029c0:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_EnableIRQ(p->irqn);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 fdc5 	bl	800455e <HAL_NVIC_EnableIRQ>
	return (uint8_t) x;
 80029d4:	89fb      	ldrh	r3, [r7, #14]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	b21b      	sxth	r3, r3
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <rb_free_rx>:

int16_t rb_free_rx(UartRB *p) {
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
	int16_t x;
	HAL_NVIC_DisableIRQ(p->irqn);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f001 fdc2 	bl	800457a <HAL_NVIC_DisableIRQ>
	x = p->rx_in - p->rx_out;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	895b      	ldrh	r3, [r3, #10]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	899b      	ldrh	r3, [r3, #12]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 8002a08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	da03      	bge.n	8002a18 <rb_free_rx+0x36>
		x += BUFLEN;
 8002a10:	89fb      	ldrh	r3, [r7, #14]
 8002a12:	337f      	adds	r3, #127	@ 0x7f
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	81fb      	strh	r3, [r7, #14]
	x = BUFLEN - x;
 8002a18:	89fb      	ldrh	r3, [r7, #14]
 8002a1a:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_EnableIRQ(p->irqn);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f001 fd98 	bl	800455e <HAL_NVIC_EnableIRQ>
	return x;
 8002a2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <rb_rx_used>:

int16_t rb_rx_used(const UartRB *p)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
	int16_t used;
    HAL_NVIC_DisableIRQ(p->irqn);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f001 fd96 	bl	800457a <HAL_NVIC_DisableIRQ>
    used = (int16_t)p->rx_in - (int32_t)p->rx_out;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	895b      	ldrh	r3, [r3, #10]
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	899b      	ldrh	r3, [r3, #12]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	81fb      	strh	r3, [r7, #14]
    if (used < 0) used += BUFLEN;
 8002a60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da03      	bge.n	8002a70 <rb_rx_used+0x36>
 8002a68:	89fb      	ldrh	r3, [r7, #14]
 8002a6a:	337f      	adds	r3, #127	@ 0x7f
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	81fb      	strh	r3, [r7, #14]
    HAL_NVIC_EnableIRQ(p->irqn);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fd71 	bl	800455e <HAL_NVIC_EnableIRQ>
    return used;
 8002a7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <uartRB_KickTx>:

// is this correct
void uartRB_KickTx(UartRB *p) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

	if (__HAL_UART_GET_FLAG(p->huart, UART_FLAG_TC) == 0)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9c:	2b40      	cmp	r3, #64	@ 0x40
 8002a9e:	d134      	bne.n	8002b0a <uartRB_KickTx+0x82>
		return;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f001 fd67 	bl	800457a <HAL_NVIC_DisableIRQ>
// No, we still have something to transmit?
	int16_t free = rb_free_tx(p);          // how many free slots in TX ring
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff69 	bl	8002984 <rb_free_tx>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	81fb      	strh	r3, [r7, #14]
	int16_t tmpBuf_out = p->tx_out;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	891b      	ldrh	r3, [r3, #8]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	81bb      	strh	r3, [r7, #12]
	if (free < BUFLEN) {               // => there is at least 1 byte pending
 8002abe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ac2:	2b7e      	cmp	r3, #126	@ 0x7e
 8002ac4:	dc1a      	bgt.n	8002afc <uartRB_KickTx+0x74>
		p->tx_out++;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	891b      	ldrh	r3, [r3, #8]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	811a      	strh	r2, [r3, #8]
		if (p->tx_out >= BUFLEN) p->tx_out = 0;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	891b      	ldrh	r3, [r3, #8]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b7e      	cmp	r3, #126	@ 0x7e
 8002adc:	d902      	bls.n	8002ae4 <uartRB_KickTx+0x5c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	811a      	strh	r2, [r3, #8]
		HAL_UART_Transmit_IT(p->huart, &p->tx[tmpBuf_out], 1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002aec:	3308      	adds	r3, #8
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	3306      	adds	r3, #6
 8002af4:	2201      	movs	r2, #1
 8002af6:	4619      	mov	r1, r3
 8002af8:	f003 fcb2 	bl	8006460 <HAL_UART_Transmit_IT>
	}
	HAL_NVIC_EnableIRQ(p->irqn);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f001 fd2b 	bl	800455e <HAL_NVIC_EnableIRQ>
 8002b08:	e000      	b.n	8002b0c <uartRB_KickTx+0x84>
		return;
 8002b0a:	bf00      	nop
}
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <uartRB_Put>:

uint8_t uartRB_Put(UartRB *p, const void *buf, uint8_t n) {
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(p->irqn);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f001 fd26 	bl	800457a <HAL_NVIC_DisableIRQ>
	const uint8_t *src = (const uint8_t *)buf;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	613b      	str	r3, [r7, #16]
	if (n > rb_free_tx(p)){
 8002b32:	79fc      	ldrb	r4, [r7, #7]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f7ff ff25 	bl	8002984 <rb_free_tx>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	429c      	cmp	r4, r3
 8002b3e:	dd07      	ble.n	8002b50 <uartRB_Put+0x3c>
		HAL_NVIC_EnableIRQ(p->irqn);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 fd09 	bl	800455e <HAL_NVIC_EnableIRQ>
		return 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e02f      	b.n	8002bb0 <uartRB_Put+0x9c>
	}
	for (uint8_t i = 1; i <= n; i++) {
 8002b50:	2301      	movs	r3, #1
 8002b52:	75fb      	strb	r3, [r7, #23]
 8002b54:	e021      	b.n	8002b9a <uartRB_Put+0x86>
		p->tx[p->tx_in] = src[i-1];
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	88d2      	ldrh	r2, [r2, #6]
 8002b62:	b292      	uxth	r2, r2
 8002b64:	4611      	mov	r1, r2
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	440b      	add	r3, r1
 8002b6c:	739a      	strb	r2, [r3, #14]
		p->tx_in = (uint8_t) ((p->tx_in + 1) % BUFLEN);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	88db      	ldrh	r3, [r3, #6]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	4b10      	ldr	r3, [pc, #64]	@ (8002bb8 <uartRB_Put+0xa4>)
 8002b78:	fb83 1302 	smull	r1, r3, r3, r2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	1199      	asrs	r1, r3, #6
 8002b80:	17d3      	asrs	r3, r2, #31
 8002b82:	1ac9      	subs	r1, r1, r3
 8002b84:	460b      	mov	r3, r1
 8002b86:	01db      	lsls	r3, r3, #7
 8002b88:	1a5b      	subs	r3, r3, r1
 8002b8a:	1ad1      	subs	r1, r2, r3
 8002b8c:	b2cb      	uxtb	r3, r1
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	80da      	strh	r2, [r3, #6]
	for (uint8_t i = 1; i <= n; i++) {
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	3301      	adds	r3, #1
 8002b98:	75fb      	strb	r3, [r7, #23]
 8002b9a:	7dfa      	ldrb	r2, [r7, #23]
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d9d9      	bls.n	8002b56 <uartRB_Put+0x42>
	}
	HAL_NVIC_EnableIRQ(p->irqn);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 fcd8 	bl	800455e <HAL_NVIC_EnableIRQ>
	return 1;
 8002bae:	2301      	movs	r3, #1
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd90      	pop	{r4, r7, pc}
 8002bb8:	81020409 	.word	0x81020409

08002bbc <uartRB_Getc>:

uint8_t uartRB_Getc(UartRB *p) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	uint8_t c;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 fcd5 	bl	800457a <HAL_NVIC_DisableIRQ>
	c = p->rx[p->rx_out];
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	899b      	ldrh	r3, [r3, #12]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002be0:	73fb      	strb	r3, [r7, #15]
	p->rx_out++;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	899b      	ldrh	r3, [r3, #12]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3301      	adds	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	819a      	strh	r2, [r3, #12]
	if (p->rx_out >= BUFLEN) p->rx_out = 0;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	899b      	ldrh	r3, [r3, #12]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b7e      	cmp	r3, #126	@ 0x7e
 8002bf8:	d902      	bls.n	8002c00 <uartRB_Getc+0x44>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	819a      	strh	r2, [r3, #12]
	HAL_NVIC_EnableIRQ(p->irqn);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 fca9 	bl	800455e <HAL_NVIC_EnableIRQ>
	return c;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002c1c:	4b22      	ldr	r3, [pc, #136]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c1e:	4a23      	ldr	r2, [pc, #140]	@ (8002cac <MX_UART4_Init+0x94>)
 8002c20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 19200;
 8002c22:	4b21      	ldr	r3, [pc, #132]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c24:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002c28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c30:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c36:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c3e:	220c      	movs	r2, #12
 8002c40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c42:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c48:	4b17      	ldr	r3, [pc, #92]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c54:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c5a:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c60:	4811      	ldr	r0, [pc, #68]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c62:	f003 fbad 	bl	80063c0 <HAL_UART_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002c6c:	f7fd ffdb 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c70:	2100      	movs	r1, #0
 8002c72:	480d      	ldr	r0, [pc, #52]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c74:	f005 fa23 	bl	80080be <HAL_UARTEx_SetTxFifoThreshold>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002c7e:	f7fd ffd2 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c82:	2100      	movs	r1, #0
 8002c84:	4808      	ldr	r0, [pc, #32]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c86:	f005 fa58 	bl	800813a <HAL_UARTEx_SetRxFifoThreshold>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002c90:	f7fd ffc9 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002c94:	4804      	ldr	r0, [pc, #16]	@ (8002ca8 <MX_UART4_Init+0x90>)
 8002c96:	f005 f9d9 	bl	800804c <HAL_UARTEx_DisableFifoMode>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002ca0:	f7fd ffc1 	bl	8000c26 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000f80 	.word	0x20000f80
 8002cac:	40004c00 	.word	0x40004c00

08002cb0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002cb4:	4b22      	ldr	r3, [pc, #136]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002cb6:	4a23      	ldr	r2, [pc, #140]	@ (8002d44 <MX_UART5_Init+0x94>)
 8002cb8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 8002cba:	4b21      	ldr	r3, [pc, #132]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002cbc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002cc0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002cce:	4b1c      	ldr	r3, [pc, #112]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cda:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce0:	4b17      	ldr	r3, [pc, #92]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ce6:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cec:	4b14      	ldr	r3, [pc, #80]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cf2:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002cf8:	4811      	ldr	r0, [pc, #68]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002cfa:	f003 fb61 	bl	80063c0 <HAL_UART_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002d04:	f7fd ff8f 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d08:	2100      	movs	r1, #0
 8002d0a:	480d      	ldr	r0, [pc, #52]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002d0c:	f005 f9d7 	bl	80080be <HAL_UARTEx_SetTxFifoThreshold>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002d16:	f7fd ff86 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4808      	ldr	r0, [pc, #32]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002d1e:	f005 fa0c 	bl	800813a <HAL_UARTEx_SetRxFifoThreshold>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002d28:	f7fd ff7d 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002d2c:	4804      	ldr	r0, [pc, #16]	@ (8002d40 <MX_UART5_Init+0x90>)
 8002d2e:	f005 f98d 	bl	800804c <HAL_UARTEx_DisableFifoMode>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002d38:	f7fd ff75 	bl	8000c26 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20001014 	.word	0x20001014
 8002d44:	40005000 	.word	0x40005000

08002d48 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d4c:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002d4e:	4a23      	ldr	r2, [pc, #140]	@ (8002ddc <MX_USART1_UART_Init+0x94>)
 8002d50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8002d52:	4b21      	ldr	r3, [pc, #132]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002d54:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002d58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d60:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d66:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002d6e:	220c      	movs	r2, #12
 8002d70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d72:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d78:	4b17      	ldr	r3, [pc, #92]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d7e:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d84:	4b14      	ldr	r3, [pc, #80]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d8a:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d90:	4811      	ldr	r0, [pc, #68]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002d92:	f003 fb15 	bl	80063c0 <HAL_UART_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d9c:	f7fd ff43 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002da0:	2100      	movs	r1, #0
 8002da2:	480d      	ldr	r0, [pc, #52]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002da4:	f005 f98b 	bl	80080be <HAL_UARTEx_SetTxFifoThreshold>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002dae:	f7fd ff3a 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002db2:	2100      	movs	r1, #0
 8002db4:	4808      	ldr	r0, [pc, #32]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002db6:	f005 f9c0 	bl	800813a <HAL_UARTEx_SetRxFifoThreshold>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002dc0:	f7fd ff31 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002dc4:	4804      	ldr	r0, [pc, #16]	@ (8002dd8 <MX_USART1_UART_Init+0x90>)
 8002dc6:	f005 f941 	bl	800804c <HAL_UARTEx_DisableFifoMode>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002dd0:	f7fd ff29 	bl	8000c26 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	200010a8 	.word	0x200010a8
 8002ddc:	40013800 	.word	0x40013800

08002de0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002de4:	4b23      	ldr	r3, [pc, #140]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002de6:	4a24      	ldr	r2, [pc, #144]	@ (8002e78 <MX_USART2_UART_Init+0x98>)
 8002de8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002dea:	4b22      	ldr	r3, [pc, #136]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002dec:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002df0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002df2:	4b20      	ldr	r3, [pc, #128]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002df8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002e06:	220c      	movs	r2, #12
 8002e08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002e0c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002e10:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e12:	4b18      	ldr	r3, [pc, #96]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e18:	4b16      	ldr	r3, [pc, #88]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e1e:	4b15      	ldr	r3, [pc, #84]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e24:	4b13      	ldr	r3, [pc, #76]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e2a:	4812      	ldr	r0, [pc, #72]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002e2c:	f003 fac8 	bl	80063c0 <HAL_UART_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002e36:	f7fd fef6 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	480d      	ldr	r0, [pc, #52]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002e3e:	f005 f93e 	bl	80080be <HAL_UARTEx_SetTxFifoThreshold>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002e48:	f7fd feed 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4809      	ldr	r0, [pc, #36]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002e50:	f005 f973 	bl	800813a <HAL_UARTEx_SetRxFifoThreshold>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002e5a:	f7fd fee4 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002e5e:	4805      	ldr	r0, [pc, #20]	@ (8002e74 <MX_USART2_UART_Init+0x94>)
 8002e60:	f005 f8f4 	bl	800804c <HAL_UARTEx_DisableFifoMode>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002e6a:	f7fd fedc 	bl	8000c26 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	2000113c 	.word	0x2000113c
 8002e78:	40004400 	.word	0x40004400

08002e7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e80:	4b23      	ldr	r3, [pc, #140]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002e82:	4a24      	ldr	r2, [pc, #144]	@ (8002f14 <MX_USART3_UART_Init+0x98>)
 8002e84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8002e86:	4b22      	ldr	r3, [pc, #136]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002e88:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002e8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e8e:	4b20      	ldr	r3, [pc, #128]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e94:	4b1e      	ldr	r3, [pc, #120]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002ea2:	220c      	movs	r2, #12
 8002ea4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002ea8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002eac:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eae:	4b18      	ldr	r3, [pc, #96]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eb4:	4b16      	ldr	r3, [pc, #88]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002eba:	4b15      	ldr	r3, [pc, #84]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ec0:	4b13      	ldr	r3, [pc, #76]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ec6:	4812      	ldr	r0, [pc, #72]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002ec8:	f003 fa7a 	bl	80063c0 <HAL_UART_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8002ed2:	f7fd fea8 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	480d      	ldr	r0, [pc, #52]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002eda:	f005 f8f0 	bl	80080be <HAL_UARTEx_SetTxFifoThreshold>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8002ee4:	f7fd fe9f 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4809      	ldr	r0, [pc, #36]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002eec:	f005 f925 	bl	800813a <HAL_UARTEx_SetRxFifoThreshold>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8002ef6:	f7fd fe96 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002efa:	4805      	ldr	r0, [pc, #20]	@ (8002f10 <MX_USART3_UART_Init+0x94>)
 8002efc:	f005 f8a6 	bl	800804c <HAL_UARTEx_DisableFifoMode>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8002f06:	f7fd fe8e 	bl	8000c26 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	200011d0 	.word	0x200011d0
 8002f14:	40004800 	.word	0x40004800

08002f18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b0a8      	sub	sp, #160	@ 0xa0
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f30:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f34:	2254      	movs	r2, #84	@ 0x54
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f005 f9ab 	bl	8008294 <memset>
  if(uartHandle->Instance==UART4)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a93      	ldr	r2, [pc, #588]	@ (8003190 <HAL_UART_MspInit+0x278>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d13c      	bne.n	8002fc2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002f48:	2308      	movs	r3, #8
 8002f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f54:	4618      	mov	r0, r3
 8002f56:	f002 fad9 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f60:	f7fd fe61 	bl	8000c26 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f64:	4b8b      	ldr	r3, [pc, #556]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f68:	4a8a      	ldr	r2, [pc, #552]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8002f6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f70:	4b88      	ldr	r3, [pc, #544]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8002f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f7c:	4b85      	ldr	r3, [pc, #532]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8002f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f80:	4a84      	ldr	r2, [pc, #528]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8002f82:	f043 0304 	orr.w	r3, r3, #4
 8002f86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f88:	4b82      	ldr	r3, [pc, #520]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f94:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002fae:	2305      	movs	r3, #5
 8002fb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4877      	ldr	r0, [pc, #476]	@ (8003198 <HAL_UART_MspInit+0x280>)
 8002fbc:	f001 faf8 	bl	80045b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002fc0:	e157      	b.n	8003272 <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==UART5)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a75      	ldr	r2, [pc, #468]	@ (800319c <HAL_UART_MspInit+0x284>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d15d      	bne.n	8003088 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002fcc:	2310      	movs	r3, #16
 8002fce:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fd4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f002 fa97 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002fe4:	f7fd fe1f 	bl	8000c26 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fec:	4a69      	ldr	r2, [pc, #420]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8002fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ff2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff4:	4b67      	ldr	r3, [pc, #412]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003000:	4b64      	ldr	r3, [pc, #400]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8003002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003004:	4a63      	ldr	r2, [pc, #396]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8003006:	f043 0304 	orr.w	r3, r3, #4
 800300a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800300c:	4b61      	ldr	r3, [pc, #388]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 800300e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003018:	4b5e      	ldr	r3, [pc, #376]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 800301a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301c:	4a5d      	ldr	r2, [pc, #372]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 800301e:	f043 0308 	orr.w	r3, r3, #8
 8003022:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003024:	4b5b      	ldr	r3, [pc, #364]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8003026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	627b      	str	r3, [r7, #36]	@ 0x24
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003030:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003034:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003038:	2302      	movs	r3, #2
 800303a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003044:	2300      	movs	r3, #0
 8003046:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800304a:	2305      	movs	r3, #5
 800304c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003050:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003054:	4619      	mov	r1, r3
 8003056:	4850      	ldr	r0, [pc, #320]	@ (8003198 <HAL_UART_MspInit+0x280>)
 8003058:	f001 faaa 	bl	80045b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800305c:	2304      	movs	r3, #4
 800305e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003062:	2302      	movs	r3, #2
 8003064:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306e:	2300      	movs	r3, #0
 8003070:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003074:	2305      	movs	r3, #5
 8003076:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800307a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800307e:	4619      	mov	r1, r3
 8003080:	4847      	ldr	r0, [pc, #284]	@ (80031a0 <HAL_UART_MspInit+0x288>)
 8003082:	f001 fa95 	bl	80045b0 <HAL_GPIO_Init>
}
 8003086:	e0f4      	b.n	8003272 <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==USART1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a45      	ldr	r2, [pc, #276]	@ (80031a4 <HAL_UART_MspInit+0x28c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d13b      	bne.n	800310a <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003092:	2301      	movs	r3, #1
 8003094:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003096:	2300      	movs	r3, #0
 8003098:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800309a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800309e:	4618      	mov	r0, r3
 80030a0:	f002 fa34 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_UART_MspInit+0x196>
      Error_Handler();
 80030aa:	f7fd fdbc 	bl	8000c26 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80030ae:	4b39      	ldr	r3, [pc, #228]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 80030b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b2:	4a38      	ldr	r2, [pc, #224]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 80030b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ba:	4b36      	ldr	r3, [pc, #216]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 80030bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030c2:	623b      	str	r3, [r7, #32]
 80030c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c6:	4b33      	ldr	r3, [pc, #204]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 80030c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ca:	4a32      	ldr	r2, [pc, #200]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030d2:	4b30      	ldr	r3, [pc, #192]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 80030d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80030de:	2330      	movs	r3, #48	@ 0x30
 80030e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030f6:	2307      	movs	r3, #7
 80030f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030fc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003100:	4619      	mov	r1, r3
 8003102:	4825      	ldr	r0, [pc, #148]	@ (8003198 <HAL_UART_MspInit+0x280>)
 8003104:	f001 fa54 	bl	80045b0 <HAL_GPIO_Init>
}
 8003108:	e0b3      	b.n	8003272 <HAL_UART_MspInit+0x35a>
  else if(uartHandle->Instance==USART2)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a26      	ldr	r2, [pc, #152]	@ (80031a8 <HAL_UART_MspInit+0x290>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d14b      	bne.n	80031ac <HAL_UART_MspInit+0x294>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003114:	2302      	movs	r3, #2
 8003116:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003118:	2300      	movs	r3, #0
 800311a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800311c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003120:	4618      	mov	r0, r3
 8003122:	f002 f9f3 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_UART_MspInit+0x218>
      Error_Handler();
 800312c:	f7fd fd7b 	bl	8000c26 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003130:	4b18      	ldr	r3, [pc, #96]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003134:	4a17      	ldr	r2, [pc, #92]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8003136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800313a:	6593      	str	r3, [r2, #88]	@ 0x58
 800313c:	4b15      	ldr	r3, [pc, #84]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003148:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 800314a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800314c:	4a11      	ldr	r2, [pc, #68]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003154:	4b0f      	ldr	r3, [pc, #60]	@ (8003194 <HAL_UART_MspInit+0x27c>)
 8003156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003160:	230f      	movs	r3, #15
 8003162:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003166:	2302      	movs	r3, #2
 8003168:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	2300      	movs	r3, #0
 8003174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003178:	2307      	movs	r3, #7
 800317a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003182:	4619      	mov	r1, r3
 8003184:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003188:	f001 fa12 	bl	80045b0 <HAL_GPIO_Init>
}
 800318c:	e071      	b.n	8003272 <HAL_UART_MspInit+0x35a>
 800318e:	bf00      	nop
 8003190:	40004c00 	.word	0x40004c00
 8003194:	40021000 	.word	0x40021000
 8003198:	48000800 	.word	0x48000800
 800319c:	40005000 	.word	0x40005000
 80031a0:	48000c00 	.word	0x48000c00
 80031a4:	40013800 	.word	0x40013800
 80031a8:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a32      	ldr	r2, [pc, #200]	@ (800327c <HAL_UART_MspInit+0x364>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d15d      	bne.n	8003272 <HAL_UART_MspInit+0x35a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031b6:	2304      	movs	r3, #4
 80031b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80031ba:	2300      	movs	r3, #0
 80031bc:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80031c2:	4618      	mov	r0, r3
 80031c4:	f002 f9a2 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 80031ce:	f7fd fd2a 	bl	8000c26 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003280 <HAL_UART_MspInit+0x368>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003280 <HAL_UART_MspInit+0x368>)
 80031d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80031de:	4b28      	ldr	r3, [pc, #160]	@ (8003280 <HAL_UART_MspInit+0x368>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031ea:	4b25      	ldr	r3, [pc, #148]	@ (8003280 <HAL_UART_MspInit+0x368>)
 80031ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ee:	4a24      	ldr	r2, [pc, #144]	@ (8003280 <HAL_UART_MspInit+0x368>)
 80031f0:	f043 0310 	orr.w	r3, r3, #16
 80031f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031f6:	4b22      	ldr	r3, [pc, #136]	@ (8003280 <HAL_UART_MspInit+0x368>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003202:	4b1f      	ldr	r3, [pc, #124]	@ (8003280 <HAL_UART_MspInit+0x368>)
 8003204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003206:	4a1e      	ldr	r2, [pc, #120]	@ (8003280 <HAL_UART_MspInit+0x368>)
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800320e:	4b1c      	ldr	r3, [pc, #112]	@ (8003280 <HAL_UART_MspInit+0x368>)
 8003210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800321a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800321e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	2302      	movs	r3, #2
 8003224:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003234:	2307      	movs	r3, #7
 8003236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800323a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800323e:	4619      	mov	r1, r3
 8003240:	4810      	ldr	r0, [pc, #64]	@ (8003284 <HAL_UART_MspInit+0x36c>)
 8003242:	f001 f9b5 	bl	80045b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14;
 8003246:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 800324a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324e:	2302      	movs	r3, #2
 8003250:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325a:	2300      	movs	r3, #0
 800325c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003260:	2307      	movs	r3, #7
 8003262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003266:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800326a:	4619      	mov	r1, r3
 800326c:	4806      	ldr	r0, [pc, #24]	@ (8003288 <HAL_UART_MspInit+0x370>)
 800326e:	f001 f99f 	bl	80045b0 <HAL_GPIO_Init>
}
 8003272:	bf00      	nop
 8003274:	37a0      	adds	r7, #160	@ 0xa0
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40004800 	.word	0x40004800
 8003280:	40021000 	.word	0x40021000
 8003284:	48001000 	.word	0x48001000
 8003288:	48000400 	.word	0x48000400

0800328c <zentrale_init>:


//-----------------FUNKTIONSDEFINITIONEN---------------------------------------

// Zentrale initialisieren.
void zentrale_init(void) {
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
	z_status = POWERON;
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <zentrale_init+0x2c>)
 8003292:	2202      	movs	r2, #2
 8003294:	701a      	strb	r2, [r3, #0]
	z_status_h = NOP;
 8003296:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <zentrale_init+0x30>)
 8003298:	22ff      	movs	r2, #255	@ 0xff
 800329a:	701a      	strb	r2, [r3, #0]
	z_status_tend = NOP;
 800329c:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <zentrale_init+0x34>)
 800329e:	22ff      	movs	r2, #255	@ 0xff
 80032a0:	701a      	strb	r2, [r3, #0]
	z_error_akt = 0;
 80032a2:	4b08      	ldr	r3, [pc, #32]	@ (80032c4 <zentrale_init+0x38>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	801a      	strh	r2, [r3, #0]
	z_error_kum = 0;
 80032a8:	4b07      	ldr	r3, [pc, #28]	@ (80032c8 <zentrale_init+0x3c>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	801a      	strh	r2, [r3, #0]

}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	20001264 	.word	0x20001264
 80032bc:	20001265 	.word	0x20001265
 80032c0:	20001266 	.word	0x20001266
 80032c4:	20001268 	.word	0x20001268
 80032c8:	2000126a 	.word	0x2000126a

080032cc <z_update_power_errors>:

static void z_update_power_errors(void) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
	// If you only have update_uok():
	if (!update_uok()) {
 80032d2:	f7fd f9b7 	bl	8000644 <update_uok>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d117      	bne.n	800330c <z_update_power_errors+0x40>
		// If you want individual bits, read pins directly (or add helpers):
		uint8_t ok5 = u_ok(UC__5VOK_GPIO_Port, UC__5VOK_Pin);
 80032dc:	2110      	movs	r1, #16
 80032de:	480d      	ldr	r0, [pc, #52]	@ (8003314 <z_update_power_errors+0x48>)
 80032e0:	f7fd f998 	bl	8000614 <u_ok>
 80032e4:	4603      	mov	r3, r0
 80032e6:	71fb      	strb	r3, [r7, #7]
		uint8_t ok12 = u_ok(UC__12VOK_GPIO_Port, UC__12VOK_Pin);
 80032e8:	2120      	movs	r1, #32
 80032ea:	480a      	ldr	r0, [pc, #40]	@ (8003314 <z_update_power_errors+0x48>)
 80032ec:	f7fd f992 	bl	8000614 <u_ok>
 80032f0:	4603      	mov	r3, r0
 80032f2:	71bb      	strb	r3, [r7, #6]
		if (!ok5)
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <z_update_power_errors+0x34>
			z_set_error(SG_ERR_U5V);
 80032fa:	2002      	movs	r0, #2
 80032fc:	f000 f918 	bl	8003530 <z_set_error>
		if (!ok12)
 8003300:	79bb      	ldrb	r3, [r7, #6]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d102      	bne.n	800330c <z_update_power_errors+0x40>
			z_set_error(SG_ERR_U12V);
 8003306:	2003      	movs	r0, #3
 8003308:	f000 f912 	bl	8003530 <z_set_error>
	}
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	48000c00 	.word	0x48000c00

08003318 <zentrale>:

// Zentrale denken und entscheiden.
void zentrale(void) {	// ----- DENKEN -----
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0

	z_update_power_errors();
 800331c:	f7ff ffd6 	bl	80032cc <z_update_power_errors>

	if (readPumpAlarm()) {
 8003320:	f7fd f9c4 	bl	80006ac <readPumpAlarm>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <zentrale+0x18>
		z_set_error(SG_ERR_PUMP_ALARM);
 800332a:	2004      	movs	r0, #4
 800332c:	f000 f900 	bl	8003530 <z_set_error>
	}
	if (readPumpWarning()) {
 8003330:	f7fd f9a6 	bl	8000680 <readPumpWarning>
		//z_set_error(SG_ERR_PUMP_WARNING);
	}

	// Fehlerüberprüfung
	if (z_error_akt != 0)
 8003334:	4b66      	ldr	r3, [pc, #408]	@ (80034d0 <zentrale+0x1b8>)
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <zentrale+0x2a>
		z_set_status_tend(ZERROR);
 800333c:	2001      	movs	r0, #1
 800333e:	f000 f8d5 	bl	80034ec <z_set_status_tend>

	switch (z_status)// Je nach aktuellem Systemzustand auf Anfragen zur Zustands�nderung
 8003342:	4b64      	ldr	r3, [pc, #400]	@ (80034d4 <zentrale+0x1bc>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	3b01      	subs	r3, #1
 8003348:	2b0a      	cmp	r3, #10
 800334a:	f200 80ac 	bhi.w	80034a6 <zentrale+0x18e>
 800334e:	a201      	add	r2, pc, #4	@ (adr r2, 8003354 <zentrale+0x3c>)
 8003350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003354:	08003381 	.word	0x08003381
 8003358:	080033d9 	.word	0x080033d9
 800335c:	080034a7 	.word	0x080034a7
 8003360:	080034a7 	.word	0x080034a7
 8003364:	080034a7 	.word	0x080034a7
 8003368:	080034a7 	.word	0x080034a7
 800336c:	080034a7 	.word	0x080034a7
 8003370:	080034a7 	.word	0x080034a7
 8003374:	08003411 	.word	0x08003411
 8003378:	080034a7 	.word	0x080034a7
 800337c:	0800345f 	.word	0x0800345f
	{// reagieren
	case ZERROR:
		if (z_status_h != ZERROR) {				// add what to do when error
 8003380:	4b55      	ldr	r3, [pc, #340]	@ (80034d8 <zentrale+0x1c0>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d005      	beq.n	8003394 <zentrale+0x7c>
			z_status_h = ZERROR;
 8003388:	4b53      	ldr	r3, [pc, #332]	@ (80034d8 <zentrale+0x1c0>)
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
			z_rf_state = 0;
 800338e:	4b53      	ldr	r3, [pc, #332]	@ (80034dc <zentrale+0x1c4>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
		}

		if ((z_error_akt) > 0) // Wenn aktuell noch ein Fehler mit Ausnahme des ERREXT vorliegt
 8003394:	4b4e      	ldr	r3, [pc, #312]	@ (80034d0 <zentrale+0x1b8>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <zentrale+0x9a>
				{
			z_error_kum |= z_error_akt; // Wir aktualisieren hier schon mal den Kummulierten Fehler
 800339c:	4b50      	ldr	r3, [pc, #320]	@ (80034e0 <zentrale+0x1c8>)
 800339e:	881a      	ldrh	r2, [r3, #0]
 80033a0:	4b4b      	ldr	r3, [pc, #300]	@ (80034d0 <zentrale+0x1b8>)
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	4b4d      	ldr	r3, [pc, #308]	@ (80034e0 <zentrale+0x1c8>)
 80033aa:	801a      	strh	r2, [r3, #0]
			z_set_status_tend(ZERROR); // kann als Folgezustand nur der Zustand ERROR eingenommen werden!
 80033ac:	2001      	movs	r0, #1
 80033ae:	f000 f89d 	bl	80034ec <z_set_status_tend>
		} else {       // Falls kein Fehler im Modul vorliegt schließen wir hier
		}

		switch (z_status_tend) // Wünsche bezüglich einer Zustandsänderung bearbeiten
 80033b2:	4b4c      	ldr	r3, [pc, #304]	@ (80034e4 <zentrale+0x1cc>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d002      	beq.n	80033c0 <zentrale+0xa8>
 80033ba:	2b09      	cmp	r3, #9
 80033bc:	d004      	beq.n	80033c8 <zentrale+0xb0>
			break;
		case INACTIVE:
			z_status = INACTIVE;                // Zustand INACTIVE vorbereiten
			break;
		default:
			break;
 80033be:	e007      	b.n	80033d0 <zentrale+0xb8>
			z_status = POWERON;
 80033c0:	4b44      	ldr	r3, [pc, #272]	@ (80034d4 <zentrale+0x1bc>)
 80033c2:	2202      	movs	r2, #2
 80033c4:	701a      	strb	r2, [r3, #0]
			break;
 80033c6:	e003      	b.n	80033d0 <zentrale+0xb8>
			z_status = INACTIVE;                // Zustand INACTIVE vorbereiten
 80033c8:	4b42      	ldr	r3, [pc, #264]	@ (80034d4 <zentrale+0x1bc>)
 80033ca:	2209      	movs	r2, #9
 80033cc:	701a      	strb	r2, [r3, #0]
			break;
 80033ce:	bf00      	nop
		}
		z_status_tend = NOP;                         // Status_tend zurücksetzen
 80033d0:	4b44      	ldr	r3, [pc, #272]	@ (80034e4 <zentrale+0x1cc>)
 80033d2:	22ff      	movs	r2, #255	@ 0xff
 80033d4:	701a      	strb	r2, [r3, #0]
		break;
 80033d6:	e06d      	b.n	80034b4 <zentrale+0x19c>
//			if(((z_error_kum && ((1<<SG_ERREN) + (1<<SG_ERRDTC))) != 0) && (adc7927_chk_en() != 1))
//				z_set_status_tend(Z_ERROR);


	case POWERON:// Startzustand nach Einschalten des Ger�tes. Keine Fehlerbehandlung!
		if (z_status_h != POWERON) {
 80033d8:	4b3f      	ldr	r3, [pc, #252]	@ (80034d8 <zentrale+0x1c0>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d008      	beq.n	80033f2 <zentrale+0xda>
			z_init_done = 0;
 80033e0:	4b41      	ldr	r3, [pc, #260]	@ (80034e8 <zentrale+0x1d0>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]
			z_rf_state = 0;
 80033e6:	4b3d      	ldr	r3, [pc, #244]	@ (80034dc <zentrale+0x1c4>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
			z_status_h = POWERON;
 80033ec:	4b3a      	ldr	r3, [pc, #232]	@ (80034d8 <zentrale+0x1c0>)
 80033ee:	2202      	movs	r2, #2
 80033f0:	701a      	strb	r2, [r3, #0]
		}

		if (ct_init_null()) {
 80033f2:	f7ff fa0f 	bl	8002814 <ct_init_null>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <zentrale+0xf0>
			z_init_done = 1;
 80033fc:	4b3a      	ldr	r3, [pc, #232]	@ (80034e8 <zentrale+0x1d0>)
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
			z_status = INACTIVE;
 8003402:	4b34      	ldr	r3, [pc, #208]	@ (80034d4 <zentrale+0x1bc>)
 8003404:	2209      	movs	r2, #9
 8003406:	701a      	strb	r2, [r3, #0]
		}

		z_status_tend = NOP;					// z_status_tend zur�cksetzen
 8003408:	4b36      	ldr	r3, [pc, #216]	@ (80034e4 <zentrale+0x1cc>)
 800340a:	22ff      	movs	r2, #255	@ 0xff
 800340c:	701a      	strb	r2, [r3, #0]
		break;
 800340e:	e051      	b.n	80034b4 <zentrale+0x19c>

	case INACTIVE:						//----- System im INACTIVE-Zustand

		if (z_status_h != INACTIVE) {
 8003410:	4b31      	ldr	r3, [pc, #196]	@ (80034d8 <zentrale+0x1c0>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b09      	cmp	r3, #9
 8003416:	d008      	beq.n	800342a <zentrale+0x112>
			z_error_kum = 0;
 8003418:	4b31      	ldr	r3, [pc, #196]	@ (80034e0 <zentrale+0x1c8>)
 800341a:	2200      	movs	r2, #0
 800341c:	801a      	strh	r2, [r3, #0]
			z_rf_state = 0;
 800341e:	4b2f      	ldr	r3, [pc, #188]	@ (80034dc <zentrale+0x1c4>)
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
			z_status_h = INACTIVE;
 8003424:	4b2c      	ldr	r3, [pc, #176]	@ (80034d8 <zentrale+0x1c0>)
 8003426:	2209      	movs	r2, #9
 8003428:	701a      	strb	r2, [r3, #0]
		}

		if (z_error_akt != 0)
 800342a:	4b29      	ldr	r3, [pc, #164]	@ (80034d0 <zentrale+0x1b8>)
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <zentrale+0x120>
			z_set_status_tend(ZERROR);
 8003432:	2001      	movs	r0, #1
 8003434:	f000 f85a 	bl	80034ec <z_set_status_tend>

		switch (z_status_tend) {
 8003438:	4b2a      	ldr	r3, [pc, #168]	@ (80034e4 <zentrale+0x1cc>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d002      	beq.n	8003446 <zentrale+0x12e>
 8003440:	2b0b      	cmp	r3, #11
 8003442:	d004      	beq.n	800344e <zentrale+0x136>
			z_status = ZERROR;
			break;
		case ACTIVE:
			z_status = ACTIVE;
		default:
			break;
 8003444:	e006      	b.n	8003454 <zentrale+0x13c>
			z_status = ZERROR;
 8003446:	4b23      	ldr	r3, [pc, #140]	@ (80034d4 <zentrale+0x1bc>)
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
			break;
 800344c:	e003      	b.n	8003456 <zentrale+0x13e>
			z_status = ACTIVE;
 800344e:	4b21      	ldr	r3, [pc, #132]	@ (80034d4 <zentrale+0x1bc>)
 8003450:	220b      	movs	r2, #11
 8003452:	701a      	strb	r2, [r3, #0]
			break;
 8003454:	bf00      	nop
		}
		z_status_tend = NOP;
 8003456:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <zentrale+0x1cc>)
 8003458:	22ff      	movs	r2, #255	@ 0xff
 800345a:	701a      	strb	r2, [r3, #0]
		break;
 800345c:	e02a      	b.n	80034b4 <zentrale+0x19c>

	case ACTIVE:
		if (z_status_h != ACTIVE) {
 800345e:	4b1e      	ldr	r3, [pc, #120]	@ (80034d8 <zentrale+0x1c0>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b0b      	cmp	r3, #11
 8003464:	d005      	beq.n	8003472 <zentrale+0x15a>
			z_rf_state = 1;
 8003466:	4b1d      	ldr	r3, [pc, #116]	@ (80034dc <zentrale+0x1c4>)
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
			z_status_h = ACTIVE;
 800346c:	4b1a      	ldr	r3, [pc, #104]	@ (80034d8 <zentrale+0x1c0>)
 800346e:	220b      	movs	r2, #11
 8003470:	701a      	strb	r2, [r3, #0]
		}

		if (z_error_akt != 0)
 8003472:	4b17      	ldr	r3, [pc, #92]	@ (80034d0 <zentrale+0x1b8>)
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <zentrale+0x168>
			z_set_status_tend(ZERROR);
 800347a:	2001      	movs	r0, #1
 800347c:	f000 f836 	bl	80034ec <z_set_status_tend>

		switch (z_status_tend) {
 8003480:	4b18      	ldr	r3, [pc, #96]	@ (80034e4 <zentrale+0x1cc>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d002      	beq.n	800348e <zentrale+0x176>
 8003488:	2b09      	cmp	r3, #9
 800348a:	d004      	beq.n	8003496 <zentrale+0x17e>
			z_status = ZERROR;
			break;
		case INACTIVE:
			z_status = INACTIVE;
		default:
			break;
 800348c:	e006      	b.n	800349c <zentrale+0x184>
			z_status = ZERROR;
 800348e:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <zentrale+0x1bc>)
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
			break;
 8003494:	e003      	b.n	800349e <zentrale+0x186>
			z_status = INACTIVE;
 8003496:	4b0f      	ldr	r3, [pc, #60]	@ (80034d4 <zentrale+0x1bc>)
 8003498:	2209      	movs	r2, #9
 800349a:	701a      	strb	r2, [r3, #0]
			break;
 800349c:	bf00      	nop
		}
		z_status_tend = NOP;
 800349e:	4b11      	ldr	r3, [pc, #68]	@ (80034e4 <zentrale+0x1cc>)
 80034a0:	22ff      	movs	r2, #255	@ 0xff
 80034a2:	701a      	strb	r2, [r3, #0]
		break;
 80034a4:	e006      	b.n	80034b4 <zentrale+0x19c>

	default:
		z_status_tend = NOP;
 80034a6:	4b0f      	ldr	r3, [pc, #60]	@ (80034e4 <zentrale+0x1cc>)
 80034a8:	22ff      	movs	r2, #255	@ 0xff
 80034aa:	701a      	strb	r2, [r3, #0]
		z_status_h = NOP;
 80034ac:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <zentrale+0x1c0>)
 80034ae:	22ff      	movs	r2, #255	@ 0xff
 80034b0:	701a      	strb	r2, [r3, #0]
		break;
 80034b2:	bf00      	nop
	}
	z_error_kum |= z_error_akt;	// Eventuell aufgetretenen neuen Fehler zur kummulierten
 80034b4:	4b0a      	ldr	r3, [pc, #40]	@ (80034e0 <zentrale+0x1c8>)
 80034b6:	881a      	ldrh	r2, [r3, #0]
 80034b8:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <zentrale+0x1b8>)
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	4313      	orrs	r3, r2
 80034be:	b29a      	uxth	r2, r3
 80034c0:	4b07      	ldr	r3, [pc, #28]	@ (80034e0 <zentrale+0x1c8>)
 80034c2:	801a      	strh	r2, [r3, #0]
	z_error_akt = 0;// Fehleranzeige für aktuell vorliegende Fehler zurücksetzen
 80034c4:	4b02      	ldr	r3, [pc, #8]	@ (80034d0 <zentrale+0x1b8>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	801a      	strh	r2, [r3, #0]

}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20001268 	.word	0x20001268
 80034d4:	20001264 	.word	0x20001264
 80034d8:	20001265 	.word	0x20001265
 80034dc:	2000126d 	.word	0x2000126d
 80034e0:	2000126a 	.word	0x2000126a
 80034e4:	20001266 	.word	0x20001266
 80034e8:	2000126c 	.word	0x2000126c

080034ec <z_set_status_tend>:
	return z_status;
}

// Statuswunsch setzen
// Priorität:   error, inactive, start, active
void z_set_status_tend(uint8_t statnew) {
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
	if (z_status_tend > statnew)
 80034f6:	4b07      	ldr	r3, [pc, #28]	@ (8003514 <z_set_status_tend+0x28>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	79fa      	ldrb	r2, [r7, #7]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d203      	bcs.n	8003508 <z_set_status_tend+0x1c>
		z_status_tend = statnew;    // nur Status höherer Priorität übernehmen
 8003500:	4a04      	ldr	r2, [pc, #16]	@ (8003514 <z_set_status_tend+0x28>)
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	7013      	strb	r3, [r2, #0]

	return;
 8003506:	bf00      	nop
 8003508:	bf00      	nop
}
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	20001266 	.word	0x20001266

08003518 <z_get_error>:

uint16_t z_get_error(void) {
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
	return z_error_kum;
 800351c:	4b03      	ldr	r3, [pc, #12]	@ (800352c <z_get_error+0x14>)
 800351e:	881b      	ldrh	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	2000126a 	.word	0x2000126a

08003530 <z_set_error>:

// Fehler an Zentrale melden
void z_set_error(uint8_t errnr) {
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
	if (errnr <= 15)
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	2b0f      	cmp	r3, #15
 800353e:	d80c      	bhi.n	800355a <z_set_error+0x2a>
		z_error_akt |= (1 << errnr);
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	2201      	movs	r2, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	b21a      	sxth	r2, r3
 800354a:	4b07      	ldr	r3, [pc, #28]	@ (8003568 <z_set_error+0x38>)
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b21b      	sxth	r3, r3
 8003550:	4313      	orrs	r3, r2
 8003552:	b21b      	sxth	r3, r3
 8003554:	b29a      	uxth	r2, r3
 8003556:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <z_set_error+0x38>)
 8003558:	801a      	strh	r2, [r3, #0]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20001268 	.word	0x20001268

0800356c <z_get_status>:

uint8_t z_get_status(void) {
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
	return z_status;
 8003570:	4b03      	ldr	r3, [pc, #12]	@ (8003580 <z_get_status+0x14>)
 8003572:	781b      	ldrb	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20001264 	.word	0x20001264

08003584 <z_reset>:

uint8_t z_reset(void) {
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
	z_error_kum = 0;
 8003588:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <z_reset+0x20>)
 800358a:	2200      	movs	r2, #0
 800358c:	801a      	strh	r2, [r3, #0]
	if (z_status == ERROR) {
 800358e:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <z_reset+0x24>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d102      	bne.n	800359c <z_reset+0x18>
		z_set_status_tend(INACTIVE);
 8003596:	2009      	movs	r0, #9
 8003598:	f7ff ffa8 	bl	80034ec <z_set_status_tend>
	}
	return CMR_SUCCESSFULL;
 800359c:	2380      	movs	r3, #128	@ 0x80
}
 800359e:	4618      	mov	r0, r3
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	2000126a 	.word	0x2000126a
 80035a8:	20001264 	.word	0x20001264

080035ac <z_get_remote_mode>:

int32_t z_get_remote_mode(void) {
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
	return z_remote_mode;
 80035b0:	4b03      	ldr	r3, [pc, #12]	@ (80035c0 <z_get_remote_mode+0x14>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000008 	.word	0x20000008

080035c4 <z_set_remote_mode>:
		return 1;
	else
		return 0;
}

uint8_t z_set_remote_mode(uint8_t opmode) {
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	71fb      	strb	r3, [r7, #7]
	switch (opmode) {
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <z_set_remote_mode+0x16>
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d005      	beq.n	80035e4 <z_set_remote_mode+0x20>
 80035d8:	e009      	b.n	80035ee <z_set_remote_mode+0x2a>
	case z_rmt_off:
		z_remote_mode = z_rmt_off;
 80035da:	4b08      	ldr	r3, [pc, #32]	@ (80035fc <z_set_remote_mode+0x38>)
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
		return CMR_SUCCESSFULL;
 80035e0:	2380      	movs	r3, #128	@ 0x80
 80035e2:	e005      	b.n	80035f0 <z_set_remote_mode+0x2c>
		break;

	case z_rmt_rs232:
		z_remote_mode = z_rmt_rs232;
 80035e4:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <z_set_remote_mode+0x38>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
		return CMR_SUCCESSFULL;
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	e000      	b.n	80035f0 <z_set_remote_mode+0x2c>
		break;

	default:
		return CMR_PARAMETERINVALID;
 80035ee:	2301      	movs	r3, #1
		break;
	}
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	20000008 	.word	0x20000008

08003600 <z_set_rf>:

uint8_t z_set_rf(uint8_t x) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	71fb      	strb	r3, [r7, #7]
	uint8_t retVal = CMR_SUCCESSFULL;
 800360a:	2380      	movs	r3, #128	@ 0x80
 800360c:	73fb      	strb	r3, [r7, #15]
	switch (x) {
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <z_set_rf+0x1a>
 8003614:	2b01      	cmp	r3, #1
 8003616:	d004      	beq.n	8003622 <z_set_rf+0x22>
 8003618:	e007      	b.n	800362a <z_set_rf+0x2a>
	case 0:
		z_set_status_tend(INACTIVE);
 800361a:	2009      	movs	r0, #9
 800361c:	f7ff ff66 	bl	80034ec <z_set_status_tend>
//            z_rf_state = 0;
		break;
 8003620:	e005      	b.n	800362e <z_set_rf+0x2e>
	case 1:
		z_set_status_tend(ACTIVE);
 8003622:	200b      	movs	r0, #11
 8003624:	f7ff ff62 	bl	80034ec <z_set_status_tend>
//            z_rf_state = 1;
		break;
 8003628:	e001      	b.n	800362e <z_set_rf+0x2e>
	default:
		retVal = CMR_PARAMETERINVALID;
 800362a:	2301      	movs	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
	}

	return retVal;
 800362e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <z_get_rf>:

uint8_t z_get_rf(void) {
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
	return z_rf_state;
 800363c:	4b03      	ldr	r3, [pc, #12]	@ (800364c <z_get_rf+0x14>)
 800363e:	781b      	ldrb	r3, [r3, #0]
}
 8003640:	4618      	mov	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	2000126d 	.word	0x2000126d

08003650 <z_get_pf_a>:

int32_t z_get_pf_a(void) {
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <z_get_pf_a+0x1c>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <z_get_pf_a+0x10>
		return 0;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <z_get_pf_a+0x12>
	else
		return 1;//get_lcd1234Val_filt(PF1);
 8003660:	2301      	movs	r3, #1
}
 8003662:	4618      	mov	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	2000126d 	.word	0x2000126d

08003670 <z_get_pr_a>:

int32_t z_get_pr_a(void) {
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 8003674:	4b05      	ldr	r3, [pc, #20]	@ (800368c <z_get_pr_a+0x1c>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <z_get_pr_a+0x10>
		return 0;
 800367c:	2300      	movs	r3, #0
 800367e:	e000      	b.n	8003682 <z_get_pr_a+0x12>
	else
		return 1;//get_lcd1234Val_filt(PR1);
 8003680:	2301      	movs	r3, #1
}
 8003682:	4618      	mov	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	2000126d 	.word	0x2000126d

08003690 <z_get_pf_b>:

int32_t z_get_pf_b(void) {
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <z_get_pf_b+0x1c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <z_get_pf_b+0x10>
		return 0;
 800369c:	2300      	movs	r3, #0
 800369e:	e000      	b.n	80036a2 <z_get_pf_b+0x12>
	else
		return 1;//get_lcd1234Val_filt(PF2);
 80036a0:	2301      	movs	r3, #1
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	2000126d 	.word	0x2000126d

080036b0 <z_get_pr_b>:

int32_t z_get_pr_b(void) {
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 80036b4:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <z_get_pr_b+0x1c>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <z_get_pr_b+0x10>
		return 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	e000      	b.n	80036c2 <z_get_pr_b+0x12>
	else
		return 1;//get_lcd1234Val_filt(PR2);
 80036c0:	2301      	movs	r3, #1
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	2000126d 	.word	0x2000126d

080036d0 <z_get_pf_c>:

int32_t z_get_pf_c(void) {
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 80036d4:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <z_get_pf_c+0x1c>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <z_get_pf_c+0x10>
		return 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	e000      	b.n	80036e2 <z_get_pf_c+0x12>
	else
		return 1;//get_lcd1234Val_filt(PF3);
 80036e0:	2301      	movs	r3, #1
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	2000126d 	.word	0x2000126d

080036f0 <z_get_pr_c>:

int32_t z_get_pr_c(void) {
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 80036f4:	4b05      	ldr	r3, [pc, #20]	@ (800370c <z_get_pr_c+0x1c>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <z_get_pr_c+0x10>
		return 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e000      	b.n	8003702 <z_get_pr_c+0x12>
	else
		return 1;//get_lcd1234Val_filt(PR3);
 8003700:	2301      	movs	r3, #1
}
 8003702:	4618      	mov	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	2000126d 	.word	0x2000126d

08003710 <z_get_pf_d>:

int32_t z_get_pf_d(void) {
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 8003714:	4b05      	ldr	r3, [pc, #20]	@ (800372c <z_get_pf_d+0x1c>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <z_get_pf_d+0x10>
		return 0;
 800371c:	2300      	movs	r3, #0
 800371e:	e000      	b.n	8003722 <z_get_pf_d+0x12>
	else
		return 1;//get_lcd1234Val_filt(PF4);
 8003720:	2301      	movs	r3, #1
}
 8003722:	4618      	mov	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	2000126d 	.word	0x2000126d

08003730 <z_get_pr_d>:

int32_t z_get_pr_d(void) {
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
	if (z_rf_state == 0)
 8003734:	4b05      	ldr	r3, [pc, #20]	@ (800374c <z_get_pr_d+0x1c>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <z_get_pr_d+0x10>
		return 0;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <z_get_pr_d+0x12>
	else
		return 1;//get_lcd1234Val_filt(PR4);
 8003740:	2301      	movs	r3, #1
}
 8003742:	4618      	mov	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	2000126d 	.word	0x2000126d

08003750 <z_set_a_ampphase>:

uint8_t z_set_a_ampphase(uint32_t val) {
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	int32_t tmp_phase = val & 0x0000FFFF;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	b29b      	uxth	r3, r3
 800375c:	613b      	str	r3, [r7, #16]
	int32_t tmp_amplitude = (val & 0xFFFF0000) >> 16;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	60fb      	str	r3, [r7, #12]

	uint8_t retVal = CMR_SUCCESSFULL;
 8003764:	2380      	movs	r3, #128	@ 0x80
 8003766:	75fb      	strb	r3, [r7, #23]

	if (tmp_phase < min_phase) {
 8003768:	2200      	movs	r2, #0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4293      	cmp	r3, r2
 800376e:	da05      	bge.n	800377c <z_set_a_ampphase+0x2c>
		retVal = CMR_PARAMETERADJUSTED;
 8003770:	238a      	movs	r3, #138	@ 0x8a
 8003772:	75fb      	strb	r3, [r7, #23]
		chan1_phase = min_phase;
 8003774:	2200      	movs	r2, #0
 8003776:	4b19      	ldr	r3, [pc, #100]	@ (80037dc <z_set_a_ampphase+0x8c>)
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e00e      	b.n	800379a <z_set_a_ampphase+0x4a>
	} else if (tmp_phase > max_phase) {
 800377c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4293      	cmp	r3, r2
 8003784:	dd06      	ble.n	8003794 <z_set_a_ampphase+0x44>
		retVal = CMR_PARAMETERADJUSTED;
 8003786:	238a      	movs	r3, #138	@ 0x8a
 8003788:	75fb      	strb	r3, [r7, #23]
		chan1_phase = max_phase;
 800378a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800378e:	4b13      	ldr	r3, [pc, #76]	@ (80037dc <z_set_a_ampphase+0x8c>)
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e002      	b.n	800379a <z_set_a_ampphase+0x4a>
	} else {
		chan1_phase = tmp_phase;
 8003794:	4a11      	ldr	r2, [pc, #68]	@ (80037dc <z_set_a_ampphase+0x8c>)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	6013      	str	r3, [r2, #0]
	}

	if (tmp_amplitude < min_amplitude) {
 800379a:	2200      	movs	r2, #0
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4293      	cmp	r3, r2
 80037a0:	da05      	bge.n	80037ae <z_set_a_ampphase+0x5e>
		retVal = CMR_PARAMETERADJUSTED;
 80037a2:	238a      	movs	r3, #138	@ 0x8a
 80037a4:	75fb      	strb	r3, [r7, #23]
		chan1_amplitude = min_amplitude;
 80037a6:	2200      	movs	r2, #0
 80037a8:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <z_set_a_ampphase+0x90>)
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e00e      	b.n	80037cc <z_set_a_ampphase+0x7c>
	} else if (tmp_amplitude > max_amplitude) {
 80037ae:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4293      	cmp	r3, r2
 80037b6:	dd06      	ble.n	80037c6 <z_set_a_ampphase+0x76>
		retVal = CMR_PARAMETERADJUSTED;
 80037b8:	238a      	movs	r3, #138	@ 0x8a
 80037ba:	75fb      	strb	r3, [r7, #23]
		chan1_amplitude = max_amplitude;
 80037bc:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80037c0:	4b07      	ldr	r3, [pc, #28]	@ (80037e0 <z_set_a_ampphase+0x90>)
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e002      	b.n	80037cc <z_set_a_ampphase+0x7c>
	} else {
		chan1_amplitude = tmp_amplitude;
 80037c6:	4a06      	ldr	r2, [pc, #24]	@ (80037e0 <z_set_a_ampphase+0x90>)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6013      	str	r3, [r2, #0]

	//dds_set_cpow_x(chan1_phase, 1);
	//dds_set_amp_x(chan1_amplitude, 1);
	//dds_apply();

	return retVal;
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20001270 	.word	0x20001270
 80037e0:	20001280 	.word	0x20001280

080037e4 <z_set_b_ampphase>:

uint8_t z_set_b_ampphase(uint32_t val) {
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	int32_t tmp_phase = val & 0x0000FFFF;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	613b      	str	r3, [r7, #16]
	int32_t tmp_amplitude = (val & 0xFFFF0000) >> 16;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0c1b      	lsrs	r3, r3, #16
 80037f6:	60fb      	str	r3, [r7, #12]

	uint8_t retVal = CMR_SUCCESSFULL;
 80037f8:	2380      	movs	r3, #128	@ 0x80
 80037fa:	75fb      	strb	r3, [r7, #23]

	if (tmp_phase < min_phase) {
 80037fc:	2200      	movs	r2, #0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4293      	cmp	r3, r2
 8003802:	da05      	bge.n	8003810 <z_set_b_ampphase+0x2c>
		retVal = CMR_PARAMETERADJUSTED;
 8003804:	238a      	movs	r3, #138	@ 0x8a
 8003806:	75fb      	strb	r3, [r7, #23]
		chan2_phase = min_phase;
 8003808:	2200      	movs	r2, #0
 800380a:	4b19      	ldr	r3, [pc, #100]	@ (8003870 <z_set_b_ampphase+0x8c>)
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e00e      	b.n	800382e <z_set_b_ampphase+0x4a>
	} else if (tmp_phase > max_phase) {
 8003810:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4293      	cmp	r3, r2
 8003818:	dd06      	ble.n	8003828 <z_set_b_ampphase+0x44>
		retVal = CMR_PARAMETERADJUSTED;
 800381a:	238a      	movs	r3, #138	@ 0x8a
 800381c:	75fb      	strb	r3, [r7, #23]
		chan2_phase = max_phase;
 800381e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003822:	4b13      	ldr	r3, [pc, #76]	@ (8003870 <z_set_b_ampphase+0x8c>)
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e002      	b.n	800382e <z_set_b_ampphase+0x4a>
	} else {
		chan2_phase = tmp_phase;
 8003828:	4a11      	ldr	r2, [pc, #68]	@ (8003870 <z_set_b_ampphase+0x8c>)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6013      	str	r3, [r2, #0]
	}

	if (tmp_amplitude < min_amplitude) {
 800382e:	2200      	movs	r2, #0
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4293      	cmp	r3, r2
 8003834:	da05      	bge.n	8003842 <z_set_b_ampphase+0x5e>
		retVal = CMR_PARAMETERADJUSTED;
 8003836:	238a      	movs	r3, #138	@ 0x8a
 8003838:	75fb      	strb	r3, [r7, #23]
		chan2_amplitude = min_amplitude;
 800383a:	2200      	movs	r2, #0
 800383c:	4b0d      	ldr	r3, [pc, #52]	@ (8003874 <z_set_b_ampphase+0x90>)
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e00e      	b.n	8003860 <z_set_b_ampphase+0x7c>
	} else if (tmp_amplitude > max_amplitude) {
 8003842:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4293      	cmp	r3, r2
 800384a:	dd06      	ble.n	800385a <z_set_b_ampphase+0x76>
		retVal = CMR_PARAMETERADJUSTED;
 800384c:	238a      	movs	r3, #138	@ 0x8a
 800384e:	75fb      	strb	r3, [r7, #23]
		chan2_amplitude = max_amplitude;
 8003850:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003854:	4b07      	ldr	r3, [pc, #28]	@ (8003874 <z_set_b_ampphase+0x90>)
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e002      	b.n	8003860 <z_set_b_ampphase+0x7c>
	} else {
		chan2_amplitude = tmp_amplitude;
 800385a:	4a06      	ldr	r2, [pc, #24]	@ (8003874 <z_set_b_ampphase+0x90>)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6013      	str	r3, [r2, #0]

	//dds_set_cpow_x(chan2_phase, 2);
	//dds_set_amp_x(chan2_amplitude, 2);
	//dds_apply();

	return retVal;
 8003860:	7dfb      	ldrb	r3, [r7, #23]
}
 8003862:	4618      	mov	r0, r3
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20001274 	.word	0x20001274
 8003874:	20001284 	.word	0x20001284

08003878 <z_set_c_ampphase>:

uint8_t z_set_c_ampphase(uint32_t val) {
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	int32_t tmp_phase = val & 0x0000FFFF;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	b29b      	uxth	r3, r3
 8003884:	613b      	str	r3, [r7, #16]
	int32_t tmp_amplitude = (val & 0xFFFF0000) >> 16;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0c1b      	lsrs	r3, r3, #16
 800388a:	60fb      	str	r3, [r7, #12]

	uint8_t retVal = CMR_SUCCESSFULL;
 800388c:	2380      	movs	r3, #128	@ 0x80
 800388e:	75fb      	strb	r3, [r7, #23]

	if (tmp_phase < min_phase) {
 8003890:	2200      	movs	r2, #0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4293      	cmp	r3, r2
 8003896:	da05      	bge.n	80038a4 <z_set_c_ampphase+0x2c>
		retVal = CMR_PARAMETERADJUSTED;
 8003898:	238a      	movs	r3, #138	@ 0x8a
 800389a:	75fb      	strb	r3, [r7, #23]
		chan3_phase = min_phase;
 800389c:	2200      	movs	r2, #0
 800389e:	4b19      	ldr	r3, [pc, #100]	@ (8003904 <z_set_c_ampphase+0x8c>)
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e00e      	b.n	80038c2 <z_set_c_ampphase+0x4a>
	} else if (tmp_phase > max_phase) {
 80038a4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4293      	cmp	r3, r2
 80038ac:	dd06      	ble.n	80038bc <z_set_c_ampphase+0x44>
		retVal = CMR_PARAMETERADJUSTED;
 80038ae:	238a      	movs	r3, #138	@ 0x8a
 80038b0:	75fb      	strb	r3, [r7, #23]
		chan3_phase = max_phase;
 80038b2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80038b6:	4b13      	ldr	r3, [pc, #76]	@ (8003904 <z_set_c_ampphase+0x8c>)
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e002      	b.n	80038c2 <z_set_c_ampphase+0x4a>
	} else {
		chan3_phase = tmp_phase;
 80038bc:	4a11      	ldr	r2, [pc, #68]	@ (8003904 <z_set_c_ampphase+0x8c>)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	6013      	str	r3, [r2, #0]
	}

	if (tmp_amplitude < min_amplitude) {
 80038c2:	2200      	movs	r2, #0
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4293      	cmp	r3, r2
 80038c8:	da05      	bge.n	80038d6 <z_set_c_ampphase+0x5e>
		retVal = CMR_PARAMETERADJUSTED;
 80038ca:	238a      	movs	r3, #138	@ 0x8a
 80038cc:	75fb      	strb	r3, [r7, #23]
		chan3_amplitude = min_amplitude;
 80038ce:	2200      	movs	r2, #0
 80038d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <z_set_c_ampphase+0x90>)
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e00e      	b.n	80038f4 <z_set_c_ampphase+0x7c>
	} else if (tmp_amplitude > max_amplitude) {
 80038d6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4293      	cmp	r3, r2
 80038de:	dd06      	ble.n	80038ee <z_set_c_ampphase+0x76>
		retVal = CMR_PARAMETERADJUSTED;
 80038e0:	238a      	movs	r3, #138	@ 0x8a
 80038e2:	75fb      	strb	r3, [r7, #23]
		chan3_amplitude = max_amplitude;
 80038e4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80038e8:	4b07      	ldr	r3, [pc, #28]	@ (8003908 <z_set_c_ampphase+0x90>)
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	e002      	b.n	80038f4 <z_set_c_ampphase+0x7c>
	} else {
		chan3_amplitude = tmp_amplitude;
 80038ee:	4a06      	ldr	r2, [pc, #24]	@ (8003908 <z_set_c_ampphase+0x90>)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6013      	str	r3, [r2, #0]

	//dds_set_cpow_x(chan3_phase, 3);
	//dds_set_amp_x(chan3_amplitude, 3);
	//dds_apply();

	return retVal;
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20001278 	.word	0x20001278
 8003908:	20001288 	.word	0x20001288

0800390c <z_set_d_ampphase>:

uint8_t z_set_d_ampphase(uint32_t val) {
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	int32_t tmp_phase = val & 0x0000FFFF;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	b29b      	uxth	r3, r3
 8003918:	613b      	str	r3, [r7, #16]
	int32_t tmp_amplitude = (val & 0xFFFF0000) >> 16;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	0c1b      	lsrs	r3, r3, #16
 800391e:	60fb      	str	r3, [r7, #12]

	uint8_t retVal = CMR_SUCCESSFULL;
 8003920:	2380      	movs	r3, #128	@ 0x80
 8003922:	75fb      	strb	r3, [r7, #23]

	if (tmp_phase < min_phase) {
 8003924:	2200      	movs	r2, #0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4293      	cmp	r3, r2
 800392a:	da05      	bge.n	8003938 <z_set_d_ampphase+0x2c>
		retVal = CMR_PARAMETERADJUSTED;
 800392c:	238a      	movs	r3, #138	@ 0x8a
 800392e:	75fb      	strb	r3, [r7, #23]
		chan4_phase = min_phase;
 8003930:	2200      	movs	r2, #0
 8003932:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <z_set_d_ampphase+0x8c>)
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e00e      	b.n	8003956 <z_set_d_ampphase+0x4a>
	} else if (tmp_phase > max_phase) {
 8003938:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4293      	cmp	r3, r2
 8003940:	dd06      	ble.n	8003950 <z_set_d_ampphase+0x44>
		retVal = CMR_PARAMETERADJUSTED;
 8003942:	238a      	movs	r3, #138	@ 0x8a
 8003944:	75fb      	strb	r3, [r7, #23]
		chan4_phase = max_phase;
 8003946:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800394a:	4b13      	ldr	r3, [pc, #76]	@ (8003998 <z_set_d_ampphase+0x8c>)
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e002      	b.n	8003956 <z_set_d_ampphase+0x4a>
	} else {
		chan4_phase = tmp_phase;
 8003950:	4a11      	ldr	r2, [pc, #68]	@ (8003998 <z_set_d_ampphase+0x8c>)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	6013      	str	r3, [r2, #0]
	}

	if (tmp_amplitude < min_amplitude) {
 8003956:	2200      	movs	r2, #0
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4293      	cmp	r3, r2
 800395c:	da05      	bge.n	800396a <z_set_d_ampphase+0x5e>
		retVal = CMR_PARAMETERADJUSTED;
 800395e:	238a      	movs	r3, #138	@ 0x8a
 8003960:	75fb      	strb	r3, [r7, #23]
		chan4_amplitude = min_amplitude;
 8003962:	2200      	movs	r2, #0
 8003964:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <z_set_d_ampphase+0x90>)
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	e00e      	b.n	8003988 <z_set_d_ampphase+0x7c>
	} else if (tmp_amplitude > max_amplitude) {
 800396a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4293      	cmp	r3, r2
 8003972:	dd06      	ble.n	8003982 <z_set_d_ampphase+0x76>
		retVal = CMR_PARAMETERADJUSTED;
 8003974:	238a      	movs	r3, #138	@ 0x8a
 8003976:	75fb      	strb	r3, [r7, #23]
		chan4_amplitude = max_amplitude;
 8003978:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800397c:	4b07      	ldr	r3, [pc, #28]	@ (800399c <z_set_d_ampphase+0x90>)
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e002      	b.n	8003988 <z_set_d_ampphase+0x7c>
	} else {
		chan4_amplitude = tmp_amplitude;
 8003982:	4a06      	ldr	r2, [pc, #24]	@ (800399c <z_set_d_ampphase+0x90>)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6013      	str	r3, [r2, #0]

	//dds_set_cpow_x(chan4_phase, 4);
	//dds_set_amp_x(chan4_amplitude, 4);
	//dds_apply();

	return retVal;
 8003988:	7dfb      	ldrb	r3, [r7, #23]
}
 800398a:	4618      	mov	r0, r3
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	2000127c 	.word	0x2000127c
 800399c:	2000128c 	.word	0x2000128c

080039a0 <z_set_amp_a>:

uint8_t z_set_amp_a(int32_t val) {
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 80039a8:	2380      	movs	r3, #128	@ 0x80
 80039aa:	73fb      	strb	r3, [r7, #15]

	if (val < min_amplitude) {
 80039ac:	2200      	movs	r2, #0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4293      	cmp	r3, r2
 80039b2:	da05      	bge.n	80039c0 <z_set_amp_a+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 80039b4:	2382      	movs	r3, #130	@ 0x82
 80039b6:	73fb      	strb	r3, [r7, #15]
		chan1_amplitude = min_amplitude;
 80039b8:	2200      	movs	r2, #0
 80039ba:	4b0c      	ldr	r3, [pc, #48]	@ (80039ec <z_set_amp_a+0x4c>)
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e00e      	b.n	80039de <z_set_amp_a+0x3e>
	} else if (val > max_amplitude) {
 80039c0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4293      	cmp	r3, r2
 80039c8:	dd06      	ble.n	80039d8 <z_set_amp_a+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 80039ca:	2383      	movs	r3, #131	@ 0x83
 80039cc:	73fb      	strb	r3, [r7, #15]
		chan1_amplitude = max_amplitude;
 80039ce:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80039d2:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <z_set_amp_a+0x4c>)
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e002      	b.n	80039de <z_set_amp_a+0x3e>
	} else {
		chan1_amplitude = val;
 80039d8:	4a04      	ldr	r2, [pc, #16]	@ (80039ec <z_set_amp_a+0x4c>)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6013      	str	r3, [r2, #0]
	}
	//dds_set_amp_x(chan1_amplitude, 1);

	return retVal;
 80039de:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	20001280 	.word	0x20001280

080039f0 <z_get_amp_a>:

int32_t z_get_amp_a(void) {
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
	return chan1_amplitude;
 80039f4:	4b03      	ldr	r3, [pc, #12]	@ (8003a04 <z_get_amp_a+0x14>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20001280 	.word	0x20001280

08003a08 <z_set_amp_b>:

uint8_t z_set_amp_b(int32_t val) {
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 8003a10:	2380      	movs	r3, #128	@ 0x80
 8003a12:	73fb      	strb	r3, [r7, #15]

	if (val < min_amplitude) {
 8003a14:	2200      	movs	r2, #0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	da05      	bge.n	8003a28 <z_set_amp_b+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 8003a1c:	2382      	movs	r3, #130	@ 0x82
 8003a1e:	73fb      	strb	r3, [r7, #15]
		chan2_amplitude = min_amplitude;
 8003a20:	2200      	movs	r2, #0
 8003a22:	4b0c      	ldr	r3, [pc, #48]	@ (8003a54 <z_set_amp_b+0x4c>)
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	e00e      	b.n	8003a46 <z_set_amp_b+0x3e>
	} else if (val > max_amplitude) {
 8003a28:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	dd06      	ble.n	8003a40 <z_set_amp_b+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 8003a32:	2383      	movs	r3, #131	@ 0x83
 8003a34:	73fb      	strb	r3, [r7, #15]
		chan2_amplitude = max_amplitude;
 8003a36:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003a3a:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <z_set_amp_b+0x4c>)
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	e002      	b.n	8003a46 <z_set_amp_b+0x3e>
	} else {
		chan2_amplitude = val;
 8003a40:	4a04      	ldr	r2, [pc, #16]	@ (8003a54 <z_set_amp_b+0x4c>)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6013      	str	r3, [r2, #0]
	}
	//dds_set_amp_x(chan2_amplitude, 2);

	return retVal;
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	20001284 	.word	0x20001284

08003a58 <z_get_amp_b>:

int32_t z_get_amp_b(void) {
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
	return chan2_amplitude;
 8003a5c:	4b03      	ldr	r3, [pc, #12]	@ (8003a6c <z_get_amp_b+0x14>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20001284 	.word	0x20001284

08003a70 <z_set_amp_c>:

uint8_t z_set_amp_c(int32_t val) {
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 8003a78:	2380      	movs	r3, #128	@ 0x80
 8003a7a:	73fb      	strb	r3, [r7, #15]

	if (val < min_amplitude) {
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4293      	cmp	r3, r2
 8003a82:	da05      	bge.n	8003a90 <z_set_amp_c+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 8003a84:	2382      	movs	r3, #130	@ 0x82
 8003a86:	73fb      	strb	r3, [r7, #15]
		chan3_amplitude = min_amplitude;
 8003a88:	2200      	movs	r2, #0
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <z_set_amp_c+0x4c>)
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e00e      	b.n	8003aae <z_set_amp_c+0x3e>
	} else if (val > max_amplitude) {
 8003a90:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4293      	cmp	r3, r2
 8003a98:	dd06      	ble.n	8003aa8 <z_set_amp_c+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 8003a9a:	2383      	movs	r3, #131	@ 0x83
 8003a9c:	73fb      	strb	r3, [r7, #15]
		chan3_amplitude = max_amplitude;
 8003a9e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <z_set_amp_c+0x4c>)
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	e002      	b.n	8003aae <z_set_amp_c+0x3e>
	} else {
		chan3_amplitude = val;
 8003aa8:	4a04      	ldr	r2, [pc, #16]	@ (8003abc <z_set_amp_c+0x4c>)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6013      	str	r3, [r2, #0]
	}
	//dds_set_amp_x(chan3_amplitude, 3);

	return retVal;
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	20001288 	.word	0x20001288

08003ac0 <z_get_amp_c>:

int32_t z_get_amp_c(void) {
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
	return chan3_amplitude;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	@ (8003ad4 <z_get_amp_c+0x14>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20001288 	.word	0x20001288

08003ad8 <z_set_amp_d>:

uint8_t z_set_amp_d(int32_t val) {
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 8003ae0:	2380      	movs	r3, #128	@ 0x80
 8003ae2:	73fb      	strb	r3, [r7, #15]

	if (val < min_amplitude) {
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	da05      	bge.n	8003af8 <z_set_amp_d+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 8003aec:	2382      	movs	r3, #130	@ 0x82
 8003aee:	73fb      	strb	r3, [r7, #15]
		chan4_amplitude = min_amplitude;
 8003af0:	2200      	movs	r2, #0
 8003af2:	4b0c      	ldr	r3, [pc, #48]	@ (8003b24 <z_set_amp_d+0x4c>)
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e00e      	b.n	8003b16 <z_set_amp_d+0x3e>
	} else if (val > max_amplitude) {
 8003af8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4293      	cmp	r3, r2
 8003b00:	dd06      	ble.n	8003b10 <z_set_amp_d+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 8003b02:	2383      	movs	r3, #131	@ 0x83
 8003b04:	73fb      	strb	r3, [r7, #15]
		chan4_amplitude = max_amplitude;
 8003b06:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003b0a:	4b06      	ldr	r3, [pc, #24]	@ (8003b24 <z_set_amp_d+0x4c>)
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e002      	b.n	8003b16 <z_set_amp_d+0x3e>
	} else {
		chan4_amplitude = val;
 8003b10:	4a04      	ldr	r2, [pc, #16]	@ (8003b24 <z_set_amp_d+0x4c>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6013      	str	r3, [r2, #0]
	}
	//dds_set_amp_x(chan4_amplitude, 4);

	return retVal;
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	2000128c 	.word	0x2000128c

08003b28 <z_get_amp_d>:

int32_t z_get_amp_d(void) {
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
	return chan4_amplitude;
 8003b2c:	4b03      	ldr	r3, [pc, #12]	@ (8003b3c <z_get_amp_d+0x14>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	2000128c 	.word	0x2000128c

08003b40 <z_set_phase_a>:

uint8_t z_set_phase_a(int32_t val) {
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 8003b48:	2380      	movs	r3, #128	@ 0x80
 8003b4a:	73fb      	strb	r3, [r7, #15]

	if (val < min_phase) {
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4293      	cmp	r3, r2
 8003b52:	da05      	bge.n	8003b60 <z_set_phase_a+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 8003b54:	2382      	movs	r3, #130	@ 0x82
 8003b56:	73fb      	strb	r3, [r7, #15]
		chan1_phase = min_phase;
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b8c <z_set_phase_a+0x4c>)
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e00e      	b.n	8003b7e <z_set_phase_a+0x3e>
	} else if (val > max_phase) {
 8003b60:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4293      	cmp	r3, r2
 8003b68:	dd06      	ble.n	8003b78 <z_set_phase_a+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 8003b6a:	2383      	movs	r3, #131	@ 0x83
 8003b6c:	73fb      	strb	r3, [r7, #15]
		chan1_phase = max_phase;
 8003b6e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003b72:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <z_set_phase_a+0x4c>)
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e002      	b.n	8003b7e <z_set_phase_a+0x3e>
	} else {
		chan1_phase = val;
 8003b78:	4a04      	ldr	r2, [pc, #16]	@ (8003b8c <z_set_phase_a+0x4c>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6013      	str	r3, [r2, #0]
	}

	//dds_set_cpow_x(chan1_phase, 1);
	return retVal;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	20001270 	.word	0x20001270

08003b90 <z_get_phase_a>:

int32_t z_get_phase_a(void) {
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
	return chan1_phase;
 8003b94:	4b03      	ldr	r3, [pc, #12]	@ (8003ba4 <z_get_phase_a+0x14>)
 8003b96:	681b      	ldr	r3, [r3, #0]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	20001270 	.word	0x20001270

08003ba8 <z_set_phase_b>:

uint8_t z_set_phase_b(int32_t val) {
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 8003bb0:	2380      	movs	r3, #128	@ 0x80
 8003bb2:	73fb      	strb	r3, [r7, #15]

	if (val < min_phase) {
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	da05      	bge.n	8003bc8 <z_set_phase_b+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 8003bbc:	2382      	movs	r3, #130	@ 0x82
 8003bbe:	73fb      	strb	r3, [r7, #15]
		chan2_phase = min_phase;
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf4 <z_set_phase_b+0x4c>)
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	e00e      	b.n	8003be6 <z_set_phase_b+0x3e>
	} else if (val > max_phase) {
 8003bc8:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	dd06      	ble.n	8003be0 <z_set_phase_b+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 8003bd2:	2383      	movs	r3, #131	@ 0x83
 8003bd4:	73fb      	strb	r3, [r7, #15]
		chan2_phase = max_phase;
 8003bd6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003bda:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <z_set_phase_b+0x4c>)
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e002      	b.n	8003be6 <z_set_phase_b+0x3e>
	} else {
		chan2_phase = val;
 8003be0:	4a04      	ldr	r2, [pc, #16]	@ (8003bf4 <z_set_phase_b+0x4c>)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6013      	str	r3, [r2, #0]
	}

	//dds_set_cpow_x(chan2_phase, 2);
	return retVal;
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	20001274 	.word	0x20001274

08003bf8 <z_get_phase_b>:

int32_t z_get_phase_b(void) {
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
	return chan2_phase;
 8003bfc:	4b03      	ldr	r3, [pc, #12]	@ (8003c0c <z_get_phase_b+0x14>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20001274 	.word	0x20001274

08003c10 <z_set_phase_c>:

uint8_t z_set_phase_c(int32_t val) {
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 8003c18:	2380      	movs	r3, #128	@ 0x80
 8003c1a:	73fb      	strb	r3, [r7, #15]

	if (val < min_phase) {
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4293      	cmp	r3, r2
 8003c22:	da05      	bge.n	8003c30 <z_set_phase_c+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 8003c24:	2382      	movs	r3, #130	@ 0x82
 8003c26:	73fb      	strb	r3, [r7, #15]
		chan3_phase = min_phase;
 8003c28:	2200      	movs	r2, #0
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c5c <z_set_phase_c+0x4c>)
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e00e      	b.n	8003c4e <z_set_phase_c+0x3e>
	} else if (val > max_phase) {
 8003c30:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4293      	cmp	r3, r2
 8003c38:	dd06      	ble.n	8003c48 <z_set_phase_c+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 8003c3a:	2383      	movs	r3, #131	@ 0x83
 8003c3c:	73fb      	strb	r3, [r7, #15]
		chan3_phase = max_phase;
 8003c3e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003c42:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <z_set_phase_c+0x4c>)
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e002      	b.n	8003c4e <z_set_phase_c+0x3e>
	} else {
		chan3_phase = val;
 8003c48:	4a04      	ldr	r2, [pc, #16]	@ (8003c5c <z_set_phase_c+0x4c>)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6013      	str	r3, [r2, #0]
	}

	//dds_set_cpow_x(chan3_phase, 3);
	return retVal;
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	20001278 	.word	0x20001278

08003c60 <z_get_phase_c>:

int32_t z_get_phase_c(void) {
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
	return chan3_phase;
 8003c64:	4b03      	ldr	r3, [pc, #12]	@ (8003c74 <z_get_phase_c+0x14>)
 8003c66:	681b      	ldr	r3, [r3, #0]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20001278 	.word	0x20001278

08003c78 <z_set_phase_d>:

uint8_t z_set_phase_d(int32_t val) {
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
	uint8_t retVal = CMR_SUCCESSFULL;
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	73fb      	strb	r3, [r7, #15]

	if (val < min_phase) {
 8003c84:	2200      	movs	r2, #0
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	da05      	bge.n	8003c98 <z_set_phase_d+0x20>
		retVal = CMR_PARAMETERCLIPEDMIN;
 8003c8c:	2382      	movs	r3, #130	@ 0x82
 8003c8e:	73fb      	strb	r3, [r7, #15]
		chan4_phase = min_phase;
 8003c90:	2200      	movs	r2, #0
 8003c92:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc4 <z_set_phase_d+0x4c>)
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e00e      	b.n	8003cb6 <z_set_phase_d+0x3e>
	} else if (val > max_phase) {
 8003c98:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	dd06      	ble.n	8003cb0 <z_set_phase_d+0x38>
		retVal = CMR_PARAMETERCLIPEDMAX;
 8003ca2:	2383      	movs	r3, #131	@ 0x83
 8003ca4:	73fb      	strb	r3, [r7, #15]
		chan4_phase = max_phase;
 8003ca6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003caa:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <z_set_phase_d+0x4c>)
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	e002      	b.n	8003cb6 <z_set_phase_d+0x3e>
	} else {
		chan4_phase = val;
 8003cb0:	4a04      	ldr	r2, [pc, #16]	@ (8003cc4 <z_set_phase_d+0x4c>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6013      	str	r3, [r2, #0]
	}

	//dds_set_cpow_x(chan4_phase, 4);
	return retVal;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	2000127c 	.word	0x2000127c

08003cc8 <z_get_phase_d>:

int32_t z_get_phase_d(void) {
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
	return chan4_phase;
 8003ccc:	4b03      	ldr	r3, [pc, #12]	@ (8003cdc <z_get_phase_d+0x14>)
 8003cce:	681b      	ldr	r3, [r3, #0]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	2000127c 	.word	0x2000127c

08003ce0 <z_set_apply>:

uint8_t z_set_apply(void) {
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0

	uint8_t retVal = CMR_SUCCESSFULL;
 8003ce6:	2380      	movs	r3, #128	@ 0x80
 8003ce8:	71fb      	strb	r3, [r7, #7]

	//retVal = dds_apply();
	return retVal;
 8003cea:	79fb      	ldrb	r3, [r7, #7]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <z_cmd_scheduler>:
//die Mechanimus zur Verarbeitung der Befehle mit den unterschiedlichen Prioritäten
void z_cmd_scheduler(void);

//--- FUNKTIONSDEFINITIONS --------------------------------------------------------------------------------------------------
void z_cmd_scheduler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
	uint8_t priolevel0_null_flg = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	75fb      	strb	r3, [r7, #23]
	uint8_t priolevel1_null_flg = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	75bb      	strb	r3, [r7, #22]
	uint8_t priolevel2_null_flg = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	757b      	strb	r3, [r7, #21]

	uint8_t cmdcount = 0;                       //Zähler für die zu verarbeitenden Befehle
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	753b      	strb	r3, [r7, #20]
	uint8_t cmd_flg = 0;                       //Falls cmd_flg = 1 ist, d.h. keinen Befehl zu verarbeiten; cmd_flg = 0, d.h. noch Befehl zu verarbeiten
 8003d0e:	2300      	movs	r3, #0
 8003d10:	74fb      	strb	r3, [r7, #19]
	stack_item cmd;

	uint8_t resultflg = get_anzFrei_resultQueue();
 8003d12:	f7fe f8c5 	bl	8001ea0 <get_anzFrei_resultQueue>
 8003d16:	4603      	mov	r3, r0
 8003d18:	74bb      	strb	r3, [r7, #18]

	if (resultflg > 1 )            //prüft, ob es noch freien Platz in resultqueue.
 8003d1a:	7cbb      	ldrb	r3, [r7, #18]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d953      	bls.n	8003dc8 <z_cmd_scheduler+0xd0>
	{
		do
		{
			while ((cmdcount < Z_MAX_HIGHPRIO_NUM) && (priolevel0_null_flg == 0))
 8003d20:	e012      	b.n	8003d48 <z_cmd_scheduler+0x50>
			{
				if (z_priolevel_header[PRIO_LEVEL0] != NONEXT)
 8003d22:	4b2b      	ldr	r3, [pc, #172]	@ (8003dd0 <z_cmd_scheduler+0xd8>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2bff      	cmp	r3, #255	@ 0xff
 8003d28:	d00c      	beq.n	8003d44 <z_cmd_scheduler+0x4c>
				{
					zstack_pop(&cmd, PRIO_LEVEL0);
 8003d2a:	463b      	mov	r3, r7
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe fbe0 	bl	80024f4 <zstack_pop>
					z_cmd_sero(cmd);
 8003d34:	463b      	mov	r3, r7
 8003d36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d38:	f000 f84c 	bl	8003dd4 <z_cmd_sero>
					cmdcount++;
 8003d3c:	7d3b      	ldrb	r3, [r7, #20]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	753b      	strb	r3, [r7, #20]
 8003d42:	e001      	b.n	8003d48 <z_cmd_scheduler+0x50>

				}
				else
				{
					priolevel0_null_flg = 1;      //es gibt keinen Befehl in der Prioritätliste mit Level 0
 8003d44:	2301      	movs	r3, #1
 8003d46:	75fb      	strb	r3, [r7, #23]
			while ((cmdcount < Z_MAX_HIGHPRIO_NUM) && (priolevel0_null_flg == 0))
 8003d48:	7d3b      	ldrb	r3, [r7, #20]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d802      	bhi.n	8003d54 <z_cmd_scheduler+0x5c>
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0e6      	beq.n	8003d22 <z_cmd_scheduler+0x2a>
				};
			};

			if (z_priolevel_header[PRIO_LEVEL1] != NONEXT)
 8003d54:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd0 <z_cmd_scheduler+0xd8>)
 8003d56:	785b      	ldrb	r3, [r3, #1]
 8003d58:	2bff      	cmp	r3, #255	@ 0xff
 8003d5a:	d00f      	beq.n	8003d7c <z_cmd_scheduler+0x84>
			{
				if (cmdcount < Z_MAXCMD)
 8003d5c:	7d3b      	ldrb	r3, [r7, #20]
 8003d5e:	2b09      	cmp	r3, #9
 8003d60:	d80e      	bhi.n	8003d80 <z_cmd_scheduler+0x88>
				{
					zstack_pop(&cmd, PRIO_LEVEL1);
 8003d62:	463b      	mov	r3, r7
 8003d64:	2101      	movs	r1, #1
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe fbc4 	bl	80024f4 <zstack_pop>
					z_cmd_sero(cmd);
 8003d6c:	463b      	mov	r3, r7
 8003d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d70:	f000 f830 	bl	8003dd4 <z_cmd_sero>
					cmdcount++;
 8003d74:	7d3b      	ldrb	r3, [r7, #20]
 8003d76:	3301      	adds	r3, #1
 8003d78:	753b      	strb	r3, [r7, #20]
 8003d7a:	e001      	b.n	8003d80 <z_cmd_scheduler+0x88>

				};
			}
			else
			{
				priolevel1_null_flg = 1;   //es gibt keinen Befehl in der Prioritätliste mit Level 1
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	75bb      	strb	r3, [r7, #22]
			};

			if (z_priolevel_header[PRIO_LEVEL2] != NONEXT)
 8003d80:	4b13      	ldr	r3, [pc, #76]	@ (8003dd0 <z_cmd_scheduler+0xd8>)
 8003d82:	789b      	ldrb	r3, [r3, #2]
 8003d84:	2bff      	cmp	r3, #255	@ 0xff
 8003d86:	d00f      	beq.n	8003da8 <z_cmd_scheduler+0xb0>
			{
				if (cmdcount < Z_MAXCMD)
 8003d88:	7d3b      	ldrb	r3, [r7, #20]
 8003d8a:	2b09      	cmp	r3, #9
 8003d8c:	d80e      	bhi.n	8003dac <z_cmd_scheduler+0xb4>
				{
					zstack_pop(&cmd, PRIO_LEVEL2);
 8003d8e:	463b      	mov	r3, r7
 8003d90:	2102      	movs	r1, #2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe fbae 	bl	80024f4 <zstack_pop>
					z_cmd_sero(cmd);
 8003d98:	463b      	mov	r3, r7
 8003d9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d9c:	f000 f81a 	bl	8003dd4 <z_cmd_sero>
					cmdcount++;
 8003da0:	7d3b      	ldrb	r3, [r7, #20]
 8003da2:	3301      	adds	r3, #1
 8003da4:	753b      	strb	r3, [r7, #20]
 8003da6:	e001      	b.n	8003dac <z_cmd_scheduler+0xb4>
				};
			}
			else
			{
				priolevel2_null_flg = 1;   //es gibt keinen Befehl in der Prioritätliste mit Level 2
 8003da8:	2301      	movs	r3, #1
 8003daa:	757b      	strb	r3, [r7, #21]
			};

			//prüft, ob die drei Prioritätslisten alle leer sind.
			cmd_flg = priolevel0_null_flg & priolevel1_null_flg;
 8003dac:	7dfa      	ldrb	r2, [r7, #23]
 8003dae:	7dbb      	ldrb	r3, [r7, #22]
 8003db0:	4013      	ands	r3, r2
 8003db2:	74fb      	strb	r3, [r7, #19]
			cmd_flg &= priolevel2_null_flg;
 8003db4:	7cfa      	ldrb	r2, [r7, #19]
 8003db6:	7d7b      	ldrb	r3, [r7, #21]
 8003db8:	4013      	ands	r3, r2
 8003dba:	74fb      	strb	r3, [r7, #19]

		}while ( (cmdcount < Z_MAXCMD) && (cmd_flg == 0));
 8003dbc:	7d3b      	ldrb	r3, [r7, #20]
 8003dbe:	2b09      	cmp	r3, #9
 8003dc0:	d802      	bhi.n	8003dc8 <z_cmd_scheduler+0xd0>
 8003dc2:	7cfb      	ldrb	r3, [r7, #19]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0bf      	beq.n	8003d48 <z_cmd_scheduler+0x50>
	};

}
 8003dc8:	bf00      	nop
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000110 	.word	0x20000110

08003dd4 <z_cmd_sero>:

void z_cmd_sero(stack_item cmd)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	463c      	mov	r4, r7
 8003ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch (cmd.cmd_index)
 8003de0:	887b      	ldrh	r3, [r7, #2]
 8003de2:	3b03      	subs	r3, #3
 8003de4:	2b63      	cmp	r3, #99	@ 0x63
 8003de6:	f200 81da 	bhi.w	800419e <z_cmd_sero+0x3ca>
 8003dea:	a201      	add	r2, pc, #4	@ (adr r2, 8003df0 <z_cmd_sero+0x1c>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003f81 	.word	0x08003f81
 8003df4:	08003f91 	.word	0x08003f91
 8003df8:	08003f9f 	.word	0x08003f9f
 8003dfc:	08003faf 	.word	0x08003faf
 8003e00:	0800419f 	.word	0x0800419f
 8003e04:	0800419f 	.word	0x0800419f
 8003e08:	08003fbd 	.word	0x08003fbd
 8003e0c:	0800419f 	.word	0x0800419f
 8003e10:	0800419f 	.word	0x0800419f
 8003e14:	08003fc7 	.word	0x08003fc7
 8003e18:	0800419f 	.word	0x0800419f
 8003e1c:	08003fd5 	.word	0x08003fd5
 8003e20:	0800419f 	.word	0x0800419f
 8003e24:	0800419f 	.word	0x0800419f
 8003e28:	0800419f 	.word	0x0800419f
 8003e2c:	0800419f 	.word	0x0800419f
 8003e30:	0800419f 	.word	0x0800419f
 8003e34:	0800419f 	.word	0x0800419f
 8003e38:	0800419f 	.word	0x0800419f
 8003e3c:	0800419f 	.word	0x0800419f
 8003e40:	0800419f 	.word	0x0800419f
 8003e44:	0800419f 	.word	0x0800419f
 8003e48:	0800419f 	.word	0x0800419f
 8003e4c:	0800419f 	.word	0x0800419f
 8003e50:	0800419f 	.word	0x0800419f
 8003e54:	0800419f 	.word	0x0800419f
 8003e58:	0800419f 	.word	0x0800419f
 8003e5c:	08003fe3 	.word	0x08003fe3
 8003e60:	0800419f 	.word	0x0800419f
 8003e64:	08003ff1 	.word	0x08003ff1
 8003e68:	08003fff 	.word	0x08003fff
 8003e6c:	0800400d 	.word	0x0800400d
 8003e70:	0800401b 	.word	0x0800401b
 8003e74:	08004029 	.word	0x08004029
 8003e78:	08004037 	.word	0x08004037
 8003e7c:	0800419f 	.word	0x0800419f
 8003e80:	0800419f 	.word	0x0800419f
 8003e84:	08004045 	.word	0x08004045
 8003e88:	0800419f 	.word	0x0800419f
 8003e8c:	08004053 	.word	0x08004053
 8003e90:	08004061 	.word	0x08004061
 8003e94:	0800406f 	.word	0x0800406f
 8003e98:	0800407d 	.word	0x0800407d
 8003e9c:	0800408b 	.word	0x0800408b
 8003ea0:	08004099 	.word	0x08004099
 8003ea4:	0800419f 	.word	0x0800419f
 8003ea8:	0800419f 	.word	0x0800419f
 8003eac:	080040a7 	.word	0x080040a7
 8003eb0:	0800419f 	.word	0x0800419f
 8003eb4:	080040b5 	.word	0x080040b5
 8003eb8:	080040c3 	.word	0x080040c3
 8003ebc:	080040d1 	.word	0x080040d1
 8003ec0:	080040df 	.word	0x080040df
 8003ec4:	080040ed 	.word	0x080040ed
 8003ec8:	080040fb 	.word	0x080040fb
 8003ecc:	0800419f 	.word	0x0800419f
 8003ed0:	0800419f 	.word	0x0800419f
 8003ed4:	08004109 	.word	0x08004109
 8003ed8:	0800419f 	.word	0x0800419f
 8003edc:	08004117 	.word	0x08004117
 8003ee0:	08004125 	.word	0x08004125
 8003ee4:	08004133 	.word	0x08004133
 8003ee8:	08004141 	.word	0x08004141
 8003eec:	0800414f 	.word	0x0800414f
 8003ef0:	0800415d 	.word	0x0800415d
 8003ef4:	0800419f 	.word	0x0800419f
 8003ef8:	0800419f 	.word	0x0800419f
 8003efc:	0800419f 	.word	0x0800419f
 8003f00:	08004193 	.word	0x08004193
 8003f04:	08004199 	.word	0x08004199
 8003f08:	0800419f 	.word	0x0800419f
 8003f0c:	0800419f 	.word	0x0800419f
 8003f10:	0800419f 	.word	0x0800419f
 8003f14:	0800419f 	.word	0x0800419f
 8003f18:	0800419f 	.word	0x0800419f
 8003f1c:	0800419f 	.word	0x0800419f
 8003f20:	0800419f 	.word	0x0800419f
 8003f24:	0800419f 	.word	0x0800419f
 8003f28:	0800419f 	.word	0x0800419f
 8003f2c:	0800419f 	.word	0x0800419f
 8003f30:	0800419f 	.word	0x0800419f
 8003f34:	0800419f 	.word	0x0800419f
 8003f38:	0800419f 	.word	0x0800419f
 8003f3c:	0800419f 	.word	0x0800419f
 8003f40:	0800419f 	.word	0x0800419f
 8003f44:	0800416b 	.word	0x0800416b
 8003f48:	0800419f 	.word	0x0800419f
 8003f4c:	0800419f 	.word	0x0800419f
 8003f50:	08004175 	.word	0x08004175
 8003f54:	0800419f 	.word	0x0800419f
 8003f58:	0800419f 	.word	0x0800419f
 8003f5c:	0800419f 	.word	0x0800419f
 8003f60:	0800419f 	.word	0x0800419f
 8003f64:	0800419f 	.word	0x0800419f
 8003f68:	0800419f 	.word	0x0800419f
 8003f6c:	0800419f 	.word	0x0800419f
 8003f70:	0800419f 	.word	0x0800419f
 8003f74:	0800417f 	.word	0x0800417f
 8003f78:	0800419f 	.word	0x0800419f
 8003f7c:	08004189 	.word	0x08004189
	{
		case CMD_SET_REM_CTL:
			cmd.cmd_ack = z_set_remote_mode(cmd.parameter);
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fb1d 	bl	80035c4 <z_set_remote_mode>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	713b      	strb	r3, [r7, #4]
			break;
 8003f8e:	e109      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_RF:
			cmd.parameter = z_get_rf();
 8003f90:	f7ff fb52 	bl	8003638 <z_get_rf>
 8003f94:	4603      	mov	r3, r0
 8003f96:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8003f98:	2380      	movs	r3, #128	@ 0x80
 8003f9a:	713b      	strb	r3, [r7, #4]
			break;
 8003f9c:	e102      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_SET_RF:
			cmd.cmd_ack = z_set_rf(cmd.parameter);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fb2c 	bl	8003600 <z_set_rf>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	713b      	strb	r3, [r7, #4]
			break;
 8003fac:	e0fa      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_REM_CTL:
			cmd.parameter = z_get_remote_mode ();
 8003fae:	f7ff fafd 	bl	80035ac <z_get_remote_mode>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8003fb6:	2380      	movs	r3, #128	@ 0x80
 8003fb8:	713b      	strb	r3, [r7, #4]
			break;
 8003fba:	e0f3      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_RESET_ERROR:
			cmd.cmd_ack = z_reset();
 8003fbc:	f7ff fae2 	bl	8003584 <z_reset>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	713b      	strb	r3, [r7, #4]
			break;
 8003fc4:	e0ee      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_STATUS:
			cmd.parameter = z_get_status();
 8003fc6:	f7ff fad1 	bl	800356c <z_get_status>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8003fce:	2380      	movs	r3, #128	@ 0x80
 8003fd0:	713b      	strb	r3, [r7, #4]
			break;
 8003fd2:	e0e7      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_ERR:
			cmd.parameter = z_get_error();
 8003fd4:	f7ff faa0 	bl	8003518 <z_get_error>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8003fdc:	2380      	movs	r3, #128	@ 0x80
 8003fde:	713b      	strb	r3, [r7, #4]
			break;
 8003fe0:	e0e0      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_A_PF:
			cmd.parameter = z_get_pf_a();
 8003fe2:	f7ff fb35 	bl	8003650 <z_get_pf_a>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8003fea:	2380      	movs	r3, #128	@ 0x80
 8003fec:	713b      	strb	r3, [r7, #4]
			break;
 8003fee:	e0d9      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_A_PR:
			cmd.parameter = z_get_pr_a();
 8003ff0:	f7ff fb3e 	bl	8003670 <z_get_pr_a>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8003ff8:	2380      	movs	r3, #128	@ 0x80
 8003ffa:	713b      	strb	r3, [r7, #4]
			break;
 8003ffc:	e0d2      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_SET_A_AMPLITUDE:
			cmd.cmd_ack = z_set_amp_a(cmd.parameter);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fccd 	bl	80039a0 <z_set_amp_a>
 8004006:	4603      	mov	r3, r0
 8004008:	713b      	strb	r3, [r7, #4]
			break;
 800400a:	e0cb      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_A_AMPLITUDE:
			cmd.parameter = z_get_amp_a();
 800400c:	f7ff fcf0 	bl	80039f0 <z_get_amp_a>
 8004010:	4603      	mov	r3, r0
 8004012:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004014:	2380      	movs	r3, #128	@ 0x80
 8004016:	713b      	strb	r3, [r7, #4]
			break;
 8004018:	e0c4      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_SET_A_PHASE:
			cmd.cmd_ack = z_set_phase_a(cmd.parameter);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff fd8f 	bl	8003b40 <z_set_phase_a>
 8004022:	4603      	mov	r3, r0
 8004024:	713b      	strb	r3, [r7, #4]
			break;
 8004026:	e0bd      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_A_PHASE:
			cmd.parameter = z_get_phase_a();
 8004028:	f7ff fdb2 	bl	8003b90 <z_get_phase_a>
 800402c:	4603      	mov	r3, r0
 800402e:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004030:	2380      	movs	r3, #128	@ 0x80
 8004032:	713b      	strb	r3, [r7, #4]
			break;
 8004034:	e0b6      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_SET_A_AMPPHASE:
			cmd.cmd_ack = z_set_a_ampphase(cmd.parameter);
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fb89 	bl	8003750 <z_set_a_ampphase>
 800403e:	4603      	mov	r3, r0
 8004040:	713b      	strb	r3, [r7, #4]
			break;
 8004042:	e0af      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_B_PF:
			cmd.parameter = z_get_pf_b();
 8004044:	f7ff fb24 	bl	8003690 <z_get_pf_b>
 8004048:	4603      	mov	r3, r0
 800404a:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 800404c:	2380      	movs	r3, #128	@ 0x80
 800404e:	713b      	strb	r3, [r7, #4]
			break;
 8004050:	e0a8      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_B_PR:
			cmd.parameter = z_get_pr_b();
 8004052:	f7ff fb2d 	bl	80036b0 <z_get_pr_b>
 8004056:	4603      	mov	r3, r0
 8004058:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 800405a:	2380      	movs	r3, #128	@ 0x80
 800405c:	713b      	strb	r3, [r7, #4]
			break;
 800405e:	e0a1      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_SET_B_AMPLITUDE:
			cmd.cmd_ack = z_set_amp_b(cmd.parameter);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fcd0 	bl	8003a08 <z_set_amp_b>
 8004068:	4603      	mov	r3, r0
 800406a:	713b      	strb	r3, [r7, #4]
			break;
 800406c:	e09a      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_B_AMPLITUDE:
			cmd.parameter = z_get_amp_b();
 800406e:	f7ff fcf3 	bl	8003a58 <z_get_amp_b>
 8004072:	4603      	mov	r3, r0
 8004074:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004076:	2380      	movs	r3, #128	@ 0x80
 8004078:	713b      	strb	r3, [r7, #4]
			break;
 800407a:	e093      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_SET_B_PHASE:
			cmd.cmd_ack = z_set_phase_b(cmd.parameter);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fd92 	bl	8003ba8 <z_set_phase_b>
 8004084:	4603      	mov	r3, r0
 8004086:	713b      	strb	r3, [r7, #4]
			break;
 8004088:	e08c      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_B_PHASE:
			cmd.parameter = z_get_phase_b();
 800408a:	f7ff fdb5 	bl	8003bf8 <z_get_phase_b>
 800408e:	4603      	mov	r3, r0
 8004090:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004092:	2380      	movs	r3, #128	@ 0x80
 8004094:	713b      	strb	r3, [r7, #4]
			break;
 8004096:	e085      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_SET_B_AMPPHASE:
			cmd.cmd_ack = z_set_b_ampphase(cmd.parameter);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fba2 	bl	80037e4 <z_set_b_ampphase>
 80040a0:	4603      	mov	r3, r0
 80040a2:	713b      	strb	r3, [r7, #4]
			break;
 80040a4:	e07e      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_C_PF:
			cmd.parameter = z_get_pf_c();
 80040a6:	f7ff fb13 	bl	80036d0 <z_get_pf_c>
 80040aa:	4603      	mov	r3, r0
 80040ac:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	713b      	strb	r3, [r7, #4]
			break;
 80040b2:	e077      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_C_PR:
			cmd.parameter = z_get_pr_c();
 80040b4:	f7ff fb1c 	bl	80036f0 <z_get_pr_c>
 80040b8:	4603      	mov	r3, r0
 80040ba:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 80040bc:	2380      	movs	r3, #128	@ 0x80
 80040be:	713b      	strb	r3, [r7, #4]
			break;
 80040c0:	e070      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_SET_C_AMPLITUDE:
			cmd.cmd_ack = z_set_amp_c(cmd.parameter);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff fcd3 	bl	8003a70 <z_set_amp_c>
 80040ca:	4603      	mov	r3, r0
 80040cc:	713b      	strb	r3, [r7, #4]
			break;
 80040ce:	e069      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_C_AMPLITUDE:
			cmd.parameter = z_get_amp_c();
 80040d0:	f7ff fcf6 	bl	8003ac0 <z_get_amp_c>
 80040d4:	4603      	mov	r3, r0
 80040d6:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 80040d8:	2380      	movs	r3, #128	@ 0x80
 80040da:	713b      	strb	r3, [r7, #4]
			break;
 80040dc:	e062      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_SET_C_PHASE:
			cmd.cmd_ack = z_set_phase_c(cmd.parameter);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fd95 	bl	8003c10 <z_set_phase_c>
 80040e6:	4603      	mov	r3, r0
 80040e8:	713b      	strb	r3, [r7, #4]
			break;
 80040ea:	e05b      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_C_PHASE:
			cmd.parameter = z_get_phase_c();
 80040ec:	f7ff fdb8 	bl	8003c60 <z_get_phase_c>
 80040f0:	4603      	mov	r3, r0
 80040f2:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 80040f4:	2380      	movs	r3, #128	@ 0x80
 80040f6:	713b      	strb	r3, [r7, #4]
			break;
 80040f8:	e054      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_SET_C_AMPPHASE:
			cmd.cmd_ack = z_set_c_ampphase(cmd.parameter);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fbbb 	bl	8003878 <z_set_c_ampphase>
 8004102:	4603      	mov	r3, r0
 8004104:	713b      	strb	r3, [r7, #4]
			break;
 8004106:	e04d      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_D_PF:
			cmd.parameter = z_get_pf_d();
 8004108:	f7ff fb02 	bl	8003710 <z_get_pf_d>
 800410c:	4603      	mov	r3, r0
 800410e:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004110:	2380      	movs	r3, #128	@ 0x80
 8004112:	713b      	strb	r3, [r7, #4]
			break;
 8004114:	e046      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_D_PR:
			cmd.parameter = z_get_pr_d();
 8004116:	f7ff fb0b 	bl	8003730 <z_get_pr_d>
 800411a:	4603      	mov	r3, r0
 800411c:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 800411e:	2380      	movs	r3, #128	@ 0x80
 8004120:	713b      	strb	r3, [r7, #4]
			break;
 8004122:	e03f      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_SET_D_AMPLITUDE:
			cmd.cmd_ack = z_set_amp_d(cmd.parameter);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fcd6 	bl	8003ad8 <z_set_amp_d>
 800412c:	4603      	mov	r3, r0
 800412e:	713b      	strb	r3, [r7, #4]
			break;
 8004130:	e038      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_D_AMPLITUDE:
			cmd.parameter = z_get_amp_d();
 8004132:	f7ff fcf9 	bl	8003b28 <z_get_amp_d>
 8004136:	4603      	mov	r3, r0
 8004138:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 800413a:	2380      	movs	r3, #128	@ 0x80
 800413c:	713b      	strb	r3, [r7, #4]
			break;
 800413e:	e031      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_SET_D_PHASE:
			cmd.cmd_ack = z_set_phase_d(cmd.parameter);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fd98 	bl	8003c78 <z_set_phase_d>
 8004148:	4603      	mov	r3, r0
 800414a:	713b      	strb	r3, [r7, #4]
			break;
 800414c:	e02a      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_D_PHASE:
			cmd.parameter = z_get_phase_d();
 800414e:	f7ff fdbb 	bl	8003cc8 <z_get_phase_d>
 8004152:	4603      	mov	r3, r0
 8004154:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004156:	2380      	movs	r3, #128	@ 0x80
 8004158:	713b      	strb	r3, [r7, #4]
			break;
 800415a:	e023      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_SET_D_AMPPHASE:
			cmd.cmd_ack = z_set_d_ampphase(cmd.parameter);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fbd4 	bl	800390c <z_set_d_ampphase>
 8004164:	4603      	mov	r3, r0
 8004166:	713b      	strb	r3, [r7, #4]
			break;
 8004168:	e01c      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_MON_UDC:
			cmd.parameter = 0;//z_get_u_act_lcd();
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	713b      	strb	r3, [r7, #4]
			break;
 8004172:	e017      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_SET_APPLY:
			cmd.cmd_ack = z_set_apply();
 8004174:	f7ff fdb4 	bl	8003ce0 <z_set_apply>
 8004178:	4603      	mov	r3, r0
 800417a:	713b      	strb	r3, [r7, #4]
			break;
 800417c:	e012      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_MON_T1:
			cmd.parameter = 1;//z_get_t1_act_lcd();
 800417e:	2301      	movs	r3, #1
 8004180:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004182:	2380      	movs	r3, #128	@ 0x80
 8004184:	713b      	strb	r3, [r7, #4]
			break;
 8004186:	e00d      	b.n	80041a4 <z_cmd_sero+0x3d0>
		case CMD_GET_MON_T2:
			cmd.parameter = 1;//z_get_t2_act_lcd();
 8004188:	2301      	movs	r3, #1
 800418a:	60bb      	str	r3, [r7, #8]
			cmd.cmd_ack = CMR_SUCCESSFULL;
 800418c:	2380      	movs	r3, #128	@ 0x80
 800418e:	713b      	strb	r3, [r7, #4]
			break;
 8004190:	e008      	b.n	80041a4 <z_cmd_sero+0x3d0>
		    //if (gasbox_xfer(GB_CMD_SET_DAC0, code, &r, 200) && r.status == 0x80) {
		        // tell PC it's OK (use your existing OK path)
		        //output_ascii_cmdack(CMR_SUCCESSFULL);         // or queue an OK
		        //return CMR_SUCCESSFULL;
		    //}
			cmd.cmd_ack = CMR_SUCCESSFULL; // or a better error code you use for comms/timeout
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	713b      	strb	r3, [r7, #4]
		    break;
 8004196:	e005      	b.n	80041a4 <z_cmd_sero+0x3d0>
		    //if (gasbox_xfer(GB_CMD_READ_ADC0, 0, &r, 200) && r.status == 0x80) {
		        // return the number to PC using your usual result mechanism
		        //output_ascii_result_number(r.value);          // or enqueue into resultqueue
		       // return CMR_SUCCESSFULL;
		   // }
			cmd.cmd_ack = CMR_SUCCESSFULL;
 8004198:	2380      	movs	r3, #128	@ 0x80
 800419a:	713b      	strb	r3, [r7, #4]
		    break;
 800419c:	e002      	b.n	80041a4 <z_cmd_sero+0x3d0>


        default:
            cmd.cmd_ack = CMR_UNKNOWNCOMMAND;
 800419e:	2306      	movs	r3, #6
 80041a0:	713b      	strb	r3, [r7, #4]
            break;
 80041a2:	bf00      	nop
	};
	resultQueue_push(cmd);
 80041a4:	463b      	mov	r3, r7
 80041a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041a8:	f7fd feba 	bl	8001f20 <resultQueue_push>

}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd90      	pop	{r4, r7, pc}

080041b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80041b4:	480d      	ldr	r0, [pc, #52]	@ (80041ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80041b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80041b8:	f7fe fa6c 	bl	8002694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041bc:	480c      	ldr	r0, [pc, #48]	@ (80041f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80041be:	490d      	ldr	r1, [pc, #52]	@ (80041f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80041c0:	4a0d      	ldr	r2, [pc, #52]	@ (80041f8 <LoopForever+0xe>)
  movs r3, #0
 80041c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80041c4:	e002      	b.n	80041cc <LoopCopyDataInit>

080041c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041ca:	3304      	adds	r3, #4

080041cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041d0:	d3f9      	bcc.n	80041c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041d2:	4a0a      	ldr	r2, [pc, #40]	@ (80041fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80041d4:	4c0a      	ldr	r4, [pc, #40]	@ (8004200 <LoopForever+0x16>)
  movs r3, #0
 80041d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041d8:	e001      	b.n	80041de <LoopFillZerobss>

080041da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041dc:	3204      	adds	r2, #4

080041de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041e0:	d3fb      	bcc.n	80041da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80041e2:	f004 f875 	bl	80082d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80041e6:	f7fc fc9d 	bl	8000b24 <main>

080041ea <LoopForever>:

LoopForever:
    b LoopForever
 80041ea:	e7fe      	b.n	80041ea <LoopForever>
  ldr   r0, =_estack
 80041ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041f4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80041f8:	08008e84 	.word	0x08008e84
  ldr r2, =_sbss
 80041fc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8004200:	200013dc 	.word	0x200013dc

08004204 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004204:	e7fe      	b.n	8004204 <ADC1_2_IRQHandler>

08004206 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004210:	2003      	movs	r0, #3
 8004212:	f000 f97f 	bl	8004514 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004216:	200f      	movs	r0, #15
 8004218:	f000 f80e 	bl	8004238 <HAL_InitTick>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	71fb      	strb	r3, [r7, #7]
 8004226:	e001      	b.n	800422c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004228:	f7fe f9aa 	bl	8002580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800422c:	79fb      	ldrb	r3, [r7, #7]

}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004244:	4b16      	ldr	r3, [pc, #88]	@ (80042a0 <HAL_InitTick+0x68>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d022      	beq.n	8004292 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800424c:	4b15      	ldr	r3, [pc, #84]	@ (80042a4 <HAL_InitTick+0x6c>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b13      	ldr	r3, [pc, #76]	@ (80042a0 <HAL_InitTick+0x68>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004258:	fbb1 f3f3 	udiv	r3, r1, r3
 800425c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004260:	4618      	mov	r0, r3
 8004262:	f000 f998 	bl	8004596 <HAL_SYSTICK_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10f      	bne.n	800428c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b0f      	cmp	r3, #15
 8004270:	d809      	bhi.n	8004286 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004272:	2200      	movs	r2, #0
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	f04f 30ff 	mov.w	r0, #4294967295
 800427a:	f000 f956 	bl	800452a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800427e:	4a0a      	ldr	r2, [pc, #40]	@ (80042a8 <HAL_InitTick+0x70>)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	e007      	b.n	8004296 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
 800428a:	e004      	b.n	8004296 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
 8004290:	e001      	b.n	8004296 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20000010 	.word	0x20000010
 80042a4:	20000004 	.word	0x20000004
 80042a8:	2000000c 	.word	0x2000000c

080042ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042b0:	4b05      	ldr	r3, [pc, #20]	@ (80042c8 <HAL_IncTick+0x1c>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <HAL_IncTick+0x20>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4413      	add	r3, r2
 80042ba:	4a03      	ldr	r2, [pc, #12]	@ (80042c8 <HAL_IncTick+0x1c>)
 80042bc:	6013      	str	r3, [r2, #0]
}
 80042be:	bf00      	nop
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	20001290 	.word	0x20001290
 80042cc:	20000010 	.word	0x20000010

080042d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return uwTick;
 80042d4:	4b03      	ldr	r3, [pc, #12]	@ (80042e4 <HAL_GetTick+0x14>)
 80042d6:	681b      	ldr	r3, [r3, #0]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20001290 	.word	0x20001290

080042e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042f0:	f7ff ffee 	bl	80042d0 <HAL_GetTick>
 80042f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d004      	beq.n	800430c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004302:	4b09      	ldr	r3, [pc, #36]	@ (8004328 <HAL_Delay+0x40>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4413      	add	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800430c:	bf00      	nop
 800430e:	f7ff ffdf 	bl	80042d0 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	429a      	cmp	r2, r3
 800431c:	d8f7      	bhi.n	800430e <HAL_Delay+0x26>
  {
  }
}
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000010 	.word	0x20000010

0800432c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800433c:	4b0c      	ldr	r3, [pc, #48]	@ (8004370 <__NVIC_SetPriorityGrouping+0x44>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004348:	4013      	ands	r3, r2
 800434a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004354:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800435c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800435e:	4a04      	ldr	r2, [pc, #16]	@ (8004370 <__NVIC_SetPriorityGrouping+0x44>)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	60d3      	str	r3, [r2, #12]
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	e000ed00 	.word	0xe000ed00

08004374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004378:	4b04      	ldr	r3, [pc, #16]	@ (800438c <__NVIC_GetPriorityGrouping+0x18>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	0a1b      	lsrs	r3, r3, #8
 800437e:	f003 0307 	and.w	r3, r3, #7
}
 8004382:	4618      	mov	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	e000ed00 	.word	0xe000ed00

08004390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800439a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	db0b      	blt.n	80043ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	f003 021f 	and.w	r2, r3, #31
 80043a8:	4907      	ldr	r1, [pc, #28]	@ (80043c8 <__NVIC_EnableIRQ+0x38>)
 80043aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	2001      	movs	r0, #1
 80043b2:	fa00 f202 	lsl.w	r2, r0, r2
 80043b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	e000e100 	.word	0xe000e100

080043cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	db12      	blt.n	8004404 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	f003 021f 	and.w	r2, r3, #31
 80043e4:	490a      	ldr	r1, [pc, #40]	@ (8004410 <__NVIC_DisableIRQ+0x44>)
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2001      	movs	r0, #1
 80043ee:	fa00 f202 	lsl.w	r2, r0, r2
 80043f2:	3320      	adds	r3, #32
 80043f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80043f8:	f3bf 8f4f 	dsb	sy
}
 80043fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80043fe:	f3bf 8f6f 	isb	sy
}
 8004402:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	e000e100 	.word	0xe000e100

08004414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	6039      	str	r1, [r7, #0]
 800441e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004424:	2b00      	cmp	r3, #0
 8004426:	db0a      	blt.n	800443e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	490c      	ldr	r1, [pc, #48]	@ (8004460 <__NVIC_SetPriority+0x4c>)
 800442e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004432:	0112      	lsls	r2, r2, #4
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	440b      	add	r3, r1
 8004438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800443c:	e00a      	b.n	8004454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	b2da      	uxtb	r2, r3
 8004442:	4908      	ldr	r1, [pc, #32]	@ (8004464 <__NVIC_SetPriority+0x50>)
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	3b04      	subs	r3, #4
 800444c:	0112      	lsls	r2, r2, #4
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	440b      	add	r3, r1
 8004452:	761a      	strb	r2, [r3, #24]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	e000e100 	.word	0xe000e100
 8004464:	e000ed00 	.word	0xe000ed00

08004468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004468:	b480      	push	{r7}
 800446a:	b089      	sub	sp, #36	@ 0x24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f1c3 0307 	rsb	r3, r3, #7
 8004482:	2b04      	cmp	r3, #4
 8004484:	bf28      	it	cs
 8004486:	2304      	movcs	r3, #4
 8004488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3304      	adds	r3, #4
 800448e:	2b06      	cmp	r3, #6
 8004490:	d902      	bls.n	8004498 <NVIC_EncodePriority+0x30>
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3b03      	subs	r3, #3
 8004496:	e000      	b.n	800449a <NVIC_EncodePriority+0x32>
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800449c:	f04f 32ff 	mov.w	r2, #4294967295
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43da      	mvns	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	401a      	ands	r2, r3
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044b0:	f04f 31ff 	mov.w	r1, #4294967295
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ba:	43d9      	mvns	r1, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044c0:	4313      	orrs	r3, r2
         );
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3724      	adds	r7, #36	@ 0x24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3b01      	subs	r3, #1
 80044dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044e0:	d301      	bcc.n	80044e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044e2:	2301      	movs	r3, #1
 80044e4:	e00f      	b.n	8004506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004510 <SysTick_Config+0x40>)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ee:	210f      	movs	r1, #15
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295
 80044f4:	f7ff ff8e 	bl	8004414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <SysTick_Config+0x40>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044fe:	4b04      	ldr	r3, [pc, #16]	@ (8004510 <SysTick_Config+0x40>)
 8004500:	2207      	movs	r2, #7
 8004502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	e000e010 	.word	0xe000e010

08004514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff ff05 	bl	800432c <__NVIC_SetPriorityGrouping>
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b086      	sub	sp, #24
 800452e:	af00      	add	r7, sp, #0
 8004530:	4603      	mov	r3, r0
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004538:	f7ff ff1c 	bl	8004374 <__NVIC_GetPriorityGrouping>
 800453c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	6978      	ldr	r0, [r7, #20]
 8004544:	f7ff ff90 	bl	8004468 <NVIC_EncodePriority>
 8004548:	4602      	mov	r2, r0
 800454a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800454e:	4611      	mov	r1, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff ff5f 	bl	8004414 <__NVIC_SetPriority>
}
 8004556:	bf00      	nop
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	4603      	mov	r3, r0
 8004566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff0f 	bl	8004390 <__NVIC_EnableIRQ>
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	4603      	mov	r3, r0
 8004582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff ff1f 	bl	80043cc <__NVIC_DisableIRQ>
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff ff96 	bl	80044d0 <SysTick_Config>
 80045a4:	4603      	mov	r3, r0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045be:	e15a      	b.n	8004876 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	2101      	movs	r1, #1
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	fa01 f303 	lsl.w	r3, r1, r3
 80045cc:	4013      	ands	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 814c 	beq.w	8004870 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d005      	beq.n	80045f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d130      	bne.n	8004652 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	2203      	movs	r2, #3
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4013      	ands	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004626:	2201      	movs	r2, #1
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43db      	mvns	r3, r3
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4013      	ands	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	f003 0201 	and.w	r2, r3, #1
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b03      	cmp	r3, #3
 800465c:	d017      	beq.n	800468e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	2203      	movs	r2, #3
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43db      	mvns	r3, r3
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4013      	ands	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d123      	bne.n	80046e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	08da      	lsrs	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3208      	adds	r2, #8
 80046a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	220f      	movs	r2, #15
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4013      	ands	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	08da      	lsrs	r2, r3, #3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3208      	adds	r2, #8
 80046dc:	6939      	ldr	r1, [r7, #16]
 80046de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	2203      	movs	r2, #3
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4013      	ands	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f003 0203 	and.w	r2, r3, #3
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80a6 	beq.w	8004870 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004724:	4b5b      	ldr	r3, [pc, #364]	@ (8004894 <HAL_GPIO_Init+0x2e4>)
 8004726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004728:	4a5a      	ldr	r2, [pc, #360]	@ (8004894 <HAL_GPIO_Init+0x2e4>)
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004730:	4b58      	ldr	r3, [pc, #352]	@ (8004894 <HAL_GPIO_Init+0x2e4>)
 8004732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800473c:	4a56      	ldr	r2, [pc, #344]	@ (8004898 <HAL_GPIO_Init+0x2e8>)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	089b      	lsrs	r3, r3, #2
 8004742:	3302      	adds	r3, #2
 8004744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004748:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	220f      	movs	r2, #15
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004766:	d01f      	beq.n	80047a8 <HAL_GPIO_Init+0x1f8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a4c      	ldr	r2, [pc, #304]	@ (800489c <HAL_GPIO_Init+0x2ec>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d019      	beq.n	80047a4 <HAL_GPIO_Init+0x1f4>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a4b      	ldr	r2, [pc, #300]	@ (80048a0 <HAL_GPIO_Init+0x2f0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d013      	beq.n	80047a0 <HAL_GPIO_Init+0x1f0>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a4a      	ldr	r2, [pc, #296]	@ (80048a4 <HAL_GPIO_Init+0x2f4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00d      	beq.n	800479c <HAL_GPIO_Init+0x1ec>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a49      	ldr	r2, [pc, #292]	@ (80048a8 <HAL_GPIO_Init+0x2f8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d007      	beq.n	8004798 <HAL_GPIO_Init+0x1e8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a48      	ldr	r2, [pc, #288]	@ (80048ac <HAL_GPIO_Init+0x2fc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d101      	bne.n	8004794 <HAL_GPIO_Init+0x1e4>
 8004790:	2305      	movs	r3, #5
 8004792:	e00a      	b.n	80047aa <HAL_GPIO_Init+0x1fa>
 8004794:	2306      	movs	r3, #6
 8004796:	e008      	b.n	80047aa <HAL_GPIO_Init+0x1fa>
 8004798:	2304      	movs	r3, #4
 800479a:	e006      	b.n	80047aa <HAL_GPIO_Init+0x1fa>
 800479c:	2303      	movs	r3, #3
 800479e:	e004      	b.n	80047aa <HAL_GPIO_Init+0x1fa>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e002      	b.n	80047aa <HAL_GPIO_Init+0x1fa>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <HAL_GPIO_Init+0x1fa>
 80047a8:	2300      	movs	r3, #0
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	f002 0203 	and.w	r2, r2, #3
 80047b0:	0092      	lsls	r2, r2, #2
 80047b2:	4093      	lsls	r3, r2
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047ba:	4937      	ldr	r1, [pc, #220]	@ (8004898 <HAL_GPIO_Init+0x2e8>)
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	089b      	lsrs	r3, r3, #2
 80047c0:	3302      	adds	r3, #2
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047c8:	4b39      	ldr	r3, [pc, #228]	@ (80048b0 <HAL_GPIO_Init+0x300>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4013      	ands	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047ec:	4a30      	ldr	r2, [pc, #192]	@ (80048b0 <HAL_GPIO_Init+0x300>)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047f2:	4b2f      	ldr	r3, [pc, #188]	@ (80048b0 <HAL_GPIO_Init+0x300>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	43db      	mvns	r3, r3
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4013      	ands	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004816:	4a26      	ldr	r2, [pc, #152]	@ (80048b0 <HAL_GPIO_Init+0x300>)
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800481c:	4b24      	ldr	r3, [pc, #144]	@ (80048b0 <HAL_GPIO_Init+0x300>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	43db      	mvns	r3, r3
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004840:	4a1b      	ldr	r2, [pc, #108]	@ (80048b0 <HAL_GPIO_Init+0x300>)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004846:	4b1a      	ldr	r3, [pc, #104]	@ (80048b0 <HAL_GPIO_Init+0x300>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	43db      	mvns	r3, r3
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4013      	ands	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800486a:	4a11      	ldr	r2, [pc, #68]	@ (80048b0 <HAL_GPIO_Init+0x300>)
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	3301      	adds	r3, #1
 8004874:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	fa22 f303 	lsr.w	r3, r2, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	f47f ae9d 	bne.w	80045c0 <HAL_GPIO_Init+0x10>
  }
}
 8004886:	bf00      	nop
 8004888:	bf00      	nop
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	40021000 	.word	0x40021000
 8004898:	40010000 	.word	0x40010000
 800489c:	48000400 	.word	0x48000400
 80048a0:	48000800 	.word	0x48000800
 80048a4:	48000c00 	.word	0x48000c00
 80048a8:	48001000 	.word	0x48001000
 80048ac:	48001400 	.word	0x48001400
 80048b0:	40010400 	.word	0x40010400

080048b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	887b      	ldrh	r3, [r7, #2]
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
 80048d0:	e001      	b.n	80048d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048d2:	2300      	movs	r3, #0
 80048d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	807b      	strh	r3, [r7, #2]
 80048f0:	4613      	mov	r3, r2
 80048f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048f4:	787b      	ldrb	r3, [r7, #1]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048fa:	887a      	ldrh	r2, [r7, #2]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004900:	e002      	b.n	8004908 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004902:	887a      	ldrh	r2, [r7, #2]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004926:	887a      	ldrh	r2, [r7, #2]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4013      	ands	r3, r2
 800492c:	041a      	lsls	r2, r3, #16
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	43d9      	mvns	r1, r3
 8004932:	887b      	ldrh	r3, [r7, #2]
 8004934:	400b      	ands	r3, r1
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	619a      	str	r2, [r3, #24]
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d141      	bne.n	80049da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004956:	4b4b      	ldr	r3, [pc, #300]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800495e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004962:	d131      	bne.n	80049c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004964:	4b47      	ldr	r3, [pc, #284]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800496a:	4a46      	ldr	r2, [pc, #280]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800496c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004970:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004974:	4b43      	ldr	r3, [pc, #268]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800497c:	4a41      	ldr	r2, [pc, #260]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004982:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004984:	4b40      	ldr	r3, [pc, #256]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2232      	movs	r2, #50	@ 0x32
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	4a3f      	ldr	r2, [pc, #252]	@ (8004a8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	0c9b      	lsrs	r3, r3, #18
 8004996:	3301      	adds	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800499a:	e002      	b.n	80049a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3b01      	subs	r3, #1
 80049a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049a2:	4b38      	ldr	r3, [pc, #224]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ae:	d102      	bne.n	80049b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f2      	bne.n	800499c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049b6:	4b33      	ldr	r3, [pc, #204]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c2:	d158      	bne.n	8004a76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e057      	b.n	8004a78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049d8:	e04d      	b.n	8004a76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049e0:	d141      	bne.n	8004a66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049e2:	4b28      	ldr	r3, [pc, #160]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ee:	d131      	bne.n	8004a54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049f0:	4b24      	ldr	r3, [pc, #144]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049f6:	4a23      	ldr	r2, [pc, #140]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a00:	4b20      	ldr	r3, [pc, #128]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a08:	4a1e      	ldr	r2, [pc, #120]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a10:	4b1d      	ldr	r3, [pc, #116]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2232      	movs	r2, #50	@ 0x32
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	0c9b      	lsrs	r3, r3, #18
 8004a22:	3301      	adds	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a26:	e002      	b.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a2e:	4b15      	ldr	r3, [pc, #84]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3a:	d102      	bne.n	8004a42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f2      	bne.n	8004a28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a42:	4b10      	ldr	r3, [pc, #64]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4e:	d112      	bne.n	8004a76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e011      	b.n	8004a78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a54:	4b0b      	ldr	r3, [pc, #44]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a64:	e007      	b.n	8004a76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a66:	4b07      	ldr	r3, [pc, #28]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a6e:	4a05      	ldr	r2, [pc, #20]	@ (8004a84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	40007000 	.word	0x40007000
 8004a88:	20000004 	.word	0x20000004
 8004a8c:	431bde83 	.word	0x431bde83

08004a90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004a94:	4b05      	ldr	r3, [pc, #20]	@ (8004aac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4a04      	ldr	r2, [pc, #16]	@ (8004aac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a9e:	6093      	str	r3, [r2, #8]
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40007000 	.word	0x40007000

08004ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e2fe      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d075      	beq.n	8004bba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ace:	4b97      	ldr	r3, [pc, #604]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad8:	4b94      	ldr	r3, [pc, #592]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2b0c      	cmp	r3, #12
 8004ae6:	d102      	bne.n	8004aee <HAL_RCC_OscConfig+0x3e>
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d002      	beq.n	8004af4 <HAL_RCC_OscConfig+0x44>
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d10b      	bne.n	8004b0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af4:	4b8d      	ldr	r3, [pc, #564]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d05b      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x108>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d157      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e2d9      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b14:	d106      	bne.n	8004b24 <HAL_RCC_OscConfig+0x74>
 8004b16:	4b85      	ldr	r3, [pc, #532]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a84      	ldr	r2, [pc, #528]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e01d      	b.n	8004b60 <HAL_RCC_OscConfig+0xb0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x98>
 8004b2e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a7e      	ldr	r2, [pc, #504]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a7b      	ldr	r2, [pc, #492]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e00b      	b.n	8004b60 <HAL_RCC_OscConfig+0xb0>
 8004b48:	4b78      	ldr	r3, [pc, #480]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a77      	ldr	r2, [pc, #476]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	4b75      	ldr	r3, [pc, #468]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a74      	ldr	r2, [pc, #464]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d013      	beq.n	8004b90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7ff fbb2 	bl	80042d0 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b70:	f7ff fbae 	bl	80042d0 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	@ 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e29e      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b82:	4b6a      	ldr	r3, [pc, #424]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0xc0>
 8004b8e:	e014      	b.n	8004bba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b90:	f7ff fb9e 	bl	80042d0 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b98:	f7ff fb9a 	bl	80042d0 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b64      	cmp	r3, #100	@ 0x64
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e28a      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004baa:	4b60      	ldr	r3, [pc, #384]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0xe8>
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d075      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bc6:	4b59      	ldr	r3, [pc, #356]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bd0:	4b56      	ldr	r3, [pc, #344]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	d102      	bne.n	8004be6 <HAL_RCC_OscConfig+0x136>
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d002      	beq.n	8004bec <HAL_RCC_OscConfig+0x13c>
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d11f      	bne.n	8004c2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bec:	4b4f      	ldr	r3, [pc, #316]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCC_OscConfig+0x154>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e25d      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c04:	4b49      	ldr	r3, [pc, #292]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	061b      	lsls	r3, r3, #24
 8004c12:	4946      	ldr	r1, [pc, #280]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c18:	4b45      	ldr	r3, [pc, #276]	@ (8004d30 <HAL_RCC_OscConfig+0x280>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff fb0b 	bl	8004238 <HAL_InitTick>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d043      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e249      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d023      	beq.n	8004c7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c34:	4b3d      	ldr	r3, [pc, #244]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a3c      	ldr	r2, [pc, #240]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7ff fb46 	bl	80042d0 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c48:	f7ff fb42 	bl	80042d0 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e232      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c5a:	4b34      	ldr	r3, [pc, #208]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c66:	4b31      	ldr	r3, [pc, #196]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	492d      	ldr	r1, [pc, #180]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	604b      	str	r3, [r1, #4]
 8004c7a:	e01a      	b.n	8004cb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a2a      	ldr	r2, [pc, #168]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004c82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7ff fb22 	bl	80042d0 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c90:	f7ff fb1e 	bl	80042d0 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e20e      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca2:	4b22      	ldr	r3, [pc, #136]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x1e0>
 8004cae:	e000      	b.n	8004cb2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d041      	beq.n	8004d42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01c      	beq.n	8004d00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc6:	4b19      	ldr	r3, [pc, #100]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ccc:	4a17      	ldr	r2, [pc, #92]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd6:	f7ff fafb 	bl	80042d0 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cde:	f7ff faf7 	bl	80042d0 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e1e7      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0ef      	beq.n	8004cde <HAL_RCC_OscConfig+0x22e>
 8004cfe:	e020      	b.n	8004d42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d00:	4b0a      	ldr	r3, [pc, #40]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d06:	4a09      	ldr	r2, [pc, #36]	@ (8004d2c <HAL_RCC_OscConfig+0x27c>)
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d10:	f7ff fade 	bl	80042d0 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d16:	e00d      	b.n	8004d34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d18:	f7ff fada 	bl	80042d0 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d906      	bls.n	8004d34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e1ca      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
 8004d2a:	bf00      	nop
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d34:	4b8c      	ldr	r3, [pc, #560]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1ea      	bne.n	8004d18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 80a6 	beq.w	8004e9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d50:	2300      	movs	r3, #0
 8004d52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d54:	4b84      	ldr	r3, [pc, #528]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_OscConfig+0x2b4>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <HAL_RCC_OscConfig+0x2b6>
 8004d64:	2300      	movs	r3, #0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00d      	beq.n	8004d86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d6a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d74:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d76:	4b7c      	ldr	r3, [pc, #496]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d82:	2301      	movs	r3, #1
 8004d84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d86:	4b79      	ldr	r3, [pc, #484]	@ (8004f6c <HAL_RCC_OscConfig+0x4bc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d118      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d92:	4b76      	ldr	r3, [pc, #472]	@ (8004f6c <HAL_RCC_OscConfig+0x4bc>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a75      	ldr	r2, [pc, #468]	@ (8004f6c <HAL_RCC_OscConfig+0x4bc>)
 8004d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d9e:	f7ff fa97 	bl	80042d0 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da6:	f7ff fa93 	bl	80042d0 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e183      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db8:	4b6c      	ldr	r3, [pc, #432]	@ (8004f6c <HAL_RCC_OscConfig+0x4bc>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d108      	bne.n	8004dde <HAL_RCC_OscConfig+0x32e>
 8004dcc:	4b66      	ldr	r3, [pc, #408]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd2:	4a65      	ldr	r2, [pc, #404]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ddc:	e024      	b.n	8004e28 <HAL_RCC_OscConfig+0x378>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b05      	cmp	r3, #5
 8004de4:	d110      	bne.n	8004e08 <HAL_RCC_OscConfig+0x358>
 8004de6:	4b60      	ldr	r3, [pc, #384]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dec:	4a5e      	ldr	r2, [pc, #376]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004dee:	f043 0304 	orr.w	r3, r3, #4
 8004df2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004df6:	4b5c      	ldr	r3, [pc, #368]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfc:	4a5a      	ldr	r2, [pc, #360]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e06:	e00f      	b.n	8004e28 <HAL_RCC_OscConfig+0x378>
 8004e08:	4b57      	ldr	r3, [pc, #348]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0e:	4a56      	ldr	r2, [pc, #344]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e18:	4b53      	ldr	r3, [pc, #332]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1e:	4a52      	ldr	r2, [pc, #328]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004e20:	f023 0304 	bic.w	r3, r3, #4
 8004e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d016      	beq.n	8004e5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e30:	f7ff fa4e 	bl	80042d0 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e36:	e00a      	b.n	8004e4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e38:	f7ff fa4a 	bl	80042d0 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e138      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e4e:	4b46      	ldr	r3, [pc, #280]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0ed      	beq.n	8004e38 <HAL_RCC_OscConfig+0x388>
 8004e5c:	e015      	b.n	8004e8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5e:	f7ff fa37 	bl	80042d0 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e64:	e00a      	b.n	8004e7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e66:	f7ff fa33 	bl	80042d0 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e121      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e7c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1ed      	bne.n	8004e66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e8a:	7ffb      	ldrb	r3, [r7, #31]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d105      	bne.n	8004e9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e90:	4b35      	ldr	r3, [pc, #212]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e94:	4a34      	ldr	r2, [pc, #208]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004e96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e9a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d03c      	beq.n	8004f22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01c      	beq.n	8004eea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7ff fa06 	bl	80042d0 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ec8:	f7ff fa02 	bl	80042d0 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e0f2      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004eda:	4b23      	ldr	r3, [pc, #140]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0ef      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x418>
 8004ee8:	e01b      	b.n	8004f22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004eea:	4b1f      	ldr	r3, [pc, #124]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efa:	f7ff f9e9 	bl	80042d0 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f02:	f7ff f9e5 	bl	80042d0 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e0d5      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f14:	4b14      	ldr	r3, [pc, #80]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1ef      	bne.n	8004f02 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 80c9 	beq.w	80050be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 030c 	and.w	r3, r3, #12
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	f000 8083 	beq.w	8005040 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d15e      	bne.n	8005000 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f42:	4b09      	ldr	r3, [pc, #36]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a08      	ldr	r2, [pc, #32]	@ (8004f68 <HAL_RCC_OscConfig+0x4b8>)
 8004f48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4e:	f7ff f9bf 	bl	80042d0 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f54:	e00c      	b.n	8004f70 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f56:	f7ff f9bb 	bl	80042d0 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d905      	bls.n	8004f70 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e0ab      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f70:	4b55      	ldr	r3, [pc, #340]	@ (80050c8 <HAL_RCC_OscConfig+0x618>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1ec      	bne.n	8004f56 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f7c:	4b52      	ldr	r3, [pc, #328]	@ (80050c8 <HAL_RCC_OscConfig+0x618>)
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	4b52      	ldr	r3, [pc, #328]	@ (80050cc <HAL_RCC_OscConfig+0x61c>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6a11      	ldr	r1, [r2, #32]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f8c:	3a01      	subs	r2, #1
 8004f8e:	0112      	lsls	r2, r2, #4
 8004f90:	4311      	orrs	r1, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f96:	0212      	lsls	r2, r2, #8
 8004f98:	4311      	orrs	r1, r2
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f9e:	0852      	lsrs	r2, r2, #1
 8004fa0:	3a01      	subs	r2, #1
 8004fa2:	0552      	lsls	r2, r2, #21
 8004fa4:	4311      	orrs	r1, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004faa:	0852      	lsrs	r2, r2, #1
 8004fac:	3a01      	subs	r2, #1
 8004fae:	0652      	lsls	r2, r2, #25
 8004fb0:	4311      	orrs	r1, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004fb6:	06d2      	lsls	r2, r2, #27
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	4943      	ldr	r1, [pc, #268]	@ (80050c8 <HAL_RCC_OscConfig+0x618>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fc0:	4b41      	ldr	r3, [pc, #260]	@ (80050c8 <HAL_RCC_OscConfig+0x618>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a40      	ldr	r2, [pc, #256]	@ (80050c8 <HAL_RCC_OscConfig+0x618>)
 8004fc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fcc:	4b3e      	ldr	r3, [pc, #248]	@ (80050c8 <HAL_RCC_OscConfig+0x618>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4a3d      	ldr	r2, [pc, #244]	@ (80050c8 <HAL_RCC_OscConfig+0x618>)
 8004fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7ff f97a 	bl	80042d0 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7ff f976 	bl	80042d0 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e066      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff2:	4b35      	ldr	r3, [pc, #212]	@ (80050c8 <HAL_RCC_OscConfig+0x618>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x530>
 8004ffe:	e05e      	b.n	80050be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005000:	4b31      	ldr	r3, [pc, #196]	@ (80050c8 <HAL_RCC_OscConfig+0x618>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a30      	ldr	r2, [pc, #192]	@ (80050c8 <HAL_RCC_OscConfig+0x618>)
 8005006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800500a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500c:	f7ff f960 	bl	80042d0 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005014:	f7ff f95c 	bl	80042d0 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e04c      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005026:	4b28      	ldr	r3, [pc, #160]	@ (80050c8 <HAL_RCC_OscConfig+0x618>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005032:	4b25      	ldr	r3, [pc, #148]	@ (80050c8 <HAL_RCC_OscConfig+0x618>)
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	4924      	ldr	r1, [pc, #144]	@ (80050c8 <HAL_RCC_OscConfig+0x618>)
 8005038:	4b25      	ldr	r3, [pc, #148]	@ (80050d0 <HAL_RCC_OscConfig+0x620>)
 800503a:	4013      	ands	r3, r2
 800503c:	60cb      	str	r3, [r1, #12]
 800503e:	e03e      	b.n	80050be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e039      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800504c:	4b1e      	ldr	r3, [pc, #120]	@ (80050c8 <HAL_RCC_OscConfig+0x618>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f003 0203 	and.w	r2, r3, #3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	429a      	cmp	r2, r3
 800505e:	d12c      	bne.n	80050ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	3b01      	subs	r3, #1
 800506c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506e:	429a      	cmp	r2, r3
 8005070:	d123      	bne.n	80050ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800507e:	429a      	cmp	r2, r3
 8005080:	d11b      	bne.n	80050ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800508e:	429a      	cmp	r2, r3
 8005090:	d113      	bne.n	80050ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509c:	085b      	lsrs	r3, r3, #1
 800509e:	3b01      	subs	r3, #1
 80050a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d109      	bne.n	80050ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	3b01      	subs	r3, #1
 80050b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d001      	beq.n	80050be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40021000 	.word	0x40021000
 80050cc:	019f800c 	.word	0x019f800c
 80050d0:	feeefffc 	.word	0xfeeefffc

080050d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e11e      	b.n	800532a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050ec:	4b91      	ldr	r3, [pc, #580]	@ (8005334 <HAL_RCC_ClockConfig+0x260>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d910      	bls.n	800511c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fa:	4b8e      	ldr	r3, [pc, #568]	@ (8005334 <HAL_RCC_ClockConfig+0x260>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 020f 	bic.w	r2, r3, #15
 8005102:	498c      	ldr	r1, [pc, #560]	@ (8005334 <HAL_RCC_ClockConfig+0x260>)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b8a      	ldr	r3, [pc, #552]	@ (8005334 <HAL_RCC_ClockConfig+0x260>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e106      	b.n	800532a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d073      	beq.n	8005210 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b03      	cmp	r3, #3
 800512e:	d129      	bne.n	8005184 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005130:	4b81      	ldr	r3, [pc, #516]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0f4      	b.n	800532a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005140:	f000 f99e 	bl	8005480 <RCC_GetSysClockFreqFromPLLSource>
 8005144:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4a7c      	ldr	r2, [pc, #496]	@ (800533c <HAL_RCC_ClockConfig+0x268>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d93f      	bls.n	80051ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800514e:	4b7a      	ldr	r3, [pc, #488]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005162:	2b00      	cmp	r3, #0
 8005164:	d033      	beq.n	80051ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800516a:	2b00      	cmp	r3, #0
 800516c:	d12f      	bne.n	80051ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800516e:	4b72      	ldr	r3, [pc, #456]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005176:	4a70      	ldr	r2, [pc, #448]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 8005178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800517c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800517e:	2380      	movs	r3, #128	@ 0x80
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	e024      	b.n	80051ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d107      	bne.n	800519c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800518c:	4b6a      	ldr	r3, [pc, #424]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d109      	bne.n	80051ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0c6      	b.n	800532a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800519c:	4b66      	ldr	r3, [pc, #408]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0be      	b.n	800532a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80051ac:	f000 f8ce 	bl	800534c <HAL_RCC_GetSysClockFreq>
 80051b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4a61      	ldr	r2, [pc, #388]	@ (800533c <HAL_RCC_ClockConfig+0x268>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d909      	bls.n	80051ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051ba:	4b5f      	ldr	r3, [pc, #380]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051c2:	4a5d      	ldr	r2, [pc, #372]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 80051c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80051ca:	2380      	movs	r3, #128	@ 0x80
 80051cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051ce:	4b5a      	ldr	r3, [pc, #360]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f023 0203 	bic.w	r2, r3, #3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	4957      	ldr	r1, [pc, #348]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e0:	f7ff f876 	bl	80042d0 <HAL_GetTick>
 80051e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e6:	e00a      	b.n	80051fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e8:	f7ff f872 	bl	80042d0 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e095      	b.n	800532a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fe:	4b4e      	ldr	r3, [pc, #312]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 020c 	and.w	r2, r3, #12
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	429a      	cmp	r2, r3
 800520e:	d1eb      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d023      	beq.n	8005264 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	d005      	beq.n	8005234 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005228:	4b43      	ldr	r3, [pc, #268]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	4a42      	ldr	r2, [pc, #264]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 800522e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005232:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b00      	cmp	r3, #0
 800523e:	d007      	beq.n	8005250 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005240:	4b3d      	ldr	r3, [pc, #244]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005248:	4a3b      	ldr	r2, [pc, #236]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 800524a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800524e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005250:	4b39      	ldr	r3, [pc, #228]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	4936      	ldr	r1, [pc, #216]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
 8005262:	e008      	b.n	8005276 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2b80      	cmp	r3, #128	@ 0x80
 8005268:	d105      	bne.n	8005276 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800526a:	4b33      	ldr	r3, [pc, #204]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	4a32      	ldr	r2, [pc, #200]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 8005270:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005274:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005276:	4b2f      	ldr	r3, [pc, #188]	@ (8005334 <HAL_RCC_ClockConfig+0x260>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d21d      	bcs.n	80052c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005284:	4b2b      	ldr	r3, [pc, #172]	@ (8005334 <HAL_RCC_ClockConfig+0x260>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f023 020f 	bic.w	r2, r3, #15
 800528c:	4929      	ldr	r1, [pc, #164]	@ (8005334 <HAL_RCC_ClockConfig+0x260>)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	4313      	orrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005294:	f7ff f81c 	bl	80042d0 <HAL_GetTick>
 8005298:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529a:	e00a      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800529c:	f7ff f818 	bl	80042d0 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e03b      	b.n	800532a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b20      	ldr	r3, [pc, #128]	@ (8005334 <HAL_RCC_ClockConfig+0x260>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d1ed      	bne.n	800529c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4917      	ldr	r1, [pc, #92]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ea:	4b13      	ldr	r3, [pc, #76]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	490f      	ldr	r1, [pc, #60]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052fe:	f000 f825 	bl	800534c <HAL_RCC_GetSysClockFreq>
 8005302:	4602      	mov	r2, r0
 8005304:	4b0c      	ldr	r3, [pc, #48]	@ (8005338 <HAL_RCC_ClockConfig+0x264>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	490c      	ldr	r1, [pc, #48]	@ (8005340 <HAL_RCC_ClockConfig+0x26c>)
 8005310:	5ccb      	ldrb	r3, [r1, r3]
 8005312:	f003 031f 	and.w	r3, r3, #31
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	4a0a      	ldr	r2, [pc, #40]	@ (8005344 <HAL_RCC_ClockConfig+0x270>)
 800531c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800531e:	4b0a      	ldr	r3, [pc, #40]	@ (8005348 <HAL_RCC_ClockConfig+0x274>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fe ff88 	bl	8004238 <HAL_InitTick>
 8005328:	4603      	mov	r3, r0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40022000 	.word	0x40022000
 8005338:	40021000 	.word	0x40021000
 800533c:	04c4b400 	.word	0x04c4b400
 8005340:	08008e00 	.word	0x08008e00
 8005344:	20000004 	.word	0x20000004
 8005348:	2000000c 	.word	0x2000000c

0800534c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005352:	4b2c      	ldr	r3, [pc, #176]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 030c 	and.w	r3, r3, #12
 800535a:	2b04      	cmp	r3, #4
 800535c:	d102      	bne.n	8005364 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800535e:	4b2a      	ldr	r3, [pc, #168]	@ (8005408 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005360:	613b      	str	r3, [r7, #16]
 8005362:	e047      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005364:	4b27      	ldr	r3, [pc, #156]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 030c 	and.w	r3, r3, #12
 800536c:	2b08      	cmp	r3, #8
 800536e:	d102      	bne.n	8005376 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005370:	4b26      	ldr	r3, [pc, #152]	@ (800540c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	e03e      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005376:	4b23      	ldr	r3, [pc, #140]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	2b0c      	cmp	r3, #12
 8005380:	d136      	bne.n	80053f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005382:	4b20      	ldr	r3, [pc, #128]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800538c:	4b1d      	ldr	r3, [pc, #116]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xb8>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	091b      	lsrs	r3, r3, #4
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	3301      	adds	r3, #1
 8005398:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b03      	cmp	r3, #3
 800539e:	d10c      	bne.n	80053ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053a0:	4a1a      	ldr	r2, [pc, #104]	@ (800540c <HAL_RCC_GetSysClockFreq+0xc0>)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a8:	4a16      	ldr	r2, [pc, #88]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053aa:	68d2      	ldr	r2, [r2, #12]
 80053ac:	0a12      	lsrs	r2, r2, #8
 80053ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	617b      	str	r3, [r7, #20]
      break;
 80053b8:	e00c      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053ba:	4a13      	ldr	r2, [pc, #76]	@ (8005408 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c2:	4a10      	ldr	r2, [pc, #64]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053c4:	68d2      	ldr	r2, [r2, #12]
 80053c6:	0a12      	lsrs	r2, r2, #8
 80053c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053cc:	fb02 f303 	mul.w	r3, r2, r3
 80053d0:	617b      	str	r3, [r7, #20]
      break;
 80053d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	0e5b      	lsrs	r3, r3, #25
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	3301      	adds	r3, #1
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	e001      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053f4:	693b      	ldr	r3, [r7, #16]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40021000 	.word	0x40021000
 8005408:	00f42400 	.word	0x00f42400
 800540c:	007a1200 	.word	0x007a1200

08005410 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005414:	4b03      	ldr	r3, [pc, #12]	@ (8005424 <HAL_RCC_GetHCLKFreq+0x14>)
 8005416:	681b      	ldr	r3, [r3, #0]
}
 8005418:	4618      	mov	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000004 	.word	0x20000004

08005428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800542c:	f7ff fff0 	bl	8005410 <HAL_RCC_GetHCLKFreq>
 8005430:	4602      	mov	r2, r0
 8005432:	4b06      	ldr	r3, [pc, #24]	@ (800544c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	4904      	ldr	r1, [pc, #16]	@ (8005450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800543e:	5ccb      	ldrb	r3, [r1, r3]
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005448:	4618      	mov	r0, r3
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40021000 	.word	0x40021000
 8005450:	08008e10 	.word	0x08008e10

08005454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005458:	f7ff ffda 	bl	8005410 <HAL_RCC_GetHCLKFreq>
 800545c:	4602      	mov	r2, r0
 800545e:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	0adb      	lsrs	r3, r3, #11
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	4904      	ldr	r1, [pc, #16]	@ (800547c <HAL_RCC_GetPCLK2Freq+0x28>)
 800546a:	5ccb      	ldrb	r3, [r1, r3]
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005474:	4618      	mov	r0, r3
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40021000 	.word	0x40021000
 800547c:	08008e10 	.word	0x08008e10

08005480 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005486:	4b1e      	ldr	r3, [pc, #120]	@ (8005500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005490:	4b1b      	ldr	r3, [pc, #108]	@ (8005500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	3301      	adds	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d10c      	bne.n	80054be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054a4:	4a17      	ldr	r2, [pc, #92]	@ (8005504 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ac:	4a14      	ldr	r2, [pc, #80]	@ (8005500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054ae:	68d2      	ldr	r2, [r2, #12]
 80054b0:	0a12      	lsrs	r2, r2, #8
 80054b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054b6:	fb02 f303 	mul.w	r3, r2, r3
 80054ba:	617b      	str	r3, [r7, #20]
    break;
 80054bc:	e00c      	b.n	80054d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054be:	4a12      	ldr	r2, [pc, #72]	@ (8005508 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054c8:	68d2      	ldr	r2, [r2, #12]
 80054ca:	0a12      	lsrs	r2, r2, #8
 80054cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	617b      	str	r3, [r7, #20]
    break;
 80054d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054d8:	4b09      	ldr	r3, [pc, #36]	@ (8005500 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	0e5b      	lsrs	r3, r3, #25
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	3301      	adds	r3, #1
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80054f2:	687b      	ldr	r3, [r7, #4]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	40021000 	.word	0x40021000
 8005504:	007a1200 	.word	0x007a1200
 8005508:	00f42400 	.word	0x00f42400

0800550c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005514:	2300      	movs	r3, #0
 8005516:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005518:	2300      	movs	r3, #0
 800551a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8098 	beq.w	800565a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800552a:	2300      	movs	r3, #0
 800552c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800552e:	4b43      	ldr	r3, [pc, #268]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10d      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800553a:	4b40      	ldr	r3, [pc, #256]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800553c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800553e:	4a3f      	ldr	r2, [pc, #252]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005544:	6593      	str	r3, [r2, #88]	@ 0x58
 8005546:	4b3d      	ldr	r3, [pc, #244]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800554e:	60bb      	str	r3, [r7, #8]
 8005550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005552:	2301      	movs	r3, #1
 8005554:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005556:	4b3a      	ldr	r3, [pc, #232]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a39      	ldr	r2, [pc, #228]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800555c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005560:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005562:	f7fe feb5 	bl	80042d0 <HAL_GetTick>
 8005566:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005568:	e009      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800556a:	f7fe feb1 	bl	80042d0 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d902      	bls.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	74fb      	strb	r3, [r7, #19]
        break;
 800557c:	e005      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800557e:	4b30      	ldr	r3, [pc, #192]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0ef      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800558a:	7cfb      	ldrb	r3, [r7, #19]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d159      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005590:	4b2a      	ldr	r3, [pc, #168]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800559a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01e      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d019      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055ac:	4b23      	ldr	r3, [pc, #140]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055b8:	4b20      	ldr	r3, [pc, #128]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055be:	4a1f      	ldr	r2, [pc, #124]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055c8:	4b1c      	ldr	r3, [pc, #112]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ce:	4a1b      	ldr	r2, [pc, #108]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055d8:	4a18      	ldr	r2, [pc, #96]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d016      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ea:	f7fe fe71 	bl	80042d0 <HAL_GetTick>
 80055ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055f0:	e00b      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f2:	f7fe fe6d 	bl	80042d0 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005600:	4293      	cmp	r3, r2
 8005602:	d902      	bls.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	74fb      	strb	r3, [r7, #19]
            break;
 8005608:	e006      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800560a:	4b0c      	ldr	r3, [pc, #48]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800560c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0ec      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005618:	7cfb      	ldrb	r3, [r7, #19]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10b      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800561e:	4b07      	ldr	r3, [pc, #28]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005624:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800562c:	4903      	ldr	r1, [pc, #12]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005634:	e008      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005636:	7cfb      	ldrb	r3, [r7, #19]
 8005638:	74bb      	strb	r3, [r7, #18]
 800563a:	e005      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800563c:	40021000 	.word	0x40021000
 8005640:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005644:	7cfb      	ldrb	r3, [r7, #19]
 8005646:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005648:	7c7b      	ldrb	r3, [r7, #17]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d105      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800564e:	4ba7      	ldr	r3, [pc, #668]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005652:	4aa6      	ldr	r2, [pc, #664]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005654:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005658:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005666:	4ba1      	ldr	r3, [pc, #644]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566c:	f023 0203 	bic.w	r2, r3, #3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	499d      	ldr	r1, [pc, #628]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00a      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005688:	4b98      	ldr	r3, [pc, #608]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568e:	f023 020c 	bic.w	r2, r3, #12
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	4995      	ldr	r1, [pc, #596]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056aa:	4b90      	ldr	r3, [pc, #576]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	498c      	ldr	r1, [pc, #560]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056cc:	4b87      	ldr	r3, [pc, #540]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	4984      	ldr	r1, [pc, #528]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056ee:	4b7f      	ldr	r3, [pc, #508]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	497b      	ldr	r1, [pc, #492]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005710:	4b76      	ldr	r3, [pc, #472]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005716:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	4973      	ldr	r1, [pc, #460]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005732:	4b6e      	ldr	r3, [pc, #440]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005738:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	496a      	ldr	r1, [pc, #424]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005754:	4b65      	ldr	r3, [pc, #404]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	4962      	ldr	r1, [pc, #392]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005764:	4313      	orrs	r3, r2
 8005766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005776:	4b5d      	ldr	r3, [pc, #372]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005784:	4959      	ldr	r1, [pc, #356]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005798:	4b54      	ldr	r3, [pc, #336]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800579a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800579e:	f023 0203 	bic.w	r2, r3, #3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a6:	4951      	ldr	r1, [pc, #324]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ba:	4b4c      	ldr	r3, [pc, #304]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c8:	4948      	ldr	r1, [pc, #288]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d015      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057dc:	4b43      	ldr	r3, [pc, #268]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	4940      	ldr	r1, [pc, #256]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057fa:	d105      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057fc:	4b3b      	ldr	r3, [pc, #236]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	4a3a      	ldr	r2, [pc, #232]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005806:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005810:	2b00      	cmp	r3, #0
 8005812:	d015      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005814:	4b35      	ldr	r3, [pc, #212]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005822:	4932      	ldr	r1, [pc, #200]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800582e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005832:	d105      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005834:	4b2d      	ldr	r3, [pc, #180]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	4a2c      	ldr	r2, [pc, #176]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800583e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d015      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800584c:	4b27      	ldr	r3, [pc, #156]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800584e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005852:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585a:	4924      	ldr	r1, [pc, #144]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005866:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800586a:	d105      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800586c:	4b1f      	ldr	r3, [pc, #124]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	4a1e      	ldr	r2, [pc, #120]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005872:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005876:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d015      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005884:	4b19      	ldr	r3, [pc, #100]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005892:	4916      	ldr	r1, [pc, #88]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058a2:	d105      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058a4:	4b11      	ldr	r3, [pc, #68]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	4a10      	ldr	r2, [pc, #64]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d019      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058bc:	4b0b      	ldr	r3, [pc, #44]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ca:	4908      	ldr	r1, [pc, #32]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058da:	d109      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058dc:	4b03      	ldr	r3, [pc, #12]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	4a02      	ldr	r2, [pc, #8]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058e6:	60d3      	str	r3, [r2, #12]
 80058e8:	e002      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80058ea:	bf00      	nop
 80058ec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d015      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058fc:	4b29      	ldr	r3, [pc, #164]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005902:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	4926      	ldr	r1, [pc, #152]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005916:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800591a:	d105      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800591c:	4b21      	ldr	r3, [pc, #132]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4a20      	ldr	r2, [pc, #128]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005926:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d015      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005934:	4b1b      	ldr	r3, [pc, #108]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005942:	4918      	ldr	r1, [pc, #96]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005952:	d105      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005954:	4b13      	ldr	r3, [pc, #76]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	4a12      	ldr	r2, [pc, #72]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800595a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800595e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d015      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800596c:	4b0d      	ldr	r3, [pc, #52]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800596e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005972:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800597a:	490a      	ldr	r1, [pc, #40]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005986:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800598a:	d105      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800598c:	4b05      	ldr	r3, [pc, #20]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	4a04      	ldr	r2, [pc, #16]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005992:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005996:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005998:	7cbb      	ldrb	r3, [r7, #18]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	40021000 	.word	0x40021000

080059a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e09d      	b.n	8005af6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d108      	bne.n	80059d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059ca:	d009      	beq.n	80059e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	61da      	str	r2, [r3, #28]
 80059d2:	e005      	b.n	80059e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fc fb5a 	bl	80020b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a20:	d902      	bls.n	8005a28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	e002      	b.n	8005a2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005a36:	d007      	beq.n	8005a48 <HAL_SPI_Init+0xa0>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a40:	d002      	beq.n	8005a48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a8a:	ea42 0103 	orr.w	r1, r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a92:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	0c1b      	lsrs	r3, r3, #16
 8005aa4:	f003 0204 	and.w	r2, r3, #4
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005ac4:	ea42 0103 	orr.w	r1, r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ae4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e049      	b.n	8005ba4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d106      	bne.n	8005b2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7fc fe31 	bl	800278c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f000 f983 	bl	8005e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e0ee      	b.n	8005da6 <HAL_TIM_ConfigClockSource+0x1fa>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005be6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a6b      	ldr	r2, [pc, #428]	@ (8005db0 <HAL_TIM_ConfigClockSource+0x204>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	f000 80b9 	beq.w	8005d7a <HAL_TIM_ConfigClockSource+0x1ce>
 8005c08:	4a69      	ldr	r2, [pc, #420]	@ (8005db0 <HAL_TIM_ConfigClockSource+0x204>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	f200 80be 	bhi.w	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005c10:	4a68      	ldr	r2, [pc, #416]	@ (8005db4 <HAL_TIM_ConfigClockSource+0x208>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	f000 80b1 	beq.w	8005d7a <HAL_TIM_ConfigClockSource+0x1ce>
 8005c18:	4a66      	ldr	r2, [pc, #408]	@ (8005db4 <HAL_TIM_ConfigClockSource+0x208>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	f200 80b6 	bhi.w	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005c20:	4a65      	ldr	r2, [pc, #404]	@ (8005db8 <HAL_TIM_ConfigClockSource+0x20c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	f000 80a9 	beq.w	8005d7a <HAL_TIM_ConfigClockSource+0x1ce>
 8005c28:	4a63      	ldr	r2, [pc, #396]	@ (8005db8 <HAL_TIM_ConfigClockSource+0x20c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	f200 80ae 	bhi.w	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005c30:	4a62      	ldr	r2, [pc, #392]	@ (8005dbc <HAL_TIM_ConfigClockSource+0x210>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	f000 80a1 	beq.w	8005d7a <HAL_TIM_ConfigClockSource+0x1ce>
 8005c38:	4a60      	ldr	r2, [pc, #384]	@ (8005dbc <HAL_TIM_ConfigClockSource+0x210>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	f200 80a6 	bhi.w	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005c40:	4a5f      	ldr	r2, [pc, #380]	@ (8005dc0 <HAL_TIM_ConfigClockSource+0x214>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	f000 8099 	beq.w	8005d7a <HAL_TIM_ConfigClockSource+0x1ce>
 8005c48:	4a5d      	ldr	r2, [pc, #372]	@ (8005dc0 <HAL_TIM_ConfigClockSource+0x214>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	f200 809e 	bhi.w	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005c50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c54:	f000 8091 	beq.w	8005d7a <HAL_TIM_ConfigClockSource+0x1ce>
 8005c58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c5c:	f200 8096 	bhi.w	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005c60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c64:	f000 8089 	beq.w	8005d7a <HAL_TIM_ConfigClockSource+0x1ce>
 8005c68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c6c:	f200 808e 	bhi.w	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c74:	d03e      	beq.n	8005cf4 <HAL_TIM_ConfigClockSource+0x148>
 8005c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c7a:	f200 8087 	bhi.w	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c82:	f000 8086 	beq.w	8005d92 <HAL_TIM_ConfigClockSource+0x1e6>
 8005c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c8a:	d87f      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005c8c:	2b70      	cmp	r3, #112	@ 0x70
 8005c8e:	d01a      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x11a>
 8005c90:	2b70      	cmp	r3, #112	@ 0x70
 8005c92:	d87b      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005c94:	2b60      	cmp	r3, #96	@ 0x60
 8005c96:	d050      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x18e>
 8005c98:	2b60      	cmp	r3, #96	@ 0x60
 8005c9a:	d877      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005c9c:	2b50      	cmp	r3, #80	@ 0x50
 8005c9e:	d03c      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x16e>
 8005ca0:	2b50      	cmp	r3, #80	@ 0x50
 8005ca2:	d873      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005ca4:	2b40      	cmp	r3, #64	@ 0x40
 8005ca6:	d058      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005ca8:	2b40      	cmp	r3, #64	@ 0x40
 8005caa:	d86f      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005cac:	2b30      	cmp	r3, #48	@ 0x30
 8005cae:	d064      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x1ce>
 8005cb0:	2b30      	cmp	r3, #48	@ 0x30
 8005cb2:	d86b      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	d060      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x1ce>
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	d867      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d05c      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x1ce>
 8005cc0:	2b10      	cmp	r3, #16
 8005cc2:	d05a      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x1ce>
 8005cc4:	e062      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cd6:	f000 fabd 	bl	8006254 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ce8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	609a      	str	r2, [r3, #8]
      break;
 8005cf2:	e04f      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d04:	f000 faa6 	bl	8006254 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d16:	609a      	str	r2, [r3, #8]
      break;
 8005d18:	e03c      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d26:	461a      	mov	r2, r3
 8005d28:	f000 fa18 	bl	800615c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2150      	movs	r1, #80	@ 0x50
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fa71 	bl	800621a <TIM_ITRx_SetConfig>
      break;
 8005d38:	e02c      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d46:	461a      	mov	r2, r3
 8005d48:	f000 fa37 	bl	80061ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2160      	movs	r1, #96	@ 0x60
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fa61 	bl	800621a <TIM_ITRx_SetConfig>
      break;
 8005d58:	e01c      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d66:	461a      	mov	r2, r3
 8005d68:	f000 f9f8 	bl	800615c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2140      	movs	r1, #64	@ 0x40
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fa51 	bl	800621a <TIM_ITRx_SetConfig>
      break;
 8005d78:	e00c      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4619      	mov	r1, r3
 8005d84:	4610      	mov	r0, r2
 8005d86:	f000 fa48 	bl	800621a <TIM_ITRx_SetConfig>
      break;
 8005d8a:	e003      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d90:	e000      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8005d92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	00100070 	.word	0x00100070
 8005db4:	00100050 	.word	0x00100050
 8005db8:	00100040 	.word	0x00100040
 8005dbc:	00100030 	.word	0x00100030
 8005dc0:	00100020 	.word	0x00100020

08005dc4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_TIM_SlaveConfigSynchro+0x18>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e031      	b.n	8005e40 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f8de 	bl	8005fb0 <TIM_SlaveTimer_SetConfig>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d009      	beq.n	8005e0e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e018      	b.n	8005e40 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e1c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005e2c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a4c      	ldr	r2, [pc, #304]	@ (8005f8c <TIM_Base_SetConfig+0x144>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d017      	beq.n	8005e90 <TIM_Base_SetConfig+0x48>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e66:	d013      	beq.n	8005e90 <TIM_Base_SetConfig+0x48>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a49      	ldr	r2, [pc, #292]	@ (8005f90 <TIM_Base_SetConfig+0x148>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00f      	beq.n	8005e90 <TIM_Base_SetConfig+0x48>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a48      	ldr	r2, [pc, #288]	@ (8005f94 <TIM_Base_SetConfig+0x14c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <TIM_Base_SetConfig+0x48>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a47      	ldr	r2, [pc, #284]	@ (8005f98 <TIM_Base_SetConfig+0x150>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d007      	beq.n	8005e90 <TIM_Base_SetConfig+0x48>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a46      	ldr	r2, [pc, #280]	@ (8005f9c <TIM_Base_SetConfig+0x154>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_Base_SetConfig+0x48>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a45      	ldr	r2, [pc, #276]	@ (8005fa0 <TIM_Base_SetConfig+0x158>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d108      	bne.n	8005ea2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a39      	ldr	r2, [pc, #228]	@ (8005f8c <TIM_Base_SetConfig+0x144>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d023      	beq.n	8005ef2 <TIM_Base_SetConfig+0xaa>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb0:	d01f      	beq.n	8005ef2 <TIM_Base_SetConfig+0xaa>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a36      	ldr	r2, [pc, #216]	@ (8005f90 <TIM_Base_SetConfig+0x148>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01b      	beq.n	8005ef2 <TIM_Base_SetConfig+0xaa>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a35      	ldr	r2, [pc, #212]	@ (8005f94 <TIM_Base_SetConfig+0x14c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d017      	beq.n	8005ef2 <TIM_Base_SetConfig+0xaa>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a34      	ldr	r2, [pc, #208]	@ (8005f98 <TIM_Base_SetConfig+0x150>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <TIM_Base_SetConfig+0xaa>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a33      	ldr	r2, [pc, #204]	@ (8005f9c <TIM_Base_SetConfig+0x154>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00f      	beq.n	8005ef2 <TIM_Base_SetConfig+0xaa>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a33      	ldr	r2, [pc, #204]	@ (8005fa4 <TIM_Base_SetConfig+0x15c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00b      	beq.n	8005ef2 <TIM_Base_SetConfig+0xaa>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a32      	ldr	r2, [pc, #200]	@ (8005fa8 <TIM_Base_SetConfig+0x160>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d007      	beq.n	8005ef2 <TIM_Base_SetConfig+0xaa>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a31      	ldr	r2, [pc, #196]	@ (8005fac <TIM_Base_SetConfig+0x164>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_Base_SetConfig+0xaa>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a2c      	ldr	r2, [pc, #176]	@ (8005fa0 <TIM_Base_SetConfig+0x158>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d108      	bne.n	8005f04 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a18      	ldr	r2, [pc, #96]	@ (8005f8c <TIM_Base_SetConfig+0x144>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d013      	beq.n	8005f58 <TIM_Base_SetConfig+0x110>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a1a      	ldr	r2, [pc, #104]	@ (8005f9c <TIM_Base_SetConfig+0x154>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00f      	beq.n	8005f58 <TIM_Base_SetConfig+0x110>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8005fa4 <TIM_Base_SetConfig+0x15c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00b      	beq.n	8005f58 <TIM_Base_SetConfig+0x110>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a19      	ldr	r2, [pc, #100]	@ (8005fa8 <TIM_Base_SetConfig+0x160>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d007      	beq.n	8005f58 <TIM_Base_SetConfig+0x110>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a18      	ldr	r2, [pc, #96]	@ (8005fac <TIM_Base_SetConfig+0x164>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_Base_SetConfig+0x110>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a13      	ldr	r2, [pc, #76]	@ (8005fa0 <TIM_Base_SetConfig+0x158>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d103      	bne.n	8005f60 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d105      	bne.n	8005f7e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f023 0201 	bic.w	r2, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	611a      	str	r2, [r3, #16]
  }
}
 8005f7e:	bf00      	nop
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40000800 	.word	0x40000800
 8005f98:	40000c00 	.word	0x40000c00
 8005f9c:	40013400 	.word	0x40013400
 8005fa0:	40015000 	.word	0x40015000
 8005fa4:	40014000 	.word	0x40014000
 8005fa8:	40014400 	.word	0x40014400
 8005fac:	40014800 	.word	0x40014800

08005fb0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe2:	f023 0307 	bic.w	r3, r3, #7
 8005fe6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	4a52      	ldr	r2, [pc, #328]	@ (8006148 <TIM_SlaveTimer_SetConfig+0x198>)
 8006000:	4293      	cmp	r3, r2
 8006002:	f000 809a 	beq.w	800613a <TIM_SlaveTimer_SetConfig+0x18a>
 8006006:	4a50      	ldr	r2, [pc, #320]	@ (8006148 <TIM_SlaveTimer_SetConfig+0x198>)
 8006008:	4293      	cmp	r3, r2
 800600a:	f200 8093 	bhi.w	8006134 <TIM_SlaveTimer_SetConfig+0x184>
 800600e:	4a4f      	ldr	r2, [pc, #316]	@ (800614c <TIM_SlaveTimer_SetConfig+0x19c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	f000 8092 	beq.w	800613a <TIM_SlaveTimer_SetConfig+0x18a>
 8006016:	4a4d      	ldr	r2, [pc, #308]	@ (800614c <TIM_SlaveTimer_SetConfig+0x19c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	f200 808b 	bhi.w	8006134 <TIM_SlaveTimer_SetConfig+0x184>
 800601e:	4a4c      	ldr	r2, [pc, #304]	@ (8006150 <TIM_SlaveTimer_SetConfig+0x1a0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	f000 808a 	beq.w	800613a <TIM_SlaveTimer_SetConfig+0x18a>
 8006026:	4a4a      	ldr	r2, [pc, #296]	@ (8006150 <TIM_SlaveTimer_SetConfig+0x1a0>)
 8006028:	4293      	cmp	r3, r2
 800602a:	f200 8083 	bhi.w	8006134 <TIM_SlaveTimer_SetConfig+0x184>
 800602e:	4a49      	ldr	r2, [pc, #292]	@ (8006154 <TIM_SlaveTimer_SetConfig+0x1a4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	f000 8082 	beq.w	800613a <TIM_SlaveTimer_SetConfig+0x18a>
 8006036:	4a47      	ldr	r2, [pc, #284]	@ (8006154 <TIM_SlaveTimer_SetConfig+0x1a4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d87b      	bhi.n	8006134 <TIM_SlaveTimer_SetConfig+0x184>
 800603c:	4a46      	ldr	r2, [pc, #280]	@ (8006158 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d07b      	beq.n	800613a <TIM_SlaveTimer_SetConfig+0x18a>
 8006042:	4a45      	ldr	r2, [pc, #276]	@ (8006158 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d875      	bhi.n	8006134 <TIM_SlaveTimer_SetConfig+0x184>
 8006048:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800604c:	d075      	beq.n	800613a <TIM_SlaveTimer_SetConfig+0x18a>
 800604e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006052:	d86f      	bhi.n	8006134 <TIM_SlaveTimer_SetConfig+0x184>
 8006054:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006058:	d06f      	beq.n	800613a <TIM_SlaveTimer_SetConfig+0x18a>
 800605a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800605e:	d869      	bhi.n	8006134 <TIM_SlaveTimer_SetConfig+0x184>
 8006060:	2b70      	cmp	r3, #112	@ 0x70
 8006062:	d01a      	beq.n	800609a <TIM_SlaveTimer_SetConfig+0xea>
 8006064:	2b70      	cmp	r3, #112	@ 0x70
 8006066:	d865      	bhi.n	8006134 <TIM_SlaveTimer_SetConfig+0x184>
 8006068:	2b60      	cmp	r3, #96	@ 0x60
 800606a:	d059      	beq.n	8006120 <TIM_SlaveTimer_SetConfig+0x170>
 800606c:	2b60      	cmp	r3, #96	@ 0x60
 800606e:	d861      	bhi.n	8006134 <TIM_SlaveTimer_SetConfig+0x184>
 8006070:	2b50      	cmp	r3, #80	@ 0x50
 8006072:	d04b      	beq.n	800610c <TIM_SlaveTimer_SetConfig+0x15c>
 8006074:	2b50      	cmp	r3, #80	@ 0x50
 8006076:	d85d      	bhi.n	8006134 <TIM_SlaveTimer_SetConfig+0x184>
 8006078:	2b40      	cmp	r3, #64	@ 0x40
 800607a:	d019      	beq.n	80060b0 <TIM_SlaveTimer_SetConfig+0x100>
 800607c:	2b40      	cmp	r3, #64	@ 0x40
 800607e:	d859      	bhi.n	8006134 <TIM_SlaveTimer_SetConfig+0x184>
 8006080:	2b30      	cmp	r3, #48	@ 0x30
 8006082:	d05a      	beq.n	800613a <TIM_SlaveTimer_SetConfig+0x18a>
 8006084:	2b30      	cmp	r3, #48	@ 0x30
 8006086:	d855      	bhi.n	8006134 <TIM_SlaveTimer_SetConfig+0x184>
 8006088:	2b20      	cmp	r3, #32
 800608a:	d056      	beq.n	800613a <TIM_SlaveTimer_SetConfig+0x18a>
 800608c:	2b20      	cmp	r3, #32
 800608e:	d851      	bhi.n	8006134 <TIM_SlaveTimer_SetConfig+0x184>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d052      	beq.n	800613a <TIM_SlaveTimer_SetConfig+0x18a>
 8006094:	2b10      	cmp	r3, #16
 8006096:	d050      	beq.n	800613a <TIM_SlaveTimer_SetConfig+0x18a>
 8006098:	e04c      	b.n	8006134 <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80060aa:	f000 f8d3 	bl	8006254 <TIM_ETR_SetConfig>
      break;
 80060ae:	e045      	b.n	800613c <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b05      	cmp	r3, #5
 80060b6:	d004      	beq.n	80060c2 <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80060bc:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80060c0:	d101      	bne.n	80060c6 <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e03b      	b.n	800613e <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a1a      	ldr	r2, [r3, #32]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0201 	bic.w	r2, r2, #1
 80060dc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060ec:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	621a      	str	r2, [r3, #32]
      break;
 800610a:	e017      	b.n	800613c <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006118:	461a      	mov	r2, r3
 800611a:	f000 f81f 	bl	800615c <TIM_TI1_ConfigInputStage>
      break;
 800611e:	e00d      	b.n	800613c <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800612c:	461a      	mov	r2, r3
 800612e:	f000 f844 	bl	80061ba <TIM_TI2_ConfigInputStage>
      break;
 8006132:	e003      	b.n	800613c <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	75fb      	strb	r3, [r7, #23]
      break;
 8006138:	e000      	b.n	800613c <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 800613a:	bf00      	nop
  }

  return status;
 800613c:	7dfb      	ldrb	r3, [r7, #23]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	00100070 	.word	0x00100070
 800614c:	00100050 	.word	0x00100050
 8006150:	00100040 	.word	0x00100040
 8006154:	00100030 	.word	0x00100030
 8006158:	00100020 	.word	0x00100020

0800615c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	f023 0201 	bic.w	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f023 030a 	bic.w	r3, r3, #10
 8006198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b087      	sub	sp, #28
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	f023 0210 	bic.w	r2, r3, #16
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	031b      	lsls	r3, r3, #12
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006230:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006234:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	f043 0307 	orr.w	r3, r3, #7
 8006240:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	609a      	str	r2, [r3, #8]
}
 8006248:	bf00      	nop
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800626e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	021a      	lsls	r2, r3, #8
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	431a      	orrs	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4313      	orrs	r3, r2
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	609a      	str	r2, [r3, #8]
}
 8006288:	bf00      	nop
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e074      	b.n	8006396 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a34      	ldr	r2, [pc, #208]	@ (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a33      	ldr	r2, [pc, #204]	@ (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a31      	ldr	r2, [pc, #196]	@ (80063ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d108      	bne.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a21      	ldr	r2, [pc, #132]	@ (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d022      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800632c:	d01d      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1f      	ldr	r2, [pc, #124]	@ (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d018      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1d      	ldr	r2, [pc, #116]	@ (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d013      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1c      	ldr	r2, [pc, #112]	@ (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00e      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a15      	ldr	r2, [pc, #84]	@ (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d009      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a18      	ldr	r2, [pc, #96]	@ (80063bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d004      	beq.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a11      	ldr	r2, [pc, #68]	@ (80063ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d10c      	bne.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	4313      	orrs	r3, r2
 800637a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40012c00 	.word	0x40012c00
 80063a8:	40013400 	.word	0x40013400
 80063ac:	40015000 	.word	0x40015000
 80063b0:	40000400 	.word	0x40000400
 80063b4:	40000800 	.word	0x40000800
 80063b8:	40000c00 	.word	0x40000c00
 80063bc:	40014000 	.word	0x40014000

080063c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e042      	b.n	8006458 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7fc fd97 	bl	8002f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2224      	movs	r2, #36	@ 0x24
 80063ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0201 	bic.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fc1a 	bl	8006c44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f91b 	bl	800664c <UART_SetConfig>
 8006416:	4603      	mov	r3, r0
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e01b      	b.n	8006458 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800642e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800643e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fc99 	bl	8006d88 <UART_CheckIdleState>
 8006456:	4603      	mov	r3, r0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006460:	b480      	push	{r7}
 8006462:	b091      	sub	sp, #68	@ 0x44
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006474:	2b20      	cmp	r3, #32
 8006476:	d178      	bne.n	800656a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <HAL_UART_Transmit_IT+0x24>
 800647e:	88fb      	ldrh	r3, [r7, #6]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e071      	b.n	800656c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	88fa      	ldrh	r2, [r7, #6]
 8006492:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	88fa      	ldrh	r2, [r7, #6]
 800649a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2221      	movs	r2, #33	@ 0x21
 80064b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064bc:	d12a      	bne.n	8006514 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064c6:	d107      	bne.n	80064d8 <HAL_UART_Transmit_IT+0x78>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d103      	bne.n	80064d8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4a29      	ldr	r2, [pc, #164]	@ (8006578 <HAL_UART_Transmit_IT+0x118>)
 80064d4:	679a      	str	r2, [r3, #120]	@ 0x78
 80064d6:	e002      	b.n	80064de <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4a28      	ldr	r2, [pc, #160]	@ (800657c <HAL_UART_Transmit_IT+0x11c>)
 80064dc:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3308      	adds	r3, #8
 80064e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3308      	adds	r3, #8
 80064fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8006500:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006504:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800650c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e5      	bne.n	80064de <HAL_UART_Transmit_IT+0x7e>
 8006512:	e028      	b.n	8006566 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651c:	d107      	bne.n	800652e <HAL_UART_Transmit_IT+0xce>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d103      	bne.n	800652e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a15      	ldr	r2, [pc, #84]	@ (8006580 <HAL_UART_Transmit_IT+0x120>)
 800652a:	679a      	str	r2, [r3, #120]	@ 0x78
 800652c:	e002      	b.n	8006534 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a14      	ldr	r2, [pc, #80]	@ (8006584 <HAL_UART_Transmit_IT+0x124>)
 8006532:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	613b      	str	r3, [r7, #16]
   return(result);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006548:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	69f9      	ldr	r1, [r7, #28]
 8006558:	6a3a      	ldr	r2, [r7, #32]
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e6      	bne.n	8006534 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	e000      	b.n	800656c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800656a:	2302      	movs	r3, #2
  }
}
 800656c:	4618      	mov	r0, r3
 800656e:	3744      	adds	r7, #68	@ 0x44
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	08007523 	.word	0x08007523
 800657c:	08007443 	.word	0x08007443
 8006580:	08007381 	.word	0x08007381
 8006584:	080072c9 	.word	0x080072c9

08006588 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08a      	sub	sp, #40	@ 0x28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	4613      	mov	r3, r2
 8006594:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800659c:	2b20      	cmp	r3, #32
 800659e:	d137      	bne.n	8006610 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <HAL_UART_Receive_IT+0x24>
 80065a6:	88fb      	ldrh	r3, [r7, #6]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e030      	b.n	8006612 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a18      	ldr	r2, [pc, #96]	@ (800661c <HAL_UART_Receive_IT+0x94>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d01f      	beq.n	8006600 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d018      	beq.n	8006600 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	613b      	str	r3, [r7, #16]
   return(result);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	461a      	mov	r2, r3
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	623b      	str	r3, [r7, #32]
 80065ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f0:	69f9      	ldr	r1, [r7, #28]
 80065f2:	6a3a      	ldr	r2, [r7, #32]
 80065f4:	e841 2300 	strex	r3, r2, [r1]
 80065f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e6      	bne.n	80065ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006600:	88fb      	ldrh	r3, [r7, #6]
 8006602:	461a      	mov	r2, r3
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 fcd6 	bl	8006fb8 <UART_Start_Receive_IT>
 800660c:	4603      	mov	r3, r0
 800660e:	e000      	b.n	8006612 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006610:	2302      	movs	r3, #2
  }
}
 8006612:	4618      	mov	r0, r3
 8006614:	3728      	adds	r7, #40	@ 0x28
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40008000 	.word	0x40008000

08006620 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800664c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006650:	b08c      	sub	sp, #48	@ 0x30
 8006652:	af00      	add	r7, sp, #0
 8006654:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	431a      	orrs	r2, r3
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	431a      	orrs	r2, r3
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	4313      	orrs	r3, r2
 8006672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4baa      	ldr	r3, [pc, #680]	@ (8006924 <UART_SetConfig+0x2d8>)
 800667c:	4013      	ands	r3, r2
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006684:	430b      	orrs	r3, r1
 8006686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a9f      	ldr	r2, [pc, #636]	@ (8006928 <UART_SetConfig+0x2dc>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d004      	beq.n	80066b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066b4:	4313      	orrs	r3, r2
 80066b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80066c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	6812      	ldr	r2, [r2, #0]
 80066ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066cc:	430b      	orrs	r3, r1
 80066ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d6:	f023 010f 	bic.w	r1, r3, #15
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a90      	ldr	r2, [pc, #576]	@ (800692c <UART_SetConfig+0x2e0>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d125      	bne.n	800673c <UART_SetConfig+0xf0>
 80066f0:	4b8f      	ldr	r3, [pc, #572]	@ (8006930 <UART_SetConfig+0x2e4>)
 80066f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d81a      	bhi.n	8006734 <UART_SetConfig+0xe8>
 80066fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006704 <UART_SetConfig+0xb8>)
 8006700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006704:	08006715 	.word	0x08006715
 8006708:	08006725 	.word	0x08006725
 800670c:	0800671d 	.word	0x0800671d
 8006710:	0800672d 	.word	0x0800672d
 8006714:	2301      	movs	r3, #1
 8006716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800671a:	e116      	b.n	800694a <UART_SetConfig+0x2fe>
 800671c:	2302      	movs	r3, #2
 800671e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006722:	e112      	b.n	800694a <UART_SetConfig+0x2fe>
 8006724:	2304      	movs	r3, #4
 8006726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800672a:	e10e      	b.n	800694a <UART_SetConfig+0x2fe>
 800672c:	2308      	movs	r3, #8
 800672e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006732:	e10a      	b.n	800694a <UART_SetConfig+0x2fe>
 8006734:	2310      	movs	r3, #16
 8006736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800673a:	e106      	b.n	800694a <UART_SetConfig+0x2fe>
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a7c      	ldr	r2, [pc, #496]	@ (8006934 <UART_SetConfig+0x2e8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d138      	bne.n	80067b8 <UART_SetConfig+0x16c>
 8006746:	4b7a      	ldr	r3, [pc, #488]	@ (8006930 <UART_SetConfig+0x2e4>)
 8006748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800674c:	f003 030c 	and.w	r3, r3, #12
 8006750:	2b0c      	cmp	r3, #12
 8006752:	d82d      	bhi.n	80067b0 <UART_SetConfig+0x164>
 8006754:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <UART_SetConfig+0x110>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	08006791 	.word	0x08006791
 8006760:	080067b1 	.word	0x080067b1
 8006764:	080067b1 	.word	0x080067b1
 8006768:	080067b1 	.word	0x080067b1
 800676c:	080067a1 	.word	0x080067a1
 8006770:	080067b1 	.word	0x080067b1
 8006774:	080067b1 	.word	0x080067b1
 8006778:	080067b1 	.word	0x080067b1
 800677c:	08006799 	.word	0x08006799
 8006780:	080067b1 	.word	0x080067b1
 8006784:	080067b1 	.word	0x080067b1
 8006788:	080067b1 	.word	0x080067b1
 800678c:	080067a9 	.word	0x080067a9
 8006790:	2300      	movs	r3, #0
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006796:	e0d8      	b.n	800694a <UART_SetConfig+0x2fe>
 8006798:	2302      	movs	r3, #2
 800679a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800679e:	e0d4      	b.n	800694a <UART_SetConfig+0x2fe>
 80067a0:	2304      	movs	r3, #4
 80067a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067a6:	e0d0      	b.n	800694a <UART_SetConfig+0x2fe>
 80067a8:	2308      	movs	r3, #8
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ae:	e0cc      	b.n	800694a <UART_SetConfig+0x2fe>
 80067b0:	2310      	movs	r3, #16
 80067b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067b6:	e0c8      	b.n	800694a <UART_SetConfig+0x2fe>
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a5e      	ldr	r2, [pc, #376]	@ (8006938 <UART_SetConfig+0x2ec>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d125      	bne.n	800680e <UART_SetConfig+0x1c2>
 80067c2:	4b5b      	ldr	r3, [pc, #364]	@ (8006930 <UART_SetConfig+0x2e4>)
 80067c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80067cc:	2b30      	cmp	r3, #48	@ 0x30
 80067ce:	d016      	beq.n	80067fe <UART_SetConfig+0x1b2>
 80067d0:	2b30      	cmp	r3, #48	@ 0x30
 80067d2:	d818      	bhi.n	8006806 <UART_SetConfig+0x1ba>
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	d00a      	beq.n	80067ee <UART_SetConfig+0x1a2>
 80067d8:	2b20      	cmp	r3, #32
 80067da:	d814      	bhi.n	8006806 <UART_SetConfig+0x1ba>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <UART_SetConfig+0x19a>
 80067e0:	2b10      	cmp	r3, #16
 80067e2:	d008      	beq.n	80067f6 <UART_SetConfig+0x1aa>
 80067e4:	e00f      	b.n	8006806 <UART_SetConfig+0x1ba>
 80067e6:	2300      	movs	r3, #0
 80067e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ec:	e0ad      	b.n	800694a <UART_SetConfig+0x2fe>
 80067ee:	2302      	movs	r3, #2
 80067f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067f4:	e0a9      	b.n	800694a <UART_SetConfig+0x2fe>
 80067f6:	2304      	movs	r3, #4
 80067f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067fc:	e0a5      	b.n	800694a <UART_SetConfig+0x2fe>
 80067fe:	2308      	movs	r3, #8
 8006800:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006804:	e0a1      	b.n	800694a <UART_SetConfig+0x2fe>
 8006806:	2310      	movs	r3, #16
 8006808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800680c:	e09d      	b.n	800694a <UART_SetConfig+0x2fe>
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a4a      	ldr	r2, [pc, #296]	@ (800693c <UART_SetConfig+0x2f0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d125      	bne.n	8006864 <UART_SetConfig+0x218>
 8006818:	4b45      	ldr	r3, [pc, #276]	@ (8006930 <UART_SetConfig+0x2e4>)
 800681a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800681e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006822:	2bc0      	cmp	r3, #192	@ 0xc0
 8006824:	d016      	beq.n	8006854 <UART_SetConfig+0x208>
 8006826:	2bc0      	cmp	r3, #192	@ 0xc0
 8006828:	d818      	bhi.n	800685c <UART_SetConfig+0x210>
 800682a:	2b80      	cmp	r3, #128	@ 0x80
 800682c:	d00a      	beq.n	8006844 <UART_SetConfig+0x1f8>
 800682e:	2b80      	cmp	r3, #128	@ 0x80
 8006830:	d814      	bhi.n	800685c <UART_SetConfig+0x210>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d002      	beq.n	800683c <UART_SetConfig+0x1f0>
 8006836:	2b40      	cmp	r3, #64	@ 0x40
 8006838:	d008      	beq.n	800684c <UART_SetConfig+0x200>
 800683a:	e00f      	b.n	800685c <UART_SetConfig+0x210>
 800683c:	2300      	movs	r3, #0
 800683e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006842:	e082      	b.n	800694a <UART_SetConfig+0x2fe>
 8006844:	2302      	movs	r3, #2
 8006846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800684a:	e07e      	b.n	800694a <UART_SetConfig+0x2fe>
 800684c:	2304      	movs	r3, #4
 800684e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006852:	e07a      	b.n	800694a <UART_SetConfig+0x2fe>
 8006854:	2308      	movs	r3, #8
 8006856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800685a:	e076      	b.n	800694a <UART_SetConfig+0x2fe>
 800685c:	2310      	movs	r3, #16
 800685e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006862:	e072      	b.n	800694a <UART_SetConfig+0x2fe>
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a35      	ldr	r2, [pc, #212]	@ (8006940 <UART_SetConfig+0x2f4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d12a      	bne.n	80068c4 <UART_SetConfig+0x278>
 800686e:	4b30      	ldr	r3, [pc, #192]	@ (8006930 <UART_SetConfig+0x2e4>)
 8006870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006874:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006878:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800687c:	d01a      	beq.n	80068b4 <UART_SetConfig+0x268>
 800687e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006882:	d81b      	bhi.n	80068bc <UART_SetConfig+0x270>
 8006884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006888:	d00c      	beq.n	80068a4 <UART_SetConfig+0x258>
 800688a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800688e:	d815      	bhi.n	80068bc <UART_SetConfig+0x270>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <UART_SetConfig+0x250>
 8006894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006898:	d008      	beq.n	80068ac <UART_SetConfig+0x260>
 800689a:	e00f      	b.n	80068bc <UART_SetConfig+0x270>
 800689c:	2300      	movs	r3, #0
 800689e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068a2:	e052      	b.n	800694a <UART_SetConfig+0x2fe>
 80068a4:	2302      	movs	r3, #2
 80068a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068aa:	e04e      	b.n	800694a <UART_SetConfig+0x2fe>
 80068ac:	2304      	movs	r3, #4
 80068ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068b2:	e04a      	b.n	800694a <UART_SetConfig+0x2fe>
 80068b4:	2308      	movs	r3, #8
 80068b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ba:	e046      	b.n	800694a <UART_SetConfig+0x2fe>
 80068bc:	2310      	movs	r3, #16
 80068be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068c2:	e042      	b.n	800694a <UART_SetConfig+0x2fe>
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a17      	ldr	r2, [pc, #92]	@ (8006928 <UART_SetConfig+0x2dc>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d13a      	bne.n	8006944 <UART_SetConfig+0x2f8>
 80068ce:	4b18      	ldr	r3, [pc, #96]	@ (8006930 <UART_SetConfig+0x2e4>)
 80068d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80068d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068dc:	d01a      	beq.n	8006914 <UART_SetConfig+0x2c8>
 80068de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068e2:	d81b      	bhi.n	800691c <UART_SetConfig+0x2d0>
 80068e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068e8:	d00c      	beq.n	8006904 <UART_SetConfig+0x2b8>
 80068ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068ee:	d815      	bhi.n	800691c <UART_SetConfig+0x2d0>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <UART_SetConfig+0x2b0>
 80068f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f8:	d008      	beq.n	800690c <UART_SetConfig+0x2c0>
 80068fa:	e00f      	b.n	800691c <UART_SetConfig+0x2d0>
 80068fc:	2300      	movs	r3, #0
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006902:	e022      	b.n	800694a <UART_SetConfig+0x2fe>
 8006904:	2302      	movs	r3, #2
 8006906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800690a:	e01e      	b.n	800694a <UART_SetConfig+0x2fe>
 800690c:	2304      	movs	r3, #4
 800690e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006912:	e01a      	b.n	800694a <UART_SetConfig+0x2fe>
 8006914:	2308      	movs	r3, #8
 8006916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800691a:	e016      	b.n	800694a <UART_SetConfig+0x2fe>
 800691c:	2310      	movs	r3, #16
 800691e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006922:	e012      	b.n	800694a <UART_SetConfig+0x2fe>
 8006924:	cfff69f3 	.word	0xcfff69f3
 8006928:	40008000 	.word	0x40008000
 800692c:	40013800 	.word	0x40013800
 8006930:	40021000 	.word	0x40021000
 8006934:	40004400 	.word	0x40004400
 8006938:	40004800 	.word	0x40004800
 800693c:	40004c00 	.word	0x40004c00
 8006940:	40005000 	.word	0x40005000
 8006944:	2310      	movs	r3, #16
 8006946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4aae      	ldr	r2, [pc, #696]	@ (8006c08 <UART_SetConfig+0x5bc>)
 8006950:	4293      	cmp	r3, r2
 8006952:	f040 8097 	bne.w	8006a84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006956:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800695a:	2b08      	cmp	r3, #8
 800695c:	d823      	bhi.n	80069a6 <UART_SetConfig+0x35a>
 800695e:	a201      	add	r2, pc, #4	@ (adr r2, 8006964 <UART_SetConfig+0x318>)
 8006960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006964:	08006989 	.word	0x08006989
 8006968:	080069a7 	.word	0x080069a7
 800696c:	08006991 	.word	0x08006991
 8006970:	080069a7 	.word	0x080069a7
 8006974:	08006997 	.word	0x08006997
 8006978:	080069a7 	.word	0x080069a7
 800697c:	080069a7 	.word	0x080069a7
 8006980:	080069a7 	.word	0x080069a7
 8006984:	0800699f 	.word	0x0800699f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006988:	f7fe fd4e 	bl	8005428 <HAL_RCC_GetPCLK1Freq>
 800698c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800698e:	e010      	b.n	80069b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006990:	4b9e      	ldr	r3, [pc, #632]	@ (8006c0c <UART_SetConfig+0x5c0>)
 8006992:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006994:	e00d      	b.n	80069b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006996:	f7fe fcd9 	bl	800534c <HAL_RCC_GetSysClockFreq>
 800699a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800699c:	e009      	b.n	80069b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800699e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069a4:	e005      	b.n	80069b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80069b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 8130 	beq.w	8006c1a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069be:	4a94      	ldr	r2, [pc, #592]	@ (8006c10 <UART_SetConfig+0x5c4>)
 80069c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069c4:	461a      	mov	r2, r3
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80069cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	4413      	add	r3, r2
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d305      	bcc.n	80069ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d903      	bls.n	80069f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80069f0:	e113      	b.n	8006c1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f4:	2200      	movs	r2, #0
 80069f6:	60bb      	str	r3, [r7, #8]
 80069f8:	60fa      	str	r2, [r7, #12]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fe:	4a84      	ldr	r2, [pc, #528]	@ (8006c10 <UART_SetConfig+0x5c4>)
 8006a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2200      	movs	r2, #0
 8006a08:	603b      	str	r3, [r7, #0]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a14:	f7f9 fc6c 	bl	80002f0 <__aeabi_uldivmod>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	4619      	mov	r1, r3
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	020b      	lsls	r3, r1, #8
 8006a2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a2e:	0202      	lsls	r2, r0, #8
 8006a30:	6979      	ldr	r1, [r7, #20]
 8006a32:	6849      	ldr	r1, [r1, #4]
 8006a34:	0849      	lsrs	r1, r1, #1
 8006a36:	2000      	movs	r0, #0
 8006a38:	460c      	mov	r4, r1
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	eb12 0804 	adds.w	r8, r2, r4
 8006a40:	eb43 0905 	adc.w	r9, r3, r5
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	469a      	mov	sl, r3
 8006a4c:	4693      	mov	fp, r2
 8006a4e:	4652      	mov	r2, sl
 8006a50:	465b      	mov	r3, fp
 8006a52:	4640      	mov	r0, r8
 8006a54:	4649      	mov	r1, r9
 8006a56:	f7f9 fc4b 	bl	80002f0 <__aeabi_uldivmod>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4613      	mov	r3, r2
 8006a60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a68:	d308      	bcc.n	8006a7c <UART_SetConfig+0x430>
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a70:	d204      	bcs.n	8006a7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6a3a      	ldr	r2, [r7, #32]
 8006a78:	60da      	str	r2, [r3, #12]
 8006a7a:	e0ce      	b.n	8006c1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a82:	e0ca      	b.n	8006c1a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a8c:	d166      	bne.n	8006b5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a92:	2b08      	cmp	r3, #8
 8006a94:	d827      	bhi.n	8006ae6 <UART_SetConfig+0x49a>
 8006a96:	a201      	add	r2, pc, #4	@ (adr r2, 8006a9c <UART_SetConfig+0x450>)
 8006a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9c:	08006ac1 	.word	0x08006ac1
 8006aa0:	08006ac9 	.word	0x08006ac9
 8006aa4:	08006ad1 	.word	0x08006ad1
 8006aa8:	08006ae7 	.word	0x08006ae7
 8006aac:	08006ad7 	.word	0x08006ad7
 8006ab0:	08006ae7 	.word	0x08006ae7
 8006ab4:	08006ae7 	.word	0x08006ae7
 8006ab8:	08006ae7 	.word	0x08006ae7
 8006abc:	08006adf 	.word	0x08006adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ac0:	f7fe fcb2 	bl	8005428 <HAL_RCC_GetPCLK1Freq>
 8006ac4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ac6:	e014      	b.n	8006af2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ac8:	f7fe fcc4 	bl	8005454 <HAL_RCC_GetPCLK2Freq>
 8006acc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ace:	e010      	b.n	8006af2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ad0:	4b4e      	ldr	r3, [pc, #312]	@ (8006c0c <UART_SetConfig+0x5c0>)
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ad4:	e00d      	b.n	8006af2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ad6:	f7fe fc39 	bl	800534c <HAL_RCC_GetSysClockFreq>
 8006ada:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006adc:	e009      	b.n	8006af2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ae2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ae4:	e005      	b.n	8006af2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006af0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8090 	beq.w	8006c1a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afe:	4a44      	ldr	r2, [pc, #272]	@ (8006c10 <UART_SetConfig+0x5c4>)
 8006b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b04:	461a      	mov	r2, r3
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b0c:	005a      	lsls	r2, r3, #1
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	085b      	lsrs	r3, r3, #1
 8006b14:	441a      	add	r2, r3
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	2b0f      	cmp	r3, #15
 8006b24:	d916      	bls.n	8006b54 <UART_SetConfig+0x508>
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b2c:	d212      	bcs.n	8006b54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	f023 030f 	bic.w	r3, r3, #15
 8006b36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	8bfb      	ldrh	r3, [r7, #30]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	8bfa      	ldrh	r2, [r7, #30]
 8006b50:	60da      	str	r2, [r3, #12]
 8006b52:	e062      	b.n	8006c1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b5a:	e05e      	b.n	8006c1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d828      	bhi.n	8006bb6 <UART_SetConfig+0x56a>
 8006b64:	a201      	add	r2, pc, #4	@ (adr r2, 8006b6c <UART_SetConfig+0x520>)
 8006b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6a:	bf00      	nop
 8006b6c:	08006b91 	.word	0x08006b91
 8006b70:	08006b99 	.word	0x08006b99
 8006b74:	08006ba1 	.word	0x08006ba1
 8006b78:	08006bb7 	.word	0x08006bb7
 8006b7c:	08006ba7 	.word	0x08006ba7
 8006b80:	08006bb7 	.word	0x08006bb7
 8006b84:	08006bb7 	.word	0x08006bb7
 8006b88:	08006bb7 	.word	0x08006bb7
 8006b8c:	08006baf 	.word	0x08006baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b90:	f7fe fc4a 	bl	8005428 <HAL_RCC_GetPCLK1Freq>
 8006b94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b96:	e014      	b.n	8006bc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b98:	f7fe fc5c 	bl	8005454 <HAL_RCC_GetPCLK2Freq>
 8006b9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b9e:	e010      	b.n	8006bc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8006c0c <UART_SetConfig+0x5c0>)
 8006ba2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ba4:	e00d      	b.n	8006bc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ba6:	f7fe fbd1 	bl	800534c <HAL_RCC_GetSysClockFreq>
 8006baa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bac:	e009      	b.n	8006bc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bb4:	e005      	b.n	8006bc2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006bc0:	bf00      	nop
    }

    if (pclk != 0U)
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d028      	beq.n	8006c1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bcc:	4a10      	ldr	r2, [pc, #64]	@ (8006c10 <UART_SetConfig+0x5c4>)
 8006bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	085b      	lsrs	r3, r3, #1
 8006be0:	441a      	add	r2, r3
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	2b0f      	cmp	r3, #15
 8006bf0:	d910      	bls.n	8006c14 <UART_SetConfig+0x5c8>
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf8:	d20c      	bcs.n	8006c14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60da      	str	r2, [r3, #12]
 8006c04:	e009      	b.n	8006c1a <UART_SetConfig+0x5ce>
 8006c06:	bf00      	nop
 8006c08:	40008000 	.word	0x40008000
 8006c0c:	00f42400 	.word	0x00f42400
 8006c10:	08008e18 	.word	0x08008e18
      }
      else
      {
        ret = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2200      	movs	r2, #0
 8006c34:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006c36:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3730      	adds	r7, #48	@ 0x30
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c50:	f003 0308 	and.w	r3, r3, #8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00a      	beq.n	8006c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00a      	beq.n	8006cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00a      	beq.n	8006cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d01a      	beq.n	8006d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d42:	d10a      	bne.n	8006d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	605a      	str	r2, [r3, #4]
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b098      	sub	sp, #96	@ 0x60
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d98:	f7fd fa9a 	bl	80042d0 <HAL_GetTick>
 8006d9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d12f      	bne.n	8006e0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db4:	2200      	movs	r2, #0
 8006db6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f88e 	bl	8006edc <UART_WaitOnFlagUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d022      	beq.n	8006e0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dda:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006de6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e6      	bne.n	8006dc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e063      	b.n	8006ed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d149      	bne.n	8006eae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e22:	2200      	movs	r2, #0
 8006e24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f857 	bl	8006edc <UART_WaitOnFlagUntilTimeout>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d03c      	beq.n	8006eae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	623b      	str	r3, [r7, #32]
   return(result);
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e52:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e6      	bne.n	8006e34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3308      	adds	r3, #8
 8006e84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e86:	61fa      	str	r2, [r7, #28]
 8006e88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	69b9      	ldr	r1, [r7, #24]
 8006e8c:	69fa      	ldr	r2, [r7, #28]
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	617b      	str	r3, [r7, #20]
   return(result);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e5      	bne.n	8006e66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e012      	b.n	8006ed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3758      	adds	r7, #88	@ 0x58
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eec:	e04f      	b.n	8006f8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef4:	d04b      	beq.n	8006f8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ef6:	f7fd f9eb 	bl	80042d0 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d302      	bcc.n	8006f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e04e      	b.n	8006fae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d037      	beq.n	8006f8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b80      	cmp	r3, #128	@ 0x80
 8006f22:	d034      	beq.n	8006f8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2b40      	cmp	r3, #64	@ 0x40
 8006f28:	d031      	beq.n	8006f8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	f003 0308 	and.w	r3, r3, #8
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d110      	bne.n	8006f5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2208      	movs	r2, #8
 8006f3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f95b 	bl	80071fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2208      	movs	r2, #8
 8006f4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e029      	b.n	8006fae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f68:	d111      	bne.n	8006f8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 f941 	bl	80071fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e00f      	b.n	8006fae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69da      	ldr	r2, [r3, #28]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4013      	ands	r3, r2
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	bf0c      	ite	eq
 8006f9e:	2301      	moveq	r3, #1
 8006fa0:	2300      	movne	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d0a0      	beq.n	8006eee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b0a3      	sub	sp, #140	@ 0x8c
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	88fa      	ldrh	r2, [r7, #6]
 8006fd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	88fa      	ldrh	r2, [r7, #6]
 8006fd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fea:	d10e      	bne.n	800700a <UART_Start_Receive_IT+0x52>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d105      	bne.n	8007000 <UART_Start_Receive_IT+0x48>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006ffa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ffe:	e02d      	b.n	800705c <UART_Start_Receive_IT+0xa4>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	22ff      	movs	r2, #255	@ 0xff
 8007004:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007008:	e028      	b.n	800705c <UART_Start_Receive_IT+0xa4>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10d      	bne.n	800702e <UART_Start_Receive_IT+0x76>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d104      	bne.n	8007024 <UART_Start_Receive_IT+0x6c>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	22ff      	movs	r2, #255	@ 0xff
 800701e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007022:	e01b      	b.n	800705c <UART_Start_Receive_IT+0xa4>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	227f      	movs	r2, #127	@ 0x7f
 8007028:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800702c:	e016      	b.n	800705c <UART_Start_Receive_IT+0xa4>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007036:	d10d      	bne.n	8007054 <UART_Start_Receive_IT+0x9c>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d104      	bne.n	800704a <UART_Start_Receive_IT+0x92>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	227f      	movs	r2, #127	@ 0x7f
 8007044:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007048:	e008      	b.n	800705c <UART_Start_Receive_IT+0xa4>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	223f      	movs	r2, #63	@ 0x3f
 800704e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007052:	e003      	b.n	800705c <UART_Start_Receive_IT+0xa4>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2222      	movs	r2, #34	@ 0x22
 8007068:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3308      	adds	r3, #8
 8007072:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800707c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800707e:	f043 0301 	orr.w	r3, r3, #1
 8007082:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3308      	adds	r3, #8
 800708c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007090:	673a      	str	r2, [r7, #112]	@ 0x70
 8007092:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007096:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800709e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e3      	bne.n	800706c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070ac:	d14f      	bne.n	800714e <UART_Start_Receive_IT+0x196>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80070b4:	88fa      	ldrh	r2, [r7, #6]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d349      	bcc.n	800714e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070c2:	d107      	bne.n	80070d4 <UART_Start_Receive_IT+0x11c>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d103      	bne.n	80070d4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4a47      	ldr	r2, [pc, #284]	@ (80071ec <UART_Start_Receive_IT+0x234>)
 80070d0:	675a      	str	r2, [r3, #116]	@ 0x74
 80070d2:	e002      	b.n	80070da <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4a46      	ldr	r2, [pc, #280]	@ (80071f0 <UART_Start_Receive_IT+0x238>)
 80070d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01a      	beq.n	8007118 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80070f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007104:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007106:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800710a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e4      	bne.n	80070e2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3308      	adds	r3, #8
 800711e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800712e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3308      	adds	r3, #8
 8007136:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007138:	64ba      	str	r2, [r7, #72]	@ 0x48
 800713a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800713e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e5      	bne.n	8007118 <UART_Start_Receive_IT+0x160>
 800714c:	e046      	b.n	80071dc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007156:	d107      	bne.n	8007168 <UART_Start_Receive_IT+0x1b0>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d103      	bne.n	8007168 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4a24      	ldr	r2, [pc, #144]	@ (80071f4 <UART_Start_Receive_IT+0x23c>)
 8007164:	675a      	str	r2, [r3, #116]	@ 0x74
 8007166:	e002      	b.n	800716e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4a23      	ldr	r2, [pc, #140]	@ (80071f8 <UART_Start_Receive_IT+0x240>)
 800716c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d019      	beq.n	80071aa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	e853 3f00 	ldrex	r3, [r3]
 8007182:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800718a:	677b      	str	r3, [r7, #116]	@ 0x74
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007194:	637b      	str	r3, [r7, #52]	@ 0x34
 8007196:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007198:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800719a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800719c:	e841 2300 	strex	r3, r2, [r1]
 80071a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80071a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1e6      	bne.n	8007176 <UART_Start_Receive_IT+0x1be>
 80071a8:	e018      	b.n	80071dc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	613b      	str	r3, [r7, #16]
   return(result);
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f043 0320 	orr.w	r3, r3, #32
 80071be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071c8:	623b      	str	r3, [r7, #32]
 80071ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	69f9      	ldr	r1, [r7, #28]
 80071ce:	6a3a      	ldr	r2, [r7, #32]
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e6      	bne.n	80071aa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	378c      	adds	r7, #140	@ 0x8c
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	08007ce1 	.word	0x08007ce1
 80071f0:	0800797d 	.word	0x0800797d
 80071f4:	080077c5 	.word	0x080077c5
 80071f8:	0800760d 	.word	0x0800760d

080071fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b095      	sub	sp, #84	@ 0x54
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007222:	643b      	str	r3, [r7, #64]	@ 0x40
 8007224:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007226:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007228:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800722a:	e841 2300 	strex	r3, r2, [r1]
 800722e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e6      	bne.n	8007204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3308      	adds	r3, #8
 800723c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	61fb      	str	r3, [r7, #28]
   return(result);
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800724c:	f023 0301 	bic.w	r3, r3, #1
 8007250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3308      	adds	r3, #8
 8007258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800725a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800725c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e3      	bne.n	8007236 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007272:	2b01      	cmp	r3, #1
 8007274:	d118      	bne.n	80072a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	60bb      	str	r3, [r7, #8]
   return(result);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f023 0310 	bic.w	r3, r3, #16
 800728a:	647b      	str	r3, [r7, #68]	@ 0x44
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	461a      	mov	r2, r3
 8007292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007294:	61bb      	str	r3, [r7, #24]
 8007296:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6979      	ldr	r1, [r7, #20]
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	613b      	str	r3, [r7, #16]
   return(result);
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e6      	bne.n	8007276 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80072bc:	bf00      	nop
 80072be:	3754      	adds	r7, #84	@ 0x54
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b08f      	sub	sp, #60	@ 0x3c
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d6:	2b21      	cmp	r3, #33	@ 0x21
 80072d8:	d14c      	bne.n	8007374 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d132      	bne.n	800734c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	461a      	mov	r2, r3
 8007302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007306:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800730a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800730c:	e841 2300 	strex	r3, r2, [r1]
 8007310:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e6      	bne.n	80072e6 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	e853 3f00 	ldrex	r3, [r3]
 8007324:	60bb      	str	r3, [r7, #8]
   return(result);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800732c:	633b      	str	r3, [r7, #48]	@ 0x30
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007336:	61bb      	str	r3, [r7, #24]
 8007338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733a:	6979      	ldr	r1, [r7, #20]
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	e841 2300 	strex	r3, r2, [r1]
 8007342:	613b      	str	r3, [r7, #16]
   return(result);
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1e6      	bne.n	8007318 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800734a:	e013      	b.n	8007374 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007350:	781a      	ldrb	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007368:	b29b      	uxth	r3, r3
 800736a:	3b01      	subs	r3, #1
 800736c:	b29a      	uxth	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007374:	bf00      	nop
 8007376:	373c      	adds	r7, #60	@ 0x3c
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007380:	b480      	push	{r7}
 8007382:	b091      	sub	sp, #68	@ 0x44
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738e:	2b21      	cmp	r3, #33	@ 0x21
 8007390:	d151      	bne.n	8007436 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007398:	b29b      	uxth	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d132      	bne.n	8007404 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	e853 3f00 	ldrex	r3, [r3]
 80073aa:	623b      	str	r3, [r7, #32]
   return(result);
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80073be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e6      	bne.n	800739e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	e853 3f00 	ldrex	r3, [r3]
 80073dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ee:	61fb      	str	r3, [r7, #28]
 80073f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	69b9      	ldr	r1, [r7, #24]
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	617b      	str	r3, [r7, #20]
   return(result);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e6      	bne.n	80073d0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007402:	e018      	b.n	8007436 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007408:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800740a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007418:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800741e:	1c9a      	adds	r2, r3, #2
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800742a:	b29b      	uxth	r3, r3
 800742c:	3b01      	subs	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007436:	bf00      	nop
 8007438:	3744      	adds	r7, #68	@ 0x44
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007442:	b480      	push	{r7}
 8007444:	b091      	sub	sp, #68	@ 0x44
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007450:	2b21      	cmp	r3, #33	@ 0x21
 8007452:	d160      	bne.n	8007516 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800745a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800745c:	e057      	b.n	800750e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d133      	bne.n	80074d2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3308      	adds	r3, #8
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	623b      	str	r3, [r7, #32]
   return(result);
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007480:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3308      	adds	r3, #8
 8007488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800748a:	633a      	str	r2, [r7, #48]	@ 0x30
 800748c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e5      	bne.n	800746a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074bc:	61fb      	str	r3, [r7, #28]
 80074be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	69b9      	ldr	r1, [r7, #24]
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	617b      	str	r3, [r7, #20]
   return(result);
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e6      	bne.n	800749e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80074d0:	e021      	b.n	8007516 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d013      	beq.n	8007508 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e4:	781a      	ldrb	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007508:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800750a:	3b01      	subs	r3, #1
 800750c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800750e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1a4      	bne.n	800745e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007514:	e7ff      	b.n	8007516 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007516:	bf00      	nop
 8007518:	3744      	adds	r7, #68	@ 0x44
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007522:	b480      	push	{r7}
 8007524:	b091      	sub	sp, #68	@ 0x44
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007530:	2b21      	cmp	r3, #33	@ 0x21
 8007532:	d165      	bne.n	8007600 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800753a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800753c:	e05c      	b.n	80075f8 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007544:	b29b      	uxth	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d133      	bne.n	80075b2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3308      	adds	r3, #8
 8007550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	61fb      	str	r3, [r7, #28]
   return(result);
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007560:	637b      	str	r3, [r7, #52]	@ 0x34
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3308      	adds	r3, #8
 8007568:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800756a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800756c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007570:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e5      	bne.n	800754a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	60bb      	str	r3, [r7, #8]
   return(result);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007592:	633b      	str	r3, [r7, #48]	@ 0x30
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	61bb      	str	r3, [r7, #24]
 800759e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	6979      	ldr	r1, [r7, #20]
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	e841 2300 	strex	r3, r2, [r1]
 80075a8:	613b      	str	r3, [r7, #16]
   return(result);
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e6      	bne.n	800757e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80075b0:	e026      	b.n	8007600 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d018      	beq.n	80075f2 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c4:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80075c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075d4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075da:	1c9a      	adds	r2, r3, #2
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80075f2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80075f4:	3b01      	subs	r3, #1
 80075f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80075f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d19f      	bne.n	800753e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80075fe:	e7ff      	b.n	8007600 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007600:	bf00      	nop
 8007602:	3744      	adds	r7, #68	@ 0x44
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b09c      	sub	sp, #112	@ 0x70
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800761a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007624:	2b22      	cmp	r3, #34	@ 0x22
 8007626:	f040 80be 	bne.w	80077a6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007630:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007634:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007638:	b2d9      	uxtb	r1, r3
 800763a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800763e:	b2da      	uxtb	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007644:	400a      	ands	r2, r1
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800766c:	b29b      	uxth	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	f040 80a1 	bne.w	80077b6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007684:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007688:	66bb      	str	r3, [r7, #104]	@ 0x68
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007692:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007694:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007698:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e6      	bne.n	8007674 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b8:	f023 0301 	bic.w	r3, r3, #1
 80076bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3308      	adds	r3, #8
 80076c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80076c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80076c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e5      	bne.n	80076a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a33      	ldr	r2, [pc, #204]	@ (80077c0 <UART_RxISR_8BIT+0x1b4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d01f      	beq.n	8007738 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d018      	beq.n	8007738 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770e:	e853 3f00 	ldrex	r3, [r3]
 8007712:	623b      	str	r3, [r7, #32]
   return(result);
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800771a:	663b      	str	r3, [r7, #96]	@ 0x60
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007724:	633b      	str	r3, [r7, #48]	@ 0x30
 8007726:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800772a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e6      	bne.n	8007706 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800773c:	2b01      	cmp	r3, #1
 800773e:	d12e      	bne.n	800779e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	60fb      	str	r3, [r7, #12]
   return(result);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0310 	bic.w	r3, r3, #16
 800775a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007764:	61fb      	str	r3, [r7, #28]
 8007766:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	69b9      	ldr	r1, [r7, #24]
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	617b      	str	r3, [r7, #20]
   return(result);
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e6      	bne.n	8007746 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b10      	cmp	r3, #16
 8007784:	d103      	bne.n	800778e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2210      	movs	r2, #16
 800778c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7fe ff4c 	bl	8006634 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800779c:	e00b      	b.n	80077b6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7fb f84c 	bl	800283c <HAL_UART_RxCpltCallback>
}
 80077a4:	e007      	b.n	80077b6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	699a      	ldr	r2, [r3, #24]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f042 0208 	orr.w	r2, r2, #8
 80077b4:	619a      	str	r2, [r3, #24]
}
 80077b6:	bf00      	nop
 80077b8:	3770      	adds	r7, #112	@ 0x70
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40008000 	.word	0x40008000

080077c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b09c      	sub	sp, #112	@ 0x70
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80077d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077dc:	2b22      	cmp	r3, #34	@ 0x22
 80077de:	f040 80be 	bne.w	800795e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80077f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80077f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80077fa:	4013      	ands	r3, r2
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007800:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007806:	1c9a      	adds	r2, r3, #2
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007812:	b29b      	uxth	r3, r3
 8007814:	3b01      	subs	r3, #1
 8007816:	b29a      	uxth	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	f040 80a1 	bne.w	800796e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800783a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800783c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007840:	667b      	str	r3, [r7, #100]	@ 0x64
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800784a:	657b      	str	r3, [r7, #84]	@ 0x54
 800784c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007850:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e6      	bne.n	800782c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	663b      	str	r3, [r7, #96]	@ 0x60
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3308      	adds	r3, #8
 800787c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800787e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007880:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007882:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007884:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800788c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e5      	bne.n	800785e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2220      	movs	r2, #32
 8007896:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a33      	ldr	r2, [pc, #204]	@ (8007978 <UART_RxISR_16BIT+0x1b4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d01f      	beq.n	80078f0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d018      	beq.n	80078f0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078de:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e6      	bne.n	80078be <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d12e      	bne.n	8007956 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	60bb      	str	r3, [r7, #8]
   return(result);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f023 0310 	bic.w	r3, r3, #16
 8007912:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800791c:	61bb      	str	r3, [r7, #24]
 800791e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	6979      	ldr	r1, [r7, #20]
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	e841 2300 	strex	r3, r2, [r1]
 8007928:	613b      	str	r3, [r7, #16]
   return(result);
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e6      	bne.n	80078fe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	f003 0310 	and.w	r3, r3, #16
 800793a:	2b10      	cmp	r3, #16
 800793c:	d103      	bne.n	8007946 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2210      	movs	r2, #16
 8007944:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7fe fe70 	bl	8006634 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007954:	e00b      	b.n	800796e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7fa ff70 	bl	800283c <HAL_UART_RxCpltCallback>
}
 800795c:	e007      	b.n	800796e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699a      	ldr	r2, [r3, #24]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 0208 	orr.w	r2, r2, #8
 800796c:	619a      	str	r2, [r3, #24]
}
 800796e:	bf00      	nop
 8007970:	3770      	adds	r7, #112	@ 0x70
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	40008000 	.word	0x40008000

0800797c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b0ac      	sub	sp, #176	@ 0xb0
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800798a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079b2:	2b22      	cmp	r3, #34	@ 0x22
 80079b4:	f040 8183 	bne.w	8007cbe <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80079be:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079c2:	e126      	b.n	8007c12 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ca:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079ce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80079d2:	b2d9      	uxtb	r1, r3
 80079d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079de:	400a      	ands	r2, r1
 80079e0:	b2d2      	uxtb	r2, r2
 80079e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079e8:	1c5a      	adds	r2, r3, #1
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d053      	beq.n	8007abe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d011      	beq.n	8007a46 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007a22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00b      	beq.n	8007a46 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2201      	movs	r2, #1
 8007a34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a3c:	f043 0201 	orr.w	r2, r3, #1
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d011      	beq.n	8007a76 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00b      	beq.n	8007a76 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2202      	movs	r2, #2
 8007a64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a6c:	f043 0204 	orr.w	r2, r3, #4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a7a:	f003 0304 	and.w	r3, r3, #4
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d011      	beq.n	8007aa6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2204      	movs	r2, #4
 8007a94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a9c:	f043 0202 	orr.w	r2, r3, #2
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d006      	beq.n	8007abe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7fe fdb5 	bl	8006620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f040 80a3 	bne.w	8007c12 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007aee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007af0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007af4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007afc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1e4      	bne.n	8007acc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b18:	f023 0301 	bic.w	r3, r3, #1
 8007b1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3308      	adds	r3, #8
 8007b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b2a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007b2c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007b30:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007b38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e1      	bne.n	8007b02 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a60      	ldr	r2, [pc, #384]	@ (8007cd8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d021      	beq.n	8007ba0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d01a      	beq.n	8007ba0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b8e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b94:	e841 2300 	strex	r3, r2, [r1]
 8007b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e4      	bne.n	8007b6a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d130      	bne.n	8007c0a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbe:	f023 0310 	bic.w	r3, r3, #16
 8007bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bd8:	e841 2300 	strex	r3, r2, [r1]
 8007bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e4      	bne.n	8007bae <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	2b10      	cmp	r3, #16
 8007bf0:	d103      	bne.n	8007bfa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2210      	movs	r2, #16
 8007bf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7fe fd16 	bl	8006634 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007c08:	e00e      	b.n	8007c28 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7fa fe16 	bl	800283c <HAL_UART_RxCpltCallback>
        break;
 8007c10:	e00a      	b.n	8007c28 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c12:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d006      	beq.n	8007c28 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f47f aece 	bne.w	80079c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c2e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c32:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d049      	beq.n	8007cce <UART_RxISR_8BIT_FIFOEN+0x352>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c40:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d242      	bcs.n	8007cce <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3308      	adds	r3, #8
 8007c68:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007c6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e3      	bne.n	8007c48 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a16      	ldr	r2, [pc, #88]	@ (8007cdc <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007c84:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f043 0320 	orr.w	r3, r3, #32
 8007c9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ca8:	61bb      	str	r3, [r7, #24]
 8007caa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6979      	ldr	r1, [r7, #20]
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e4      	bne.n	8007c86 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cbc:	e007      	b.n	8007cce <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	699a      	ldr	r2, [r3, #24]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f042 0208 	orr.w	r2, r2, #8
 8007ccc:	619a      	str	r2, [r3, #24]
}
 8007cce:	bf00      	nop
 8007cd0:	37b0      	adds	r7, #176	@ 0xb0
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	40008000 	.word	0x40008000
 8007cdc:	0800760d 	.word	0x0800760d

08007ce0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b0ae      	sub	sp, #184	@ 0xb8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007cee:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d16:	2b22      	cmp	r3, #34	@ 0x22
 8007d18:	f040 8187 	bne.w	800802a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d22:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d26:	e12a      	b.n	8007f7e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d2e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007d3a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007d3e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007d42:	4013      	ands	r3, r2
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d50:	1c9a      	adds	r2, r3, #2
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d053      	beq.n	8007e26 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d011      	beq.n	8007dae <UART_RxISR_16BIT_FIFOEN+0xce>
 8007d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00b      	beq.n	8007dae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da4:	f043 0201 	orr.w	r2, r3, #1
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d011      	beq.n	8007dde <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007dba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dd4:	f043 0204 	orr.w	r2, r3, #4
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007de2:	f003 0304 	and.w	r3, r3, #4
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d011      	beq.n	8007e0e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00b      	beq.n	8007e0e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2204      	movs	r2, #4
 8007dfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e04:	f043 0202 	orr.w	r2, r3, #2
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d006      	beq.n	8007e26 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7fe fc01 	bl	8006620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f040 80a5 	bne.w	8007f7e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	461a      	mov	r2, r3
 8007e52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e2      	bne.n	8007e34 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3308      	adds	r3, #8
 8007e74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e84:	f023 0301 	bic.w	r3, r3, #1
 8007e88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3308      	adds	r3, #8
 8007e92:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007e96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e1      	bne.n	8007e6e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a60      	ldr	r2, [pc, #384]	@ (8008044 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d021      	beq.n	8007f0c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d01a      	beq.n	8007f0c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ee6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007eea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ef8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007efa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007efe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f00:	e841 2300 	strex	r3, r2, [r1]
 8007f04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e4      	bne.n	8007ed6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d130      	bne.n	8007f76 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f2a:	f023 0310 	bic.w	r3, r3, #16
 8007f2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f44:	e841 2300 	strex	r3, r2, [r1]
 8007f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1e4      	bne.n	8007f1a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	f003 0310 	and.w	r3, r3, #16
 8007f5a:	2b10      	cmp	r3, #16
 8007f5c:	d103      	bne.n	8007f66 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2210      	movs	r2, #16
 8007f64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7fe fb60 	bl	8006634 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007f74:	e00e      	b.n	8007f94 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fa fc60 	bl	800283c <HAL_UART_RxCpltCallback>
        break;
 8007f7c:	e00a      	b.n	8007f94 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f7e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d006      	beq.n	8007f94 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007f86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f8a:	f003 0320 	and.w	r3, r3, #32
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f47f aeca 	bne.w	8007d28 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f9a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f9e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d049      	beq.n	800803a <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007fac:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d242      	bcs.n	800803a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbe:	e853 3f00 	ldrex	r3, [r3]
 8007fc2:	623b      	str	r3, [r7, #32]
   return(result);
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007fd8:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fe0:	e841 2300 	strex	r3, r2, [r1]
 8007fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1e3      	bne.n	8007fb4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a16      	ldr	r2, [pc, #88]	@ (8008048 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007ff0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	e853 3f00 	ldrex	r3, [r3]
 8007ffe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f043 0320 	orr.w	r3, r3, #32
 8008006:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008014:	61fb      	str	r3, [r7, #28]
 8008016:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	69b9      	ldr	r1, [r7, #24]
 800801a:	69fa      	ldr	r2, [r7, #28]
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	617b      	str	r3, [r7, #20]
   return(result);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e4      	bne.n	8007ff2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008028:	e007      	b.n	800803a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	699a      	ldr	r2, [r3, #24]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f042 0208 	orr.w	r2, r2, #8
 8008038:	619a      	str	r2, [r3, #24]
}
 800803a:	bf00      	nop
 800803c:	37b8      	adds	r7, #184	@ 0xb8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	40008000 	.word	0x40008000
 8008048:	080077c5 	.word	0x080077c5

0800804c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800805a:	2b01      	cmp	r3, #1
 800805c:	d101      	bne.n	8008062 <HAL_UARTEx_DisableFifoMode+0x16>
 800805e:	2302      	movs	r3, #2
 8008060:	e027      	b.n	80080b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2224      	movs	r2, #36	@ 0x24
 800806e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0201 	bic.w	r2, r2, #1
 8008088:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008090:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2220      	movs	r2, #32
 80080a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d101      	bne.n	80080d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080d2:	2302      	movs	r3, #2
 80080d4:	e02d      	b.n	8008132 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2224      	movs	r2, #36	@ 0x24
 80080e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 0201 	bic.w	r2, r2, #1
 80080fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	430a      	orrs	r2, r1
 8008110:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f850 	bl	80081b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800814a:	2b01      	cmp	r3, #1
 800814c:	d101      	bne.n	8008152 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800814e:	2302      	movs	r3, #2
 8008150:	e02d      	b.n	80081ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2224      	movs	r2, #36	@ 0x24
 800815e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 0201 	bic.w	r2, r2, #1
 8008178:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f812 	bl	80081b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d108      	bne.n	80081da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081d8:	e031      	b.n	800823e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081da:	2308      	movs	r3, #8
 80081dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081de:	2308      	movs	r3, #8
 80081e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	0e5b      	lsrs	r3, r3, #25
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	0f5b      	lsrs	r3, r3, #29
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	f003 0307 	and.w	r3, r3, #7
 8008200:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008202:	7bbb      	ldrb	r3, [r7, #14]
 8008204:	7b3a      	ldrb	r2, [r7, #12]
 8008206:	4911      	ldr	r1, [pc, #68]	@ (800824c <UARTEx_SetNbDataToProcess+0x94>)
 8008208:	5c8a      	ldrb	r2, [r1, r2]
 800820a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800820e:	7b3a      	ldrb	r2, [r7, #12]
 8008210:	490f      	ldr	r1, [pc, #60]	@ (8008250 <UARTEx_SetNbDataToProcess+0x98>)
 8008212:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008214:	fb93 f3f2 	sdiv	r3, r3, r2
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	7b7a      	ldrb	r2, [r7, #13]
 8008224:	4909      	ldr	r1, [pc, #36]	@ (800824c <UARTEx_SetNbDataToProcess+0x94>)
 8008226:	5c8a      	ldrb	r2, [r1, r2]
 8008228:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800822c:	7b7a      	ldrb	r2, [r7, #13]
 800822e:	4908      	ldr	r1, [pc, #32]	@ (8008250 <UARTEx_SetNbDataToProcess+0x98>)
 8008230:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008232:	fb93 f3f2 	sdiv	r3, r3, r2
 8008236:	b29a      	uxth	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800823e:	bf00      	nop
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	08008e30 	.word	0x08008e30
 8008250:	08008e38 	.word	0x08008e38

08008254 <siprintf>:
 8008254:	b40e      	push	{r1, r2, r3}
 8008256:	b500      	push	{lr}
 8008258:	b09c      	sub	sp, #112	@ 0x70
 800825a:	ab1d      	add	r3, sp, #116	@ 0x74
 800825c:	9002      	str	r0, [sp, #8]
 800825e:	9006      	str	r0, [sp, #24]
 8008260:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008264:	4809      	ldr	r0, [pc, #36]	@ (800828c <siprintf+0x38>)
 8008266:	9107      	str	r1, [sp, #28]
 8008268:	9104      	str	r1, [sp, #16]
 800826a:	4909      	ldr	r1, [pc, #36]	@ (8008290 <siprintf+0x3c>)
 800826c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008270:	9105      	str	r1, [sp, #20]
 8008272:	6800      	ldr	r0, [r0, #0]
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	a902      	add	r1, sp, #8
 8008278:	f000 f9a4 	bl	80085c4 <_svfiprintf_r>
 800827c:	9b02      	ldr	r3, [sp, #8]
 800827e:	2200      	movs	r2, #0
 8008280:	701a      	strb	r2, [r3, #0]
 8008282:	b01c      	add	sp, #112	@ 0x70
 8008284:	f85d eb04 	ldr.w	lr, [sp], #4
 8008288:	b003      	add	sp, #12
 800828a:	4770      	bx	lr
 800828c:	20000014 	.word	0x20000014
 8008290:	ffff0208 	.word	0xffff0208

08008294 <memset>:
 8008294:	4402      	add	r2, r0
 8008296:	4603      	mov	r3, r0
 8008298:	4293      	cmp	r3, r2
 800829a:	d100      	bne.n	800829e <memset+0xa>
 800829c:	4770      	bx	lr
 800829e:	f803 1b01 	strb.w	r1, [r3], #1
 80082a2:	e7f9      	b.n	8008298 <memset+0x4>

080082a4 <strcat>:
 80082a4:	b510      	push	{r4, lr}
 80082a6:	4602      	mov	r2, r0
 80082a8:	7814      	ldrb	r4, [r2, #0]
 80082aa:	4613      	mov	r3, r2
 80082ac:	3201      	adds	r2, #1
 80082ae:	2c00      	cmp	r4, #0
 80082b0:	d1fa      	bne.n	80082a8 <strcat+0x4>
 80082b2:	3b01      	subs	r3, #1
 80082b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082bc:	2a00      	cmp	r2, #0
 80082be:	d1f9      	bne.n	80082b4 <strcat+0x10>
 80082c0:	bd10      	pop	{r4, pc}
	...

080082c4 <__errno>:
 80082c4:	4b01      	ldr	r3, [pc, #4]	@ (80082cc <__errno+0x8>)
 80082c6:	6818      	ldr	r0, [r3, #0]
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	20000014 	.word	0x20000014

080082d0 <__libc_init_array>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	4d0d      	ldr	r5, [pc, #52]	@ (8008308 <__libc_init_array+0x38>)
 80082d4:	4c0d      	ldr	r4, [pc, #52]	@ (800830c <__libc_init_array+0x3c>)
 80082d6:	1b64      	subs	r4, r4, r5
 80082d8:	10a4      	asrs	r4, r4, #2
 80082da:	2600      	movs	r6, #0
 80082dc:	42a6      	cmp	r6, r4
 80082de:	d109      	bne.n	80082f4 <__libc_init_array+0x24>
 80082e0:	4d0b      	ldr	r5, [pc, #44]	@ (8008310 <__libc_init_array+0x40>)
 80082e2:	4c0c      	ldr	r4, [pc, #48]	@ (8008314 <__libc_init_array+0x44>)
 80082e4:	f000 fc66 	bl	8008bb4 <_init>
 80082e8:	1b64      	subs	r4, r4, r5
 80082ea:	10a4      	asrs	r4, r4, #2
 80082ec:	2600      	movs	r6, #0
 80082ee:	42a6      	cmp	r6, r4
 80082f0:	d105      	bne.n	80082fe <__libc_init_array+0x2e>
 80082f2:	bd70      	pop	{r4, r5, r6, pc}
 80082f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f8:	4798      	blx	r3
 80082fa:	3601      	adds	r6, #1
 80082fc:	e7ee      	b.n	80082dc <__libc_init_array+0xc>
 80082fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008302:	4798      	blx	r3
 8008304:	3601      	adds	r6, #1
 8008306:	e7f2      	b.n	80082ee <__libc_init_array+0x1e>
 8008308:	08008e7c 	.word	0x08008e7c
 800830c:	08008e7c 	.word	0x08008e7c
 8008310:	08008e7c 	.word	0x08008e7c
 8008314:	08008e80 	.word	0x08008e80

08008318 <__retarget_lock_acquire_recursive>:
 8008318:	4770      	bx	lr

0800831a <__retarget_lock_release_recursive>:
 800831a:	4770      	bx	lr

0800831c <_free_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4605      	mov	r5, r0
 8008320:	2900      	cmp	r1, #0
 8008322:	d041      	beq.n	80083a8 <_free_r+0x8c>
 8008324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008328:	1f0c      	subs	r4, r1, #4
 800832a:	2b00      	cmp	r3, #0
 800832c:	bfb8      	it	lt
 800832e:	18e4      	addlt	r4, r4, r3
 8008330:	f000 f8e0 	bl	80084f4 <__malloc_lock>
 8008334:	4a1d      	ldr	r2, [pc, #116]	@ (80083ac <_free_r+0x90>)
 8008336:	6813      	ldr	r3, [r2, #0]
 8008338:	b933      	cbnz	r3, 8008348 <_free_r+0x2c>
 800833a:	6063      	str	r3, [r4, #4]
 800833c:	6014      	str	r4, [r2, #0]
 800833e:	4628      	mov	r0, r5
 8008340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008344:	f000 b8dc 	b.w	8008500 <__malloc_unlock>
 8008348:	42a3      	cmp	r3, r4
 800834a:	d908      	bls.n	800835e <_free_r+0x42>
 800834c:	6820      	ldr	r0, [r4, #0]
 800834e:	1821      	adds	r1, r4, r0
 8008350:	428b      	cmp	r3, r1
 8008352:	bf01      	itttt	eq
 8008354:	6819      	ldreq	r1, [r3, #0]
 8008356:	685b      	ldreq	r3, [r3, #4]
 8008358:	1809      	addeq	r1, r1, r0
 800835a:	6021      	streq	r1, [r4, #0]
 800835c:	e7ed      	b.n	800833a <_free_r+0x1e>
 800835e:	461a      	mov	r2, r3
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	b10b      	cbz	r3, 8008368 <_free_r+0x4c>
 8008364:	42a3      	cmp	r3, r4
 8008366:	d9fa      	bls.n	800835e <_free_r+0x42>
 8008368:	6811      	ldr	r1, [r2, #0]
 800836a:	1850      	adds	r0, r2, r1
 800836c:	42a0      	cmp	r0, r4
 800836e:	d10b      	bne.n	8008388 <_free_r+0x6c>
 8008370:	6820      	ldr	r0, [r4, #0]
 8008372:	4401      	add	r1, r0
 8008374:	1850      	adds	r0, r2, r1
 8008376:	4283      	cmp	r3, r0
 8008378:	6011      	str	r1, [r2, #0]
 800837a:	d1e0      	bne.n	800833e <_free_r+0x22>
 800837c:	6818      	ldr	r0, [r3, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	6053      	str	r3, [r2, #4]
 8008382:	4408      	add	r0, r1
 8008384:	6010      	str	r0, [r2, #0]
 8008386:	e7da      	b.n	800833e <_free_r+0x22>
 8008388:	d902      	bls.n	8008390 <_free_r+0x74>
 800838a:	230c      	movs	r3, #12
 800838c:	602b      	str	r3, [r5, #0]
 800838e:	e7d6      	b.n	800833e <_free_r+0x22>
 8008390:	6820      	ldr	r0, [r4, #0]
 8008392:	1821      	adds	r1, r4, r0
 8008394:	428b      	cmp	r3, r1
 8008396:	bf04      	itt	eq
 8008398:	6819      	ldreq	r1, [r3, #0]
 800839a:	685b      	ldreq	r3, [r3, #4]
 800839c:	6063      	str	r3, [r4, #4]
 800839e:	bf04      	itt	eq
 80083a0:	1809      	addeq	r1, r1, r0
 80083a2:	6021      	streq	r1, [r4, #0]
 80083a4:	6054      	str	r4, [r2, #4]
 80083a6:	e7ca      	b.n	800833e <_free_r+0x22>
 80083a8:	bd38      	pop	{r3, r4, r5, pc}
 80083aa:	bf00      	nop
 80083ac:	200013d8 	.word	0x200013d8

080083b0 <sbrk_aligned>:
 80083b0:	b570      	push	{r4, r5, r6, lr}
 80083b2:	4e0f      	ldr	r6, [pc, #60]	@ (80083f0 <sbrk_aligned+0x40>)
 80083b4:	460c      	mov	r4, r1
 80083b6:	6831      	ldr	r1, [r6, #0]
 80083b8:	4605      	mov	r5, r0
 80083ba:	b911      	cbnz	r1, 80083c2 <sbrk_aligned+0x12>
 80083bc:	f000 fba6 	bl	8008b0c <_sbrk_r>
 80083c0:	6030      	str	r0, [r6, #0]
 80083c2:	4621      	mov	r1, r4
 80083c4:	4628      	mov	r0, r5
 80083c6:	f000 fba1 	bl	8008b0c <_sbrk_r>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	d103      	bne.n	80083d6 <sbrk_aligned+0x26>
 80083ce:	f04f 34ff 	mov.w	r4, #4294967295
 80083d2:	4620      	mov	r0, r4
 80083d4:	bd70      	pop	{r4, r5, r6, pc}
 80083d6:	1cc4      	adds	r4, r0, #3
 80083d8:	f024 0403 	bic.w	r4, r4, #3
 80083dc:	42a0      	cmp	r0, r4
 80083de:	d0f8      	beq.n	80083d2 <sbrk_aligned+0x22>
 80083e0:	1a21      	subs	r1, r4, r0
 80083e2:	4628      	mov	r0, r5
 80083e4:	f000 fb92 	bl	8008b0c <_sbrk_r>
 80083e8:	3001      	adds	r0, #1
 80083ea:	d1f2      	bne.n	80083d2 <sbrk_aligned+0x22>
 80083ec:	e7ef      	b.n	80083ce <sbrk_aligned+0x1e>
 80083ee:	bf00      	nop
 80083f0:	200013d4 	.word	0x200013d4

080083f4 <_malloc_r>:
 80083f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f8:	1ccd      	adds	r5, r1, #3
 80083fa:	f025 0503 	bic.w	r5, r5, #3
 80083fe:	3508      	adds	r5, #8
 8008400:	2d0c      	cmp	r5, #12
 8008402:	bf38      	it	cc
 8008404:	250c      	movcc	r5, #12
 8008406:	2d00      	cmp	r5, #0
 8008408:	4606      	mov	r6, r0
 800840a:	db01      	blt.n	8008410 <_malloc_r+0x1c>
 800840c:	42a9      	cmp	r1, r5
 800840e:	d904      	bls.n	800841a <_malloc_r+0x26>
 8008410:	230c      	movs	r3, #12
 8008412:	6033      	str	r3, [r6, #0]
 8008414:	2000      	movs	r0, #0
 8008416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800841a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084f0 <_malloc_r+0xfc>
 800841e:	f000 f869 	bl	80084f4 <__malloc_lock>
 8008422:	f8d8 3000 	ldr.w	r3, [r8]
 8008426:	461c      	mov	r4, r3
 8008428:	bb44      	cbnz	r4, 800847c <_malloc_r+0x88>
 800842a:	4629      	mov	r1, r5
 800842c:	4630      	mov	r0, r6
 800842e:	f7ff ffbf 	bl	80083b0 <sbrk_aligned>
 8008432:	1c43      	adds	r3, r0, #1
 8008434:	4604      	mov	r4, r0
 8008436:	d158      	bne.n	80084ea <_malloc_r+0xf6>
 8008438:	f8d8 4000 	ldr.w	r4, [r8]
 800843c:	4627      	mov	r7, r4
 800843e:	2f00      	cmp	r7, #0
 8008440:	d143      	bne.n	80084ca <_malloc_r+0xd6>
 8008442:	2c00      	cmp	r4, #0
 8008444:	d04b      	beq.n	80084de <_malloc_r+0xea>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	4639      	mov	r1, r7
 800844a:	4630      	mov	r0, r6
 800844c:	eb04 0903 	add.w	r9, r4, r3
 8008450:	f000 fb5c 	bl	8008b0c <_sbrk_r>
 8008454:	4581      	cmp	r9, r0
 8008456:	d142      	bne.n	80084de <_malloc_r+0xea>
 8008458:	6821      	ldr	r1, [r4, #0]
 800845a:	1a6d      	subs	r5, r5, r1
 800845c:	4629      	mov	r1, r5
 800845e:	4630      	mov	r0, r6
 8008460:	f7ff ffa6 	bl	80083b0 <sbrk_aligned>
 8008464:	3001      	adds	r0, #1
 8008466:	d03a      	beq.n	80084de <_malloc_r+0xea>
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	442b      	add	r3, r5
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	f8d8 3000 	ldr.w	r3, [r8]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	bb62      	cbnz	r2, 80084d0 <_malloc_r+0xdc>
 8008476:	f8c8 7000 	str.w	r7, [r8]
 800847a:	e00f      	b.n	800849c <_malloc_r+0xa8>
 800847c:	6822      	ldr	r2, [r4, #0]
 800847e:	1b52      	subs	r2, r2, r5
 8008480:	d420      	bmi.n	80084c4 <_malloc_r+0xd0>
 8008482:	2a0b      	cmp	r2, #11
 8008484:	d917      	bls.n	80084b6 <_malloc_r+0xc2>
 8008486:	1961      	adds	r1, r4, r5
 8008488:	42a3      	cmp	r3, r4
 800848a:	6025      	str	r5, [r4, #0]
 800848c:	bf18      	it	ne
 800848e:	6059      	strne	r1, [r3, #4]
 8008490:	6863      	ldr	r3, [r4, #4]
 8008492:	bf08      	it	eq
 8008494:	f8c8 1000 	streq.w	r1, [r8]
 8008498:	5162      	str	r2, [r4, r5]
 800849a:	604b      	str	r3, [r1, #4]
 800849c:	4630      	mov	r0, r6
 800849e:	f000 f82f 	bl	8008500 <__malloc_unlock>
 80084a2:	f104 000b 	add.w	r0, r4, #11
 80084a6:	1d23      	adds	r3, r4, #4
 80084a8:	f020 0007 	bic.w	r0, r0, #7
 80084ac:	1ac2      	subs	r2, r0, r3
 80084ae:	bf1c      	itt	ne
 80084b0:	1a1b      	subne	r3, r3, r0
 80084b2:	50a3      	strne	r3, [r4, r2]
 80084b4:	e7af      	b.n	8008416 <_malloc_r+0x22>
 80084b6:	6862      	ldr	r2, [r4, #4]
 80084b8:	42a3      	cmp	r3, r4
 80084ba:	bf0c      	ite	eq
 80084bc:	f8c8 2000 	streq.w	r2, [r8]
 80084c0:	605a      	strne	r2, [r3, #4]
 80084c2:	e7eb      	b.n	800849c <_malloc_r+0xa8>
 80084c4:	4623      	mov	r3, r4
 80084c6:	6864      	ldr	r4, [r4, #4]
 80084c8:	e7ae      	b.n	8008428 <_malloc_r+0x34>
 80084ca:	463c      	mov	r4, r7
 80084cc:	687f      	ldr	r7, [r7, #4]
 80084ce:	e7b6      	b.n	800843e <_malloc_r+0x4a>
 80084d0:	461a      	mov	r2, r3
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	d1fb      	bne.n	80084d0 <_malloc_r+0xdc>
 80084d8:	2300      	movs	r3, #0
 80084da:	6053      	str	r3, [r2, #4]
 80084dc:	e7de      	b.n	800849c <_malloc_r+0xa8>
 80084de:	230c      	movs	r3, #12
 80084e0:	6033      	str	r3, [r6, #0]
 80084e2:	4630      	mov	r0, r6
 80084e4:	f000 f80c 	bl	8008500 <__malloc_unlock>
 80084e8:	e794      	b.n	8008414 <_malloc_r+0x20>
 80084ea:	6005      	str	r5, [r0, #0]
 80084ec:	e7d6      	b.n	800849c <_malloc_r+0xa8>
 80084ee:	bf00      	nop
 80084f0:	200013d8 	.word	0x200013d8

080084f4 <__malloc_lock>:
 80084f4:	4801      	ldr	r0, [pc, #4]	@ (80084fc <__malloc_lock+0x8>)
 80084f6:	f7ff bf0f 	b.w	8008318 <__retarget_lock_acquire_recursive>
 80084fa:	bf00      	nop
 80084fc:	200013d0 	.word	0x200013d0

08008500 <__malloc_unlock>:
 8008500:	4801      	ldr	r0, [pc, #4]	@ (8008508 <__malloc_unlock+0x8>)
 8008502:	f7ff bf0a 	b.w	800831a <__retarget_lock_release_recursive>
 8008506:	bf00      	nop
 8008508:	200013d0 	.word	0x200013d0

0800850c <__ssputs_r>:
 800850c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008510:	688e      	ldr	r6, [r1, #8]
 8008512:	461f      	mov	r7, r3
 8008514:	42be      	cmp	r6, r7
 8008516:	680b      	ldr	r3, [r1, #0]
 8008518:	4682      	mov	sl, r0
 800851a:	460c      	mov	r4, r1
 800851c:	4690      	mov	r8, r2
 800851e:	d82d      	bhi.n	800857c <__ssputs_r+0x70>
 8008520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008524:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008528:	d026      	beq.n	8008578 <__ssputs_r+0x6c>
 800852a:	6965      	ldr	r5, [r4, #20]
 800852c:	6909      	ldr	r1, [r1, #16]
 800852e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008532:	eba3 0901 	sub.w	r9, r3, r1
 8008536:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800853a:	1c7b      	adds	r3, r7, #1
 800853c:	444b      	add	r3, r9
 800853e:	106d      	asrs	r5, r5, #1
 8008540:	429d      	cmp	r5, r3
 8008542:	bf38      	it	cc
 8008544:	461d      	movcc	r5, r3
 8008546:	0553      	lsls	r3, r2, #21
 8008548:	d527      	bpl.n	800859a <__ssputs_r+0x8e>
 800854a:	4629      	mov	r1, r5
 800854c:	f7ff ff52 	bl	80083f4 <_malloc_r>
 8008550:	4606      	mov	r6, r0
 8008552:	b360      	cbz	r0, 80085ae <__ssputs_r+0xa2>
 8008554:	6921      	ldr	r1, [r4, #16]
 8008556:	464a      	mov	r2, r9
 8008558:	f000 fae8 	bl	8008b2c <memcpy>
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008566:	81a3      	strh	r3, [r4, #12]
 8008568:	6126      	str	r6, [r4, #16]
 800856a:	6165      	str	r5, [r4, #20]
 800856c:	444e      	add	r6, r9
 800856e:	eba5 0509 	sub.w	r5, r5, r9
 8008572:	6026      	str	r6, [r4, #0]
 8008574:	60a5      	str	r5, [r4, #8]
 8008576:	463e      	mov	r6, r7
 8008578:	42be      	cmp	r6, r7
 800857a:	d900      	bls.n	800857e <__ssputs_r+0x72>
 800857c:	463e      	mov	r6, r7
 800857e:	6820      	ldr	r0, [r4, #0]
 8008580:	4632      	mov	r2, r6
 8008582:	4641      	mov	r1, r8
 8008584:	f000 faa8 	bl	8008ad8 <memmove>
 8008588:	68a3      	ldr	r3, [r4, #8]
 800858a:	1b9b      	subs	r3, r3, r6
 800858c:	60a3      	str	r3, [r4, #8]
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	4433      	add	r3, r6
 8008592:	6023      	str	r3, [r4, #0]
 8008594:	2000      	movs	r0, #0
 8008596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859a:	462a      	mov	r2, r5
 800859c:	f000 fad4 	bl	8008b48 <_realloc_r>
 80085a0:	4606      	mov	r6, r0
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d1e0      	bne.n	8008568 <__ssputs_r+0x5c>
 80085a6:	6921      	ldr	r1, [r4, #16]
 80085a8:	4650      	mov	r0, sl
 80085aa:	f7ff feb7 	bl	800831c <_free_r>
 80085ae:	230c      	movs	r3, #12
 80085b0:	f8ca 3000 	str.w	r3, [sl]
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295
 80085c0:	e7e9      	b.n	8008596 <__ssputs_r+0x8a>
	...

080085c4 <_svfiprintf_r>:
 80085c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c8:	4698      	mov	r8, r3
 80085ca:	898b      	ldrh	r3, [r1, #12]
 80085cc:	061b      	lsls	r3, r3, #24
 80085ce:	b09d      	sub	sp, #116	@ 0x74
 80085d0:	4607      	mov	r7, r0
 80085d2:	460d      	mov	r5, r1
 80085d4:	4614      	mov	r4, r2
 80085d6:	d510      	bpl.n	80085fa <_svfiprintf_r+0x36>
 80085d8:	690b      	ldr	r3, [r1, #16]
 80085da:	b973      	cbnz	r3, 80085fa <_svfiprintf_r+0x36>
 80085dc:	2140      	movs	r1, #64	@ 0x40
 80085de:	f7ff ff09 	bl	80083f4 <_malloc_r>
 80085e2:	6028      	str	r0, [r5, #0]
 80085e4:	6128      	str	r0, [r5, #16]
 80085e6:	b930      	cbnz	r0, 80085f6 <_svfiprintf_r+0x32>
 80085e8:	230c      	movs	r3, #12
 80085ea:	603b      	str	r3, [r7, #0]
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295
 80085f0:	b01d      	add	sp, #116	@ 0x74
 80085f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f6:	2340      	movs	r3, #64	@ 0x40
 80085f8:	616b      	str	r3, [r5, #20]
 80085fa:	2300      	movs	r3, #0
 80085fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80085fe:	2320      	movs	r3, #32
 8008600:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008604:	f8cd 800c 	str.w	r8, [sp, #12]
 8008608:	2330      	movs	r3, #48	@ 0x30
 800860a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80087a8 <_svfiprintf_r+0x1e4>
 800860e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008612:	f04f 0901 	mov.w	r9, #1
 8008616:	4623      	mov	r3, r4
 8008618:	469a      	mov	sl, r3
 800861a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800861e:	b10a      	cbz	r2, 8008624 <_svfiprintf_r+0x60>
 8008620:	2a25      	cmp	r2, #37	@ 0x25
 8008622:	d1f9      	bne.n	8008618 <_svfiprintf_r+0x54>
 8008624:	ebba 0b04 	subs.w	fp, sl, r4
 8008628:	d00b      	beq.n	8008642 <_svfiprintf_r+0x7e>
 800862a:	465b      	mov	r3, fp
 800862c:	4622      	mov	r2, r4
 800862e:	4629      	mov	r1, r5
 8008630:	4638      	mov	r0, r7
 8008632:	f7ff ff6b 	bl	800850c <__ssputs_r>
 8008636:	3001      	adds	r0, #1
 8008638:	f000 80a7 	beq.w	800878a <_svfiprintf_r+0x1c6>
 800863c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800863e:	445a      	add	r2, fp
 8008640:	9209      	str	r2, [sp, #36]	@ 0x24
 8008642:	f89a 3000 	ldrb.w	r3, [sl]
 8008646:	2b00      	cmp	r3, #0
 8008648:	f000 809f 	beq.w	800878a <_svfiprintf_r+0x1c6>
 800864c:	2300      	movs	r3, #0
 800864e:	f04f 32ff 	mov.w	r2, #4294967295
 8008652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008656:	f10a 0a01 	add.w	sl, sl, #1
 800865a:	9304      	str	r3, [sp, #16]
 800865c:	9307      	str	r3, [sp, #28]
 800865e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008662:	931a      	str	r3, [sp, #104]	@ 0x68
 8008664:	4654      	mov	r4, sl
 8008666:	2205      	movs	r2, #5
 8008668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800866c:	484e      	ldr	r0, [pc, #312]	@ (80087a8 <_svfiprintf_r+0x1e4>)
 800866e:	f7f7 fdef 	bl	8000250 <memchr>
 8008672:	9a04      	ldr	r2, [sp, #16]
 8008674:	b9d8      	cbnz	r0, 80086ae <_svfiprintf_r+0xea>
 8008676:	06d0      	lsls	r0, r2, #27
 8008678:	bf44      	itt	mi
 800867a:	2320      	movmi	r3, #32
 800867c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008680:	0711      	lsls	r1, r2, #28
 8008682:	bf44      	itt	mi
 8008684:	232b      	movmi	r3, #43	@ 0x2b
 8008686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800868a:	f89a 3000 	ldrb.w	r3, [sl]
 800868e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008690:	d015      	beq.n	80086be <_svfiprintf_r+0xfa>
 8008692:	9a07      	ldr	r2, [sp, #28]
 8008694:	4654      	mov	r4, sl
 8008696:	2000      	movs	r0, #0
 8008698:	f04f 0c0a 	mov.w	ip, #10
 800869c:	4621      	mov	r1, r4
 800869e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086a2:	3b30      	subs	r3, #48	@ 0x30
 80086a4:	2b09      	cmp	r3, #9
 80086a6:	d94b      	bls.n	8008740 <_svfiprintf_r+0x17c>
 80086a8:	b1b0      	cbz	r0, 80086d8 <_svfiprintf_r+0x114>
 80086aa:	9207      	str	r2, [sp, #28]
 80086ac:	e014      	b.n	80086d8 <_svfiprintf_r+0x114>
 80086ae:	eba0 0308 	sub.w	r3, r0, r8
 80086b2:	fa09 f303 	lsl.w	r3, r9, r3
 80086b6:	4313      	orrs	r3, r2
 80086b8:	9304      	str	r3, [sp, #16]
 80086ba:	46a2      	mov	sl, r4
 80086bc:	e7d2      	b.n	8008664 <_svfiprintf_r+0xa0>
 80086be:	9b03      	ldr	r3, [sp, #12]
 80086c0:	1d19      	adds	r1, r3, #4
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	9103      	str	r1, [sp, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	bfbb      	ittet	lt
 80086ca:	425b      	neglt	r3, r3
 80086cc:	f042 0202 	orrlt.w	r2, r2, #2
 80086d0:	9307      	strge	r3, [sp, #28]
 80086d2:	9307      	strlt	r3, [sp, #28]
 80086d4:	bfb8      	it	lt
 80086d6:	9204      	strlt	r2, [sp, #16]
 80086d8:	7823      	ldrb	r3, [r4, #0]
 80086da:	2b2e      	cmp	r3, #46	@ 0x2e
 80086dc:	d10a      	bne.n	80086f4 <_svfiprintf_r+0x130>
 80086de:	7863      	ldrb	r3, [r4, #1]
 80086e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80086e2:	d132      	bne.n	800874a <_svfiprintf_r+0x186>
 80086e4:	9b03      	ldr	r3, [sp, #12]
 80086e6:	1d1a      	adds	r2, r3, #4
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	9203      	str	r2, [sp, #12]
 80086ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086f0:	3402      	adds	r4, #2
 80086f2:	9305      	str	r3, [sp, #20]
 80086f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80087b8 <_svfiprintf_r+0x1f4>
 80086f8:	7821      	ldrb	r1, [r4, #0]
 80086fa:	2203      	movs	r2, #3
 80086fc:	4650      	mov	r0, sl
 80086fe:	f7f7 fda7 	bl	8000250 <memchr>
 8008702:	b138      	cbz	r0, 8008714 <_svfiprintf_r+0x150>
 8008704:	9b04      	ldr	r3, [sp, #16]
 8008706:	eba0 000a 	sub.w	r0, r0, sl
 800870a:	2240      	movs	r2, #64	@ 0x40
 800870c:	4082      	lsls	r2, r0
 800870e:	4313      	orrs	r3, r2
 8008710:	3401      	adds	r4, #1
 8008712:	9304      	str	r3, [sp, #16]
 8008714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008718:	4824      	ldr	r0, [pc, #144]	@ (80087ac <_svfiprintf_r+0x1e8>)
 800871a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800871e:	2206      	movs	r2, #6
 8008720:	f7f7 fd96 	bl	8000250 <memchr>
 8008724:	2800      	cmp	r0, #0
 8008726:	d036      	beq.n	8008796 <_svfiprintf_r+0x1d2>
 8008728:	4b21      	ldr	r3, [pc, #132]	@ (80087b0 <_svfiprintf_r+0x1ec>)
 800872a:	bb1b      	cbnz	r3, 8008774 <_svfiprintf_r+0x1b0>
 800872c:	9b03      	ldr	r3, [sp, #12]
 800872e:	3307      	adds	r3, #7
 8008730:	f023 0307 	bic.w	r3, r3, #7
 8008734:	3308      	adds	r3, #8
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800873a:	4433      	add	r3, r6
 800873c:	9309      	str	r3, [sp, #36]	@ 0x24
 800873e:	e76a      	b.n	8008616 <_svfiprintf_r+0x52>
 8008740:	fb0c 3202 	mla	r2, ip, r2, r3
 8008744:	460c      	mov	r4, r1
 8008746:	2001      	movs	r0, #1
 8008748:	e7a8      	b.n	800869c <_svfiprintf_r+0xd8>
 800874a:	2300      	movs	r3, #0
 800874c:	3401      	adds	r4, #1
 800874e:	9305      	str	r3, [sp, #20]
 8008750:	4619      	mov	r1, r3
 8008752:	f04f 0c0a 	mov.w	ip, #10
 8008756:	4620      	mov	r0, r4
 8008758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800875c:	3a30      	subs	r2, #48	@ 0x30
 800875e:	2a09      	cmp	r2, #9
 8008760:	d903      	bls.n	800876a <_svfiprintf_r+0x1a6>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0c6      	beq.n	80086f4 <_svfiprintf_r+0x130>
 8008766:	9105      	str	r1, [sp, #20]
 8008768:	e7c4      	b.n	80086f4 <_svfiprintf_r+0x130>
 800876a:	fb0c 2101 	mla	r1, ip, r1, r2
 800876e:	4604      	mov	r4, r0
 8008770:	2301      	movs	r3, #1
 8008772:	e7f0      	b.n	8008756 <_svfiprintf_r+0x192>
 8008774:	ab03      	add	r3, sp, #12
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	462a      	mov	r2, r5
 800877a:	4b0e      	ldr	r3, [pc, #56]	@ (80087b4 <_svfiprintf_r+0x1f0>)
 800877c:	a904      	add	r1, sp, #16
 800877e:	4638      	mov	r0, r7
 8008780:	f3af 8000 	nop.w
 8008784:	1c42      	adds	r2, r0, #1
 8008786:	4606      	mov	r6, r0
 8008788:	d1d6      	bne.n	8008738 <_svfiprintf_r+0x174>
 800878a:	89ab      	ldrh	r3, [r5, #12]
 800878c:	065b      	lsls	r3, r3, #25
 800878e:	f53f af2d 	bmi.w	80085ec <_svfiprintf_r+0x28>
 8008792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008794:	e72c      	b.n	80085f0 <_svfiprintf_r+0x2c>
 8008796:	ab03      	add	r3, sp, #12
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	462a      	mov	r2, r5
 800879c:	4b05      	ldr	r3, [pc, #20]	@ (80087b4 <_svfiprintf_r+0x1f0>)
 800879e:	a904      	add	r1, sp, #16
 80087a0:	4638      	mov	r0, r7
 80087a2:	f000 f879 	bl	8008898 <_printf_i>
 80087a6:	e7ed      	b.n	8008784 <_svfiprintf_r+0x1c0>
 80087a8:	08008e40 	.word	0x08008e40
 80087ac:	08008e4a 	.word	0x08008e4a
 80087b0:	00000000 	.word	0x00000000
 80087b4:	0800850d 	.word	0x0800850d
 80087b8:	08008e46 	.word	0x08008e46

080087bc <_printf_common>:
 80087bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c0:	4616      	mov	r6, r2
 80087c2:	4698      	mov	r8, r3
 80087c4:	688a      	ldr	r2, [r1, #8]
 80087c6:	690b      	ldr	r3, [r1, #16]
 80087c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087cc:	4293      	cmp	r3, r2
 80087ce:	bfb8      	it	lt
 80087d0:	4613      	movlt	r3, r2
 80087d2:	6033      	str	r3, [r6, #0]
 80087d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087d8:	4607      	mov	r7, r0
 80087da:	460c      	mov	r4, r1
 80087dc:	b10a      	cbz	r2, 80087e2 <_printf_common+0x26>
 80087de:	3301      	adds	r3, #1
 80087e0:	6033      	str	r3, [r6, #0]
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	0699      	lsls	r1, r3, #26
 80087e6:	bf42      	ittt	mi
 80087e8:	6833      	ldrmi	r3, [r6, #0]
 80087ea:	3302      	addmi	r3, #2
 80087ec:	6033      	strmi	r3, [r6, #0]
 80087ee:	6825      	ldr	r5, [r4, #0]
 80087f0:	f015 0506 	ands.w	r5, r5, #6
 80087f4:	d106      	bne.n	8008804 <_printf_common+0x48>
 80087f6:	f104 0a19 	add.w	sl, r4, #25
 80087fa:	68e3      	ldr	r3, [r4, #12]
 80087fc:	6832      	ldr	r2, [r6, #0]
 80087fe:	1a9b      	subs	r3, r3, r2
 8008800:	42ab      	cmp	r3, r5
 8008802:	dc26      	bgt.n	8008852 <_printf_common+0x96>
 8008804:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008808:	6822      	ldr	r2, [r4, #0]
 800880a:	3b00      	subs	r3, #0
 800880c:	bf18      	it	ne
 800880e:	2301      	movne	r3, #1
 8008810:	0692      	lsls	r2, r2, #26
 8008812:	d42b      	bmi.n	800886c <_printf_common+0xb0>
 8008814:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008818:	4641      	mov	r1, r8
 800881a:	4638      	mov	r0, r7
 800881c:	47c8      	blx	r9
 800881e:	3001      	adds	r0, #1
 8008820:	d01e      	beq.n	8008860 <_printf_common+0xa4>
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	6922      	ldr	r2, [r4, #16]
 8008826:	f003 0306 	and.w	r3, r3, #6
 800882a:	2b04      	cmp	r3, #4
 800882c:	bf02      	ittt	eq
 800882e:	68e5      	ldreq	r5, [r4, #12]
 8008830:	6833      	ldreq	r3, [r6, #0]
 8008832:	1aed      	subeq	r5, r5, r3
 8008834:	68a3      	ldr	r3, [r4, #8]
 8008836:	bf0c      	ite	eq
 8008838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800883c:	2500      	movne	r5, #0
 800883e:	4293      	cmp	r3, r2
 8008840:	bfc4      	itt	gt
 8008842:	1a9b      	subgt	r3, r3, r2
 8008844:	18ed      	addgt	r5, r5, r3
 8008846:	2600      	movs	r6, #0
 8008848:	341a      	adds	r4, #26
 800884a:	42b5      	cmp	r5, r6
 800884c:	d11a      	bne.n	8008884 <_printf_common+0xc8>
 800884e:	2000      	movs	r0, #0
 8008850:	e008      	b.n	8008864 <_printf_common+0xa8>
 8008852:	2301      	movs	r3, #1
 8008854:	4652      	mov	r2, sl
 8008856:	4641      	mov	r1, r8
 8008858:	4638      	mov	r0, r7
 800885a:	47c8      	blx	r9
 800885c:	3001      	adds	r0, #1
 800885e:	d103      	bne.n	8008868 <_printf_common+0xac>
 8008860:	f04f 30ff 	mov.w	r0, #4294967295
 8008864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008868:	3501      	adds	r5, #1
 800886a:	e7c6      	b.n	80087fa <_printf_common+0x3e>
 800886c:	18e1      	adds	r1, r4, r3
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	2030      	movs	r0, #48	@ 0x30
 8008872:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008876:	4422      	add	r2, r4
 8008878:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800887c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008880:	3302      	adds	r3, #2
 8008882:	e7c7      	b.n	8008814 <_printf_common+0x58>
 8008884:	2301      	movs	r3, #1
 8008886:	4622      	mov	r2, r4
 8008888:	4641      	mov	r1, r8
 800888a:	4638      	mov	r0, r7
 800888c:	47c8      	blx	r9
 800888e:	3001      	adds	r0, #1
 8008890:	d0e6      	beq.n	8008860 <_printf_common+0xa4>
 8008892:	3601      	adds	r6, #1
 8008894:	e7d9      	b.n	800884a <_printf_common+0x8e>
	...

08008898 <_printf_i>:
 8008898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800889c:	7e0f      	ldrb	r7, [r1, #24]
 800889e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088a0:	2f78      	cmp	r7, #120	@ 0x78
 80088a2:	4691      	mov	r9, r2
 80088a4:	4680      	mov	r8, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	469a      	mov	sl, r3
 80088aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80088ae:	d807      	bhi.n	80088c0 <_printf_i+0x28>
 80088b0:	2f62      	cmp	r7, #98	@ 0x62
 80088b2:	d80a      	bhi.n	80088ca <_printf_i+0x32>
 80088b4:	2f00      	cmp	r7, #0
 80088b6:	f000 80d2 	beq.w	8008a5e <_printf_i+0x1c6>
 80088ba:	2f58      	cmp	r7, #88	@ 0x58
 80088bc:	f000 80b9 	beq.w	8008a32 <_printf_i+0x19a>
 80088c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088c8:	e03a      	b.n	8008940 <_printf_i+0xa8>
 80088ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088ce:	2b15      	cmp	r3, #21
 80088d0:	d8f6      	bhi.n	80088c0 <_printf_i+0x28>
 80088d2:	a101      	add	r1, pc, #4	@ (adr r1, 80088d8 <_printf_i+0x40>)
 80088d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088d8:	08008931 	.word	0x08008931
 80088dc:	08008945 	.word	0x08008945
 80088e0:	080088c1 	.word	0x080088c1
 80088e4:	080088c1 	.word	0x080088c1
 80088e8:	080088c1 	.word	0x080088c1
 80088ec:	080088c1 	.word	0x080088c1
 80088f0:	08008945 	.word	0x08008945
 80088f4:	080088c1 	.word	0x080088c1
 80088f8:	080088c1 	.word	0x080088c1
 80088fc:	080088c1 	.word	0x080088c1
 8008900:	080088c1 	.word	0x080088c1
 8008904:	08008a45 	.word	0x08008a45
 8008908:	0800896f 	.word	0x0800896f
 800890c:	080089ff 	.word	0x080089ff
 8008910:	080088c1 	.word	0x080088c1
 8008914:	080088c1 	.word	0x080088c1
 8008918:	08008a67 	.word	0x08008a67
 800891c:	080088c1 	.word	0x080088c1
 8008920:	0800896f 	.word	0x0800896f
 8008924:	080088c1 	.word	0x080088c1
 8008928:	080088c1 	.word	0x080088c1
 800892c:	08008a07 	.word	0x08008a07
 8008930:	6833      	ldr	r3, [r6, #0]
 8008932:	1d1a      	adds	r2, r3, #4
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	6032      	str	r2, [r6, #0]
 8008938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800893c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008940:	2301      	movs	r3, #1
 8008942:	e09d      	b.n	8008a80 <_printf_i+0x1e8>
 8008944:	6833      	ldr	r3, [r6, #0]
 8008946:	6820      	ldr	r0, [r4, #0]
 8008948:	1d19      	adds	r1, r3, #4
 800894a:	6031      	str	r1, [r6, #0]
 800894c:	0606      	lsls	r6, r0, #24
 800894e:	d501      	bpl.n	8008954 <_printf_i+0xbc>
 8008950:	681d      	ldr	r5, [r3, #0]
 8008952:	e003      	b.n	800895c <_printf_i+0xc4>
 8008954:	0645      	lsls	r5, r0, #25
 8008956:	d5fb      	bpl.n	8008950 <_printf_i+0xb8>
 8008958:	f9b3 5000 	ldrsh.w	r5, [r3]
 800895c:	2d00      	cmp	r5, #0
 800895e:	da03      	bge.n	8008968 <_printf_i+0xd0>
 8008960:	232d      	movs	r3, #45	@ 0x2d
 8008962:	426d      	negs	r5, r5
 8008964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008968:	4859      	ldr	r0, [pc, #356]	@ (8008ad0 <_printf_i+0x238>)
 800896a:	230a      	movs	r3, #10
 800896c:	e011      	b.n	8008992 <_printf_i+0xfa>
 800896e:	6821      	ldr	r1, [r4, #0]
 8008970:	6833      	ldr	r3, [r6, #0]
 8008972:	0608      	lsls	r0, r1, #24
 8008974:	f853 5b04 	ldr.w	r5, [r3], #4
 8008978:	d402      	bmi.n	8008980 <_printf_i+0xe8>
 800897a:	0649      	lsls	r1, r1, #25
 800897c:	bf48      	it	mi
 800897e:	b2ad      	uxthmi	r5, r5
 8008980:	2f6f      	cmp	r7, #111	@ 0x6f
 8008982:	4853      	ldr	r0, [pc, #332]	@ (8008ad0 <_printf_i+0x238>)
 8008984:	6033      	str	r3, [r6, #0]
 8008986:	bf14      	ite	ne
 8008988:	230a      	movne	r3, #10
 800898a:	2308      	moveq	r3, #8
 800898c:	2100      	movs	r1, #0
 800898e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008992:	6866      	ldr	r6, [r4, #4]
 8008994:	60a6      	str	r6, [r4, #8]
 8008996:	2e00      	cmp	r6, #0
 8008998:	bfa2      	ittt	ge
 800899a:	6821      	ldrge	r1, [r4, #0]
 800899c:	f021 0104 	bicge.w	r1, r1, #4
 80089a0:	6021      	strge	r1, [r4, #0]
 80089a2:	b90d      	cbnz	r5, 80089a8 <_printf_i+0x110>
 80089a4:	2e00      	cmp	r6, #0
 80089a6:	d04b      	beq.n	8008a40 <_printf_i+0x1a8>
 80089a8:	4616      	mov	r6, r2
 80089aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80089ae:	fb03 5711 	mls	r7, r3, r1, r5
 80089b2:	5dc7      	ldrb	r7, [r0, r7]
 80089b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089b8:	462f      	mov	r7, r5
 80089ba:	42bb      	cmp	r3, r7
 80089bc:	460d      	mov	r5, r1
 80089be:	d9f4      	bls.n	80089aa <_printf_i+0x112>
 80089c0:	2b08      	cmp	r3, #8
 80089c2:	d10b      	bne.n	80089dc <_printf_i+0x144>
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	07df      	lsls	r7, r3, #31
 80089c8:	d508      	bpl.n	80089dc <_printf_i+0x144>
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	6861      	ldr	r1, [r4, #4]
 80089ce:	4299      	cmp	r1, r3
 80089d0:	bfde      	ittt	le
 80089d2:	2330      	movle	r3, #48	@ 0x30
 80089d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089dc:	1b92      	subs	r2, r2, r6
 80089de:	6122      	str	r2, [r4, #16]
 80089e0:	f8cd a000 	str.w	sl, [sp]
 80089e4:	464b      	mov	r3, r9
 80089e6:	aa03      	add	r2, sp, #12
 80089e8:	4621      	mov	r1, r4
 80089ea:	4640      	mov	r0, r8
 80089ec:	f7ff fee6 	bl	80087bc <_printf_common>
 80089f0:	3001      	adds	r0, #1
 80089f2:	d14a      	bne.n	8008a8a <_printf_i+0x1f2>
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295
 80089f8:	b004      	add	sp, #16
 80089fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	f043 0320 	orr.w	r3, r3, #32
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	4833      	ldr	r0, [pc, #204]	@ (8008ad4 <_printf_i+0x23c>)
 8008a08:	2778      	movs	r7, #120	@ 0x78
 8008a0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	6831      	ldr	r1, [r6, #0]
 8008a12:	061f      	lsls	r7, r3, #24
 8008a14:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a18:	d402      	bmi.n	8008a20 <_printf_i+0x188>
 8008a1a:	065f      	lsls	r7, r3, #25
 8008a1c:	bf48      	it	mi
 8008a1e:	b2ad      	uxthmi	r5, r5
 8008a20:	6031      	str	r1, [r6, #0]
 8008a22:	07d9      	lsls	r1, r3, #31
 8008a24:	bf44      	itt	mi
 8008a26:	f043 0320 	orrmi.w	r3, r3, #32
 8008a2a:	6023      	strmi	r3, [r4, #0]
 8008a2c:	b11d      	cbz	r5, 8008a36 <_printf_i+0x19e>
 8008a2e:	2310      	movs	r3, #16
 8008a30:	e7ac      	b.n	800898c <_printf_i+0xf4>
 8008a32:	4827      	ldr	r0, [pc, #156]	@ (8008ad0 <_printf_i+0x238>)
 8008a34:	e7e9      	b.n	8008a0a <_printf_i+0x172>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	f023 0320 	bic.w	r3, r3, #32
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	e7f6      	b.n	8008a2e <_printf_i+0x196>
 8008a40:	4616      	mov	r6, r2
 8008a42:	e7bd      	b.n	80089c0 <_printf_i+0x128>
 8008a44:	6833      	ldr	r3, [r6, #0]
 8008a46:	6825      	ldr	r5, [r4, #0]
 8008a48:	6961      	ldr	r1, [r4, #20]
 8008a4a:	1d18      	adds	r0, r3, #4
 8008a4c:	6030      	str	r0, [r6, #0]
 8008a4e:	062e      	lsls	r6, r5, #24
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	d501      	bpl.n	8008a58 <_printf_i+0x1c0>
 8008a54:	6019      	str	r1, [r3, #0]
 8008a56:	e002      	b.n	8008a5e <_printf_i+0x1c6>
 8008a58:	0668      	lsls	r0, r5, #25
 8008a5a:	d5fb      	bpl.n	8008a54 <_printf_i+0x1bc>
 8008a5c:	8019      	strh	r1, [r3, #0]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	6123      	str	r3, [r4, #16]
 8008a62:	4616      	mov	r6, r2
 8008a64:	e7bc      	b.n	80089e0 <_printf_i+0x148>
 8008a66:	6833      	ldr	r3, [r6, #0]
 8008a68:	1d1a      	adds	r2, r3, #4
 8008a6a:	6032      	str	r2, [r6, #0]
 8008a6c:	681e      	ldr	r6, [r3, #0]
 8008a6e:	6862      	ldr	r2, [r4, #4]
 8008a70:	2100      	movs	r1, #0
 8008a72:	4630      	mov	r0, r6
 8008a74:	f7f7 fbec 	bl	8000250 <memchr>
 8008a78:	b108      	cbz	r0, 8008a7e <_printf_i+0x1e6>
 8008a7a:	1b80      	subs	r0, r0, r6
 8008a7c:	6060      	str	r0, [r4, #4]
 8008a7e:	6863      	ldr	r3, [r4, #4]
 8008a80:	6123      	str	r3, [r4, #16]
 8008a82:	2300      	movs	r3, #0
 8008a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a88:	e7aa      	b.n	80089e0 <_printf_i+0x148>
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	4632      	mov	r2, r6
 8008a8e:	4649      	mov	r1, r9
 8008a90:	4640      	mov	r0, r8
 8008a92:	47d0      	blx	sl
 8008a94:	3001      	adds	r0, #1
 8008a96:	d0ad      	beq.n	80089f4 <_printf_i+0x15c>
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	079b      	lsls	r3, r3, #30
 8008a9c:	d413      	bmi.n	8008ac6 <_printf_i+0x22e>
 8008a9e:	68e0      	ldr	r0, [r4, #12]
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	4298      	cmp	r0, r3
 8008aa4:	bfb8      	it	lt
 8008aa6:	4618      	movlt	r0, r3
 8008aa8:	e7a6      	b.n	80089f8 <_printf_i+0x160>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	4632      	mov	r2, r6
 8008aae:	4649      	mov	r1, r9
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	47d0      	blx	sl
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d09d      	beq.n	80089f4 <_printf_i+0x15c>
 8008ab8:	3501      	adds	r5, #1
 8008aba:	68e3      	ldr	r3, [r4, #12]
 8008abc:	9903      	ldr	r1, [sp, #12]
 8008abe:	1a5b      	subs	r3, r3, r1
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	dcf2      	bgt.n	8008aaa <_printf_i+0x212>
 8008ac4:	e7eb      	b.n	8008a9e <_printf_i+0x206>
 8008ac6:	2500      	movs	r5, #0
 8008ac8:	f104 0619 	add.w	r6, r4, #25
 8008acc:	e7f5      	b.n	8008aba <_printf_i+0x222>
 8008ace:	bf00      	nop
 8008ad0:	08008e51 	.word	0x08008e51
 8008ad4:	08008e62 	.word	0x08008e62

08008ad8 <memmove>:
 8008ad8:	4288      	cmp	r0, r1
 8008ada:	b510      	push	{r4, lr}
 8008adc:	eb01 0402 	add.w	r4, r1, r2
 8008ae0:	d902      	bls.n	8008ae8 <memmove+0x10>
 8008ae2:	4284      	cmp	r4, r0
 8008ae4:	4623      	mov	r3, r4
 8008ae6:	d807      	bhi.n	8008af8 <memmove+0x20>
 8008ae8:	1e43      	subs	r3, r0, #1
 8008aea:	42a1      	cmp	r1, r4
 8008aec:	d008      	beq.n	8008b00 <memmove+0x28>
 8008aee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008af2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008af6:	e7f8      	b.n	8008aea <memmove+0x12>
 8008af8:	4402      	add	r2, r0
 8008afa:	4601      	mov	r1, r0
 8008afc:	428a      	cmp	r2, r1
 8008afe:	d100      	bne.n	8008b02 <memmove+0x2a>
 8008b00:	bd10      	pop	{r4, pc}
 8008b02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b0a:	e7f7      	b.n	8008afc <memmove+0x24>

08008b0c <_sbrk_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4d06      	ldr	r5, [pc, #24]	@ (8008b28 <_sbrk_r+0x1c>)
 8008b10:	2300      	movs	r3, #0
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	602b      	str	r3, [r5, #0]
 8008b18:	f7f9 fd86 	bl	8002628 <_sbrk>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_sbrk_r+0x1a>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_sbrk_r+0x1a>
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	200013cc 	.word	0x200013cc

08008b2c <memcpy>:
 8008b2c:	440a      	add	r2, r1
 8008b2e:	4291      	cmp	r1, r2
 8008b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b34:	d100      	bne.n	8008b38 <memcpy+0xc>
 8008b36:	4770      	bx	lr
 8008b38:	b510      	push	{r4, lr}
 8008b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b42:	4291      	cmp	r1, r2
 8008b44:	d1f9      	bne.n	8008b3a <memcpy+0xe>
 8008b46:	bd10      	pop	{r4, pc}

08008b48 <_realloc_r>:
 8008b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4c:	4680      	mov	r8, r0
 8008b4e:	4615      	mov	r5, r2
 8008b50:	460c      	mov	r4, r1
 8008b52:	b921      	cbnz	r1, 8008b5e <_realloc_r+0x16>
 8008b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b58:	4611      	mov	r1, r2
 8008b5a:	f7ff bc4b 	b.w	80083f4 <_malloc_r>
 8008b5e:	b92a      	cbnz	r2, 8008b6c <_realloc_r+0x24>
 8008b60:	f7ff fbdc 	bl	800831c <_free_r>
 8008b64:	2400      	movs	r4, #0
 8008b66:	4620      	mov	r0, r4
 8008b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b6c:	f000 f81a 	bl	8008ba4 <_malloc_usable_size_r>
 8008b70:	4285      	cmp	r5, r0
 8008b72:	4606      	mov	r6, r0
 8008b74:	d802      	bhi.n	8008b7c <_realloc_r+0x34>
 8008b76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b7a:	d8f4      	bhi.n	8008b66 <_realloc_r+0x1e>
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	4640      	mov	r0, r8
 8008b80:	f7ff fc38 	bl	80083f4 <_malloc_r>
 8008b84:	4607      	mov	r7, r0
 8008b86:	2800      	cmp	r0, #0
 8008b88:	d0ec      	beq.n	8008b64 <_realloc_r+0x1c>
 8008b8a:	42b5      	cmp	r5, r6
 8008b8c:	462a      	mov	r2, r5
 8008b8e:	4621      	mov	r1, r4
 8008b90:	bf28      	it	cs
 8008b92:	4632      	movcs	r2, r6
 8008b94:	f7ff ffca 	bl	8008b2c <memcpy>
 8008b98:	4621      	mov	r1, r4
 8008b9a:	4640      	mov	r0, r8
 8008b9c:	f7ff fbbe 	bl	800831c <_free_r>
 8008ba0:	463c      	mov	r4, r7
 8008ba2:	e7e0      	b.n	8008b66 <_realloc_r+0x1e>

08008ba4 <_malloc_usable_size_r>:
 8008ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba8:	1f18      	subs	r0, r3, #4
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	bfbc      	itt	lt
 8008bae:	580b      	ldrlt	r3, [r1, r0]
 8008bb0:	18c0      	addlt	r0, r0, r3
 8008bb2:	4770      	bx	lr

08008bb4 <_init>:
 8008bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb6:	bf00      	nop
 8008bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bba:	bc08      	pop	{r3}
 8008bbc:	469e      	mov	lr, r3
 8008bbe:	4770      	bx	lr

08008bc0 <_fini>:
 8008bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc2:	bf00      	nop
 8008bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bc6:	bc08      	pop	{r3}
 8008bc8:	469e      	mov	lr, r3
 8008bca:	4770      	bx	lr
