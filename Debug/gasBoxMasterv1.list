
gasBoxMasterv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad18  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  0800aef8  0800aef8  0000bef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b234  0800b234  0000d064  2**0
                  CONTENTS
  4 .ARM          00000008  0800b234  0800b234  0000c234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b23c  0800b23c  0000d064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b23c  0800b23c  0000c23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b240  0800b240  0000c240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800b244  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014d8  20000064  0800b2a8  0000d064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000153c  0800b2a8  0000d53c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3f3  00000000  00000000  0000d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046d8  00000000  00000000  0002a487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  0002eb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000142c  00000000  00000000  00030560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261ed  00000000  00000000  0003198c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022ba1  00000000  00000000  00057b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f349e  00000000  00000000  0007a71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016dbb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000706c  00000000  00000000  0016dbfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00174c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800aee0 	.word	0x0800aee0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	0800aee0 	.word	0x0800aee0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <hw_sero_get>:


// Serviceroutine Hadware Get
// Prueft im wesentlichen auf Harwarefehlersignale
void hw_sero_get(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <hw_sero_set>:

// Serviceroutine Hadware Set
// Verwaltet die Heartbeat LED
void hw_sero_set(void)
{	if (ct_hbeat_null()==1)
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	f002 ff7a 	bl	80034ec <ct_hbeat_null>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d107      	bne.n	800060e <hw_sero_set+0x1e>
	 { set_ct_hbeat(500);
 80005fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000602:	f002 ff63 	bl	80034cc <set_ct_hbeat>
	 HAL_GPIO_TogglePin(UC_HEARTBEAT_GPIO_Port, UC_HEARTBEAT_Pin);
 8000606:	2108      	movs	r1, #8
 8000608:	4802      	ldr	r0, [pc, #8]	@ (8000614 <hw_sero_set+0x24>)
 800060a:	f005 fdf7 	bl	80061fc <HAL_GPIO_TogglePin>
	}
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	48000c00 	.word	0x48000c00

08000618 <u_ok>:
void hw_set_error_out(uint8_t p)
{

}

uint8_t u_ok(GPIO_TypeDef *port, uint16_t pin) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	807b      	strh	r3, [r7, #2]
    GPIO_PinState s = HAL_GPIO_ReadPin(port, pin);
 8000624:	887b      	ldrh	r3, [r7, #2]
 8000626:	4619      	mov	r1, r3
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f005 fdb7 	bl	800619c <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	73fb      	strb	r3, [r7, #15]
    return (s == GPIO_PIN_SET) ? 1u : 0u;
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d101      	bne.n	800063c <u_ok+0x24>
 8000638:	2301      	movs	r3, #1
 800063a:	e000      	b.n	800063e <u_ok+0x26>
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <update_uok>:

uint8_t update_uok(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	uint8_t res1 = u_ok(UC__5VOK_GPIO_Port,UC__5VOK_Pin);
 800064e:	2110      	movs	r1, #16
 8000650:	480b      	ldr	r0, [pc, #44]	@ (8000680 <update_uok+0x38>)
 8000652:	f7ff ffe1 	bl	8000618 <u_ok>
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	uint8_t res2 = u_ok(UC__12VOK_GPIO_Port,UC__12VOK_Pin);
 800065a:	2120      	movs	r1, #32
 800065c:	4808      	ldr	r0, [pc, #32]	@ (8000680 <update_uok+0x38>)
 800065e:	f7ff ffdb 	bl	8000618 <u_ok>
 8000662:	4603      	mov	r3, r0
 8000664:	71bb      	strb	r3, [r7, #6]
	if((res1 && res2)){
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d004      	beq.n	8000676 <update_uok+0x2e>
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <update_uok+0x2e>
		return 1;
 8000672:	2301      	movs	r3, #1
 8000674:	e000      	b.n	8000678 <update_uok+0x30>
	}
	return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	48000c00 	.word	0x48000c00

08000684 <readPumpWarning>:
                      set ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

// these two functions might just need a pulse

uint8_t readPumpWarning(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	GPIO_PinState s = HAL_GPIO_ReadPin(UC_PUMP_WARNING_GPIO_Port, UC_PUMP_WARNING_Pin);
 800068a:	2110      	movs	r1, #16
 800068c:	4807      	ldr	r0, [pc, #28]	@ (80006ac <readPumpWarning+0x28>)
 800068e:	f005 fd85 	bl	800619c <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	return (s == GPIO_PIN_SET) ? 1u : 0u;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d101      	bne.n	80006a0 <readPumpWarning+0x1c>
 800069c:	2301      	movs	r3, #1
 800069e:	e000      	b.n	80006a2 <readPumpWarning+0x1e>
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	48001000 	.word	0x48001000

080006b0 <readPumpAlarm>:

uint8_t readPumpAlarm(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	GPIO_PinState s = HAL_GPIO_ReadPin(UC_PUMP_ALARM_GPIO_Port, UC_PUMP_ALARM_Pin);
 80006b6:	2120      	movs	r1, #32
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <readPumpAlarm+0x28>)
 80006ba:	f005 fd6f 	bl	800619c <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	return (s == GPIO_PIN_SET) ? 1u : 0u;
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d101      	bne.n	80006cc <readPumpAlarm+0x1c>
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <readPumpAlarm+0x1e>
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	48001000 	.word	0x48001000

080006dc <MIO_RESET_Pulse>:
#define MIO_GPIO_HB_PIN   3
#define MIO_GPIO_HB_BIT   (1u << MIO_GPIO_HB_PIN)
static uint8_t mio_gpio_out_shadow = 0x00; // shadow of AD5592 GPIO outputs


static inline void MIO_RESET_Pulse(void){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
    // Optional reset pulse like your AVR did
    HAL_GPIO_WritePin(UC_AUX_RESET_GPIO_Port, UC_AUX_RESET_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006e6:	4808      	ldr	r0, [pc, #32]	@ (8000708 <MIO_RESET_Pulse+0x2c>)
 80006e8:	f005 fd70 	bl	80061cc <HAL_GPIO_WritePin>
    HAL_Delay(1);   // 1 ms is plenty
 80006ec:	2001      	movs	r0, #1
 80006ee:	f004 f9bb 	bl	8004a68 <HAL_Delay>
    HAL_GPIO_WritePin(UC_AUX_RESET_GPIO_Port, UC_AUX_RESET_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006f8:	4803      	ldr	r0, [pc, #12]	@ (8000708 <MIO_RESET_Pulse+0x2c>)
 80006fa:	f005 fd67 	bl	80061cc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f004 f9b2 	bl	8004a68 <HAL_Delay>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	48001000 	.word	0x48001000

0800070c <mio_send_word>:

static inline void mio_send_word(uint16_t w){
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	80fb      	strh	r3, [r7, #6]
	spi_access_device(spi_mio);
 8000716:	2001      	movs	r0, #1
 8000718:	f002 fa70 	bl	8002bfc <spi_access_device>
	spiTransferWord(w);
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fa54 	bl	8002bcc <spiTransferWord>
	spi_release_device(spi_mio);
 8000724:	2001      	movs	r0, #1
 8000726:	f002 fa77 	bl	8002c18 <spi_release_device>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <mio_init>:

void mio_init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
    MIO_RESET_Pulse();  // optional
 800073a:	f7ff ffcf 	bl	80006dc <MIO_RESET_Pulse>
    delay_us(10);
 800073e:	200a      	movs	r0, #10
 8000740:	f000 fa38 	bl	8000bb4 <delay_us>

    mio_send_word(AD5592R_CMD_SW_RESET | 0x0DAC);
 8000744:	f647 50ac 	movw	r0, #32172	@ 0x7dac
 8000748:	f7ff ffe0 	bl	800070c <mio_send_word>
    // Configure channels on AVR:
    mio_send_word(AD5592R_CMD_ADC_PIN_SELECT | ADCS);
 800074c:	4b38      	ldr	r3, [pc, #224]	@ (8000830 <mio_init+0xfc>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000754:	b29b      	uxth	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ffd8 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_DAC_PIN_SELECT | DACS);
 800075c:	4b35      	ldr	r3, [pc, #212]	@ (8000834 <mio_init+0x100>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8000764:	b29b      	uxth	r3, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ffd0 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_PULL_DOWN_SET);
 800076c:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8000770:	f7ff ffcc 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_GPIO_WRITE_CONFIG | MIO_GPIO_HB_BIT);
 8000774:	f244 0008 	movw	r0, #16392	@ 0x4008
 8000778:	f7ff ffc8 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_GPIO_READ_CONFIG);
 800077c:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
 8000780:	f7ff ffc4 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_GPIO_DRAIN_CONFIG);
 8000784:	f44f 40c0 	mov.w	r0, #24576	@ 0x6000
 8000788:	f7ff ffc0 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_THREE_STATE_CONFIG);
 800078c:	f44f 40d0 	mov.w	r0, #26624	@ 0x6800
 8000790:	f7ff ffbc 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_GP_CNTRL | (0b1100<<6));   // buf precharge + ADC buffer enable
 8000794:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8000798:	f7ff ffb8 	bl	800070c <mio_send_word>

    // Power-down unused DACs (same trick you used)
    uint16_t ref_ctrl_bits = ~(DACS) & 0xFF;
 800079c:	4b25      	ldr	r3, [pc, #148]	@ (8000834 <mio_init+0x100>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	43db      	mvns	r3, r3
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	80bb      	strh	r3, [r7, #4]
    mio_send_word(AD5592R_CMD_POWER_DWN_REF_CNTRL | ref_ctrl_bits);
 80007a8:	88bb      	ldrh	r3, [r7, #4]
 80007aa:	f443 43b0 	orr.w	r3, r3, #22528	@ 0x5800
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ffab 	bl	800070c <mio_send_word>

    mio_send_word(AD5592R_CMD_CNTRL_REG_READBACK);
 80007b6:	f44f 5060 	mov.w	r0, #14336	@ 0x3800
 80007ba:	f7ff ffa7 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_ADC_READ | (1u<<9) | ADCS); // program ADC sequence
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <mio_init+0xfc>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	f443 5390 	orr.w	r3, r3, #4608	@ 0x1200
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff9f 	bl	800070c <mio_send_word>

	// Felder löschen
	for(uint8_t i=0; i < MIO_CHN_COUNT; i++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	e017      	b.n	8000804 <mio_init+0xd0>
	{
		adc_val_ptr[i] = 0;
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	4a18      	ldr	r2, [pc, #96]	@ (8000838 <mio_init+0x104>)
 80007d8:	2100      	movs	r1, #0
 80007da:	54d1      	strb	r1, [r2, r3]

		for (uint8_t j=0; j < MIO_AVRG_LEN; j++)
 80007dc:	2300      	movs	r3, #0
 80007de:	71bb      	strb	r3, [r7, #6]
 80007e0:	e00a      	b.n	80007f8 <mio_init+0xc4>
		{
			adc_val[i][j] = 0;
 80007e2:	79fa      	ldrb	r2, [r7, #7]
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	4915      	ldr	r1, [pc, #84]	@ (800083c <mio_init+0x108>)
 80007e8:	0112      	lsls	r2, r2, #4
 80007ea:	4413      	add	r3, r2
 80007ec:	2200      	movs	r2, #0
 80007ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint8_t j=0; j < MIO_AVRG_LEN; j++)
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	3301      	adds	r3, #1
 80007f6:	71bb      	strb	r3, [r7, #6]
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	d9f1      	bls.n	80007e2 <mio_init+0xae>
	for(uint8_t i=0; i < MIO_CHN_COUNT; i++)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	3301      	adds	r3, #1
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b07      	cmp	r3, #7
 8000808:	d9e4      	bls.n	80007d4 <mio_init+0xa0>
		}
	}
    // init set
	mio_set_dac(MIO_DAC0, 0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f000 f8df 	bl	80009d0 <mio_set_dac>
	// Set initial GPIO output levels (HB off -> 0)
	mio_send_word(AD5592R_CMD_GPIO_WRITE_DATA | mio_gpio_out_shadow);
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <mio_init+0x10c>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b21b      	sxth	r3, r3
 8000818:	f443 4390 	orr.w	r3, r3, #18432	@ 0x4800
 800081c:	b21b      	sxth	r3, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff73 	bl	800070c <mio_send_word>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000002 	.word	0x20000002
 8000834:	20000000 	.word	0x20000000
 8000838:	20000180 	.word	0x20000180
 800083c:	20000080 	.word	0x20000080
 8000840:	20000188 	.word	0x20000188

08000844 <mio_hb_toggle>:

void mio_hb_toggle(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    mio_gpio_out_shadow ^= MIO_GPIO_HB_BIT;
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <mio_hb_toggle+0x2c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	f083 0308 	eor.w	r3, r3, #8
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <mio_hb_toggle+0x2c>)
 8000854:	701a      	strb	r2, [r3, #0]
    mio_send_word(AD5592R_CMD_GPIO_WRITE_DATA | (mio_gpio_out_shadow & 0xFF));     // single 16-bit write to AD5592
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <mio_hb_toggle+0x2c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b21b      	sxth	r3, r3
 800085c:	f443 4390 	orr.w	r3, r3, #18432	@ 0x4800
 8000860:	b21b      	sxth	r3, r3
 8000862:	b29b      	uxth	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff51 	bl	800070c <mio_send_word>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000188 	.word	0x20000188

08000874 <mio_sero_set>:

void mio_sero_set(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	if (ct_mio_hbeat_null() == 1) {          // same timer API
 8000878:	f002 fe5c 	bl	8003534 <ct_mio_hbeat_null>
 800087c:	4603      	mov	r3, r0
 800087e:	2b01      	cmp	r3, #1
 8000880:	d105      	bne.n	800088e <mio_sero_set+0x1a>
		set_ct_mio_hbeat(500);               // 500 ms -> ~1 Hz blink
 8000882:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000886:	f002 fe45 	bl	8003514 <set_ct_mio_hbeat>
		mio_hb_toggle();                 // AD5592 heartbeat toggle
 800088a:	f7ff ffdb 	bl	8000844 <mio_hb_toggle>
	}
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <mio_sero_get>:

void mio_sero_get(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
	// Step-by-step reading of the analog signals. One signal per call (4 in total)

	uint8_t chn = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	80bb      	strh	r3, [r7, #4]

	HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80008a2:	2023      	movs	r0, #35	@ 0x23
 80008a4:	f005 f9fb 	bl	8005c9e <HAL_NVIC_DisableIRQ>
	spi_access_device(spi_mio);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f002 f9a7 	bl	8002bfc <spi_access_device>

	tmp = spiTransferWord(0); // Get result
 80008ae:	2000      	movs	r0, #0
 80008b0:	f002 f98c 	bl	8002bcc <spiTransferWord>
 80008b4:	4603      	mov	r3, r0
 80008b6:	80bb      	strh	r3, [r7, #4]

	spi_release_device(spi_mio);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f002 f9ad 	bl	8002c18 <spi_release_device>
	HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008be:	2023      	movs	r0, #35	@ 0x23
 80008c0:	f005 f9df 	bl	8005c82 <HAL_NVIC_EnableIRQ>

	chn = ((tmp & 0x7000) >> 12);
 80008c4:	88bb      	ldrh	r3, [r7, #4]
 80008c6:	131b      	asrs	r3, r3, #12
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	71fb      	strb	r3, [r7, #7]
	tmp &= AD5592R_DAC_VALUE_MASK;
 80008d0:	88bb      	ldrh	r3, [r7, #4]
 80008d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008d6:	80bb      	strh	r3, [r7, #4]

	switch(chn)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	3b01      	subs	r3, #1
 80008dc:	2b06      	cmp	r3, #6
 80008de:	d865      	bhi.n	80009ac <mio_sero_get+0x118>
 80008e0:	a201      	add	r2, pc, #4	@ (adr r2, 80008e8 <mio_sero_get+0x54>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	08000905 	.word	0x08000905
 80008ec:	080009ad 	.word	0x080009ad
 80008f0:	0800092f 	.word	0x0800092f
 80008f4:	080009ad 	.word	0x080009ad
 80008f8:	08000959 	.word	0x08000959
 80008fc:	080009ad 	.word	0x080009ad
 8000900:	08000983 	.word	0x08000983
	{
		case MIO_ADC0:
			adc_val[MIO_ADC0][adc_val_ptr[MIO_ADC0]] = tmp;
 8000904:	4b30      	ldr	r3, [pc, #192]	@ (80009c8 <mio_sero_get+0x134>)
 8000906:	785b      	ldrb	r3, [r3, #1]
 8000908:	4930      	ldr	r1, [pc, #192]	@ (80009cc <mio_sero_get+0x138>)
 800090a:	3310      	adds	r3, #16
 800090c:	88ba      	ldrh	r2, [r7, #4]
 800090e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_val_ptr[MIO_ADC0]++;
 8000912:	4b2d      	ldr	r3, [pc, #180]	@ (80009c8 <mio_sero_get+0x134>)
 8000914:	785b      	ldrb	r3, [r3, #1]
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b2b      	ldr	r3, [pc, #172]	@ (80009c8 <mio_sero_get+0x134>)
 800091c:	705a      	strb	r2, [r3, #1]
			if(adc_val_ptr[MIO_ADC0] > MIO_AVRG_LEN)
 800091e:	4b2a      	ldr	r3, [pc, #168]	@ (80009c8 <mio_sero_get+0x134>)
 8000920:	785b      	ldrb	r3, [r3, #1]
 8000922:	2b10      	cmp	r3, #16
 8000924:	d944      	bls.n	80009b0 <mio_sero_get+0x11c>
				adc_val_ptr[MIO_ADC0] = 0;
 8000926:	4b28      	ldr	r3, [pc, #160]	@ (80009c8 <mio_sero_get+0x134>)
 8000928:	2200      	movs	r2, #0
 800092a:	705a      	strb	r2, [r3, #1]
		break;
 800092c:	e040      	b.n	80009b0 <mio_sero_get+0x11c>

		case MIO_ADC1:
			adc_val[MIO_ADC1][adc_val_ptr[MIO_ADC1]] = tmp;
 800092e:	4b26      	ldr	r3, [pc, #152]	@ (80009c8 <mio_sero_get+0x134>)
 8000930:	78db      	ldrb	r3, [r3, #3]
 8000932:	4926      	ldr	r1, [pc, #152]	@ (80009cc <mio_sero_get+0x138>)
 8000934:	3330      	adds	r3, #48	@ 0x30
 8000936:	88ba      	ldrh	r2, [r7, #4]
 8000938:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_val_ptr[MIO_ADC1]++;
 800093c:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <mio_sero_get+0x134>)
 800093e:	78db      	ldrb	r3, [r3, #3]
 8000940:	3301      	adds	r3, #1
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <mio_sero_get+0x134>)
 8000946:	70da      	strb	r2, [r3, #3]
			if(adc_val_ptr[MIO_ADC1] > MIO_AVRG_LEN)
 8000948:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <mio_sero_get+0x134>)
 800094a:	78db      	ldrb	r3, [r3, #3]
 800094c:	2b10      	cmp	r3, #16
 800094e:	d931      	bls.n	80009b4 <mio_sero_get+0x120>
				adc_val_ptr[MIO_ADC1] = 0;
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <mio_sero_get+0x134>)
 8000952:	2200      	movs	r2, #0
 8000954:	70da      	strb	r2, [r3, #3]
		break;
 8000956:	e02d      	b.n	80009b4 <mio_sero_get+0x120>

		case MIO_ADC2:
			adc_val[MIO_ADC2][adc_val_ptr[MIO_ADC2]] = tmp;
 8000958:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <mio_sero_get+0x134>)
 800095a:	795b      	ldrb	r3, [r3, #5]
 800095c:	491b      	ldr	r1, [pc, #108]	@ (80009cc <mio_sero_get+0x138>)
 800095e:	3350      	adds	r3, #80	@ 0x50
 8000960:	88ba      	ldrh	r2, [r7, #4]
 8000962:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_val_ptr[MIO_ADC2]++;
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <mio_sero_get+0x134>)
 8000968:	795b      	ldrb	r3, [r3, #5]
 800096a:	3301      	adds	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <mio_sero_get+0x134>)
 8000970:	715a      	strb	r2, [r3, #5]
			if(adc_val_ptr[MIO_ADC2] > MIO_AVRG_LEN)
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <mio_sero_get+0x134>)
 8000974:	795b      	ldrb	r3, [r3, #5]
 8000976:	2b10      	cmp	r3, #16
 8000978:	d91e      	bls.n	80009b8 <mio_sero_get+0x124>
				adc_val_ptr[MIO_ADC2] = 0;
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <mio_sero_get+0x134>)
 800097c:	2200      	movs	r2, #0
 800097e:	715a      	strb	r2, [r3, #5]
		break;
 8000980:	e01a      	b.n	80009b8 <mio_sero_get+0x124>

		case MIO_ADC3:
			adc_val[MIO_ADC3][adc_val_ptr[MIO_ADC3]] = tmp;
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <mio_sero_get+0x134>)
 8000984:	79db      	ldrb	r3, [r3, #7]
 8000986:	4911      	ldr	r1, [pc, #68]	@ (80009cc <mio_sero_get+0x138>)
 8000988:	3370      	adds	r3, #112	@ 0x70
 800098a:	88ba      	ldrh	r2, [r7, #4]
 800098c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_val_ptr[MIO_ADC3]++;
 8000990:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <mio_sero_get+0x134>)
 8000992:	79db      	ldrb	r3, [r3, #7]
 8000994:	3301      	adds	r3, #1
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <mio_sero_get+0x134>)
 800099a:	71da      	strb	r2, [r3, #7]
			if(adc_val_ptr[MIO_ADC3] > MIO_AVRG_LEN)
 800099c:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <mio_sero_get+0x134>)
 800099e:	79db      	ldrb	r3, [r3, #7]
 80009a0:	2b10      	cmp	r3, #16
 80009a2:	d90b      	bls.n	80009bc <mio_sero_get+0x128>
				adc_val_ptr[MIO_ADC3] = 0;
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <mio_sero_get+0x134>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	71da      	strb	r2, [r3, #7]
		break;
 80009aa:	e007      	b.n	80009bc <mio_sero_get+0x128>

		default:
		break;
 80009ac:	bf00      	nop
 80009ae:	e006      	b.n	80009be <mio_sero_get+0x12a>
		break;
 80009b0:	bf00      	nop
 80009b2:	e004      	b.n	80009be <mio_sero_get+0x12a>
		break;
 80009b4:	bf00      	nop
 80009b6:	e002      	b.n	80009be <mio_sero_get+0x12a>
		break;
 80009b8:	bf00      	nop
 80009ba:	e000      	b.n	80009be <mio_sero_get+0x12a>
		break;
 80009bc:	bf00      	nop
	}

	// From here, process all 10ms values further and provide query functions
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000180 	.word	0x20000180
 80009cc:	20000080 	.word	0x20000080

080009d0 <mio_set_dac>:

void mio_set_dac(uint8_t channel, uint16_t val) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	460a      	mov	r2, r1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	4613      	mov	r3, r2
 80009de:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	81fb      	strh	r3, [r7, #14]

	tmp = (channel & 0x7);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	f003 0307 	and.w	r3, r3, #7
 80009ec:	81fb      	strh	r3, [r7, #14]
	tmp <<= 12;
 80009ee:	89fb      	ldrh	r3, [r7, #14]
 80009f0:	031b      	lsls	r3, r3, #12
 80009f2:	81fb      	strh	r3, [r7, #14]
	if (val > AD5592R_DAC_VALUE_MASK)
 80009f4:	88bb      	ldrh	r3, [r7, #4]
 80009f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80009fa:	d304      	bcc.n	8000a06 <mio_set_dac+0x36>
		tmp += AD5592R_DAC_VALUE_MASK;
 80009fc:	89fb      	ldrh	r3, [r7, #14]
 80009fe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000a02:	81fb      	strh	r3, [r7, #14]
 8000a04:	e003      	b.n	8000a0e <mio_set_dac+0x3e>
	else
		tmp += val;
 8000a06:	89fa      	ldrh	r2, [r7, #14]
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	81fb      	strh	r3, [r7, #14]
	//tmp += (val & 0x0FFF);
	tmp |= (AD5592R_DAC_WRITE_MASK);
 8000a0e:	89fb      	ldrh	r3, [r7, #14]
 8000a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a18:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_DisableIRQ(SPI1_IRQn); 	// atomic restorate
 8000a1a:	2023      	movs	r0, #35	@ 0x23
 8000a1c:	f005 f93f 	bl	8005c9e <HAL_NVIC_DisableIRQ>
	mio_send_word(tmp);					// transfer the word
 8000a20:	89fb      	ldrh	r3, [r7, #14]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fe72 	bl	800070c <mio_send_word>
	HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a28:	2023      	movs	r0, #35	@ 0x23
 8000a2a:	f005 f92a 	bl	8005c82 <HAL_NVIC_EnableIRQ>
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <MX_ADC5_Init>:

ADC_HandleTypeDef hadc5;

/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2220      	movs	r2, #32
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f009 fdbb 	bl	800a5c0 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8000afc <MX_ADC5_Init+0xc4>)
 8000a4e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a50:	4b29      	ldr	r3, [pc, #164]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000a52:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a56:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000a58:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a5e:	4b26      	ldr	r3, [pc, #152]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000a64:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a6a:	4b23      	ldr	r3, [pc, #140]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a70:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000a72:	2204      	movs	r2, #4
 8000a74:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000a76:	4b20      	ldr	r3, [pc, #128]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000a82:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000ab2:	4811      	ldr	r0, [pc, #68]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000ab4:	f004 f9d0 	bl	8004e58 <HAL_ADC_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000abe:	f000 fc80 	bl	80013c2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_ADC5_Init+0xc8>)
 8000ac4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac6:	2306      	movs	r3, #6
 8000ac8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ace:	237f      	movs	r3, #127	@ 0x7f
 8000ad0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	@ (8000af8 <MX_ADC5_Init+0xc0>)
 8000ae0:	f004 fb76 	bl	80051d0 <HAL_ADC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000aea:	f000 fc6a 	bl	80013c2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	3720      	adds	r7, #32
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000018c 	.word	0x2000018c
 8000afc:	50000600 	.word	0x50000600
 8000b00:	1d500080 	.word	0x1d500080

08000b04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b09e      	sub	sp, #120	@ 0x78
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	2254      	movs	r2, #84	@ 0x54
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f009 fd4b 	bl	800a5c0 <memset>
  if(adcHandle->Instance==ADC5)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba8 <HAL_ADC_MspInit+0xa4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d134      	bne.n	8000b9e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000b34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000b3a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000b3e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	4618      	mov	r0, r3
 8000b46:	f006 f955 	bl	8006df4 <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b50:	f000 fc37 	bl	80013c2 <Error_Handler>
    }

    /* ADC5 clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000b54:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <HAL_ADC_MspInit+0xa8>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b58:	4a14      	ldr	r2, [pc, #80]	@ (8000bac <HAL_ADC_MspInit+0xa8>)
 8000b5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <HAL_ADC_MspInit+0xa8>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <HAL_ADC_MspInit+0xa8>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b70:	4a0e      	ldr	r2, [pc, #56]	@ (8000bac <HAL_ADC_MspInit+0xa8>)
 8000b72:	f043 0308 	orr.w	r3, r3, #8
 8000b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <HAL_ADC_MspInit+0xa8>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7c:	f003 0308 	and.w	r3, r3, #8
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
    PD10     ------> ADC5_IN7
    PD11     ------> ADC5_IN8
    PD12     ------> ADC5_IN9
    PD13     ------> ADC5_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000b84:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000b88:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b92:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <HAL_ADC_MspInit+0xac>)
 8000b9a:	f005 f89b 	bl	8005cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3778      	adds	r7, #120	@ 0x78
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	50000600 	.word	0x50000600
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	48000c00 	.word	0x48000c00

08000bb4 <delay_us>:
#include "func.h"
#include "timer0.h"

// Verz�gerung um n * 1us
void delay_us(uint16_t n)
{	uint16_t m = n * 12; // Calibrated for 160 MHz, 5 us.
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	0052      	lsls	r2, r2, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	81fb      	strh	r3, [r7, #14]
	for(volatile uint32_t i=0; i<m; i++);				// volatile, damit nicht vom Compiler wegoptimiert
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	e002      	b.n	8000bd6 <delay_us+0x22>
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	89fa      	ldrh	r2, [r7, #14]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d8f8      	bhi.n	8000bd0 <delay_us+0x1c>
}
 8000bde:	bf00      	nop
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <delay_ms>:

//Verz�gerung um n * 1ms
void delay_ms(uint16_t n)
{	HAL_Delay(n);
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 ff35 	bl	8004a68 <HAL_Delay>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <clamp16>:
		return 1;
	else
		return 0;
}

uint16_t clamp16(int32_t v) {
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
    if (v < 0)      return 0u;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	da01      	bge.n	8000c18 <clamp16+0x12>
 8000c14:	2300      	movs	r3, #0
 8000c16:	e008      	b.n	8000c2a <clamp16+0x24>
    if (v > 65535)  return 65535u;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c1e:	db02      	blt.n	8000c26 <clamp16+0x20>
 8000c20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c24:	e001      	b.n	8000c2a <clamp16+0x24>
    return (uint16_t)v;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	b29b      	uxth	r3, r3
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <gb_sero_get>:

//----- GASBOX CONTROLLER -------------------------------------------------

// Gasbox (UART4, binary)
void gb_sero_get(void)
{
 8000c38:	b598      	push	{r3, r4, r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    nzeichen = 0;
 8000c3c:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <gb_sero_get+0x54>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
    while ((rb_rx_used(&uart4_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8000c42:	e00e      	b.n	8000c62 <gb_sero_get+0x2a>
        msg[nzeichen++] = (uint8_t)uartRB_Getc(&uart4_rb);
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <gb_sero_get+0x54>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	b2d1      	uxtb	r1, r2
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c8c <gb_sero_get+0x54>)
 8000c50:	7011      	strb	r1, [r2, #0]
 8000c52:	461c      	mov	r4, r3
 8000c54:	480e      	ldr	r0, [pc, #56]	@ (8000c90 <gb_sero_get+0x58>)
 8000c56:	f002 fe79 	bl	800394c <uartRB_Getc>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <gb_sero_get+0x5c>)
 8000c60:	551a      	strb	r2, [r3, r4]
    while ((rb_rx_used(&uart4_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8000c62:	480b      	ldr	r0, [pc, #44]	@ (8000c90 <gb_sero_get+0x58>)
 8000c64:	f002 fdb1 	bl	80037ca <rb_rx_used>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	dd04      	ble.n	8000c78 <gb_sero_get+0x40>
 8000c6e:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <gb_sero_get+0x54>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b0d      	cmp	r3, #13
 8000c76:	d9e5      	bls.n	8000c44 <gb_sero_get+0xc>
    }
    if (nzeichen) parse_binary_gasbox();
 8000c78:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <gb_sero_get+0x54>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <gb_sero_get+0x4e>
 8000c82:	f000 f809 	bl	8000c98 <parse_binary_gasbox>
}
 8000c86:	bf00      	nop
 8000c88:	bd98      	pop	{r3, r4, r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000207 	.word	0x20000207
 8000c90:	20000ac0 	.word	0x20000ac0
 8000c94:	200001f8 	.word	0x200001f8

08000c98 <parse_binary_gasbox>:


// ---- parser  ----
static void parse_binary_gasbox(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
	uint8_t data;
	uint8_t ptr = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	73fb      	strb	r3, [r7, #15]

	do {
		switch (state) {
 8000ca2:	4b7a      	ldr	r3, [pc, #488]	@ (8000e8c <parse_binary_gasbox+0x1f4>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	f000 80a8 	beq.w	8000dfc <parse_binary_gasbox+0x164>
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	f300 80e1 	bgt.w	8000e74 <parse_binary_gasbox+0x1dc>
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d030      	beq.n	8000d18 <parse_binary_gasbox+0x80>
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	f000 8098 	beq.w	8000dec <parse_binary_gasbox+0x154>
 8000cbc:	e0da      	b.n	8000e74 <parse_binary_gasbox+0x1dc>
		case RMT_WAIT_FOR_PAKET_START: {
			// scan for DLE 'S'
			while (ptr < nzeichen) {
				data = msg[ptr++];
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	1c5a      	adds	r2, r3, #1
 8000cc2:	73fa      	strb	r2, [r7, #15]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b72      	ldr	r3, [pc, #456]	@ (8000e90 <parse_binary_gasbox+0x1f8>)
 8000cc8:	5c9b      	ldrb	r3, [r3, r2]
 8000cca:	717b      	strb	r3, [r7, #5]
				if (dleFlag) {
 8000ccc:	4b71      	ldr	r3, [pc, #452]	@ (8000e94 <parse_binary_gasbox+0x1fc>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d01b      	beq.n	8000d0c <parse_binary_gasbox+0x74>
					// second control char after DLE
					if (data == GB_DLE) {
 8000cd4:	797b      	ldrb	r3, [r7, #5]
 8000cd6:	2b3d      	cmp	r3, #61	@ 0x3d
 8000cd8:	d103      	bne.n	8000ce2 <parse_binary_gasbox+0x4a>
						// interpret as literal DLE
						dleFlag = 0;
 8000cda:	4b6e      	ldr	r3, [pc, #440]	@ (8000e94 <parse_binary_gasbox+0x1fc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	e01a      	b.n	8000d18 <parse_binary_gasbox+0x80>
						// (no payload yet in WAIT state)
					} else if (data == GB_SOT) {
 8000ce2:	797b      	ldrb	r3, [r7, #5]
 8000ce4:	2b53      	cmp	r3, #83	@ 0x53
 8000ce6:	d10d      	bne.n	8000d04 <parse_binary_gasbox+0x6c>
						// start of frame
						lengthRx = 0;
 8000ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8000e98 <parse_binary_gasbox+0x200>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
						checksum = 0;
 8000cee:	4b6b      	ldr	r3, [pc, #428]	@ (8000e9c <parse_binary_gasbox+0x204>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000cf4:	4b67      	ldr	r3, [pc, #412]	@ (8000e94 <parse_binary_gasbox+0x1fc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
						state = RMT_READ_PAKET;
 8000cfa:	4b64      	ldr	r3, [pc, #400]	@ (8000e8c <parse_binary_gasbox+0x1f4>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	701a      	strb	r2, [r3, #0]
						break;
 8000d00:	bf00      	nop
					if (data == GB_DLE)
						dleFlag = 1;
				}
			}
		}
			break;
 8000d02:	e0b7      	b.n	8000e74 <parse_binary_gasbox+0x1dc>
						dleFlag = 0;
 8000d04:	4b63      	ldr	r3, [pc, #396]	@ (8000e94 <parse_binary_gasbox+0x1fc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	e005      	b.n	8000d18 <parse_binary_gasbox+0x80>
					if (data == GB_DLE)
 8000d0c:	797b      	ldrb	r3, [r7, #5]
 8000d0e:	2b3d      	cmp	r3, #61	@ 0x3d
 8000d10:	d102      	bne.n	8000d18 <parse_binary_gasbox+0x80>
						dleFlag = 1;
 8000d12:	4b60      	ldr	r3, [pc, #384]	@ (8000e94 <parse_binary_gasbox+0x1fc>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
			while (ptr < nzeichen) {
 8000d18:	4b61      	ldr	r3, [pc, #388]	@ (8000ea0 <parse_binary_gasbox+0x208>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	7bfa      	ldrb	r2, [r7, #15]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d3cc      	bcc.n	8000cbe <parse_binary_gasbox+0x26>
			break;
 8000d24:	e0a6      	b.n	8000e74 <parse_binary_gasbox+0x1dc>

		case RMT_READ_PAKET: {
			while (ptr < nzeichen) {
				data = msg[ptr++];
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	1c5a      	adds	r2, r3, #1
 8000d2a:	73fa      	strb	r2, [r7, #15]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b58      	ldr	r3, [pc, #352]	@ (8000e90 <parse_binary_gasbox+0x1f8>)
 8000d30:	5c9b      	ldrb	r3, [r3, r2]
 8000d32:	717b      	strb	r3, [r7, #5]

				// avoid runaway frames
				if (lengthRx > RMT_MAX_PAKET_LENGTH) {
 8000d34:	4b58      	ldr	r3, [pc, #352]	@ (8000e98 <parse_binary_gasbox+0x200>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b0e      	cmp	r3, #14
 8000d3a:	d906      	bls.n	8000d4a <parse_binary_gasbox+0xb2>
					dleFlag = 0;
 8000d3c:	4b55      	ldr	r3, [pc, #340]	@ (8000e94 <parse_binary_gasbox+0x1fc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
					state = RMT_WAIT_FOR_PAKET_START;
 8000d42:	4b52      	ldr	r3, [pc, #328]	@ (8000e8c <parse_binary_gasbox+0x1f4>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
					break;
 8000d48:	e057      	b.n	8000dfa <parse_binary_gasbox+0x162>
				}

				if (dleFlag) {
 8000d4a:	4b52      	ldr	r3, [pc, #328]	@ (8000e94 <parse_binary_gasbox+0x1fc>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d034      	beq.n	8000dbc <parse_binary_gasbox+0x124>
					if (data == GB_DLE) {
 8000d52:	797b      	ldrb	r3, [r7, #5]
 8000d54:	2b3d      	cmp	r3, #61	@ 0x3d
 8000d56:	d113      	bne.n	8000d80 <parse_binary_gasbox+0xe8>
						// stuffed DLE as data
						dleFlag = 0;
 8000d58:	4b4e      	ldr	r3, [pc, #312]	@ (8000e94 <parse_binary_gasbox+0x1fc>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
						bufferRx[lengthRx++] = GB_DLE;
 8000d5e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e98 <parse_binary_gasbox+0x200>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	b2d1      	uxtb	r1, r2
 8000d66:	4a4c      	ldr	r2, [pc, #304]	@ (8000e98 <parse_binary_gasbox+0x200>)
 8000d68:	7011      	strb	r1, [r2, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea4 <parse_binary_gasbox+0x20c>)
 8000d6e:	213d      	movs	r1, #61	@ 0x3d
 8000d70:	5499      	strb	r1, [r3, r2]
						checksum += GB_DLE;
 8000d72:	4b4a      	ldr	r3, [pc, #296]	@ (8000e9c <parse_binary_gasbox+0x204>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	333d      	adds	r3, #61	@ 0x3d
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b48      	ldr	r3, [pc, #288]	@ (8000e9c <parse_binary_gasbox+0x204>)
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	e035      	b.n	8000dec <parse_binary_gasbox+0x154>
					} else if (data == GB_SOT) {
 8000d80:	797b      	ldrb	r3, [r7, #5]
 8000d82:	2b53      	cmp	r3, #83	@ 0x53
 8000d84:	d10c      	bne.n	8000da0 <parse_binary_gasbox+0x108>
						// unexpected new start → restart frame
						lengthRx = 0;
 8000d86:	4b44      	ldr	r3, [pc, #272]	@ (8000e98 <parse_binary_gasbox+0x200>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
						checksum = 0;
 8000d8c:	4b43      	ldr	r3, [pc, #268]	@ (8000e9c <parse_binary_gasbox+0x204>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000d92:	4b40      	ldr	r3, [pc, #256]	@ (8000e94 <parse_binary_gasbox+0x1fc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
						state = RMT_READ_PAKET;
 8000d98:	4b3c      	ldr	r3, [pc, #240]	@ (8000e8c <parse_binary_gasbox+0x1f4>)
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	701a      	strb	r2, [r3, #0]
						break;
 8000d9e:	e02c      	b.n	8000dfa <parse_binary_gasbox+0x162>
					} else if (data == GB_EOT) {
 8000da0:	797b      	ldrb	r3, [r7, #5]
 8000da2:	2b45      	cmp	r3, #69	@ 0x45
 8000da4:	d106      	bne.n	8000db4 <parse_binary_gasbox+0x11c>
						// proper trailer -> parse
						state = RMT_PARSE_PAKET;
 8000da6:	4b39      	ldr	r3, [pc, #228]	@ (8000e8c <parse_binary_gasbox+0x1f4>)
 8000da8:	2203      	movs	r2, #3
 8000daa:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000dac:	4b39      	ldr	r3, [pc, #228]	@ (8000e94 <parse_binary_gasbox+0x1fc>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
						break;
 8000db2:	e022      	b.n	8000dfa <parse_binary_gasbox+0x162>
					} else {
						dleFlag = 0; // unknown after DLE -> ignore
 8000db4:	4b37      	ldr	r3, [pc, #220]	@ (8000e94 <parse_binary_gasbox+0x1fc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e017      	b.n	8000dec <parse_binary_gasbox+0x154>
					}
				} else {
					if (data == GB_DLE) {
 8000dbc:	797b      	ldrb	r3, [r7, #5]
 8000dbe:	2b3d      	cmp	r3, #61	@ 0x3d
 8000dc0:	d103      	bne.n	8000dca <parse_binary_gasbox+0x132>
						dleFlag = 1;            // next is control
 8000dc2:	4b34      	ldr	r3, [pc, #208]	@ (8000e94 <parse_binary_gasbox+0x1fc>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	e010      	b.n	8000dec <parse_binary_gasbox+0x154>
					} else {
						bufferRx[lengthRx++] = data;
 8000dca:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <parse_binary_gasbox+0x200>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	b2d1      	uxtb	r1, r2
 8000dd2:	4a31      	ldr	r2, [pc, #196]	@ (8000e98 <parse_binary_gasbox+0x200>)
 8000dd4:	7011      	strb	r1, [r2, #0]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4a32      	ldr	r2, [pc, #200]	@ (8000ea4 <parse_binary_gasbox+0x20c>)
 8000dda:	797b      	ldrb	r3, [r7, #5]
 8000ddc:	5453      	strb	r3, [r2, r1]
						checksum += data;
 8000dde:	4b2f      	ldr	r3, [pc, #188]	@ (8000e9c <parse_binary_gasbox+0x204>)
 8000de0:	781a      	ldrb	r2, [r3, #0]
 8000de2:	797b      	ldrb	r3, [r7, #5]
 8000de4:	4413      	add	r3, r2
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e9c <parse_binary_gasbox+0x204>)
 8000dea:	701a      	strb	r2, [r3, #0]
			while (ptr < nzeichen) {
 8000dec:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea0 <parse_binary_gasbox+0x208>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	7bfa      	ldrb	r2, [r7, #15]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d396      	bcc.n	8000d26 <parse_binary_gasbox+0x8e>
					}
				}
			}
		}
			break;
 8000df8:	e03c      	b.n	8000e74 <parse_binary_gasbox+0x1dc>
 8000dfa:	e03b      	b.n	8000e74 <parse_binary_gasbox+0x1dc>

		case RMT_PARSE_PAKET: {
		    // Expect 4 payload bytes + 1 checksum (net length 5)
		    if (lengthRx == 5) {
 8000dfc:	4b26      	ldr	r3, [pc, #152]	@ (8000e98 <parse_binary_gasbox+0x200>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b05      	cmp	r3, #5
 8000e02:	d12a      	bne.n	8000e5a <parse_binary_gasbox+0x1c2>
		        uint8_t cmd    = bufferRx[0];
 8000e04:	4b27      	ldr	r3, [pc, #156]	@ (8000ea4 <parse_binary_gasbox+0x20c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	73bb      	strb	r3, [r7, #14]
		        uint8_t status = bufferRx[1];
 8000e0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <parse_binary_gasbox+0x20c>)
 8000e0c:	785b      	ldrb	r3, [r3, #1]
 8000e0e:	737b      	strb	r3, [r7, #13]
		        uint8_t pH     = bufferRx[2];
 8000e10:	4b24      	ldr	r3, [pc, #144]	@ (8000ea4 <parse_binary_gasbox+0x20c>)
 8000e12:	789b      	ldrb	r3, [r3, #2]
 8000e14:	733b      	strb	r3, [r7, #12]
		        uint8_t pL     = bufferRx[3];
 8000e16:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <parse_binary_gasbox+0x20c>)
 8000e18:	78db      	ldrb	r3, [r3, #3]
 8000e1a:	72fb      	strb	r3, [r7, #11]
		        uint8_t cks    = bufferRx[4];
 8000e1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <parse_binary_gasbox+0x20c>)
 8000e1e:	791b      	ldrb	r3, [r3, #4]
 8000e20:	72bb      	strb	r3, [r7, #10]

		        // checksum over the 4 payload bytes
		        uint8_t sum = (uint8_t)(cmd + status + pH + pL);
 8000e22:	7bba      	ldrb	r2, [r7, #14]
 8000e24:	7b7b      	ldrb	r3, [r7, #13]
 8000e26:	4413      	add	r3, r2
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	7b3b      	ldrb	r3, [r7, #12]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	7afb      	ldrb	r3, [r7, #11]
 8000e32:	4413      	add	r3, r2
 8000e34:	727b      	strb	r3, [r7, #9]

		        if (sum == cks) {
 8000e36:	7a7a      	ldrb	r2, [r7, #9]
 8000e38:	7abb      	ldrb	r3, [r7, #10]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d10d      	bne.n	8000e5a <parse_binary_gasbox+0x1c2>
		            uint16_t val = ((uint16_t)pH << 8) | pL;
 8000e3e:	7b3b      	ldrb	r3, [r7, #12]
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	7afb      	ldrb	r3, [r7, #11]
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	80fb      	strh	r3, [r7, #6]
		            // Publish to mailbox: if someone is waiting for this cmd, wake them.
		            gb_on_frame(cmd, status, val);
 8000e4e:	88fa      	ldrh	r2, [r7, #6]
 8000e50:	7b79      	ldrb	r1, [r7, #13]
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f8d3 	bl	8001000 <gb_on_frame>
		        }
		        // else: bad checksum -> drop silently (or raise an error flag if you want)
		    }
		    // reset for next frame
		    state     = RMT_WAIT_FOR_PAKET_START;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <parse_binary_gasbox+0x1f4>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
		    lengthRx  = 0;
 8000e60:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <parse_binary_gasbox+0x200>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
		    checksum  = 0;
 8000e66:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <parse_binary_gasbox+0x204>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
		    dleFlag   = 0;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <parse_binary_gasbox+0x1fc>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
		} break;
 8000e72:	bf00      	nop
		}
	} while (ptr < nzeichen);
 8000e74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <parse_binary_gasbox+0x208>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	7bfa      	ldrb	r2, [r7, #15]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f4ff af10 	bcc.w	8000ca2 <parse_binary_gasbox+0xa>
}
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000004 	.word	0x20000004
 8000e90:	200001f8 	.word	0x200001f8
 8000e94:	20000218 	.word	0x20000218
 8000e98:	20000217 	.word	0x20000217
 8000e9c:	20000219 	.word	0x20000219
 8000ea0:	20000207 	.word	0x20000207
 8000ea4:	20000208 	.word	0x20000208

08000ea8 <gb_sum8>:


static inline uint8_t gb_sum8(const uint8_t *p, int n){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
    uint32_t s = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<n; ++i) s += p[i];
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	e00a      	b.n	8000ed2 <gb_sum8+0x2a>
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4413      	add	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	dbf0      	blt.n	8000ebc <gb_sum8+0x14>
    return (uint8_t)s;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	b2db      	uxtb	r3, r3
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <gb_push_escaped>:

static inline void gb_push_escaped(uint8_t **wp, uint8_t b){
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	70fb      	strb	r3, [r7, #3]
    *(*wp)++ = b;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	1c59      	adds	r1, r3, #1
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	6011      	str	r1, [r2, #0]
 8000f00:	78fa      	ldrb	r2, [r7, #3]
 8000f02:	701a      	strb	r2, [r3, #0]
    if (b == GB_DLE) *(*wp)++ = b;  // double any DLE in-band
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	2b3d      	cmp	r3, #61	@ 0x3d
 8000f08:	d106      	bne.n	8000f18 <gb_push_escaped+0x2e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	1c59      	adds	r1, r3, #1
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6011      	str	r1, [r2, #0]
 8000f14:	78fa      	ldrb	r2, [r7, #3]
 8000f16:	701a      	strb	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <gasbox_send>:
 * Build + queue one framed command to the gasbox on UART4.
 * payload = [ cmd, 0x00, param_H, param_L ] ; cks = sum(payload)
 * Returns 1 if queued, 0 if TX ring had no room.
 */
uint8_t gasbox_send(uint8_t cmd, uint16_t param)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460a      	mov	r2, r1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4613      	mov	r3, r2
 8000f32:	80bb      	strh	r3, [r7, #4]
    uint8_t payload[4] = {
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	773b      	strb	r3, [r7, #28]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	777b      	strb	r3, [r7, #29]
        cmd,
        0x00,                               // reserved/status=0 in requests
        (uint8_t)(param >> 8),
 8000f3c:	88bb      	ldrh	r3, [r7, #4]
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	b2db      	uxtb	r3, r3
    uint8_t payload[4] = {
 8000f44:	77bb      	strb	r3, [r7, #30]
        (uint8_t)(param & 0xFF)
 8000f46:	88bb      	ldrh	r3, [r7, #4]
 8000f48:	b2db      	uxtb	r3, r3
    uint8_t payload[4] = {
 8000f4a:	77fb      	strb	r3, [r7, #31]
    };
    uint8_t cks = gb_sum8(payload, 4);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	2104      	movs	r1, #4
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffa8 	bl	8000ea8 <gb_sum8>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    // Worst case: 2 (DLE,S) + each of 5 bytes doubled + 2 (DLE,E) = 14
    uint8_t frame[16], *w = frame;
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	60bb      	str	r3, [r7, #8]

    *w++ = GB_DLE; *w++ = GB_SOT;
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	60ba      	str	r2, [r7, #8]
 8000f6a:	223d      	movs	r2, #61	@ 0x3d
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	60ba      	str	r2, [r7, #8]
 8000f74:	2253      	movs	r2, #83	@ 0x53
 8000f76:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<4; ++i) gb_push_escaped(&w, payload[i]);
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f7c:	e00d      	b.n	8000f9a <gasbox_send+0x76>
 8000f7e:	f107 021c 	add.w	r2, r7, #28
 8000f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f84:	4413      	add	r3, r2
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffab 	bl	8000eea <gb_push_escaped>
 8000f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f96:	3301      	adds	r3, #1
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	ddee      	ble.n	8000f7e <gasbox_send+0x5a>
    gb_push_escaped(&w, cks);
 8000fa0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff9d 	bl	8000eea <gb_push_escaped>
    *w++ = GB_DLE; *w++ = GB_EOT;
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	223d      	movs	r2, #61	@ 0x3d
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	60ba      	str	r2, [r7, #8]
 8000fc0:	2245      	movs	r2, #69	@ 0x45
 8000fc2:	701a      	strb	r2, [r3, #0]

    uint8_t len = (uint8_t)(w - frame);
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    // queue to UART4 ring
    if (!uartRB_Put(&uart4_rb, (char*)frame, len)) return 0;
 8000fd0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4808      	ldr	r0, [pc, #32]	@ (8000ffc <gasbox_send+0xd8>)
 8000fdc:	f002 fc62 	bl	80038a4 <uartRB_Put>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <gasbox_send+0xc6>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e003      	b.n	8000ff2 <gasbox_send+0xce>
    uartRB_KickTx(&uart4_rb);
 8000fea:	4804      	ldr	r0, [pc, #16]	@ (8000ffc <gasbox_send+0xd8>)
 8000fec:	f002 fc14 	bl	8003818 <uartRB_KickTx>
    return 1;
 8000ff0:	2301      	movs	r3, #1
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3728      	adds	r7, #40	@ 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000ac0 	.word	0x20000ac0

08001000 <gb_on_frame>:
    volatile uint8_t have;
    GbReply          r;
} gb_sync = {0};

void gb_on_frame(uint8_t cmd, uint8_t status, uint16_t value)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
 800100a:	460b      	mov	r3, r1
 800100c:	71bb      	strb	r3, [r7, #6]
 800100e:	4613      	mov	r3, r2
 8001010:	80bb      	strh	r3, [r7, #4]
    // deliver to a waiting xfer if it matches the command we sent
    if (gb_sync.waiting && gb_sync.expect_cmd == cmd) {
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <gb_on_frame+0x54>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d015      	beq.n	8001048 <gb_on_frame+0x48>
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <gb_on_frame+0x54>)
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	429a      	cmp	r2, r3
 8001026:	d10f      	bne.n	8001048 <gb_on_frame+0x48>
        gb_sync.r.cmd = cmd; gb_sync.r.status = status; gb_sync.r.value = value;
 8001028:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <gb_on_frame+0x54>)
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	7113      	strb	r3, [r2, #4]
 800102e:	4a09      	ldr	r2, [pc, #36]	@ (8001054 <gb_on_frame+0x54>)
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	7153      	strb	r3, [r2, #5]
 8001034:	4a07      	ldr	r2, [pc, #28]	@ (8001054 <gb_on_frame+0x54>)
 8001036:	88bb      	ldrh	r3, [r7, #4]
 8001038:	80d3      	strh	r3, [r2, #6]
        gb_sync.have = 1;
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <gb_on_frame+0x54>)
 800103c:	2201      	movs	r2, #1
 800103e:	709a      	strb	r2, [r3, #2]
        gb_sync.waiting = 0;
 8001040:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <gb_on_frame+0x54>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
        return;
 8001046:	bf00      	nop
    }
    // else: unsolicited → raise events / z_set_error(...) as you like
}
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	2000021c 	.word	0x2000021c

08001058 <gasbox_xfer>:
/**
 * Send one request and wait for its echo parsed by the always-on gb_sero_get().
 * Returns 1 on success (out filled), 0 on timeout or queue failure.
 */
uint8_t gasbox_xfer(uint8_t cmd, uint16_t param, GbReply *out, uint32_t timeout_ms)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60ba      	str	r2, [r7, #8]
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	460b      	mov	r3, r1
 8001068:	81bb      	strh	r3, [r7, #12]
    // only one outstanding transaction
    if (gb_sync.waiting) return 0;
 800106a:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <gasbox_xfer+0x90>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <gasbox_xfer+0x20>
 8001074:	2300      	movs	r3, #0
 8001076:	e032      	b.n	80010de <gasbox_xfer+0x86>

    gb_sync.expect_cmd = cmd;
 8001078:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <gasbox_xfer+0x90>)
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	7053      	strb	r3, [r2, #1]
    gb_sync.have = 0;
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <gasbox_xfer+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	709a      	strb	r2, [r3, #2]
    gb_sync.waiting = 1;
 8001084:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <gasbox_xfer+0x90>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]

    if (!gasbox_send(cmd, param)) { gb_sync.waiting = 0; return 0; }
 800108a:	89ba      	ldrh	r2, [r7, #12]
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff47 	bl	8000f24 <gasbox_send>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d104      	bne.n	80010a6 <gasbox_xfer+0x4e>
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <gasbox_xfer+0x90>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
 80010a2:	2300      	movs	r3, #0
 80010a4:	e01b      	b.n	80010de <gasbox_xfer+0x86>

    uint32_t t0 = HAL_GetTick();
 80010a6:	f003 fcd3 	bl	8004a50 <HAL_GetTick>
 80010aa:	6178      	str	r0, [r7, #20]
    while (!gb_sync.have) {
 80010ac:	e00c      	b.n	80010c8 <gasbox_xfer+0x70>
        if ((HAL_GetTick() - t0) > timeout_ms) {
 80010ae:	f003 fccf 	bl	8004a50 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d204      	bcs.n	80010c8 <gasbox_xfer+0x70>
            gb_sync.waiting = 0;
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <gasbox_xfer+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
            return 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e00a      	b.n	80010de <gasbox_xfer+0x86>
    while (!gb_sync.have) {
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <gasbox_xfer+0x90>)
 80010ca:	789b      	ldrb	r3, [r3, #2]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0ed      	beq.n	80010ae <gasbox_xfer+0x56>
        }
        // do NOT call gb_sero_get() here; main loop owns it
    }
    *out = gb_sync.r;
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <gasbox_xfer+0x90>)
 80010d6:	3304      	adds	r3, #4
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	6010      	str	r0, [r2, #0]
    return 1;
 80010dc:	2301      	movs	r3, #1
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000021c 	.word	0x2000021c

080010ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	@ 0x30
 80010f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001102:	4b64      	ldr	r3, [pc, #400]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	4a63      	ldr	r2, [pc, #396]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001108:	f043 0310 	orr.w	r3, r3, #16
 800110c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110e:	4b61      	ldr	r3, [pc, #388]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800111a:	4b5e      	ldr	r3, [pc, #376]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a5d      	ldr	r2, [pc, #372]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001120:	f043 0320 	orr.w	r3, r3, #32
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b5b      	ldr	r3, [pc, #364]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b58      	ldr	r3, [pc, #352]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4a57      	ldr	r2, [pc, #348]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4b55      	ldr	r3, [pc, #340]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b52      	ldr	r3, [pc, #328]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4a51      	ldr	r2, [pc, #324]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4b4f      	ldr	r3, [pc, #316]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b4c      	ldr	r3, [pc, #304]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a4b      	ldr	r2, [pc, #300]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b49      	ldr	r3, [pc, #292]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117a:	4b46      	ldr	r3, [pc, #280]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a45      	ldr	r2, [pc, #276]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001180:	f043 0308 	orr.w	r3, r3, #8
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b43      	ldr	r3, [pc, #268]	@ (8001294 <MX_GPIO_Init+0x1a8>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, UC_PUMP_START_Pin|UC_PUMP_STOP_Pin|UC_AUX_RESET_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 8001198:	483f      	ldr	r0, [pc, #252]	@ (8001298 <MX_GPIO_Init+0x1ac>)
 800119a:	f005 f817 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UC_CS_AUX1_GPIO_Port, UC_CS_AUX1_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011a4:	483d      	ldr	r0, [pc, #244]	@ (800129c <MX_GPIO_Init+0x1b0>)
 80011a6:	f005 f811 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UC_CS_AUX0_GPIO_Port, UC_CS_AUX0_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2110      	movs	r1, #16
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b2:	f005 f80b 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UC_CS_SPS_OUT_Pin|UC_CS_SPS_IN_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2106      	movs	r1, #6
 80011ba:	4839      	ldr	r0, [pc, #228]	@ (80012a0 <MX_GPIO_Init+0x1b4>)
 80011bc:	f005 f806 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UC_HEARTBEAT_GPIO_Port, UC_HEARTBEAT_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2108      	movs	r1, #8
 80011c4:	4837      	ldr	r0, [pc, #220]	@ (80012a4 <MX_GPIO_Init+0x1b8>)
 80011c6:	f005 f801 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = UC_PUMP_START_Pin|UC_PUMP_STOP_Pin|UC_AUX_RESET_Pin;
 80011ca:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	482d      	ldr	r0, [pc, #180]	@ (8001298 <MX_GPIO_Init+0x1ac>)
 80011e4:	f004 fd76 	bl	8005cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = UC_PUMP_WARNING_Pin|UC_PUMP_ALARM_Pin|UC_PUMP_REMOTE_Pin;
 80011e8:	2370      	movs	r3, #112	@ 0x70
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	4827      	ldr	r0, [pc, #156]	@ (8001298 <MX_GPIO_Init+0x1ac>)
 80011fc:	f004 fd6a 	bl	8005cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UC_CS_AUX1_Pin;
 8001200:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UC_CS_AUX1_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	4820      	ldr	r0, [pc, #128]	@ (800129c <MX_GPIO_Init+0x1b0>)
 800121a:	f004 fd5b 	bl	8005cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UC_CS_AUX0_Pin;
 800121e:	2310      	movs	r3, #16
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UC_CS_AUX0_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001238:	f004 fd4c 	bl	8005cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UC_CS_SPS_OUT_Pin|UC_CS_SPS_IN_Pin;
 800123c:	2306      	movs	r3, #6
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	4813      	ldr	r0, [pc, #76]	@ (80012a0 <MX_GPIO_Init+0x1b4>)
 8001254:	f004 fd3e 	bl	8005cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UC_HEARTBEAT_Pin;
 8001258:	2308      	movs	r3, #8
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UC_HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	480d      	ldr	r0, [pc, #52]	@ (80012a4 <MX_GPIO_Init+0x1b8>)
 8001270:	f004 fd30 	bl	8005cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = UC__5VOK_Pin|UC__12VOK_Pin;
 8001274:	2330      	movs	r3, #48	@ 0x30
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4807      	ldr	r0, [pc, #28]	@ (80012a4 <MX_GPIO_Init+0x1b8>)
 8001288:	f004 fd24 	bl	8005cd4 <HAL_GPIO_Init>

}
 800128c:	bf00      	nop
 800128e:	3730      	adds	r7, #48	@ 0x30
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000
 8001298:	48001000 	.word	0x48001000
 800129c:	48001400 	.word	0x48001400
 80012a0:	48000400 	.word	0x48000400
 80012a4:	48000c00 	.word	0x48000c00

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ac:	f003 fb6b 	bl	8004986 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b0:	f000 f83e 	bl	8001330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b4:	f7ff ff1a 	bl	80010ec <MX_GPIO_Init>
  MX_SPI1_Init();
 80012b8:	f001 fbec 	bl	8002a94 <MX_SPI1_Init>
  MX_UART4_Init();
 80012bc:	f002 fb74 	bl	80039a8 <MX_UART4_Init>
  MX_UART5_Init();
 80012c0:	f002 fbbe 	bl	8003a40 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80012c4:	f002 fc08 	bl	8003ad8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012c8:	f002 fc52 	bl	8003b70 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80012cc:	f002 fc9e 	bl	8003c0c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80012d0:	f002 f872 	bl	80033b8 <MX_TIM1_Init>
  MX_ADC5_Init();
 80012d4:	f7ff fbb0 	bl	8000a38 <MX_ADC5_Init>
  /* USER CODE BEGIN 2 */
  //--- Stacks fuer die Anfragen an Zentrale und MatchingCube vorbereiten ------
  priolist_init();
 80012d8:	f000 fadc 	bl	8001894 <priolist_init>
  stacks_init();
 80012dc:	f001 fdac 	bl	8002e38 <stacks_init>
  //--- Ergbenissstack fuer die Antworten von Zentrale und MatchingCube vorbereiten -------
  resultQueue_init();
 80012e0:	f001 fafa 	bl	80028d8 <resultQueue_init>
  uart_initAll();
 80012e4:	f002 f9c8 	bl	8003678 <uart_initAll>
  remote_init();
 80012e8:	f000 fb3c 	bl	8001964 <remote_init>
  zentrale_init();
 80012ec:	f002 feb6 	bl	800405c <zentrale_init>
  mio_init();
 80012f0:	f7ff fa20 	bl	8000734 <mio_init>
  mcp_init();
 80012f4:	f000 f884 	bl	8001400 <mcp_init>

  delay_ms(500);
 80012f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012fc:	f7ff fc76 	bl	8000bec <delay_ms>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		hw_sero_get();
 8001300:	f7ff f96e 	bl	80005e0 <hw_sero_get>
		remote_sero_get();
 8001304:	f000 fb5a 	bl	80019bc <remote_sero_get>
		gb_sero_get();
 8001308:	f7ff fc96 	bl	8000c38 <gb_sero_get>
		result_get_sero();
 800130c:	f001 fb96 	bl	8002a3c <result_get_sero>
		mio_sero_get();
 8001310:	f7ff fac0 	bl	8000894 <mio_sero_get>
		mcp_sero_get();
 8001314:	f000 f8d4 	bl	80014c0 <mcp_sero_get>

		zentrale();
 8001318:	f002 fee6 	bl	80040e8 <zentrale>

		hw_sero_set();
 800131c:	f7ff f968 	bl	80005f0 <hw_sero_set>
		mio_sero_set();
 8001320:	f7ff faa8 	bl	8000874 <mio_sero_set>
		mcp_sero_set();
 8001324:	f000 f8eb 	bl	80014fe <mcp_sero_set>
		z_cmd_scheduler();
 8001328:	f003 f90a 	bl	8004540 <z_cmd_scheduler>
		hw_sero_get();
 800132c:	bf00      	nop
 800132e:	e7e7      	b.n	8001300 <main+0x58>

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b094      	sub	sp, #80	@ 0x50
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0318 	add.w	r3, r7, #24
 800133a:	2238      	movs	r2, #56	@ 0x38
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f009 f93e 	bl	800a5c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001352:	2000      	movs	r0, #0
 8001354:	f004 ff6c 	bl	8006230 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001358:	2301      	movs	r3, #1
 800135a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800135c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001360:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001362:	2302      	movs	r3, #2
 8001364:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001366:	2303      	movs	r3, #3
 8001368:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800136a:	2301      	movs	r3, #1
 800136c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800136e:	2328      	movs	r3, #40	@ 0x28
 8001370:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001372:	2302      	movs	r3, #2
 8001374:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001376:	2302      	movs	r3, #2
 8001378:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800137a:	2302      	movs	r3, #2
 800137c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	4618      	mov	r0, r3
 8001384:	f005 f808 	bl	8006398 <HAL_RCC_OscConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800138e:	f000 f818 	bl	80013c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001392:	230f      	movs	r3, #15
 8001394:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001396:	2303      	movs	r3, #3
 8001398:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2104      	movs	r1, #4
 80013aa:	4618      	mov	r0, r3
 80013ac:	f005 fb06 	bl	80069bc <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80013b6:	f000 f804 	bl	80013c2 <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3750      	adds	r7, #80	@ 0x50
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c6:	b672      	cpsid	i
}
 80013c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ca:	bf00      	nop
 80013cc:	e7fd      	b.n	80013ca <Error_Handler+0x8>
	...

080013d0 <MCP_RESET_Pulse>:
static HAL_StatusTypeDef mcp_read_reg(uint8_t reg, uint8_t *val);
static HAL_StatusTypeDef mcp_update_bits(uint8_t reg, uint8_t mask, uint8_t value);
static inline void mcp_hb_toggle(void);
static uint8_t s_led_shadow = 0x00;

static inline void MCP_RESET_Pulse(void){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
    // Active-low reset pin
    HAL_GPIO_WritePin(UC_AUX_RESET_GPIO_Port, UC_AUX_RESET_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013da:	4808      	ldr	r0, [pc, #32]	@ (80013fc <MCP_RESET_Pulse+0x2c>)
 80013dc:	f004 fef6 	bl	80061cc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f003 fb41 	bl	8004a68 <HAL_Delay>
    HAL_GPIO_WritePin(UC_AUX_RESET_GPIO_Port, UC_AUX_RESET_Pin, GPIO_PIN_SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013ec:	4803      	ldr	r0, [pc, #12]	@ (80013fc <MCP_RESET_Pulse+0x2c>)
 80013ee:	f004 feed 	bl	80061cc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f003 fb38 	bl	8004a68 <HAL_Delay>
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	48001000 	.word	0x48001000

08001400 <mcp_init>:

HAL_StatusTypeDef mcp_init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
    MCP_RESET_Pulse();
 8001406:	f7ff ffe3 	bl	80013d0 <MCP_RESET_Pulse>

    // IOCON: BANK=0, SEQOP=1 (no sequential), HAEN=1 (optional)
    uint8_t iocon = IOCON_BANK | IOCON_MIRROR | IOCON_SEQOP | IOCON_DISSLW | IOCON_HAEN | IOCON_ODR | IOCON_INTPOL;
 800140a:	2308      	movs	r3, #8
 800140c:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef st;
    st = mcp_write_reg(MCP_IOCON, iocon); if (st != HAL_OK) return st;
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	4619      	mov	r1, r3
 8001412:	200a      	movs	r0, #10
 8001414:	f000 f8c8 	bl	80015a8 <mcp_write_reg>
 8001418:	4603      	mov	r3, r0
 800141a:	71bb      	strb	r3, [r7, #6]
 800141c:	79bb      	ldrb	r3, [r7, #6]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <mcp_init+0x26>
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	e045      	b.n	80014b2 <mcp_init+0xb2>

    // Directions: 1=input, 0=output
    // GPA: [7]=SPS_OUT_DISABLE(output=0), [3..0]=LEDs(output=0)
    uint8_t iodira = 0x00;            // all outputs by default
 8001426:	2300      	movs	r3, #0
 8001428:	717b      	strb	r3, [r7, #5]
    // If any GPA4..6 should be inputs, set bits.
    st = mcp_write_reg(MCP_IODIRA, iodira); if (st != HAL_OK) return st;
 800142a:	797b      	ldrb	r3, [r7, #5]
 800142c:	4619      	mov	r1, r3
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f8ba 	bl	80015a8 <mcp_write_reg>
 8001434:	4603      	mov	r3, r0
 8001436:	71bb      	strb	r3, [r7, #6]
 8001438:	79bb      	ldrb	r3, [r7, #6]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <mcp_init+0x42>
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	e037      	b.n	80014b2 <mcp_init+0xb2>

    // GPB: [1]=DIAG_INPUT(input=1), [0]=SPS_DIAG_OUTPUT(output=1)
    uint8_t iodirb = (1u<<1) | (1u<<0);         // only GPB0 and GPB1
 8001442:	2303      	movs	r3, #3
 8001444:	713b      	strb	r3, [r7, #4]
    st = mcp_write_reg(MCP_IODIRB, iodirb); if (st != HAL_OK) return st;
 8001446:	793b      	ldrb	r3, [r7, #4]
 8001448:	4619      	mov	r1, r3
 800144a:	2001      	movs	r0, #1
 800144c:	f000 f8ac 	bl	80015a8 <mcp_write_reg>
 8001450:	4603      	mov	r3, r0
 8001452:	71bb      	strb	r3, [r7, #6]
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <mcp_init+0x5e>
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	e029      	b.n	80014b2 <mcp_init+0xb2>

    // Pull-ups for inputs (enable for DIAG_INPUT on GPB1)
    st = mcp_write_reg(MCP_GPPUA, 0x00); if (st != HAL_OK) return st;  // none on A
 800145e:	2100      	movs	r1, #0
 8001460:	200c      	movs	r0, #12
 8001462:	f000 f8a1 	bl	80015a8 <mcp_write_reg>
 8001466:	4603      	mov	r3, r0
 8001468:	71bb      	strb	r3, [r7, #6]
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <mcp_init+0x74>
 8001470:	79bb      	ldrb	r3, [r7, #6]
 8001472:	e01e      	b.n	80014b2 <mcp_init+0xb2>
    st = mcp_write_reg(MCP_GPPUB, iodirb); if (st != HAL_OK) return st;
 8001474:	793b      	ldrb	r3, [r7, #4]
 8001476:	4619      	mov	r1, r3
 8001478:	200d      	movs	r0, #13
 800147a:	f000 f895 	bl	80015a8 <mcp_write_reg>
 800147e:	4603      	mov	r3, r0
 8001480:	71bb      	strb	r3, [r7, #6]
 8001482:	79bb      	ldrb	r3, [r7, #6]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <mcp_init+0x8c>
 8001488:	79bb      	ldrb	r3, [r7, #6]
 800148a:	e012      	b.n	80014b2 <mcp_init+0xb2>

    // Clear outputs to a known state: LEDs off
    st = mcp_write_reg(MCP_OLATA, 0x00); if (st != HAL_OK) return st;
 800148c:	2100      	movs	r1, #0
 800148e:	2014      	movs	r0, #20
 8001490:	f000 f88a 	bl	80015a8 <mcp_write_reg>
 8001494:	4603      	mov	r3, r0
 8001496:	71bb      	strb	r3, [r7, #6]
 8001498:	79bb      	ldrb	r3, [r7, #6]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <mcp_init+0xa2>
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	e007      	b.n	80014b2 <mcp_init+0xb2>

    // toggle´s first time
    (void)mcp_update_bits(MCP_OLATA, LED_MASK_A, s_led_shadow);
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <mcp_init+0xbc>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	210f      	movs	r1, #15
 80014aa:	2014      	movs	r0, #20
 80014ac:	f000 f8de 	bl	800166c <mcp_update_bits>

    return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000224 	.word	0x20000224

080014c0 <mcp_sero_get>:

void mcp_sero_get(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	// Read DIAG pins (GPB0/1) via MCP; returns 0..3, active-low (0 = fault), 0xFF on read error
	uint8_t raw = mcp_diag_read_b_raw();
 80014c6:	f000 f841 	bl	800154c <mcp_diag_read_b_raw>
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
	if (raw == 0xFF) return;
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2bff      	cmp	r3, #255	@ 0xff
 80014d2:	d010      	beq.n	80014f6 <mcp_sero_get+0x36>
	// Raise errors when DIAG lines are low
	if ((raw & (1u << 0)) == 0) {
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <mcp_sero_get+0x24>
		z_set_error(SG_ERR_DIAG_OUT);
 80014de:	200b      	movs	r0, #11
 80014e0:	f002 ff08 	bl	80042f4 <z_set_error>
	}
	if ((raw & (1u << 1)) == 0) {
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d104      	bne.n	80014f8 <mcp_sero_get+0x38>
		z_set_error(SG_ERR_DIAG_IN); // TODO: ask if this is enough or do we need to turn on the interrupt of the mcp
 80014ee:	200c      	movs	r0, #12
 80014f0:	f002 ff00 	bl	80042f4 <z_set_error>
 80014f4:	e000      	b.n	80014f8 <mcp_sero_get+0x38>
	if (raw == 0xFF) return;
 80014f6:	bf00      	nop
	}
}
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <mcp_sero_set>:


void mcp_sero_set(void) {
 80014fe:	b580      	push	{r7, lr}
 8001500:	af00      	add	r7, sp, #0

	if (ct_mcp_hbeat_null() == 1) {          // same timer API
 8001502:	f002 f83b 	bl	800357c <ct_mcp_hbeat_null>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <mcp_sero_set+0x1a>
		set_ct_mcp_hbeat(500);               // 500 ms -> ~1 Hz blink
 800150c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001510:	f002 f824 	bl	800355c <set_ct_mcp_hbeat>
		mcp_hb_toggle();                 // AD5592 heartbeat toggle
 8001514:	f000 f802 	bl	800151c <mcp_hb_toggle>
	}
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <mcp_hb_toggle>:

static inline void mcp_hb_toggle(void){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	s_led_shadow ^= LED_MASK_A;
 8001520:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <mcp_hb_toggle+0x2c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	f083 030f 	eor.w	r3, r3, #15
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <mcp_hb_toggle+0x2c>)
 800152c:	701a      	strb	r2, [r3, #0]
	// toggle leds for heartbeat
	mcp_update_bits(MCP_OLATA, LED_MASK_A, s_led_shadow & LED_MASK_A);
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <mcp_hb_toggle+0x2c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	b2db      	uxtb	r3, r3
 8001538:	461a      	mov	r2, r3
 800153a:	210f      	movs	r1, #15
 800153c:	2014      	movs	r0, #20
 800153e:	f000 f895 	bl	800166c <mcp_update_bits>
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000224 	.word	0x20000224

0800154c <mcp_diag_read_b_raw>:

// Returns GPB[1:0] raw (no inversion): bit0=DIAG_OUT, bit1=DIAG_IN
uint8_t mcp_diag_read_b_raw(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
    uint8_t v = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	71fb      	strb	r3, [r7, #7]
    if (mcp_read_reg(MCP_GPIOB, &v) != HAL_OK) return 0xFF;  // error sentinel
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	4619      	mov	r1, r3
 800155a:	2013      	movs	r0, #19
 800155c:	f000 f84e 	bl	80015fc <mcp_read_reg>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <mcp_diag_read_b_raw+0x1e>
 8001566:	23ff      	movs	r3, #255	@ 0xff
 8001568:	e003      	b.n	8001572 <mcp_diag_read_b_raw+0x26>
    return v & 0x03; // keep only GPB1..0
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	b2db      	uxtb	r3, r3
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <mcp_set_sps_out_disable>:

// SPS_OUT_DISABLE on GPA7 (set 1=disable? depends on wiring)
HAL_StatusTypeDef mcp_set_sps_out_disable(uint8_t disable)   // 0 or 1
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b084      	sub	sp, #16
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef st;
    st = mcp_update_bits(MCP_OLATA, (1u<<7), (disable ? 0 : (1u<<7)));
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <mcp_set_sps_out_disable+0x14>
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <mcp_set_sps_out_disable+0x16>
 800158e:	2380      	movs	r3, #128	@ 0x80
 8001590:	461a      	mov	r2, r3
 8001592:	2180      	movs	r1, #128	@ 0x80
 8001594:	2014      	movs	r0, #20
 8001596:	f000 f869 	bl	800166c <mcp_update_bits>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
    return st;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <mcp_write_reg>:


static HAL_StatusTypeDef mcp_write_reg(uint8_t reg, uint8_t val)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	460a      	mov	r2, r1
 80015b2:	71fb      	strb	r3, [r7, #7]
 80015b4:	4613      	mov	r3, r2
 80015b6:	71bb      	strb	r3, [r7, #6]
	HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80015b8:	2023      	movs	r0, #35	@ 0x23
 80015ba:	f004 fb70 	bl	8005c9e <HAL_NVIC_DisableIRQ>
    uint8_t tx[3] = { MCP_OP_WRITE, reg, val };
 80015be:	2340      	movs	r3, #64	@ 0x40
 80015c0:	733b      	strb	r3, [r7, #12]
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	737b      	strb	r3, [r7, #13]
 80015c6:	79bb      	ldrb	r3, [r7, #6]
 80015c8:	73bb      	strb	r3, [r7, #14]
    spi_access_device(spi_mcp_cs);
 80015ca:	2004      	movs	r0, #4
 80015cc:	f001 fb16 	bl	8002bfc <spi_access_device>
    HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi1, tx, sizeof(tx), 10);
 80015d0:	f107 010c 	add.w	r1, r7, #12
 80015d4:	230a      	movs	r3, #10
 80015d6:	2203      	movs	r2, #3
 80015d8:	4807      	ldr	r0, [pc, #28]	@ (80015f8 <mcp_write_reg+0x50>)
 80015da:	f005 ff2c 	bl	8007436 <HAL_SPI_Transmit>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]
    spi_release_device(spi_mcp_cs);
 80015e2:	2004      	movs	r0, #4
 80015e4:	f001 fb18 	bl	8002c18 <spi_release_device>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80015e8:	2023      	movs	r0, #35	@ 0x23
 80015ea:	f004 fb4a 	bl	8005c82 <HAL_NVIC_EnableIRQ>
    return st;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200006ac 	.word	0x200006ac

080015fc <mcp_read_reg>:

static HAL_StatusTypeDef mcp_read_reg(uint8_t reg, uint8_t *val)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af02      	add	r7, sp, #8
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8001608:	2023      	movs	r0, #35	@ 0x23
 800160a:	f004 fb48 	bl	8005c9e <HAL_NVIC_DisableIRQ>
    uint8_t tx[3] = { MCP_OP_READ, reg, 0x00 };
 800160e:	2341      	movs	r3, #65	@ 0x41
 8001610:	733b      	strb	r3, [r7, #12]
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	737b      	strb	r3, [r7, #13]
 8001616:	2300      	movs	r3, #0
 8001618:	73bb      	strb	r3, [r7, #14]
    uint8_t rx[3] = {0};
 800161a:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <mcp_read_reg+0x68>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	813b      	strh	r3, [r7, #8]
 8001620:	2300      	movs	r3, #0
 8001622:	72bb      	strb	r3, [r7, #10]
    spi_access_device(spi_mcp_cs);
 8001624:	2004      	movs	r0, #4
 8001626:	f001 fae9 	bl	8002bfc <spi_access_device>
    HAL_StatusTypeDef st = HAL_SPI_TransmitReceive(&hspi1, tx, rx, sizeof(tx), 10);
 800162a:	f107 0208 	add.w	r2, r7, #8
 800162e:	f107 010c 	add.w	r1, r7, #12
 8001632:	230a      	movs	r3, #10
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2303      	movs	r3, #3
 8001638:	480b      	ldr	r0, [pc, #44]	@ (8001668 <mcp_read_reg+0x6c>)
 800163a:	f006 f872 	bl	8007722 <HAL_SPI_TransmitReceive>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]
    spi_release_device(spi_mcp_cs);
 8001642:	2004      	movs	r0, #4
 8001644:	f001 fae8 	bl	8002c18 <spi_release_device>
    if (st == HAL_OK) *val = rx[2];
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <mcp_read_reg+0x58>
 800164e:	7aba      	ldrb	r2, [r7, #10]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	701a      	strb	r2, [r3, #0]
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001654:	2023      	movs	r0, #35	@ 0x23
 8001656:	f004 fb14 	bl	8005c82 <HAL_NVIC_EnableIRQ>
    return st;
 800165a:	7bfb      	ldrb	r3, [r7, #15]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	0800aef8 	.word	0x0800aef8
 8001668:	200006ac 	.word	0x200006ac

0800166c <mcp_update_bits>:

static HAL_StatusTypeDef mcp_update_bits(uint8_t reg, uint8_t mask, uint8_t value)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	460b      	mov	r3, r1
 8001678:	71bb      	strb	r3, [r7, #6]
 800167a:	4613      	mov	r3, r2
 800167c:	717b      	strb	r3, [r7, #5]
    uint8_t v;
    HAL_StatusTypeDef st = mcp_read_reg(reg, &v);
 800167e:	f107 020e 	add.w	r2, r7, #14
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ffb8 	bl	80015fc <mcp_read_reg>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <mcp_update_bits+0x2e>
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	e017      	b.n	80016ca <mcp_update_bits+0x5e>
    v = (v & ~mask) | (value & mask);
 800169a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800169e:	43db      	mvns	r3, r3
 80016a0:	b25a      	sxtb	r2, r3
 80016a2:	7bbb      	ldrb	r3, [r7, #14]
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	4013      	ands	r3, r2
 80016a8:	b25a      	sxtb	r2, r3
 80016aa:	7979      	ldrb	r1, [r7, #5]
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	400b      	ands	r3, r1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	73bb      	strb	r3, [r7, #14]
    return mcp_write_reg(reg, v);
 80016bc:	7bba      	ldrb	r2, [r7, #14]
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff70 	bl	80015a8 <mcp_write_reg>
 80016c8:	4603      	mov	r3, r0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <priolist_push>:
uint8_t priolist_pop (priority_item prio_list[], uint8_t priolevel_header[], uint8_t *firstunused, uint8_t priolevel_data);


//--------------FUNKTIONSDEFINITIONS----------------------------
uint8_t priolist_push (priority_item prio_list[], uint8_t priolist_length,  uint8_t priolevel_header[], uint8_t *firstunused, uint8_t stack_index, uint8_t priolevel_data)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b088      	sub	sp, #32
 80016d6:	af02      	add	r7, sp, #8
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	460b      	mov	r3, r1
 80016e0:	72fb      	strb	r3, [r7, #11]

	uint8_t flag = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]

	if (*firstunused == NONEXT )            //wenn es keinen freien Platz in der prio_list gibt,
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2bff      	cmp	r3, #255	@ 0xff
 80016ec:	d102      	bne.n	80016f4 <priolist_push+0x22>
	{
		flag = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]
 80016f2:	e034      	b.n	800175e <priolist_push+0x8c>
	}
	else
	{
		switch (priolevel_data)
 80016f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d022      	beq.n	8001742 <priolist_push+0x70>
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	dc2e      	bgt.n	800175e <priolist_push+0x8c>
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <priolist_push+0x38>
 8001704:	2b01      	cmp	r3, #1
 8001706:	d00e      	beq.n	8001726 <priolist_push+0x54>
 8001708:	e029      	b.n	800175e <priolist_push+0x8c>
		{
			case  PRIO_LEVEL0:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL0);
 800170a:	7af9      	ldrb	r1, [r7, #11]
 800170c:	2300      	movs	r3, #0
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 f824 	bl	8001768 <priolist_node_insert>
			flag = 1;
 8001720:	2301      	movs	r3, #1
 8001722:	75fb      	strb	r3, [r7, #23]
			break;
 8001724:	e01b      	b.n	800175e <priolist_push+0x8c>
			case  PRIO_LEVEL1:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL1);
 8001726:	7af9      	ldrb	r1, [r7, #11]
 8001728:	2301      	movs	r3, #1
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 f816 	bl	8001768 <priolist_node_insert>
			flag = 1;
 800173c:	2301      	movs	r3, #1
 800173e:	75fb      	strb	r3, [r7, #23]
			break;
 8001740:	e00d      	b.n	800175e <priolist_push+0x8c>
			case  PRIO_LEVEL2:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL2);
 8001742:	7af9      	ldrb	r1, [r7, #11]
 8001744:	2302      	movs	r3, #2
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	f897 3020 	ldrb.w	r3, [r7, #32]
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 f808 	bl	8001768 <priolist_node_insert>
			flag = 1;
 8001758:	2301      	movs	r3, #1
 800175a:	75fb      	strb	r3, [r7, #23]
			break;
 800175c:	bf00      	nop
		};
	};
	return flag;
 800175e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <priolist_node_insert>:

void priolist_node_insert(priority_item prio_list[], uint8_t priolist_length,  uint8_t priolevel_header[], uint8_t *unused_list, uint8_t stackindex, uint8_t priolevel)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	460b      	mov	r3, r1
 8001776:	72fb      	strb	r3, [r7, #11]
	uint8_t act_index ;
	uint8_t last;

	act_index = *unused_list;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	75bb      	strb	r3, [r7, #22]
	*unused_list = prio_list[act_index].next;
 800177e:	7dbb      	ldrb	r3, [r7, #22]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4413      	add	r3, r2
 8001786:	785a      	ldrb	r2, [r3, #1]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	701a      	strb	r2, [r3, #0]
	if (priolevel_header[priolevel] == NONEXT)                //Wenn die Prioritätsliste mit dem Level0 noch leer ist,
 800178c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2bff      	cmp	r3, #255	@ 0xff
 8001798:	d112      	bne.n	80017c0 <priolist_node_insert+0x58>
	{

		prio_list[act_index].stackindex = stackindex;
 800179a:	7dbb      	ldrb	r3, [r7, #22]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4413      	add	r3, r2
 80017a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017a6:	701a      	strb	r2, [r3, #0]
		priolevel_header[priolevel] = act_index;
 80017a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	7dba      	ldrb	r2, [r7, #22]
 80017b2:	701a      	strb	r2, [r3, #0]
		prio_list[act_index].next = NONEXT;
 80017b4:	7dbb      	ldrb	r3, [r7, #22]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	22ff      	movs	r2, #255	@ 0xff
 80017be:	705a      	strb	r2, [r3, #1]
	};
	if (priolevel_header[priolevel] < priolist_length)    //Wenn die Prioritätsliste schon existiert,
 80017c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	7afa      	ldrb	r2, [r7, #11]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d926      	bls.n	800181e <priolist_node_insert+0xb6>
	{
		prio_list[act_index].stackindex = stackindex;
 80017d0:	7dbb      	ldrb	r3, [r7, #22]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017dc:	701a      	strb	r2, [r3, #0]
		last =  priolevel_header[priolevel];                  //das erste Element der Prioritätsliste
 80017de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	75fb      	strb	r3, [r7, #23]
		while (prio_list[last].next != NONEXT)               //Suche den Ende der Prioritätsliste, um das neue Element hineinzufügen
 80017ea:	e005      	b.n	80017f8 <priolist_node_insert+0x90>
		{
			last = prio_list[last].next;
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4413      	add	r3, r2
 80017f4:	785b      	ldrb	r3, [r3, #1]
 80017f6:	75fb      	strb	r3, [r7, #23]
		while (prio_list[last].next != NONEXT)               //Suche den Ende der Prioritätsliste, um das neue Element hineinzufügen
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	785b      	ldrb	r3, [r3, #1]
 8001802:	2bff      	cmp	r3, #255	@ 0xff
 8001804:	d1f2      	bne.n	80017ec <priolist_node_insert+0x84>
		};
		prio_list[last].next = act_index;
 8001806:	7dfb      	ldrb	r3, [r7, #23]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	4413      	add	r3, r2
 800180e:	7dba      	ldrb	r2, [r7, #22]
 8001810:	705a      	strb	r2, [r3, #1]
		prio_list[act_index].next = NONEXT;
 8001812:	7dbb      	ldrb	r3, [r7, #22]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4413      	add	r3, r2
 800181a:	22ff      	movs	r2, #255	@ 0xff
 800181c:	705a      	strb	r2, [r3, #1]
	};
}
 800181e:	bf00      	nop
 8001820:	371c      	adds	r7, #28
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <priolist_pop>:

uint8_t priolist_pop (priority_item prio_list[], uint8_t priolevel_header[], uint8_t *firstunused, uint8_t priolevel_data)
{
 800182a:	b480      	push	{r7}
 800182c:	b087      	sub	sp, #28
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	70fb      	strb	r3, [r7, #3]
	uint8_t stack_index = NONEXT ;  //ungültige Wert, wenn die Prioritätsliste noch leer oder ein Fehler
 8001838:	23ff      	movs	r3, #255	@ 0xff
 800183a:	75fb      	strb	r3, [r7, #23]

	if (priolevel_header[priolevel_data] != NONEXT)
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	4413      	add	r3, r2
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2bff      	cmp	r3, #255	@ 0xff
 8001846:	d01d      	beq.n	8001884 <priolist_pop+0x5a>
	{
		uint8_t act_index = priolevel_header[priolevel_data];
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	75bb      	strb	r3, [r7, #22]
		stack_index = prio_list[act_index].stackindex;
 8001852:	7dbb      	ldrb	r3, [r7, #22]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4413      	add	r3, r2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	75fb      	strb	r3, [r7, #23]
		priolevel_header[priolevel_data] = prio_list[act_index].next;
 800185e:	7dbb      	ldrb	r3, [r7, #22]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	441a      	add	r2, r3
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	440b      	add	r3, r1
 800186c:	7852      	ldrb	r2, [r2, #1]
 800186e:	701a      	strb	r2, [r3, #0]

		prio_list[act_index].next = *firstunused;
 8001870:	7dbb      	ldrb	r3, [r7, #22]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	705a      	strb	r2, [r3, #1]
		*firstunused = act_index;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7dba      	ldrb	r2, [r7, #22]
 8001882:	701a      	strb	r2, [r3, #0]
	};

	return stack_index;
 8001884:	7dfb      	ldrb	r3, [r7, #23]
}
 8001886:	4618      	mov	r0, r3
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <priolist_init>:
//--------------FUNKTIONSDEKLARATIONS----------------------------------------------------------------------------------------
void priolist_init(void);

//--------------FUNKTIONSDEFINITIONS-----------------------------------------------------------------------------------------
void priolist_init(void)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	71fb      	strb	r3, [r7, #7]

	zpriolist_firstunused_index = 0;         //der gültige Wert liegt zwischen 0 und (Z_STACK_SIZE-1); wenn = NONEXT, d.h. keinen freien Platz in der Prioliste.
 800189e:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <priolist_init+0xb8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
	mcpriolist_firstunused_index = 0;		//der Wert liegt zwischen 0 und (MC_STACK_SIZE-1)
 80018a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001950 <priolist_init+0xbc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]

	for (i = 0;  i < PRIO_LEVELS; i++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	71fb      	strb	r3, [r7, #7]
 80018ae:	e00a      	b.n	80018c6 <priolist_init+0x32>
	{
		z_priolevel_header[i] = NONEXT;    //d.h. es gibt noch keinen Befehl in der i-te. Prioritätsliste.
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	4a28      	ldr	r2, [pc, #160]	@ (8001954 <priolist_init+0xc0>)
 80018b4:	21ff      	movs	r1, #255	@ 0xff
 80018b6:	54d1      	strb	r1, [r2, r3]

		mc_priolevel_header[i] = NONEXT;
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	4a27      	ldr	r2, [pc, #156]	@ (8001958 <priolist_init+0xc4>)
 80018bc:	21ff      	movs	r1, #255	@ 0xff
 80018be:	54d1      	strb	r1, [r2, r3]
	for (i = 0;  i < PRIO_LEVELS; i++)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	3301      	adds	r3, #1
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d9f1      	bls.n	80018b0 <priolist_init+0x1c>

	}

	for ( i= 0; i < Z_STACK_SIZE; i++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	71fb      	strb	r3, [r7, #7]
 80018d0:	e015      	b.n	80018fe <priolist_init+0x6a>
	{
		if (i == (Z_STACK_SIZE-1) )
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b1d      	cmp	r3, #29
 80018d6:	d106      	bne.n	80018e6 <priolist_init+0x52>
		{
			z_priolist[i].next = NONEXT;
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4a20      	ldr	r2, [pc, #128]	@ (800195c <priolist_init+0xc8>)
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	22ff      	movs	r2, #255	@ 0xff
 80018e2:	705a      	strb	r2, [r3, #1]
 80018e4:	e008      	b.n	80018f8 <priolist_init+0x64>
		}
		else
		{
			z_priolist[i].next = i+1;
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	79fa      	ldrb	r2, [r7, #7]
 80018ea:	3201      	adds	r2, #1
 80018ec:	b2d1      	uxtb	r1, r2
 80018ee:	4a1b      	ldr	r2, [pc, #108]	@ (800195c <priolist_init+0xc8>)
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	460a      	mov	r2, r1
 80018f6:	705a      	strb	r2, [r3, #1]
	for ( i= 0; i < Z_STACK_SIZE; i++)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	3301      	adds	r3, #1
 80018fc:	71fb      	strb	r3, [r7, #7]
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	2b1d      	cmp	r3, #29
 8001902:	d9e6      	bls.n	80018d2 <priolist_init+0x3e>
		};
	};

	for ( i= 0; i < MC_STACK_SIZE; i++)
 8001904:	2300      	movs	r3, #0
 8001906:	71fb      	strb	r3, [r7, #7]
 8001908:	e015      	b.n	8001936 <priolist_init+0xa2>
	{
		if (i == (MC_STACK_SIZE-1) )
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	2b13      	cmp	r3, #19
 800190e:	d106      	bne.n	800191e <priolist_init+0x8a>
		{
			mc_priolist[i].next = NONEXT;
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	4a13      	ldr	r2, [pc, #76]	@ (8001960 <priolist_init+0xcc>)
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	22ff      	movs	r2, #255	@ 0xff
 800191a:	705a      	strb	r2, [r3, #1]
 800191c:	e008      	b.n	8001930 <priolist_init+0x9c>
		}
		else
		{
			mc_priolist[i].next = i+1;
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	79fa      	ldrb	r2, [r7, #7]
 8001922:	3201      	adds	r2, #1
 8001924:	b2d1      	uxtb	r1, r2
 8001926:	4a0e      	ldr	r2, [pc, #56]	@ (8001960 <priolist_init+0xcc>)
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	460a      	mov	r2, r1
 800192e:	705a      	strb	r2, [r3, #1]
	for ( i= 0; i < MC_STACK_SIZE; i++)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	3301      	adds	r3, #1
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b13      	cmp	r3, #19
 800193a:	d9e6      	bls.n	800190a <priolist_init+0x76>
		};
	};
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000293 	.word	0x20000293
 8001950:	20000294 	.word	0x20000294
 8001954:	2000028c 	.word	0x2000028c
 8001958:	20000290 	.word	0x20000290
 800195c:	20000228 	.word	0x20000228
 8001960:	20000264 	.word	0x20000264

08001964 <remote_init>:
void output_ascii(int32_t);
void Binary_Search(uint8_t ncmd, char *key, uint16_t *cmdindex);
void output_ascii_cmdack(uint8_t verbose_flg, uint8_t crlf_flg, uint8_t cmd_ack);

// ---- public API ----
void remote_init(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	nzeichen = 0;
 8001968:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <remote_init+0x3c>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
	state = RMT_WAIT_FOR_PAKET_START;
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <remote_init+0x40>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
	lengthRx = 0;
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <remote_init+0x44>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
	dleFlag = 0;
 800197a:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <remote_init+0x48>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <remote_init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
	memset((void*) msg, 0, sizeof(msg));
 8001986:	220f      	movs	r2, #15
 8001988:	2100      	movs	r1, #0
 800198a:	480a      	ldr	r0, [pc, #40]	@ (80019b4 <remote_init+0x50>)
 800198c:	f008 fe18 	bl	800a5c0 <memset>
	memset(bufferRx, 0, sizeof(bufferRx));
 8001990:	220f      	movs	r2, #15
 8001992:	2100      	movs	r1, #0
 8001994:	4808      	ldr	r0, [pc, #32]	@ (80019b8 <remote_init+0x54>)
 8001996:	f008 fe13 	bl	800a5c0 <memset>
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200002ab 	.word	0x200002ab
 80019a4:	20000005 	.word	0x20000005
 80019a8:	200002bb 	.word	0x200002bb
 80019ac:	200002bc 	.word	0x200002bc
 80019b0:	200002bd 	.word	0x200002bd
 80019b4:	2000029c 	.word	0x2000029c
 80019b8:	200002ac 	.word	0x200002ac

080019bc <remote_sero_get>:

// Pull bytes from UART4 RX ring into msg[] and feed parser
void remote_sero_get(void) {
 80019bc:	b598      	push	{r3, r4, r7, lr}
 80019be:	af00      	add	r7, sp, #0
	nzeichen = 0;
 80019c0:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <remote_sero_get+0x54>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
	while ((rb_rx_used(&usart3_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 80019c6:	e00e      	b.n	80019e6 <remote_sero_get+0x2a>
		msg[nzeichen++] = (uint8_t) uartRB_Getc(&usart3_rb);   // legacy getc()
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <remote_sero_get+0x54>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	b2d1      	uxtb	r1, r2
 80019d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a10 <remote_sero_get+0x54>)
 80019d4:	7011      	strb	r1, [r2, #0]
 80019d6:	461c      	mov	r4, r3
 80019d8:	480e      	ldr	r0, [pc, #56]	@ (8001a14 <remote_sero_get+0x58>)
 80019da:	f001 ffb7 	bl	800394c <uartRB_Getc>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a18 <remote_sero_get+0x5c>)
 80019e4:	551a      	strb	r2, [r3, r4]
	while ((rb_rx_used(&usart3_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 80019e6:	480b      	ldr	r0, [pc, #44]	@ (8001a14 <remote_sero_get+0x58>)
 80019e8:	f001 feef 	bl	80037ca <rb_rx_used>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	dd04      	ble.n	80019fc <remote_sero_get+0x40>
 80019f2:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <remote_sero_get+0x54>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b0d      	cmp	r3, #13
 80019fa:	d9e5      	bls.n	80019c8 <remote_sero_get+0xc>
	}
	if (nzeichen)
 80019fc:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <remote_sero_get+0x54>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <remote_sero_get+0x4e>
		parse_ascii();
 8001a06:	f000 f809 	bl	8001a1c <parse_ascii>
}
 8001a0a:	bf00      	nop
 8001a0c:	bd98      	pop	{r3, r4, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200002ab 	.word	0x200002ab
 8001a14:	20000f70 	.word	0x20000f70
 8001a18:	2000029c 	.word	0x2000029c

08001a1c <parse_ascii>:

// das Paket in ASCII-Format analysieren und das Paket in den Stack einfügen.
void parse_ascii(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
	volatile static uint8_t pflag = 0;
	volatile static uint8_t eflag = 0;

	static uint8_t negativ_zahl = 0;

	uint8_t ptr = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	75fb      	strb	r3, [r7, #23]
	uint16_t cmd_index = BINARY_INDEX_MAX;
 8001a26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a2a:	82bb      	strh	r3, [r7, #20]

	stack_item stack_data;

	do {
		// wenn es ein Zeichen in UART1 Buffer gibt und die Automate nicht im Bearbeitungszustand ist
		if ((nzeichen > 0) && (a_state != proc_cmd)) {
 8001a2c:	4b9c      	ldr	r3, [pc, #624]	@ (8001ca0 <parse_ascii+0x284>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01d      	beq.n	8001a72 <parse_ascii+0x56>
 8001a36:	4b9b      	ldr	r3, [pc, #620]	@ (8001ca4 <parse_ascii+0x288>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d018      	beq.n	8001a72 <parse_ascii+0x56>
			nc = msg[ptr++];				// hole ein Zeichen aus msg-buffer
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	75fa      	strb	r2, [r7, #23]
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b97      	ldr	r3, [pc, #604]	@ (8001ca8 <parse_ascii+0x28c>)
 8001a4a:	5c9b      	ldrb	r3, [r3, r2]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b97      	ldr	r3, [pc, #604]	@ (8001cac <parse_ascii+0x290>)
 8001a50:	701a      	strb	r2, [r3, #0]
			if (echo == 1)// Wenn die Kommunikationsmode im Echo-Mode ist, wird es das Zeichen direkt wieder zurückgeben.
 8001a52:	4b97      	ldr	r3, [pc, #604]	@ (8001cb0 <parse_ascii+0x294>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d10d      	bne.n	8001a78 <parse_ascii+0x5c>
					{
				char1[0] = nc;
 8001a5c:	4b93      	ldr	r3, [pc, #588]	@ (8001cac <parse_ascii+0x290>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b94      	ldr	r3, [pc, #592]	@ (8001cb4 <parse_ascii+0x298>)
 8001a64:	701a      	strb	r2, [r3, #0]
				uartRB_Put(&usart3_rb, char1, 1);
 8001a66:	2201      	movs	r2, #1
 8001a68:	4992      	ldr	r1, [pc, #584]	@ (8001cb4 <parse_ascii+0x298>)
 8001a6a:	4893      	ldr	r0, [pc, #588]	@ (8001cb8 <parse_ascii+0x29c>)
 8001a6c:	f001 ff1a 	bl	80038a4 <uartRB_Put>
			if (echo == 1)// Wenn die Kommunikationsmode im Echo-Mode ist, wird es das Zeichen direkt wieder zurückgeben.
 8001a70:	e002      	b.n	8001a78 <parse_ascii+0x5c>
			}
		} else
			nc = 0;
 8001a72:	4b8e      	ldr	r3, [pc, #568]	@ (8001cac <parse_ascii+0x290>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]

		if (strlen(cmd) > 22)// Ascii-Kommando darf nicht länger als 22 Zeichen.
 8001a78:	4890      	ldr	r0, [pc, #576]	@ (8001cbc <parse_ascii+0x2a0>)
 8001a7a:	f7fe fbdb 	bl	8000234 <strlen>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b16      	cmp	r3, #22
 8001a82:	d90e      	bls.n	8001aa2 <parse_ascii+0x86>
				{
			strcpy(cmd, "");
 8001a84:	4b8d      	ldr	r3, [pc, #564]	@ (8001cbc <parse_ascii+0x2a0>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
			val = 0;
 8001a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8001cc0 <parse_ascii+0x2a4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
			pflag = 0;
 8001a90:	4b8c      	ldr	r3, [pc, #560]	@ (8001cc4 <parse_ascii+0x2a8>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
			eflag = 0;
 8001a96:	4b8c      	ldr	r3, [pc, #560]	@ (8001cc8 <parse_ascii+0x2ac>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
			a_state = get_cmd;
 8001a9c:	4b81      	ldr	r3, [pc, #516]	@ (8001ca4 <parse_ascii+0x288>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
		}

		switch (a_state) {
 8001aa2:	4b80      	ldr	r3, [pc, #512]	@ (8001ca4 <parse_ascii+0x288>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	f200 8301 	bhi.w	80020b2 <parse_ascii+0x696>
 8001ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab8 <parse_ascii+0x9c>)
 8001ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab6:	bf00      	nop
 8001ab8:	08001ac9 	.word	0x08001ac9
 8001abc:	08001bfd 	.word	0x08001bfd
 8001ac0:	08001cd9 	.word	0x08001cd9
 8001ac4:	08001d8b 	.word	0x08001d8b
		case get_cmd:
			if (((nc >= 65) && (nc <= 90)) || ((nc >= 48) && (nc <= 57))
 8001ac8:	4b78      	ldr	r3, [pc, #480]	@ (8001cac <parse_ascii+0x290>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b40      	cmp	r3, #64	@ 0x40
 8001ad0:	d904      	bls.n	8001adc <parse_ascii+0xc0>
 8001ad2:	4b76      	ldr	r3, [pc, #472]	@ (8001cac <parse_ascii+0x290>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b5a      	cmp	r3, #90	@ 0x5a
 8001ada:	d913      	bls.n	8001b04 <parse_ascii+0xe8>
 8001adc:	4b73      	ldr	r3, [pc, #460]	@ (8001cac <parse_ascii+0x290>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ae4:	d904      	bls.n	8001af0 <parse_ascii+0xd4>
 8001ae6:	4b71      	ldr	r3, [pc, #452]	@ (8001cac <parse_ascii+0x290>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b39      	cmp	r3, #57	@ 0x39
 8001aee:	d909      	bls.n	8001b04 <parse_ascii+0xe8>
					|| (nc == 58) || (nc == 63)) {
 8001af0:	4b6e      	ldr	r3, [pc, #440]	@ (8001cac <parse_ascii+0x290>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b3a      	cmp	r3, #58	@ 0x3a
 8001af8:	d004      	beq.n	8001b04 <parse_ascii+0xe8>
 8001afa:	4b6c      	ldr	r3, [pc, #432]	@ (8001cac <parse_ascii+0x290>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b02:	d109      	bne.n	8001b18 <parse_ascii+0xfc>
				char1[0] = nc;				//verkette char1 an cmd
 8001b04:	4b69      	ldr	r3, [pc, #420]	@ (8001cac <parse_ascii+0x290>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb4 <parse_ascii+0x298>)
 8001b0c:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 8001b0e:	4969      	ldr	r1, [pc, #420]	@ (8001cb4 <parse_ascii+0x298>)
 8001b10:	486a      	ldr	r0, [pc, #424]	@ (8001cbc <parse_ascii+0x2a0>)
 8001b12:	f008 fd5d 	bl	800a5d0 <strcat>
 8001b16:	e070      	b.n	8001bfa <parse_ascii+0x1de>
			} else if ((nc == 46) && (sloppy == 1)) {
 8001b18:	4b64      	ldr	r3, [pc, #400]	@ (8001cac <parse_ascii+0x290>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b20:	d10c      	bne.n	8001b3c <parse_ascii+0x120>
 8001b22:	4b6a      	ldr	r3, [pc, #424]	@ (8001ccc <parse_ascii+0x2b0>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d107      	bne.n	8001b3c <parse_ascii+0x120>
				char1[0] = 58;
 8001b2c:	4b61      	ldr	r3, [pc, #388]	@ (8001cb4 <parse_ascii+0x298>)
 8001b2e:	223a      	movs	r2, #58	@ 0x3a
 8001b30:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 8001b32:	4960      	ldr	r1, [pc, #384]	@ (8001cb4 <parse_ascii+0x298>)
 8001b34:	4861      	ldr	r0, [pc, #388]	@ (8001cbc <parse_ascii+0x2a0>)
 8001b36:	f008 fd4b 	bl	800a5d0 <strcat>
 8001b3a:	e05e      	b.n	8001bfa <parse_ascii+0x1de>
			} else if ((nc == 35) && (sloppy == 1)) {
 8001b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8001cac <parse_ascii+0x290>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b23      	cmp	r3, #35	@ 0x23
 8001b44:	d10c      	bne.n	8001b60 <parse_ascii+0x144>
 8001b46:	4b61      	ldr	r3, [pc, #388]	@ (8001ccc <parse_ascii+0x2b0>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d107      	bne.n	8001b60 <parse_ascii+0x144>
				char1[0] = 63;
 8001b50:	4b58      	ldr	r3, [pc, #352]	@ (8001cb4 <parse_ascii+0x298>)
 8001b52:	223f      	movs	r2, #63	@ 0x3f
 8001b54:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 8001b56:	4957      	ldr	r1, [pc, #348]	@ (8001cb4 <parse_ascii+0x298>)
 8001b58:	4858      	ldr	r0, [pc, #352]	@ (8001cbc <parse_ascii+0x2a0>)
 8001b5a:	f008 fd39 	bl	800a5d0 <strcat>
 8001b5e:	e04c      	b.n	8001bfa <parse_ascii+0x1de>
			} else if ((nc >= 97) && (nc <= 122)) {
 8001b60:	4b52      	ldr	r3, [pc, #328]	@ (8001cac <parse_ascii+0x290>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b60      	cmp	r3, #96	@ 0x60
 8001b68:	d910      	bls.n	8001b8c <parse_ascii+0x170>
 8001b6a:	4b50      	ldr	r3, [pc, #320]	@ (8001cac <parse_ascii+0x290>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b7a      	cmp	r3, #122	@ 0x7a
 8001b72:	d80b      	bhi.n	8001b8c <parse_ascii+0x170>
				char1[0] = (nc - 32);
 8001b74:	4b4d      	ldr	r3, [pc, #308]	@ (8001cac <parse_ascii+0x290>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	3b20      	subs	r3, #32
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb4 <parse_ascii+0x298>)
 8001b80:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 8001b82:	494c      	ldr	r1, [pc, #304]	@ (8001cb4 <parse_ascii+0x298>)
 8001b84:	484d      	ldr	r0, [pc, #308]	@ (8001cbc <parse_ascii+0x2a0>)
 8001b86:	f008 fd23 	bl	800a5d0 <strcat>
 8001b8a:	e036      	b.n	8001bfa <parse_ascii+0x1de>
			} else if (nc == 32) {
 8001b8c:	4b47      	ldr	r3, [pc, #284]	@ (8001cac <parse_ascii+0x290>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d10b      	bne.n	8001bae <parse_ascii+0x192>
				if (strlen(cmd) > 0) {
 8001b96:	4b49      	ldr	r3, [pc, #292]	@ (8001cbc <parse_ascii+0x2a0>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 828d 	beq.w	80020ba <parse_ascii+0x69e>
					val = 0;
 8001ba0:	4b47      	ldr	r3, [pc, #284]	@ (8001cc0 <parse_ascii+0x2a4>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
					a_state = get_sign;
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca4 <parse_ascii+0x288>)
 8001ba8:	2202      	movs	r2, #2
 8001baa:	701a      	strb	r2, [r3, #0]
				a_state = proc_cmd;
			} else {
				if (nc != 0)
					strcat(cmd, "*");
			}
			break;
 8001bac:	e285      	b.n	80020ba <parse_ascii+0x69e>
			} else if ((nc == 59) || ((nc == 13) && (sloppy == 1))) {
 8001bae:	4b3f      	ldr	r3, [pc, #252]	@ (8001cac <parse_ascii+0x290>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b3b      	cmp	r3, #59	@ 0x3b
 8001bb6:	d009      	beq.n	8001bcc <parse_ascii+0x1b0>
 8001bb8:	4b3c      	ldr	r3, [pc, #240]	@ (8001cac <parse_ascii+0x290>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b0d      	cmp	r3, #13
 8001bc0:	d108      	bne.n	8001bd4 <parse_ascii+0x1b8>
 8001bc2:	4b42      	ldr	r3, [pc, #264]	@ (8001ccc <parse_ascii+0x2b0>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d103      	bne.n	8001bd4 <parse_ascii+0x1b8>
				a_state = proc_cmd;
 8001bcc:	4b35      	ldr	r3, [pc, #212]	@ (8001ca4 <parse_ascii+0x288>)
 8001bce:	2204      	movs	r2, #4
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	e012      	b.n	8001bfa <parse_ascii+0x1de>
				if (nc != 0)
 8001bd4:	4b35      	ldr	r3, [pc, #212]	@ (8001cac <parse_ascii+0x290>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 826d 	beq.w	80020ba <parse_ascii+0x69e>
					strcat(cmd, "*");
 8001be0:	4836      	ldr	r0, [pc, #216]	@ (8001cbc <parse_ascii+0x2a0>)
 8001be2:	f7fe fb27 	bl	8000234 <strlen>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b34      	ldr	r3, [pc, #208]	@ (8001cbc <parse_ascii+0x2a0>)
 8001bec:	4413      	add	r3, r2
 8001bee:	4938      	ldr	r1, [pc, #224]	@ (8001cd0 <parse_ascii+0x2b4>)
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	8013      	strh	r3, [r2, #0]
			break;
 8001bf8:	e25f      	b.n	80020ba <parse_ascii+0x69e>
 8001bfa:	e25e      	b.n	80020ba <parse_ascii+0x69e>

		case get_sign:
			if (nc == 45) {
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001cac <parse_ascii+0x290>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c04:	d106      	bne.n	8001c14 <parse_ascii+0x1f8>
				negativ_zahl = 1;
 8001c06:	4b33      	ldr	r3, [pc, #204]	@ (8001cd4 <parse_ascii+0x2b8>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
				a_state = get_val;
 8001c0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ca4 <parse_ascii+0x288>)
 8001c0e:	2203      	movs	r2, #3
 8001c10:	701a      	strb	r2, [r3, #0]
				break;
 8001c12:	e257      	b.n	80020c4 <parse_ascii+0x6a8>
			} else if ((nc >= 48) && (nc <= 57) && (val < INT32_MAX)) //val < 1000000
 8001c14:	4b25      	ldr	r3, [pc, #148]	@ (8001cac <parse_ascii+0x290>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c1c:	d91f      	bls.n	8001c5e <parse_ascii+0x242>
 8001c1e:	4b23      	ldr	r3, [pc, #140]	@ (8001cac <parse_ascii+0x290>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b39      	cmp	r3, #57	@ 0x39
 8001c26:	d81a      	bhi.n	8001c5e <parse_ascii+0x242>
 8001c28:	4b25      	ldr	r3, [pc, #148]	@ (8001cc0 <parse_ascii+0x2a4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d014      	beq.n	8001c5e <parse_ascii+0x242>
					{
				val = val * 10 + (nc - 48);
 8001c34:	4b22      	ldr	r3, [pc, #136]	@ (8001cc0 <parse_ascii+0x2a4>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <parse_ascii+0x290>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	3b30      	subs	r3, #48	@ 0x30
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc0 <parse_ascii+0x2a4>)
 8001c4e:	6013      	str	r3, [r2, #0]
				pflag = 1;
 8001c50:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc4 <parse_ascii+0x2a8>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
				a_state = get_val;
 8001c56:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <parse_ascii+0x288>)
 8001c58:	2203      	movs	r2, #3
 8001c5a:	701a      	strb	r2, [r3, #0]
				break;
 8001c5c:	e232      	b.n	80020c4 <parse_ascii+0x6a8>
			} else if ((nc == 59) || (nc == 13)) {
 8001c5e:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <parse_ascii+0x290>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c66:	d004      	beq.n	8001c72 <parse_ascii+0x256>
 8001c68:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <parse_ascii+0x290>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b0d      	cmp	r3, #13
 8001c70:	d103      	bne.n	8001c7a <parse_ascii+0x25e>
				a_state = proc_cmd;
 8001c72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <parse_ascii+0x288>)
 8001c74:	2204      	movs	r2, #4
 8001c76:	701a      	strb	r2, [r3, #0]
					eflag = 1;
				}

			}
			;
			break;
 8001c78:	e221      	b.n	80020be <parse_ascii+0x6a2>
				if (nc != 0) {
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <parse_ascii+0x290>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 821c 	beq.w	80020be <parse_ascii+0x6a2>
					negativ_zahl = 0;
 8001c86:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <parse_ascii+0x2b8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
					val = 0;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <parse_ascii+0x2a4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
					pflag = 0;
 8001c92:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <parse_ascii+0x2a8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
					eflag = 1;
 8001c98:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <parse_ascii+0x2ac>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
			break;
 8001c9e:	e20e      	b.n	80020be <parse_ascii+0x6a2>
 8001ca0:	200002ab 	.word	0x200002ab
 8001ca4:	20000006 	.word	0x20000006
 8001ca8:	2000029c 	.word	0x2000029c
 8001cac:	200002be 	.word	0x200002be
 8001cb0:	20000297 	.word	0x20000297
 8001cb4:	200002c0 	.word	0x200002c0
 8001cb8:	20000f70 	.word	0x20000f70
 8001cbc:	200002c4 	.word	0x200002c4
 8001cc0:	200002e0 	.word	0x200002e0
 8001cc4:	200002e4 	.word	0x200002e4
 8001cc8:	200002e5 	.word	0x200002e5
 8001ccc:	20000298 	.word	0x20000298
 8001cd0:	0800aefc 	.word	0x0800aefc
 8001cd4:	200002e6 	.word	0x200002e6
		case get_val:

			if ((nc >= 48) && (nc <= 57) && (val < INT32_MAX))   //val < 1000000
 8001cd8:	4b94      	ldr	r3, [pc, #592]	@ (8001f2c <parse_ascii+0x510>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ce0:	d91c      	bls.n	8001d1c <parse_ascii+0x300>
 8001ce2:	4b92      	ldr	r3, [pc, #584]	@ (8001f2c <parse_ascii+0x510>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b39      	cmp	r3, #57	@ 0x39
 8001cea:	d817      	bhi.n	8001d1c <parse_ascii+0x300>
 8001cec:	4b90      	ldr	r3, [pc, #576]	@ (8001f30 <parse_ascii+0x514>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d011      	beq.n	8001d1c <parse_ascii+0x300>
					{
				val = val * 10 + (nc - 48);
 8001cf8:	4b8d      	ldr	r3, [pc, #564]	@ (8001f30 <parse_ascii+0x514>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b89      	ldr	r3, [pc, #548]	@ (8001f2c <parse_ascii+0x510>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	3b30      	subs	r3, #48	@ 0x30
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a87      	ldr	r2, [pc, #540]	@ (8001f30 <parse_ascii+0x514>)
 8001d12:	6013      	str	r3, [r2, #0]
				pflag = 1;
 8001d14:	4b87      	ldr	r3, [pc, #540]	@ (8001f34 <parse_ascii+0x518>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	e035      	b.n	8001d88 <parse_ascii+0x36c>
			} else if ((nc == 59) || (nc == 13)) {
 8001d1c:	4b83      	ldr	r3, [pc, #524]	@ (8001f2c <parse_ascii+0x510>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b3b      	cmp	r3, #59	@ 0x3b
 8001d24:	d004      	beq.n	8001d30 <parse_ascii+0x314>
 8001d26:	4b81      	ldr	r3, [pc, #516]	@ (8001f2c <parse_ascii+0x510>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b0d      	cmp	r3, #13
 8001d2e:	d118      	bne.n	8001d62 <parse_ascii+0x346>
				if (negativ_zahl) {
 8001d30:	4b81      	ldr	r3, [pc, #516]	@ (8001f38 <parse_ascii+0x51c>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d010      	beq.n	8001d5a <parse_ascii+0x33e>
					if (pflag == 0) {
 8001d38:	4b7e      	ldr	r3, [pc, #504]	@ (8001f34 <parse_ascii+0x518>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10b      	bne.n	8001d5a <parse_ascii+0x33e>
						negativ_zahl = 0;
 8001d42:	4b7d      	ldr	r3, [pc, #500]	@ (8001f38 <parse_ascii+0x51c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
						val = 0;
 8001d48:	4b79      	ldr	r3, [pc, #484]	@ (8001f30 <parse_ascii+0x514>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
						pflag = 0;
 8001d4e:	4b79      	ldr	r3, [pc, #484]	@ (8001f34 <parse_ascii+0x518>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
						eflag = 1;
 8001d54:	4b79      	ldr	r3, [pc, #484]	@ (8001f3c <parse_ascii+0x520>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
					}
				}
				a_state = proc_cmd;
 8001d5a:	4b79      	ldr	r3, [pc, #484]	@ (8001f40 <parse_ascii+0x524>)
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e012      	b.n	8001d88 <parse_ascii+0x36c>
			} else {
				if (nc != 0) {
 8001d62:	4b72      	ldr	r3, [pc, #456]	@ (8001f2c <parse_ascii+0x510>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 81aa 	beq.w	80020c2 <parse_ascii+0x6a6>
					negativ_zahl = 0;
 8001d6e:	4b72      	ldr	r3, [pc, #456]	@ (8001f38 <parse_ascii+0x51c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
					val = 0;
 8001d74:	4b6e      	ldr	r3, [pc, #440]	@ (8001f30 <parse_ascii+0x514>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
					pflag = 0;
 8001d7a:	4b6e      	ldr	r3, [pc, #440]	@ (8001f34 <parse_ascii+0x518>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
					eflag = 1;
 8001d80:	4b6e      	ldr	r3, [pc, #440]	@ (8001f3c <parse_ascii+0x520>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
				}

			}
			break;
 8001d86:	e19c      	b.n	80020c2 <parse_ascii+0x6a6>
 8001d88:	e19b      	b.n	80020c2 <parse_ascii+0x6a6>

		case proc_cmd:

			if (eflag == 1) {
 8001d8a:	4b6c      	ldr	r3, [pc, #432]	@ (8001f3c <parse_ascii+0x520>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d103      	bne.n	8001d9c <parse_ascii+0x380>
				ret = CMR_MALFORMATTEDCOMMAND;
 8001d94:	4b6b      	ldr	r3, [pc, #428]	@ (8001f44 <parse_ascii+0x528>)
 8001d96:	221f      	movs	r2, #31
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	e160      	b.n	800205e <parse_ascii+0x642>
			}
			//hier beginnt die Verarbeitung der Befehle zum Einstellen der Kommunikation
			else if (strcmp(cmd, "VERB") == 0) {
 8001d9c:	496a      	ldr	r1, [pc, #424]	@ (8001f48 <parse_ascii+0x52c>)
 8001d9e:	486b      	ldr	r0, [pc, #428]	@ (8001f4c <parse_ascii+0x530>)
 8001da0:	f7fe fa3e 	bl	8000220 <strcmp>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d12c      	bne.n	8001e04 <parse_ascii+0x3e8>
				if (pflag == 0) {
 8001daa:	4b62      	ldr	r3, [pc, #392]	@ (8001f34 <parse_ascii+0x518>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d103      	bne.n	8001dbc <parse_ascii+0x3a0>
					ret = CMR_MISSINGPARAMETER;
 8001db4:	4b63      	ldr	r3, [pc, #396]	@ (8001f44 <parse_ascii+0x528>)
 8001db6:	220c      	movs	r2, #12
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	e150      	b.n	800205e <parse_ascii+0x642>
				} else {
					switch (val) {
 8001dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8001f30 <parse_ascii+0x514>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d014      	beq.n	8001dee <parse_ascii+0x3d2>
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	dc19      	bgt.n	8001dfc <parse_ascii+0x3e0>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <parse_ascii+0x3b6>
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d007      	beq.n	8001de0 <parse_ascii+0x3c4>
 8001dd0:	e014      	b.n	8001dfc <parse_ascii+0x3e0>
					case 0:
						verbose = 0;
 8001dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f50 <parse_ascii+0x534>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8001f44 <parse_ascii+0x528>)
 8001dda:	2280      	movs	r2, #128	@ 0x80
 8001ddc:	701a      	strb	r2, [r3, #0]
						break;
 8001dde:	e13e      	b.n	800205e <parse_ascii+0x642>
					case 1:
						verbose = 1;
 8001de0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f50 <parse_ascii+0x534>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001de6:	4b57      	ldr	r3, [pc, #348]	@ (8001f44 <parse_ascii+0x528>)
 8001de8:	2280      	movs	r2, #128	@ 0x80
 8001dea:	701a      	strb	r2, [r3, #0]
						break;
 8001dec:	e137      	b.n	800205e <parse_ascii+0x642>
					case 2:
						verbose = 2;
 8001dee:	4b58      	ldr	r3, [pc, #352]	@ (8001f50 <parse_ascii+0x534>)
 8001df0:	2202      	movs	r2, #2
 8001df2:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001df4:	4b53      	ldr	r3, [pc, #332]	@ (8001f44 <parse_ascii+0x528>)
 8001df6:	2280      	movs	r2, #128	@ 0x80
 8001df8:	701a      	strb	r2, [r3, #0]
						break;
 8001dfa:	e130      	b.n	800205e <parse_ascii+0x642>
					default:
						ret = CMR_PARAMETERINVALID;
 8001dfc:	4b51      	ldr	r3, [pc, #324]	@ (8001f44 <parse_ascii+0x528>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
						break;
 8001e02:	e12c      	b.n	800205e <parse_ascii+0x642>
					};
				}
			} else if (strcmp(cmd, "ECHO") == 0) {
 8001e04:	4953      	ldr	r1, [pc, #332]	@ (8001f54 <parse_ascii+0x538>)
 8001e06:	4851      	ldr	r0, [pc, #324]	@ (8001f4c <parse_ascii+0x530>)
 8001e08:	f7fe fa0a 	bl	8000220 <strcmp>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d122      	bne.n	8001e58 <parse_ascii+0x43c>
				if (pflag == 0) {
 8001e12:	4b48      	ldr	r3, [pc, #288]	@ (8001f34 <parse_ascii+0x518>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d103      	bne.n	8001e24 <parse_ascii+0x408>
					ret = CMR_MISSINGPARAMETER;
 8001e1c:	4b49      	ldr	r3, [pc, #292]	@ (8001f44 <parse_ascii+0x528>)
 8001e1e:	220c      	movs	r2, #12
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e11c      	b.n	800205e <parse_ascii+0x642>
				} else {
					if (val == 0) {
 8001e24:	4b42      	ldr	r3, [pc, #264]	@ (8001f30 <parse_ascii+0x514>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d106      	bne.n	8001e3a <parse_ascii+0x41e>
						echo = 0;
 8001e2c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f58 <parse_ascii+0x53c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001e32:	4b44      	ldr	r3, [pc, #272]	@ (8001f44 <parse_ascii+0x528>)
 8001e34:	2280      	movs	r2, #128	@ 0x80
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e111      	b.n	800205e <parse_ascii+0x642>
					} else if (val == 1) {
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f30 <parse_ascii+0x514>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d106      	bne.n	8001e50 <parse_ascii+0x434>
						echo = 1;
 8001e42:	4b45      	ldr	r3, [pc, #276]	@ (8001f58 <parse_ascii+0x53c>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001e48:	4b3e      	ldr	r3, [pc, #248]	@ (8001f44 <parse_ascii+0x528>)
 8001e4a:	2280      	movs	r2, #128	@ 0x80
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e106      	b.n	800205e <parse_ascii+0x642>
					} else {
						ret = CMR_PARAMETERINVALID;
 8001e50:	4b3c      	ldr	r3, [pc, #240]	@ (8001f44 <parse_ascii+0x528>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	e102      	b.n	800205e <parse_ascii+0x642>
					}
				}
			} else if (strcmp(cmd, "CRLF") == 0) {
 8001e58:	4940      	ldr	r1, [pc, #256]	@ (8001f5c <parse_ascii+0x540>)
 8001e5a:	483c      	ldr	r0, [pc, #240]	@ (8001f4c <parse_ascii+0x530>)
 8001e5c:	f7fe f9e0 	bl	8000220 <strcmp>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d138      	bne.n	8001ed8 <parse_ascii+0x4bc>
				if (pflag == 0) {
 8001e66:	4b33      	ldr	r3, [pc, #204]	@ (8001f34 <parse_ascii+0x518>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d103      	bne.n	8001e78 <parse_ascii+0x45c>
					ret = CMR_MISSINGPARAMETER;
 8001e70:	4b34      	ldr	r3, [pc, #208]	@ (8001f44 <parse_ascii+0x528>)
 8001e72:	220c      	movs	r2, #12
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	e0f2      	b.n	800205e <parse_ascii+0x642>
				} else {
					if (val == 0) {
 8001e78:	4b2d      	ldr	r3, [pc, #180]	@ (8001f30 <parse_ascii+0x514>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d106      	bne.n	8001e8e <parse_ascii+0x472>
						crlf = 0;
 8001e80:	4b37      	ldr	r3, [pc, #220]	@ (8001f60 <parse_ascii+0x544>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001e86:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <parse_ascii+0x528>)
 8001e88:	2280      	movs	r2, #128	@ 0x80
 8001e8a:	701a      	strb	r2, [r3, #0]
 8001e8c:	e0e7      	b.n	800205e <parse_ascii+0x642>
					} else if (val == 1) {
 8001e8e:	4b28      	ldr	r3, [pc, #160]	@ (8001f30 <parse_ascii+0x514>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d106      	bne.n	8001ea4 <parse_ascii+0x488>
						crlf = 1;
 8001e96:	4b32      	ldr	r3, [pc, #200]	@ (8001f60 <parse_ascii+0x544>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001e9c:	4b29      	ldr	r3, [pc, #164]	@ (8001f44 <parse_ascii+0x528>)
 8001e9e:	2280      	movs	r2, #128	@ 0x80
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e0dc      	b.n	800205e <parse_ascii+0x642>
					} else if (val == 2) {
 8001ea4:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <parse_ascii+0x514>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d106      	bne.n	8001eba <parse_ascii+0x49e>
						crlf = 2;
 8001eac:	4b2c      	ldr	r3, [pc, #176]	@ (8001f60 <parse_ascii+0x544>)
 8001eae:	2202      	movs	r2, #2
 8001eb0:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001eb2:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <parse_ascii+0x528>)
 8001eb4:	2280      	movs	r2, #128	@ 0x80
 8001eb6:	701a      	strb	r2, [r3, #0]
 8001eb8:	e0d1      	b.n	800205e <parse_ascii+0x642>
					} else if (val == 3) {
 8001eba:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <parse_ascii+0x514>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d106      	bne.n	8001ed0 <parse_ascii+0x4b4>
						crlf = 3;
 8001ec2:	4b27      	ldr	r3, [pc, #156]	@ (8001f60 <parse_ascii+0x544>)
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f44 <parse_ascii+0x528>)
 8001eca:	2280      	movs	r2, #128	@ 0x80
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	e0c6      	b.n	800205e <parse_ascii+0x642>
					} else {
						ret = CMR_PARAMETERINVALID;
 8001ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f44 <parse_ascii+0x528>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	e0c2      	b.n	800205e <parse_ascii+0x642>
					}
				}
			} else if (strcmp(cmd, "SLOPPY") == 0) {
 8001ed8:	4922      	ldr	r1, [pc, #136]	@ (8001f64 <parse_ascii+0x548>)
 8001eda:	481c      	ldr	r0, [pc, #112]	@ (8001f4c <parse_ascii+0x530>)
 8001edc:	f7fe f9a0 	bl	8000220 <strcmp>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d142      	bne.n	8001f6c <parse_ascii+0x550>
				if (pflag == 0) {
 8001ee6:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <parse_ascii+0x518>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d103      	bne.n	8001ef8 <parse_ascii+0x4dc>
					ret = CMR_MISSINGPARAMETER;
 8001ef0:	4b14      	ldr	r3, [pc, #80]	@ (8001f44 <parse_ascii+0x528>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	e0b2      	b.n	800205e <parse_ascii+0x642>
				} else {
					if (val == 0) {
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <parse_ascii+0x514>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d106      	bne.n	8001f0e <parse_ascii+0x4f2>
						sloppy = 0;
 8001f00:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <parse_ascii+0x54c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001f06:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <parse_ascii+0x528>)
 8001f08:	2280      	movs	r2, #128	@ 0x80
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	e0a7      	b.n	800205e <parse_ascii+0x642>
					} else if (val == 1) {
 8001f0e:	4b08      	ldr	r3, [pc, #32]	@ (8001f30 <parse_ascii+0x514>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d106      	bne.n	8001f24 <parse_ascii+0x508>
						sloppy = 1;
 8001f16:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <parse_ascii+0x54c>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001f1c:	4b09      	ldr	r3, [pc, #36]	@ (8001f44 <parse_ascii+0x528>)
 8001f1e:	2280      	movs	r2, #128	@ 0x80
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	e09c      	b.n	800205e <parse_ascii+0x642>
					} else {
						ret = CMR_PARAMETERINVALID;
 8001f24:	4b07      	ldr	r3, [pc, #28]	@ (8001f44 <parse_ascii+0x528>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	e098      	b.n	800205e <parse_ascii+0x642>
 8001f2c:	200002be 	.word	0x200002be
 8001f30:	200002e0 	.word	0x200002e0
 8001f34:	200002e4 	.word	0x200002e4
 8001f38:	200002e6 	.word	0x200002e6
 8001f3c:	200002e5 	.word	0x200002e5
 8001f40:	20000006 	.word	0x20000006
 8001f44:	200002e7 	.word	0x200002e7
 8001f48:	0800af00 	.word	0x0800af00
 8001f4c:	200002c4 	.word	0x200002c4
 8001f50:	20000295 	.word	0x20000295
 8001f54:	0800af08 	.word	0x0800af08
 8001f58:	20000297 	.word	0x20000297
 8001f5c:	0800af10 	.word	0x0800af10
 8001f60:	20000296 	.word	0x20000296
 8001f64:	0800af18 	.word	0x0800af18
 8001f68:	20000298 	.word	0x20000298
					}
				}
			} else if (strcmp(cmd, "IBL") == 0) {
 8001f6c:	495b      	ldr	r1, [pc, #364]	@ (80020dc <parse_ascii+0x6c0>)
 8001f6e:	485c      	ldr	r0, [pc, #368]	@ (80020e0 <parse_ascii+0x6c4>)
 8001f70:	f7fe f956 	bl	8000220 <strcmp>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10f      	bne.n	8001f9a <parse_ascii+0x57e>
				verbose = 2;
 8001f7a:	4b5a      	ldr	r3, [pc, #360]	@ (80020e4 <parse_ascii+0x6c8>)
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	701a      	strb	r2, [r3, #0]
				echo = 1;
 8001f80:	4b59      	ldr	r3, [pc, #356]	@ (80020e8 <parse_ascii+0x6cc>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
				crlf = 3;
 8001f86:	4b59      	ldr	r3, [pc, #356]	@ (80020ec <parse_ascii+0x6d0>)
 8001f88:	2203      	movs	r2, #3
 8001f8a:	701a      	strb	r2, [r3, #0]
				sloppy = 1;
 8001f8c:	4b58      	ldr	r3, [pc, #352]	@ (80020f0 <parse_ascii+0x6d4>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
				ret = CMR_SUCCESSFULL;
 8001f92:	4b58      	ldr	r3, [pc, #352]	@ (80020f4 <parse_ascii+0x6d8>)
 8001f94:	2280      	movs	r2, #128	@ 0x80
 8001f96:	701a      	strb	r2, [r3, #0]
 8001f98:	e061      	b.n	800205e <parse_ascii+0x642>
			} else if (strcmp(cmd, "") == 0) {
 8001f9a:	4b51      	ldr	r3, [pc, #324]	@ (80020e0 <parse_ascii+0x6c4>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d103      	bne.n	8001faa <parse_ascii+0x58e>
				ret = CMR_SEMICOLONONLY;
 8001fa2:	4b54      	ldr	r3, [pc, #336]	@ (80020f4 <parse_ascii+0x6d8>)
 8001fa4:	22ff      	movs	r2, #255	@ 0xff
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e059      	b.n	800205e <parse_ascii+0x642>
			}
			//die anderen ASCII-Befehle werden per Binäre-Suche-Funktion eine interne Befehlnummer und ein Attribut zugeordnet
			//und in den Stack eingefügt.
			else {
				Binary_Search(ASCII_CMD_MAX, cmd, &cmd_index);
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	461a      	mov	r2, r3
 8001fb0:	494b      	ldr	r1, [pc, #300]	@ (80020e0 <parse_ascii+0x6c4>)
 8001fb2:	201d      	movs	r0, #29
 8001fb4:	f000 fb68 	bl	8002688 <Binary_Search>
				//uart0_puts(cmd);
				//uart0_puti(cmd_index);

				if (cmd_index != BINARY_INDEX_MAX) {
 8001fb8:	8abb      	ldrh	r3, [r7, #20]
 8001fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fbe:	d04b      	beq.n	8002058 <parse_ascii+0x63c>
					stack_data.cmd_sender = Q_RS232_ASCII;
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	713b      	strb	r3, [r7, #4]
					stack_data.cmd_index = cmd_index;
 8001fc4:	8abb      	ldrh	r3, [r7, #20]
 8001fc6:	80fb      	strh	r3, [r7, #6]
					stack_data.cmd_ack = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	723b      	strb	r3, [r7, #8]
					stack_data.next = NONEXT;
 8001fcc:	23ff      	movs	r3, #255	@ 0xff
 8001fce:	743b      	strb	r3, [r7, #16]
					stack_data.prio = PRIO_LEVEL1;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	747b      	strb	r3, [r7, #17]

					if (cmd_index & 1) {
 8001fd4:	8abb      	ldrh	r3, [r7, #20]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d02f      	beq.n	800203e <parse_ascii+0x622>

						if ((pflag == 1)) {
 8001fde:	4b46      	ldr	r3, [pc, #280]	@ (80020f8 <parse_ascii+0x6dc>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d116      	bne.n	8002016 <parse_ascii+0x5fa>
							if (negativ_zahl) {
 8001fe8:	4b44      	ldr	r3, [pc, #272]	@ (80020fc <parse_ascii+0x6e0>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <parse_ascii+0x5de>
								stack_data.parameter = -val;
 8001ff0:	4b43      	ldr	r3, [pc, #268]	@ (8002100 <parse_ascii+0x6e4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	425b      	negs	r3, r3
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e002      	b.n	8002000 <parse_ascii+0x5e4>
							} else {
								stack_data.parameter = val;
 8001ffa:	4b41      	ldr	r3, [pc, #260]	@ (8002100 <parse_ascii+0x6e4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]
							}

							stack_data.rwflg = WRITE;
 8002000:	2302      	movs	r3, #2
 8002002:	74bb      	strb	r3, [r7, #18]
							ret = stack_insert_sero(stack_data);
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002008:	f001 f884 	bl	8003114 <stack_insert_sero>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	4b38      	ldr	r3, [pc, #224]	@ (80020f4 <parse_ascii+0x6d8>)
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	e023      	b.n	800205e <parse_ascii+0x642>
							//uart0_puti(ret);
							//uart0_puti(stack_data.cmd_index);

						} else if (cmd_index == CMD_RESET_ERROR) {
 8002016:	8abb      	ldrh	r3, [r7, #20]
 8002018:	2b09      	cmp	r3, #9
 800201a:	d10c      	bne.n	8002036 <parse_ascii+0x61a>
							stack_data.parameter = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
							stack_data.rwflg = WRITE;
 8002020:	2302      	movs	r3, #2
 8002022:	74bb      	strb	r3, [r7, #18]
							ret = stack_insert_sero(stack_data);
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002028:	f001 f874 	bl	8003114 <stack_insert_sero>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	4b30      	ldr	r3, [pc, #192]	@ (80020f4 <parse_ascii+0x6d8>)
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	e013      	b.n	800205e <parse_ascii+0x642>
						} else {
							{
								ret = CMR_MISSINGPARAMETER;
 8002036:	4b2f      	ldr	r3, [pc, #188]	@ (80020f4 <parse_ascii+0x6d8>)
 8002038:	220c      	movs	r2, #12
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	e00f      	b.n	800205e <parse_ascii+0x642>
							}
						};
					} else  //Lese-Operation
					{
						stack_data.parameter = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
						stack_data.rwflg = READ;
 8002042:	2301      	movs	r3, #1
 8002044:	74bb      	strb	r3, [r7, #18]
						ret = stack_insert_sero(stack_data);
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800204a:	f001 f863 	bl	8003114 <stack_insert_sero>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	4b28      	ldr	r3, [pc, #160]	@ (80020f4 <parse_ascii+0x6d8>)
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e002      	b.n	800205e <parse_ascii+0x642>
					};

				} else //Falls cmd_index = ASCII_CMD_MAX, d.h. der Befehl ist ungültig.
				{
					ret = CMR_UNKNOWNCOMMAND;
 8002058:	4b26      	ldr	r3, [pc, #152]	@ (80020f4 <parse_ascii+0x6d8>)
 800205a:	2206      	movs	r2, #6
 800205c:	701a      	strb	r2, [r3, #0]
				};
			}
			;

			if (ret != STACK_CMDINSTACK) {
 800205e:	4b25      	ldr	r3, [pc, #148]	@ (80020f4 <parse_ascii+0x6d8>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b11      	cmp	r3, #17
 8002066:	d00b      	beq.n	8002080 <parse_ascii+0x664>
				output_ascii_cmdack(verbose, crlf, ret);
 8002068:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <parse_ascii+0x6c8>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	4a1f      	ldr	r2, [pc, #124]	@ (80020ec <parse_ascii+0x6d0>)
 8002070:	7812      	ldrb	r2, [r2, #0]
 8002072:	b2d1      	uxtb	r1, r2
 8002074:	4a1f      	ldr	r2, [pc, #124]	@ (80020f4 <parse_ascii+0x6d8>)
 8002076:	7812      	ldrb	r2, [r2, #0]
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f8de 	bl	800223c <output_ascii_cmdack>
			}
			;

			uartRB_KickTx(&usart3_rb);
 8002080:	4820      	ldr	r0, [pc, #128]	@ (8002104 <parse_ascii+0x6e8>)
 8002082:	f001 fbc9 	bl	8003818 <uartRB_KickTx>
			strcpy(cmd, "");
 8002086:	4b16      	ldr	r3, [pc, #88]	@ (80020e0 <parse_ascii+0x6c4>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
			val = 0;
 800208c:	4b1c      	ldr	r3, [pc, #112]	@ (8002100 <parse_ascii+0x6e4>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
			ret = 0;
 8002092:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <parse_ascii+0x6d8>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
			pflag = 0;
 8002098:	4b17      	ldr	r3, [pc, #92]	@ (80020f8 <parse_ascii+0x6dc>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
			eflag = 0;
 800209e:	4b1a      	ldr	r3, [pc, #104]	@ (8002108 <parse_ascii+0x6ec>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
			negativ_zahl = 0;
 80020a4:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <parse_ascii+0x6e0>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]

			a_state = get_cmd;
 80020aa:	4b18      	ldr	r3, [pc, #96]	@ (800210c <parse_ascii+0x6f0>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
			break;
 80020b0:	e008      	b.n	80020c4 <parse_ascii+0x6a8>

		default:
			a_state = get_cmd;
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <parse_ascii+0x6f0>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
			break;
 80020b8:	e004      	b.n	80020c4 <parse_ascii+0x6a8>
			break;
 80020ba:	bf00      	nop
 80020bc:	e002      	b.n	80020c4 <parse_ascii+0x6a8>
			break;
 80020be:	bf00      	nop
 80020c0:	e000      	b.n	80020c4 <parse_ascii+0x6a8>
			break;
 80020c2:	bf00      	nop

		//	char1[0]=nc;
		//  if(nzeichen >0)	uart1_put(char1, 1);
		//	versandstart1();

	} while (ptr < nzeichen);
 80020c4:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <parse_ascii+0x6f4>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	7dfa      	ldrb	r2, [r7, #23]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	f4ff acad 	bcc.w	8001a2c <parse_ascii+0x10>
}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	0800af20 	.word	0x0800af20
 80020e0:	200002c4 	.word	0x200002c4
 80020e4:	20000295 	.word	0x20000295
 80020e8:	20000297 	.word	0x20000297
 80020ec:	20000296 	.word	0x20000296
 80020f0:	20000298 	.word	0x20000298
 80020f4:	200002e7 	.word	0x200002e7
 80020f8:	200002e4 	.word	0x200002e4
 80020fc:	200002e6 	.word	0x200002e6
 8002100:	200002e0 	.word	0x200002e0
 8002104:	20000f70 	.word	0x20000f70
 8002108:	200002e5 	.word	0x200002e5
 800210c:	20000006 	.word	0x20000006
 8002110:	200002ab 	.word	0x200002ab

08002114 <serialSendAnswer>:

void serialSendAnswer(uint8_t *message) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t n = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	77bb      	strb	r3, [r7, #30]
	uint8_t checksum = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	777b      	strb	r3, [r7, #29]
	char buffer[RMT_MAX_PAKET_LENGTH + 1];

	if ((message[2] == 0x00) || (message[2] == 0x02) || (message[2] == 0x03)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3302      	adds	r3, #2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00e      	beq.n	800214c <serialSendAnswer+0x38>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3302      	adds	r3, #2
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d009      	beq.n	800214c <serialSendAnswer+0x38>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3302      	adds	r3, #2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d004      	beq.n	800214c <serialSendAnswer+0x38>
			|| (message[2] == 0x0A)) //für die Kompabilität vom altem MatchingCube-Programm. später zu löschen
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3302      	adds	r3, #2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b0a      	cmp	r3, #10
 800214a:	d108      	bne.n	800215e <serialSendAnswer+0x4a>
			{
		message[2] |= 0x80;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3302      	adds	r3, #2
 8002150:	781a      	ldrb	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3302      	adds	r3, #2
 8002156:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]
	}

	buffer[n++] = RMT_DLE;
 800215e:	7fbb      	ldrb	r3, [r7, #30]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	77ba      	strb	r2, [r7, #30]
 8002164:	3320      	adds	r3, #32
 8002166:	443b      	add	r3, r7
 8002168:	223d      	movs	r2, #61	@ 0x3d
 800216a:	f803 2c14 	strb.w	r2, [r3, #-20]
	buffer[n++] = RMT_SOT;
 800216e:	7fbb      	ldrb	r3, [r7, #30]
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	77ba      	strb	r2, [r7, #30]
 8002174:	3320      	adds	r3, #32
 8002176:	443b      	add	r3, r7
 8002178:	2253      	movs	r2, #83	@ 0x53
 800217a:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < (CMR_DATAPAKET_LENGTH - 1); i++) {
 800217e:	2300      	movs	r3, #0
 8002180:	77fb      	strb	r3, [r7, #31]
 8002182:	e025      	b.n	80021d0 <serialSendAnswer+0xbc>
		buffer[n++] = message[i];
 8002184:	7ffb      	ldrb	r3, [r7, #31]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	441a      	add	r2, r3
 800218a:	7fbb      	ldrb	r3, [r7, #30]
 800218c:	1c59      	adds	r1, r3, #1
 800218e:	77b9      	strb	r1, [r7, #30]
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	3320      	adds	r3, #32
 8002194:	443b      	add	r3, r7
 8002196:	f803 2c14 	strb.w	r2, [r3, #-20]
		if (message[i] == RMT_DLE) {
 800219a:	7ffb      	ldrb	r3, [r7, #31]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b3d      	cmp	r3, #61	@ 0x3d
 80021a4:	d10a      	bne.n	80021bc <serialSendAnswer+0xa8>
			buffer[n++] = message[i];
 80021a6:	7ffb      	ldrb	r3, [r7, #31]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	441a      	add	r2, r3
 80021ac:	7fbb      	ldrb	r3, [r7, #30]
 80021ae:	1c59      	adds	r1, r3, #1
 80021b0:	77b9      	strb	r1, [r7, #30]
 80021b2:	7812      	ldrb	r2, [r2, #0]
 80021b4:	3320      	adds	r3, #32
 80021b6:	443b      	add	r3, r7
 80021b8:	f803 2c14 	strb.w	r2, [r3, #-20]
			// Die Prüfsumme erstreckt sich nur noch über die NETTO-Payload!
			//checksum += message[i];
		}
		checksum += message[i];
 80021bc:	7ffb      	ldrb	r3, [r7, #31]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	7f7b      	ldrb	r3, [r7, #29]
 80021c6:	4413      	add	r3, r2
 80021c8:	777b      	strb	r3, [r7, #29]
	for (i = 0; i < (CMR_DATAPAKET_LENGTH - 1); i++) {
 80021ca:	7ffb      	ldrb	r3, [r7, #31]
 80021cc:	3301      	adds	r3, #1
 80021ce:	77fb      	strb	r3, [r7, #31]
 80021d0:	7ffb      	ldrb	r3, [r7, #31]
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d9d6      	bls.n	8002184 <serialSendAnswer+0x70>
	}
	buffer[n++] = checksum;
 80021d6:	7fbb      	ldrb	r3, [r7, #30]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	77ba      	strb	r2, [r7, #30]
 80021dc:	3320      	adds	r3, #32
 80021de:	443b      	add	r3, r7
 80021e0:	7f7a      	ldrb	r2, [r7, #29]
 80021e2:	f803 2c14 	strb.w	r2, [r3, #-20]
	if (checksum == RMT_DLE) {
 80021e6:	7f7b      	ldrb	r3, [r7, #29]
 80021e8:	2b3d      	cmp	r3, #61	@ 0x3d
 80021ea:	d107      	bne.n	80021fc <serialSendAnswer+0xe8>
		buffer[n++] = checksum;
 80021ec:	7fbb      	ldrb	r3, [r7, #30]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	77ba      	strb	r2, [r7, #30]
 80021f2:	3320      	adds	r3, #32
 80021f4:	443b      	add	r3, r7
 80021f6:	7f7a      	ldrb	r2, [r7, #29]
 80021f8:	f803 2c14 	strb.w	r2, [r3, #-20]
	}
	buffer[n++] = RMT_DLE;
 80021fc:	7fbb      	ldrb	r3, [r7, #30]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	77ba      	strb	r2, [r7, #30]
 8002202:	3320      	adds	r3, #32
 8002204:	443b      	add	r3, r7
 8002206:	223d      	movs	r2, #61	@ 0x3d
 8002208:	f803 2c14 	strb.w	r2, [r3, #-20]
	buffer[n++] = RMT_EOT;
 800220c:	7fbb      	ldrb	r3, [r7, #30]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	77ba      	strb	r2, [r7, #30]
 8002212:	3320      	adds	r3, #32
 8002214:	443b      	add	r3, r7
 8002216:	2245      	movs	r2, #69	@ 0x45
 8002218:	f803 2c14 	strb.w	r2, [r3, #-20]

	uartRB_Put(&usart3_rb, buffer, n);
 800221c:	7fba      	ldrb	r2, [r7, #30]
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	4619      	mov	r1, r3
 8002224:	4804      	ldr	r0, [pc, #16]	@ (8002238 <serialSendAnswer+0x124>)
 8002226:	f001 fb3d 	bl	80038a4 <uartRB_Put>
	uartRB_KickTx(&usart3_rb);
 800222a:	4803      	ldr	r0, [pc, #12]	@ (8002238 <serialSendAnswer+0x124>)
 800222c:	f001 faf4 	bl	8003818 <uartRB_KickTx>
}
 8002230:	bf00      	nop
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000f70 	.word	0x20000f70

0800223c <output_ascii_cmdack>:

void output_ascii_cmdack(uint8_t verbose_flg, uint8_t crlf_flg, uint8_t cmd_ack) {
 800223c:	b5b0      	push	{r4, r5, r7, lr}
 800223e:	b09c      	sub	sp, #112	@ 0x70
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
 8002246:	460b      	mov	r3, r1
 8002248:	71bb      	strb	r3, [r7, #6]
 800224a:	4613      	mov	r3, r2
 800224c:	717b      	strb	r3, [r7, #5]

	if (verbose_flg > 0) {
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 81e3 	beq.w	800261c <output_ascii_cmdack+0x3e0>
		if (cmd_ack == CMR_SUCCESSFULL) {
 8002256:	797b      	ldrb	r3, [r7, #5]
 8002258:	2b80      	cmp	r3, #128	@ 0x80
 800225a:	d105      	bne.n	8002268 <output_ascii_cmdack+0x2c>
			uartRB_Put(&usart3_rb, ">OK;", 4);
 800225c:	2204      	movs	r2, #4
 800225e:	49ba      	ldr	r1, [pc, #744]	@ (8002548 <output_ascii_cmdack+0x30c>)
 8002260:	48ba      	ldr	r0, [pc, #744]	@ (800254c <output_ascii_cmdack+0x310>)
 8002262:	f001 fb1f 	bl	80038a4 <uartRB_Put>
 8002266:	e1e8      	b.n	800263a <output_ascii_cmdack+0x3fe>
		} else if (cmd_ack == CMR_SEMICOLONONLY) {
 8002268:	797b      	ldrb	r3, [r7, #5]
 800226a:	2bff      	cmp	r3, #255	@ 0xff
 800226c:	d105      	bne.n	800227a <output_ascii_cmdack+0x3e>
			uartRB_Put(&usart3_rb, ";", 1);
 800226e:	2201      	movs	r2, #1
 8002270:	49b7      	ldr	r1, [pc, #732]	@ (8002550 <output_ascii_cmdack+0x314>)
 8002272:	48b6      	ldr	r0, [pc, #728]	@ (800254c <output_ascii_cmdack+0x310>)
 8002274:	f001 fb16 	bl	80038a4 <uartRB_Put>
 8002278:	e1df      	b.n	800263a <output_ascii_cmdack+0x3fe>
		} else {
			if (verbose_flg == 1) {
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d143      	bne.n	8002308 <output_ascii_cmdack+0xcc>
				char tmp[10];
				char tmp2[12];
				sprintf(tmp, "%3.3u", (cmd_ack & 0x7F));
 8002280:	797b      	ldrb	r3, [r7, #5]
 8002282:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002286:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800228a:	49b2      	ldr	r1, [pc, #712]	@ (8002554 <output_ascii_cmdack+0x318>)
 800228c:	4618      	mov	r0, r3
 800228e:	f008 f977 	bl	800a580 <siprintf>

				if (cmd_ack > 128) {
 8002292:	797b      	ldrb	r3, [r7, #5]
 8002294:	2b80      	cmp	r3, #128	@ 0x80
 8002296:	d909      	bls.n	80022ac <output_ascii_cmdack+0x70>
					strcpy(tmp2, ">W");
 8002298:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800229c:	4aae      	ldr	r2, [pc, #696]	@ (8002558 <output_ascii_cmdack+0x31c>)
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	4611      	mov	r1, r2
 80022a2:	8019      	strh	r1, [r3, #0]
 80022a4:	3302      	adds	r3, #2
 80022a6:	0c12      	lsrs	r2, r2, #16
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e008      	b.n	80022be <output_ascii_cmdack+0x82>
				} else {
					strcpy(tmp2, ">E");
 80022ac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80022b0:	4aaa      	ldr	r2, [pc, #680]	@ (800255c <output_ascii_cmdack+0x320>)
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	4611      	mov	r1, r2
 80022b6:	8019      	strh	r1, [r3, #0]
 80022b8:	3302      	adds	r3, #2
 80022ba:	0c12      	lsrs	r2, r2, #16
 80022bc:	701a      	strb	r2, [r3, #0]
				}
				strcat(tmp2, tmp);
 80022be:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80022c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f008 f981 	bl	800a5d0 <strcat>
				strcat(tmp2, ";");
 80022ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fd ffae 	bl	8000234 <strlen>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80022e0:	4413      	add	r3, r2
 80022e2:	499b      	ldr	r1, [pc, #620]	@ (8002550 <output_ascii_cmdack+0x314>)
 80022e4:	461a      	mov	r2, r3
 80022e6:	460b      	mov	r3, r1
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	8013      	strh	r3, [r2, #0]
				uartRB_Put(&usart3_rb, tmp2, strlen(tmp2));
 80022ec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fd ff9f 	bl	8000234 <strlen>
 80022f6:	4603      	mov	r3, r0
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80022fe:	4619      	mov	r1, r3
 8002300:	4892      	ldr	r0, [pc, #584]	@ (800254c <output_ascii_cmdack+0x310>)
 8002302:	f001 facf 	bl	80038a4 <uartRB_Put>
 8002306:	e198      	b.n	800263a <output_ascii_cmdack+0x3fe>
			} else if (verbose_flg == 2) {
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	2b02      	cmp	r3, #2
 800230c:	f040 8195 	bne.w	800263a <output_ascii_cmdack+0x3fe>
				char tmp[35];
				char tmp2[40];
				if (cmd_ack > 128) {
 8002310:	797b      	ldrb	r3, [r7, #5]
 8002312:	2b80      	cmp	r3, #128	@ 0x80
 8002314:	d904      	bls.n	8002320 <output_ascii_cmdack+0xe4>
					strcpy(tmp2, ">W:");
 8002316:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800231a:	4a91      	ldr	r2, [pc, #580]	@ (8002560 <output_ascii_cmdack+0x324>)
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e003      	b.n	8002328 <output_ascii_cmdack+0xec>
				} else {
					strcpy(tmp2, ">E:");
 8002320:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002324:	4a8f      	ldr	r2, [pc, #572]	@ (8002564 <output_ascii_cmdack+0x328>)
 8002326:	601a      	str	r2, [r3, #0]
				}

				switch (cmd_ack & 0xFF)          //(cmd_ack & 0x7F)
 8002328:	797b      	ldrb	r3, [r7, #5]
 800232a:	2b8a      	cmp	r3, #138	@ 0x8a
 800232c:	f000 8087 	beq.w	800243e <output_ascii_cmdack+0x202>
 8002330:	2b8a      	cmp	r3, #138	@ 0x8a
 8002332:	f300 8144 	bgt.w	80025be <output_ascii_cmdack+0x382>
 8002336:	2b83      	cmp	r3, #131	@ 0x83
 8002338:	d075      	beq.n	8002426 <output_ascii_cmdack+0x1ea>
 800233a:	2b83      	cmp	r3, #131	@ 0x83
 800233c:	f300 813f 	bgt.w	80025be <output_ascii_cmdack+0x382>
 8002340:	2b1f      	cmp	r3, #31
 8002342:	dc49      	bgt.n	80023d8 <output_ascii_cmdack+0x19c>
 8002344:	2b00      	cmp	r3, #0
 8002346:	f2c0 813a 	blt.w	80025be <output_ascii_cmdack+0x382>
 800234a:	2b1f      	cmp	r3, #31
 800234c:	f200 8137 	bhi.w	80025be <output_ascii_cmdack+0x382>
 8002350:	a201      	add	r2, pc, #4	@ (adr r2, 8002358 <output_ascii_cmdack+0x11c>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	080023df 	.word	0x080023df
 800235c:	080023f3 	.word	0x080023f3
 8002360:	080025bf 	.word	0x080025bf
 8002364:	080025bf 	.word	0x080025bf
 8002368:	080025bf 	.word	0x080025bf
 800236c:	080025bf 	.word	0x080025bf
 8002370:	0800246b 	.word	0x0800246b
 8002374:	0800247f 	.word	0x0800247f
 8002378:	08002491 	.word	0x08002491
 800237c:	080024f9 	.word	0x080024f9
 8002380:	080025bf 	.word	0x080025bf
 8002384:	08002453 	.word	0x08002453
 8002388:	0800250d 	.word	0x0800250d
 800238c:	080024b1 	.word	0x080024b1
 8002390:	080024c3 	.word	0x080024c3
 8002394:	080024df 	.word	0x080024df
 8002398:	08002529 	.word	0x08002529
 800239c:	080025bf 	.word	0x080025bf
 80023a0:	080025bf 	.word	0x080025bf
 80023a4:	080025bf 	.word	0x080025bf
 80023a8:	080025bf 	.word	0x080025bf
 80023ac:	080025bf 	.word	0x080025bf
 80023b0:	080025bf 	.word	0x080025bf
 80023b4:	080025bf 	.word	0x080025bf
 80023b8:	080025bf 	.word	0x080025bf
 80023bc:	080025bf 	.word	0x080025bf
 80023c0:	080025bf 	.word	0x080025bf
 80023c4:	080025bf 	.word	0x080025bf
 80023c8:	080025bf 	.word	0x080025bf
 80023cc:	080025bf 	.word	0x080025bf
 80023d0:	080025bf 	.word	0x080025bf
 80023d4:	080025a5 	.word	0x080025a5
 80023d8:	2b82      	cmp	r3, #130	@ 0x82
 80023da:	d018      	beq.n	800240e <output_ascii_cmdack+0x1d2>
 80023dc:	e0ef      	b.n	80025be <output_ascii_cmdack+0x382>
				{
				case CMR_COMMANDONDEMAND:
					strcpy(tmp, "No Answer!");
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	4a61      	ldr	r2, [pc, #388]	@ (8002568 <output_ascii_cmdack+0x32c>)
 80023e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80023e6:	c303      	stmia	r3!, {r0, r1}
 80023e8:	801a      	strh	r2, [r3, #0]
 80023ea:	3302      	adds	r3, #2
 80023ec:	0c12      	lsrs	r2, r2, #16
 80023ee:	701a      	strb	r2, [r3, #0]
					break;
 80023f0:	e0ef      	b.n	80025d2 <output_ascii_cmdack+0x396>

				case CMR_PARAMETERINVALID:
					strcpy(tmp, "Parameter Invalid!");
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	4a5d      	ldr	r2, [pc, #372]	@ (800256c <output_ascii_cmdack+0x330>)
 80023f8:	461c      	mov	r4, r3
 80023fa:	4615      	mov	r5, r2
 80023fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002400:	682b      	ldr	r3, [r5, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	8022      	strh	r2, [r4, #0]
 8002406:	3402      	adds	r4, #2
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	7023      	strb	r3, [r4, #0]
					break;
 800240c:	e0e1      	b.n	80025d2 <output_ascii_cmdack+0x396>

				case CMR_PARAMETERCLIPEDMIN:
					strcpy(tmp, "Parameter Clipped to Minimum!");
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	4a57      	ldr	r2, [pc, #348]	@ (8002570 <output_ascii_cmdack+0x334>)
 8002414:	461c      	mov	r4, r3
 8002416:	4615      	mov	r5, r2
 8002418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800241a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800241c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002420:	c407      	stmia	r4!, {r0, r1, r2}
 8002422:	8023      	strh	r3, [r4, #0]
					break;
 8002424:	e0d5      	b.n	80025d2 <output_ascii_cmdack+0x396>

				case CMR_PARAMETERCLIPEDMAX:
					strcpy(tmp, "Parameter Clipped to Maximum!");
 8002426:	f107 030c 	add.w	r3, r7, #12
 800242a:	4a52      	ldr	r2, [pc, #328]	@ (8002574 <output_ascii_cmdack+0x338>)
 800242c:	461c      	mov	r4, r3
 800242e:	4615      	mov	r5, r2
 8002430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002434:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002438:	c407      	stmia	r4!, {r0, r1, r2}
 800243a:	8023      	strh	r3, [r4, #0]
					break;
 800243c:	e0c9      	b.n	80025d2 <output_ascii_cmdack+0x396>

				case CMR_PARAMETERADJUSTED:
					strcpy(tmp, "Parameter Adjusted!");
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	4a4d      	ldr	r2, [pc, #308]	@ (8002578 <output_ascii_cmdack+0x33c>)
 8002444:	461c      	mov	r4, r3
 8002446:	4615      	mov	r5, r2
 8002448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244c:	682b      	ldr	r3, [r5, #0]
 800244e:	6023      	str	r3, [r4, #0]
					break;
 8002450:	e0bf      	b.n	80025d2 <output_ascii_cmdack+0x396>

				case CMR_WRONGPARAMETERFORMAT:
					strcpy(tmp, "Wrong Parameter Format!");
 8002452:	f107 030c 	add.w	r3, r7, #12
 8002456:	4a49      	ldr	r2, [pc, #292]	@ (800257c <output_ascii_cmdack+0x340>)
 8002458:	461c      	mov	r4, r3
 800245a:	4615      	mov	r5, r2
 800245c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800245e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002460:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002464:	e884 0003 	stmia.w	r4, {r0, r1}
					break;
 8002468:	e0b3      	b.n	80025d2 <output_ascii_cmdack+0x396>

				case CMR_UNKNOWNCOMMAND:
					strcpy(tmp, "Unknown Command!");
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	4a44      	ldr	r2, [pc, #272]	@ (8002580 <output_ascii_cmdack+0x344>)
 8002470:	461c      	mov	r4, r3
 8002472:	4615      	mov	r5, r2
 8002474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002478:	682b      	ldr	r3, [r5, #0]
 800247a:	7023      	strb	r3, [r4, #0]
					break;
 800247c:	e0a9      	b.n	80025d2 <output_ascii_cmdack+0x396>

				case CMR_COMMANDDENIED:
					strcpy(tmp, "Command Denied!");
 800247e:	f107 030c 	add.w	r3, r7, #12
 8002482:	4a40      	ldr	r2, [pc, #256]	@ (8002584 <output_ascii_cmdack+0x348>)
 8002484:	461c      	mov	r4, r3
 8002486:	4613      	mov	r3, r2
 8002488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800248a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					break;
 800248e:	e0a0      	b.n	80025d2 <output_ascii_cmdack+0x396>

				case CMR_COMMANDNOTSUPPORTED:
					strcpy(tmp, "Command Not Supported!");
 8002490:	f107 030c 	add.w	r3, r7, #12
 8002494:	4a3c      	ldr	r2, [pc, #240]	@ (8002588 <output_ascii_cmdack+0x34c>)
 8002496:	461c      	mov	r4, r3
 8002498:	4615      	mov	r5, r2
 800249a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800249c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800249e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024a2:	6020      	str	r0, [r4, #0]
 80024a4:	3404      	adds	r4, #4
 80024a6:	8021      	strh	r1, [r4, #0]
 80024a8:	3402      	adds	r4, #2
 80024aa:	0c0b      	lsrs	r3, r1, #16
 80024ac:	7023      	strb	r3, [r4, #0]
					break;
 80024ae:	e090      	b.n	80025d2 <output_ascii_cmdack+0x396>

				case CMR_EEPROMERROR:
					strcpy(tmp, "EEPROM Error!");
 80024b0:	f107 030c 	add.w	r3, r7, #12
 80024b4:	4a35      	ldr	r2, [pc, #212]	@ (800258c <output_ascii_cmdack+0x350>)
 80024b6:	461c      	mov	r4, r3
 80024b8:	4613      	mov	r3, r2
 80024ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024bc:	c407      	stmia	r4!, {r0, r1, r2}
 80024be:	8023      	strh	r3, [r4, #0]
					break;
 80024c0:	e087      	b.n	80025d2 <output_ascii_cmdack+0x396>

				case CMR_EEPWRLOCKED:
					strcpy(tmp, "EEPROM Write Lock!");
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	4a32      	ldr	r2, [pc, #200]	@ (8002590 <output_ascii_cmdack+0x354>)
 80024c8:	461c      	mov	r4, r3
 80024ca:	4615      	mov	r5, r2
 80024cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d0:	682b      	ldr	r3, [r5, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	8022      	strh	r2, [r4, #0]
 80024d6:	3402      	adds	r4, #2
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	7023      	strb	r3, [r4, #0]
					break;
 80024dc:	e079      	b.n	80025d2 <output_ascii_cmdack+0x396>

				case CMR_WRONGOPMODE:
					strcpy(tmp, "Wrong Operation Mode!");
 80024de:	f107 030c 	add.w	r3, r7, #12
 80024e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002594 <output_ascii_cmdack+0x358>)
 80024e4:	461c      	mov	r4, r3
 80024e6:	4615      	mov	r5, r2
 80024e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024f0:	6020      	str	r0, [r4, #0]
 80024f2:	3404      	adds	r4, #4
 80024f4:	8021      	strh	r1, [r4, #0]
					break;
 80024f6:	e06c      	b.n	80025d2 <output_ascii_cmdack+0x396>

				case CMR_UNITBUSY:
					strcpy(tmp, "Unit Busy!");
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	4a26      	ldr	r2, [pc, #152]	@ (8002598 <output_ascii_cmdack+0x35c>)
 80024fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002500:	c303      	stmia	r3!, {r0, r1}
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	3302      	adds	r3, #2
 8002506:	0c12      	lsrs	r2, r2, #16
 8002508:	701a      	strb	r2, [r3, #0]
					break;
 800250a:	e062      	b.n	80025d2 <output_ascii_cmdack+0x396>

				case CMR_MISSINGPARAMETER:
					strcpy(tmp, "Missing Parameter!");
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	4a22      	ldr	r2, [pc, #136]	@ (800259c <output_ascii_cmdack+0x360>)
 8002512:	461c      	mov	r4, r3
 8002514:	4615      	mov	r5, r2
 8002516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800251a:	682b      	ldr	r3, [r5, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	8022      	strh	r2, [r4, #0]
 8002520:	3402      	adds	r4, #2
 8002522:	0c1b      	lsrs	r3, r3, #16
 8002524:	7023      	strb	r3, [r4, #0]
					break;
 8002526:	e054      	b.n	80025d2 <output_ascii_cmdack+0x396>

				case CMR_OPTIONNOTINSTALLED:
					strcpy(tmp, "Required Option Not Installed!");
 8002528:	f107 030c 	add.w	r3, r7, #12
 800252c:	4a1c      	ldr	r2, [pc, #112]	@ (80025a0 <output_ascii_cmdack+0x364>)
 800252e:	461c      	mov	r4, r3
 8002530:	4615      	mov	r5, r2
 8002532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002536:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800253a:	c407      	stmia	r4!, {r0, r1, r2}
 800253c:	8023      	strh	r3, [r4, #0]
 800253e:	3402      	adds	r4, #2
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	7023      	strb	r3, [r4, #0]
					break;
 8002544:	e045      	b.n	80025d2 <output_ascii_cmdack+0x396>
 8002546:	bf00      	nop
 8002548:	0800af24 	.word	0x0800af24
 800254c:	20000f70 	.word	0x20000f70
 8002550:	0800af2c 	.word	0x0800af2c
 8002554:	0800af30 	.word	0x0800af30
 8002558:	0800af38 	.word	0x0800af38
 800255c:	0800af3c 	.word	0x0800af3c
 8002560:	003a573e 	.word	0x003a573e
 8002564:	003a453e 	.word	0x003a453e
 8002568:	0800af40 	.word	0x0800af40
 800256c:	0800af4c 	.word	0x0800af4c
 8002570:	0800af60 	.word	0x0800af60
 8002574:	0800af80 	.word	0x0800af80
 8002578:	0800afa0 	.word	0x0800afa0
 800257c:	0800afb4 	.word	0x0800afb4
 8002580:	0800afcc 	.word	0x0800afcc
 8002584:	0800afe0 	.word	0x0800afe0
 8002588:	0800aff0 	.word	0x0800aff0
 800258c:	0800b008 	.word	0x0800b008
 8002590:	0800b018 	.word	0x0800b018
 8002594:	0800b02c 	.word	0x0800b02c
 8002598:	0800b044 	.word	0x0800b044
 800259c:	0800b050 	.word	0x0800b050
 80025a0:	0800b064 	.word	0x0800b064

				case CMR_MALFORMATTEDCOMMAND:
					strcpy(tmp, "Malformatted Command!");
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	4a31      	ldr	r2, [pc, #196]	@ (8002670 <output_ascii_cmdack+0x434>)
 80025aa:	461c      	mov	r4, r3
 80025ac:	4615      	mov	r5, r2
 80025ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025b6:	6020      	str	r0, [r4, #0]
 80025b8:	3404      	adds	r4, #4
 80025ba:	8021      	strh	r1, [r4, #0]
					break;
 80025bc:	e009      	b.n	80025d2 <output_ascii_cmdack+0x396>

				default:
					sprintf(tmp, "%3.3u", (cmd_ack & 0x7F));
 80025be:	797b      	ldrb	r3, [r7, #5]
 80025c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	492a      	ldr	r1, [pc, #168]	@ (8002674 <output_ascii_cmdack+0x438>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	f007 ffd8 	bl	800a580 <siprintf>
					break;
 80025d0:	bf00      	nop
				}

				strcat(tmp2, tmp);
 80025d2:	f107 020c 	add.w	r2, r7, #12
 80025d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f007 fff7 	bl	800a5d0 <strcat>
				strcat(tmp2, ";");
 80025e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd fe24 	bl	8000234 <strlen>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025f4:	4413      	add	r3, r2
 80025f6:	4920      	ldr	r1, [pc, #128]	@ (8002678 <output_ascii_cmdack+0x43c>)
 80025f8:	461a      	mov	r2, r3
 80025fa:	460b      	mov	r3, r1
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	8013      	strh	r3, [r2, #0]
				uartRB_Put(&usart3_rb, tmp2, strlen(tmp2));
 8002600:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd fe15 	bl	8000234 <strlen>
 800260a:	4603      	mov	r3, r0
 800260c:	b2da      	uxtb	r2, r3
 800260e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002612:	4619      	mov	r1, r3
 8002614:	4819      	ldr	r0, [pc, #100]	@ (800267c <output_ascii_cmdack+0x440>)
 8002616:	f001 f945 	bl	80038a4 <uartRB_Put>
 800261a:	e00e      	b.n	800263a <output_ascii_cmdack+0x3fe>
			}
		}
	} else {
		if (cmd_ack != STACK_CMDINSTACK) {
 800261c:	797b      	ldrb	r3, [r7, #5]
 800261e:	2b11      	cmp	r3, #17
 8002620:	d00b      	beq.n	800263a <output_ascii_cmdack+0x3fe>
			//if (((cmd_ack & 0x80) == CMR_SUCCESSFULL))
			if ((cmd_ack == CMR_SEMICOLONONLY)
 8002622:	797b      	ldrb	r3, [r7, #5]
 8002624:	2bff      	cmp	r3, #255	@ 0xff
 8002626:	d003      	beq.n	8002630 <output_ascii_cmdack+0x3f4>
					|| ((cmd_ack & 0x80) == CMR_SUCCESSFULL))
 8002628:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800262c:	2b00      	cmp	r3, #0
 800262e:	da04      	bge.n	800263a <output_ascii_cmdack+0x3fe>
				uartRB_Put(&usart3_rb, ";", 1);
 8002630:	2201      	movs	r2, #1
 8002632:	4911      	ldr	r1, [pc, #68]	@ (8002678 <output_ascii_cmdack+0x43c>)
 8002634:	4811      	ldr	r0, [pc, #68]	@ (800267c <output_ascii_cmdack+0x440>)
 8002636:	f001 f935 	bl	80038a4 <uartRB_Put>

		};
	}

	if ((crlf_flg & 0x01) > 0) {	//crlf_char= "\r";        //d.h. CR
 800263a:	79bb      	ldrb	r3, [r7, #6]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	dd04      	ble.n	800264e <output_ascii_cmdack+0x412>
		uartRB_Put(&usart3_rb, "\r", 1);
 8002644:	2201      	movs	r2, #1
 8002646:	490e      	ldr	r1, [pc, #56]	@ (8002680 <output_ascii_cmdack+0x444>)
 8002648:	480c      	ldr	r0, [pc, #48]	@ (800267c <output_ascii_cmdack+0x440>)
 800264a:	f001 f92b 	bl	80038a4 <uartRB_Put>
	}
	if ((crlf_flg & 0x02) > 0) {	//*crlf_char=";
 800264e:	79bb      	ldrb	r3, [r7, #6]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	dd04      	ble.n	8002662 <output_ascii_cmdack+0x426>
		uartRB_Put(&usart3_rb, "\n", 1);
 8002658:	2201      	movs	r2, #1
 800265a:	490a      	ldr	r1, [pc, #40]	@ (8002684 <output_ascii_cmdack+0x448>)
 800265c:	4807      	ldr	r0, [pc, #28]	@ (800267c <output_ascii_cmdack+0x440>)
 800265e:	f001 f921 	bl	80038a4 <uartRB_Put>
	}
	uartRB_KickTx(&usart3_rb);
 8002662:	4806      	ldr	r0, [pc, #24]	@ (800267c <output_ascii_cmdack+0x440>)
 8002664:	f001 f8d8 	bl	8003818 <uartRB_KickTx>
}
 8002668:	bf00      	nop
 800266a:	3770      	adds	r7, #112	@ 0x70
 800266c:	46bd      	mov	sp, r7
 800266e:	bdb0      	pop	{r4, r5, r7, pc}
 8002670:	0800b084 	.word	0x0800b084
 8002674:	0800af30 	.word	0x0800af30
 8002678:	0800af2c 	.word	0x0800af2c
 800267c:	20000f70 	.word	0x20000f70
 8002680:	0800b09c 	.word	0x0800b09c
 8002684:	0800b0a0 	.word	0x0800b0a0

08002688 <Binary_Search>:

//Die interne Befehlnummer werden für den eingegebenen Befehl zurückgeliefert.
void Binary_Search(uint8_t ncmd, char *key, uint16_t *cmdindex) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	73fb      	strb	r3, [r7, #15]
	volatile uint16_t low = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	83fb      	strh	r3, [r7, #30]
	volatile uint16_t high = ncmd - 1;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	83bb      	strh	r3, [r7, #28]
	volatile uint16_t mid;
	volatile int sflag;
	volatile uint8_t flag = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	74fb      	strb	r3, [r7, #19]

	while ((low <= high) && (flag == 0)) {
 80026a8:	e045      	b.n	8002736 <Binary_Search+0xae>
		mid = ((low + high) >> 1);
 80026aa:	8bfb      	ldrh	r3, [r7, #30]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	8bbb      	ldrh	r3, [r7, #28]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	105b      	asrs	r3, r3, #1
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	837b      	strh	r3, [r7, #26]
		sflag = strcmp(key, (char*) &(ASCIICmdTable[mid].cmdline));
 80026bc:	8b7b      	ldrh	r3, [r7, #26]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	2316      	movs	r3, #22
 80026c4:	fb02 f303 	mul.w	r3, r2, r3
 80026c8:	4a27      	ldr	r2, [pc, #156]	@ (8002768 <Binary_Search+0xe0>)
 80026ca:	4413      	add	r3, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	68b8      	ldr	r0, [r7, #8]
 80026d0:	f7fd fda6 	bl	8000220 <strcmp>
 80026d4:	4603      	mov	r3, r0
 80026d6:	617b      	str	r3, [r7, #20]

		if (sflag < 0) {
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	da12      	bge.n	8002704 <Binary_Search+0x7c>
			if (mid != 0) {
 80026de:	8b7b      	ldrh	r3, [r7, #26]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <Binary_Search+0x6a>
				high = mid - 1;
 80026e6:	8b7b      	ldrh	r3, [r7, #26]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	83bb      	strh	r3, [r7, #28]
 80026f0:	e005      	b.n	80026fe <Binary_Search+0x76>
			} else {
				if (low != 0) {
 80026f2:	8bfb      	ldrh	r3, [r7, #30]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d028      	beq.n	800274c <Binary_Search+0xc4>
					high = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	83bb      	strh	r3, [r7, #28]
				} else {
					break;
				}
			}
			flag = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	74fb      	strb	r3, [r7, #19]
 8002702:	e018      	b.n	8002736 <Binary_Search+0xae>
		} else if (sflag == 0) {
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10e      	bne.n	8002728 <Binary_Search+0xa0>

			*cmdindex = ASCIICmdTable[mid].cmdindex;
 800270a:	8b7b      	ldrh	r3, [r7, #26]
 800270c:	b29b      	uxth	r3, r3
 800270e:	4619      	mov	r1, r3
 8002710:	4a15      	ldr	r2, [pc, #84]	@ (8002768 <Binary_Search+0xe0>)
 8002712:	2316      	movs	r3, #22
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3314      	adds	r3, #20
 800271c:	881a      	ldrh	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	801a      	strh	r2, [r3, #0]
			flag = 1;
 8002722:	2301      	movs	r3, #1
 8002724:	74fb      	strb	r3, [r7, #19]
 8002726:	e006      	b.n	8002736 <Binary_Search+0xae>
		} else {
			low = mid + 1;
 8002728:	8b7b      	ldrh	r3, [r7, #26]
 800272a:	b29b      	uxth	r3, r3
 800272c:	3301      	adds	r3, #1
 800272e:	b29b      	uxth	r3, r3
 8002730:	83fb      	strh	r3, [r7, #30]
			flag = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	74fb      	strb	r3, [r7, #19]
	while ((low <= high) && (flag == 0)) {
 8002736:	8bfb      	ldrh	r3, [r7, #30]
 8002738:	b29a      	uxth	r2, r3
 800273a:	8bbb      	ldrh	r3, [r7, #28]
 800273c:	b29b      	uxth	r3, r3
 800273e:	429a      	cmp	r2, r3
 8002740:	d805      	bhi.n	800274e <Binary_Search+0xc6>
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0af      	beq.n	80026aa <Binary_Search+0x22>
 800274a:	e000      	b.n	800274e <Binary_Search+0xc6>
					break;
 800274c:	bf00      	nop
		}

	};

	if (flag == 0)   //Falls die Tabelle diesen Befehl nicht enthältet,
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d103      	bne.n	800275e <Binary_Search+0xd6>
			{
		*cmdindex = BINARY_INDEX_MAX;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800275c:	801a      	strh	r2, [r3, #0]
	};
}
 800275e:	bf00      	nop
 8002760:	3720      	adds	r7, #32
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	0800b0ac 	.word	0x0800b0ac

0800276c <output_ascii_result>:

void output_ascii_result(uint8_t verbose_data, uint8_t crlf_data,
		stack_item *result_data) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	603a      	str	r2, [r7, #0]
 8002776:	71fb      	strb	r3, [r7, #7]
 8002778:	460b      	mov	r3, r1
 800277a:	71bb      	strb	r3, [r7, #6]
	//uart0_puts("output");
	switch (result_data->rwflg) {
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	7b9b      	ldrb	r3, [r3, #14]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d002      	beq.n	800278a <output_ascii_result+0x1e>
 8002784:	2b02      	cmp	r3, #2
 8002786:	d029      	beq.n	80027dc <output_ascii_result+0x70>
		break;
	case WRITE:
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
		break;
	};
}
 8002788:	e030      	b.n	80027ec <output_ascii_result+0x80>
		switch (result_data->cmd_index) {
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	885b      	ldrh	r3, [r3, #2]
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d017      	beq.n	80027c2 <output_ascii_result+0x56>
 8002792:	2b0e      	cmp	r3, #14
 8002794:	d017      	beq.n	80027c6 <output_ascii_result+0x5a>
			if ((result_data->cmd_ack == CMR_SUCCESSFULL)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	791b      	ldrb	r3, [r3, #4]
 800279a:	2b80      	cmp	r3, #128	@ 0x80
 800279c:	d00b      	beq.n	80027b6 <output_ascii_result+0x4a>
					|| (result_data->cmd_ack == CMR_PARAMETERCLIPEDMIN)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	791b      	ldrb	r3, [r3, #4]
 80027a2:	2b82      	cmp	r3, #130	@ 0x82
 80027a4:	d007      	beq.n	80027b6 <output_ascii_result+0x4a>
					|| (result_data->cmd_ack == CMR_PARAMETERCLIPEDMAX)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	791b      	ldrb	r3, [r3, #4]
 80027aa:	2b83      	cmp	r3, #131	@ 0x83
 80027ac:	d003      	beq.n	80027b6 <output_ascii_result+0x4a>
					|| (result_data->cmd_ack == CMR_PARAMETERADJUSTED)) {
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	791b      	ldrb	r3, [r3, #4]
 80027b2:	2b8a      	cmp	r3, #138	@ 0x8a
 80027b4:	d109      	bne.n	80027ca <output_ascii_result+0x5e>
				output_ascii(result_data->parameter);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f850 	bl	8002860 <output_ascii>
			break;
 80027c0:	e003      	b.n	80027ca <output_ascii_result+0x5e>
			break;
 80027c2:	bf00      	nop
 80027c4:	e002      	b.n	80027cc <output_ascii_result+0x60>
			break;
 80027c6:	bf00      	nop
 80027c8:	e000      	b.n	80027cc <output_ascii_result+0x60>
			break;
 80027ca:	bf00      	nop
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	791a      	ldrb	r2, [r3, #4]
 80027d0:	79b9      	ldrb	r1, [r7, #6]
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fd31 	bl	800223c <output_ascii_cmdack>
		break;
 80027da:	e007      	b.n	80027ec <output_ascii_result+0x80>
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	791a      	ldrb	r2, [r3, #4]
 80027e0:	79b9      	ldrb	r1, [r7, #6]
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fd29 	bl	800223c <output_ascii_cmdack>
		break;
 80027ea:	bf00      	nop
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <output_binary_result>:

void output_binary_result(stack_item *cmd) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	uint8_t buffer[7];
	uint16_t s_tmp = cmd->cmd_sender;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	82fb      	strh	r3, [r7, #22]
	uint16_t r_tmp = cmd->cmd_receiver;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	785b      	ldrb	r3, [r3, #1]
 8002806:	82bb      	strh	r3, [r7, #20]
	int32_t param = cmd->parameter;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	613b      	str	r3, [r7, #16]

	buffer[0] = (s_tmp << 5) | (r_tmp << 3);
 800280e:	8afb      	ldrh	r3, [r7, #22]
 8002810:	015b      	lsls	r3, r3, #5
 8002812:	b25a      	sxtb	r2, r3
 8002814:	8abb      	ldrh	r3, [r7, #20]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	b25b      	sxtb	r3, r3
 800281a:	4313      	orrs	r3, r2
 800281c:	b25b      	sxtb	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	723b      	strb	r3, [r7, #8]
	buffer[1] = cmd->cmd_index;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	885b      	ldrh	r3, [r3, #2]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	727b      	strb	r3, [r7, #9]
	buffer[2] = cmd->cmd_ack;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	791b      	ldrb	r3, [r3, #4]
 800282e:	72bb      	strb	r3, [r7, #10]
	buffer[3] = (param >> 24) & 0xFF;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	0e1b      	lsrs	r3, r3, #24
 8002834:	b2db      	uxtb	r3, r3
 8002836:	72fb      	strb	r3, [r7, #11]
	buffer[4] = (param >> 16) & 0xFF;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	141b      	asrs	r3, r3, #16
 800283c:	b2db      	uxtb	r3, r3
 800283e:	733b      	strb	r3, [r7, #12]
	buffer[5] = (param >> 8) & 0xFF;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	121b      	asrs	r3, r3, #8
 8002844:	b2db      	uxtb	r3, r3
 8002846:	737b      	strb	r3, [r7, #13]
	buffer[6] = param & 0xFF;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	73bb      	strb	r3, [r7, #14]
	serialSendAnswer(buffer);
 800284e:	f107 0308 	add.w	r3, r7, #8
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fc5e 	bl	8002114 <serialSendAnswer>
}
 8002858:	bf00      	nop
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <output_ascii>:

void output_ascii(int32_t val) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b08c      	sub	sp, #48	@ 0x30
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	char tmp[34];
	sprintf(tmp, "%-ld", val);
 8002868:	f107 030c 	add.w	r3, r7, #12
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	490c      	ldr	r1, [pc, #48]	@ (80028a0 <output_ascii+0x40>)
 8002870:	4618      	mov	r0, r3
 8002872:	f007 fe85 	bl	800a580 <siprintf>
	uartRB_Put(&usart3_rb, tmp, strlen(tmp));
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd fcda 	bl	8000234 <strlen>
 8002880:	4603      	mov	r3, r0
 8002882:	b2da      	uxtb	r2, r3
 8002884:	f107 030c 	add.w	r3, r7, #12
 8002888:	4619      	mov	r1, r3
 800288a:	4806      	ldr	r0, [pc, #24]	@ (80028a4 <output_ascii+0x44>)
 800288c:	f001 f80a 	bl	80038a4 <uartRB_Put>
	uartRB_KickTx(&usart3_rb);
 8002890:	4804      	ldr	r0, [pc, #16]	@ (80028a4 <output_ascii+0x44>)
 8002892:	f000 ffc1 	bl	8003818 <uartRB_KickTx>
}
 8002896:	bf00      	nop
 8002898:	3730      	adds	r7, #48	@ 0x30
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	0800b0a4 	.word	0x0800b0a4
 80028a4:	20000f70 	.word	0x20000f70

080028a8 <remote_ascii_verbose>:

uint8_t remote_ascii_verbose(void) {
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
	return verbose;
 80028ac:	4b03      	ldr	r3, [pc, #12]	@ (80028bc <remote_ascii_verbose+0x14>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	b2db      	uxtb	r3, r3
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	20000295 	.word	0x20000295

080028c0 <remote_ascii_crlf>:

uint8_t remote_ascii_crlf(void) {
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
	return crlf;
 80028c4:	4b03      	ldr	r3, [pc, #12]	@ (80028d4 <remote_ascii_crlf+0x14>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	20000296 	.word	0x20000296

080028d8 <resultQueue_init>:
//void output_touch_result(stack_item *cmd);
//void spi_SendAnswer(uint8_t *message);

//--------------FUNKTIONSDEFINITIONS-----------------------------------------------------------------------------------------
void resultQueue_init(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
	resultQueue_in = 0;
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <resultQueue_init+0x1c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
	resultQueue_out = 0;
 80028e2:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <resultQueue_init+0x20>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	200006a8 	.word	0x200006a8
 80028f8:	200006a9 	.word	0x200006a9

080028fc <get_anzFrei_resultQueue>:

uint8_t get_anzFrei_resultQueue(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
	int8_t x;
	//ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		x = resultQueue_in - resultQueue_out;
 8002902:	4b0d      	ldr	r3, [pc, #52]	@ (8002938 <get_anzFrei_resultQueue+0x3c>)
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	4b0d      	ldr	r3, [pc, #52]	@ (800293c <get_anzFrei_resultQueue+0x40>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	71fb      	strb	r3, [r7, #7]
		if (x < 0) x = x + RESULT_QUEUE_SIZE;
 8002910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002914:	2b00      	cmp	r3, #0
 8002916:	da03      	bge.n	8002920 <get_anzFrei_resultQueue+0x24>
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	333c      	adds	r3, #60	@ 0x3c
 800291c:	b2db      	uxtb	r3, r3
 800291e:	71fb      	strb	r3, [r7, #7]
		x = RESULT_QUEUE_SIZE - x;
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8002926:	b2db      	uxtb	r3, r3
 8002928:	71fb      	strb	r3, [r7, #7]
	}
	return x;
 800292a:	79fb      	ldrb	r3, [r7, #7]
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	200006a8 	.word	0x200006a8
 800293c:	200006a9 	.word	0x200006a9

08002940 <get_anzBes_resultQueue>:

uint8_t get_anzBes_resultQueue(void)
{	int8_t x;
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
	//ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		x = resultQueue_in - resultQueue_out;
 8002946:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <get_anzBes_resultQueue+0x34>)
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <get_anzBes_resultQueue+0x38>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	71fb      	strb	r3, [r7, #7]
		if (x < 0) x = x + RESULT_QUEUE_SIZE;
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	da03      	bge.n	8002964 <get_anzBes_resultQueue+0x24>
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	333c      	adds	r3, #60	@ 0x3c
 8002960:	b2db      	uxtb	r3, r3
 8002962:	71fb      	strb	r3, [r7, #7]
	}
	return x;
 8002964:	79fb      	ldrb	r3, [r7, #7]
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	200006a8 	.word	0x200006a8
 8002978:	200006a9 	.word	0x200006a9

0800297c <resultQueue_push>:

uint8_t resultQueue_push (stack_item  sitem)
{
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	463c      	mov	r4, r7
 8002984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp = get_anzFrei_resultQueue();
 8002988:	f7ff ffb8 	bl	80028fc <get_anzFrei_resultQueue>
 800298c:	4603      	mov	r3, r0
 800298e:	75bb      	strb	r3, [r7, #22]

	uint8_t flag =0;  // der Flag bedeutet, ob das Hinfuegen des Commando in Queue erfolgreich ist: 0= Nicht erfolgreich, 1= Erfolgreich
 8002990:	2300      	movs	r3, #0
 8002992:	75fb      	strb	r3, [r7, #23]

	if (tmp > 1)
 8002994:	7dbb      	ldrb	r3, [r7, #22]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d919      	bls.n	80029ce <resultQueue_push+0x52>
	{
		resultQueue[resultQueue_in] = sitem;
 800299a:	4b10      	ldr	r3, [pc, #64]	@ (80029dc <resultQueue_push+0x60>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	4a10      	ldr	r2, [pc, #64]	@ (80029e0 <resultQueue_push+0x64>)
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	4413      	add	r3, r2
 80029a4:	461c      	mov	r4, r3
 80029a6:	463b      	mov	r3, r7
 80029a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		resultQueue_in ++;
 80029ae:	4b0b      	ldr	r3, [pc, #44]	@ (80029dc <resultQueue_push+0x60>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	3301      	adds	r3, #1
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <resultQueue_push+0x60>)
 80029b8:	701a      	strb	r2, [r3, #0]
		if (resultQueue_in >= RESULT_QUEUE_SIZE) resultQueue_in =0;
 80029ba:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <resultQueue_push+0x60>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b3b      	cmp	r3, #59	@ 0x3b
 80029c0:	d902      	bls.n	80029c8 <resultQueue_push+0x4c>
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <resultQueue_push+0x60>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
		flag = 1;
 80029c8:	2301      	movs	r3, #1
 80029ca:	75fb      	strb	r3, [r7, #23]
 80029cc:	e001      	b.n	80029d2 <resultQueue_push+0x56>
	}
	else
	{
		flag = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	75fb      	strb	r3, [r7, #23]
	};
	return flag;
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd90      	pop	{r4, r7, pc}
 80029dc:	200006a8 	.word	0x200006a8
 80029e0:	200002e8 	.word	0x200002e8

080029e4 <resultQueue_pop>:

void resultQueue_pop(stack_item *sitem)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	uint8_t tmp =get_anzFrei_resultQueue();
 80029ec:	f7ff ff86 	bl	80028fc <get_anzFrei_resultQueue>
 80029f0:	4603      	mov	r3, r0
 80029f2:	73fb      	strb	r3, [r7, #15]

	if (tmp < RESULT_QUEUE_SIZE )
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b3b      	cmp	r3, #59	@ 0x3b
 80029f8:	d817      	bhi.n	8002a2a <resultQueue_pop+0x46>
	{
		*sitem = resultQueue[resultQueue_out];
 80029fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002a34 <resultQueue_pop+0x50>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4a0d      	ldr	r2, [pc, #52]	@ (8002a38 <resultQueue_pop+0x54>)
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	4413      	add	r3, r2
 8002a06:	460c      	mov	r4, r1
 8002a08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		resultQueue_out ++;
 8002a0e:	4b09      	ldr	r3, [pc, #36]	@ (8002a34 <resultQueue_pop+0x50>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	3301      	adds	r3, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <resultQueue_pop+0x50>)
 8002a18:	701a      	strb	r2, [r3, #0]
		if (resultQueue_out >= RESULT_QUEUE_SIZE) resultQueue_out = 0;
 8002a1a:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <resultQueue_pop+0x50>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002a20:	d903      	bls.n	8002a2a <resultQueue_pop+0x46>
 8002a22:	4b04      	ldr	r3, [pc, #16]	@ (8002a34 <resultQueue_pop+0x50>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
	};
	return;
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
}
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd90      	pop	{r4, r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200006a9 	.word	0x200006a9
 8002a38:	200002e8 	.word	0x200002e8

08002a3c <result_get_sero>:

void result_get_sero(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
	stack_item cmd_tmp;
	uint8_t verbose_tmp = remote_ascii_verbose();
 8002a42:	f7ff ff31 	bl	80028a8 <remote_ascii_verbose>
 8002a46:	4603      	mov	r3, r0
 8002a48:	75fb      	strb	r3, [r7, #23]
	uint8_t crlf_tmp = remote_ascii_crlf();
 8002a4a:	f7ff ff39 	bl	80028c0 <remote_ascii_crlf>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	75bb      	strb	r3, [r7, #22]

	while (get_anzBes_resultQueue() > 0 )
 8002a52:	e015      	b.n	8002a80 <result_get_sero+0x44>
	{
		resultQueue_pop(&cmd_tmp);
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ffc4 	bl	80029e4 <resultQueue_pop>
		//uart0_puts("result");
		//uart0_puti(cmd_tmp.cmd_index);
		//uart0_puti(cmd_tmp.cmd_ack);
		//uart0_puti(cmd_tmp.parameter);
		switch (cmd_tmp.cmd_sender)
 8002a5c:	793b      	ldrb	r3, [r7, #4]
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d008      	beq.n	8002a74 <result_get_sero+0x38>
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d10b      	bne.n	8002a7e <result_get_sero+0x42>
			//case Q_TOUCHPANEL:
				//output_touch_result(&cmd_tmp);
			//	break;
			case Q_RS232_ASCII:
				//uart0_puts("ASC");
				output_ascii_result(verbose_tmp, crlf_tmp, &cmd_tmp);
 8002a66:	1d3a      	adds	r2, r7, #4
 8002a68:	7db9      	ldrb	r1, [r7, #22]
 8002a6a:	7dfb      	ldrb	r3, [r7, #23]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fe7d 	bl	800276c <output_ascii_result>
				break;
 8002a72:	e005      	b.n	8002a80 <result_get_sero+0x44>
			case Q_RS232_BINARY:
				output_binary_result(&cmd_tmp);
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff febc 	bl	80027f4 <output_binary_result>
				break;
 8002a7c:	e000      	b.n	8002a80 <result_get_sero+0x44>
//				output_userport_result(&cmd_tmp);
//			case Q_ZENTRALE:
//				zentrale_match_get_sero(&cmd_tmp);
//				break;
			default:
				break;
 8002a7e:	bf00      	nop
	while (get_anzBes_resultQueue() > 0 )
 8002a80:	f7ff ff5e 	bl	8002940 <get_anzBes_resultQueue>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1e4      	bne.n	8002a54 <result_get_sero+0x18>
		};
	};

	return;
 8002a8a:	bf00      	nop
}
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002b0c <MX_SPI1_Init+0x78>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002aa0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002aa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aa6:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aac:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002aae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002ab2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002ab4:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aba:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ac6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002aca:	2220      	movs	r2, #32
 8002acc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002ae0:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002ae2:	2207      	movs	r2, #7
 8002ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ae6:	4b08      	ldr	r3, [pc, #32]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002aec:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002af2:	4805      	ldr	r0, [pc, #20]	@ (8002b08 <MX_SPI1_Init+0x74>)
 8002af4:	f004 fbcc 	bl	8007290 <HAL_SPI_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002afe:	f7fe fc60 	bl	80013c2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200006ac 	.word	0x200006ac
 8002b0c:	40013000 	.word	0x40013000

08002b10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	@ 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a17      	ldr	r2, [pc, #92]	@ (8002b8c <HAL_SPI_MspInit+0x7c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d128      	bne.n	8002b84 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b32:	4b17      	ldr	r3, [pc, #92]	@ (8002b90 <HAL_SPI_MspInit+0x80>)
 8002b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b36:	4a16      	ldr	r2, [pc, #88]	@ (8002b90 <HAL_SPI_MspInit+0x80>)
 8002b38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b3e:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <HAL_SPI_MspInit+0x80>)
 8002b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4a:	4b11      	ldr	r3, [pc, #68]	@ (8002b90 <HAL_SPI_MspInit+0x80>)
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4e:	4a10      	ldr	r2, [pc, #64]	@ (8002b90 <HAL_SPI_MspInit+0x80>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b56:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <HAL_SPI_MspInit+0x80>)
 8002b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b62:	23e0      	movs	r3, #224	@ 0xe0
 8002b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b72:	2305      	movs	r3, #5
 8002b74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b76:	f107 0314 	add.w	r3, r7, #20
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b80:	f003 f8a8 	bl	8005cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b84:	bf00      	nop
 8002b86:	3728      	adds	r7, #40	@ 0x28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40013000 	.word	0x40013000
 8002b90:	40021000 	.word	0x40021000

08002b94 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a08      	ldr	r2, [pc, #32]	@ (8002bc4 <HAL_SPI_MspDeInit+0x30>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10a      	bne.n	8002bbc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002ba6:	4b08      	ldr	r3, [pc, #32]	@ (8002bc8 <HAL_SPI_MspDeInit+0x34>)
 8002ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002baa:	4a07      	ldr	r2, [pc, #28]	@ (8002bc8 <HAL_SPI_MspDeInit+0x34>)
 8002bac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bb0:	6613      	str	r3, [r2, #96]	@ 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8002bb2:	21e0      	movs	r1, #224	@ 0xe0
 8002bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bb8:	f003 fa0e 	bl	8005fd8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40013000 	.word	0x40013000
 8002bc8:	40021000 	.word	0x40021000

08002bcc <spiTransferWord>:

    // return the received data
    return rxData;
}

uint16_t spiTransferWord(uint16_t data) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	80fb      	strh	r3, [r7, #6]
    uint16_t rxData = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	81fb      	strh	r3, [r7, #14]

    HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&data, (uint8_t *)&rxData, 2, 100);
 8002bda:	f107 020e 	add.w	r2, r7, #14
 8002bde:	1db9      	adds	r1, r7, #6
 8002be0:	2364      	movs	r3, #100	@ 0x64
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2302      	movs	r3, #2
 8002be6:	4804      	ldr	r0, [pc, #16]	@ (8002bf8 <spiTransferWord+0x2c>)
 8002be8:	f004 fd9b 	bl	8007722 <HAL_SPI_TransmitReceive>

    // return the received data
    return rxData;
 8002bec:	89fb      	ldrh	r3, [r7, #14]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200006ac 	.word	0x200006ac

08002bfc <spi_access_device>:

void spi_access_device(uint8_t device)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
	 _spi_access_device(device, spi_select_device);
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f812 	bl	8002c34 <_spi_access_device>
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <spi_release_device>:

void spi_release_device(uint8_t device)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71fb      	strb	r3, [r7, #7]
	 _spi_access_device(device, spi_deselect_device);
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	2100      	movs	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f804 	bl	8002c34 <_spi_access_device>
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_spi_access_device>:

void _spi_access_device(uint8_t device, uint8_t status) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	460a      	mov	r2, r1
 8002c3e:	71fb      	strb	r3, [r7, #7]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71bb      	strb	r3, [r7, #6]
	SPI_HandleTypeDef *spiHandle;

	if (status == spi_select_device) {
 8002c44:	79bb      	ldrb	r3, [r7, #6]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d162      	bne.n	8002d10 <_spi_access_device+0xdc>
		spiHandle = &hspi1;
 8002c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d3c <_spi_access_device+0x108>)
 8002c4c:	60fb      	str	r3, [r7, #12]
		/*Prior to changing the CPOL/CPHA bits the SPI must be disabled by resetting the SPE bit*/
		if (HAL_SPI_DeInit(spiHandle) != HAL_OK) {
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f004 fbc9 	bl	80073e6 <HAL_SPI_DeInit>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <_spi_access_device+0x2a>
			Error_Handler();
 8002c5a:	f7fe fbb2 	bl	80013c2 <Error_Handler>
		}

		spiHandle->Instance = SPI1;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4a37      	ldr	r2, [pc, #220]	@ (8002d40 <_spi_access_device+0x10c>)
 8002c62:	601a      	str	r2, [r3, #0]
		spiHandle->Init.Mode = SPI_MODE_MASTER;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c6a:	605a      	str	r2, [r3, #4]
		spiHandle->Init.Direction = SPI_DIRECTION_2LINES;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
		spiHandle->Init.DataSize = SPI_DATASIZE_8BIT;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002c78:	60da      	str	r2, [r3, #12]
		spiHandle->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
		spiHandle->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	615a      	str	r2, [r3, #20]
		spiHandle->Init.NSS = SPI_NSS_SOFT;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c8c:	619a      	str	r2, [r3, #24]
		spiHandle->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2210      	movs	r2, #16
 8002c92:	61da      	str	r2, [r3, #28]
		spiHandle->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	621a      	str	r2, [r3, #32]
		spiHandle->Init.TIMode = SPI_TIMODE_DISABLE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	625a      	str	r2, [r3, #36]	@ 0x24
		spiHandle->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	629a      	str	r2, [r3, #40]	@ 0x28
		spiHandle->Init.CRCPolynomial = 7;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2207      	movs	r2, #7
 8002caa:	62da      	str	r2, [r3, #44]	@ 0x2c
		spiHandle->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	@ 0x30
		spiHandle->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_SPI_Init(spiHandle) != HAL_OK) {
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f004 fae9 	bl	8007290 <HAL_SPI_Init>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <_spi_access_device+0x94>
			Error_Handler();
 8002cc4:	f7fe fb7d 	bl	80013c2 <Error_Handler>
		}

		switch (device) {
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d830      	bhi.n	8002d32 <_spi_access_device+0xfe>
 8002cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd8 <_spi_access_device+0xa4>)
 8002cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd6:	bf00      	nop
 8002cd8:	08002ce9 	.word	0x08002ce9
 8002cdc:	08002cfd 	.word	0x08002cfd
 8002ce0:	08002cf3 	.word	0x08002cf3
 8002ce4:	08002d07 	.word	0x08002d07
		case spi_mio:
			spi_set_cs(spi_mio_cs, spi_select_device);
 8002ce8:	2101      	movs	r1, #1
 8002cea:	2001      	movs	r0, #1
 8002cec:	f000 f82a 	bl	8002d44 <spi_set_cs>
			break;
 8002cf0:	e020      	b.n	8002d34 <_spi_access_device+0x100>
		case spi_sps_in:
			spi_set_cs(spi_sps_in_cs, spi_select_device);
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	2003      	movs	r0, #3
 8002cf6:	f000 f825 	bl	8002d44 <spi_set_cs>
			break;
 8002cfa:	e01b      	b.n	8002d34 <_spi_access_device+0x100>
		case spi_sps_out:
			spi_set_cs(spi_sps_out_cs, spi_select_device);
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	2002      	movs	r0, #2
 8002d00:	f000 f820 	bl	8002d44 <spi_set_cs>
			break;
 8002d04:	e016      	b.n	8002d34 <_spi_access_device+0x100>
		case spi_mcp:
			// High-Speed SPI Interface (MCP23S17): - 10 MHz (maximum) baud pre-scaler might needs to be changed
			spi_set_cs(spi_mcp_cs, spi_select_device);
 8002d06:	2101      	movs	r1, #1
 8002d08:	2004      	movs	r0, #4
 8002d0a:	f000 f81b 	bl	8002d44 <spi_set_cs>
			break;
 8002d0e:	e011      	b.n	8002d34 <_spi_access_device+0x100>

		default:
			break;
		}
	} else {
		spi_set_cs(spi_mio_cs, spi_deselect_device);
 8002d10:	2100      	movs	r1, #0
 8002d12:	2001      	movs	r0, #1
 8002d14:	f000 f816 	bl	8002d44 <spi_set_cs>
		spi_set_cs(spi_sps_out_cs, spi_deselect_device);
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2002      	movs	r0, #2
 8002d1c:	f000 f812 	bl	8002d44 <spi_set_cs>
		spi_set_cs(spi_sps_in_cs, spi_deselect_device);
 8002d20:	2100      	movs	r1, #0
 8002d22:	2003      	movs	r0, #3
 8002d24:	f000 f80e 	bl	8002d44 <spi_set_cs>
		spi_set_cs(spi_mcp_cs, spi_deselect_device);
 8002d28:	2100      	movs	r1, #0
 8002d2a:	2004      	movs	r0, #4
 8002d2c:	f000 f80a 	bl	8002d44 <spi_set_cs>
	}
}
 8002d30:	e000      	b.n	8002d34 <_spi_access_device+0x100>
			break;
 8002d32:	bf00      	nop
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200006ac 	.word	0x200006ac
 8002d40:	40013000 	.word	0x40013000

08002d44 <spi_set_cs>:

void spi_set_cs(uint8_t cs, uint8_t state)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	460a      	mov	r2, r1
 8002d4e:	71fb      	strb	r3, [r7, #7]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71bb      	strb	r3, [r7, #6]
	if(state != spi_cs_all_off)
 8002d54:	79bb      	ldrb	r3, [r7, #6]
 8002d56:	2bff      	cmp	r3, #255	@ 0xff
 8002d58:	d04e      	beq.n	8002df8 <spi_set_cs+0xb4>
	{
		// Chipselect aktivieren
		switch(cs)
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d861      	bhi.n	8002e26 <spi_set_cs+0xe2>
 8002d62:	a201      	add	r2, pc, #4	@ (adr r2, 8002d68 <spi_set_cs+0x24>)
 8002d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d68:	08002d79 	.word	0x08002d79
 8002d6c:	08002d9b 	.word	0x08002d9b
 8002d70:	08002db9 	.word	0x08002db9
 8002d74:	08002dd7 	.word	0x08002dd7
		{
		case spi_mio_cs:
			if (state == spi_select_device)
 8002d78:	79bb      	ldrb	r3, [r7, #6]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d106      	bne.n	8002d8c <spi_set_cs+0x48>
				HAL_GPIO_WritePin(UC_CS_AUX0_GPIO_Port, UC_CS_AUX0_Pin,	GPIO_PIN_RESET);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2110      	movs	r1, #16
 8002d82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d86:	f003 fa21 	bl	80061cc <HAL_GPIO_WritePin>
			else
				HAL_GPIO_WritePin(UC_CS_AUX0_GPIO_Port, UC_CS_AUX0_Pin,	GPIO_PIN_SET);
			break;
 8002d8a:	e04d      	b.n	8002e28 <spi_set_cs+0xe4>
				HAL_GPIO_WritePin(UC_CS_AUX0_GPIO_Port, UC_CS_AUX0_Pin,	GPIO_PIN_SET);
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	2110      	movs	r1, #16
 8002d90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d94:	f003 fa1a 	bl	80061cc <HAL_GPIO_WritePin>
			break;
 8002d98:	e046      	b.n	8002e28 <spi_set_cs+0xe4>

		case spi_sps_out_cs:
			if (state == spi_select_device)
 8002d9a:	79bb      	ldrb	r3, [r7, #6]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d105      	bne.n	8002dac <spi_set_cs+0x68>
				HAL_GPIO_WritePin(UC_CS_SPS_OUT_GPIO_Port, UC_CS_SPS_OUT_Pin,	GPIO_PIN_RESET);
 8002da0:	2200      	movs	r2, #0
 8002da2:	2102      	movs	r1, #2
 8002da4:	4822      	ldr	r0, [pc, #136]	@ (8002e30 <spi_set_cs+0xec>)
 8002da6:	f003 fa11 	bl	80061cc <HAL_GPIO_WritePin>
			else
				HAL_GPIO_WritePin(UC_CS_SPS_OUT_GPIO_Port, UC_CS_SPS_OUT_Pin,	GPIO_PIN_SET);
			break;
 8002daa:	e03d      	b.n	8002e28 <spi_set_cs+0xe4>
				HAL_GPIO_WritePin(UC_CS_SPS_OUT_GPIO_Port, UC_CS_SPS_OUT_Pin,	GPIO_PIN_SET);
 8002dac:	2201      	movs	r2, #1
 8002dae:	2102      	movs	r1, #2
 8002db0:	481f      	ldr	r0, [pc, #124]	@ (8002e30 <spi_set_cs+0xec>)
 8002db2:	f003 fa0b 	bl	80061cc <HAL_GPIO_WritePin>
			break;
 8002db6:	e037      	b.n	8002e28 <spi_set_cs+0xe4>

		case spi_sps_in_cs:
			if (state == spi_select_device)
 8002db8:	79bb      	ldrb	r3, [r7, #6]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d105      	bne.n	8002dca <spi_set_cs+0x86>
				HAL_GPIO_WritePin(UC_CS_SPS_IN_GPIO_Port, UC_CS_SPS_IN_Pin,	GPIO_PIN_RESET);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2104      	movs	r1, #4
 8002dc2:	481b      	ldr	r0, [pc, #108]	@ (8002e30 <spi_set_cs+0xec>)
 8002dc4:	f003 fa02 	bl	80061cc <HAL_GPIO_WritePin>
			else
				HAL_GPIO_WritePin(UC_CS_SPS_IN_GPIO_Port, UC_CS_SPS_IN_Pin,	GPIO_PIN_SET);
			break;
 8002dc8:	e02e      	b.n	8002e28 <spi_set_cs+0xe4>
				HAL_GPIO_WritePin(UC_CS_SPS_IN_GPIO_Port, UC_CS_SPS_IN_Pin,	GPIO_PIN_SET);
 8002dca:	2201      	movs	r2, #1
 8002dcc:	2104      	movs	r1, #4
 8002dce:	4818      	ldr	r0, [pc, #96]	@ (8002e30 <spi_set_cs+0xec>)
 8002dd0:	f003 f9fc 	bl	80061cc <HAL_GPIO_WritePin>
			break;
 8002dd4:	e028      	b.n	8002e28 <spi_set_cs+0xe4>

		case spi_mcp_cs:
			if (state == spi_select_device)
 8002dd6:	79bb      	ldrb	r3, [r7, #6]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d106      	bne.n	8002dea <spi_set_cs+0xa6>
				HAL_GPIO_WritePin(UC_CS_AUX1_GPIO_Port, UC_CS_AUX1_Pin,	GPIO_PIN_RESET);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002de2:	4814      	ldr	r0, [pc, #80]	@ (8002e34 <spi_set_cs+0xf0>)
 8002de4:	f003 f9f2 	bl	80061cc <HAL_GPIO_WritePin>
			else
				HAL_GPIO_WritePin(UC_CS_AUX1_GPIO_Port, UC_CS_AUX1_Pin,	GPIO_PIN_SET);
			break;
 8002de8:	e01e      	b.n	8002e28 <spi_set_cs+0xe4>
				HAL_GPIO_WritePin(UC_CS_AUX1_GPIO_Port, UC_CS_AUX1_Pin,	GPIO_PIN_SET);
 8002dea:	2201      	movs	r2, #1
 8002dec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002df0:	4810      	ldr	r0, [pc, #64]	@ (8002e34 <spi_set_cs+0xf0>)
 8002df2:	f003 f9eb 	bl	80061cc <HAL_GPIO_WritePin>
			break;
 8002df6:	e017      	b.n	8002e28 <spi_set_cs+0xe4>
		}
	}
	else
	{
		// Chip selects off
		HAL_GPIO_WritePin(UC_CS_AUX0_GPIO_Port, UC_CS_AUX0_Pin, GPIO_PIN_SET);
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e00:	f003 f9e4 	bl	80061cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(UC_CS_SPS_OUT_GPIO_Port, UC_CS_SPS_OUT_Pin,	GPIO_PIN_SET);
 8002e04:	2201      	movs	r2, #1
 8002e06:	2102      	movs	r1, #2
 8002e08:	4809      	ldr	r0, [pc, #36]	@ (8002e30 <spi_set_cs+0xec>)
 8002e0a:	f003 f9df 	bl	80061cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(UC_CS_SPS_IN_GPIO_Port, UC_CS_SPS_IN_Pin,	GPIO_PIN_SET);
 8002e0e:	2201      	movs	r2, #1
 8002e10:	2104      	movs	r1, #4
 8002e12:	4807      	ldr	r0, [pc, #28]	@ (8002e30 <spi_set_cs+0xec>)
 8002e14:	f003 f9da 	bl	80061cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(UC_CS_AUX1_GPIO_Port, UC_CS_AUX1_Pin,	GPIO_PIN_SET);
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e1e:	4805      	ldr	r0, [pc, #20]	@ (8002e34 <spi_set_cs+0xf0>)
 8002e20:	f003 f9d4 	bl	80061cc <HAL_GPIO_WritePin>
	}
}
 8002e24:	e000      	b.n	8002e28 <spi_set_cs+0xe4>
				break;
 8002e26:	bf00      	nop
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	48000400 	.word	0x48000400
 8002e34:	48001400 	.word	0x48001400

08002e38 <stacks_init>:
uint8_t zstackindex_list_act_get(void);
uint8_t mcstackindex_list_act_get(void);

//--- FUNKTIONSDEFINITIONS --------------------------------------------------------------------------------------------------
void stacks_init(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	71fb      	strb	r3, [r7, #7]

	zstackindex_list_act = Z_STACK_SIZE -1;        //alle Stackindexe sind frei
 8002e42:	4b20      	ldr	r3, [pc, #128]	@ (8002ec4 <stacks_init+0x8c>)
 8002e44:	221d      	movs	r2, #29
 8002e46:	701a      	strb	r2, [r3, #0]
	mcstackindex_list_act = MC_STACK_SIZE -1;
 8002e48:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec8 <stacks_init+0x90>)
 8002e4a:	2213      	movs	r2, #19
 8002e4c:	701a      	strb	r2, [r3, #0]
	mcstack_rest_length = MC_STACK_SIZE - MCSTACK_ZENTRALE_RESERVATION;
 8002e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ecc <stacks_init+0x94>)
 8002e50:	2212      	movs	r2, #18
 8002e52:	701a      	strb	r2, [r3, #0]


	for (i = 0; i < Z_STACK_SIZE; i++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	71fb      	strb	r3, [r7, #7]
 8002e58:	e011      	b.n	8002e7e <stacks_init+0x46>
	{
		zentrale_stack[i].next = NONEXT;
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed0 <stacks_init+0x98>)
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	4413      	add	r3, r2
 8002e62:	330c      	adds	r3, #12
 8002e64:	22ff      	movs	r2, #255	@ 0xff
 8002e66:	701a      	strb	r2, [r3, #0]
		zstackindex_list[i] = zstackindex_list_act - i;   //alle freien Stackindexe sind abwärts in die Stackindex-Liste(aufwärts) gelegt.
 8002e68:	4b16      	ldr	r3, [pc, #88]	@ (8002ec4 <stacks_init+0x8c>)
 8002e6a:	7819      	ldrb	r1, [r3, #0]
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	79fa      	ldrb	r2, [r7, #7]
 8002e70:	1a8a      	subs	r2, r1, r2
 8002e72:	b2d1      	uxtb	r1, r2
 8002e74:	4a17      	ldr	r2, [pc, #92]	@ (8002ed4 <stacks_init+0x9c>)
 8002e76:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < Z_STACK_SIZE; i++)
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	71fb      	strb	r3, [r7, #7]
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	2b1d      	cmp	r3, #29
 8002e82:	d9ea      	bls.n	8002e5a <stacks_init+0x22>
	};

	for (i = 0; i < MC_STACK_SIZE; i++)
 8002e84:	2300      	movs	r3, #0
 8002e86:	71fb      	strb	r3, [r7, #7]
 8002e88:	e011      	b.n	8002eae <stacks_init+0x76>
	{
		mc_stack[i].next = NONEXT;
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	4a12      	ldr	r2, [pc, #72]	@ (8002ed8 <stacks_init+0xa0>)
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	4413      	add	r3, r2
 8002e92:	330c      	adds	r3, #12
 8002e94:	22ff      	movs	r2, #255	@ 0xff
 8002e96:	701a      	strb	r2, [r3, #0]
		mcstackindex_list[i] = mcstackindex_list_act - i;
 8002e98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec8 <stacks_init+0x90>)
 8002e9a:	7819      	ldrb	r1, [r3, #0]
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	79fa      	ldrb	r2, [r7, #7]
 8002ea0:	1a8a      	subs	r2, r1, r2
 8002ea2:	b2d1      	uxtb	r1, r2
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8002edc <stacks_init+0xa4>)
 8002ea6:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < MC_STACK_SIZE; i++)
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	71fb      	strb	r3, [r7, #7]
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	2b13      	cmp	r3, #19
 8002eb2:	d9ea      	bls.n	8002e8a <stacks_init+0x52>
	};
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000a64 	.word	0x20000a64
 8002ec8:	20000a65 	.word	0x20000a65
 8002ecc:	20000a66 	.word	0x20000a66
 8002ed0:	20000710 	.word	0x20000710
 8002ed4:	20000a30 	.word	0x20000a30
 8002ed8:	200008f0 	.word	0x200008f0
 8002edc:	20000a50 	.word	0x20000a50

08002ee0 <stacks_insert_cmd>:

uint8_t stacks_insert_cmd(stack_item stack[], uint8_t stack_length, uint8_t stackindex_list[], stack_item stack_data, uint8_t *stackindexlist_act, uint8_t *stackindex)
{
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	b490      	push	{r4, r7}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eee:	460b      	mov	r3, r1
 8002ef0:	72fb      	strb	r3, [r7, #11]
	uint8_t index_tmp;
	uint8_t flag;

	if ( (*stackindexlist_act >= 0)  && (*stackindexlist_act < stack_length) )          //wenn es einen freien Platz gibt,
 8002ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	7afa      	ldrb	r2, [r7, #11]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d923      	bls.n	8002f44 <stacks_insert_cmd+0x64>
	{
		index_tmp = *stackindexlist_act;
 8002efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	75bb      	strb	r3, [r7, #22]
		*stackindex = stackindex_list[index_tmp];                    //fügt einen Element in den Stack ein
 8002f02:	7dbb      	ldrb	r3, [r7, #22]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f0c:	701a      	strb	r2, [r3, #0]
		stack[*stackindex] = stack_data;
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4413      	add	r3, r2
 8002f18:	461c      	mov	r4, r3
 8002f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if (index_tmp == 0 )                                     //d.h. es keine leer Platz mehr im Stack nach dem Einfügen gibt.
 8002f24:	7dbb      	ldrb	r3, [r7, #22]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <stacks_insert_cmd+0x52>
		{
			*stackindexlist_act = NONEXT;           //NONEXT bezeichnet: der Stack ist voll, weil die negative Zahl nicht erlaubt ist.
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2c:	22ff      	movs	r2, #255	@ 0xff
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e005      	b.n	8002f3e <stacks_insert_cmd+0x5e>
		}
		else
		{
			index_tmp -=1;
 8002f32:	7dbb      	ldrb	r3, [r7, #22]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	75bb      	strb	r3, [r7, #22]
			*stackindexlist_act = index_tmp;
 8002f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3a:	7dba      	ldrb	r2, [r7, #22]
 8002f3c:	701a      	strb	r2, [r3, #0]
		};
		flag = STACK_INTSERT_OK;
 8002f3e:	2314      	movs	r3, #20
 8002f40:	75fb      	strb	r3, [r7, #23]
 8002f42:	e001      	b.n	8002f48 <stacks_insert_cmd+0x68>
	}
	else //Falls der Stack voll ist,
	{
		flag = CMR_UNITBUSY;
 8002f44:	2309      	movs	r3, #9
 8002f46:	75fb      	strb	r3, [r7, #23]
	};

	return flag;
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc90      	pop	{r4, r7}
 8002f52:	b002      	add	sp, #8
 8002f54:	4770      	bx	lr
	...

08002f58 <z_mc_stack_insert>:

uint8_t z_mc_stack_insert(stack_item stack_data, uint8_t mc_flg)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b091      	sub	sp, #68	@ 0x44
 8002f5c:	af06      	add	r7, sp, #24
 8002f5e:	463c      	mov	r4, r7
 8002f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t flag = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t push_result = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t prio_pushflg = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t stack_index = NONEXT;
 8002f76:	23ff      	movs	r3, #255	@ 0xff
 8002f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t mc_push_enable = 0;  //=0: es ist nicht erlaubt, die Befehlen in den MC- Stack einlegen; > 1: es ist erlaubt; =1: die Befehlen aus der Zentrale;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	//=2: aus der anderen Quellen.

	stack_item stack_tmp;

	if (mc_flg)   // d.h. der Befehl ist für den MC
 8002f82:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d067      	beq.n	800305a <z_mc_stack_insert+0x102>
	{
		if (stack_data.cmd_sender == Q_ZENTRALE)
 8002f8a:	783b      	ldrb	r3, [r7, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d103      	bne.n	8002f98 <z_mc_stack_insert+0x40>
		{
			mc_push_enable = 1;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002f96:	e00e      	b.n	8002fb6 <z_mc_stack_insert+0x5e>
		}
		else
		{
			if (mcstack_rest_length  > 0)
 8002f98:	4b51      	ldr	r3, [pc, #324]	@ (80030e0 <z_mc_stack_insert+0x188>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <z_mc_stack_insert+0x52>
			{
				mc_push_enable = 2;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002fa8:	e005      	b.n	8002fb6 <z_mc_stack_insert+0x5e>
			}
			else
			{
				mc_push_enable = 0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				flag = CMR_UNITBUSY;
 8002fb0:	2309      	movs	r3, #9
 8002fb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			};
		};

		if (mc_push_enable > 0)
 8002fb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8089 	beq.w	80030d2 <z_mc_stack_insert+0x17a>
		{
			push_result = stacks_insert_cmd(mc_stack, MC_STACK_SIZE, mcstackindex_list, stack_data, &mcstackindex_list_act, &stack_index);
 8002fc0:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8002fc4:	9304      	str	r3, [sp, #16]
 8002fc6:	4b47      	ldr	r3, [pc, #284]	@ (80030e4 <z_mc_stack_insert+0x18c>)
 8002fc8:	9303      	str	r3, [sp, #12]
 8002fca:	466c      	mov	r4, sp
 8002fcc:	1d3b      	adds	r3, r7, #4
 8002fce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002fd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	4a43      	ldr	r2, [pc, #268]	@ (80030e8 <z_mc_stack_insert+0x190>)
 8002fda:	2114      	movs	r1, #20
 8002fdc:	4843      	ldr	r0, [pc, #268]	@ (80030ec <z_mc_stack_insert+0x194>)
 8002fde:	f7ff ff7f 	bl	8002ee0 <stacks_insert_cmd>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			if (push_result == STACK_INTSERT_OK)
 8002fe8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002fec:	2b14      	cmp	r3, #20
 8002fee:	d130      	bne.n	8003052 <z_mc_stack_insert+0xfa>
			{
				prio_pushflg = priolist_push(mc_priolist, MC_STACK_SIZE, mc_priolevel_header,  &mcpriolist_firstunused_index, stack_index, stack_data.prio);
 8002ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ff4:	7b7a      	ldrb	r2, [r7, #13]
 8002ff6:	9201      	str	r2, [sp, #4]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80030f0 <z_mc_stack_insert+0x198>)
 8002ffc:	4a3d      	ldr	r2, [pc, #244]	@ (80030f4 <z_mc_stack_insert+0x19c>)
 8002ffe:	2114      	movs	r1, #20
 8003000:	483d      	ldr	r0, [pc, #244]	@ (80030f8 <z_mc_stack_insert+0x1a0>)
 8003002:	f7fe fb66 	bl	80016d2 <priolist_push>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				if (prio_pushflg )
 800300c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003010:	2b00      	cmp	r3, #0
 8003012:	d013      	beq.n	800303c <z_mc_stack_insert+0xe4>
				{
					flag = STACK_CMDINSTACK;
 8003014:	2311      	movs	r3, #17
 8003016:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					if (mc_push_enable == 2)
 800301a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800301e:	2b02      	cmp	r3, #2
 8003020:	d157      	bne.n	80030d2 <z_mc_stack_insert+0x17a>
					{
						if (mcstack_rest_length > 0)
 8003022:	4b2f      	ldr	r3, [pc, #188]	@ (80030e0 <z_mc_stack_insert+0x188>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d052      	beq.n	80030d2 <z_mc_stack_insert+0x17a>
						{
							mcstack_rest_length -=1;                   //die Plätze für die Befehle aus den anderen Quelle ausser der Zentrale wird einen weniger sein.
 800302c:	4b2c      	ldr	r3, [pc, #176]	@ (80030e0 <z_mc_stack_insert+0x188>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4b2a      	ldr	r3, [pc, #168]	@ (80030e0 <z_mc_stack_insert+0x188>)
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	e04a      	b.n	80030d2 <z_mc_stack_insert+0x17a>

					};
				}
				else
				{
					mcstack_pop(&stack_tmp, stack_data.prio);
 800303c:	7b7a      	ldrb	r2, [r7, #13]
 800303e:	f107 0310 	add.w	r3, r7, #16
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f000 f87f 	bl	8003148 <mcstack_pop>
					flag = STACK_PRIOLIST_ERROR;
 800304a:	2313      	movs	r3, #19
 800304c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003050:	e03f      	b.n	80030d2 <z_mc_stack_insert+0x17a>
				}
			}
			else
			{
				flag = CMR_UNITBUSY;
 8003052:	2309      	movs	r3, #9
 8003054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003058:	e03b      	b.n	80030d2 <z_mc_stack_insert+0x17a>
		};
	}
	else //d.h. der Befehl wird an die Zentrale gesendet
	{

		push_result = stacks_insert_cmd(zentrale_stack, Z_STACK_SIZE, zstackindex_list, stack_data, &zstackindex_list_act, &stack_index);
 800305a:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800305e:	9304      	str	r3, [sp, #16]
 8003060:	4b26      	ldr	r3, [pc, #152]	@ (80030fc <z_mc_stack_insert+0x1a4>)
 8003062:	9303      	str	r3, [sp, #12]
 8003064:	466c      	mov	r4, sp
 8003066:	1d3b      	adds	r3, r7, #4
 8003068:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800306c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4a23      	ldr	r2, [pc, #140]	@ (8003100 <z_mc_stack_insert+0x1a8>)
 8003074:	211e      	movs	r1, #30
 8003076:	4823      	ldr	r0, [pc, #140]	@ (8003104 <z_mc_stack_insert+0x1ac>)
 8003078:	f7ff ff32 	bl	8002ee0 <stacks_insert_cmd>
 800307c:	4603      	mov	r3, r0
 800307e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		if (push_result == STACK_INTSERT_OK)
 8003082:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003086:	2b14      	cmp	r3, #20
 8003088:	d120      	bne.n	80030cc <z_mc_stack_insert+0x174>
		{
			prio_pushflg = priolist_push(z_priolist, Z_STACK_SIZE, z_priolevel_header, &zpriolist_firstunused_index, stack_index, stack_data.prio);
 800308a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800308e:	7b7a      	ldrb	r2, [r7, #13]
 8003090:	9201      	str	r2, [sp, #4]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	4b1c      	ldr	r3, [pc, #112]	@ (8003108 <z_mc_stack_insert+0x1b0>)
 8003096:	4a1d      	ldr	r2, [pc, #116]	@ (800310c <z_mc_stack_insert+0x1b4>)
 8003098:	211e      	movs	r1, #30
 800309a:	481d      	ldr	r0, [pc, #116]	@ (8003110 <z_mc_stack_insert+0x1b8>)
 800309c:	f7fe fb19 	bl	80016d2 <priolist_push>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			if (prio_pushflg )
 80030a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <z_mc_stack_insert+0x15e>
			{
				flag = STACK_CMDINSTACK;
 80030ae:	2311      	movs	r3, #17
 80030b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80030b4:	e00d      	b.n	80030d2 <z_mc_stack_insert+0x17a>
			}
			else
			{
				zstack_pop(&stack_tmp, stack_data.prio);
 80030b6:	7b7a      	ldrb	r2, [r7, #13]
 80030b8:	f107 0310 	add.w	r3, r7, #16
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f898 	bl	80031f4 <zstack_pop>
				flag = STACK_PRIOLIST_ERROR;
 80030c4:	2313      	movs	r3, #19
 80030c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80030ca:	e002      	b.n	80030d2 <z_mc_stack_insert+0x17a>
			} ;
		}
		else
		{

			flag = CMR_UNITBUSY;
 80030cc:	2309      	movs	r3, #9
 80030ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		};
	};
	return flag;
 80030d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	372c      	adds	r7, #44	@ 0x2c
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd90      	pop	{r4, r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000a66 	.word	0x20000a66
 80030e4:	20000a65 	.word	0x20000a65
 80030e8:	20000a50 	.word	0x20000a50
 80030ec:	200008f0 	.word	0x200008f0
 80030f0:	20000294 	.word	0x20000294
 80030f4:	20000290 	.word	0x20000290
 80030f8:	20000264 	.word	0x20000264
 80030fc:	20000a64 	.word	0x20000a64
 8003100:	20000a30 	.word	0x20000a30
 8003104:	20000710 	.word	0x20000710
 8003108:	20000293 	.word	0x20000293
 800310c:	2000028c 	.word	0x2000028c
 8003110:	20000228 	.word	0x20000228

08003114 <stack_insert_sero>:



uint8_t stack_insert_sero(stack_item stack_data)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b089      	sub	sp, #36	@ 0x24
 8003118:	af02      	add	r7, sp, #8
 800311a:	463c      	mov	r4, r7
 800311c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t flag = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	75fb      	strb	r3, [r7, #23]
	uint8_t mc_flg = 0;                            //bezeichnet, dass der Befehl für die Zentrale ist, wenn es 0 ist; für den MC , wenn es 1 ist.
 8003124:	2300      	movs	r3, #0
 8003126:	75bb      	strb	r3, [r7, #22]

	//hier gibt es nur die Befehle für die Zentrale,

	mc_flg = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	75bb      	strb	r3, [r7, #22]
	flag = z_mc_stack_insert(stack_data, mc_flg);
 800312c:	7dbb      	ldrb	r3, [r7, #22]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	463b      	mov	r3, r7
 8003132:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003134:	f7ff ff10 	bl	8002f58 <z_mc_stack_insert>
 8003138:	4603      	mov	r3, r0
 800313a:	75fb      	strb	r3, [r7, #23]
	return flag;
 800313c:	7dfb      	ldrb	r3, [r7, #23]
}
 800313e:	4618      	mov	r0, r3
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	bd90      	pop	{r4, r7, pc}
	...

08003148 <mcstack_pop>:


uint8_t mcstack_pop(stack_item *sitem, uint8_t priolevel)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	70fb      	strb	r3, [r7, #3]
	uint8_t flag = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	73fb      	strb	r3, [r7, #15]
	uint8_t sindex;

	sindex = priolist_pop(mc_priolist, mc_priolevel_header, &mcpriolist_firstunused_index, priolevel);
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	4a1f      	ldr	r2, [pc, #124]	@ (80031d8 <mcstack_pop+0x90>)
 800315c:	491f      	ldr	r1, [pc, #124]	@ (80031dc <mcstack_pop+0x94>)
 800315e:	4820      	ldr	r0, [pc, #128]	@ (80031e0 <mcstack_pop+0x98>)
 8003160:	f7fe fb63 	bl	800182a <priolist_pop>
 8003164:	4603      	mov	r3, r0
 8003166:	73bb      	strb	r3, [r7, #14]
	if (sindex == NONEXT)  // die zu der Priorität entsprechende MCStacklist ist leer
 8003168:	7bbb      	ldrb	r3, [r7, #14]
 800316a:	2bff      	cmp	r3, #255	@ 0xff
 800316c:	d102      	bne.n	8003174 <mcstack_pop+0x2c>
	{
		flag = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]
 8003172:	e02c      	b.n	80031ce <mcstack_pop+0x86>

	}
	else
	{

			*sitem = mc_stack[sindex];
 8003174:	7bbb      	ldrb	r3, [r7, #14]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4a1a      	ldr	r2, [pc, #104]	@ (80031e4 <mcstack_pop+0x9c>)
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	4413      	add	r3, r2
 800317e:	460c      	mov	r4, r1
 8003180:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003182:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if (mcstackindex_list_act == NONEXT)
 8003186:	4b18      	ldr	r3, [pc, #96]	@ (80031e8 <mcstack_pop+0xa0>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2bff      	cmp	r3, #255	@ 0xff
 800318c:	d103      	bne.n	8003196 <mcstack_pop+0x4e>
			{
				mcstackindex_list_act =0;
 800318e:	4b16      	ldr	r3, [pc, #88]	@ (80031e8 <mcstack_pop+0xa0>)
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
 8003194:	e005      	b.n	80031a2 <mcstack_pop+0x5a>

			}
			else
			{
				mcstackindex_list_act +=1;
 8003196:	4b14      	ldr	r3, [pc, #80]	@ (80031e8 <mcstack_pop+0xa0>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4b12      	ldr	r3, [pc, #72]	@ (80031e8 <mcstack_pop+0xa0>)
 80031a0:	701a      	strb	r2, [r3, #0]

			};

			mcstackindex_list[mcstackindex_list_act] = sindex;
 80031a2:	4b11      	ldr	r3, [pc, #68]	@ (80031e8 <mcstack_pop+0xa0>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	4619      	mov	r1, r3
 80031a8:	4a10      	ldr	r2, [pc, #64]	@ (80031ec <mcstack_pop+0xa4>)
 80031aa:	7bbb      	ldrb	r3, [r7, #14]
 80031ac:	5453      	strb	r3, [r2, r1]

			if (mc_stack[sindex].cmd_sender != Q_ZENTRALE)
 80031ae:	7bbb      	ldrb	r3, [r7, #14]
 80031b0:	4a0c      	ldr	r2, [pc, #48]	@ (80031e4 <mcstack_pop+0x9c>)
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	4413      	add	r3, r2
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d006      	beq.n	80031ca <mcstack_pop+0x82>
			{
				mcstack_rest_length += 1;
 80031bc:	4b0c      	ldr	r3, [pc, #48]	@ (80031f0 <mcstack_pop+0xa8>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <mcstack_pop+0xa8>)
 80031c8:	701a      	strb	r2, [r3, #0]
			};

			flag = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]

	};
	return flag;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd90      	pop	{r4, r7, pc}
 80031d8:	20000294 	.word	0x20000294
 80031dc:	20000290 	.word	0x20000290
 80031e0:	20000264 	.word	0x20000264
 80031e4:	200008f0 	.word	0x200008f0
 80031e8:	20000a65 	.word	0x20000a65
 80031ec:	20000a50 	.word	0x20000a50
 80031f0:	20000a66 	.word	0x20000a66

080031f4 <zstack_pop>:

uint8_t zstack_pop(stack_item *sitem, uint8_t priolevel)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	70fb      	strb	r3, [r7, #3]
	uint8_t flag = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	73fb      	strb	r3, [r7, #15]
	uint8_t sindex;
	//uint8_t indexlist_tmp;

	sindex =  priolist_pop(z_priolist, z_priolevel_header, &zpriolist_firstunused_index, priolevel);
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	4a18      	ldr	r2, [pc, #96]	@ (8003268 <zstack_pop+0x74>)
 8003208:	4918      	ldr	r1, [pc, #96]	@ (800326c <zstack_pop+0x78>)
 800320a:	4819      	ldr	r0, [pc, #100]	@ (8003270 <zstack_pop+0x7c>)
 800320c:	f7fe fb0d 	bl	800182a <priolist_pop>
 8003210:	4603      	mov	r3, r0
 8003212:	73bb      	strb	r3, [r7, #14]

	if (sindex == NONEXT)  // die zu der Priorität entsprechende MCStacklist ist leer
 8003214:	7bbb      	ldrb	r3, [r7, #14]
 8003216:	2bff      	cmp	r3, #255	@ 0xff
 8003218:	d102      	bne.n	8003220 <zstack_pop+0x2c>
	{
		flag = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]
 800321e:	e01e      	b.n	800325e <zstack_pop+0x6a>

	}
	else
	{
		*sitem = zentrale_stack[sindex];
 8003220:	7bbb      	ldrb	r3, [r7, #14]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4a13      	ldr	r2, [pc, #76]	@ (8003274 <zstack_pop+0x80>)
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	4413      	add	r3, r2
 800322a:	460c      	mov	r4, r1
 800322c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800322e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if (zstackindex_list_act == NONEXT)
 8003232:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <zstack_pop+0x84>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2bff      	cmp	r3, #255	@ 0xff
 8003238:	d103      	bne.n	8003242 <zstack_pop+0x4e>
		{
			zstackindex_list_act = 0;
 800323a:	4b0f      	ldr	r3, [pc, #60]	@ (8003278 <zstack_pop+0x84>)
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e005      	b.n	800324e <zstack_pop+0x5a>
		}
		else
		{
			zstackindex_list_act +=1;
 8003242:	4b0d      	ldr	r3, [pc, #52]	@ (8003278 <zstack_pop+0x84>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	3301      	adds	r3, #1
 8003248:	b2da      	uxtb	r2, r3
 800324a:	4b0b      	ldr	r3, [pc, #44]	@ (8003278 <zstack_pop+0x84>)
 800324c:	701a      	strb	r2, [r3, #0]
		};
		zstackindex_list[zstackindex_list_act] = sindex;
 800324e:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <zstack_pop+0x84>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	4619      	mov	r1, r3
 8003254:	4a09      	ldr	r2, [pc, #36]	@ (800327c <zstack_pop+0x88>)
 8003256:	7bbb      	ldrb	r3, [r7, #14]
 8003258:	5453      	strb	r3, [r2, r1]

		flag = 1;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]

	};
	return flag;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}
 8003268:	20000293 	.word	0x20000293
 800326c:	2000028c 	.word	0x2000028c
 8003270:	20000228 	.word	0x20000228
 8003274:	20000710 	.word	0x20000710
 8003278:	20000a64 	.word	0x20000a64
 800327c:	20000a30 	.word	0x20000a30

08003280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003286:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <HAL_MspInit+0x44>)
 8003288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328a:	4a0e      	ldr	r2, [pc, #56]	@ (80032c4 <HAL_MspInit+0x44>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6613      	str	r3, [r2, #96]	@ 0x60
 8003292:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <HAL_MspInit+0x44>)
 8003294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800329e:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <HAL_MspInit+0x44>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a2:	4a08      	ldr	r2, [pc, #32]	@ (80032c4 <HAL_MspInit+0x44>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80032aa:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <HAL_MspInit+0x44>)
 80032ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80032b6:	f003 f85f 	bl	8006378 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000

080032c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032cc:	bf00      	nop
 80032ce:	e7fd      	b.n	80032cc <NMI_Handler+0x4>

080032d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d4:	bf00      	nop
 80032d6:	e7fd      	b.n	80032d4 <HardFault_Handler+0x4>

080032d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032dc:	bf00      	nop
 80032de:	e7fd      	b.n	80032dc <MemManage_Handler+0x4>

080032e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032e4:	bf00      	nop
 80032e6:	e7fd      	b.n	80032e4 <BusFault_Handler+0x4>

080032e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <UsageFault_Handler+0x4>

080032f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800331e:	f001 fb85 	bl	8004a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003330:	4a14      	ldr	r2, [pc, #80]	@ (8003384 <_sbrk+0x5c>)
 8003332:	4b15      	ldr	r3, [pc, #84]	@ (8003388 <_sbrk+0x60>)
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800333c:	4b13      	ldr	r3, [pc, #76]	@ (800338c <_sbrk+0x64>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003344:	4b11      	ldr	r3, [pc, #68]	@ (800338c <_sbrk+0x64>)
 8003346:	4a12      	ldr	r2, [pc, #72]	@ (8003390 <_sbrk+0x68>)
 8003348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800334a:	4b10      	ldr	r3, [pc, #64]	@ (800338c <_sbrk+0x64>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	429a      	cmp	r2, r3
 8003356:	d207      	bcs.n	8003368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003358:	f007 f94a 	bl	800a5f0 <__errno>
 800335c:	4603      	mov	r3, r0
 800335e:	220c      	movs	r2, #12
 8003360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	e009      	b.n	800337c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003368:	4b08      	ldr	r3, [pc, #32]	@ (800338c <_sbrk+0x64>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800336e:	4b07      	ldr	r3, [pc, #28]	@ (800338c <_sbrk+0x64>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	4a05      	ldr	r2, [pc, #20]	@ (800338c <_sbrk+0x64>)
 8003378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800337a:	68fb      	ldr	r3, [r7, #12]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20020000 	.word	0x20020000
 8003388:	00000400 	.word	0x00000400
 800338c:	20000a68 	.word	0x20000a68
 8003390:	20001540 	.word	0x20001540

08003394 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003398:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <SystemInit+0x20>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339e:	4a05      	ldr	r2, [pc, #20]	@ (80033b4 <SystemInit+0x20>)
 80033a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08c      	sub	sp, #48	@ 0x30
 80033bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033be:	f107 0320 	add.w	r3, r7, #32
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	605a      	str	r2, [r3, #4]
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80033cc:	f107 030c 	add.w	r3, r7, #12
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033dc:	463b      	mov	r3, r7
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033e6:	4b27      	ldr	r3, [pc, #156]	@ (8003484 <MX_TIM1_Init+0xcc>)
 80033e8:	4a27      	ldr	r2, [pc, #156]	@ (8003488 <MX_TIM1_Init+0xd0>)
 80033ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80033ec:	4b25      	ldr	r3, [pc, #148]	@ (8003484 <MX_TIM1_Init+0xcc>)
 80033ee:	22a0      	movs	r2, #160	@ 0xa0
 80033f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f2:	4b24      	ldr	r3, [pc, #144]	@ (8003484 <MX_TIM1_Init+0xcc>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59;
 80033f8:	4b22      	ldr	r3, [pc, #136]	@ (8003484 <MX_TIM1_Init+0xcc>)
 80033fa:	223b      	movs	r2, #59	@ 0x3b
 80033fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033fe:	4b21      	ldr	r3, [pc, #132]	@ (8003484 <MX_TIM1_Init+0xcc>)
 8003400:	2200      	movs	r2, #0
 8003402:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003404:	4b1f      	ldr	r3, [pc, #124]	@ (8003484 <MX_TIM1_Init+0xcc>)
 8003406:	2200      	movs	r2, #0
 8003408:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800340a:	4b1e      	ldr	r3, [pc, #120]	@ (8003484 <MX_TIM1_Init+0xcc>)
 800340c:	2200      	movs	r2, #0
 800340e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003410:	481c      	ldr	r0, [pc, #112]	@ (8003484 <MX_TIM1_Init+0xcc>)
 8003412:	f004 fd09 	bl	8007e28 <HAL_TIM_Base_Init>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800341c:	f7fd ffd1 	bl	80013c2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003420:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003424:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003426:	f107 0320 	add.w	r3, r7, #32
 800342a:	4619      	mov	r1, r3
 800342c:	4815      	ldr	r0, [pc, #84]	@ (8003484 <MX_TIM1_Init+0xcc>)
 800342e:	f004 fd53 	bl	8007ed8 <HAL_TIM_ConfigClockSource>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003438:	f7fd ffc3 	bl	80013c2 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003444:	f107 030c 	add.w	r3, r7, #12
 8003448:	4619      	mov	r1, r3
 800344a:	480e      	ldr	r0, [pc, #56]	@ (8003484 <MX_TIM1_Init+0xcc>)
 800344c:	f004 fe50 	bl	80080f0 <HAL_TIM_SlaveConfigSynchro>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8003456:	f7fd ffb4 	bl	80013c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800345a:	2300      	movs	r3, #0
 800345c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800345e:	2300      	movs	r3, #0
 8003460:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003462:	2300      	movs	r3, #0
 8003464:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003466:	463b      	mov	r3, r7
 8003468:	4619      	mov	r1, r3
 800346a:	4806      	ldr	r0, [pc, #24]	@ (8003484 <MX_TIM1_Init+0xcc>)
 800346c:	f005 f8a8 	bl	80085c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003476:	f7fd ffa4 	bl	80013c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800347a:	bf00      	nop
 800347c:	3730      	adds	r7, #48	@ 0x30
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000a6c 	.word	0x20000a6c
 8003488:	40012c00 	.word	0x40012c00

0800348c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0a      	ldr	r2, [pc, #40]	@ (80034c4 <HAL_TIM_Base_MspInit+0x38>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d10b      	bne.n	80034b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800349e:	4b0a      	ldr	r3, [pc, #40]	@ (80034c8 <HAL_TIM_Base_MspInit+0x3c>)
 80034a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a2:	4a09      	ldr	r2, [pc, #36]	@ (80034c8 <HAL_TIM_Base_MspInit+0x3c>)
 80034a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80034a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80034aa:	4b07      	ldr	r3, [pc, #28]	@ (80034c8 <HAL_TIM_Base_MspInit+0x3c>)
 80034ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40012c00 	.word	0x40012c00
 80034c8:	40021000 	.word	0x40021000

080034cc <set_ct_hbeat>:
    else return 0;
}

// HEARTBEAT Stoppuhr setzen
void set_ct_hbeat(uint16_t ct_hbeatval)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	80fb      	strh	r3, [r7, #6]
    ct_hbeat = ct_hbeatval;
 80034d6:	4a04      	ldr	r2, [pc, #16]	@ (80034e8 <set_ct_hbeat+0x1c>)
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	8013      	strh	r3, [r2, #0]

}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	20000ab8 	.word	0x20000ab8

080034ec <ct_hbeat_null>:

// HEARTBEAT Stoppuhr abfragen
uint8_t ct_hbeat_null(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_hbeat;
 80034f2:	4b07      	ldr	r3, [pc, #28]	@ (8003510 <ct_hbeat_null+0x24>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <ct_hbeat_null+0x16>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <ct_hbeat_null+0x18>
    else return 0;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	20000ab8 	.word	0x20000ab8

08003514 <set_ct_mio_hbeat>:

// HEARTBEAT Stoppuhr setzen
void set_ct_mio_hbeat(uint16_t ct_mio_hbeatval)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	80fb      	strh	r3, [r7, #6]
    ct_mio_hbeat = ct_mio_hbeatval;
 800351e:	4a04      	ldr	r2, [pc, #16]	@ (8003530 <set_ct_mio_hbeat+0x1c>)
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	8013      	strh	r3, [r2, #0]

}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	20000aba 	.word	0x20000aba

08003534 <ct_mio_hbeat_null>:

// HEARTBEAT Stoppuhr abfragen
uint8_t ct_mio_hbeat_null(void)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_mio_hbeat;
 800353a:	4b07      	ldr	r3, [pc, #28]	@ (8003558 <ct_mio_hbeat_null+0x24>)
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <ct_mio_hbeat_null+0x16>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <ct_mio_hbeat_null+0x18>
    else return 0;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	20000aba 	.word	0x20000aba

0800355c <set_ct_mcp_hbeat>:

// HEARTBEAT Stoppuhr setzen
void set_ct_mcp_hbeat(uint16_t ct_mcp_hbeatval)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	80fb      	strh	r3, [r7, #6]
    ct_mcp_hbeat = ct_mcp_hbeatval;
 8003566:	4a04      	ldr	r2, [pc, #16]	@ (8003578 <set_ct_mcp_hbeat+0x1c>)
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	8013      	strh	r3, [r2, #0]

}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	20000abc 	.word	0x20000abc

0800357c <ct_mcp_hbeat_null>:

// HEARTBEAT Stoppuhr abfragen
uint8_t ct_mcp_hbeat_null(void)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_mcp_hbeat;
 8003582:	4b07      	ldr	r3, [pc, #28]	@ (80035a0 <ct_mcp_hbeat_null+0x24>)
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <ct_mcp_hbeat_null+0x16>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <ct_mcp_hbeat_null+0x18>
    else return 0;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	20000abc 	.word	0x20000abc

080035a4 <ct_init_null>:

}

// INIT Stoppuhr abfragen
uint8_t ct_init_null(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_init;
 80035aa:	4b07      	ldr	r3, [pc, #28]	@ (80035c8 <ct_init_null+0x24>)
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <ct_init_null+0x16>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <ct_init_null+0x18>
    else return 0;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	20000abe 	.word	0x20000abe

080035cc <HAL_UART_RxCpltCallback>:
int16_t rb_free_rx(UartRB *p);
int16_t rb_free_tx(UartRB *p);
//----- INTERRUPT ROUTINEN ----------------------------------------------------

// Reception interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	uartRB_OnRxCplt(&uart4_rb, huart);
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4807      	ldr	r0, [pc, #28]	@ (80035f4 <HAL_UART_RxCpltCallback+0x28>)
 80035d8:	f000 f812 	bl	8003600 <uartRB_OnRxCplt>
	uartRB_OnRxCplt(&uart5_rb, huart);
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4806      	ldr	r0, [pc, #24]	@ (80035f8 <HAL_UART_RxCpltCallback+0x2c>)
 80035e0:	f000 f80e 	bl	8003600 <uartRB_OnRxCplt>
	uartRB_OnRxCplt(&usart1_rb, huart);
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4805      	ldr	r0, [pc, #20]	@ (80035fc <HAL_UART_RxCpltCallback+0x30>)
 80035e8:	f000 f80a 	bl	8003600 <uartRB_OnRxCplt>
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000ac0 	.word	0x20000ac0
 80035f8:	20000c50 	.word	0x20000c50
 80035fc:	20000de0 	.word	0x20000de0

08003600 <uartRB_OnRxCplt>:
	uartRB_OnTxCplt(&uart4_rb, huart);
	uartRB_OnTxCplt(&uart5_rb, huart);
	uartRB_OnTxCplt(&usart1_rb, huart);
}

void uartRB_OnRxCplt(UartRB *p, UART_HandleTypeDef *huart) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
	if (huart != p->huart)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d12d      	bne.n	8003670 <uartRB_OnRxCplt+0x70>
		return;

	if (1 < rb_free_rx(p))                        // noch Platz f�r ein Zeichen?
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f8ac 	bl	8003772 <rb_free_rx>
 800361a:	4603      	mov	r3, r0
 800361c:	2b01      	cmp	r3, #1
 800361e:	dd19      	ble.n	8003654 <uartRB_OnRxCplt+0x54>
			{
		p->rx[p->rx_in] = p->it_rx;                      // Zeichen �bernehmen
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	895b      	ldrh	r3, [r3, #10]
 8003624:	b29b      	uxth	r3, r3
 8003626:	4619      	mov	r1, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	440b      	add	r3, r1
 8003632:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		p->rx_in++;                                       // Zeiger weiterr�cken
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	895b      	ldrh	r3, [r3, #10]
 800363a:	b29b      	uxth	r3, r3
 800363c:	3301      	adds	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	815a      	strh	r2, [r3, #10]
		if (p->rx_in >= BUFLEN)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	895b      	ldrh	r3, [r3, #10]
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b7e      	cmp	r3, #126	@ 0x7e
 800364c:	d902      	bls.n	8003654 <uartRB_OnRxCplt+0x54>
			p->rx_in = 0;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	815a      	strh	r2, [r3, #10]
	}

	while (HAL_UART_Receive_IT(p->huart, &p->it_rx, 1) != HAL_OK) {
 8003654:	bf00      	nop
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8003660:	2201      	movs	r2, #1
 8003662:	4619      	mov	r1, r3
 8003664:	f005 f926 	bl	80088b4 <HAL_UART_Receive_IT>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f3      	bne.n	8003656 <uartRB_OnRxCplt+0x56>
 800366e:	e000      	b.n	8003672 <uartRB_OnRxCplt+0x72>
		return;
 8003670:	bf00      	nop
	}
}
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <uart_initAll>:

//----- FUNKTIONSDEFINITIONEN -------------------------------------------------

/******************** RS232 ***********************/

void uart_initAll(void) {
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
	uartRB_Init(&uart4_rb, &huart4, UART4_IRQn);
 800367c:	2234      	movs	r2, #52	@ 0x34
 800367e:	490a      	ldr	r1, [pc, #40]	@ (80036a8 <uart_initAll+0x30>)
 8003680:	480a      	ldr	r0, [pc, #40]	@ (80036ac <uart_initAll+0x34>)
 8003682:	f000 f821 	bl	80036c8 <uartRB_Init>
	uartRB_Init(&uart5_rb, &huart5, UART5_IRQn);
 8003686:	2235      	movs	r2, #53	@ 0x35
 8003688:	4909      	ldr	r1, [pc, #36]	@ (80036b0 <uart_initAll+0x38>)
 800368a:	480a      	ldr	r0, [pc, #40]	@ (80036b4 <uart_initAll+0x3c>)
 800368c:	f000 f81c 	bl	80036c8 <uartRB_Init>
	uartRB_Init(&usart1_rb, &huart1, USART1_IRQn);
 8003690:	2225      	movs	r2, #37	@ 0x25
 8003692:	4909      	ldr	r1, [pc, #36]	@ (80036b8 <uart_initAll+0x40>)
 8003694:	4809      	ldr	r0, [pc, #36]	@ (80036bc <uart_initAll+0x44>)
 8003696:	f000 f817 	bl	80036c8 <uartRB_Init>
	uartRB_Init(&usart3_rb, &huart3, USART3_IRQn);
 800369a:	2227      	movs	r2, #39	@ 0x27
 800369c:	4908      	ldr	r1, [pc, #32]	@ (80036c0 <uart_initAll+0x48>)
 800369e:	4809      	ldr	r0, [pc, #36]	@ (80036c4 <uart_initAll+0x4c>)
 80036a0:	f000 f812 	bl	80036c8 <uartRB_Init>
}
 80036a4:	bf00      	nop
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20001100 	.word	0x20001100
 80036ac:	20000ac0 	.word	0x20000ac0
 80036b0:	20001194 	.word	0x20001194
 80036b4:	20000c50 	.word	0x20000c50
 80036b8:	20001228 	.word	0x20001228
 80036bc:	20000de0 	.word	0x20000de0
 80036c0:	20001350 	.word	0x20001350
 80036c4:	20000f70 	.word	0x20000f70

080036c8 <uartRB_Init>:

void uartRB_Init(UartRB *p, UART_HandleTypeDef *huart, IRQn_Type irqn) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	71fb      	strb	r3, [r7, #7]
	p->huart = huart;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	601a      	str	r2, [r3, #0]
	p->irqn = irqn;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	79fa      	ldrb	r2, [r7, #7]
 80036e0:	711a      	strb	r2, [r3, #4]
	p->tx_in = p->tx_out = p->rx_in = p->rx_out = 0;
 80036e2:	2200      	movs	r2, #0
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4611      	mov	r1, r2
 80036e8:	8199      	strh	r1, [r3, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4611      	mov	r1, r2
 80036ee:	8159      	strh	r1, [r3, #10]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4611      	mov	r1, r2
 80036f4:	8119      	strh	r1, [r3, #8]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	80da      	strh	r2, [r3, #6]
	HAL_UART_Receive_IT(p->huart, &p->it_rx, 1);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8003704:	2201      	movs	r2, #1
 8003706:	4619      	mov	r1, r3
 8003708:	f005 f8d4 	bl	80088b4 <HAL_UART_Receive_IT>
}
 800370c:	bf00      	nop
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <rb_free_tx>:

int16_t rb_free_tx(UartRB *p) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	int16_t x;
	HAL_NVIC_DisableIRQ(p->irqn);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	f002 fabb 	bl	8005c9e <HAL_NVIC_DisableIRQ>
	x = (int16_t) p->tx_in - (int8_t) p->tx_out;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	88db      	ldrh	r3, [r3, #6]
 800372c:	b29a      	uxth	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	891b      	ldrh	r3, [r3, #8]
 8003732:	b29b      	uxth	r3, r3
 8003734:	b25b      	sxtb	r3, r3
 8003736:	b29b      	uxth	r3, r3
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	b29b      	uxth	r3, r3
 800373c:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 800373e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003742:	2b00      	cmp	r3, #0
 8003744:	da03      	bge.n	800374e <rb_free_tx+0x3a>
		x += BUFLEN;
 8003746:	89fb      	ldrh	r3, [r7, #14]
 8003748:	337f      	adds	r3, #127	@ 0x7f
 800374a:	b29b      	uxth	r3, r3
 800374c:	81fb      	strh	r3, [r7, #14]
	x = BUFLEN - x;
 800374e:	89fb      	ldrh	r3, [r7, #14]
 8003750:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8003754:	b29b      	uxth	r3, r3
 8003756:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_EnableIRQ(p->irqn);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800375e:	4618      	mov	r0, r3
 8003760:	f002 fa8f 	bl	8005c82 <HAL_NVIC_EnableIRQ>
	return (uint8_t) x;
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	b21b      	sxth	r3, r3
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <rb_free_rx>:

int16_t rb_free_rx(UartRB *p) {
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
	int16_t x;
	HAL_NVIC_DisableIRQ(p->irqn);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003780:	4618      	mov	r0, r3
 8003782:	f002 fa8c 	bl	8005c9e <HAL_NVIC_DisableIRQ>
	x = p->rx_in - p->rx_out;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	895b      	ldrh	r3, [r3, #10]
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	899b      	ldrh	r3, [r3, #12]
 8003790:	b29b      	uxth	r3, r3
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	b29b      	uxth	r3, r3
 8003796:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 8003798:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800379c:	2b00      	cmp	r3, #0
 800379e:	da03      	bge.n	80037a8 <rb_free_rx+0x36>
		x += BUFLEN;
 80037a0:	89fb      	ldrh	r3, [r7, #14]
 80037a2:	337f      	adds	r3, #127	@ 0x7f
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	81fb      	strh	r3, [r7, #14]
	x = BUFLEN - x;
 80037a8:	89fb      	ldrh	r3, [r7, #14]
 80037aa:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_EnableIRQ(p->irqn);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f002 fa62 	bl	8005c82 <HAL_NVIC_EnableIRQ>
	return x;
 80037be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <rb_rx_used>:

int16_t rb_rx_used(const UartRB *p)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
	int16_t used;
    HAL_NVIC_DisableIRQ(p->irqn);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80037d8:	4618      	mov	r0, r3
 80037da:	f002 fa60 	bl	8005c9e <HAL_NVIC_DisableIRQ>
    used = (int16_t)p->rx_in - (int32_t)p->rx_out;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	895b      	ldrh	r3, [r3, #10]
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	899b      	ldrh	r3, [r3, #12]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	81fb      	strh	r3, [r7, #14]
    if (used < 0) used += BUFLEN;
 80037f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	da03      	bge.n	8003800 <rb_rx_used+0x36>
 80037f8:	89fb      	ldrh	r3, [r7, #14]
 80037fa:	337f      	adds	r3, #127	@ 0x7f
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	81fb      	strh	r3, [r7, #14]
    HAL_NVIC_EnableIRQ(p->irqn);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003806:	4618      	mov	r0, r3
 8003808:	f002 fa3b 	bl	8005c82 <HAL_NVIC_EnableIRQ>
    return used;
 800380c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <uartRB_KickTx>:

// is this correct
void uartRB_KickTx(UartRB *p) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

	if (__HAL_UART_GET_FLAG(p->huart, UART_FLAG_TC) == 0)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800382c:	2b40      	cmp	r3, #64	@ 0x40
 800382e:	d134      	bne.n	800389a <uartRB_KickTx+0x82>
		return;
	HAL_NVIC_DisableIRQ(p->irqn);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003836:	4618      	mov	r0, r3
 8003838:	f002 fa31 	bl	8005c9e <HAL_NVIC_DisableIRQ>
// No, we still have something to transmit?
	int16_t free = rb_free_tx(p);          // how many free slots in TX ring
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff ff69 	bl	8003714 <rb_free_tx>
 8003842:	4603      	mov	r3, r0
 8003844:	81fb      	strh	r3, [r7, #14]
	int16_t tmpBuf_out = p->tx_out;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	891b      	ldrh	r3, [r3, #8]
 800384a:	b29b      	uxth	r3, r3
 800384c:	81bb      	strh	r3, [r7, #12]
	if (free < BUFLEN) {               // => there is at least 1 byte pending
 800384e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003852:	2b7e      	cmp	r3, #126	@ 0x7e
 8003854:	dc1a      	bgt.n	800388c <uartRB_KickTx+0x74>
		p->tx_out++;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	891b      	ldrh	r3, [r3, #8]
 800385a:	b29b      	uxth	r3, r3
 800385c:	3301      	adds	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	811a      	strh	r2, [r3, #8]
		if (p->tx_out >= BUFLEN) p->tx_out = 0;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	891b      	ldrh	r3, [r3, #8]
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b7e      	cmp	r3, #126	@ 0x7e
 800386c:	d902      	bls.n	8003874 <uartRB_KickTx+0x5c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	811a      	strh	r2, [r3, #8]
		HAL_UART_Transmit_IT(p->huart, &p->tx[tmpBuf_out], 1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800387c:	3308      	adds	r3, #8
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	3306      	adds	r3, #6
 8003884:	2201      	movs	r2, #1
 8003886:	4619      	mov	r1, r3
 8003888:	f004 ff80 	bl	800878c <HAL_UART_Transmit_IT>
	}
	HAL_NVIC_EnableIRQ(p->irqn);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003892:	4618      	mov	r0, r3
 8003894:	f002 f9f5 	bl	8005c82 <HAL_NVIC_EnableIRQ>
 8003898:	e000      	b.n	800389c <uartRB_KickTx+0x84>
		return;
 800389a:	bf00      	nop
}
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <uartRB_Put>:

uint8_t uartRB_Put(UartRB *p, const void *buf, uint8_t n) {
 80038a4:	b590      	push	{r4, r7, lr}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(p->irqn);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f002 f9f0 	bl	8005c9e <HAL_NVIC_DisableIRQ>
	const uint8_t *src = (const uint8_t *)buf;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	613b      	str	r3, [r7, #16]
	if (n > rb_free_tx(p)){
 80038c2:	79fc      	ldrb	r4, [r7, #7]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7ff ff25 	bl	8003714 <rb_free_tx>
 80038ca:	4603      	mov	r3, r0
 80038cc:	429c      	cmp	r4, r3
 80038ce:	dd07      	ble.n	80038e0 <uartRB_Put+0x3c>
		HAL_NVIC_EnableIRQ(p->irqn);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f002 f9d3 	bl	8005c82 <HAL_NVIC_EnableIRQ>
		return 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	e02f      	b.n	8003940 <uartRB_Put+0x9c>
	}
	for (uint8_t i = 1; i <= n; i++) {
 80038e0:	2301      	movs	r3, #1
 80038e2:	75fb      	strb	r3, [r7, #23]
 80038e4:	e021      	b.n	800392a <uartRB_Put+0x86>
		p->tx[p->tx_in] = src[i-1];
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4413      	add	r3, r2
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	88d2      	ldrh	r2, [r2, #6]
 80038f2:	b292      	uxth	r2, r2
 80038f4:	4611      	mov	r1, r2
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	440b      	add	r3, r1
 80038fc:	739a      	strb	r2, [r3, #14]
		p->tx_in = (uint8_t) ((p->tx_in + 1) % BUFLEN);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	88db      	ldrh	r3, [r3, #6]
 8003902:	b29b      	uxth	r3, r3
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	4b10      	ldr	r3, [pc, #64]	@ (8003948 <uartRB_Put+0xa4>)
 8003908:	fb83 1302 	smull	r1, r3, r3, r2
 800390c:	4413      	add	r3, r2
 800390e:	1199      	asrs	r1, r3, #6
 8003910:	17d3      	asrs	r3, r2, #31
 8003912:	1ac9      	subs	r1, r1, r3
 8003914:	460b      	mov	r3, r1
 8003916:	01db      	lsls	r3, r3, #7
 8003918:	1a5b      	subs	r3, r3, r1
 800391a:	1ad1      	subs	r1, r2, r3
 800391c:	b2cb      	uxtb	r3, r1
 800391e:	461a      	mov	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	80da      	strh	r2, [r3, #6]
	for (uint8_t i = 1; i <= n; i++) {
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	3301      	adds	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
 800392a:	7dfa      	ldrb	r2, [r7, #23]
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	429a      	cmp	r2, r3
 8003930:	d9d9      	bls.n	80038e6 <uartRB_Put+0x42>
	}
	HAL_NVIC_EnableIRQ(p->irqn);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003938:	4618      	mov	r0, r3
 800393a:	f002 f9a2 	bl	8005c82 <HAL_NVIC_EnableIRQ>
	return 1;
 800393e:	2301      	movs	r3, #1
}
 8003940:	4618      	mov	r0, r3
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	bd90      	pop	{r4, r7, pc}
 8003948:	81020409 	.word	0x81020409

0800394c <uartRB_Getc>:

uint8_t uartRB_Getc(UartRB *p) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	uint8_t c;
	HAL_NVIC_DisableIRQ(p->irqn);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800395a:	4618      	mov	r0, r3
 800395c:	f002 f99f 	bl	8005c9e <HAL_NVIC_DisableIRQ>
	c = p->rx[p->rx_out];
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	899b      	ldrh	r3, [r3, #12]
 8003964:	b29b      	uxth	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4413      	add	r3, r2
 800396c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8003970:	73fb      	strb	r3, [r7, #15]
	p->rx_out++;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	899b      	ldrh	r3, [r3, #12]
 8003976:	b29b      	uxth	r3, r3
 8003978:	3301      	adds	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	819a      	strh	r2, [r3, #12]
	if (p->rx_out >= BUFLEN) p->rx_out = 0;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	899b      	ldrh	r3, [r3, #12]
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b7e      	cmp	r3, #126	@ 0x7e
 8003988:	d902      	bls.n	8003990 <uartRB_Getc+0x44>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	819a      	strh	r2, [r3, #12]
	HAL_NVIC_EnableIRQ(p->irqn);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003996:	4618      	mov	r0, r3
 8003998:	f002 f973 	bl	8005c82 <HAL_NVIC_EnableIRQ>
	return c;
 800399c:	7bfb      	ldrb	r3, [r7, #15]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80039ac:	4b22      	ldr	r3, [pc, #136]	@ (8003a38 <MX_UART4_Init+0x90>)
 80039ae:	4a23      	ldr	r2, [pc, #140]	@ (8003a3c <MX_UART4_Init+0x94>)
 80039b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 19200;
 80039b2:	4b21      	ldr	r3, [pc, #132]	@ (8003a38 <MX_UART4_Init+0x90>)
 80039b4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80039b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80039ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003a38 <MX_UART4_Init+0x90>)
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80039c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a38 <MX_UART4_Init+0x90>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80039c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a38 <MX_UART4_Init+0x90>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80039cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a38 <MX_UART4_Init+0x90>)
 80039ce:	220c      	movs	r2, #12
 80039d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039d2:	4b19      	ldr	r3, [pc, #100]	@ (8003a38 <MX_UART4_Init+0x90>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80039d8:	4b17      	ldr	r3, [pc, #92]	@ (8003a38 <MX_UART4_Init+0x90>)
 80039da:	2200      	movs	r2, #0
 80039dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039de:	4b16      	ldr	r3, [pc, #88]	@ (8003a38 <MX_UART4_Init+0x90>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039e4:	4b14      	ldr	r3, [pc, #80]	@ (8003a38 <MX_UART4_Init+0x90>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039ea:	4b13      	ldr	r3, [pc, #76]	@ (8003a38 <MX_UART4_Init+0x90>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80039f0:	4811      	ldr	r0, [pc, #68]	@ (8003a38 <MX_UART4_Init+0x90>)
 80039f2:	f004 fe7b 	bl	80086ec <HAL_UART_Init>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80039fc:	f7fd fce1 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a00:	2100      	movs	r1, #0
 8003a02:	480d      	ldr	r0, [pc, #52]	@ (8003a38 <MX_UART4_Init+0x90>)
 8003a04:	f006 fcf1 	bl	800a3ea <HAL_UARTEx_SetTxFifoThreshold>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003a0e:	f7fd fcd8 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a12:	2100      	movs	r1, #0
 8003a14:	4808      	ldr	r0, [pc, #32]	@ (8003a38 <MX_UART4_Init+0x90>)
 8003a16:	f006 fd26 	bl	800a466 <HAL_UARTEx_SetRxFifoThreshold>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003a20:	f7fd fccf 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003a24:	4804      	ldr	r0, [pc, #16]	@ (8003a38 <MX_UART4_Init+0x90>)
 8003a26:	f006 fca7 	bl	800a378 <HAL_UARTEx_DisableFifoMode>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003a30:	f7fd fcc7 	bl	80013c2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003a34:	bf00      	nop
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20001100 	.word	0x20001100
 8003a3c:	40004c00 	.word	0x40004c00

08003a40 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003a44:	4b22      	ldr	r3, [pc, #136]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003a46:	4a23      	ldr	r2, [pc, #140]	@ (8003ad4 <MX_UART5_Init+0x94>)
 8003a48:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 8003a4a:	4b21      	ldr	r3, [pc, #132]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003a4c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003a50:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003a52:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003a58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003a64:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003a66:	220c      	movs	r2, #12
 8003a68:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a6a:	4b19      	ldr	r3, [pc, #100]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a70:	4b17      	ldr	r3, [pc, #92]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a76:	4b16      	ldr	r3, [pc, #88]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a7c:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a82:	4b13      	ldr	r3, [pc, #76]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003a88:	4811      	ldr	r0, [pc, #68]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003a8a:	f004 fe2f 	bl	80086ec <HAL_UART_Init>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003a94:	f7fd fc95 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a98:	2100      	movs	r1, #0
 8003a9a:	480d      	ldr	r0, [pc, #52]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003a9c:	f006 fca5 	bl	800a3ea <HAL_UARTEx_SetTxFifoThreshold>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003aa6:	f7fd fc8c 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4808      	ldr	r0, [pc, #32]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003aae:	f006 fcda 	bl	800a466 <HAL_UARTEx_SetRxFifoThreshold>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003ab8:	f7fd fc83 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003abc:	4804      	ldr	r0, [pc, #16]	@ (8003ad0 <MX_UART5_Init+0x90>)
 8003abe:	f006 fc5b 	bl	800a378 <HAL_UARTEx_DisableFifoMode>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003ac8:	f7fd fc7b 	bl	80013c2 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003acc:	bf00      	nop
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20001194 	.word	0x20001194
 8003ad4:	40005000 	.word	0x40005000

08003ad8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003adc:	4b22      	ldr	r3, [pc, #136]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003ade:	4a23      	ldr	r2, [pc, #140]	@ (8003b6c <MX_USART1_UART_Init+0x94>)
 8003ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8003ae2:	4b21      	ldr	r3, [pc, #132]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003ae4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003aea:	4b1f      	ldr	r3, [pc, #124]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003af0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003af6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003afc:	4b1a      	ldr	r3, [pc, #104]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003afe:	220c      	movs	r2, #12
 8003b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b02:	4b19      	ldr	r3, [pc, #100]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b08:	4b17      	ldr	r3, [pc, #92]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b0e:	4b16      	ldr	r3, [pc, #88]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b14:	4b14      	ldr	r3, [pc, #80]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b1a:	4b13      	ldr	r3, [pc, #76]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b20:	4811      	ldr	r0, [pc, #68]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003b22:	f004 fde3 	bl	80086ec <HAL_UART_Init>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003b2c:	f7fd fc49 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b30:	2100      	movs	r1, #0
 8003b32:	480d      	ldr	r0, [pc, #52]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003b34:	f006 fc59 	bl	800a3ea <HAL_UARTEx_SetTxFifoThreshold>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003b3e:	f7fd fc40 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b42:	2100      	movs	r1, #0
 8003b44:	4808      	ldr	r0, [pc, #32]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003b46:	f006 fc8e 	bl	800a466 <HAL_UARTEx_SetRxFifoThreshold>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003b50:	f7fd fc37 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003b54:	4804      	ldr	r0, [pc, #16]	@ (8003b68 <MX_USART1_UART_Init+0x90>)
 8003b56:	f006 fc0f 	bl	800a378 <HAL_UARTEx_DisableFifoMode>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003b60:	f7fd fc2f 	bl	80013c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b64:	bf00      	nop
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20001228 	.word	0x20001228
 8003b6c:	40013800 	.word	0x40013800

08003b70 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b74:	4b23      	ldr	r3, [pc, #140]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003b76:	4a24      	ldr	r2, [pc, #144]	@ (8003c08 <MX_USART2_UART_Init+0x98>)
 8003b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003b7a:	4b22      	ldr	r3, [pc, #136]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003b7c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b82:	4b20      	ldr	r3, [pc, #128]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b88:	4b1e      	ldr	r3, [pc, #120]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b94:	4b1b      	ldr	r3, [pc, #108]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003b96:	220c      	movs	r2, #12
 8003b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003b9c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003ba0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ba2:	4b18      	ldr	r3, [pc, #96]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ba8:	4b16      	ldr	r3, [pc, #88]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003bae:	4b15      	ldr	r3, [pc, #84]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bb4:	4b13      	ldr	r3, [pc, #76]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bba:	4812      	ldr	r0, [pc, #72]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003bbc:	f004 fd96 	bl	80086ec <HAL_UART_Init>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8003bc6:	f7fd fbfc 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bca:	2100      	movs	r1, #0
 8003bcc:	480d      	ldr	r0, [pc, #52]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003bce:	f006 fc0c 	bl	800a3ea <HAL_UARTEx_SetTxFifoThreshold>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8003bd8:	f7fd fbf3 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4809      	ldr	r0, [pc, #36]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003be0:	f006 fc41 	bl	800a466 <HAL_UARTEx_SetRxFifoThreshold>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8003bea:	f7fd fbea 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003bee:	4805      	ldr	r0, [pc, #20]	@ (8003c04 <MX_USART2_UART_Init+0x94>)
 8003bf0:	f006 fbc2 	bl	800a378 <HAL_UARTEx_DisableFifoMode>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8003bfa:	f7fd fbe2 	bl	80013c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	200012bc 	.word	0x200012bc
 8003c08:	40004400 	.word	0x40004400

08003c0c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003c10:	4b23      	ldr	r3, [pc, #140]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c12:	4a24      	ldr	r2, [pc, #144]	@ (8003ca4 <MX_USART3_UART_Init+0x98>)
 8003c14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8003c16:	4b22      	ldr	r3, [pc, #136]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c18:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003c1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c24:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c32:	220c      	movs	r2, #12
 8003c34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003c36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c38:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003c3c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c3e:	4b18      	ldr	r3, [pc, #96]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c44:	4b16      	ldr	r3, [pc, #88]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c50:	4b13      	ldr	r3, [pc, #76]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c56:	4812      	ldr	r0, [pc, #72]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c58:	f004 fd48 	bl	80086ec <HAL_UART_Init>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8003c62:	f7fd fbae 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c66:	2100      	movs	r1, #0
 8003c68:	480d      	ldr	r0, [pc, #52]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c6a:	f006 fbbe 	bl	800a3ea <HAL_UARTEx_SetTxFifoThreshold>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8003c74:	f7fd fba5 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4809      	ldr	r0, [pc, #36]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c7c:	f006 fbf3 	bl	800a466 <HAL_UARTEx_SetRxFifoThreshold>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8003c86:	f7fd fb9c 	bl	80013c2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003c8a:	4805      	ldr	r0, [pc, #20]	@ (8003ca0 <MX_USART3_UART_Init+0x94>)
 8003c8c:	f006 fb74 	bl	800a378 <HAL_UARTEx_DisableFifoMode>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8003c96:	f7fd fb94 	bl	80013c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20001350 	.word	0x20001350
 8003ca4:	40004800 	.word	0x40004800

08003ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b0aa      	sub	sp, #168	@ 0xa8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cc0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003cc4:	2254      	movs	r2, #84	@ 0x54
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f006 fc79 	bl	800a5c0 <memset>
  if(uartHandle->Instance==UART4)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4aa3      	ldr	r2, [pc, #652]	@ (8003f60 <HAL_UART_MspInit+0x2b8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d13c      	bne.n	8003d52 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003cd8:	2308      	movs	r3, #8
 8003cda:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ce0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f003 f885 	bl	8006df4 <HAL_RCCEx_PeriphCLKConfig>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003cf0:	f7fd fb67 	bl	80013c2 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003cf4:	4b9b      	ldr	r3, [pc, #620]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf8:	4a9a      	ldr	r2, [pc, #616]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003cfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d00:	4b98      	ldr	r3, [pc, #608]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0c:	4b95      	ldr	r3, [pc, #596]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d10:	4a94      	ldr	r2, [pc, #592]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003d12:	f043 0304 	orr.w	r3, r3, #4
 8003d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d18:	4b92      	ldr	r3, [pc, #584]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d24:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003d28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003d3e:	2305      	movs	r3, #5
 8003d40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d44:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4887      	ldr	r0, [pc, #540]	@ (8003f68 <HAL_UART_MspInit+0x2c0>)
 8003d4c:	f001 ffc2 	bl	8005cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003d50:	e177      	b.n	8004042 <HAL_UART_MspInit+0x39a>
  else if(uartHandle->Instance==UART5)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a85      	ldr	r2, [pc, #532]	@ (8003f6c <HAL_UART_MspInit+0x2c4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d15d      	bne.n	8003e18 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003d60:	2300      	movs	r3, #0
 8003d62:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d64:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f003 f843 	bl	8006df4 <HAL_RCCEx_PeriphCLKConfig>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003d74:	f7fd fb25 	bl	80013c2 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003d78:	4b7a      	ldr	r3, [pc, #488]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7c:	4a79      	ldr	r2, [pc, #484]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d84:	4b77      	ldr	r3, [pc, #476]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d90:	4b74      	ldr	r3, [pc, #464]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d94:	4a73      	ldr	r2, [pc, #460]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003d96:	f043 0304 	orr.w	r3, r3, #4
 8003d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d9c:	4b71      	ldr	r3, [pc, #452]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003da8:	4b6e      	ldr	r3, [pc, #440]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dac:	4a6d      	ldr	r2, [pc, #436]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003dae:	f043 0308 	orr.w	r3, r3, #8
 8003db2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003db4:	4b6b      	ldr	r3, [pc, #428]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003dda:	2305      	movs	r3, #5
 8003ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003de4:	4619      	mov	r1, r3
 8003de6:	4860      	ldr	r0, [pc, #384]	@ (8003f68 <HAL_UART_MspInit+0x2c0>)
 8003de8:	f001 ff74 	bl	8005cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003dec:	2304      	movs	r3, #4
 8003dee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df2:	2302      	movs	r3, #2
 8003df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003e04:	2305      	movs	r3, #5
 8003e06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e0a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4857      	ldr	r0, [pc, #348]	@ (8003f70 <HAL_UART_MspInit+0x2c8>)
 8003e12:	f001 ff5f 	bl	8005cd4 <HAL_GPIO_Init>
}
 8003e16:	e114      	b.n	8004042 <HAL_UART_MspInit+0x39a>
  else if(uartHandle->Instance==USART1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a55      	ldr	r2, [pc, #340]	@ (8003f74 <HAL_UART_MspInit+0x2cc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d13b      	bne.n	8003e9a <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e26:	2300      	movs	r3, #0
 8003e28:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e2a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f002 ffe0 	bl	8006df4 <HAL_RCCEx_PeriphCLKConfig>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_UART_MspInit+0x196>
      Error_Handler();
 8003e3a:	f7fd fac2 	bl	80013c2 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e3e:	4b49      	ldr	r3, [pc, #292]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e42:	4a48      	ldr	r2, [pc, #288]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003e44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e48:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e4a:	4b46      	ldr	r3, [pc, #280]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e56:	4b43      	ldr	r3, [pc, #268]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e5a:	4a42      	ldr	r2, [pc, #264]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003e5c:	f043 0304 	orr.w	r3, r3, #4
 8003e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e62:	4b40      	ldr	r3, [pc, #256]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003e6e:	2330      	movs	r3, #48	@ 0x30
 8003e70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e74:	2302      	movs	r3, #2
 8003e76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e86:	2307      	movs	r3, #7
 8003e88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e8c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003e90:	4619      	mov	r1, r3
 8003e92:	4835      	ldr	r0, [pc, #212]	@ (8003f68 <HAL_UART_MspInit+0x2c0>)
 8003e94:	f001 ff1e 	bl	8005cd4 <HAL_GPIO_Init>
}
 8003e98:	e0d3      	b.n	8004042 <HAL_UART_MspInit+0x39a>
  else if(uartHandle->Instance==USART2)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a36      	ldr	r2, [pc, #216]	@ (8003f78 <HAL_UART_MspInit+0x2d0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d16b      	bne.n	8003f7c <HAL_UART_MspInit+0x2d4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003eac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f002 ff9f 	bl	8006df4 <HAL_RCCEx_PeriphCLKConfig>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8003ebc:	f7fd fa81 	bl	80013c2 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ec0:	4b28      	ldr	r3, [pc, #160]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec4:	4a27      	ldr	r2, [pc, #156]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eca:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ecc:	4b25      	ldr	r3, [pc, #148]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed4:	623b      	str	r3, [r7, #32]
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed8:	4b22      	ldr	r3, [pc, #136]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003edc:	4a21      	ldr	r2, [pc, #132]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003ef6:	f043 0308 	orr.w	r3, r3, #8
 8003efa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003efc:	4b19      	ldr	r3, [pc, #100]	@ (8003f64 <HAL_UART_MspInit+0x2bc>)
 8003efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003f08:	2307      	movs	r3, #7
 8003f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f20:	2307      	movs	r3, #7
 8003f22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f26:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f30:	f001 fed0 	bl	8005cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f34:	2340      	movs	r3, #64	@ 0x40
 8003f36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f46:	2300      	movs	r3, #0
 8003f48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f4c:	2307      	movs	r3, #7
 8003f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f52:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003f56:	4619      	mov	r1, r3
 8003f58:	4805      	ldr	r0, [pc, #20]	@ (8003f70 <HAL_UART_MspInit+0x2c8>)
 8003f5a:	f001 febb 	bl	8005cd4 <HAL_GPIO_Init>
}
 8003f5e:	e070      	b.n	8004042 <HAL_UART_MspInit+0x39a>
 8003f60:	40004c00 	.word	0x40004c00
 8003f64:	40021000 	.word	0x40021000
 8003f68:	48000800 	.word	0x48000800
 8003f6c:	40005000 	.word	0x40005000
 8003f70:	48000c00 	.word	0x48000c00
 8003f74:	40013800 	.word	0x40013800
 8003f78:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a32      	ldr	r2, [pc, #200]	@ (800404c <HAL_UART_MspInit+0x3a4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d15d      	bne.n	8004042 <HAL_UART_MspInit+0x39a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f86:	2304      	movs	r3, #4
 8003f88:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f8e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003f92:	4618      	mov	r0, r3
 8003f94:	f002 ff2e 	bl	8006df4 <HAL_RCCEx_PeriphCLKConfig>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_UART_MspInit+0x2fa>
      Error_Handler();
 8003f9e:	f7fd fa10 	bl	80013c2 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <HAL_UART_MspInit+0x3a8>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa6:	4a2a      	ldr	r2, [pc, #168]	@ (8004050 <HAL_UART_MspInit+0x3a8>)
 8003fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fae:	4b28      	ldr	r3, [pc, #160]	@ (8004050 <HAL_UART_MspInit+0x3a8>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fba:	4b25      	ldr	r3, [pc, #148]	@ (8004050 <HAL_UART_MspInit+0x3a8>)
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fbe:	4a24      	ldr	r2, [pc, #144]	@ (8004050 <HAL_UART_MspInit+0x3a8>)
 8003fc0:	f043 0310 	orr.w	r3, r3, #16
 8003fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fc6:	4b22      	ldr	r3, [pc, #136]	@ (8004050 <HAL_UART_MspInit+0x3a8>)
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8004050 <HAL_UART_MspInit+0x3a8>)
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <HAL_UART_MspInit+0x3a8>)
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fde:	4b1c      	ldr	r3, [pc, #112]	@ (8004050 <HAL_UART_MspInit+0x3a8>)
 8003fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004004:	2307      	movs	r3, #7
 8004006:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800400a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800400e:	4619      	mov	r1, r3
 8004010:	4810      	ldr	r0, [pc, #64]	@ (8004054 <HAL_UART_MspInit+0x3ac>)
 8004012:	f001 fe5f 	bl	8005cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14;
 8004016:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 800401a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401e:	2302      	movs	r3, #2
 8004020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004024:	2300      	movs	r3, #0
 8004026:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004030:	2307      	movs	r3, #7
 8004032:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004036:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800403a:	4619      	mov	r1, r3
 800403c:	4806      	ldr	r0, [pc, #24]	@ (8004058 <HAL_UART_MspInit+0x3b0>)
 800403e:	f001 fe49 	bl	8005cd4 <HAL_GPIO_Init>
}
 8004042:	bf00      	nop
 8004044:	37a8      	adds	r7, #168	@ 0xa8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40004800 	.word	0x40004800
 8004050:	40021000 	.word	0x40021000
 8004054:	48001000 	.word	0x48001000
 8004058:	48000400 	.word	0x48000400

0800405c <zentrale_init>:


//-----------------FUNKTIONSDEFINITIONEN---------------------------------------

// Zentrale initialisieren.
void zentrale_init(void) {
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
	z_status = POWERON;
 8004060:	4b09      	ldr	r3, [pc, #36]	@ (8004088 <zentrale_init+0x2c>)
 8004062:	2202      	movs	r2, #2
 8004064:	701a      	strb	r2, [r3, #0]
	z_status_h = NOP;
 8004066:	4b09      	ldr	r3, [pc, #36]	@ (800408c <zentrale_init+0x30>)
 8004068:	22ff      	movs	r2, #255	@ 0xff
 800406a:	701a      	strb	r2, [r3, #0]
	z_status_tend = NOP;
 800406c:	4b08      	ldr	r3, [pc, #32]	@ (8004090 <zentrale_init+0x34>)
 800406e:	22ff      	movs	r2, #255	@ 0xff
 8004070:	701a      	strb	r2, [r3, #0]
	z_error_akt = 0;
 8004072:	4b08      	ldr	r3, [pc, #32]	@ (8004094 <zentrale_init+0x38>)
 8004074:	2200      	movs	r2, #0
 8004076:	801a      	strh	r2, [r3, #0]
	z_error_kum = 0;
 8004078:	4b07      	ldr	r3, [pc, #28]	@ (8004098 <zentrale_init+0x3c>)
 800407a:	2200      	movs	r2, #0
 800407c:	801a      	strh	r2, [r3, #0]

}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	200013e4 	.word	0x200013e4
 800408c:	200013e5 	.word	0x200013e5
 8004090:	200013e6 	.word	0x200013e6
 8004094:	200013e8 	.word	0x200013e8
 8004098:	200013ea 	.word	0x200013ea

0800409c <z_update_power_errors>:

static void z_update_power_errors(void) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
	// If you only have update_uok():
	if (!update_uok()) {
 80040a2:	f7fc fad1 	bl	8000648 <update_uok>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d117      	bne.n	80040dc <z_update_power_errors+0x40>
		// If you want individual bits, read pins directly (or add helpers):
		uint8_t ok5 = u_ok(UC__5VOK_GPIO_Port, UC__5VOK_Pin);
 80040ac:	2110      	movs	r1, #16
 80040ae:	480d      	ldr	r0, [pc, #52]	@ (80040e4 <z_update_power_errors+0x48>)
 80040b0:	f7fc fab2 	bl	8000618 <u_ok>
 80040b4:	4603      	mov	r3, r0
 80040b6:	71fb      	strb	r3, [r7, #7]
		uint8_t ok12 = u_ok(UC__12VOK_GPIO_Port, UC__12VOK_Pin);
 80040b8:	2120      	movs	r1, #32
 80040ba:	480a      	ldr	r0, [pc, #40]	@ (80040e4 <z_update_power_errors+0x48>)
 80040bc:	f7fc faac 	bl	8000618 <u_ok>
 80040c0:	4603      	mov	r3, r0
 80040c2:	71bb      	strb	r3, [r7, #6]
		if (!ok5)
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <z_update_power_errors+0x34>
			z_set_error(SG_ERR_U5V);
 80040ca:	2002      	movs	r0, #2
 80040cc:	f000 f912 	bl	80042f4 <z_set_error>
		if (!ok12)
 80040d0:	79bb      	ldrb	r3, [r7, #6]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <z_update_power_errors+0x40>
			z_set_error(SG_ERR_U12V);
 80040d6:	2003      	movs	r0, #3
 80040d8:	f000 f90c 	bl	80042f4 <z_set_error>
	}
}
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	48000c00 	.word	0x48000c00

080040e8 <zentrale>:


// Zentrale denken und entscheiden.
void zentrale(void) {	// ----- DENKEN -----
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0

	z_update_power_errors();
 80040ec:	f7ff ffd6 	bl	800409c <z_update_power_errors>

	if (readPumpAlarm()) {
 80040f0:	f7fc fade 	bl	80006b0 <readPumpAlarm>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <zentrale+0x18>
		z_set_error(SG_ERR_PUMP_ALARM);
 80040fa:	2004      	movs	r0, #4
 80040fc:	f000 f8fa 	bl	80042f4 <z_set_error>
	}
	if (readPumpWarning()) {
 8004100:	f7fc fac0 	bl	8000684 <readPumpWarning>
		//z_set_error(SG_ERR_PUMP_WARNING);
	}

	// Fehlerüberprüfung
	if (z_error_akt != 0)
 8004104:	4b69      	ldr	r3, [pc, #420]	@ (80042ac <zentrale+0x1c4>)
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <zentrale+0x2a>
		z_set_status_tend(ZERROR);
 800410c:	2001      	movs	r0, #1
 800410e:	f000 f8db 	bl	80042c8 <z_set_status_tend>

	switch (z_status)// Je nach aktuellem Systemzustand auf Anfragen zur Zustands�nderung
 8004112:	4b67      	ldr	r3, [pc, #412]	@ (80042b0 <zentrale+0x1c8>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	3b01      	subs	r3, #1
 8004118:	2b0a      	cmp	r3, #10
 800411a:	f200 80b2 	bhi.w	8004282 <zentrale+0x19a>
 800411e:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <zentrale+0x3c>)
 8004120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004124:	08004151 	.word	0x08004151
 8004128:	080041af 	.word	0x080041af
 800412c:	08004283 	.word	0x08004283
 8004130:	08004283 	.word	0x08004283
 8004134:	08004283 	.word	0x08004283
 8004138:	08004283 	.word	0x08004283
 800413c:	08004283 	.word	0x08004283
 8004140:	08004283 	.word	0x08004283
 8004144:	080041e7 	.word	0x080041e7
 8004148:	08004283 	.word	0x08004283
 800414c:	08004235 	.word	0x08004235
	{// reagieren
	case ZERROR:
		if (z_status_h != ZERROR) {				// add what to do when error
 8004150:	4b58      	ldr	r3, [pc, #352]	@ (80042b4 <zentrale+0x1cc>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d008      	beq.n	800416a <zentrale+0x82>
			z_status_h = ZERROR;
 8004158:	4b56      	ldr	r3, [pc, #344]	@ (80042b4 <zentrale+0x1cc>)
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
			mcp_set_sps_out_disable(1);
 800415e:	2001      	movs	r0, #1
 8004160:	f7fd fa0b 	bl	800157a <mcp_set_sps_out_disable>
			z_rf_state = 0;
 8004164:	4b54      	ldr	r3, [pc, #336]	@ (80042b8 <zentrale+0x1d0>)
 8004166:	2200      	movs	r2, #0
 8004168:	701a      	strb	r2, [r3, #0]
		}

		if ((z_error_akt) > 0) // Wenn aktuell noch ein Fehler mit Ausnahme des ERREXT vorliegt
 800416a:	4b50      	ldr	r3, [pc, #320]	@ (80042ac <zentrale+0x1c4>)
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <zentrale+0xa0>
				{
			z_error_kum |= z_error_akt; // Wir aktualisieren hier schon mal den Kummulierten Fehler
 8004172:	4b52      	ldr	r3, [pc, #328]	@ (80042bc <zentrale+0x1d4>)
 8004174:	881a      	ldrh	r2, [r3, #0]
 8004176:	4b4d      	ldr	r3, [pc, #308]	@ (80042ac <zentrale+0x1c4>)
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	4313      	orrs	r3, r2
 800417c:	b29a      	uxth	r2, r3
 800417e:	4b4f      	ldr	r3, [pc, #316]	@ (80042bc <zentrale+0x1d4>)
 8004180:	801a      	strh	r2, [r3, #0]
			z_set_status_tend(ZERROR); // kann als Folgezustand nur der Zustand ERROR eingenommen werden!
 8004182:	2001      	movs	r0, #1
 8004184:	f000 f8a0 	bl	80042c8 <z_set_status_tend>
		} else {       // Falls kein Fehler im Modul vorliegt schließen wir hier
		}

		switch (z_status_tend) // Wünsche bezüglich einer Zustandsänderung bearbeiten
 8004188:	4b4d      	ldr	r3, [pc, #308]	@ (80042c0 <zentrale+0x1d8>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d002      	beq.n	8004196 <zentrale+0xae>
 8004190:	2b09      	cmp	r3, #9
 8004192:	d004      	beq.n	800419e <zentrale+0xb6>
			break;
		case INACTIVE:
			z_status = INACTIVE;                // Zustand INACTIVE vorbereiten
			break;
		default:
			break;
 8004194:	e007      	b.n	80041a6 <zentrale+0xbe>
			z_status = POWERON;
 8004196:	4b46      	ldr	r3, [pc, #280]	@ (80042b0 <zentrale+0x1c8>)
 8004198:	2202      	movs	r2, #2
 800419a:	701a      	strb	r2, [r3, #0]
			break;
 800419c:	e003      	b.n	80041a6 <zentrale+0xbe>
			z_status = INACTIVE;                // Zustand INACTIVE vorbereiten
 800419e:	4b44      	ldr	r3, [pc, #272]	@ (80042b0 <zentrale+0x1c8>)
 80041a0:	2209      	movs	r2, #9
 80041a2:	701a      	strb	r2, [r3, #0]
			break;
 80041a4:	bf00      	nop
		}

		z_status_tend = NOP;                         // Status_tend zurücksetzen
 80041a6:	4b46      	ldr	r3, [pc, #280]	@ (80042c0 <zentrale+0x1d8>)
 80041a8:	22ff      	movs	r2, #255	@ 0xff
 80041aa:	701a      	strb	r2, [r3, #0]
		break;
 80041ac:	e070      	b.n	8004290 <zentrale+0x1a8>
//			if(((z_error_kum && ((1<<SG_ERREN) + (1<<SG_ERRDTC))) != 0) && (adc7927_chk_en() != 1))
//				z_set_status_tend(Z_ERROR);


	case POWERON:// Startzustand nach Einschalten des Ger�tes. Keine Fehlerbehandlung!
		if (z_status_h != POWERON) {
 80041ae:	4b41      	ldr	r3, [pc, #260]	@ (80042b4 <zentrale+0x1cc>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d008      	beq.n	80041c8 <zentrale+0xe0>
			z_init_done = 0;
 80041b6:	4b43      	ldr	r3, [pc, #268]	@ (80042c4 <zentrale+0x1dc>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	701a      	strb	r2, [r3, #0]
			z_rf_state = 0;
 80041bc:	4b3e      	ldr	r3, [pc, #248]	@ (80042b8 <zentrale+0x1d0>)
 80041be:	2200      	movs	r2, #0
 80041c0:	701a      	strb	r2, [r3, #0]
			z_status_h = POWERON;
 80041c2:	4b3c      	ldr	r3, [pc, #240]	@ (80042b4 <zentrale+0x1cc>)
 80041c4:	2202      	movs	r2, #2
 80041c6:	701a      	strb	r2, [r3, #0]
		}

		if (ct_init_null()) {
 80041c8:	f7ff f9ec 	bl	80035a4 <ct_init_null>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <zentrale+0xf6>
			z_init_done = 1;
 80041d2:	4b3c      	ldr	r3, [pc, #240]	@ (80042c4 <zentrale+0x1dc>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
			z_status = INACTIVE;
 80041d8:	4b35      	ldr	r3, [pc, #212]	@ (80042b0 <zentrale+0x1c8>)
 80041da:	2209      	movs	r2, #9
 80041dc:	701a      	strb	r2, [r3, #0]
		}

		z_status_tend = NOP;					// z_status_tend zur�cksetzen
 80041de:	4b38      	ldr	r3, [pc, #224]	@ (80042c0 <zentrale+0x1d8>)
 80041e0:	22ff      	movs	r2, #255	@ 0xff
 80041e2:	701a      	strb	r2, [r3, #0]
		break;
 80041e4:	e054      	b.n	8004290 <zentrale+0x1a8>

	case INACTIVE:						//----- System im INACTIVE-Zustand

		if (z_status_h != INACTIVE) {
 80041e6:	4b33      	ldr	r3, [pc, #204]	@ (80042b4 <zentrale+0x1cc>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b09      	cmp	r3, #9
 80041ec:	d008      	beq.n	8004200 <zentrale+0x118>
			z_error_kum = 0;
 80041ee:	4b33      	ldr	r3, [pc, #204]	@ (80042bc <zentrale+0x1d4>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	801a      	strh	r2, [r3, #0]
			z_rf_state = 0;
 80041f4:	4b30      	ldr	r3, [pc, #192]	@ (80042b8 <zentrale+0x1d0>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	701a      	strb	r2, [r3, #0]
			z_status_h = INACTIVE;
 80041fa:	4b2e      	ldr	r3, [pc, #184]	@ (80042b4 <zentrale+0x1cc>)
 80041fc:	2209      	movs	r2, #9
 80041fe:	701a      	strb	r2, [r3, #0]
		}

		if (z_error_akt != 0)
 8004200:	4b2a      	ldr	r3, [pc, #168]	@ (80042ac <zentrale+0x1c4>)
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <zentrale+0x126>
			z_set_status_tend(ZERROR);
 8004208:	2001      	movs	r0, #1
 800420a:	f000 f85d 	bl	80042c8 <z_set_status_tend>

		switch (z_status_tend) {
 800420e:	4b2c      	ldr	r3, [pc, #176]	@ (80042c0 <zentrale+0x1d8>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d002      	beq.n	800421c <zentrale+0x134>
 8004216:	2b0b      	cmp	r3, #11
 8004218:	d004      	beq.n	8004224 <zentrale+0x13c>
			z_status = ZERROR;
			break;
		case ACTIVE:
			z_status = ACTIVE;
		default:
			break;
 800421a:	e006      	b.n	800422a <zentrale+0x142>
			z_status = ZERROR;
 800421c:	4b24      	ldr	r3, [pc, #144]	@ (80042b0 <zentrale+0x1c8>)
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]
			break;
 8004222:	e003      	b.n	800422c <zentrale+0x144>
			z_status = ACTIVE;
 8004224:	4b22      	ldr	r3, [pc, #136]	@ (80042b0 <zentrale+0x1c8>)
 8004226:	220b      	movs	r2, #11
 8004228:	701a      	strb	r2, [r3, #0]
			break;
 800422a:	bf00      	nop
		}
		z_status_tend = NOP;
 800422c:	4b24      	ldr	r3, [pc, #144]	@ (80042c0 <zentrale+0x1d8>)
 800422e:	22ff      	movs	r2, #255	@ 0xff
 8004230:	701a      	strb	r2, [r3, #0]
		break;
 8004232:	e02d      	b.n	8004290 <zentrale+0x1a8>

	case ACTIVE:
		if (z_status_h != ACTIVE) {
 8004234:	4b1f      	ldr	r3, [pc, #124]	@ (80042b4 <zentrale+0x1cc>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b0b      	cmp	r3, #11
 800423a:	d008      	beq.n	800424e <zentrale+0x166>
			z_rf_state = 1;
 800423c:	4b1e      	ldr	r3, [pc, #120]	@ (80042b8 <zentrale+0x1d0>)
 800423e:	2201      	movs	r2, #1
 8004240:	701a      	strb	r2, [r3, #0]
			mcp_set_sps_out_disable(0);
 8004242:	2000      	movs	r0, #0
 8004244:	f7fd f999 	bl	800157a <mcp_set_sps_out_disable>
			z_status_h = ACTIVE;
 8004248:	4b1a      	ldr	r3, [pc, #104]	@ (80042b4 <zentrale+0x1cc>)
 800424a:	220b      	movs	r2, #11
 800424c:	701a      	strb	r2, [r3, #0]
		}

		if (z_error_akt != 0)
 800424e:	4b17      	ldr	r3, [pc, #92]	@ (80042ac <zentrale+0x1c4>)
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <zentrale+0x174>
			z_set_status_tend(ZERROR);
 8004256:	2001      	movs	r0, #1
 8004258:	f000 f836 	bl	80042c8 <z_set_status_tend>

		switch (z_status_tend) {
 800425c:	4b18      	ldr	r3, [pc, #96]	@ (80042c0 <zentrale+0x1d8>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d002      	beq.n	800426a <zentrale+0x182>
 8004264:	2b09      	cmp	r3, #9
 8004266:	d004      	beq.n	8004272 <zentrale+0x18a>
			z_status = ZERROR;
			break;
		case INACTIVE:
			z_status = INACTIVE;
		default:
			break;
 8004268:	e006      	b.n	8004278 <zentrale+0x190>
			z_status = ZERROR;
 800426a:	4b11      	ldr	r3, [pc, #68]	@ (80042b0 <zentrale+0x1c8>)
 800426c:	2201      	movs	r2, #1
 800426e:	701a      	strb	r2, [r3, #0]
			break;
 8004270:	e003      	b.n	800427a <zentrale+0x192>
			z_status = INACTIVE;
 8004272:	4b0f      	ldr	r3, [pc, #60]	@ (80042b0 <zentrale+0x1c8>)
 8004274:	2209      	movs	r2, #9
 8004276:	701a      	strb	r2, [r3, #0]
			break;
 8004278:	bf00      	nop
		}
		z_status_tend = NOP;
 800427a:	4b11      	ldr	r3, [pc, #68]	@ (80042c0 <zentrale+0x1d8>)
 800427c:	22ff      	movs	r2, #255	@ 0xff
 800427e:	701a      	strb	r2, [r3, #0]
		break;
 8004280:	e006      	b.n	8004290 <zentrale+0x1a8>

	default:
		z_status_tend = NOP;
 8004282:	4b0f      	ldr	r3, [pc, #60]	@ (80042c0 <zentrale+0x1d8>)
 8004284:	22ff      	movs	r2, #255	@ 0xff
 8004286:	701a      	strb	r2, [r3, #0]
		z_status_h = NOP;
 8004288:	4b0a      	ldr	r3, [pc, #40]	@ (80042b4 <zentrale+0x1cc>)
 800428a:	22ff      	movs	r2, #255	@ 0xff
 800428c:	701a      	strb	r2, [r3, #0]
		break;
 800428e:	bf00      	nop
	}
	z_error_kum |= z_error_akt;	// Eventuell aufgetretenen neuen Fehler zur kummulierten
 8004290:	4b0a      	ldr	r3, [pc, #40]	@ (80042bc <zentrale+0x1d4>)
 8004292:	881a      	ldrh	r2, [r3, #0]
 8004294:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <zentrale+0x1c4>)
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	4313      	orrs	r3, r2
 800429a:	b29a      	uxth	r2, r3
 800429c:	4b07      	ldr	r3, [pc, #28]	@ (80042bc <zentrale+0x1d4>)
 800429e:	801a      	strh	r2, [r3, #0]
	z_error_akt = 0;// Fehleranzeige für aktuell vorliegende Fehler zurücksetzen
 80042a0:	4b02      	ldr	r3, [pc, #8]	@ (80042ac <zentrale+0x1c4>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	801a      	strh	r2, [r3, #0]

}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	200013e8 	.word	0x200013e8
 80042b0:	200013e4 	.word	0x200013e4
 80042b4:	200013e5 	.word	0x200013e5
 80042b8:	200013ed 	.word	0x200013ed
 80042bc:	200013ea 	.word	0x200013ea
 80042c0:	200013e6 	.word	0x200013e6
 80042c4:	200013ec 	.word	0x200013ec

080042c8 <z_set_status_tend>:


// Statuswunsch setzen
// Priorität:   error, inactive, start, active
void z_set_status_tend(uint8_t statnew) {
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	71fb      	strb	r3, [r7, #7]
	if (z_status_tend > statnew)
 80042d2:	4b07      	ldr	r3, [pc, #28]	@ (80042f0 <z_set_status_tend+0x28>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	79fa      	ldrb	r2, [r7, #7]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d203      	bcs.n	80042e4 <z_set_status_tend+0x1c>
		z_status_tend = statnew;    // nur Status höherer Priorität übernehmen
 80042dc:	4a04      	ldr	r2, [pc, #16]	@ (80042f0 <z_set_status_tend+0x28>)
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	7013      	strb	r3, [r2, #0]

	return;
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
}
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	200013e6 	.word	0x200013e6

080042f4 <z_set_error>:
uint16_t z_get_error(void) {
	return z_error_kum;
}

// Fehler an Zentrale melden
void z_set_error(uint8_t errnr) {
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
	if (errnr <= 15)
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	2b0f      	cmp	r3, #15
 8004302:	d80c      	bhi.n	800431e <z_set_error+0x2a>
		z_error_akt |= (1 << errnr);
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	2201      	movs	r2, #1
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	b21a      	sxth	r2, r3
 800430e:	4b07      	ldr	r3, [pc, #28]	@ (800432c <z_set_error+0x38>)
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b21b      	sxth	r3, r3
 8004314:	4313      	orrs	r3, r2
 8004316:	b21b      	sxth	r3, r3
 8004318:	b29a      	uxth	r2, r3
 800431a:	4b04      	ldr	r3, [pc, #16]	@ (800432c <z_set_error+0x38>)
 800431c:	801a      	strh	r2, [r3, #0]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	200013e8 	.word	0x200013e8

08004330 <z_mfc_set>:
	}
	return CMR_SUCCESSFULL;
}


uint8_t z_mfc_set(uint8_t idx, uint16_t val) {
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	460a      	mov	r2, r1
 800433a:	71fb      	strb	r3, [r7, #7]
 800433c:	4613      	mov	r3, r2
 800433e:	80bb      	strh	r3, [r7, #4]
    GbReply r;
    return gasbox_xfer(kMfc[idx].cmd_set, val, &r, GB_TIMEOUT_MS) && (r.status == GB_STATUS_OK);
 8004340:	79fa      	ldrb	r2, [r7, #7]
 8004342:	490d      	ldr	r1, [pc, #52]	@ (8004378 <z_mfc_set+0x48>)
 8004344:	4613      	mov	r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4413      	add	r3, r2
 800434a:	440b      	add	r3, r1
 800434c:	7818      	ldrb	r0, [r3, #0]
 800434e:	f107 020c 	add.w	r2, r7, #12
 8004352:	88b9      	ldrh	r1, [r7, #4]
 8004354:	2302      	movs	r3, #2
 8004356:	f7fc fe7f 	bl	8001058 <gasbox_xfer>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d004      	beq.n	800436a <z_mfc_set+0x3a>
 8004360:	7b7b      	ldrb	r3, [r7, #13]
 8004362:	2b80      	cmp	r3, #128	@ 0x80
 8004364:	d101      	bne.n	800436a <z_mfc_set+0x3a>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <z_mfc_set+0x3c>
 800436a:	2300      	movs	r3, #0
 800436c:	b2db      	uxtb	r3, r3
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	0800b1cc 	.word	0x0800b1cc

0800437c <z_mfc_get>:
uint8_t z_mfc_get(uint8_t idx, uint16_t *out) {
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	6039      	str	r1, [r7, #0]
 8004386:	71fb      	strb	r3, [r7, #7]
    GbReply r;
    if (!gasbox_xfer(kMfc[idx].cmd_get, 0, &r, GB_TIMEOUT_MS) || r.status != GB_STATUS_OK) return 0;
 8004388:	79fa      	ldrb	r2, [r7, #7]
 800438a:	490e      	ldr	r1, [pc, #56]	@ (80043c4 <z_mfc_get+0x48>)
 800438c:	4613      	mov	r3, r2
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4413      	add	r3, r2
 8004392:	440b      	add	r3, r1
 8004394:	3301      	adds	r3, #1
 8004396:	7818      	ldrb	r0, [r3, #0]
 8004398:	f107 020c 	add.w	r2, r7, #12
 800439c:	2302      	movs	r3, #2
 800439e:	2100      	movs	r1, #0
 80043a0:	f7fc fe5a 	bl	8001058 <gasbox_xfer>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <z_mfc_get+0x34>
 80043aa:	7b7b      	ldrb	r3, [r7, #13]
 80043ac:	2b80      	cmp	r3, #128	@ 0x80
 80043ae:	d001      	beq.n	80043b4 <z_mfc_get+0x38>
 80043b0:	2300      	movs	r3, #0
 80043b2:	e003      	b.n	80043bc <z_mfc_get+0x40>
    *out = r.value; return 1;
 80043b4:	89fa      	ldrh	r2, [r7, #14]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	801a      	strh	r2, [r3, #0]
 80043ba:	2301      	movs	r3, #1
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	0800b1cc 	.word	0x0800b1cc

080043c8 <z_mfc_close>:
uint8_t z_mfc_close(uint8_t idx) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	71fb      	strb	r3, [r7, #7]
    GbReply r;
    return gasbox_xfer(kMfc[idx].cmd_close, 0, &r, GB_TIMEOUT_MS) && (r.status == GB_STATUS_OK);
 80043d2:	79fa      	ldrb	r2, [r7, #7]
 80043d4:	490d      	ldr	r1, [pc, #52]	@ (800440c <z_mfc_close+0x44>)
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	440b      	add	r3, r1
 80043de:	3302      	adds	r3, #2
 80043e0:	7818      	ldrb	r0, [r3, #0]
 80043e2:	f107 020c 	add.w	r2, r7, #12
 80043e6:	2302      	movs	r3, #2
 80043e8:	2100      	movs	r1, #0
 80043ea:	f7fc fe35 	bl	8001058 <gasbox_xfer>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d004      	beq.n	80043fe <z_mfc_close+0x36>
 80043f4:	7b7b      	ldrb	r3, [r7, #13]
 80043f6:	2b80      	cmp	r3, #128	@ 0x80
 80043f8:	d101      	bne.n	80043fe <z_mfc_close+0x36>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <z_mfc_close+0x38>
 80043fe:	2300      	movs	r3, #0
 8004400:	b2db      	uxtb	r3, r3
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	0800b1cc 	.word	0x0800b1cc

08004410 <gb_do>:

static inline uint8_t gb_do(uint8_t cmd, uint16_t param) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	460a      	mov	r2, r1
 800441a:	71fb      	strb	r3, [r7, #7]
 800441c:	4613      	mov	r3, r2
 800441e:	80bb      	strh	r3, [r7, #4]
    GbReply r;
    return gasbox_xfer(cmd, param, &r, GB_TIMEOUT_MS) && (r.status == GB_STATUS_OK);
 8004420:	f107 020c 	add.w	r2, r7, #12
 8004424:	88b9      	ldrh	r1, [r7, #4]
 8004426:	79f8      	ldrb	r0, [r7, #7]
 8004428:	2302      	movs	r3, #2
 800442a:	f7fc fe15 	bl	8001058 <gasbox_xfer>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <gb_do+0x2e>
 8004434:	7b7b      	ldrb	r3, [r7, #13]
 8004436:	2b80      	cmp	r3, #128	@ 0x80
 8004438:	d101      	bne.n	800443e <gb_do+0x2e>
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <gb_do+0x30>
 800443e:	2300      	movs	r3, #0
 8004440:	b2db      	uxtb	r3, r3
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <gb_get16>:

static inline uint8_t gb_get16(uint8_t cmd, uint16_t *out) {
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	4603      	mov	r3, r0
 8004452:	6039      	str	r1, [r7, #0]
 8004454:	71fb      	strb	r3, [r7, #7]
    GbReply r;
    if (!gasbox_xfer(cmd, 0, &r, GB_TIMEOUT_MS) || r.status != GB_STATUS_OK) return 0;
 8004456:	f107 020c 	add.w	r2, r7, #12
 800445a:	79f8      	ldrb	r0, [r7, #7]
 800445c:	2302      	movs	r3, #2
 800445e:	2100      	movs	r1, #0
 8004460:	f7fc fdfa 	bl	8001058 <gasbox_xfer>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <gb_get16+0x26>
 800446a:	7b7b      	ldrb	r3, [r7, #13]
 800446c:	2b80      	cmp	r3, #128	@ 0x80
 800446e:	d001      	beq.n	8004474 <gb_get16+0x2a>
 8004470:	2300      	movs	r3, #0
 8004472:	e003      	b.n	800447c <gb_get16+0x32>
    *out = r.value; return 1;
 8004474:	89fa      	ldrh	r2, [r7, #14]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	2301      	movs	r3, #1
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <z_valve_open>:

uint8_t z_valve_open(uint8_t idx)  {
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	71fb      	strb	r3, [r7, #7]
	return gb_do(idx==3 ? GB_CMD_VALVE3_OPEN  : GB_CMD_VALVE4_OPEN, 0);
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	2b03      	cmp	r3, #3
 8004492:	d101      	bne.n	8004498 <z_valve_open+0x14>
 8004494:	230c      	movs	r3, #12
 8004496:	e000      	b.n	800449a <z_valve_open+0x16>
 8004498:	230d      	movs	r3, #13
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff ffb7 	bl	8004410 <gb_do>
 80044a2:	4603      	mov	r3, r0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <z_valve_close>:
uint8_t z_valve_close(uint8_t idx) {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
	return gb_do(idx==3 ? GB_CMD_VALVE3_CLOSE : GB_CMD_VALVE4_CLOSE, 0);
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d101      	bne.n	80044c0 <z_valve_close+0x14>
 80044bc:	230a      	movs	r3, #10
 80044be:	e000      	b.n	80044c2 <z_valve_close+0x16>
 80044c0:	230b      	movs	r3, #11
 80044c2:	2100      	movs	r1, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ffa3 	bl	8004410 <gb_do>
 80044ca:	4603      	mov	r3, r0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <z_valve_get>:
uint8_t z_valve_get(uint8_t idx, uint16_t *state) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	6039      	str	r1, [r7, #0]
 80044de:	71fb      	strb	r3, [r7, #7]
    return gb_get16(idx==3 ? GB_CMD_VALVE3_GET : GB_CMD_VALVE4_GET, state);
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d101      	bne.n	80044ea <z_valve_get+0x16>
 80044e6:	230e      	movs	r3, #14
 80044e8:	e000      	b.n	80044ec <z_valve_get+0x18>
 80044ea:	230f      	movs	r3, #15
 80044ec:	6839      	ldr	r1, [r7, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff ffab 	bl	800444a <gb_get16>
 80044f4:	4603      	mov	r3, r0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <z_gb_err_clr>:
uint8_t z_gb_err_clr(){
 80044fe:	b580      	push	{r7, lr}
 8004500:	af00      	add	r7, sp, #0
	return gb_do(GB_CMD_CLR_ERR, 0) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8004502:	2100      	movs	r1, #0
 8004504:	2011      	movs	r0, #17
 8004506:	f7ff ff83 	bl	8004410 <gb_do>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <z_gb_err_clr+0x16>
 8004510:	2380      	movs	r3, #128	@ 0x80
 8004512:	e000      	b.n	8004516 <z_gb_err_clr+0x18>
 8004514:	2307      	movs	r3, #7
}
 8004516:	4618      	mov	r0, r3
 8004518:	bd80      	pop	{r7, pc}

0800451a <z_gb_err_get>:
uint8_t z_gb_err_get(uint16_t *out_err) {
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
    return gb_get16(GB_CMD_GET_ERR, out_err) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	2010      	movs	r0, #16
 8004526:	f7ff ff90 	bl	800444a <gb_get16>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <z_gb_err_get+0x1a>
 8004530:	2380      	movs	r3, #128	@ 0x80
 8004532:	e000      	b.n	8004536 <z_gb_err_get+0x1c>
 8004534:	2307      	movs	r3, #7
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <z_cmd_scheduler>:

//--- FUNKTIONSDEKLARATIONS -------------------------------------------------------------------------------------------------
//die Mechanimus zur Verarbeitung der Befehle mit den unterschiedlichen Prioritäten
//--- FUNKTIONSDEFINITIONS --------------------------------------------------------------------------------------------------
void z_cmd_scheduler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
	uint8_t priolevel0_null_flg = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	75fb      	strb	r3, [r7, #23]
	uint8_t priolevel1_null_flg = 0;
 800454a:	2300      	movs	r3, #0
 800454c:	75bb      	strb	r3, [r7, #22]
	uint8_t priolevel2_null_flg = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	757b      	strb	r3, [r7, #21]

	uint8_t cmdcount = 0;                       //Zähler für die zu verarbeitenden Befehle
 8004552:	2300      	movs	r3, #0
 8004554:	753b      	strb	r3, [r7, #20]
	uint8_t cmd_flg = 0;                       //Falls cmd_flg = 1 ist, d.h. keinen Befehl zu verarbeiten; cmd_flg = 0, d.h. noch Befehl zu verarbeiten
 8004556:	2300      	movs	r3, #0
 8004558:	74fb      	strb	r3, [r7, #19]
	stack_item cmd;

	uint8_t resultflg = get_anzFrei_resultQueue();
 800455a:	f7fe f9cf 	bl	80028fc <get_anzFrei_resultQueue>
 800455e:	4603      	mov	r3, r0
 8004560:	74bb      	strb	r3, [r7, #18]

	if (resultflg > 1 )            //prüft, ob es noch freien Platz in resultqueue.
 8004562:	7cbb      	ldrb	r3, [r7, #18]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d953      	bls.n	8004610 <z_cmd_scheduler+0xd0>
	{
		do
		{
			while ((cmdcount < Z_MAX_HIGHPRIO_NUM) && (priolevel0_null_flg == 0))
 8004568:	e012      	b.n	8004590 <z_cmd_scheduler+0x50>
			{
				if (z_priolevel_header[PRIO_LEVEL0] != NONEXT)
 800456a:	4b2b      	ldr	r3, [pc, #172]	@ (8004618 <z_cmd_scheduler+0xd8>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2bff      	cmp	r3, #255	@ 0xff
 8004570:	d00c      	beq.n	800458c <z_cmd_scheduler+0x4c>
				{
					zstack_pop(&cmd, PRIO_LEVEL0);
 8004572:	463b      	mov	r3, r7
 8004574:	2100      	movs	r1, #0
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe fe3c 	bl	80031f4 <zstack_pop>
					z_cmd_sero(cmd);
 800457c:	463b      	mov	r3, r7
 800457e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004580:	f000 f84c 	bl	800461c <z_cmd_sero>
					cmdcount++;
 8004584:	7d3b      	ldrb	r3, [r7, #20]
 8004586:	3301      	adds	r3, #1
 8004588:	753b      	strb	r3, [r7, #20]
 800458a:	e001      	b.n	8004590 <z_cmd_scheduler+0x50>

				}
				else
				{
					priolevel0_null_flg = 1;      //es gibt keinen Befehl in der Prioritätliste mit Level 0
 800458c:	2301      	movs	r3, #1
 800458e:	75fb      	strb	r3, [r7, #23]
			while ((cmdcount < Z_MAX_HIGHPRIO_NUM) && (priolevel0_null_flg == 0))
 8004590:	7d3b      	ldrb	r3, [r7, #20]
 8004592:	2b04      	cmp	r3, #4
 8004594:	d802      	bhi.n	800459c <z_cmd_scheduler+0x5c>
 8004596:	7dfb      	ldrb	r3, [r7, #23]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0e6      	beq.n	800456a <z_cmd_scheduler+0x2a>
				};
			};

			if (z_priolevel_header[PRIO_LEVEL1] != NONEXT)
 800459c:	4b1e      	ldr	r3, [pc, #120]	@ (8004618 <z_cmd_scheduler+0xd8>)
 800459e:	785b      	ldrb	r3, [r3, #1]
 80045a0:	2bff      	cmp	r3, #255	@ 0xff
 80045a2:	d00f      	beq.n	80045c4 <z_cmd_scheduler+0x84>
			{
				if (cmdcount < Z_MAXCMD)
 80045a4:	7d3b      	ldrb	r3, [r7, #20]
 80045a6:	2b09      	cmp	r3, #9
 80045a8:	d80e      	bhi.n	80045c8 <z_cmd_scheduler+0x88>
				{
					zstack_pop(&cmd, PRIO_LEVEL1);
 80045aa:	463b      	mov	r3, r7
 80045ac:	2101      	movs	r1, #1
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe fe20 	bl	80031f4 <zstack_pop>
					z_cmd_sero(cmd);
 80045b4:	463b      	mov	r3, r7
 80045b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045b8:	f000 f830 	bl	800461c <z_cmd_sero>
					cmdcount++;
 80045bc:	7d3b      	ldrb	r3, [r7, #20]
 80045be:	3301      	adds	r3, #1
 80045c0:	753b      	strb	r3, [r7, #20]
 80045c2:	e001      	b.n	80045c8 <z_cmd_scheduler+0x88>

				};
			}
			else
			{
				priolevel1_null_flg = 1;   //es gibt keinen Befehl in der Prioritätliste mit Level 1
 80045c4:	2301      	movs	r3, #1
 80045c6:	75bb      	strb	r3, [r7, #22]
			};

			if (z_priolevel_header[PRIO_LEVEL2] != NONEXT)
 80045c8:	4b13      	ldr	r3, [pc, #76]	@ (8004618 <z_cmd_scheduler+0xd8>)
 80045ca:	789b      	ldrb	r3, [r3, #2]
 80045cc:	2bff      	cmp	r3, #255	@ 0xff
 80045ce:	d00f      	beq.n	80045f0 <z_cmd_scheduler+0xb0>
			{
				if (cmdcount < Z_MAXCMD)
 80045d0:	7d3b      	ldrb	r3, [r7, #20]
 80045d2:	2b09      	cmp	r3, #9
 80045d4:	d80e      	bhi.n	80045f4 <z_cmd_scheduler+0xb4>
				{
					zstack_pop(&cmd, PRIO_LEVEL2);
 80045d6:	463b      	mov	r3, r7
 80045d8:	2102      	movs	r1, #2
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe fe0a 	bl	80031f4 <zstack_pop>
					z_cmd_sero(cmd);
 80045e0:	463b      	mov	r3, r7
 80045e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045e4:	f000 f81a 	bl	800461c <z_cmd_sero>
					cmdcount++;
 80045e8:	7d3b      	ldrb	r3, [r7, #20]
 80045ea:	3301      	adds	r3, #1
 80045ec:	753b      	strb	r3, [r7, #20]
 80045ee:	e001      	b.n	80045f4 <z_cmd_scheduler+0xb4>
				};
			}
			else
			{
				priolevel2_null_flg = 1;   //es gibt keinen Befehl in der Prioritätliste mit Level 2
 80045f0:	2301      	movs	r3, #1
 80045f2:	757b      	strb	r3, [r7, #21]
			};

			//prüft, ob die drei Prioritätslisten alle leer sind.
			cmd_flg = priolevel0_null_flg & priolevel1_null_flg;
 80045f4:	7dfa      	ldrb	r2, [r7, #23]
 80045f6:	7dbb      	ldrb	r3, [r7, #22]
 80045f8:	4013      	ands	r3, r2
 80045fa:	74fb      	strb	r3, [r7, #19]
			cmd_flg &= priolevel2_null_flg;
 80045fc:	7cfa      	ldrb	r2, [r7, #19]
 80045fe:	7d7b      	ldrb	r3, [r7, #21]
 8004600:	4013      	ands	r3, r2
 8004602:	74fb      	strb	r3, [r7, #19]

		}while ( (cmdcount < Z_MAXCMD) && (cmd_flg == 0));
 8004604:	7d3b      	ldrb	r3, [r7, #20]
 8004606:	2b09      	cmp	r3, #9
 8004608:	d802      	bhi.n	8004610 <z_cmd_scheduler+0xd0>
 800460a:	7cfb      	ldrb	r3, [r7, #19]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0bf      	beq.n	8004590 <z_cmd_scheduler+0x50>
	};

}
 8004610:	bf00      	nop
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	2000028c 	.word	0x2000028c

0800461c <z_cmd_sero>:

void z_cmd_sero(stack_item cmd) {
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b08b      	sub	sp, #44	@ 0x2c
 8004620:	af00      	add	r7, sp, #0
 8004622:	463c      	mov	r4, r7
 8004624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch (cmd.cmd_index) {
 8004628:	887b      	ldrh	r3, [r7, #2]
 800462a:	3b0a      	subs	r3, #10
 800462c:	2b20      	cmp	r3, #32
 800462e:	f200 816d 	bhi.w	800490c <z_cmd_sero+0x2f0>
 8004632:	a201      	add	r2, pc, #4	@ (adr r2, 8004638 <z_cmd_sero+0x1c>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	080048e9 	.word	0x080048e9
 800463c:	08004903 	.word	0x08004903
 8004640:	0800490d 	.word	0x0800490d
 8004644:	0800490d 	.word	0x0800490d
 8004648:	0800490d 	.word	0x0800490d
 800464c:	0800490d 	.word	0x0800490d
 8004650:	0800490d 	.word	0x0800490d
 8004654:	0800490d 	.word	0x0800490d
 8004658:	0800490d 	.word	0x0800490d
 800465c:	0800490d 	.word	0x0800490d
 8004660:	080047f5 	.word	0x080047f5
 8004664:	0800490d 	.word	0x0800490d
 8004668:	0800480b 	.word	0x0800480b
 800466c:	0800490d 	.word	0x0800490d
 8004670:	080046bd 	.word	0x080046bd
 8004674:	08004755 	.word	0x08004755
 8004678:	080046e3 	.word	0x080046e3
 800467c:	0800477d 	.word	0x0800477d
 8004680:	08004709 	.word	0x08004709
 8004684:	080047a5 	.word	0x080047a5
 8004688:	0800472f 	.word	0x0800472f
 800468c:	080047cd 	.word	0x080047cd
 8004690:	08004863 	.word	0x08004863
 8004694:	08004879 	.word	0x08004879
 8004698:	0800484d 	.word	0x0800484d
 800469c:	0800490d 	.word	0x0800490d
 80046a0:	080048b1 	.word	0x080048b1
 80046a4:	080048c7 	.word	0x080048c7
 80046a8:	0800489b 	.word	0x0800489b
 80046ac:	0800490d 	.word	0x0800490d
 80046b0:	08004821 	.word	0x08004821
 80046b4:	0800490d 	.word	0x0800490d
 80046b8:	08004837 	.word	0x08004837

	// MFC1..MFC4 SET
	case CMD_MFC1_SET: {
		uint16_t p = clamp16(cmd.parameter);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fc faa1 	bl	8000c06 <clamp16>
 80046c4:	4603      	mov	r3, r0
 80046c6:	843b      	strh	r3, [r7, #32]
		cmd.cmd_ack = z_mfc_set(0, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80046c8:	8c3b      	ldrh	r3, [r7, #32]
 80046ca:	4619      	mov	r1, r3
 80046cc:	2000      	movs	r0, #0
 80046ce:	f7ff fe2f 	bl	8004330 <z_mfc_set>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <z_cmd_sero+0xc0>
 80046d8:	2380      	movs	r3, #128	@ 0x80
 80046da:	e000      	b.n	80046de <z_cmd_sero+0xc2>
 80046dc:	2307      	movs	r3, #7
 80046de:	713b      	strb	r3, [r7, #4]
		break;
 80046e0:	e120      	b.n	8004924 <z_cmd_sero+0x308>
	}
	case CMD_MFC2_SET: {
		uint16_t p = clamp16(cmd.parameter);
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fc fa8e 	bl	8000c06 <clamp16>
 80046ea:	4603      	mov	r3, r0
 80046ec:	847b      	strh	r3, [r7, #34]	@ 0x22
		cmd.cmd_ack = z_mfc_set(1, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80046ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80046f0:	4619      	mov	r1, r3
 80046f2:	2001      	movs	r0, #1
 80046f4:	f7ff fe1c 	bl	8004330 <z_mfc_set>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <z_cmd_sero+0xe6>
 80046fe:	2380      	movs	r3, #128	@ 0x80
 8004700:	e000      	b.n	8004704 <z_cmd_sero+0xe8>
 8004702:	2307      	movs	r3, #7
 8004704:	713b      	strb	r3, [r7, #4]
		break;
 8004706:	e10d      	b.n	8004924 <z_cmd_sero+0x308>
	}
	case CMD_MFC3_SET: {
		uint16_t p = clamp16(cmd.parameter);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fc fa7b 	bl	8000c06 <clamp16>
 8004710:	4603      	mov	r3, r0
 8004712:	84bb      	strh	r3, [r7, #36]	@ 0x24
		cmd.cmd_ack = z_mfc_set(2, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8004714:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004716:	4619      	mov	r1, r3
 8004718:	2002      	movs	r0, #2
 800471a:	f7ff fe09 	bl	8004330 <z_mfc_set>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <z_cmd_sero+0x10c>
 8004724:	2380      	movs	r3, #128	@ 0x80
 8004726:	e000      	b.n	800472a <z_cmd_sero+0x10e>
 8004728:	2307      	movs	r3, #7
 800472a:	713b      	strb	r3, [r7, #4]
		break;
 800472c:	e0fa      	b.n	8004924 <z_cmd_sero+0x308>
	}
	case CMD_MFC4_SET: {
		uint16_t p = clamp16(cmd.parameter);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4618      	mov	r0, r3
 8004732:	f7fc fa68 	bl	8000c06 <clamp16>
 8004736:	4603      	mov	r3, r0
 8004738:	84fb      	strh	r3, [r7, #38]	@ 0x26
		cmd.cmd_ack = z_mfc_set(3, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 800473a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800473c:	4619      	mov	r1, r3
 800473e:	2003      	movs	r0, #3
 8004740:	f7ff fdf6 	bl	8004330 <z_mfc_set>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <z_cmd_sero+0x132>
 800474a:	2380      	movs	r3, #128	@ 0x80
 800474c:	e000      	b.n	8004750 <z_cmd_sero+0x134>
 800474e:	2307      	movs	r3, #7
 8004750:	713b      	strb	r3, [r7, #4]
		break;
 8004752:	e0e7      	b.n	8004924 <z_cmd_sero+0x308>
	}

	// MFC1..MFC4 GET
	case CMD_MFC1_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(0, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8004754:	f107 031e 	add.w	r3, r7, #30
 8004758:	4619      	mov	r1, r3
 800475a:	2000      	movs	r0, #0
 800475c:	f7ff fe0e 	bl	800437c <z_mfc_get>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <z_cmd_sero+0x14e>
 8004766:	2380      	movs	r3, #128	@ 0x80
 8004768:	e000      	b.n	800476c <z_cmd_sero+0x150>
 800476a:	2307      	movs	r3, #7
 800476c:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 800476e:	793b      	ldrb	r3, [r7, #4]
 8004770:	2b80      	cmp	r3, #128	@ 0x80
 8004772:	f040 80ce 	bne.w	8004912 <z_cmd_sero+0x2f6>
			cmd.parameter = v;
 8004776:	8bfb      	ldrh	r3, [r7, #30]
 8004778:	60bb      	str	r3, [r7, #8]
		break;
 800477a:	e0ca      	b.n	8004912 <z_cmd_sero+0x2f6>
	}
	case CMD_MFC2_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(1, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 800477c:	f107 031c 	add.w	r3, r7, #28
 8004780:	4619      	mov	r1, r3
 8004782:	2001      	movs	r0, #1
 8004784:	f7ff fdfa 	bl	800437c <z_mfc_get>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <z_cmd_sero+0x176>
 800478e:	2380      	movs	r3, #128	@ 0x80
 8004790:	e000      	b.n	8004794 <z_cmd_sero+0x178>
 8004792:	2307      	movs	r3, #7
 8004794:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 8004796:	793b      	ldrb	r3, [r7, #4]
 8004798:	2b80      	cmp	r3, #128	@ 0x80
 800479a:	f040 80bc 	bne.w	8004916 <z_cmd_sero+0x2fa>
			cmd.parameter = v;
 800479e:	8bbb      	ldrh	r3, [r7, #28]
 80047a0:	60bb      	str	r3, [r7, #8]
		break;
 80047a2:	e0b8      	b.n	8004916 <z_cmd_sero+0x2fa>
	}
	case CMD_MFC3_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(2, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80047a4:	f107 031a 	add.w	r3, r7, #26
 80047a8:	4619      	mov	r1, r3
 80047aa:	2002      	movs	r0, #2
 80047ac:	f7ff fde6 	bl	800437c <z_mfc_get>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <z_cmd_sero+0x19e>
 80047b6:	2380      	movs	r3, #128	@ 0x80
 80047b8:	e000      	b.n	80047bc <z_cmd_sero+0x1a0>
 80047ba:	2307      	movs	r3, #7
 80047bc:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 80047be:	793b      	ldrb	r3, [r7, #4]
 80047c0:	2b80      	cmp	r3, #128	@ 0x80
 80047c2:	f040 80aa 	bne.w	800491a <z_cmd_sero+0x2fe>
			cmd.parameter = v;
 80047c6:	8b7b      	ldrh	r3, [r7, #26]
 80047c8:	60bb      	str	r3, [r7, #8]
		break;
 80047ca:	e0a6      	b.n	800491a <z_cmd_sero+0x2fe>
	}
	case CMD_MFC4_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(3, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80047cc:	f107 0318 	add.w	r3, r7, #24
 80047d0:	4619      	mov	r1, r3
 80047d2:	2003      	movs	r0, #3
 80047d4:	f7ff fdd2 	bl	800437c <z_mfc_get>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <z_cmd_sero+0x1c6>
 80047de:	2380      	movs	r3, #128	@ 0x80
 80047e0:	e000      	b.n	80047e4 <z_cmd_sero+0x1c8>
 80047e2:	2307      	movs	r3, #7
 80047e4:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 80047e6:	793b      	ldrb	r3, [r7, #4]
 80047e8:	2b80      	cmp	r3, #128	@ 0x80
 80047ea:	f040 8098 	bne.w	800491e <z_cmd_sero+0x302>
			cmd.parameter = v;
 80047ee:	8b3b      	ldrh	r3, [r7, #24]
 80047f0:	60bb      	str	r3, [r7, #8]
		break;
 80047f2:	e094      	b.n	800491e <z_cmd_sero+0x302>
	}

	// MFC1..MFC4 CLOSE
	case CMD_MFC1_CLOSE: {
		cmd.cmd_ack = z_mfc_close(0) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80047f4:	2000      	movs	r0, #0
 80047f6:	f7ff fde7 	bl	80043c8 <z_mfc_close>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <z_cmd_sero+0x1e8>
 8004800:	2380      	movs	r3, #128	@ 0x80
 8004802:	e000      	b.n	8004806 <z_cmd_sero+0x1ea>
 8004804:	2307      	movs	r3, #7
 8004806:	713b      	strb	r3, [r7, #4]
		break;
 8004808:	e08c      	b.n	8004924 <z_cmd_sero+0x308>
	}
	case CMD_MFC2_CLOSE: {
		cmd.cmd_ack = z_mfc_close(1) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 800480a:	2001      	movs	r0, #1
 800480c:	f7ff fddc 	bl	80043c8 <z_mfc_close>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <z_cmd_sero+0x1fe>
 8004816:	2380      	movs	r3, #128	@ 0x80
 8004818:	e000      	b.n	800481c <z_cmd_sero+0x200>
 800481a:	2307      	movs	r3, #7
 800481c:	713b      	strb	r3, [r7, #4]
		break;
 800481e:	e081      	b.n	8004924 <z_cmd_sero+0x308>
	}
	case CMD_MFC3_CLOSE: {
		cmd.cmd_ack = z_mfc_close(2) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8004820:	2002      	movs	r0, #2
 8004822:	f7ff fdd1 	bl	80043c8 <z_mfc_close>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <z_cmd_sero+0x214>
 800482c:	2380      	movs	r3, #128	@ 0x80
 800482e:	e000      	b.n	8004832 <z_cmd_sero+0x216>
 8004830:	2307      	movs	r3, #7
 8004832:	713b      	strb	r3, [r7, #4]
		break;
 8004834:	e076      	b.n	8004924 <z_cmd_sero+0x308>
	}
	case CMD_MFC4_CLOSE: {
		cmd.cmd_ack = z_mfc_close(3) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8004836:	2003      	movs	r0, #3
 8004838:	f7ff fdc6 	bl	80043c8 <z_mfc_close>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <z_cmd_sero+0x22a>
 8004842:	2380      	movs	r3, #128	@ 0x80
 8004844:	e000      	b.n	8004848 <z_cmd_sero+0x22c>
 8004846:	2307      	movs	r3, #7
 8004848:	713b      	strb	r3, [r7, #4]
		break;
 800484a:	e06b      	b.n	8004924 <z_cmd_sero+0x308>
	}

	// Valves OPEN-CLOSE-READ
	case CMD_V3_OPEN: {
	    cmd.cmd_ack = z_valve_open(3) ? CMR_SUCCESSFULL : CMR_UNITBUSY;
 800484c:	2003      	movs	r0, #3
 800484e:	f7ff fe19 	bl	8004484 <z_valve_open>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <z_cmd_sero+0x240>
 8004858:	2380      	movs	r3, #128	@ 0x80
 800485a:	e000      	b.n	800485e <z_cmd_sero+0x242>
 800485c:	2309      	movs	r3, #9
 800485e:	713b      	strb	r3, [r7, #4]
	    break;
 8004860:	e060      	b.n	8004924 <z_cmd_sero+0x308>
	}
	case CMD_V3_CLOSE: {
	    cmd.cmd_ack = z_valve_close(3) ? CMR_SUCCESSFULL : CMR_UNITBUSY;
 8004862:	2003      	movs	r0, #3
 8004864:	f7ff fe22 	bl	80044ac <z_valve_close>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <z_cmd_sero+0x256>
 800486e:	2380      	movs	r3, #128	@ 0x80
 8004870:	e000      	b.n	8004874 <z_cmd_sero+0x258>
 8004872:	2309      	movs	r3, #9
 8004874:	713b      	strb	r3, [r7, #4]
	    break;
 8004876:	e055      	b.n	8004924 <z_cmd_sero+0x308>
	}
	case CMD_V3_READ: {
	    uint16_t st;
	    if (z_valve_get(3, &st)) { cmd.parameter = st; cmd.cmd_ack = CMR_SUCCESSFULL; }
 8004878:	f107 0316 	add.w	r3, r7, #22
 800487c:	4619      	mov	r1, r3
 800487e:	2003      	movs	r0, #3
 8004880:	f7ff fe28 	bl	80044d4 <z_valve_get>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d004      	beq.n	8004894 <z_cmd_sero+0x278>
 800488a:	8afb      	ldrh	r3, [r7, #22]
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	2380      	movs	r3, #128	@ 0x80
 8004890:	713b      	strb	r3, [r7, #4]
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
	    break;
 8004892:	e047      	b.n	8004924 <z_cmd_sero+0x308>
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
 8004894:	2307      	movs	r3, #7
 8004896:	713b      	strb	r3, [r7, #4]
	    break;
 8004898:	e044      	b.n	8004924 <z_cmd_sero+0x308>
	}

	case CMD_V4_OPEN: {
	    cmd.cmd_ack = z_valve_open(4) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 800489a:	2004      	movs	r0, #4
 800489c:	f7ff fdf2 	bl	8004484 <z_valve_open>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <z_cmd_sero+0x28e>
 80048a6:	2380      	movs	r3, #128	@ 0x80
 80048a8:	e000      	b.n	80048ac <z_cmd_sero+0x290>
 80048aa:	2307      	movs	r3, #7
 80048ac:	713b      	strb	r3, [r7, #4]
	    break;
 80048ae:	e039      	b.n	8004924 <z_cmd_sero+0x308>
	}
	case CMD_V4_CLOSE: {
	    cmd.cmd_ack = z_valve_close(4) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80048b0:	2004      	movs	r0, #4
 80048b2:	f7ff fdfb 	bl	80044ac <z_valve_close>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <z_cmd_sero+0x2a4>
 80048bc:	2380      	movs	r3, #128	@ 0x80
 80048be:	e000      	b.n	80048c2 <z_cmd_sero+0x2a6>
 80048c0:	2307      	movs	r3, #7
 80048c2:	713b      	strb	r3, [r7, #4]
	    break;
 80048c4:	e02e      	b.n	8004924 <z_cmd_sero+0x308>
	}
	case CMD_V4_READ: {
	    uint16_t st;
	    if (z_valve_get(4, &st)) { cmd.parameter = st; cmd.cmd_ack = CMR_SUCCESSFULL; }
 80048c6:	f107 0314 	add.w	r3, r7, #20
 80048ca:	4619      	mov	r1, r3
 80048cc:	2004      	movs	r0, #4
 80048ce:	f7ff fe01 	bl	80044d4 <z_valve_get>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d004      	beq.n	80048e2 <z_cmd_sero+0x2c6>
 80048d8:	8abb      	ldrh	r3, [r7, #20]
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	2380      	movs	r3, #128	@ 0x80
 80048de:	713b      	strb	r3, [r7, #4]
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
	    break;
 80048e0:	e020      	b.n	8004924 <z_cmd_sero+0x308>
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
 80048e2:	2307      	movs	r3, #7
 80048e4:	713b      	strb	r3, [r7, #4]
	    break;
 80048e6:	e01d      	b.n	8004924 <z_cmd_sero+0x308>
	}

	// GET SET ERR GASBOX
	case CMD_GET_ERR_GB: {
	    uint16_t e;
	    cmd.cmd_ack = z_gb_err_get(&e);
 80048e8:	f107 0312 	add.w	r3, r7, #18
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff fe14 	bl	800451a <z_gb_err_get>
 80048f2:	4603      	mov	r3, r0
 80048f4:	713b      	strb	r3, [r7, #4]
	    if (cmd.cmd_ack == CMR_SUCCESSFULL) cmd.parameter = e;
 80048f6:	793b      	ldrb	r3, [r7, #4]
 80048f8:	2b80      	cmp	r3, #128	@ 0x80
 80048fa:	d112      	bne.n	8004922 <z_cmd_sero+0x306>
 80048fc:	8a7b      	ldrh	r3, [r7, #18]
 80048fe:	60bb      	str	r3, [r7, #8]
	    break;
 8004900:	e00f      	b.n	8004922 <z_cmd_sero+0x306>
	}
	case CMD_RESET_ERR_GB: {
	    cmd.cmd_ack = z_gb_err_clr();
 8004902:	f7ff fdfc 	bl	80044fe <z_gb_err_clr>
 8004906:	4603      	mov	r3, r0
 8004908:	713b      	strb	r3, [r7, #4]
	    break;
 800490a:	e00b      	b.n	8004924 <z_cmd_sero+0x308>
	}


	default:
		cmd.cmd_ack = CMR_UNKNOWNCOMMAND;
 800490c:	2306      	movs	r3, #6
 800490e:	713b      	strb	r3, [r7, #4]
		break;
 8004910:	e008      	b.n	8004924 <z_cmd_sero+0x308>
		break;
 8004912:	bf00      	nop
 8004914:	e006      	b.n	8004924 <z_cmd_sero+0x308>
		break;
 8004916:	bf00      	nop
 8004918:	e004      	b.n	8004924 <z_cmd_sero+0x308>
		break;
 800491a:	bf00      	nop
 800491c:	e002      	b.n	8004924 <z_cmd_sero+0x308>
		break;
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <z_cmd_sero+0x308>
	    break;
 8004922:	bf00      	nop
	};
	resultQueue_push(cmd);
 8004924:	463b      	mov	r3, r7
 8004926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004928:	f7fe f828 	bl	800297c <resultQueue_push>

}
 800492c:	bf00      	nop
 800492e:	372c      	adds	r7, #44	@ 0x2c
 8004930:	46bd      	mov	sp, r7
 8004932:	bd90      	pop	{r4, r7, pc}

08004934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004934:	480d      	ldr	r0, [pc, #52]	@ (800496c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004936:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004938:	f7fe fd2c 	bl	8003394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800493c:	480c      	ldr	r0, [pc, #48]	@ (8004970 <LoopForever+0x6>)
  ldr r1, =_edata
 800493e:	490d      	ldr	r1, [pc, #52]	@ (8004974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004940:	4a0d      	ldr	r2, [pc, #52]	@ (8004978 <LoopForever+0xe>)
  movs r3, #0
 8004942:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004944:	e002      	b.n	800494c <LoopCopyDataInit>

08004946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800494a:	3304      	adds	r3, #4

0800494c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800494c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800494e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004950:	d3f9      	bcc.n	8004946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004952:	4a0a      	ldr	r2, [pc, #40]	@ (800497c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004954:	4c0a      	ldr	r4, [pc, #40]	@ (8004980 <LoopForever+0x16>)
  movs r3, #0
 8004956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004958:	e001      	b.n	800495e <LoopFillZerobss>

0800495a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800495a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800495c:	3204      	adds	r2, #4

0800495e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800495e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004960:	d3fb      	bcc.n	800495a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004962:	f005 fe4b 	bl	800a5fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004966:	f7fc fc9f 	bl	80012a8 <main>

0800496a <LoopForever>:

LoopForever:
    b LoopForever
 800496a:	e7fe      	b.n	800496a <LoopForever>
  ldr   r0, =_estack
 800496c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004974:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8004978:	0800b244 	.word	0x0800b244
  ldr r2, =_sbss
 800497c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8004980:	2000153c 	.word	0x2000153c

08004984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004984:	e7fe      	b.n	8004984 <ADC1_2_IRQHandler>

08004986 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b082      	sub	sp, #8
 800498a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004990:	2003      	movs	r0, #3
 8004992:	f001 f951 	bl	8005c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004996:	200f      	movs	r0, #15
 8004998:	f000 f80e 	bl	80049b8 <HAL_InitTick>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	71fb      	strb	r3, [r7, #7]
 80049a6:	e001      	b.n	80049ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80049a8:	f7fe fc6a 	bl	8003280 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80049ac:	79fb      	ldrb	r3, [r7, #7]

}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80049c4:	4b16      	ldr	r3, [pc, #88]	@ (8004a20 <HAL_InitTick+0x68>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d022      	beq.n	8004a12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80049cc:	4b15      	ldr	r3, [pc, #84]	@ (8004a24 <HAL_InitTick+0x6c>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4b13      	ldr	r3, [pc, #76]	@ (8004a20 <HAL_InitTick+0x68>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80049d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 f96a 	bl	8005cba <HAL_SYSTICK_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10f      	bne.n	8004a0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b0f      	cmp	r3, #15
 80049f0:	d809      	bhi.n	8004a06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049f2:	2200      	movs	r2, #0
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	f04f 30ff 	mov.w	r0, #4294967295
 80049fa:	f001 f928 	bl	8005c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004a28 <HAL_InitTick+0x70>)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	e007      	b.n	8004a16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
 8004a0a:	e004      	b.n	8004a16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
 8004a10:	e001      	b.n	8004a16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000010 	.word	0x20000010
 8004a24:	20000008 	.word	0x20000008
 8004a28:	2000000c 	.word	0x2000000c

08004a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a30:	4b05      	ldr	r3, [pc, #20]	@ (8004a48 <HAL_IncTick+0x1c>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	4b05      	ldr	r3, [pc, #20]	@ (8004a4c <HAL_IncTick+0x20>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4413      	add	r3, r2
 8004a3a:	4a03      	ldr	r2, [pc, #12]	@ (8004a48 <HAL_IncTick+0x1c>)
 8004a3c:	6013      	str	r3, [r2, #0]
}
 8004a3e:	bf00      	nop
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	200013f0 	.word	0x200013f0
 8004a4c:	20000010 	.word	0x20000010

08004a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  return uwTick;
 8004a54:	4b03      	ldr	r3, [pc, #12]	@ (8004a64 <HAL_GetTick+0x14>)
 8004a56:	681b      	ldr	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	200013f0 	.word	0x200013f0

08004a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a70:	f7ff ffee 	bl	8004a50 <HAL_GetTick>
 8004a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d004      	beq.n	8004a8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a82:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <HAL_Delay+0x40>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a8c:	bf00      	nop
 8004a8e:	f7ff ffdf 	bl	8004a50 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d8f7      	bhi.n	8004a8e <HAL_Delay+0x26>
  {
  }
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000010 	.word	0x20000010

08004aac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	609a      	str	r2, [r3, #8]
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	609a      	str	r2, [r3, #8]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3360      	adds	r3, #96	@ 0x60
 8004b26:	461a      	mov	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	4b08      	ldr	r3, [pc, #32]	@ (8004b58 <LL_ADC_SetOffset+0x44>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	03fff000 	.word	0x03fff000

08004b5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3360      	adds	r3, #96	@ 0x60
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3360      	adds	r3, #96	@ 0x60
 8004b98:	461a      	mov	r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	431a      	orrs	r2, r3
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b087      	sub	sp, #28
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3360      	adds	r3, #96	@ 0x60
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004be8:	bf00      	nop
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3360      	adds	r3, #96	@ 0x60
 8004c04:	461a      	mov	r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	615a      	str	r2, [r3, #20]
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3330      	adds	r3, #48	@ 0x30
 8004c60:	461a      	mov	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	0a1b      	lsrs	r3, r3, #8
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	4413      	add	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	211f      	movs	r1, #31
 8004c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c80:	43db      	mvns	r3, r3
 8004c82:	401a      	ands	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	0e9b      	lsrs	r3, r3, #26
 8004c88:	f003 011f 	and.w	r1, r3, #31
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	fa01 f303 	lsl.w	r3, r1, r3
 8004c96:	431a      	orrs	r2, r3
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004c9c:	bf00      	nop
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3314      	adds	r3, #20
 8004cb8:	461a      	mov	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	0e5b      	lsrs	r3, r3, #25
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	4413      	add	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	0d1b      	lsrs	r3, r3, #20
 8004cd0:	f003 031f 	and.w	r3, r3, #31
 8004cd4:	2107      	movs	r1, #7
 8004cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	401a      	ands	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	0d1b      	lsrs	r3, r3, #20
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cec:	431a      	orrs	r2, r3
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
	...

08004d00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	401a      	ands	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f003 0318 	and.w	r3, r3, #24
 8004d22:	4908      	ldr	r1, [pc, #32]	@ (8004d44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004d24:	40d9      	lsrs	r1, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	400b      	ands	r3, r1
 8004d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	0007ffff 	.word	0x0007ffff

08004d48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004d58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6093      	str	r3, [r2, #8]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d80:	d101      	bne.n	8004d86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004da4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004da8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dd0:	d101      	bne.n	8004dd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <LL_ADC_IsEnabled+0x18>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <LL_ADC_IsEnabled+0x1a>
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d101      	bne.n	8004e22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d101      	bne.n	8004e48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
	...

08004e58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e58:	b590      	push	{r4, r7, lr}
 8004e5a:	b089      	sub	sp, #36	@ 0x24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e1a9      	b.n	80051c6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d109      	bne.n	8004e94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7fb fe3f 	bl	8000b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff ff67 	bl	8004d6c <LL_ADC_IsDeepPowerDownEnabled>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff ff4d 	bl	8004d48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff ff82 	bl	8004dbc <LL_ADC_IsInternalRegulatorEnabled>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d115      	bne.n	8004eea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff ff66 	bl	8004d94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ec8:	4b9c      	ldr	r3, [pc, #624]	@ (800513c <HAL_ADC_Init+0x2e4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	099b      	lsrs	r3, r3, #6
 8004ece:	4a9c      	ldr	r2, [pc, #624]	@ (8005140 <HAL_ADC_Init+0x2e8>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	099b      	lsrs	r3, r3, #6
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004edc:	e002      	b.n	8004ee4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f9      	bne.n	8004ede <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff ff64 	bl	8004dbc <LL_ADC_IsInternalRegulatorEnabled>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10d      	bne.n	8004f16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efe:	f043 0210 	orr.w	r2, r3, #16
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f0a:	f043 0201 	orr.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff ff75 	bl	8004e0a <LL_ADC_REG_IsConversionOngoing>
 8004f20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f040 8142 	bne.w	80051b4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f040 813e 	bne.w	80051b4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f3c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004f40:	f043 0202 	orr.w	r2, r3, #2
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff ff49 	bl	8004de4 <LL_ADC_IsEnabled>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d141      	bne.n	8004fdc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f60:	d004      	beq.n	8004f6c <HAL_ADC_Init+0x114>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a77      	ldr	r2, [pc, #476]	@ (8005144 <HAL_ADC_Init+0x2ec>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d10f      	bne.n	8004f8c <HAL_ADC_Init+0x134>
 8004f6c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f70:	f7ff ff38 	bl	8004de4 <LL_ADC_IsEnabled>
 8004f74:	4604      	mov	r4, r0
 8004f76:	4873      	ldr	r0, [pc, #460]	@ (8005144 <HAL_ADC_Init+0x2ec>)
 8004f78:	f7ff ff34 	bl	8004de4 <LL_ADC_IsEnabled>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4323      	orrs	r3, r4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	e012      	b.n	8004fb2 <HAL_ADC_Init+0x15a>
 8004f8c:	486e      	ldr	r0, [pc, #440]	@ (8005148 <HAL_ADC_Init+0x2f0>)
 8004f8e:	f7ff ff29 	bl	8004de4 <LL_ADC_IsEnabled>
 8004f92:	4604      	mov	r4, r0
 8004f94:	486d      	ldr	r0, [pc, #436]	@ (800514c <HAL_ADC_Init+0x2f4>)
 8004f96:	f7ff ff25 	bl	8004de4 <LL_ADC_IsEnabled>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	431c      	orrs	r4, r3
 8004f9e:	486c      	ldr	r0, [pc, #432]	@ (8005150 <HAL_ADC_Init+0x2f8>)
 8004fa0:	f7ff ff20 	bl	8004de4 <LL_ADC_IsEnabled>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	4323      	orrs	r3, r4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d012      	beq.n	8004fdc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fbe:	d004      	beq.n	8004fca <HAL_ADC_Init+0x172>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a5f      	ldr	r2, [pc, #380]	@ (8005144 <HAL_ADC_Init+0x2ec>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d101      	bne.n	8004fce <HAL_ADC_Init+0x176>
 8004fca:	4a62      	ldr	r2, [pc, #392]	@ (8005154 <HAL_ADC_Init+0x2fc>)
 8004fcc:	e000      	b.n	8004fd0 <HAL_ADC_Init+0x178>
 8004fce:	4a62      	ldr	r2, [pc, #392]	@ (8005158 <HAL_ADC_Init+0x300>)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	f7ff fd68 	bl	8004aac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	7f5b      	ldrb	r3, [r3, #29]
 8004fe0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004fe6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004fec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004ff2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ffa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005006:	2b01      	cmp	r3, #1
 8005008:	d106      	bne.n	8005018 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500e:	3b01      	subs	r3, #1
 8005010:	045b      	lsls	r3, r3, #17
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4313      	orrs	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d009      	beq.n	8005034 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4313      	orrs	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	4b48      	ldr	r3, [pc, #288]	@ (800515c <HAL_ADC_Init+0x304>)
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	69b9      	ldr	r1, [r7, #24]
 8005044:	430b      	orrs	r3, r1
 8005046:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fee4 	bl	8004e30 <LL_ADC_INJ_IsConversionOngoing>
 8005068:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d17f      	bne.n	8005170 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d17c      	bne.n	8005170 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800507a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005082:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005084:	4313      	orrs	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005092:	f023 0302 	bic.w	r3, r3, #2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	69b9      	ldr	r1, [r7, #24]
 800509c:	430b      	orrs	r3, r1
 800509e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d017      	beq.n	80050d8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80050b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80050c0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80050c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6911      	ldr	r1, [r2, #16]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	430b      	orrs	r3, r1
 80050d2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80050d6:	e013      	b.n	8005100 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80050e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80050f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80050fc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005106:	2b01      	cmp	r3, #1
 8005108:	d12a      	bne.n	8005160 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005114:	f023 0304 	bic.w	r3, r3, #4
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005120:	4311      	orrs	r1, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005126:	4311      	orrs	r1, r2
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800512c:	430a      	orrs	r2, r1
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0201 	orr.w	r2, r2, #1
 8005138:	611a      	str	r2, [r3, #16]
 800513a:	e019      	b.n	8005170 <HAL_ADC_Init+0x318>
 800513c:	20000008 	.word	0x20000008
 8005140:	053e2d63 	.word	0x053e2d63
 8005144:	50000100 	.word	0x50000100
 8005148:	50000400 	.word	0x50000400
 800514c:	50000500 	.word	0x50000500
 8005150:	50000600 	.word	0x50000600
 8005154:	50000300 	.word	0x50000300
 8005158:	50000700 	.word	0x50000700
 800515c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d10c      	bne.n	8005192 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517e:	f023 010f 	bic.w	r1, r3, #15
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	1e5a      	subs	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005190:	e007      	b.n	80051a2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 020f 	bic.w	r2, r2, #15
 80051a0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	f043 0201 	orr.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051b2:	e007      	b.n	80051c4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b8:	f043 0210 	orr.w	r2, r3, #16
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80051c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3724      	adds	r7, #36	@ 0x24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd90      	pop	{r4, r7, pc}
 80051ce:	bf00      	nop

080051d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b0b6      	sub	sp, #216	@ 0xd8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d102      	bne.n	80051f4 <HAL_ADC_ConfigChannel+0x24>
 80051ee:	2302      	movs	r3, #2
 80051f0:	f000 bc13 	b.w	8005a1a <HAL_ADC_ConfigChannel+0x84a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff fe02 	bl	8004e0a <LL_ADC_REG_IsConversionOngoing>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	f040 83f3 	bne.w	80059f4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6859      	ldr	r1, [r3, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	f7ff fd18 	bl	8004c50 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff fdf0 	bl	8004e0a <LL_ADC_REG_IsConversionOngoing>
 800522a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff fdfc 	bl	8004e30 <LL_ADC_INJ_IsConversionOngoing>
 8005238:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800523c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005240:	2b00      	cmp	r3, #0
 8005242:	f040 81d9 	bne.w	80055f8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005246:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800524a:	2b00      	cmp	r3, #0
 800524c:	f040 81d4 	bne.w	80055f8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005258:	d10f      	bne.n	800527a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2200      	movs	r2, #0
 8005264:	4619      	mov	r1, r3
 8005266:	f7ff fd1f 	bl	8004ca8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff fcd9 	bl	8004c2a <LL_ADC_SetSamplingTimeCommonConfig>
 8005278:	e00e      	b.n	8005298 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6819      	ldr	r1, [r3, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	461a      	mov	r2, r3
 8005288:	f7ff fd0e 	bl	8004ca8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2100      	movs	r1, #0
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff fcc9 	bl	8004c2a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	695a      	ldr	r2, [r3, #20]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	08db      	lsrs	r3, r3, #3
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d022      	beq.n	8005300 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	6919      	ldr	r1, [r3, #16]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052ca:	f7ff fc23 	bl	8004b14 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6919      	ldr	r1, [r3, #16]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	461a      	mov	r2, r3
 80052dc:	f7ff fc6f 	bl	8004bbe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d102      	bne.n	80052f6 <HAL_ADC_ConfigChannel+0x126>
 80052f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052f4:	e000      	b.n	80052f8 <HAL_ADC_ConfigChannel+0x128>
 80052f6:	2300      	movs	r3, #0
 80052f8:	461a      	mov	r2, r3
 80052fa:	f7ff fc7b 	bl	8004bf4 <LL_ADC_SetOffsetSaturation>
 80052fe:	e17b      	b.n	80055f8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2100      	movs	r1, #0
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff fc28 	bl	8004b5c <LL_ADC_GetOffsetChannel>
 800530c:	4603      	mov	r3, r0
 800530e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10a      	bne.n	800532c <HAL_ADC_ConfigChannel+0x15c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2100      	movs	r1, #0
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fc1d 	bl	8004b5c <LL_ADC_GetOffsetChannel>
 8005322:	4603      	mov	r3, r0
 8005324:	0e9b      	lsrs	r3, r3, #26
 8005326:	f003 021f 	and.w	r2, r3, #31
 800532a:	e01e      	b.n	800536a <HAL_ADC_ConfigChannel+0x19a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2100      	movs	r1, #0
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff fc12 	bl	8004b5c <LL_ADC_GetOffsetChannel>
 8005338:	4603      	mov	r3, r0
 800533a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005342:	fa93 f3a3 	rbit	r3, r3
 8005346:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800534a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800534e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005352:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800535a:	2320      	movs	r3, #32
 800535c:	e004      	b.n	8005368 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800535e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005362:	fab3 f383 	clz	r3, r3
 8005366:	b2db      	uxtb	r3, r3
 8005368:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005372:	2b00      	cmp	r3, #0
 8005374:	d105      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x1b2>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	0e9b      	lsrs	r3, r3, #26
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	e018      	b.n	80053b4 <HAL_ADC_ConfigChannel+0x1e4>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800538e:	fa93 f3a3 	rbit	r3, r3
 8005392:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800539a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800539e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80053a6:	2320      	movs	r3, #32
 80053a8:	e004      	b.n	80053b4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80053aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053ae:	fab3 f383 	clz	r3, r3
 80053b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d106      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2200      	movs	r2, #0
 80053be:	2100      	movs	r1, #0
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff fbe1 	bl	8004b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2101      	movs	r1, #1
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff fbc5 	bl	8004b5c <LL_ADC_GetOffsetChannel>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <HAL_ADC_ConfigChannel+0x222>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2101      	movs	r1, #1
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fbba 	bl	8004b5c <LL_ADC_GetOffsetChannel>
 80053e8:	4603      	mov	r3, r0
 80053ea:	0e9b      	lsrs	r3, r3, #26
 80053ec:	f003 021f 	and.w	r2, r3, #31
 80053f0:	e01e      	b.n	8005430 <HAL_ADC_ConfigChannel+0x260>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2101      	movs	r1, #1
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff fbaf 	bl	8004b5c <LL_ADC_GetOffsetChannel>
 80053fe:	4603      	mov	r3, r0
 8005400:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005404:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005408:	fa93 f3a3 	rbit	r3, r3
 800540c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005410:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005414:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005418:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005420:	2320      	movs	r3, #32
 8005422:	e004      	b.n	800542e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005424:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005428:	fab3 f383 	clz	r3, r3
 800542c:	b2db      	uxtb	r3, r3
 800542e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005438:	2b00      	cmp	r3, #0
 800543a:	d105      	bne.n	8005448 <HAL_ADC_ConfigChannel+0x278>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	0e9b      	lsrs	r3, r3, #26
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	e018      	b.n	800547a <HAL_ADC_ConfigChannel+0x2aa>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005450:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005454:	fa93 f3a3 	rbit	r3, r3
 8005458:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800545c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005460:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005464:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800546c:	2320      	movs	r3, #32
 800546e:	e004      	b.n	800547a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005470:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005474:	fab3 f383 	clz	r3, r3
 8005478:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800547a:	429a      	cmp	r2, r3
 800547c:	d106      	bne.n	800548c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	2101      	movs	r1, #1
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff fb7e 	bl	8004b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2102      	movs	r1, #2
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff fb62 	bl	8004b5c <LL_ADC_GetOffsetChannel>
 8005498:	4603      	mov	r3, r0
 800549a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x2e8>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2102      	movs	r1, #2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fb57 	bl	8004b5c <LL_ADC_GetOffsetChannel>
 80054ae:	4603      	mov	r3, r0
 80054b0:	0e9b      	lsrs	r3, r3, #26
 80054b2:	f003 021f 	and.w	r2, r3, #31
 80054b6:	e01e      	b.n	80054f6 <HAL_ADC_ConfigChannel+0x326>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2102      	movs	r1, #2
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fb4c 	bl	8004b5c <LL_ADC_GetOffsetChannel>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054ce:	fa93 f3a3 	rbit	r3, r3
 80054d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80054d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80054de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80054e6:	2320      	movs	r3, #32
 80054e8:	e004      	b.n	80054f4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80054ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80054ee:	fab3 f383 	clz	r3, r3
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d105      	bne.n	800550e <HAL_ADC_ConfigChannel+0x33e>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	0e9b      	lsrs	r3, r3, #26
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	e016      	b.n	800553c <HAL_ADC_ConfigChannel+0x36c>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005516:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800551a:	fa93 f3a3 	rbit	r3, r3
 800551e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005520:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005522:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005526:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800552e:	2320      	movs	r3, #32
 8005530:	e004      	b.n	800553c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005532:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005536:	fab3 f383 	clz	r3, r3
 800553a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800553c:	429a      	cmp	r2, r3
 800553e:	d106      	bne.n	800554e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2200      	movs	r2, #0
 8005546:	2102      	movs	r1, #2
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff fb1d 	bl	8004b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2103      	movs	r1, #3
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff fb01 	bl	8004b5c <LL_ADC_GetOffsetChannel>
 800555a:	4603      	mov	r3, r0
 800555c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <HAL_ADC_ConfigChannel+0x3aa>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2103      	movs	r1, #3
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff faf6 	bl	8004b5c <LL_ADC_GetOffsetChannel>
 8005570:	4603      	mov	r3, r0
 8005572:	0e9b      	lsrs	r3, r3, #26
 8005574:	f003 021f 	and.w	r2, r3, #31
 8005578:	e017      	b.n	80055aa <HAL_ADC_ConfigChannel+0x3da>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2103      	movs	r1, #3
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff faeb 	bl	8004b5c <LL_ADC_GetOffsetChannel>
 8005586:	4603      	mov	r3, r0
 8005588:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800558c:	fa93 f3a3 	rbit	r3, r3
 8005590:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005592:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005594:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005596:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800559c:	2320      	movs	r3, #32
 800559e:	e003      	b.n	80055a8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80055a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055a2:	fab3 f383 	clz	r3, r3
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d105      	bne.n	80055c2 <HAL_ADC_ConfigChannel+0x3f2>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	0e9b      	lsrs	r3, r3, #26
 80055bc:	f003 031f 	and.w	r3, r3, #31
 80055c0:	e011      	b.n	80055e6 <HAL_ADC_ConfigChannel+0x416>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055ca:	fa93 f3a3 	rbit	r3, r3
 80055ce:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80055d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80055d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80055da:	2320      	movs	r3, #32
 80055dc:	e003      	b.n	80055e6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80055de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055e0:	fab3 f383 	clz	r3, r3
 80055e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d106      	bne.n	80055f8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2200      	movs	r2, #0
 80055f0:	2103      	movs	r1, #3
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fac8 	bl	8004b88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff fbf1 	bl	8004de4 <LL_ADC_IsEnabled>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	f040 813d 	bne.w	8005884 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	461a      	mov	r2, r3
 8005618:	f7ff fb72 	bl	8004d00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4aa2      	ldr	r2, [pc, #648]	@ (80058ac <HAL_ADC_ConfigChannel+0x6dc>)
 8005622:	4293      	cmp	r3, r2
 8005624:	f040 812e 	bne.w	8005884 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <HAL_ADC_ConfigChannel+0x480>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	0e9b      	lsrs	r3, r3, #26
 800563e:	3301      	adds	r3, #1
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	2b09      	cmp	r3, #9
 8005646:	bf94      	ite	ls
 8005648:	2301      	movls	r3, #1
 800564a:	2300      	movhi	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	e019      	b.n	8005684 <HAL_ADC_ConfigChannel+0x4b4>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005658:	fa93 f3a3 	rbit	r3, r3
 800565c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800565e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005660:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005662:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005668:	2320      	movs	r3, #32
 800566a:	e003      	b.n	8005674 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800566c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800566e:	fab3 f383 	clz	r3, r3
 8005672:	b2db      	uxtb	r3, r3
 8005674:	3301      	adds	r3, #1
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	2b09      	cmp	r3, #9
 800567c:	bf94      	ite	ls
 800567e:	2301      	movls	r3, #1
 8005680:	2300      	movhi	r3, #0
 8005682:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005684:	2b00      	cmp	r3, #0
 8005686:	d079      	beq.n	800577c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005690:	2b00      	cmp	r3, #0
 8005692:	d107      	bne.n	80056a4 <HAL_ADC_ConfigChannel+0x4d4>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	0e9b      	lsrs	r3, r3, #26
 800569a:	3301      	adds	r3, #1
 800569c:	069b      	lsls	r3, r3, #26
 800569e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056a2:	e015      	b.n	80056d0 <HAL_ADC_ConfigChannel+0x500>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056ac:	fa93 f3a3 	rbit	r3, r3
 80056b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80056b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80056b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80056bc:	2320      	movs	r3, #32
 80056be:	e003      	b.n	80056c8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80056c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c2:	fab3 f383 	clz	r3, r3
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	3301      	adds	r3, #1
 80056ca:	069b      	lsls	r3, r3, #26
 80056cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d109      	bne.n	80056f0 <HAL_ADC_ConfigChannel+0x520>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	0e9b      	lsrs	r3, r3, #26
 80056e2:	3301      	adds	r3, #1
 80056e4:	f003 031f 	and.w	r3, r3, #31
 80056e8:	2101      	movs	r1, #1
 80056ea:	fa01 f303 	lsl.w	r3, r1, r3
 80056ee:	e017      	b.n	8005720 <HAL_ADC_ConfigChannel+0x550>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056f8:	fa93 f3a3 	rbit	r3, r3
 80056fc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80056fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005700:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005708:	2320      	movs	r3, #32
 800570a:	e003      	b.n	8005714 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800570c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800570e:	fab3 f383 	clz	r3, r3
 8005712:	b2db      	uxtb	r3, r3
 8005714:	3301      	adds	r3, #1
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2101      	movs	r1, #1
 800571c:	fa01 f303 	lsl.w	r3, r1, r3
 8005720:	ea42 0103 	orr.w	r1, r2, r3
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10a      	bne.n	8005746 <HAL_ADC_ConfigChannel+0x576>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	0e9b      	lsrs	r3, r3, #26
 8005736:	3301      	adds	r3, #1
 8005738:	f003 021f 	and.w	r2, r3, #31
 800573c:	4613      	mov	r3, r2
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4413      	add	r3, r2
 8005742:	051b      	lsls	r3, r3, #20
 8005744:	e018      	b.n	8005778 <HAL_ADC_ConfigChannel+0x5a8>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574e:	fa93 f3a3 	rbit	r3, r3
 8005752:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800575e:	2320      	movs	r3, #32
 8005760:	e003      	b.n	800576a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005764:	fab3 f383 	clz	r3, r3
 8005768:	b2db      	uxtb	r3, r3
 800576a:	3301      	adds	r3, #1
 800576c:	f003 021f 	and.w	r2, r3, #31
 8005770:	4613      	mov	r3, r2
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	4413      	add	r3, r2
 8005776:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005778:	430b      	orrs	r3, r1
 800577a:	e07e      	b.n	800587a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005784:	2b00      	cmp	r3, #0
 8005786:	d107      	bne.n	8005798 <HAL_ADC_ConfigChannel+0x5c8>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	0e9b      	lsrs	r3, r3, #26
 800578e:	3301      	adds	r3, #1
 8005790:	069b      	lsls	r3, r3, #26
 8005792:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005796:	e015      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x5f4>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a0:	fa93 f3a3 	rbit	r3, r3
 80057a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80057a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80057b0:	2320      	movs	r3, #32
 80057b2:	e003      	b.n	80057bc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80057b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b6:	fab3 f383 	clz	r3, r3
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	3301      	adds	r3, #1
 80057be:	069b      	lsls	r3, r3, #26
 80057c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <HAL_ADC_ConfigChannel+0x614>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	0e9b      	lsrs	r3, r3, #26
 80057d6:	3301      	adds	r3, #1
 80057d8:	f003 031f 	and.w	r3, r3, #31
 80057dc:	2101      	movs	r1, #1
 80057de:	fa01 f303 	lsl.w	r3, r1, r3
 80057e2:	e017      	b.n	8005814 <HAL_ADC_ConfigChannel+0x644>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	fa93 f3a3 	rbit	r3, r3
 80057f0:	61fb      	str	r3, [r7, #28]
  return result;
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80057fc:	2320      	movs	r3, #32
 80057fe:	e003      	b.n	8005808 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	fab3 f383 	clz	r3, r3
 8005806:	b2db      	uxtb	r3, r3
 8005808:	3301      	adds	r3, #1
 800580a:	f003 031f 	and.w	r3, r3, #31
 800580e:	2101      	movs	r1, #1
 8005810:	fa01 f303 	lsl.w	r3, r1, r3
 8005814:	ea42 0103 	orr.w	r1, r2, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10d      	bne.n	8005840 <HAL_ADC_ConfigChannel+0x670>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	0e9b      	lsrs	r3, r3, #26
 800582a:	3301      	adds	r3, #1
 800582c:	f003 021f 	and.w	r2, r3, #31
 8005830:	4613      	mov	r3, r2
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	4413      	add	r3, r2
 8005836:	3b1e      	subs	r3, #30
 8005838:	051b      	lsls	r3, r3, #20
 800583a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800583e:	e01b      	b.n	8005878 <HAL_ADC_ConfigChannel+0x6a8>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	fa93 f3a3 	rbit	r3, r3
 800584c:	613b      	str	r3, [r7, #16]
  return result;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005858:	2320      	movs	r3, #32
 800585a:	e003      	b.n	8005864 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	3301      	adds	r3, #1
 8005866:	f003 021f 	and.w	r2, r3, #31
 800586a:	4613      	mov	r3, r2
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	4413      	add	r3, r2
 8005870:	3b1e      	subs	r3, #30
 8005872:	051b      	lsls	r3, r3, #20
 8005874:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005878:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800587e:	4619      	mov	r1, r3
 8005880:	f7ff fa12 	bl	8004ca8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <HAL_ADC_ConfigChannel+0x6e0>)
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 80be 	beq.w	8005a0e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800589a:	d004      	beq.n	80058a6 <HAL_ADC_ConfigChannel+0x6d6>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a04      	ldr	r2, [pc, #16]	@ (80058b4 <HAL_ADC_ConfigChannel+0x6e4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d10a      	bne.n	80058bc <HAL_ADC_ConfigChannel+0x6ec>
 80058a6:	4b04      	ldr	r3, [pc, #16]	@ (80058b8 <HAL_ADC_ConfigChannel+0x6e8>)
 80058a8:	e009      	b.n	80058be <HAL_ADC_ConfigChannel+0x6ee>
 80058aa:	bf00      	nop
 80058ac:	407f0000 	.word	0x407f0000
 80058b0:	80080000 	.word	0x80080000
 80058b4:	50000100 	.word	0x50000100
 80058b8:	50000300 	.word	0x50000300
 80058bc:	4b59      	ldr	r3, [pc, #356]	@ (8005a24 <HAL_ADC_ConfigChannel+0x854>)
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff f91a 	bl	8004af8 <LL_ADC_GetCommonPathInternalCh>
 80058c4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a56      	ldr	r2, [pc, #344]	@ (8005a28 <HAL_ADC_ConfigChannel+0x858>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d004      	beq.n	80058dc <HAL_ADC_ConfigChannel+0x70c>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a55      	ldr	r2, [pc, #340]	@ (8005a2c <HAL_ADC_ConfigChannel+0x85c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d13a      	bne.n	8005952 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80058dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d134      	bne.n	8005952 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058f0:	d005      	beq.n	80058fe <HAL_ADC_ConfigChannel+0x72e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a4e      	ldr	r2, [pc, #312]	@ (8005a30 <HAL_ADC_ConfigChannel+0x860>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	f040 8085 	bne.w	8005a08 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005906:	d004      	beq.n	8005912 <HAL_ADC_ConfigChannel+0x742>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a49      	ldr	r2, [pc, #292]	@ (8005a34 <HAL_ADC_ConfigChannel+0x864>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d101      	bne.n	8005916 <HAL_ADC_ConfigChannel+0x746>
 8005912:	4a49      	ldr	r2, [pc, #292]	@ (8005a38 <HAL_ADC_ConfigChannel+0x868>)
 8005914:	e000      	b.n	8005918 <HAL_ADC_ConfigChannel+0x748>
 8005916:	4a43      	ldr	r2, [pc, #268]	@ (8005a24 <HAL_ADC_ConfigChannel+0x854>)
 8005918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800591c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f7ff f8d5 	bl	8004ad2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005928:	4b44      	ldr	r3, [pc, #272]	@ (8005a3c <HAL_ADC_ConfigChannel+0x86c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	099b      	lsrs	r3, r3, #6
 800592e:	4a44      	ldr	r2, [pc, #272]	@ (8005a40 <HAL_ADC_ConfigChannel+0x870>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	099b      	lsrs	r3, r3, #6
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	4613      	mov	r3, r2
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005942:	e002      	b.n	800594a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3b01      	subs	r3, #1
 8005948:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1f9      	bne.n	8005944 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005950:	e05a      	b.n	8005a08 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a3b      	ldr	r2, [pc, #236]	@ (8005a44 <HAL_ADC_ConfigChannel+0x874>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d125      	bne.n	80059a8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800595c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005960:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d11f      	bne.n	80059a8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a31      	ldr	r2, [pc, #196]	@ (8005a34 <HAL_ADC_ConfigChannel+0x864>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d104      	bne.n	800597c <HAL_ADC_ConfigChannel+0x7ac>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a34      	ldr	r2, [pc, #208]	@ (8005a48 <HAL_ADC_ConfigChannel+0x878>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d047      	beq.n	8005a0c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005984:	d004      	beq.n	8005990 <HAL_ADC_ConfigChannel+0x7c0>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a2a      	ldr	r2, [pc, #168]	@ (8005a34 <HAL_ADC_ConfigChannel+0x864>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d101      	bne.n	8005994 <HAL_ADC_ConfigChannel+0x7c4>
 8005990:	4a29      	ldr	r2, [pc, #164]	@ (8005a38 <HAL_ADC_ConfigChannel+0x868>)
 8005992:	e000      	b.n	8005996 <HAL_ADC_ConfigChannel+0x7c6>
 8005994:	4a23      	ldr	r2, [pc, #140]	@ (8005a24 <HAL_ADC_ConfigChannel+0x854>)
 8005996:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800599a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800599e:	4619      	mov	r1, r3
 80059a0:	4610      	mov	r0, r2
 80059a2:	f7ff f896 	bl	8004ad2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059a6:	e031      	b.n	8005a0c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a27      	ldr	r2, [pc, #156]	@ (8005a4c <HAL_ADC_ConfigChannel+0x87c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d12d      	bne.n	8005a0e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80059b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d127      	bne.n	8005a0e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a34 <HAL_ADC_ConfigChannel+0x864>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d022      	beq.n	8005a0e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059d0:	d004      	beq.n	80059dc <HAL_ADC_ConfigChannel+0x80c>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a17      	ldr	r2, [pc, #92]	@ (8005a34 <HAL_ADC_ConfigChannel+0x864>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d101      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x810>
 80059dc:	4a16      	ldr	r2, [pc, #88]	@ (8005a38 <HAL_ADC_ConfigChannel+0x868>)
 80059de:	e000      	b.n	80059e2 <HAL_ADC_ConfigChannel+0x812>
 80059e0:	4a10      	ldr	r2, [pc, #64]	@ (8005a24 <HAL_ADC_ConfigChannel+0x854>)
 80059e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80059ea:	4619      	mov	r1, r3
 80059ec:	4610      	mov	r0, r2
 80059ee:	f7ff f870 	bl	8004ad2 <LL_ADC_SetCommonPathInternalCh>
 80059f2:	e00c      	b.n	8005a0e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f8:	f043 0220 	orr.w	r2, r3, #32
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005a06:	e002      	b.n	8005a0e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a08:	bf00      	nop
 8005a0a:	e000      	b.n	8005a0e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a16:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	37d8      	adds	r7, #216	@ 0xd8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	50000700 	.word	0x50000700
 8005a28:	c3210000 	.word	0xc3210000
 8005a2c:	90c00010 	.word	0x90c00010
 8005a30:	50000600 	.word	0x50000600
 8005a34:	50000100 	.word	0x50000100
 8005a38:	50000300 	.word	0x50000300
 8005a3c:	20000008 	.word	0x20000008
 8005a40:	053e2d63 	.word	0x053e2d63
 8005a44:	c7520000 	.word	0xc7520000
 8005a48:	50000500 	.word	0x50000500
 8005a4c:	cb840000 	.word	0xcb840000

08005a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a60:	4b0c      	ldr	r3, [pc, #48]	@ (8005a94 <__NVIC_SetPriorityGrouping+0x44>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a82:	4a04      	ldr	r2, [pc, #16]	@ (8005a94 <__NVIC_SetPriorityGrouping+0x44>)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	60d3      	str	r3, [r2, #12]
}
 8005a88:	bf00      	nop
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	e000ed00 	.word	0xe000ed00

08005a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a9c:	4b04      	ldr	r3, [pc, #16]	@ (8005ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	0a1b      	lsrs	r3, r3, #8
 8005aa2:	f003 0307 	and.w	r3, r3, #7
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	e000ed00 	.word	0xe000ed00

08005ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	db0b      	blt.n	8005ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	f003 021f 	and.w	r2, r3, #31
 8005acc:	4907      	ldr	r1, [pc, #28]	@ (8005aec <__NVIC_EnableIRQ+0x38>)
 8005ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	2001      	movs	r0, #1
 8005ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8005ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	e000e100 	.word	0xe000e100

08005af0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	db12      	blt.n	8005b28 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b02:	79fb      	ldrb	r3, [r7, #7]
 8005b04:	f003 021f 	and.w	r2, r3, #31
 8005b08:	490a      	ldr	r1, [pc, #40]	@ (8005b34 <__NVIC_DisableIRQ+0x44>)
 8005b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	2001      	movs	r0, #1
 8005b12:	fa00 f202 	lsl.w	r2, r0, r2
 8005b16:	3320      	adds	r3, #32
 8005b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b1c:	f3bf 8f4f 	dsb	sy
}
 8005b20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005b22:	f3bf 8f6f 	isb	sy
}
 8005b26:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	e000e100 	.word	0xe000e100

08005b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	6039      	str	r1, [r7, #0]
 8005b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	db0a      	blt.n	8005b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	490c      	ldr	r1, [pc, #48]	@ (8005b84 <__NVIC_SetPriority+0x4c>)
 8005b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b56:	0112      	lsls	r2, r2, #4
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b60:	e00a      	b.n	8005b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	4908      	ldr	r1, [pc, #32]	@ (8005b88 <__NVIC_SetPriority+0x50>)
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	3b04      	subs	r3, #4
 8005b70:	0112      	lsls	r2, r2, #4
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	440b      	add	r3, r1
 8005b76:	761a      	strb	r2, [r3, #24]
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	e000e100 	.word	0xe000e100
 8005b88:	e000ed00 	.word	0xe000ed00

08005b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b089      	sub	sp, #36	@ 0x24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	f1c3 0307 	rsb	r3, r3, #7
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	bf28      	it	cs
 8005baa:	2304      	movcs	r3, #4
 8005bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	2b06      	cmp	r3, #6
 8005bb4:	d902      	bls.n	8005bbc <NVIC_EncodePriority+0x30>
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3b03      	subs	r3, #3
 8005bba:	e000      	b.n	8005bbe <NVIC_EncodePriority+0x32>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	43da      	mvns	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	401a      	ands	r2, r3
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	43d9      	mvns	r1, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005be4:	4313      	orrs	r3, r2
         );
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3724      	adds	r7, #36	@ 0x24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c04:	d301      	bcc.n	8005c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c06:	2301      	movs	r3, #1
 8005c08:	e00f      	b.n	8005c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c34 <SysTick_Config+0x40>)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c12:	210f      	movs	r1, #15
 8005c14:	f04f 30ff 	mov.w	r0, #4294967295
 8005c18:	f7ff ff8e 	bl	8005b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c1c:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <SysTick_Config+0x40>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c22:	4b04      	ldr	r3, [pc, #16]	@ (8005c34 <SysTick_Config+0x40>)
 8005c24:	2207      	movs	r2, #7
 8005c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	e000e010 	.word	0xe000e010

08005c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7ff ff05 	bl	8005a50 <__NVIC_SetPriorityGrouping>
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b086      	sub	sp, #24
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	4603      	mov	r3, r0
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
 8005c5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c5c:	f7ff ff1c 	bl	8005a98 <__NVIC_GetPriorityGrouping>
 8005c60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	6978      	ldr	r0, [r7, #20]
 8005c68:	f7ff ff90 	bl	8005b8c <NVIC_EncodePriority>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff ff5f 	bl	8005b38 <__NVIC_SetPriority>
}
 8005c7a:	bf00      	nop
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b082      	sub	sp, #8
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	4603      	mov	r3, r0
 8005c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff ff0f 	bl	8005ab4 <__NVIC_EnableIRQ>
}
 8005c96:	bf00      	nop
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b082      	sub	sp, #8
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff ff1f 	bl	8005af0 <__NVIC_DisableIRQ>
}
 8005cb2:	bf00      	nop
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b082      	sub	sp, #8
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff ff96 	bl	8005bf4 <SysTick_Config>
 8005cc8:	4603      	mov	r3, r0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ce2:	e15a      	b.n	8005f9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	2101      	movs	r1, #1
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 814c 	beq.w	8005f94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f003 0303 	and.w	r3, r3, #3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d005      	beq.n	8005d14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d130      	bne.n	8005d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	2203      	movs	r2, #3
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	43db      	mvns	r3, r3
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	fa02 f303 	lsl.w	r3, r2, r3
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	43db      	mvns	r3, r3
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4013      	ands	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	091b      	lsrs	r3, r3, #4
 8005d60:	f003 0201 	and.w	r2, r3, #1
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d017      	beq.n	8005db2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	2203      	movs	r2, #3
 8005d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d92:	43db      	mvns	r3, r3
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4013      	ands	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d123      	bne.n	8005e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	08da      	lsrs	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3208      	adds	r2, #8
 8005dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	220f      	movs	r2, #15
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43db      	mvns	r3, r3
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4013      	ands	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	08da      	lsrs	r2, r3, #3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3208      	adds	r2, #8
 8005e00:	6939      	ldr	r1, [r7, #16]
 8005e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	2203      	movs	r2, #3
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	43db      	mvns	r3, r3
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f003 0203 	and.w	r2, r3, #3
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80a6 	beq.w	8005f94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e48:	4b5b      	ldr	r3, [pc, #364]	@ (8005fb8 <HAL_GPIO_Init+0x2e4>)
 8005e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e4c:	4a5a      	ldr	r2, [pc, #360]	@ (8005fb8 <HAL_GPIO_Init+0x2e4>)
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e54:	4b58      	ldr	r3, [pc, #352]	@ (8005fb8 <HAL_GPIO_Init+0x2e4>)
 8005e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	60bb      	str	r3, [r7, #8]
 8005e5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e60:	4a56      	ldr	r2, [pc, #344]	@ (8005fbc <HAL_GPIO_Init+0x2e8>)
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	089b      	lsrs	r3, r3, #2
 8005e66:	3302      	adds	r3, #2
 8005e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f003 0303 	and.w	r3, r3, #3
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	220f      	movs	r2, #15
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4013      	ands	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005e8a:	d01f      	beq.n	8005ecc <HAL_GPIO_Init+0x1f8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a4c      	ldr	r2, [pc, #304]	@ (8005fc0 <HAL_GPIO_Init+0x2ec>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d019      	beq.n	8005ec8 <HAL_GPIO_Init+0x1f4>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a4b      	ldr	r2, [pc, #300]	@ (8005fc4 <HAL_GPIO_Init+0x2f0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d013      	beq.n	8005ec4 <HAL_GPIO_Init+0x1f0>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a4a      	ldr	r2, [pc, #296]	@ (8005fc8 <HAL_GPIO_Init+0x2f4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00d      	beq.n	8005ec0 <HAL_GPIO_Init+0x1ec>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a49      	ldr	r2, [pc, #292]	@ (8005fcc <HAL_GPIO_Init+0x2f8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d007      	beq.n	8005ebc <HAL_GPIO_Init+0x1e8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a48      	ldr	r2, [pc, #288]	@ (8005fd0 <HAL_GPIO_Init+0x2fc>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d101      	bne.n	8005eb8 <HAL_GPIO_Init+0x1e4>
 8005eb4:	2305      	movs	r3, #5
 8005eb6:	e00a      	b.n	8005ece <HAL_GPIO_Init+0x1fa>
 8005eb8:	2306      	movs	r3, #6
 8005eba:	e008      	b.n	8005ece <HAL_GPIO_Init+0x1fa>
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	e006      	b.n	8005ece <HAL_GPIO_Init+0x1fa>
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e004      	b.n	8005ece <HAL_GPIO_Init+0x1fa>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e002      	b.n	8005ece <HAL_GPIO_Init+0x1fa>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <HAL_GPIO_Init+0x1fa>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	f002 0203 	and.w	r2, r2, #3
 8005ed4:	0092      	lsls	r2, r2, #2
 8005ed6:	4093      	lsls	r3, r2
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ede:	4937      	ldr	r1, [pc, #220]	@ (8005fbc <HAL_GPIO_Init+0x2e8>)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	089b      	lsrs	r3, r3, #2
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005eec:	4b39      	ldr	r3, [pc, #228]	@ (8005fd4 <HAL_GPIO_Init+0x300>)
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f10:	4a30      	ldr	r2, [pc, #192]	@ (8005fd4 <HAL_GPIO_Init+0x300>)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f16:	4b2f      	ldr	r3, [pc, #188]	@ (8005fd4 <HAL_GPIO_Init+0x300>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	43db      	mvns	r3, r3
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4013      	ands	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f3a:	4a26      	ldr	r2, [pc, #152]	@ (8005fd4 <HAL_GPIO_Init+0x300>)
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005f40:	4b24      	ldr	r3, [pc, #144]	@ (8005fd4 <HAL_GPIO_Init+0x300>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f64:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd4 <HAL_GPIO_Init+0x300>)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005fd4 <HAL_GPIO_Init+0x300>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	43db      	mvns	r3, r3
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4013      	ands	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f8e:	4a11      	ldr	r2, [pc, #68]	@ (8005fd4 <HAL_GPIO_Init+0x300>)
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	3301      	adds	r3, #1
 8005f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f47f ae9d 	bne.w	8005ce4 <HAL_GPIO_Init+0x10>
  }
}
 8005faa:	bf00      	nop
 8005fac:	bf00      	nop
 8005fae:	371c      	adds	r7, #28
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	40010000 	.word	0x40010000
 8005fc0:	48000400 	.word	0x48000400
 8005fc4:	48000800 	.word	0x48000800
 8005fc8:	48000c00 	.word	0x48000c00
 8005fcc:	48001000 	.word	0x48001000
 8005fd0:	48001400 	.word	0x48001400
 8005fd4:	40010400 	.word	0x40010400

08005fd8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8005fe6:	e0bd      	b.n	8006164 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8005fe8:	2201      	movs	r2, #1
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 80b0 	beq.w	800615e <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8005ffe:	4a60      	ldr	r2, [pc, #384]	@ (8006180 <HAL_GPIO_DeInit+0x1a8>)
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	089b      	lsrs	r3, r3, #2
 8006004:	3302      	adds	r3, #2
 8006006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	220f      	movs	r2, #15
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4013      	ands	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006026:	d01f      	beq.n	8006068 <HAL_GPIO_DeInit+0x90>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a56      	ldr	r2, [pc, #344]	@ (8006184 <HAL_GPIO_DeInit+0x1ac>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d019      	beq.n	8006064 <HAL_GPIO_DeInit+0x8c>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a55      	ldr	r2, [pc, #340]	@ (8006188 <HAL_GPIO_DeInit+0x1b0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d013      	beq.n	8006060 <HAL_GPIO_DeInit+0x88>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a54      	ldr	r2, [pc, #336]	@ (800618c <HAL_GPIO_DeInit+0x1b4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d00d      	beq.n	800605c <HAL_GPIO_DeInit+0x84>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a53      	ldr	r2, [pc, #332]	@ (8006190 <HAL_GPIO_DeInit+0x1b8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d007      	beq.n	8006058 <HAL_GPIO_DeInit+0x80>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a52      	ldr	r2, [pc, #328]	@ (8006194 <HAL_GPIO_DeInit+0x1bc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d101      	bne.n	8006054 <HAL_GPIO_DeInit+0x7c>
 8006050:	2305      	movs	r3, #5
 8006052:	e00a      	b.n	800606a <HAL_GPIO_DeInit+0x92>
 8006054:	2306      	movs	r3, #6
 8006056:	e008      	b.n	800606a <HAL_GPIO_DeInit+0x92>
 8006058:	2304      	movs	r3, #4
 800605a:	e006      	b.n	800606a <HAL_GPIO_DeInit+0x92>
 800605c:	2303      	movs	r3, #3
 800605e:	e004      	b.n	800606a <HAL_GPIO_DeInit+0x92>
 8006060:	2302      	movs	r3, #2
 8006062:	e002      	b.n	800606a <HAL_GPIO_DeInit+0x92>
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <HAL_GPIO_DeInit+0x92>
 8006068:	2300      	movs	r3, #0
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	f002 0203 	and.w	r2, r2, #3
 8006070:	0092      	lsls	r2, r2, #2
 8006072:	4093      	lsls	r3, r2
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	429a      	cmp	r2, r3
 8006078:	d132      	bne.n	80060e0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800607a:	4b47      	ldr	r3, [pc, #284]	@ (8006198 <HAL_GPIO_DeInit+0x1c0>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	43db      	mvns	r3, r3
 8006082:	4945      	ldr	r1, [pc, #276]	@ (8006198 <HAL_GPIO_DeInit+0x1c0>)
 8006084:	4013      	ands	r3, r2
 8006086:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006088:	4b43      	ldr	r3, [pc, #268]	@ (8006198 <HAL_GPIO_DeInit+0x1c0>)
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	43db      	mvns	r3, r3
 8006090:	4941      	ldr	r1, [pc, #260]	@ (8006198 <HAL_GPIO_DeInit+0x1c0>)
 8006092:	4013      	ands	r3, r2
 8006094:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006096:	4b40      	ldr	r3, [pc, #256]	@ (8006198 <HAL_GPIO_DeInit+0x1c0>)
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	43db      	mvns	r3, r3
 800609e:	493e      	ldr	r1, [pc, #248]	@ (8006198 <HAL_GPIO_DeInit+0x1c0>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80060a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006198 <HAL_GPIO_DeInit+0x1c0>)
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	43db      	mvns	r3, r3
 80060ac:	493a      	ldr	r1, [pc, #232]	@ (8006198 <HAL_GPIO_DeInit+0x1c0>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	220f      	movs	r2, #15
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80060c2:	4a2f      	ldr	r2, [pc, #188]	@ (8006180 <HAL_GPIO_DeInit+0x1a8>)
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	089b      	lsrs	r3, r3, #2
 80060c8:	3302      	adds	r3, #2
 80060ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	43da      	mvns	r2, r3
 80060d2:	482b      	ldr	r0, [pc, #172]	@ (8006180 <HAL_GPIO_DeInit+0x1a8>)
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	089b      	lsrs	r3, r3, #2
 80060d8:	400a      	ands	r2, r1
 80060da:	3302      	adds	r3, #2
 80060dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	2103      	movs	r1, #3
 80060ea:	fa01 f303 	lsl.w	r3, r1, r3
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	08da      	lsrs	r2, r3, #3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3208      	adds	r2, #8
 80060fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	220f      	movs	r2, #15
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	43db      	mvns	r3, r3
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	08d2      	lsrs	r2, r2, #3
 8006114:	4019      	ands	r1, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3208      	adds	r2, #8
 800611a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	2103      	movs	r1, #3
 8006128:	fa01 f303 	lsl.w	r3, r1, r3
 800612c:	43db      	mvns	r3, r3
 800612e:	401a      	ands	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	2101      	movs	r1, #1
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	fa01 f303 	lsl.w	r3, r1, r3
 8006140:	43db      	mvns	r3, r3
 8006142:	401a      	ands	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	2103      	movs	r1, #3
 8006152:	fa01 f303 	lsl.w	r3, r1, r3
 8006156:	43db      	mvns	r3, r3
 8006158:	401a      	ands	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	3301      	adds	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	f47f af3b 	bne.w	8005fe8 <HAL_GPIO_DeInit+0x10>
  }
}
 8006172:	bf00      	nop
 8006174:	bf00      	nop
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	40010000 	.word	0x40010000
 8006184:	48000400 	.word	0x48000400
 8006188:	48000800 	.word	0x48000800
 800618c:	48000c00 	.word	0x48000c00
 8006190:	48001000 	.word	0x48001000
 8006194:	48001400 	.word	0x48001400
 8006198:	40010400 	.word	0x40010400

0800619c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	887b      	ldrh	r3, [r7, #2]
 80061ae:	4013      	ands	r3, r2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061b4:	2301      	movs	r3, #1
 80061b6:	73fb      	strb	r3, [r7, #15]
 80061b8:	e001      	b.n	80061be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061ba:	2300      	movs	r3, #0
 80061bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061be:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	807b      	strh	r3, [r7, #2]
 80061d8:	4613      	mov	r3, r2
 80061da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061dc:	787b      	ldrb	r3, [r7, #1]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80061e2:	887a      	ldrh	r2, [r7, #2]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80061e8:	e002      	b.n	80061f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80061ea:	887a      	ldrh	r2, [r7, #2]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800620e:	887a      	ldrh	r2, [r7, #2]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4013      	ands	r3, r2
 8006214:	041a      	lsls	r2, r3, #16
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	43d9      	mvns	r1, r3
 800621a:	887b      	ldrh	r3, [r7, #2]
 800621c:	400b      	ands	r3, r1
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	619a      	str	r2, [r3, #24]
}
 8006224:	bf00      	nop
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d141      	bne.n	80062c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800623e:	4b4b      	ldr	r3, [pc, #300]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800624a:	d131      	bne.n	80062b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800624c:	4b47      	ldr	r3, [pc, #284]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800624e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006252:	4a46      	ldr	r2, [pc, #280]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006258:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800625c:	4b43      	ldr	r3, [pc, #268]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006264:	4a41      	ldr	r2, [pc, #260]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800626a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800626c:	4b40      	ldr	r3, [pc, #256]	@ (8006370 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2232      	movs	r2, #50	@ 0x32
 8006272:	fb02 f303 	mul.w	r3, r2, r3
 8006276:	4a3f      	ldr	r2, [pc, #252]	@ (8006374 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006278:	fba2 2303 	umull	r2, r3, r2, r3
 800627c:	0c9b      	lsrs	r3, r3, #18
 800627e:	3301      	adds	r3, #1
 8006280:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006282:	e002      	b.n	800628a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3b01      	subs	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800628a:	4b38      	ldr	r3, [pc, #224]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006296:	d102      	bne.n	800629e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1f2      	bne.n	8006284 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800629e:	4b33      	ldr	r3, [pc, #204]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062aa:	d158      	bne.n	800635e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e057      	b.n	8006360 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062b0:	4b2e      	ldr	r3, [pc, #184]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062b6:	4a2d      	ldr	r2, [pc, #180]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80062c0:	e04d      	b.n	800635e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062c8:	d141      	bne.n	800634e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80062ca:	4b28      	ldr	r3, [pc, #160]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d6:	d131      	bne.n	800633c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062d8:	4b24      	ldr	r3, [pc, #144]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062de:	4a23      	ldr	r2, [pc, #140]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062e8:	4b20      	ldr	r3, [pc, #128]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062f0:	4a1e      	ldr	r2, [pc, #120]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006370 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2232      	movs	r2, #50	@ 0x32
 80062fe:	fb02 f303 	mul.w	r3, r2, r3
 8006302:	4a1c      	ldr	r2, [pc, #112]	@ (8006374 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006304:	fba2 2303 	umull	r2, r3, r2, r3
 8006308:	0c9b      	lsrs	r3, r3, #18
 800630a:	3301      	adds	r3, #1
 800630c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800630e:	e002      	b.n	8006316 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3b01      	subs	r3, #1
 8006314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006316:	4b15      	ldr	r3, [pc, #84]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800631e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006322:	d102      	bne.n	800632a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f2      	bne.n	8006310 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800632a:	4b10      	ldr	r3, [pc, #64]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006336:	d112      	bne.n	800635e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e011      	b.n	8006360 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800633c:	4b0b      	ldr	r3, [pc, #44]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800633e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006342:	4a0a      	ldr	r2, [pc, #40]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006348:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800634c:	e007      	b.n	800635e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800634e:	4b07      	ldr	r3, [pc, #28]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006356:	4a05      	ldr	r2, [pc, #20]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006358:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800635c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	40007000 	.word	0x40007000
 8006370:	20000008 	.word	0x20000008
 8006374:	431bde83 	.word	0x431bde83

08006378 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800637c:	4b05      	ldr	r3, [pc, #20]	@ (8006394 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	4a04      	ldr	r2, [pc, #16]	@ (8006394 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006382:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006386:	6093      	str	r3, [r2, #8]
}
 8006388:	bf00      	nop
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40007000 	.word	0x40007000

08006398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b088      	sub	sp, #32
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e2fe      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d075      	beq.n	80064a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063b6:	4b97      	ldr	r3, [pc, #604]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 030c 	and.w	r3, r3, #12
 80063be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063c0:	4b94      	ldr	r3, [pc, #592]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	2b0c      	cmp	r3, #12
 80063ce:	d102      	bne.n	80063d6 <HAL_RCC_OscConfig+0x3e>
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d002      	beq.n	80063dc <HAL_RCC_OscConfig+0x44>
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d10b      	bne.n	80063f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063dc:	4b8d      	ldr	r3, [pc, #564]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d05b      	beq.n	80064a0 <HAL_RCC_OscConfig+0x108>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d157      	bne.n	80064a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e2d9      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063fc:	d106      	bne.n	800640c <HAL_RCC_OscConfig+0x74>
 80063fe:	4b85      	ldr	r3, [pc, #532]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a84      	ldr	r2, [pc, #528]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 8006404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	e01d      	b.n	8006448 <HAL_RCC_OscConfig+0xb0>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006414:	d10c      	bne.n	8006430 <HAL_RCC_OscConfig+0x98>
 8006416:	4b7f      	ldr	r3, [pc, #508]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a7e      	ldr	r2, [pc, #504]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 800641c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	4b7c      	ldr	r3, [pc, #496]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a7b      	ldr	r2, [pc, #492]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 8006428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	e00b      	b.n	8006448 <HAL_RCC_OscConfig+0xb0>
 8006430:	4b78      	ldr	r3, [pc, #480]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a77      	ldr	r2, [pc, #476]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 8006436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	4b75      	ldr	r3, [pc, #468]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a74      	ldr	r2, [pc, #464]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 8006442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d013      	beq.n	8006478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006450:	f7fe fafe 	bl	8004a50 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006458:	f7fe fafa 	bl	8004a50 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b64      	cmp	r3, #100	@ 0x64
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e29e      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800646a:	4b6a      	ldr	r3, [pc, #424]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0f0      	beq.n	8006458 <HAL_RCC_OscConfig+0xc0>
 8006476:	e014      	b.n	80064a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006478:	f7fe faea 	bl	8004a50 <HAL_GetTick>
 800647c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006480:	f7fe fae6 	bl	8004a50 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b64      	cmp	r3, #100	@ 0x64
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e28a      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006492:	4b60      	ldr	r3, [pc, #384]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1f0      	bne.n	8006480 <HAL_RCC_OscConfig+0xe8>
 800649e:	e000      	b.n	80064a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d075      	beq.n	800659a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ae:	4b59      	ldr	r3, [pc, #356]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f003 030c 	and.w	r3, r3, #12
 80064b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064b8:	4b56      	ldr	r3, [pc, #344]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f003 0303 	and.w	r3, r3, #3
 80064c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	2b0c      	cmp	r3, #12
 80064c6:	d102      	bne.n	80064ce <HAL_RCC_OscConfig+0x136>
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d002      	beq.n	80064d4 <HAL_RCC_OscConfig+0x13c>
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d11f      	bne.n	8006514 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064d4:	4b4f      	ldr	r3, [pc, #316]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d005      	beq.n	80064ec <HAL_RCC_OscConfig+0x154>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e25d      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ec:	4b49      	ldr	r3, [pc, #292]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	061b      	lsls	r3, r3, #24
 80064fa:	4946      	ldr	r1, [pc, #280]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006500:	4b45      	ldr	r3, [pc, #276]	@ (8006618 <HAL_RCC_OscConfig+0x280>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4618      	mov	r0, r3
 8006506:	f7fe fa57 	bl	80049b8 <HAL_InitTick>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d043      	beq.n	8006598 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e249      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d023      	beq.n	8006564 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800651c:	4b3d      	ldr	r3, [pc, #244]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a3c      	ldr	r2, [pc, #240]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 8006522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fe fa92 	bl	8004a50 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006530:	f7fe fa8e 	bl	8004a50 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e232      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006542:	4b34      	ldr	r3, [pc, #208]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0f0      	beq.n	8006530 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800654e:	4b31      	ldr	r3, [pc, #196]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	061b      	lsls	r3, r3, #24
 800655c:	492d      	ldr	r1, [pc, #180]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 800655e:	4313      	orrs	r3, r2
 8006560:	604b      	str	r3, [r1, #4]
 8006562:	e01a      	b.n	800659a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006564:	4b2b      	ldr	r3, [pc, #172]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a2a      	ldr	r2, [pc, #168]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 800656a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800656e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006570:	f7fe fa6e 	bl	8004a50 <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006578:	f7fe fa6a 	bl	8004a50 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e20e      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800658a:	4b22      	ldr	r3, [pc, #136]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1f0      	bne.n	8006578 <HAL_RCC_OscConfig+0x1e0>
 8006596:	e000      	b.n	800659a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006598:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d041      	beq.n	800662a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01c      	beq.n	80065e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ae:	4b19      	ldr	r3, [pc, #100]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 80065b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065b4:	4a17      	ldr	r2, [pc, #92]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 80065b6:	f043 0301 	orr.w	r3, r3, #1
 80065ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065be:	f7fe fa47 	bl	8004a50 <HAL_GetTick>
 80065c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065c6:	f7fe fa43 	bl	8004a50 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e1e7      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 80065da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0ef      	beq.n	80065c6 <HAL_RCC_OscConfig+0x22e>
 80065e6:	e020      	b.n	800662a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 80065ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ee:	4a09      	ldr	r2, [pc, #36]	@ (8006614 <HAL_RCC_OscConfig+0x27c>)
 80065f0:	f023 0301 	bic.w	r3, r3, #1
 80065f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f8:	f7fe fa2a 	bl	8004a50 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065fe:	e00d      	b.n	800661c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006600:	f7fe fa26 	bl	8004a50 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d906      	bls.n	800661c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e1ca      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
 8006612:	bf00      	nop
 8006614:	40021000 	.word	0x40021000
 8006618:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800661c:	4b8c      	ldr	r3, [pc, #560]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 800661e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1ea      	bne.n	8006600 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 80a6 	beq.w	8006784 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006638:	2300      	movs	r3, #0
 800663a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800663c:	4b84      	ldr	r3, [pc, #528]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 800663e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_RCC_OscConfig+0x2b4>
 8006648:	2301      	movs	r3, #1
 800664a:	e000      	b.n	800664e <HAL_RCC_OscConfig+0x2b6>
 800664c:	2300      	movs	r3, #0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00d      	beq.n	800666e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006652:	4b7f      	ldr	r3, [pc, #508]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 8006654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006656:	4a7e      	ldr	r2, [pc, #504]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 8006658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800665c:	6593      	str	r3, [r2, #88]	@ 0x58
 800665e:	4b7c      	ldr	r3, [pc, #496]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 8006660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800666a:	2301      	movs	r3, #1
 800666c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800666e:	4b79      	ldr	r3, [pc, #484]	@ (8006854 <HAL_RCC_OscConfig+0x4bc>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006676:	2b00      	cmp	r3, #0
 8006678:	d118      	bne.n	80066ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800667a:	4b76      	ldr	r3, [pc, #472]	@ (8006854 <HAL_RCC_OscConfig+0x4bc>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a75      	ldr	r2, [pc, #468]	@ (8006854 <HAL_RCC_OscConfig+0x4bc>)
 8006680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006686:	f7fe f9e3 	bl	8004a50 <HAL_GetTick>
 800668a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800668c:	e008      	b.n	80066a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800668e:	f7fe f9df 	bl	8004a50 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e183      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066a0:	4b6c      	ldr	r3, [pc, #432]	@ (8006854 <HAL_RCC_OscConfig+0x4bc>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0f0      	beq.n	800668e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d108      	bne.n	80066c6 <HAL_RCC_OscConfig+0x32e>
 80066b4:	4b66      	ldr	r3, [pc, #408]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 80066b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ba:	4a65      	ldr	r2, [pc, #404]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066c4:	e024      	b.n	8006710 <HAL_RCC_OscConfig+0x378>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2b05      	cmp	r3, #5
 80066cc:	d110      	bne.n	80066f0 <HAL_RCC_OscConfig+0x358>
 80066ce:	4b60      	ldr	r3, [pc, #384]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 80066d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 80066d6:	f043 0304 	orr.w	r3, r3, #4
 80066da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066de:	4b5c      	ldr	r3, [pc, #368]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 80066e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066e4:	4a5a      	ldr	r2, [pc, #360]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066ee:	e00f      	b.n	8006710 <HAL_RCC_OscConfig+0x378>
 80066f0:	4b57      	ldr	r3, [pc, #348]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 80066f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f6:	4a56      	ldr	r2, [pc, #344]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 80066f8:	f023 0301 	bic.w	r3, r3, #1
 80066fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006700:	4b53      	ldr	r3, [pc, #332]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 8006702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006706:	4a52      	ldr	r2, [pc, #328]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 8006708:	f023 0304 	bic.w	r3, r3, #4
 800670c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d016      	beq.n	8006746 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006718:	f7fe f99a 	bl	8004a50 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800671e:	e00a      	b.n	8006736 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006720:	f7fe f996 	bl	8004a50 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800672e:	4293      	cmp	r3, r2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e138      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006736:	4b46      	ldr	r3, [pc, #280]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 8006738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0ed      	beq.n	8006720 <HAL_RCC_OscConfig+0x388>
 8006744:	e015      	b.n	8006772 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006746:	f7fe f983 	bl	8004a50 <HAL_GetTick>
 800674a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800674c:	e00a      	b.n	8006764 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800674e:	f7fe f97f 	bl	8004a50 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800675c:	4293      	cmp	r3, r2
 800675e:	d901      	bls.n	8006764 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e121      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006764:	4b3a      	ldr	r3, [pc, #232]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 8006766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1ed      	bne.n	800674e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006772:	7ffb      	ldrb	r3, [r7, #31]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d105      	bne.n	8006784 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006778:	4b35      	ldr	r3, [pc, #212]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 800677a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677c:	4a34      	ldr	r2, [pc, #208]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 800677e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006782:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b00      	cmp	r3, #0
 800678e:	d03c      	beq.n	800680a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01c      	beq.n	80067d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006798:	4b2d      	ldr	r3, [pc, #180]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 800679a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800679e:	4a2c      	ldr	r2, [pc, #176]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 80067a0:	f043 0301 	orr.w	r3, r3, #1
 80067a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a8:	f7fe f952 	bl	8004a50 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067b0:	f7fe f94e 	bl	8004a50 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e0f2      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067c2:	4b23      	ldr	r3, [pc, #140]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 80067c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0ef      	beq.n	80067b0 <HAL_RCC_OscConfig+0x418>
 80067d0:	e01b      	b.n	800680a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 80067d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e2:	f7fe f935 	bl	8004a50 <HAL_GetTick>
 80067e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067ea:	f7fe f931 	bl	8004a50 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e0d5      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067fc:	4b14      	ldr	r3, [pc, #80]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 80067fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1ef      	bne.n	80067ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 80c9 	beq.w	80069a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006814:	4b0e      	ldr	r3, [pc, #56]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 030c 	and.w	r3, r3, #12
 800681c:	2b0c      	cmp	r3, #12
 800681e:	f000 8083 	beq.w	8006928 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d15e      	bne.n	80068e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800682a:	4b09      	ldr	r3, [pc, #36]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a08      	ldr	r2, [pc, #32]	@ (8006850 <HAL_RCC_OscConfig+0x4b8>)
 8006830:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006836:	f7fe f90b 	bl	8004a50 <HAL_GetTick>
 800683a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800683c:	e00c      	b.n	8006858 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800683e:	f7fe f907 	bl	8004a50 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d905      	bls.n	8006858 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e0ab      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
 8006850:	40021000 	.word	0x40021000
 8006854:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006858:	4b55      	ldr	r3, [pc, #340]	@ (80069b0 <HAL_RCC_OscConfig+0x618>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1ec      	bne.n	800683e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006864:	4b52      	ldr	r3, [pc, #328]	@ (80069b0 <HAL_RCC_OscConfig+0x618>)
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	4b52      	ldr	r3, [pc, #328]	@ (80069b4 <HAL_RCC_OscConfig+0x61c>)
 800686a:	4013      	ands	r3, r2
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6a11      	ldr	r1, [r2, #32]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006874:	3a01      	subs	r2, #1
 8006876:	0112      	lsls	r2, r2, #4
 8006878:	4311      	orrs	r1, r2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800687e:	0212      	lsls	r2, r2, #8
 8006880:	4311      	orrs	r1, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006886:	0852      	lsrs	r2, r2, #1
 8006888:	3a01      	subs	r2, #1
 800688a:	0552      	lsls	r2, r2, #21
 800688c:	4311      	orrs	r1, r2
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006892:	0852      	lsrs	r2, r2, #1
 8006894:	3a01      	subs	r2, #1
 8006896:	0652      	lsls	r2, r2, #25
 8006898:	4311      	orrs	r1, r2
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800689e:	06d2      	lsls	r2, r2, #27
 80068a0:	430a      	orrs	r2, r1
 80068a2:	4943      	ldr	r1, [pc, #268]	@ (80069b0 <HAL_RCC_OscConfig+0x618>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068a8:	4b41      	ldr	r3, [pc, #260]	@ (80069b0 <HAL_RCC_OscConfig+0x618>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a40      	ldr	r2, [pc, #256]	@ (80069b0 <HAL_RCC_OscConfig+0x618>)
 80068ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068b4:	4b3e      	ldr	r3, [pc, #248]	@ (80069b0 <HAL_RCC_OscConfig+0x618>)
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	4a3d      	ldr	r2, [pc, #244]	@ (80069b0 <HAL_RCC_OscConfig+0x618>)
 80068ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c0:	f7fe f8c6 	bl	8004a50 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c8:	f7fe f8c2 	bl	8004a50 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e066      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068da:	4b35      	ldr	r3, [pc, #212]	@ (80069b0 <HAL_RCC_OscConfig+0x618>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCC_OscConfig+0x530>
 80068e6:	e05e      	b.n	80069a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e8:	4b31      	ldr	r3, [pc, #196]	@ (80069b0 <HAL_RCC_OscConfig+0x618>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a30      	ldr	r2, [pc, #192]	@ (80069b0 <HAL_RCC_OscConfig+0x618>)
 80068ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f4:	f7fe f8ac 	bl	8004a50 <HAL_GetTick>
 80068f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068fc:	f7fe f8a8 	bl	8004a50 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e04c      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800690e:	4b28      	ldr	r3, [pc, #160]	@ (80069b0 <HAL_RCC_OscConfig+0x618>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f0      	bne.n	80068fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800691a:	4b25      	ldr	r3, [pc, #148]	@ (80069b0 <HAL_RCC_OscConfig+0x618>)
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	4924      	ldr	r1, [pc, #144]	@ (80069b0 <HAL_RCC_OscConfig+0x618>)
 8006920:	4b25      	ldr	r3, [pc, #148]	@ (80069b8 <HAL_RCC_OscConfig+0x620>)
 8006922:	4013      	ands	r3, r2
 8006924:	60cb      	str	r3, [r1, #12]
 8006926:	e03e      	b.n	80069a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e039      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006934:	4b1e      	ldr	r3, [pc, #120]	@ (80069b0 <HAL_RCC_OscConfig+0x618>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f003 0203 	and.w	r2, r3, #3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	429a      	cmp	r2, r3
 8006946:	d12c      	bne.n	80069a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006952:	3b01      	subs	r3, #1
 8006954:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006956:	429a      	cmp	r2, r3
 8006958:	d123      	bne.n	80069a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006964:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006966:	429a      	cmp	r2, r3
 8006968:	d11b      	bne.n	80069a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006974:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006976:	429a      	cmp	r2, r3
 8006978:	d113      	bne.n	80069a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006984:	085b      	lsrs	r3, r3, #1
 8006986:	3b01      	subs	r3, #1
 8006988:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800698a:	429a      	cmp	r2, r3
 800698c:	d109      	bne.n	80069a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006998:	085b      	lsrs	r3, r3, #1
 800699a:	3b01      	subs	r3, #1
 800699c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800699e:	429a      	cmp	r2, r3
 80069a0:	d001      	beq.n	80069a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3720      	adds	r7, #32
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	40021000 	.word	0x40021000
 80069b4:	019f800c 	.word	0x019f800c
 80069b8:	feeefffc 	.word	0xfeeefffc

080069bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80069c6:	2300      	movs	r3, #0
 80069c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e11e      	b.n	8006c12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069d4:	4b91      	ldr	r3, [pc, #580]	@ (8006c1c <HAL_RCC_ClockConfig+0x260>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 030f 	and.w	r3, r3, #15
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d910      	bls.n	8006a04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e2:	4b8e      	ldr	r3, [pc, #568]	@ (8006c1c <HAL_RCC_ClockConfig+0x260>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f023 020f 	bic.w	r2, r3, #15
 80069ea:	498c      	ldr	r1, [pc, #560]	@ (8006c1c <HAL_RCC_ClockConfig+0x260>)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069f2:	4b8a      	ldr	r3, [pc, #552]	@ (8006c1c <HAL_RCC_ClockConfig+0x260>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d001      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e106      	b.n	8006c12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d073      	beq.n	8006af8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d129      	bne.n	8006a6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a18:	4b81      	ldr	r3, [pc, #516]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e0f4      	b.n	8006c12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006a28:	f000 f99e 	bl	8006d68 <RCC_GetSysClockFreqFromPLLSource>
 8006a2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	4a7c      	ldr	r2, [pc, #496]	@ (8006c24 <HAL_RCC_ClockConfig+0x268>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d93f      	bls.n	8006ab6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006a36:	4b7a      	ldr	r3, [pc, #488]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d009      	beq.n	8006a56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d033      	beq.n	8006ab6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d12f      	bne.n	8006ab6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a56:	4b72      	ldr	r3, [pc, #456]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a5e:	4a70      	ldr	r2, [pc, #448]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006a66:	2380      	movs	r3, #128	@ 0x80
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	e024      	b.n	8006ab6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d107      	bne.n	8006a84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a74:	4b6a      	ldr	r3, [pc, #424]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d109      	bne.n	8006a94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e0c6      	b.n	8006c12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a84:	4b66      	ldr	r3, [pc, #408]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e0be      	b.n	8006c12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006a94:	f000 f8ce 	bl	8006c34 <HAL_RCC_GetSysClockFreq>
 8006a98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	4a61      	ldr	r2, [pc, #388]	@ (8006c24 <HAL_RCC_ClockConfig+0x268>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d909      	bls.n	8006ab6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aaa:	4a5d      	ldr	r2, [pc, #372]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006ab2:	2380      	movs	r3, #128	@ 0x80
 8006ab4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ab6:	4b5a      	ldr	r3, [pc, #360]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f023 0203 	bic.w	r2, r3, #3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	4957      	ldr	r1, [pc, #348]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ac8:	f7fd ffc2 	bl	8004a50 <HAL_GetTick>
 8006acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ace:	e00a      	b.n	8006ae6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ad0:	f7fd ffbe 	bl	8004a50 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e095      	b.n	8006c12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 020c 	and.w	r2, r3, #12
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d1eb      	bne.n	8006ad0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d023      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b10:	4b43      	ldr	r3, [pc, #268]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	4a42      	ldr	r2, [pc, #264]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006b16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006b1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0308 	and.w	r3, r3, #8
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d007      	beq.n	8006b38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006b28:	4b3d      	ldr	r3, [pc, #244]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006b30:	4a3b      	ldr	r2, [pc, #236]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006b32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006b36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b38:	4b39      	ldr	r3, [pc, #228]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	4936      	ldr	r1, [pc, #216]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	608b      	str	r3, [r1, #8]
 8006b4a:	e008      	b.n	8006b5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2b80      	cmp	r3, #128	@ 0x80
 8006b50:	d105      	bne.n	8006b5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006b52:	4b33      	ldr	r3, [pc, #204]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	4a32      	ldr	r2, [pc, #200]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006b58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c1c <HAL_RCC_ClockConfig+0x260>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d21d      	bcs.n	8006ba8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c1c <HAL_RCC_ClockConfig+0x260>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f023 020f 	bic.w	r2, r3, #15
 8006b74:	4929      	ldr	r1, [pc, #164]	@ (8006c1c <HAL_RCC_ClockConfig+0x260>)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b7c:	f7fd ff68 	bl	8004a50 <HAL_GetTick>
 8006b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b82:	e00a      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b84:	f7fd ff64 	bl	8004a50 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e03b      	b.n	8006c12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b9a:	4b20      	ldr	r3, [pc, #128]	@ (8006c1c <HAL_RCC_ClockConfig+0x260>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d1ed      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d008      	beq.n	8006bc6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	4917      	ldr	r1, [pc, #92]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0308 	and.w	r3, r3, #8
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bd2:	4b13      	ldr	r3, [pc, #76]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	490f      	ldr	r1, [pc, #60]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006be6:	f000 f825 	bl	8006c34 <HAL_RCC_GetSysClockFreq>
 8006bea:	4602      	mov	r2, r0
 8006bec:	4b0c      	ldr	r3, [pc, #48]	@ (8006c20 <HAL_RCC_ClockConfig+0x264>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	091b      	lsrs	r3, r3, #4
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	490c      	ldr	r1, [pc, #48]	@ (8006c28 <HAL_RCC_ClockConfig+0x26c>)
 8006bf8:	5ccb      	ldrb	r3, [r1, r3]
 8006bfa:	f003 031f 	and.w	r3, r3, #31
 8006bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006c02:	4a0a      	ldr	r2, [pc, #40]	@ (8006c2c <HAL_RCC_ClockConfig+0x270>)
 8006c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006c06:	4b0a      	ldr	r3, [pc, #40]	@ (8006c30 <HAL_RCC_ClockConfig+0x274>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fd fed4 	bl	80049b8 <HAL_InitTick>
 8006c10:	4603      	mov	r3, r0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	40022000 	.word	0x40022000
 8006c20:	40021000 	.word	0x40021000
 8006c24:	04c4b400 	.word	0x04c4b400
 8006c28:	0800b1b4 	.word	0x0800b1b4
 8006c2c:	20000008 	.word	0x20000008
 8006c30:	2000000c 	.word	0x2000000c

08006c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8006cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 030c 	and.w	r3, r3, #12
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d102      	bne.n	8006c4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c46:	4b2a      	ldr	r3, [pc, #168]	@ (8006cf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	e047      	b.n	8006cdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006c4c:	4b27      	ldr	r3, [pc, #156]	@ (8006cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f003 030c 	and.w	r3, r3, #12
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d102      	bne.n	8006c5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c58:	4b26      	ldr	r3, [pc, #152]	@ (8006cf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	e03e      	b.n	8006cdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006c5e:	4b23      	ldr	r3, [pc, #140]	@ (8006cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 030c 	and.w	r3, r3, #12
 8006c66:	2b0c      	cmp	r3, #12
 8006c68:	d136      	bne.n	8006cd8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c6a:	4b20      	ldr	r3, [pc, #128]	@ (8006cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f003 0303 	and.w	r3, r3, #3
 8006c72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c74:	4b1d      	ldr	r3, [pc, #116]	@ (8006cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	091b      	lsrs	r3, r3, #4
 8006c7a:	f003 030f 	and.w	r3, r3, #15
 8006c7e:	3301      	adds	r3, #1
 8006c80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d10c      	bne.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c88:	4a1a      	ldr	r2, [pc, #104]	@ (8006cf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c90:	4a16      	ldr	r2, [pc, #88]	@ (8006cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c92:	68d2      	ldr	r2, [r2, #12]
 8006c94:	0a12      	lsrs	r2, r2, #8
 8006c96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c9a:	fb02 f303 	mul.w	r3, r2, r3
 8006c9e:	617b      	str	r3, [r7, #20]
      break;
 8006ca0:	e00c      	b.n	8006cbc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ca2:	4a13      	ldr	r2, [pc, #76]	@ (8006cf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006caa:	4a10      	ldr	r2, [pc, #64]	@ (8006cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cac:	68d2      	ldr	r2, [r2, #12]
 8006cae:	0a12      	lsrs	r2, r2, #8
 8006cb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006cb4:	fb02 f303 	mul.w	r3, r2, r3
 8006cb8:	617b      	str	r3, [r7, #20]
      break;
 8006cba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	0e5b      	lsrs	r3, r3, #25
 8006cc2:	f003 0303 	and.w	r3, r3, #3
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd4:	613b      	str	r3, [r7, #16]
 8006cd6:	e001      	b.n	8006cdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006cdc:	693b      	ldr	r3, [r7, #16]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	00f42400 	.word	0x00f42400
 8006cf4:	007a1200 	.word	0x007a1200

08006cf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cfc:	4b03      	ldr	r3, [pc, #12]	@ (8006d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	20000008 	.word	0x20000008

08006d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006d14:	f7ff fff0 	bl	8006cf8 <HAL_RCC_GetHCLKFreq>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	4b06      	ldr	r3, [pc, #24]	@ (8006d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	0a1b      	lsrs	r3, r3, #8
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	4904      	ldr	r1, [pc, #16]	@ (8006d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d26:	5ccb      	ldrb	r3, [r1, r3]
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	40021000 	.word	0x40021000
 8006d38:	0800b1c4 	.word	0x0800b1c4

08006d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d40:	f7ff ffda 	bl	8006cf8 <HAL_RCC_GetHCLKFreq>
 8006d44:	4602      	mov	r2, r0
 8006d46:	4b06      	ldr	r3, [pc, #24]	@ (8006d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	0adb      	lsrs	r3, r3, #11
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	4904      	ldr	r1, [pc, #16]	@ (8006d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d52:	5ccb      	ldrb	r3, [r1, r3]
 8006d54:	f003 031f 	and.w	r3, r3, #31
 8006d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	40021000 	.word	0x40021000
 8006d64:	0800b1c4 	.word	0x0800b1c4

08006d68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006de8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d78:	4b1b      	ldr	r3, [pc, #108]	@ (8006de8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	091b      	lsrs	r3, r3, #4
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	3301      	adds	r3, #1
 8006d84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d10c      	bne.n	8006da6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d8c:	4a17      	ldr	r2, [pc, #92]	@ (8006dec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d94:	4a14      	ldr	r2, [pc, #80]	@ (8006de8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d96:	68d2      	ldr	r2, [r2, #12]
 8006d98:	0a12      	lsrs	r2, r2, #8
 8006d9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d9e:	fb02 f303 	mul.w	r3, r2, r3
 8006da2:	617b      	str	r3, [r7, #20]
    break;
 8006da4:	e00c      	b.n	8006dc0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006da6:	4a12      	ldr	r2, [pc, #72]	@ (8006df0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dae:	4a0e      	ldr	r2, [pc, #56]	@ (8006de8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006db0:	68d2      	ldr	r2, [r2, #12]
 8006db2:	0a12      	lsrs	r2, r2, #8
 8006db4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006db8:	fb02 f303 	mul.w	r3, r2, r3
 8006dbc:	617b      	str	r3, [r7, #20]
    break;
 8006dbe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006dc0:	4b09      	ldr	r3, [pc, #36]	@ (8006de8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	0e5b      	lsrs	r3, r3, #25
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	3301      	adds	r3, #1
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006dda:	687b      	ldr	r3, [r7, #4]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	371c      	adds	r7, #28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	40021000 	.word	0x40021000
 8006dec:	007a1200 	.word	0x007a1200
 8006df0:	00f42400 	.word	0x00f42400

08006df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e00:	2300      	movs	r3, #0
 8006e02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 8098 	beq.w	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e12:	2300      	movs	r3, #0
 8006e14:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e16:	4b43      	ldr	r3, [pc, #268]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10d      	bne.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e22:	4b40      	ldr	r3, [pc, #256]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e26:	4a3f      	ldr	r2, [pc, #252]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e36:	60bb      	str	r3, [r7, #8]
 8006e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a39      	ldr	r2, [pc, #228]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e4a:	f7fd fe01 	bl	8004a50 <HAL_GetTick>
 8006e4e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e50:	e009      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e52:	f7fd fdfd 	bl	8004a50 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d902      	bls.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	74fb      	strb	r3, [r7, #19]
        break;
 8006e64:	e005      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e66:	4b30      	ldr	r3, [pc, #192]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0ef      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006e72:	7cfb      	ldrb	r3, [r7, #19]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d159      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e78:	4b2a      	ldr	r3, [pc, #168]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e82:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d01e      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d019      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e94:	4b23      	ldr	r3, [pc, #140]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ea0:	4b20      	ldr	r3, [pc, #128]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ec0:	4a18      	ldr	r2, [pc, #96]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d016      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed2:	f7fd fdbd 	bl	8004a50 <HAL_GetTick>
 8006ed6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ed8:	e00b      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eda:	f7fd fdb9 	bl	8004a50 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d902      	bls.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	74fb      	strb	r3, [r7, #19]
            break;
 8006ef0:	e006      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d0ec      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006f00:	7cfb      	ldrb	r3, [r7, #19]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10b      	bne.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f06:	4b07      	ldr	r3, [pc, #28]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f14:	4903      	ldr	r1, [pc, #12]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006f1c:	e008      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f1e:	7cfb      	ldrb	r3, [r7, #19]
 8006f20:	74bb      	strb	r3, [r7, #18]
 8006f22:	e005      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006f24:	40021000 	.word	0x40021000
 8006f28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2c:	7cfb      	ldrb	r3, [r7, #19]
 8006f2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f30:	7c7b      	ldrb	r3, [r7, #17]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d105      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f36:	4ba7      	ldr	r3, [pc, #668]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3a:	4aa6      	ldr	r2, [pc, #664]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f4e:	4ba1      	ldr	r3, [pc, #644]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f54:	f023 0203 	bic.w	r2, r3, #3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	499d      	ldr	r1, [pc, #628]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f70:	4b98      	ldr	r3, [pc, #608]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f76:	f023 020c 	bic.w	r2, r3, #12
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	4995      	ldr	r1, [pc, #596]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0304 	and.w	r3, r3, #4
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00a      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f92:	4b90      	ldr	r3, [pc, #576]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	498c      	ldr	r1, [pc, #560]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00a      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006fb4:	4b87      	ldr	r3, [pc, #540]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	4984      	ldr	r1, [pc, #528]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0310 	and.w	r3, r3, #16
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	497b      	ldr	r1, [pc, #492]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ff8:	4b76      	ldr	r3, [pc, #472]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	4973      	ldr	r1, [pc, #460]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007008:	4313      	orrs	r3, r2
 800700a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800701a:	4b6e      	ldr	r3, [pc, #440]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800701c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007020:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	69db      	ldr	r3, [r3, #28]
 8007028:	496a      	ldr	r1, [pc, #424]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800702a:	4313      	orrs	r3, r2
 800702c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800703c:	4b65      	ldr	r3, [pc, #404]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800703e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007042:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	4962      	ldr	r1, [pc, #392]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800705e:	4b5d      	ldr	r3, [pc, #372]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007064:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706c:	4959      	ldr	r1, [pc, #356]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007080:	4b54      	ldr	r3, [pc, #336]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007082:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007086:	f023 0203 	bic.w	r2, r3, #3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708e:	4951      	ldr	r1, [pc, #324]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070a2:	4b4c      	ldr	r3, [pc, #304]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	4948      	ldr	r1, [pc, #288]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d015      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070c4:	4b43      	ldr	r3, [pc, #268]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d2:	4940      	ldr	r1, [pc, #256]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070e2:	d105      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070e4:	4b3b      	ldr	r3, [pc, #236]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	4a3a      	ldr	r2, [pc, #232]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070ee:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d015      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80070fc:	4b35      	ldr	r3, [pc, #212]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007102:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800710a:	4932      	ldr	r1, [pc, #200]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007116:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800711a:	d105      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800711c:	4b2d      	ldr	r3, [pc, #180]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	4a2c      	ldr	r2, [pc, #176]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007126:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d015      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007134:	4b27      	ldr	r3, [pc, #156]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007142:	4924      	ldr	r1, [pc, #144]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007144:	4313      	orrs	r3, r2
 8007146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007152:	d105      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007154:	4b1f      	ldr	r3, [pc, #124]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	4a1e      	ldr	r2, [pc, #120]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800715a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800715e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d015      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800716c:	4b19      	ldr	r3, [pc, #100]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800716e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007172:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800717a:	4916      	ldr	r1, [pc, #88]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800717c:	4313      	orrs	r3, r2
 800717e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800718a:	d105      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800718c:	4b11      	ldr	r3, [pc, #68]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	4a10      	ldr	r2, [pc, #64]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007196:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d019      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071a4:	4b0b      	ldr	r3, [pc, #44]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b2:	4908      	ldr	r1, [pc, #32]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071c2:	d109      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071c4:	4b03      	ldr	r3, [pc, #12]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	4a02      	ldr	r2, [pc, #8]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071ce:	60d3      	str	r3, [r2, #12]
 80071d0:	e002      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80071d2:	bf00      	nop
 80071d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d015      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80071e4:	4b29      	ldr	r3, [pc, #164]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f2:	4926      	ldr	r1, [pc, #152]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007202:	d105      	bne.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007204:	4b21      	ldr	r3, [pc, #132]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	4a20      	ldr	r2, [pc, #128]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800720a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800720e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d015      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800721c:	4b1b      	ldr	r3, [pc, #108]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800721e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007222:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800722a:	4918      	ldr	r1, [pc, #96]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800722c:	4313      	orrs	r3, r2
 800722e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800723a:	d105      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800723c:	4b13      	ldr	r3, [pc, #76]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	4a12      	ldr	r2, [pc, #72]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007246:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d015      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007254:	4b0d      	ldr	r3, [pc, #52]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007256:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800725a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007262:	490a      	ldr	r1, [pc, #40]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007264:	4313      	orrs	r3, r2
 8007266:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800726e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007272:	d105      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007274:	4b05      	ldr	r3, [pc, #20]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	4a04      	ldr	r2, [pc, #16]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800727a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800727e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007280:	7cbb      	ldrb	r3, [r7, #18]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	40021000 	.word	0x40021000

08007290 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e09d      	b.n	80073de <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d108      	bne.n	80072bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072b2:	d009      	beq.n	80072c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	61da      	str	r2, [r3, #28]
 80072ba:	e005      	b.n	80072c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fb fc14 	bl	8002b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007308:	d902      	bls.n	8007310 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800730a:	2300      	movs	r3, #0
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	e002      	b.n	8007316 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007314:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800731e:	d007      	beq.n	8007330 <HAL_SPI_Init+0xa0>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007328:	d002      	beq.n	8007330 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007340:	431a      	orrs	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800735e:	431a      	orrs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007372:	ea42 0103 	orr.w	r1, r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	0c1b      	lsrs	r3, r3, #16
 800738c:	f003 0204 	and.w	r2, r3, #4
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	431a      	orrs	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80073ac:	ea42 0103 	orr.w	r1, r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69da      	ldr	r2, [r3, #28]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e01a      	b.n	800742e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800740e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7fb fbbf 	bl	8002b94 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b088      	sub	sp, #32
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	603b      	str	r3, [r7, #0]
 8007442:	4613      	mov	r3, r2
 8007444:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007446:	f7fd fb03 	bl	8004a50 <HAL_GetTick>
 800744a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b01      	cmp	r3, #1
 800745a:	d001      	beq.n	8007460 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800745c:	2302      	movs	r3, #2
 800745e:	e15c      	b.n	800771a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <HAL_SPI_Transmit+0x36>
 8007466:	88fb      	ldrh	r3, [r7, #6]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e154      	b.n	800771a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007476:	2b01      	cmp	r3, #1
 8007478:	d101      	bne.n	800747e <HAL_SPI_Transmit+0x48>
 800747a:	2302      	movs	r3, #2
 800747c:	e14d      	b.n	800771a <HAL_SPI_Transmit+0x2e4>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2203      	movs	r2, #3
 800748a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	88fa      	ldrh	r2, [r7, #6]
 800749e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	88fa      	ldrh	r2, [r7, #6]
 80074a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074d0:	d10f      	bne.n	80074f2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074fc:	2b40      	cmp	r3, #64	@ 0x40
 80074fe:	d007      	beq.n	8007510 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800750e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007518:	d952      	bls.n	80075c0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <HAL_SPI_Transmit+0xf2>
 8007522:	8b7b      	ldrh	r3, [r7, #26]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d145      	bne.n	80075b4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752c:	881a      	ldrh	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007538:	1c9a      	adds	r2, r3, #2
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007542:	b29b      	uxth	r3, r3
 8007544:	3b01      	subs	r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800754c:	e032      	b.n	80075b4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b02      	cmp	r3, #2
 800755a:	d112      	bne.n	8007582 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007560:	881a      	ldrh	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756c:	1c9a      	adds	r2, r3, #2
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007576:	b29b      	uxth	r3, r3
 8007578:	3b01      	subs	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007580:	e018      	b.n	80075b4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007582:	f7fd fa65 	bl	8004a50 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d803      	bhi.n	800759a <HAL_SPI_Transmit+0x164>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007598:	d102      	bne.n	80075a0 <HAL_SPI_Transmit+0x16a>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d109      	bne.n	80075b4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e0b2      	b.n	800771a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1c7      	bne.n	800754e <HAL_SPI_Transmit+0x118>
 80075be:	e083      	b.n	80076c8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <HAL_SPI_Transmit+0x198>
 80075c8:	8b7b      	ldrh	r3, [r7, #26]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d177      	bne.n	80076be <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d912      	bls.n	80075fe <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075dc:	881a      	ldrh	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e8:	1c9a      	adds	r2, r3, #2
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	3b02      	subs	r3, #2
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80075fc:	e05f      	b.n	80076be <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	330c      	adds	r3, #12
 8007608:	7812      	ldrb	r2, [r2, #0]
 800760a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b01      	subs	r3, #1
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007624:	e04b      	b.n	80076be <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b02      	cmp	r3, #2
 8007632:	d12b      	bne.n	800768c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b01      	cmp	r3, #1
 800763c:	d912      	bls.n	8007664 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007642:	881a      	ldrh	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764e:	1c9a      	adds	r2, r3, #2
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007658:	b29b      	uxth	r3, r3
 800765a:	3b02      	subs	r3, #2
 800765c:	b29a      	uxth	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007662:	e02c      	b.n	80076be <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	330c      	adds	r3, #12
 800766e:	7812      	ldrb	r2, [r2, #0]
 8007670:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800768a:	e018      	b.n	80076be <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800768c:	f7fd f9e0 	bl	8004a50 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d803      	bhi.n	80076a4 <HAL_SPI_Transmit+0x26e>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a2:	d102      	bne.n	80076aa <HAL_SPI_Transmit+0x274>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d109      	bne.n	80076be <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e02d      	b.n	800771a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1ae      	bne.n	8007626 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076c8:	69fa      	ldr	r2, [r7, #28]
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fb65 	bl	8007d9c <SPI_EndRxTxTransaction>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2220      	movs	r2, #32
 80076dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10a      	bne.n	80076fc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076e6:	2300      	movs	r3, #0
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	617b      	str	r3, [r7, #20]
 80076fa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e000      	b.n	800771a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007718:	2300      	movs	r3, #0
  }
}
 800771a:	4618      	mov	r0, r3
 800771c:	3720      	adds	r7, #32
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b08a      	sub	sp, #40	@ 0x28
 8007726:	af00      	add	r7, sp, #0
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	607a      	str	r2, [r7, #4]
 800772e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007730:	2301      	movs	r3, #1
 8007732:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007734:	f7fd f98c 	bl	8004a50 <HAL_GetTick>
 8007738:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007740:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007748:	887b      	ldrh	r3, [r7, #2]
 800774a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800774c:	887b      	ldrh	r3, [r7, #2]
 800774e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007750:	7ffb      	ldrb	r3, [r7, #31]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d00c      	beq.n	8007770 <HAL_SPI_TransmitReceive+0x4e>
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800775c:	d106      	bne.n	800776c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <HAL_SPI_TransmitReceive+0x4a>
 8007766:	7ffb      	ldrb	r3, [r7, #31]
 8007768:	2b04      	cmp	r3, #4
 800776a:	d001      	beq.n	8007770 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800776c:	2302      	movs	r3, #2
 800776e:	e1f3      	b.n	8007b58 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d005      	beq.n	8007782 <HAL_SPI_TransmitReceive+0x60>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <HAL_SPI_TransmitReceive+0x60>
 800777c:	887b      	ldrh	r3, [r7, #2]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e1e8      	b.n	8007b58 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800778c:	2b01      	cmp	r3, #1
 800778e:	d101      	bne.n	8007794 <HAL_SPI_TransmitReceive+0x72>
 8007790:	2302      	movs	r3, #2
 8007792:	e1e1      	b.n	8007b58 <HAL_SPI_TransmitReceive+0x436>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	d003      	beq.n	80077b0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2205      	movs	r2, #5
 80077ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	887a      	ldrh	r2, [r7, #2]
 80077c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	887a      	ldrh	r2, [r7, #2]
 80077c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	887a      	ldrh	r2, [r7, #2]
 80077d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	887a      	ldrh	r2, [r7, #2]
 80077dc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077f2:	d802      	bhi.n	80077fa <HAL_SPI_TransmitReceive+0xd8>
 80077f4:	8abb      	ldrh	r3, [r7, #20]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d908      	bls.n	800780c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007808:	605a      	str	r2, [r3, #4]
 800780a:	e007      	b.n	800781c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800781a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007826:	2b40      	cmp	r3, #64	@ 0x40
 8007828:	d007      	beq.n	800783a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007838:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007842:	f240 8083 	bls.w	800794c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HAL_SPI_TransmitReceive+0x132>
 800784e:	8afb      	ldrh	r3, [r7, #22]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d16f      	bne.n	8007934 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007858:	881a      	ldrh	r2, [r3, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007864:	1c9a      	adds	r2, r3, #2
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800786e:	b29b      	uxth	r3, r3
 8007870:	3b01      	subs	r3, #1
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007878:	e05c      	b.n	8007934 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b02      	cmp	r3, #2
 8007886:	d11b      	bne.n	80078c0 <HAL_SPI_TransmitReceive+0x19e>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800788c:	b29b      	uxth	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d016      	beq.n	80078c0 <HAL_SPI_TransmitReceive+0x19e>
 8007892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007894:	2b01      	cmp	r3, #1
 8007896:	d113      	bne.n	80078c0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789c:	881a      	ldrh	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a8:	1c9a      	adds	r2, r3, #2
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	3b01      	subs	r3, #1
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d11c      	bne.n	8007908 <HAL_SPI_TransmitReceive+0x1e6>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d016      	beq.n	8007908 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e4:	b292      	uxth	r2, r2
 80078e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ec:	1c9a      	adds	r2, r3, #2
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	3b01      	subs	r3, #1
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007904:	2301      	movs	r3, #1
 8007906:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007908:	f7fd f8a2 	bl	8004a50 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007914:	429a      	cmp	r2, r3
 8007916:	d80d      	bhi.n	8007934 <HAL_SPI_TransmitReceive+0x212>
 8007918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791e:	d009      	beq.n	8007934 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e111      	b.n	8007b58 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007938:	b29b      	uxth	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d19d      	bne.n	800787a <HAL_SPI_TransmitReceive+0x158>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d197      	bne.n	800787a <HAL_SPI_TransmitReceive+0x158>
 800794a:	e0e5      	b.n	8007b18 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d003      	beq.n	800795c <HAL_SPI_TransmitReceive+0x23a>
 8007954:	8afb      	ldrh	r3, [r7, #22]
 8007956:	2b01      	cmp	r3, #1
 8007958:	f040 80d1 	bne.w	8007afe <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007960:	b29b      	uxth	r3, r3
 8007962:	2b01      	cmp	r3, #1
 8007964:	d912      	bls.n	800798c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796a:	881a      	ldrh	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007976:	1c9a      	adds	r2, r3, #2
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007980:	b29b      	uxth	r3, r3
 8007982:	3b02      	subs	r3, #2
 8007984:	b29a      	uxth	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800798a:	e0b8      	b.n	8007afe <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	330c      	adds	r3, #12
 8007996:	7812      	ldrb	r2, [r2, #0]
 8007998:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079b2:	e0a4      	b.n	8007afe <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d134      	bne.n	8007a2c <HAL_SPI_TransmitReceive+0x30a>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d02f      	beq.n	8007a2c <HAL_SPI_TransmitReceive+0x30a>
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d12c      	bne.n	8007a2c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d912      	bls.n	8007a02 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e0:	881a      	ldrh	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ec:	1c9a      	adds	r2, r3, #2
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	3b02      	subs	r3, #2
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a00:	e012      	b.n	8007a28 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	330c      	adds	r3, #12
 8007a0c:	7812      	ldrb	r2, [r2, #0]
 8007a0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d148      	bne.n	8007acc <HAL_SPI_TransmitReceive+0x3aa>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d042      	beq.n	8007acc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d923      	bls.n	8007a9a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68da      	ldr	r2, [r3, #12]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5c:	b292      	uxth	r2, r2
 8007a5e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a64:	1c9a      	adds	r2, r3, #2
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3b02      	subs	r3, #2
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d81f      	bhi.n	8007ac8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007a96:	605a      	str	r2, [r3, #4]
 8007a98:	e016      	b.n	8007ac8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f103 020c 	add.w	r2, r3, #12
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa6:	7812      	ldrb	r2, [r2, #0]
 8007aa8:	b2d2      	uxtb	r2, r2
 8007aaa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab0:	1c5a      	adds	r2, r3, #1
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007acc:	f7fc ffc0 	bl	8004a50 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d803      	bhi.n	8007ae4 <HAL_SPI_TransmitReceive+0x3c2>
 8007adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae2:	d102      	bne.n	8007aea <HAL_SPI_TransmitReceive+0x3c8>
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d109      	bne.n	8007afe <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e02c      	b.n	8007b58 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f47f af55 	bne.w	80079b4 <HAL_SPI_TransmitReceive+0x292>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f47f af4e 	bne.w	80079b4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b18:	6a3a      	ldr	r2, [r7, #32]
 8007b1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 f93d 	bl	8007d9c <SPI_EndRxTxTransaction>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d008      	beq.n	8007b3a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e00e      	b.n	8007b58 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e000      	b.n	8007b58 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007b56:	2300      	movs	r3, #0
  }
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3728      	adds	r7, #40	@ 0x28
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b70:	f7fc ff6e 	bl	8004a50 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b78:	1a9b      	subs	r3, r3, r2
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b80:	f7fc ff66 	bl	8004a50 <HAL_GetTick>
 8007b84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b86:	4b39      	ldr	r3, [pc, #228]	@ (8007c6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	015b      	lsls	r3, r3, #5
 8007b8c:	0d1b      	lsrs	r3, r3, #20
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	fb02 f303 	mul.w	r3, r2, r3
 8007b94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b96:	e054      	b.n	8007c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9e:	d050      	beq.n	8007c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ba0:	f7fc ff56 	bl	8004a50 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d902      	bls.n	8007bb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d13d      	bne.n	8007c32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007bc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bce:	d111      	bne.n	8007bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bd8:	d004      	beq.n	8007be4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007be2:	d107      	bne.n	8007bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bfc:	d10f      	bne.n	8007c1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e017      	b.n	8007c62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	bf0c      	ite	eq
 8007c52:	2301      	moveq	r3, #1
 8007c54:	2300      	movne	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	461a      	mov	r2, r3
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d19b      	bne.n	8007b98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3720      	adds	r7, #32
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20000008 	.word	0x20000008

08007c70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08a      	sub	sp, #40	@ 0x28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007c82:	f7fc fee5 	bl	8004a50 <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8a:	1a9b      	subs	r3, r3, r2
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	4413      	add	r3, r2
 8007c90:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007c92:	f7fc fedd 	bl	8004a50 <HAL_GetTick>
 8007c96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	330c      	adds	r3, #12
 8007c9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007ca0:	4b3d      	ldr	r3, [pc, #244]	@ (8007d98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	00da      	lsls	r2, r3, #3
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	0d1b      	lsrs	r3, r3, #20
 8007cb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cb2:	fb02 f303 	mul.w	r3, r2, r3
 8007cb6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007cb8:	e060      	b.n	8007d7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007cc0:	d107      	bne.n	8007cd2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d104      	bne.n	8007cd2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd8:	d050      	beq.n	8007d7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cda:	f7fc feb9 	bl	8004a50 <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d902      	bls.n	8007cf0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d13d      	bne.n	8007d6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007cfe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d08:	d111      	bne.n	8007d2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d12:	d004      	beq.n	8007d1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d1c:	d107      	bne.n	8007d2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d36:	d10f      	bne.n	8007d58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e010      	b.n	8007d8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	4013      	ands	r3, r2
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d196      	bne.n	8007cba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3728      	adds	r7, #40	@ 0x28
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	20000008 	.word	0x20000008

08007d9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af02      	add	r7, sp, #8
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7ff ff5b 	bl	8007c70 <SPI_WaitFifoStateUntilTimeout>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d007      	beq.n	8007dd0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dc4:	f043 0220 	orr.w	r2, r3, #32
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e027      	b.n	8007e20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2180      	movs	r1, #128	@ 0x80
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f7ff fec0 	bl	8007b60 <SPI_WaitFlagStateUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d007      	beq.n	8007df6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dea:	f043 0220 	orr.w	r2, r3, #32
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e014      	b.n	8007e20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f7ff ff34 	bl	8007c70 <SPI_WaitFifoStateUntilTimeout>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d007      	beq.n	8007e1e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e12:	f043 0220 	orr.w	r2, r3, #32
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e000      	b.n	8007e20 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e049      	b.n	8007ece <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7fb fb1c 	bl	800348c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	f000 f984 	bl	8008174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_TIM_ConfigClockSource+0x1c>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e0ee      	b.n	80080d2 <HAL_TIM_ConfigClockSource+0x1fa>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2202      	movs	r2, #2
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007f12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a6b      	ldr	r2, [pc, #428]	@ (80080dc <HAL_TIM_ConfigClockSource+0x204>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	f000 80b9 	beq.w	80080a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007f34:	4a69      	ldr	r2, [pc, #420]	@ (80080dc <HAL_TIM_ConfigClockSource+0x204>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	f200 80be 	bhi.w	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007f3c:	4a68      	ldr	r2, [pc, #416]	@ (80080e0 <HAL_TIM_ConfigClockSource+0x208>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	f000 80b1 	beq.w	80080a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007f44:	4a66      	ldr	r2, [pc, #408]	@ (80080e0 <HAL_TIM_ConfigClockSource+0x208>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	f200 80b6 	bhi.w	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007f4c:	4a65      	ldr	r2, [pc, #404]	@ (80080e4 <HAL_TIM_ConfigClockSource+0x20c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	f000 80a9 	beq.w	80080a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007f54:	4a63      	ldr	r2, [pc, #396]	@ (80080e4 <HAL_TIM_ConfigClockSource+0x20c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	f200 80ae 	bhi.w	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007f5c:	4a62      	ldr	r2, [pc, #392]	@ (80080e8 <HAL_TIM_ConfigClockSource+0x210>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	f000 80a1 	beq.w	80080a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007f64:	4a60      	ldr	r2, [pc, #384]	@ (80080e8 <HAL_TIM_ConfigClockSource+0x210>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	f200 80a6 	bhi.w	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007f6c:	4a5f      	ldr	r2, [pc, #380]	@ (80080ec <HAL_TIM_ConfigClockSource+0x214>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	f000 8099 	beq.w	80080a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007f74:	4a5d      	ldr	r2, [pc, #372]	@ (80080ec <HAL_TIM_ConfigClockSource+0x214>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	f200 809e 	bhi.w	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007f7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f80:	f000 8091 	beq.w	80080a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007f84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f88:	f200 8096 	bhi.w	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007f8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f90:	f000 8089 	beq.w	80080a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007f94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f98:	f200 808e 	bhi.w	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007f9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fa0:	d03e      	beq.n	8008020 <HAL_TIM_ConfigClockSource+0x148>
 8007fa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fa6:	f200 8087 	bhi.w	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fae:	f000 8086 	beq.w	80080be <HAL_TIM_ConfigClockSource+0x1e6>
 8007fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fb6:	d87f      	bhi.n	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007fb8:	2b70      	cmp	r3, #112	@ 0x70
 8007fba:	d01a      	beq.n	8007ff2 <HAL_TIM_ConfigClockSource+0x11a>
 8007fbc:	2b70      	cmp	r3, #112	@ 0x70
 8007fbe:	d87b      	bhi.n	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007fc0:	2b60      	cmp	r3, #96	@ 0x60
 8007fc2:	d050      	beq.n	8008066 <HAL_TIM_ConfigClockSource+0x18e>
 8007fc4:	2b60      	cmp	r3, #96	@ 0x60
 8007fc6:	d877      	bhi.n	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007fc8:	2b50      	cmp	r3, #80	@ 0x50
 8007fca:	d03c      	beq.n	8008046 <HAL_TIM_ConfigClockSource+0x16e>
 8007fcc:	2b50      	cmp	r3, #80	@ 0x50
 8007fce:	d873      	bhi.n	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007fd0:	2b40      	cmp	r3, #64	@ 0x40
 8007fd2:	d058      	beq.n	8008086 <HAL_TIM_ConfigClockSource+0x1ae>
 8007fd4:	2b40      	cmp	r3, #64	@ 0x40
 8007fd6:	d86f      	bhi.n	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007fd8:	2b30      	cmp	r3, #48	@ 0x30
 8007fda:	d064      	beq.n	80080a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007fdc:	2b30      	cmp	r3, #48	@ 0x30
 8007fde:	d86b      	bhi.n	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007fe0:	2b20      	cmp	r3, #32
 8007fe2:	d060      	beq.n	80080a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	d867      	bhi.n	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d05c      	beq.n	80080a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007fec:	2b10      	cmp	r3, #16
 8007fee:	d05a      	beq.n	80080a6 <HAL_TIM_ConfigClockSource+0x1ce>
 8007ff0:	e062      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008002:	f000 fabd 	bl	8008580 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008014:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	609a      	str	r2, [r3, #8]
      break;
 800801e:	e04f      	b.n	80080c0 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008030:	f000 faa6 	bl	8008580 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689a      	ldr	r2, [r3, #8]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008042:	609a      	str	r2, [r3, #8]
      break;
 8008044:	e03c      	b.n	80080c0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008052:	461a      	mov	r2, r3
 8008054:	f000 fa18 	bl	8008488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2150      	movs	r1, #80	@ 0x50
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fa71 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 8008064:	e02c      	b.n	80080c0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008072:	461a      	mov	r2, r3
 8008074:	f000 fa37 	bl	80084e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2160      	movs	r1, #96	@ 0x60
 800807e:	4618      	mov	r0, r3
 8008080:	f000 fa61 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 8008084:	e01c      	b.n	80080c0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008092:	461a      	mov	r2, r3
 8008094:	f000 f9f8 	bl	8008488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2140      	movs	r1, #64	@ 0x40
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fa51 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 80080a4:	e00c      	b.n	80080c0 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4619      	mov	r1, r3
 80080b0:	4610      	mov	r0, r2
 80080b2:	f000 fa48 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 80080b6:	e003      	b.n	80080c0 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	73fb      	strb	r3, [r7, #15]
      break;
 80080bc:	e000      	b.n	80080c0 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80080be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	00100070 	.word	0x00100070
 80080e0:	00100050 	.word	0x00100050
 80080e4:	00100040 	.word	0x00100040
 80080e8:	00100030 	.word	0x00100030
 80080ec:	00100020 	.word	0x00100020

080080f0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008100:	2b01      	cmp	r3, #1
 8008102:	d101      	bne.n	8008108 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008104:	2302      	movs	r3, #2
 8008106:	e031      	b.n	800816c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f8de 	bl	80082dc <TIM_SlaveTimer_SetConfig>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d009      	beq.n	800813a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e018      	b.n	800816c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68da      	ldr	r2, [r3, #12]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008148:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008158:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a4c      	ldr	r2, [pc, #304]	@ (80082b8 <TIM_Base_SetConfig+0x144>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d017      	beq.n	80081bc <TIM_Base_SetConfig+0x48>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008192:	d013      	beq.n	80081bc <TIM_Base_SetConfig+0x48>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a49      	ldr	r2, [pc, #292]	@ (80082bc <TIM_Base_SetConfig+0x148>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d00f      	beq.n	80081bc <TIM_Base_SetConfig+0x48>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a48      	ldr	r2, [pc, #288]	@ (80082c0 <TIM_Base_SetConfig+0x14c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00b      	beq.n	80081bc <TIM_Base_SetConfig+0x48>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a47      	ldr	r2, [pc, #284]	@ (80082c4 <TIM_Base_SetConfig+0x150>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d007      	beq.n	80081bc <TIM_Base_SetConfig+0x48>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a46      	ldr	r2, [pc, #280]	@ (80082c8 <TIM_Base_SetConfig+0x154>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d003      	beq.n	80081bc <TIM_Base_SetConfig+0x48>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a45      	ldr	r2, [pc, #276]	@ (80082cc <TIM_Base_SetConfig+0x158>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d108      	bne.n	80081ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a39      	ldr	r2, [pc, #228]	@ (80082b8 <TIM_Base_SetConfig+0x144>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d023      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081dc:	d01f      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a36      	ldr	r2, [pc, #216]	@ (80082bc <TIM_Base_SetConfig+0x148>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d01b      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a35      	ldr	r2, [pc, #212]	@ (80082c0 <TIM_Base_SetConfig+0x14c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d017      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a34      	ldr	r2, [pc, #208]	@ (80082c4 <TIM_Base_SetConfig+0x150>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d013      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a33      	ldr	r2, [pc, #204]	@ (80082c8 <TIM_Base_SetConfig+0x154>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00f      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a33      	ldr	r2, [pc, #204]	@ (80082d0 <TIM_Base_SetConfig+0x15c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00b      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a32      	ldr	r2, [pc, #200]	@ (80082d4 <TIM_Base_SetConfig+0x160>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d007      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a31      	ldr	r2, [pc, #196]	@ (80082d8 <TIM_Base_SetConfig+0x164>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d003      	beq.n	800821e <TIM_Base_SetConfig+0xaa>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a2c      	ldr	r2, [pc, #176]	@ (80082cc <TIM_Base_SetConfig+0x158>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d108      	bne.n	8008230 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a18      	ldr	r2, [pc, #96]	@ (80082b8 <TIM_Base_SetConfig+0x144>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d013      	beq.n	8008284 <TIM_Base_SetConfig+0x110>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a1a      	ldr	r2, [pc, #104]	@ (80082c8 <TIM_Base_SetConfig+0x154>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d00f      	beq.n	8008284 <TIM_Base_SetConfig+0x110>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a1a      	ldr	r2, [pc, #104]	@ (80082d0 <TIM_Base_SetConfig+0x15c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d00b      	beq.n	8008284 <TIM_Base_SetConfig+0x110>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a19      	ldr	r2, [pc, #100]	@ (80082d4 <TIM_Base_SetConfig+0x160>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d007      	beq.n	8008284 <TIM_Base_SetConfig+0x110>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a18      	ldr	r2, [pc, #96]	@ (80082d8 <TIM_Base_SetConfig+0x164>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d003      	beq.n	8008284 <TIM_Base_SetConfig+0x110>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a13      	ldr	r2, [pc, #76]	@ (80082cc <TIM_Base_SetConfig+0x158>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d103      	bne.n	800828c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	691a      	ldr	r2, [r3, #16]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b01      	cmp	r3, #1
 800829c:	d105      	bne.n	80082aa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	f023 0201 	bic.w	r2, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	611a      	str	r2, [r3, #16]
  }
}
 80082aa:	bf00      	nop
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	40012c00 	.word	0x40012c00
 80082bc:	40000400 	.word	0x40000400
 80082c0:	40000800 	.word	0x40000800
 80082c4:	40000c00 	.word	0x40000c00
 80082c8:	40013400 	.word	0x40013400
 80082cc:	40015000 	.word	0x40015000
 80082d0:	40014000 	.word	0x40014000
 80082d4:	40014400 	.word	0x40014400
 80082d8:	40014800 	.word	0x40014800

080082dc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80082f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082fc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	4313      	orrs	r3, r2
 8008306:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800830e:	f023 0307 	bic.w	r3, r3, #7
 8008312:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	4a52      	ldr	r2, [pc, #328]	@ (8008474 <TIM_SlaveTimer_SetConfig+0x198>)
 800832c:	4293      	cmp	r3, r2
 800832e:	f000 809a 	beq.w	8008466 <TIM_SlaveTimer_SetConfig+0x18a>
 8008332:	4a50      	ldr	r2, [pc, #320]	@ (8008474 <TIM_SlaveTimer_SetConfig+0x198>)
 8008334:	4293      	cmp	r3, r2
 8008336:	f200 8093 	bhi.w	8008460 <TIM_SlaveTimer_SetConfig+0x184>
 800833a:	4a4f      	ldr	r2, [pc, #316]	@ (8008478 <TIM_SlaveTimer_SetConfig+0x19c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	f000 8092 	beq.w	8008466 <TIM_SlaveTimer_SetConfig+0x18a>
 8008342:	4a4d      	ldr	r2, [pc, #308]	@ (8008478 <TIM_SlaveTimer_SetConfig+0x19c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	f200 808b 	bhi.w	8008460 <TIM_SlaveTimer_SetConfig+0x184>
 800834a:	4a4c      	ldr	r2, [pc, #304]	@ (800847c <TIM_SlaveTimer_SetConfig+0x1a0>)
 800834c:	4293      	cmp	r3, r2
 800834e:	f000 808a 	beq.w	8008466 <TIM_SlaveTimer_SetConfig+0x18a>
 8008352:	4a4a      	ldr	r2, [pc, #296]	@ (800847c <TIM_SlaveTimer_SetConfig+0x1a0>)
 8008354:	4293      	cmp	r3, r2
 8008356:	f200 8083 	bhi.w	8008460 <TIM_SlaveTimer_SetConfig+0x184>
 800835a:	4a49      	ldr	r2, [pc, #292]	@ (8008480 <TIM_SlaveTimer_SetConfig+0x1a4>)
 800835c:	4293      	cmp	r3, r2
 800835e:	f000 8082 	beq.w	8008466 <TIM_SlaveTimer_SetConfig+0x18a>
 8008362:	4a47      	ldr	r2, [pc, #284]	@ (8008480 <TIM_SlaveTimer_SetConfig+0x1a4>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d87b      	bhi.n	8008460 <TIM_SlaveTimer_SetConfig+0x184>
 8008368:	4a46      	ldr	r2, [pc, #280]	@ (8008484 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d07b      	beq.n	8008466 <TIM_SlaveTimer_SetConfig+0x18a>
 800836e:	4a45      	ldr	r2, [pc, #276]	@ (8008484 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d875      	bhi.n	8008460 <TIM_SlaveTimer_SetConfig+0x184>
 8008374:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008378:	d075      	beq.n	8008466 <TIM_SlaveTimer_SetConfig+0x18a>
 800837a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800837e:	d86f      	bhi.n	8008460 <TIM_SlaveTimer_SetConfig+0x184>
 8008380:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008384:	d06f      	beq.n	8008466 <TIM_SlaveTimer_SetConfig+0x18a>
 8008386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800838a:	d869      	bhi.n	8008460 <TIM_SlaveTimer_SetConfig+0x184>
 800838c:	2b70      	cmp	r3, #112	@ 0x70
 800838e:	d01a      	beq.n	80083c6 <TIM_SlaveTimer_SetConfig+0xea>
 8008390:	2b70      	cmp	r3, #112	@ 0x70
 8008392:	d865      	bhi.n	8008460 <TIM_SlaveTimer_SetConfig+0x184>
 8008394:	2b60      	cmp	r3, #96	@ 0x60
 8008396:	d059      	beq.n	800844c <TIM_SlaveTimer_SetConfig+0x170>
 8008398:	2b60      	cmp	r3, #96	@ 0x60
 800839a:	d861      	bhi.n	8008460 <TIM_SlaveTimer_SetConfig+0x184>
 800839c:	2b50      	cmp	r3, #80	@ 0x50
 800839e:	d04b      	beq.n	8008438 <TIM_SlaveTimer_SetConfig+0x15c>
 80083a0:	2b50      	cmp	r3, #80	@ 0x50
 80083a2:	d85d      	bhi.n	8008460 <TIM_SlaveTimer_SetConfig+0x184>
 80083a4:	2b40      	cmp	r3, #64	@ 0x40
 80083a6:	d019      	beq.n	80083dc <TIM_SlaveTimer_SetConfig+0x100>
 80083a8:	2b40      	cmp	r3, #64	@ 0x40
 80083aa:	d859      	bhi.n	8008460 <TIM_SlaveTimer_SetConfig+0x184>
 80083ac:	2b30      	cmp	r3, #48	@ 0x30
 80083ae:	d05a      	beq.n	8008466 <TIM_SlaveTimer_SetConfig+0x18a>
 80083b0:	2b30      	cmp	r3, #48	@ 0x30
 80083b2:	d855      	bhi.n	8008460 <TIM_SlaveTimer_SetConfig+0x184>
 80083b4:	2b20      	cmp	r3, #32
 80083b6:	d056      	beq.n	8008466 <TIM_SlaveTimer_SetConfig+0x18a>
 80083b8:	2b20      	cmp	r3, #32
 80083ba:	d851      	bhi.n	8008460 <TIM_SlaveTimer_SetConfig+0x184>
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d052      	beq.n	8008466 <TIM_SlaveTimer_SetConfig+0x18a>
 80083c0:	2b10      	cmp	r3, #16
 80083c2:	d050      	beq.n	8008466 <TIM_SlaveTimer_SetConfig+0x18a>
 80083c4:	e04c      	b.n	8008460 <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80083d6:	f000 f8d3 	bl	8008580 <TIM_ETR_SetConfig>
      break;
 80083da:	e045      	b.n	8008468 <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b05      	cmp	r3, #5
 80083e2:	d004      	beq.n	80083ee <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80083e8:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80083ec:	d101      	bne.n	80083f2 <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e03b      	b.n	800846a <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6a1a      	ldr	r2, [r3, #32]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0201 	bic.w	r2, r2, #1
 8008408:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008418:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	4313      	orrs	r3, r2
 8008424:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	621a      	str	r2, [r3, #32]
      break;
 8008436:	e017      	b.n	8008468 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008444:	461a      	mov	r2, r3
 8008446:	f000 f81f 	bl	8008488 <TIM_TI1_ConfigInputStage>
      break;
 800844a:	e00d      	b.n	8008468 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008458:	461a      	mov	r2, r3
 800845a:	f000 f844 	bl	80084e6 <TIM_TI2_ConfigInputStage>
      break;
 800845e:	e003      	b.n	8008468 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	75fb      	strb	r3, [r7, #23]
      break;
 8008464:	e000      	b.n	8008468 <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 8008466:	bf00      	nop
  }

  return status;
 8008468:	7dfb      	ldrb	r3, [r7, #23]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	00100070 	.word	0x00100070
 8008478:	00100050 	.word	0x00100050
 800847c:	00100040 	.word	0x00100040
 8008480:	00100030 	.word	0x00100030
 8008484:	00100020 	.word	0x00100020

08008488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	f023 0201 	bic.w	r2, r3, #1
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f023 030a 	bic.w	r3, r3, #10
 80084c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	621a      	str	r2, [r3, #32]
}
 80084da:	bf00      	nop
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b087      	sub	sp, #28
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	f023 0210 	bic.w	r2, r3, #16
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	031b      	lsls	r3, r3, #12
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008522:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	4313      	orrs	r3, r2
 800852c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	621a      	str	r2, [r3, #32]
}
 800853a:	bf00      	nop
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008546:	b480      	push	{r7}
 8008548:	b085      	sub	sp, #20
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800855c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4313      	orrs	r3, r2
 8008568:	f043 0307 	orr.w	r3, r3, #7
 800856c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	609a      	str	r2, [r3, #8]
}
 8008574:	bf00      	nop
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
 800858c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800859a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	021a      	lsls	r2, r3, #8
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	431a      	orrs	r2, r3
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	609a      	str	r2, [r3, #8]
}
 80085b4:	bf00      	nop
 80085b6:	371c      	adds	r7, #28
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d101      	bne.n	80085d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085d4:	2302      	movs	r3, #2
 80085d6:	e074      	b.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a34      	ldr	r2, [pc, #208]	@ (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d009      	beq.n	8008616 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a33      	ldr	r2, [pc, #204]	@ (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d004      	beq.n	8008616 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a31      	ldr	r2, [pc, #196]	@ (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d108      	bne.n	8008628 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800861c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4313      	orrs	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800862e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	4313      	orrs	r3, r2
 800863c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a21      	ldr	r2, [pc, #132]	@ (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d022      	beq.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008658:	d01d      	beq.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a1f      	ldr	r2, [pc, #124]	@ (80086dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d018      	beq.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a1d      	ldr	r2, [pc, #116]	@ (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d013      	beq.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a1c      	ldr	r2, [pc, #112]	@ (80086e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d00e      	beq.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a15      	ldr	r2, [pc, #84]	@ (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d009      	beq.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a18      	ldr	r2, [pc, #96]	@ (80086e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d004      	beq.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a11      	ldr	r2, [pc, #68]	@ (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d10c      	bne.n	80086b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800869c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	40012c00 	.word	0x40012c00
 80086d4:	40013400 	.word	0x40013400
 80086d8:	40015000 	.word	0x40015000
 80086dc:	40000400 	.word	0x40000400
 80086e0:	40000800 	.word	0x40000800
 80086e4:	40000c00 	.word	0x40000c00
 80086e8:	40014000 	.word	0x40014000

080086ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e042      	b.n	8008784 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008704:	2b00      	cmp	r3, #0
 8008706:	d106      	bne.n	8008716 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7fb fac9 	bl	8003ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2224      	movs	r2, #36	@ 0x24
 800871a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 0201 	bic.w	r2, r2, #1
 800872c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008732:	2b00      	cmp	r3, #0
 8008734:	d002      	beq.n	800873c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fc1a 	bl	8008f70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f91b 	bl	8008978 <UART_SetConfig>
 8008742:	4603      	mov	r3, r0
 8008744:	2b01      	cmp	r3, #1
 8008746:	d101      	bne.n	800874c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e01b      	b.n	8008784 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800875a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800876a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f042 0201 	orr.w	r2, r2, #1
 800877a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fc99 	bl	80090b4 <UART_CheckIdleState>
 8008782:	4603      	mov	r3, r0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800878c:	b480      	push	{r7}
 800878e:	b091      	sub	sp, #68	@ 0x44
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	4613      	mov	r3, r2
 8008798:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087a0:	2b20      	cmp	r3, #32
 80087a2:	d178      	bne.n	8008896 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <HAL_UART_Transmit_IT+0x24>
 80087aa:	88fb      	ldrh	r3, [r7, #6]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e071      	b.n	8008898 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	88fa      	ldrh	r2, [r7, #6]
 80087be:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	88fa      	ldrh	r2, [r7, #6]
 80087c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2221      	movs	r2, #33	@ 0x21
 80087dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087e8:	d12a      	bne.n	8008840 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087f2:	d107      	bne.n	8008804 <HAL_UART_Transmit_IT+0x78>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d103      	bne.n	8008804 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4a29      	ldr	r2, [pc, #164]	@ (80088a4 <HAL_UART_Transmit_IT+0x118>)
 8008800:	679a      	str	r2, [r3, #120]	@ 0x78
 8008802:	e002      	b.n	800880a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4a28      	ldr	r2, [pc, #160]	@ (80088a8 <HAL_UART_Transmit_IT+0x11c>)
 8008808:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3308      	adds	r3, #8
 8008810:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800881a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008820:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3308      	adds	r3, #8
 8008828:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800882a:	637a      	str	r2, [r7, #52]	@ 0x34
 800882c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e5      	bne.n	800880a <HAL_UART_Transmit_IT+0x7e>
 800883e:	e028      	b.n	8008892 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008848:	d107      	bne.n	800885a <HAL_UART_Transmit_IT+0xce>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d103      	bne.n	800885a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	4a15      	ldr	r2, [pc, #84]	@ (80088ac <HAL_UART_Transmit_IT+0x120>)
 8008856:	679a      	str	r2, [r3, #120]	@ 0x78
 8008858:	e002      	b.n	8008860 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4a14      	ldr	r2, [pc, #80]	@ (80088b0 <HAL_UART_Transmit_IT+0x124>)
 800885e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	e853 3f00 	ldrex	r3, [r3]
 800886c:	613b      	str	r3, [r7, #16]
   return(result);
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800887e:	623b      	str	r3, [r7, #32]
 8008880:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	69f9      	ldr	r1, [r7, #28]
 8008884:	6a3a      	ldr	r2, [r7, #32]
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	61bb      	str	r3, [r7, #24]
   return(result);
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e6      	bne.n	8008860 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	e000      	b.n	8008898 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008896:	2302      	movs	r3, #2
  }
}
 8008898:	4618      	mov	r0, r3
 800889a:	3744      	adds	r7, #68	@ 0x44
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	0800984f 	.word	0x0800984f
 80088a8:	0800976f 	.word	0x0800976f
 80088ac:	080096ad 	.word	0x080096ad
 80088b0:	080095f5 	.word	0x080095f5

080088b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b08a      	sub	sp, #40	@ 0x28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	4613      	mov	r3, r2
 80088c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088c8:	2b20      	cmp	r3, #32
 80088ca:	d137      	bne.n	800893c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d002      	beq.n	80088d8 <HAL_UART_Receive_IT+0x24>
 80088d2:	88fb      	ldrh	r3, [r7, #6]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e030      	b.n	800893e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a18      	ldr	r2, [pc, #96]	@ (8008948 <HAL_UART_Receive_IT+0x94>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d01f      	beq.n	800892c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d018      	beq.n	800892c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	e853 3f00 	ldrex	r3, [r3]
 8008906:	613b      	str	r3, [r7, #16]
   return(result);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800890e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	461a      	mov	r2, r3
 8008916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008918:	623b      	str	r3, [r7, #32]
 800891a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891c:	69f9      	ldr	r1, [r7, #28]
 800891e:	6a3a      	ldr	r2, [r7, #32]
 8008920:	e841 2300 	strex	r3, r2, [r1]
 8008924:	61bb      	str	r3, [r7, #24]
   return(result);
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e6      	bne.n	80088fa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800892c:	88fb      	ldrh	r3, [r7, #6]
 800892e:	461a      	mov	r2, r3
 8008930:	68b9      	ldr	r1, [r7, #8]
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 fcd6 	bl	80092e4 <UART_Start_Receive_IT>
 8008938:	4603      	mov	r3, r0
 800893a:	e000      	b.n	800893e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800893c:	2302      	movs	r3, #2
  }
}
 800893e:	4618      	mov	r0, r3
 8008940:	3728      	adds	r7, #40	@ 0x28
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	40008000 	.word	0x40008000

0800894c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800897c:	b08c      	sub	sp, #48	@ 0x30
 800897e:	af00      	add	r7, sp, #0
 8008980:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	431a      	orrs	r2, r3
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	431a      	orrs	r2, r3
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	4313      	orrs	r3, r2
 800899e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	4baa      	ldr	r3, [pc, #680]	@ (8008c50 <UART_SetConfig+0x2d8>)
 80089a8:	4013      	ands	r3, r2
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	6812      	ldr	r2, [r2, #0]
 80089ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089b0:	430b      	orrs	r3, r1
 80089b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	68da      	ldr	r2, [r3, #12]
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a9f      	ldr	r2, [pc, #636]	@ (8008c54 <UART_SetConfig+0x2dc>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d004      	beq.n	80089e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089e0:	4313      	orrs	r3, r2
 80089e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80089ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	6812      	ldr	r2, [r2, #0]
 80089f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089f8:	430b      	orrs	r3, r1
 80089fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a02:	f023 010f 	bic.w	r1, r3, #15
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a90      	ldr	r2, [pc, #576]	@ (8008c58 <UART_SetConfig+0x2e0>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d125      	bne.n	8008a68 <UART_SetConfig+0xf0>
 8008a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8008c5c <UART_SetConfig+0x2e4>)
 8008a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a22:	f003 0303 	and.w	r3, r3, #3
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d81a      	bhi.n	8008a60 <UART_SetConfig+0xe8>
 8008a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a30 <UART_SetConfig+0xb8>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a41 	.word	0x08008a41
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	08008a49 	.word	0x08008a49
 8008a3c:	08008a59 	.word	0x08008a59
 8008a40:	2301      	movs	r3, #1
 8008a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a46:	e116      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008a48:	2302      	movs	r3, #2
 8008a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a4e:	e112      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a56:	e10e      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a5e:	e10a      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a66:	e106      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a7c      	ldr	r2, [pc, #496]	@ (8008c60 <UART_SetConfig+0x2e8>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d138      	bne.n	8008ae4 <UART_SetConfig+0x16c>
 8008a72:	4b7a      	ldr	r3, [pc, #488]	@ (8008c5c <UART_SetConfig+0x2e4>)
 8008a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a78:	f003 030c 	and.w	r3, r3, #12
 8008a7c:	2b0c      	cmp	r3, #12
 8008a7e:	d82d      	bhi.n	8008adc <UART_SetConfig+0x164>
 8008a80:	a201      	add	r2, pc, #4	@ (adr r2, 8008a88 <UART_SetConfig+0x110>)
 8008a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a86:	bf00      	nop
 8008a88:	08008abd 	.word	0x08008abd
 8008a8c:	08008add 	.word	0x08008add
 8008a90:	08008add 	.word	0x08008add
 8008a94:	08008add 	.word	0x08008add
 8008a98:	08008acd 	.word	0x08008acd
 8008a9c:	08008add 	.word	0x08008add
 8008aa0:	08008add 	.word	0x08008add
 8008aa4:	08008add 	.word	0x08008add
 8008aa8:	08008ac5 	.word	0x08008ac5
 8008aac:	08008add 	.word	0x08008add
 8008ab0:	08008add 	.word	0x08008add
 8008ab4:	08008add 	.word	0x08008add
 8008ab8:	08008ad5 	.word	0x08008ad5
 8008abc:	2300      	movs	r3, #0
 8008abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ac2:	e0d8      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aca:	e0d4      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008acc:	2304      	movs	r3, #4
 8008ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ad2:	e0d0      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008ad4:	2308      	movs	r3, #8
 8008ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ada:	e0cc      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008adc:	2310      	movs	r3, #16
 8008ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ae2:	e0c8      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a5e      	ldr	r2, [pc, #376]	@ (8008c64 <UART_SetConfig+0x2ec>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d125      	bne.n	8008b3a <UART_SetConfig+0x1c2>
 8008aee:	4b5b      	ldr	r3, [pc, #364]	@ (8008c5c <UART_SetConfig+0x2e4>)
 8008af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008af4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008af8:	2b30      	cmp	r3, #48	@ 0x30
 8008afa:	d016      	beq.n	8008b2a <UART_SetConfig+0x1b2>
 8008afc:	2b30      	cmp	r3, #48	@ 0x30
 8008afe:	d818      	bhi.n	8008b32 <UART_SetConfig+0x1ba>
 8008b00:	2b20      	cmp	r3, #32
 8008b02:	d00a      	beq.n	8008b1a <UART_SetConfig+0x1a2>
 8008b04:	2b20      	cmp	r3, #32
 8008b06:	d814      	bhi.n	8008b32 <UART_SetConfig+0x1ba>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <UART_SetConfig+0x19a>
 8008b0c:	2b10      	cmp	r3, #16
 8008b0e:	d008      	beq.n	8008b22 <UART_SetConfig+0x1aa>
 8008b10:	e00f      	b.n	8008b32 <UART_SetConfig+0x1ba>
 8008b12:	2300      	movs	r3, #0
 8008b14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b18:	e0ad      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b20:	e0a9      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008b22:	2304      	movs	r3, #4
 8008b24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b28:	e0a5      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b30:	e0a1      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008b32:	2310      	movs	r3, #16
 8008b34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b38:	e09d      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a4a      	ldr	r2, [pc, #296]	@ (8008c68 <UART_SetConfig+0x2f0>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d125      	bne.n	8008b90 <UART_SetConfig+0x218>
 8008b44:	4b45      	ldr	r3, [pc, #276]	@ (8008c5c <UART_SetConfig+0x2e4>)
 8008b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b50:	d016      	beq.n	8008b80 <UART_SetConfig+0x208>
 8008b52:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b54:	d818      	bhi.n	8008b88 <UART_SetConfig+0x210>
 8008b56:	2b80      	cmp	r3, #128	@ 0x80
 8008b58:	d00a      	beq.n	8008b70 <UART_SetConfig+0x1f8>
 8008b5a:	2b80      	cmp	r3, #128	@ 0x80
 8008b5c:	d814      	bhi.n	8008b88 <UART_SetConfig+0x210>
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <UART_SetConfig+0x1f0>
 8008b62:	2b40      	cmp	r3, #64	@ 0x40
 8008b64:	d008      	beq.n	8008b78 <UART_SetConfig+0x200>
 8008b66:	e00f      	b.n	8008b88 <UART_SetConfig+0x210>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b6e:	e082      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008b70:	2302      	movs	r3, #2
 8008b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b76:	e07e      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008b78:	2304      	movs	r3, #4
 8008b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b7e:	e07a      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008b80:	2308      	movs	r3, #8
 8008b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b86:	e076      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008b88:	2310      	movs	r3, #16
 8008b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b8e:	e072      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a35      	ldr	r2, [pc, #212]	@ (8008c6c <UART_SetConfig+0x2f4>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d12a      	bne.n	8008bf0 <UART_SetConfig+0x278>
 8008b9a:	4b30      	ldr	r3, [pc, #192]	@ (8008c5c <UART_SetConfig+0x2e4>)
 8008b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ba0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ba4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ba8:	d01a      	beq.n	8008be0 <UART_SetConfig+0x268>
 8008baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bae:	d81b      	bhi.n	8008be8 <UART_SetConfig+0x270>
 8008bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bb4:	d00c      	beq.n	8008bd0 <UART_SetConfig+0x258>
 8008bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bba:	d815      	bhi.n	8008be8 <UART_SetConfig+0x270>
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d003      	beq.n	8008bc8 <UART_SetConfig+0x250>
 8008bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bc4:	d008      	beq.n	8008bd8 <UART_SetConfig+0x260>
 8008bc6:	e00f      	b.n	8008be8 <UART_SetConfig+0x270>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bce:	e052      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bd6:	e04e      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008bd8:	2304      	movs	r3, #4
 8008bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bde:	e04a      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008be0:	2308      	movs	r3, #8
 8008be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008be6:	e046      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008be8:	2310      	movs	r3, #16
 8008bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bee:	e042      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a17      	ldr	r2, [pc, #92]	@ (8008c54 <UART_SetConfig+0x2dc>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d13a      	bne.n	8008c70 <UART_SetConfig+0x2f8>
 8008bfa:	4b18      	ldr	r3, [pc, #96]	@ (8008c5c <UART_SetConfig+0x2e4>)
 8008bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008c04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008c08:	d01a      	beq.n	8008c40 <UART_SetConfig+0x2c8>
 8008c0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008c0e:	d81b      	bhi.n	8008c48 <UART_SetConfig+0x2d0>
 8008c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c14:	d00c      	beq.n	8008c30 <UART_SetConfig+0x2b8>
 8008c16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c1a:	d815      	bhi.n	8008c48 <UART_SetConfig+0x2d0>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <UART_SetConfig+0x2b0>
 8008c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c24:	d008      	beq.n	8008c38 <UART_SetConfig+0x2c0>
 8008c26:	e00f      	b.n	8008c48 <UART_SetConfig+0x2d0>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c2e:	e022      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008c30:	2302      	movs	r3, #2
 8008c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c36:	e01e      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008c38:	2304      	movs	r3, #4
 8008c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c3e:	e01a      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008c40:	2308      	movs	r3, #8
 8008c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c46:	e016      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008c48:	2310      	movs	r3, #16
 8008c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c4e:	e012      	b.n	8008c76 <UART_SetConfig+0x2fe>
 8008c50:	cfff69f3 	.word	0xcfff69f3
 8008c54:	40008000 	.word	0x40008000
 8008c58:	40013800 	.word	0x40013800
 8008c5c:	40021000 	.word	0x40021000
 8008c60:	40004400 	.word	0x40004400
 8008c64:	40004800 	.word	0x40004800
 8008c68:	40004c00 	.word	0x40004c00
 8008c6c:	40005000 	.word	0x40005000
 8008c70:	2310      	movs	r3, #16
 8008c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4aae      	ldr	r2, [pc, #696]	@ (8008f34 <UART_SetConfig+0x5bc>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	f040 8097 	bne.w	8008db0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c86:	2b08      	cmp	r3, #8
 8008c88:	d823      	bhi.n	8008cd2 <UART_SetConfig+0x35a>
 8008c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c90 <UART_SetConfig+0x318>)
 8008c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c90:	08008cb5 	.word	0x08008cb5
 8008c94:	08008cd3 	.word	0x08008cd3
 8008c98:	08008cbd 	.word	0x08008cbd
 8008c9c:	08008cd3 	.word	0x08008cd3
 8008ca0:	08008cc3 	.word	0x08008cc3
 8008ca4:	08008cd3 	.word	0x08008cd3
 8008ca8:	08008cd3 	.word	0x08008cd3
 8008cac:	08008cd3 	.word	0x08008cd3
 8008cb0:	08008ccb 	.word	0x08008ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cb4:	f7fe f82c 	bl	8006d10 <HAL_RCC_GetPCLK1Freq>
 8008cb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cba:	e010      	b.n	8008cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cbc:	4b9e      	ldr	r3, [pc, #632]	@ (8008f38 <UART_SetConfig+0x5c0>)
 8008cbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008cc0:	e00d      	b.n	8008cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cc2:	f7fd ffb7 	bl	8006c34 <HAL_RCC_GetSysClockFreq>
 8008cc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cc8:	e009      	b.n	8008cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008cd0:	e005      	b.n	8008cde <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008cdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f000 8130 	beq.w	8008f46 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cea:	4a94      	ldr	r2, [pc, #592]	@ (8008f3c <UART_SetConfig+0x5c4>)
 8008cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cf8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	005b      	lsls	r3, r3, #1
 8008d02:	4413      	add	r3, r2
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d305      	bcc.n	8008d16 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d903      	bls.n	8008d1e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008d1c:	e113      	b.n	8008f46 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d20:	2200      	movs	r2, #0
 8008d22:	60bb      	str	r3, [r7, #8]
 8008d24:	60fa      	str	r2, [r7, #12]
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d2a:	4a84      	ldr	r2, [pc, #528]	@ (8008f3c <UART_SetConfig+0x5c4>)
 8008d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	2200      	movs	r2, #0
 8008d34:	603b      	str	r3, [r7, #0]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d40:	f7f7 fad6 	bl	80002f0 <__aeabi_uldivmod>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4610      	mov	r0, r2
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	f04f 0200 	mov.w	r2, #0
 8008d50:	f04f 0300 	mov.w	r3, #0
 8008d54:	020b      	lsls	r3, r1, #8
 8008d56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d5a:	0202      	lsls	r2, r0, #8
 8008d5c:	6979      	ldr	r1, [r7, #20]
 8008d5e:	6849      	ldr	r1, [r1, #4]
 8008d60:	0849      	lsrs	r1, r1, #1
 8008d62:	2000      	movs	r0, #0
 8008d64:	460c      	mov	r4, r1
 8008d66:	4605      	mov	r5, r0
 8008d68:	eb12 0804 	adds.w	r8, r2, r4
 8008d6c:	eb43 0905 	adc.w	r9, r3, r5
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	469a      	mov	sl, r3
 8008d78:	4693      	mov	fp, r2
 8008d7a:	4652      	mov	r2, sl
 8008d7c:	465b      	mov	r3, fp
 8008d7e:	4640      	mov	r0, r8
 8008d80:	4649      	mov	r1, r9
 8008d82:	f7f7 fab5 	bl	80002f0 <__aeabi_uldivmod>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d94:	d308      	bcc.n	8008da8 <UART_SetConfig+0x430>
 8008d96:	6a3b      	ldr	r3, [r7, #32]
 8008d98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d9c:	d204      	bcs.n	8008da8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6a3a      	ldr	r2, [r7, #32]
 8008da4:	60da      	str	r2, [r3, #12]
 8008da6:	e0ce      	b.n	8008f46 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008dae:	e0ca      	b.n	8008f46 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008db8:	d166      	bne.n	8008e88 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008dba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008dbe:	2b08      	cmp	r3, #8
 8008dc0:	d827      	bhi.n	8008e12 <UART_SetConfig+0x49a>
 8008dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc8 <UART_SetConfig+0x450>)
 8008dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc8:	08008ded 	.word	0x08008ded
 8008dcc:	08008df5 	.word	0x08008df5
 8008dd0:	08008dfd 	.word	0x08008dfd
 8008dd4:	08008e13 	.word	0x08008e13
 8008dd8:	08008e03 	.word	0x08008e03
 8008ddc:	08008e13 	.word	0x08008e13
 8008de0:	08008e13 	.word	0x08008e13
 8008de4:	08008e13 	.word	0x08008e13
 8008de8:	08008e0b 	.word	0x08008e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dec:	f7fd ff90 	bl	8006d10 <HAL_RCC_GetPCLK1Freq>
 8008df0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008df2:	e014      	b.n	8008e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008df4:	f7fd ffa2 	bl	8006d3c <HAL_RCC_GetPCLK2Freq>
 8008df8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008dfa:	e010      	b.n	8008e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dfc:	4b4e      	ldr	r3, [pc, #312]	@ (8008f38 <UART_SetConfig+0x5c0>)
 8008dfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e00:	e00d      	b.n	8008e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e02:	f7fd ff17 	bl	8006c34 <HAL_RCC_GetSysClockFreq>
 8008e06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e08:	e009      	b.n	8008e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e10:	e005      	b.n	8008e1e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008e12:	2300      	movs	r3, #0
 8008e14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008e1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 8090 	beq.w	8008f46 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2a:	4a44      	ldr	r2, [pc, #272]	@ (8008f3c <UART_SetConfig+0x5c4>)
 8008e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e30:	461a      	mov	r2, r3
 8008e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e38:	005a      	lsls	r2, r3, #1
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	085b      	lsrs	r3, r3, #1
 8008e40:	441a      	add	r2, r3
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	2b0f      	cmp	r3, #15
 8008e50:	d916      	bls.n	8008e80 <UART_SetConfig+0x508>
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e58:	d212      	bcs.n	8008e80 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	f023 030f 	bic.w	r3, r3, #15
 8008e62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	085b      	lsrs	r3, r3, #1
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f003 0307 	and.w	r3, r3, #7
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	8bfb      	ldrh	r3, [r7, #30]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	8bfa      	ldrh	r2, [r7, #30]
 8008e7c:	60da      	str	r2, [r3, #12]
 8008e7e:	e062      	b.n	8008f46 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e86:	e05e      	b.n	8008f46 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d828      	bhi.n	8008ee2 <UART_SetConfig+0x56a>
 8008e90:	a201      	add	r2, pc, #4	@ (adr r2, 8008e98 <UART_SetConfig+0x520>)
 8008e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e96:	bf00      	nop
 8008e98:	08008ebd 	.word	0x08008ebd
 8008e9c:	08008ec5 	.word	0x08008ec5
 8008ea0:	08008ecd 	.word	0x08008ecd
 8008ea4:	08008ee3 	.word	0x08008ee3
 8008ea8:	08008ed3 	.word	0x08008ed3
 8008eac:	08008ee3 	.word	0x08008ee3
 8008eb0:	08008ee3 	.word	0x08008ee3
 8008eb4:	08008ee3 	.word	0x08008ee3
 8008eb8:	08008edb 	.word	0x08008edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ebc:	f7fd ff28 	bl	8006d10 <HAL_RCC_GetPCLK1Freq>
 8008ec0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ec2:	e014      	b.n	8008eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ec4:	f7fd ff3a 	bl	8006d3c <HAL_RCC_GetPCLK2Freq>
 8008ec8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008eca:	e010      	b.n	8008eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8008f38 <UART_SetConfig+0x5c0>)
 8008ece:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ed0:	e00d      	b.n	8008eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ed2:	f7fd feaf 	bl	8006c34 <HAL_RCC_GetSysClockFreq>
 8008ed6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ed8:	e009      	b.n	8008eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ee0:	e005      	b.n	8008eee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008eec:	bf00      	nop
    }

    if (pclk != 0U)
 8008eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d028      	beq.n	8008f46 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef8:	4a10      	ldr	r2, [pc, #64]	@ (8008f3c <UART_SetConfig+0x5c4>)
 8008efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008efe:	461a      	mov	r2, r3
 8008f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f02:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	085b      	lsrs	r3, r3, #1
 8008f0c:	441a      	add	r2, r3
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	2b0f      	cmp	r3, #15
 8008f1c:	d910      	bls.n	8008f40 <UART_SetConfig+0x5c8>
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f24:	d20c      	bcs.n	8008f40 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60da      	str	r2, [r3, #12]
 8008f30:	e009      	b.n	8008f46 <UART_SetConfig+0x5ce>
 8008f32:	bf00      	nop
 8008f34:	40008000 	.word	0x40008000
 8008f38:	00f42400 	.word	0x00f42400
 8008f3c:	0800b1d8 	.word	0x0800b1d8
      }
      else
      {
        ret = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008f62:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3730      	adds	r7, #48	@ 0x30
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7c:	f003 0308 	and.w	r3, r3, #8
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00a      	beq.n	8008f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	430a      	orrs	r2, r1
 8008f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00a      	beq.n	8008fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc0:	f003 0302 	and.w	r3, r3, #2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00a      	beq.n	8008fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00a      	beq.n	8009000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009004:	f003 0310 	and.w	r3, r3, #16
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	430a      	orrs	r2, r1
 8009020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009026:	f003 0320 	and.w	r3, r3, #32
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00a      	beq.n	8009044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	430a      	orrs	r2, r1
 8009042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800904c:	2b00      	cmp	r3, #0
 800904e:	d01a      	beq.n	8009086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	430a      	orrs	r2, r1
 8009064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800906a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800906e:	d10a      	bne.n	8009086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	430a      	orrs	r2, r1
 8009084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800908a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00a      	beq.n	80090a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	430a      	orrs	r2, r1
 80090a6:	605a      	str	r2, [r3, #4]
  }
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b098      	sub	sp, #96	@ 0x60
 80090b8:	af02      	add	r7, sp, #8
 80090ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090c4:	f7fb fcc4 	bl	8004a50 <HAL_GetTick>
 80090c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0308 	and.w	r3, r3, #8
 80090d4:	2b08      	cmp	r3, #8
 80090d6:	d12f      	bne.n	8009138 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090e0:	2200      	movs	r2, #0
 80090e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f88e 	bl	8009208 <UART_WaitOnFlagUntilTimeout>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d022      	beq.n	8009138 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fa:	e853 3f00 	ldrex	r3, [r3]
 80090fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009106:	653b      	str	r3, [r7, #80]	@ 0x50
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	461a      	mov	r2, r3
 800910e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009110:	647b      	str	r3, [r7, #68]	@ 0x44
 8009112:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009114:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009118:	e841 2300 	strex	r3, r2, [r1]
 800911c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800911e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1e6      	bne.n	80090f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2220      	movs	r2, #32
 8009128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e063      	b.n	8009200 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b04      	cmp	r3, #4
 8009144:	d149      	bne.n	80091da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009146:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800914e:	2200      	movs	r2, #0
 8009150:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f857 	bl	8009208 <UART_WaitOnFlagUntilTimeout>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d03c      	beq.n	80091da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	623b      	str	r3, [r7, #32]
   return(result);
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	461a      	mov	r2, r3
 800917c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800917e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009180:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009186:	e841 2300 	strex	r3, r2, [r1]
 800918a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800918c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1e6      	bne.n	8009160 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3308      	adds	r3, #8
 8009198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	e853 3f00 	ldrex	r3, [r3]
 80091a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f023 0301 	bic.w	r3, r3, #1
 80091a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3308      	adds	r3, #8
 80091b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091b2:	61fa      	str	r2, [r7, #28]
 80091b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b6:	69b9      	ldr	r1, [r7, #24]
 80091b8:	69fa      	ldr	r2, [r7, #28]
 80091ba:	e841 2300 	strex	r3, r2, [r1]
 80091be:	617b      	str	r3, [r7, #20]
   return(result);
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1e5      	bne.n	8009192 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e012      	b.n	8009200 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2220      	movs	r2, #32
 80091de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3758      	adds	r7, #88	@ 0x58
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	603b      	str	r3, [r7, #0]
 8009214:	4613      	mov	r3, r2
 8009216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009218:	e04f      	b.n	80092ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009220:	d04b      	beq.n	80092ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009222:	f7fb fc15 	bl	8004a50 <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	429a      	cmp	r2, r3
 8009230:	d302      	bcc.n	8009238 <UART_WaitOnFlagUntilTimeout+0x30>
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d101      	bne.n	800923c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009238:	2303      	movs	r3, #3
 800923a:	e04e      	b.n	80092da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 0304 	and.w	r3, r3, #4
 8009246:	2b00      	cmp	r3, #0
 8009248:	d037      	beq.n	80092ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	2b80      	cmp	r3, #128	@ 0x80
 800924e:	d034      	beq.n	80092ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	2b40      	cmp	r3, #64	@ 0x40
 8009254:	d031      	beq.n	80092ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	69db      	ldr	r3, [r3, #28]
 800925c:	f003 0308 	and.w	r3, r3, #8
 8009260:	2b08      	cmp	r3, #8
 8009262:	d110      	bne.n	8009286 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2208      	movs	r2, #8
 800926a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 f95b 	bl	8009528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2208      	movs	r2, #8
 8009276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e029      	b.n	80092da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	69db      	ldr	r3, [r3, #28]
 800928c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009290:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009294:	d111      	bne.n	80092ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800929e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 f941 	bl	8009528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e00f      	b.n	80092da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	69da      	ldr	r2, [r3, #28]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	4013      	ands	r3, r2
 80092c4:	68ba      	ldr	r2, [r7, #8]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	bf0c      	ite	eq
 80092ca:	2301      	moveq	r3, #1
 80092cc:	2300      	movne	r3, #0
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	461a      	mov	r2, r3
 80092d2:	79fb      	ldrb	r3, [r7, #7]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d0a0      	beq.n	800921a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b0a3      	sub	sp, #140	@ 0x8c
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	4613      	mov	r3, r2
 80092f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	88fa      	ldrh	r2, [r7, #6]
 80092fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	88fa      	ldrh	r2, [r7, #6]
 8009304:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009316:	d10e      	bne.n	8009336 <UART_Start_Receive_IT+0x52>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d105      	bne.n	800932c <UART_Start_Receive_IT+0x48>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009326:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800932a:	e02d      	b.n	8009388 <UART_Start_Receive_IT+0xa4>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	22ff      	movs	r2, #255	@ 0xff
 8009330:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009334:	e028      	b.n	8009388 <UART_Start_Receive_IT+0xa4>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10d      	bne.n	800935a <UART_Start_Receive_IT+0x76>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d104      	bne.n	8009350 <UART_Start_Receive_IT+0x6c>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	22ff      	movs	r2, #255	@ 0xff
 800934a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800934e:	e01b      	b.n	8009388 <UART_Start_Receive_IT+0xa4>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	227f      	movs	r2, #127	@ 0x7f
 8009354:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009358:	e016      	b.n	8009388 <UART_Start_Receive_IT+0xa4>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009362:	d10d      	bne.n	8009380 <UART_Start_Receive_IT+0x9c>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d104      	bne.n	8009376 <UART_Start_Receive_IT+0x92>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	227f      	movs	r2, #127	@ 0x7f
 8009370:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009374:	e008      	b.n	8009388 <UART_Start_Receive_IT+0xa4>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	223f      	movs	r2, #63	@ 0x3f
 800937a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800937e:	e003      	b.n	8009388 <UART_Start_Receive_IT+0xa4>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2222      	movs	r2, #34	@ 0x22
 8009394:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3308      	adds	r3, #8
 800939e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80093a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093aa:	f043 0301 	orr.w	r3, r3, #1
 80093ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3308      	adds	r3, #8
 80093b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80093bc:	673a      	str	r2, [r7, #112]	@ 0x70
 80093be:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80093c2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80093c4:	e841 2300 	strex	r3, r2, [r1]
 80093c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80093ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1e3      	bne.n	8009398 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093d8:	d14f      	bne.n	800947a <UART_Start_Receive_IT+0x196>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80093e0:	88fa      	ldrh	r2, [r7, #6]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d349      	bcc.n	800947a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093ee:	d107      	bne.n	8009400 <UART_Start_Receive_IT+0x11c>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d103      	bne.n	8009400 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4a47      	ldr	r2, [pc, #284]	@ (8009518 <UART_Start_Receive_IT+0x234>)
 80093fc:	675a      	str	r2, [r3, #116]	@ 0x74
 80093fe:	e002      	b.n	8009406 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4a46      	ldr	r2, [pc, #280]	@ (800951c <UART_Start_Receive_IT+0x238>)
 8009404:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d01a      	beq.n	8009444 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009416:	e853 3f00 	ldrex	r3, [r3]
 800941a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800941c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800941e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009422:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	461a      	mov	r2, r3
 800942c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009430:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009432:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009434:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009436:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009438:	e841 2300 	strex	r3, r2, [r1]
 800943c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800943e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1e4      	bne.n	800940e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3308      	adds	r3, #8
 800944a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800944e:	e853 3f00 	ldrex	r3, [r3]
 8009452:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800945a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3308      	adds	r3, #8
 8009462:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009464:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009466:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009468:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800946a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800946c:	e841 2300 	strex	r3, r2, [r1]
 8009470:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1e5      	bne.n	8009444 <UART_Start_Receive_IT+0x160>
 8009478:	e046      	b.n	8009508 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009482:	d107      	bne.n	8009494 <UART_Start_Receive_IT+0x1b0>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d103      	bne.n	8009494 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4a24      	ldr	r2, [pc, #144]	@ (8009520 <UART_Start_Receive_IT+0x23c>)
 8009490:	675a      	str	r2, [r3, #116]	@ 0x74
 8009492:	e002      	b.n	800949a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4a23      	ldr	r2, [pc, #140]	@ (8009524 <UART_Start_Receive_IT+0x240>)
 8009498:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d019      	beq.n	80094d6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094aa:	e853 3f00 	ldrex	r3, [r3]
 80094ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80094b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	461a      	mov	r2, r3
 80094be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094c2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80094c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094c8:	e841 2300 	strex	r3, r2, [r1]
 80094cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80094ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e6      	bne.n	80094a2 <UART_Start_Receive_IT+0x1be>
 80094d4:	e018      	b.n	8009508 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	e853 3f00 	ldrex	r3, [r3]
 80094e2:	613b      	str	r3, [r7, #16]
   return(result);
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	f043 0320 	orr.w	r3, r3, #32
 80094ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	461a      	mov	r2, r3
 80094f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094f4:	623b      	str	r3, [r7, #32]
 80094f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f8:	69f9      	ldr	r1, [r7, #28]
 80094fa:	6a3a      	ldr	r2, [r7, #32]
 80094fc:	e841 2300 	strex	r3, r2, [r1]
 8009500:	61bb      	str	r3, [r7, #24]
   return(result);
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e6      	bne.n	80094d6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	378c      	adds	r7, #140	@ 0x8c
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	0800a00d 	.word	0x0800a00d
 800951c:	08009ca9 	.word	0x08009ca9
 8009520:	08009af1 	.word	0x08009af1
 8009524:	08009939 	.word	0x08009939

08009528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009528:	b480      	push	{r7}
 800952a:	b095      	sub	sp, #84	@ 0x54
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009538:	e853 3f00 	ldrex	r3, [r3]
 800953c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800953e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009540:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009544:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800954e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009550:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009554:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009556:	e841 2300 	strex	r3, r2, [r1]
 800955a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800955c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1e6      	bne.n	8009530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3308      	adds	r3, #8
 8009568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	e853 3f00 	ldrex	r3, [r3]
 8009570:	61fb      	str	r3, [r7, #28]
   return(result);
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009578:	f023 0301 	bic.w	r3, r3, #1
 800957c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3308      	adds	r3, #8
 8009584:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009586:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009588:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800958c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800958e:	e841 2300 	strex	r3, r2, [r1]
 8009592:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1e3      	bne.n	8009562 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d118      	bne.n	80095d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	e853 3f00 	ldrex	r3, [r3]
 80095ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	f023 0310 	bic.w	r3, r3, #16
 80095b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	461a      	mov	r2, r3
 80095be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095c0:	61bb      	str	r3, [r7, #24]
 80095c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c4:	6979      	ldr	r1, [r7, #20]
 80095c6:	69ba      	ldr	r2, [r7, #24]
 80095c8:	e841 2300 	strex	r3, r2, [r1]
 80095cc:	613b      	str	r3, [r7, #16]
   return(result);
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e6      	bne.n	80095a2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2220      	movs	r2, #32
 80095d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80095e8:	bf00      	nop
 80095ea:	3754      	adds	r7, #84	@ 0x54
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b08f      	sub	sp, #60	@ 0x3c
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009602:	2b21      	cmp	r3, #33	@ 0x21
 8009604:	d14c      	bne.n	80096a0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800960c:	b29b      	uxth	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d132      	bne.n	8009678 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	e853 3f00 	ldrex	r3, [r3]
 800961e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009626:	637b      	str	r3, [r7, #52]	@ 0x34
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	461a      	mov	r2, r3
 800962e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009630:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009632:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009638:	e841 2300 	strex	r3, r2, [r1]
 800963c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e6      	bne.n	8009612 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	e853 3f00 	ldrex	r3, [r3]
 8009650:	60bb      	str	r3, [r7, #8]
   return(result);
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009658:	633b      	str	r3, [r7, #48]	@ 0x30
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009662:	61bb      	str	r3, [r7, #24]
 8009664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009666:	6979      	ldr	r1, [r7, #20]
 8009668:	69ba      	ldr	r2, [r7, #24]
 800966a:	e841 2300 	strex	r3, r2, [r1]
 800966e:	613b      	str	r3, [r7, #16]
   return(result);
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1e6      	bne.n	8009644 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009676:	e013      	b.n	80096a0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800967c:	781a      	ldrb	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009688:	1c5a      	adds	r2, r3, #1
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009694:	b29b      	uxth	r3, r3
 8009696:	3b01      	subs	r3, #1
 8009698:	b29a      	uxth	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80096a0:	bf00      	nop
 80096a2:	373c      	adds	r7, #60	@ 0x3c
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b091      	sub	sp, #68	@ 0x44
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ba:	2b21      	cmp	r3, #33	@ 0x21
 80096bc:	d151      	bne.n	8009762 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d132      	bne.n	8009730 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d2:	e853 3f00 	ldrex	r3, [r3]
 80096d6:	623b      	str	r3, [r7, #32]
   return(result);
 80096d8:	6a3b      	ldr	r3, [r7, #32]
 80096da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	461a      	mov	r2, r3
 80096e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80096ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096f0:	e841 2300 	strex	r3, r2, [r1]
 80096f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1e6      	bne.n	80096ca <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	60fb      	str	r3, [r7, #12]
   return(result);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009710:	637b      	str	r3, [r7, #52]	@ 0x34
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800971a:	61fb      	str	r3, [r7, #28]
 800971c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971e:	69b9      	ldr	r1, [r7, #24]
 8009720:	69fa      	ldr	r2, [r7, #28]
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	617b      	str	r3, [r7, #20]
   return(result);
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e6      	bne.n	80096fc <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800972e:	e018      	b.n	8009762 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009734:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009744:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800974a:	1c9a      	adds	r2, r3, #2
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009756:	b29b      	uxth	r3, r3
 8009758:	3b01      	subs	r3, #1
 800975a:	b29a      	uxth	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009762:	bf00      	nop
 8009764:	3744      	adds	r7, #68	@ 0x44
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800976e:	b480      	push	{r7}
 8009770:	b091      	sub	sp, #68	@ 0x44
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800977c:	2b21      	cmp	r3, #33	@ 0x21
 800977e:	d160      	bne.n	8009842 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009786:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009788:	e057      	b.n	800983a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009790:	b29b      	uxth	r3, r3
 8009792:	2b00      	cmp	r3, #0
 8009794:	d133      	bne.n	80097fe <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3308      	adds	r3, #8
 800979c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a0:	e853 3f00 	ldrex	r3, [r3]
 80097a4:	623b      	str	r3, [r7, #32]
   return(result);
 80097a6:	6a3b      	ldr	r3, [r7, #32]
 80097a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80097ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3308      	adds	r3, #8
 80097b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80097b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097be:	e841 2300 	strex	r3, r2, [r1]
 80097c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1e5      	bne.n	8009796 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	e853 3f00 	ldrex	r3, [r3]
 80097d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097de:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	461a      	mov	r2, r3
 80097e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e8:	61fb      	str	r3, [r7, #28]
 80097ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	69b9      	ldr	r1, [r7, #24]
 80097ee:	69fa      	ldr	r2, [r7, #28]
 80097f0:	e841 2300 	strex	r3, r2, [r1]
 80097f4:	617b      	str	r3, [r7, #20]
   return(result);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e6      	bne.n	80097ca <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80097fc:	e021      	b.n	8009842 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009808:	2b00      	cmp	r3, #0
 800980a:	d013      	beq.n	8009834 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009810:	781a      	ldrb	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800981c:	1c5a      	adds	r2, r3, #1
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009828:	b29b      	uxth	r3, r3
 800982a:	3b01      	subs	r3, #1
 800982c:	b29a      	uxth	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009834:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009836:	3b01      	subs	r3, #1
 8009838:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800983a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1a4      	bne.n	800978a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009840:	e7ff      	b.n	8009842 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009842:	bf00      	nop
 8009844:	3744      	adds	r7, #68	@ 0x44
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800984e:	b480      	push	{r7}
 8009850:	b091      	sub	sp, #68	@ 0x44
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800985c:	2b21      	cmp	r3, #33	@ 0x21
 800985e:	d165      	bne.n	800992c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009866:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009868:	e05c      	b.n	8009924 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009870:	b29b      	uxth	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d133      	bne.n	80098de <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3308      	adds	r3, #8
 800987c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987e:	6a3b      	ldr	r3, [r7, #32]
 8009880:	e853 3f00 	ldrex	r3, [r3]
 8009884:	61fb      	str	r3, [r7, #28]
   return(result);
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800988c:	637b      	str	r3, [r7, #52]	@ 0x34
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3308      	adds	r3, #8
 8009894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009896:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009898:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800989c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800989e:	e841 2300 	strex	r3, r2, [r1]
 80098a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1e5      	bne.n	8009876 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	e853 3f00 	ldrex	r3, [r3]
 80098b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098be:	633b      	str	r3, [r7, #48]	@ 0x30
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	461a      	mov	r2, r3
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	61bb      	str	r3, [r7, #24]
 80098ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098cc:	6979      	ldr	r1, [r7, #20]
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	e841 2300 	strex	r3, r2, [r1]
 80098d4:	613b      	str	r3, [r7, #16]
   return(result);
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1e6      	bne.n	80098aa <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80098dc:	e026      	b.n	800992c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	69db      	ldr	r3, [r3, #28]
 80098e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d018      	beq.n	800991e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098f0:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80098f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f4:	881b      	ldrh	r3, [r3, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009900:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009906:	1c9a      	adds	r2, r3, #2
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009912:	b29b      	uxth	r3, r3
 8009914:	3b01      	subs	r3, #1
 8009916:	b29a      	uxth	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800991e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009920:	3b01      	subs	r3, #1
 8009922:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009924:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009926:	2b00      	cmp	r3, #0
 8009928:	d19f      	bne.n	800986a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800992a:	e7ff      	b.n	800992c <UART_TxISR_16BIT_FIFOEN+0xde>
 800992c:	bf00      	nop
 800992e:	3744      	adds	r7, #68	@ 0x44
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b09c      	sub	sp, #112	@ 0x70
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009946:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009950:	2b22      	cmp	r3, #34	@ 0x22
 8009952:	f040 80be 	bne.w	8009ad2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800995c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009960:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009964:	b2d9      	uxtb	r1, r3
 8009966:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800996a:	b2da      	uxtb	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009970:	400a      	ands	r2, r1
 8009972:	b2d2      	uxtb	r2, r2
 8009974:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009986:	b29b      	uxth	r3, r3
 8009988:	3b01      	subs	r3, #1
 800998a:	b29a      	uxth	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009998:	b29b      	uxth	r3, r3
 800999a:	2b00      	cmp	r3, #0
 800999c:	f040 80a1 	bne.w	8009ae2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099a8:	e853 3f00 	ldrex	r3, [r3]
 80099ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	461a      	mov	r2, r3
 80099bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80099be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80099c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80099cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e6      	bne.n	80099a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3308      	adds	r3, #8
 80099d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e4:	f023 0301 	bic.w	r3, r3, #1
 80099e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3308      	adds	r3, #8
 80099f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80099f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80099f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099fa:	e841 2300 	strex	r3, r2, [r1]
 80099fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1e5      	bne.n	80099d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a33      	ldr	r2, [pc, #204]	@ (8009aec <UART_RxISR_8BIT+0x1b4>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d01f      	beq.n	8009a64 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d018      	beq.n	8009a64 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3a:	e853 3f00 	ldrex	r3, [r3]
 8009a3e:	623b      	str	r3, [r7, #32]
   return(result);
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a46:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a58:	e841 2300 	strex	r3, r2, [r1]
 8009a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1e6      	bne.n	8009a32 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d12e      	bne.n	8009aca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	e853 3f00 	ldrex	r3, [r3]
 8009a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f023 0310 	bic.w	r3, r3, #16
 8009a86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a90:	61fb      	str	r3, [r7, #28]
 8009a92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a94:	69b9      	ldr	r1, [r7, #24]
 8009a96:	69fa      	ldr	r2, [r7, #28]
 8009a98:	e841 2300 	strex	r3, r2, [r1]
 8009a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1e6      	bne.n	8009a72 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	f003 0310 	and.w	r3, r3, #16
 8009aae:	2b10      	cmp	r3, #16
 8009ab0:	d103      	bne.n	8009aba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2210      	movs	r2, #16
 8009ab8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7fe ff4c 	bl	8008960 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ac8:	e00b      	b.n	8009ae2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7f9 fd7e 	bl	80035cc <HAL_UART_RxCpltCallback>
}
 8009ad0:	e007      	b.n	8009ae2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	699a      	ldr	r2, [r3, #24]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f042 0208 	orr.w	r2, r2, #8
 8009ae0:	619a      	str	r2, [r3, #24]
}
 8009ae2:	bf00      	nop
 8009ae4:	3770      	adds	r7, #112	@ 0x70
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	40008000 	.word	0x40008000

08009af0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b09c      	sub	sp, #112	@ 0x70
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009afe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b08:	2b22      	cmp	r3, #34	@ 0x22
 8009b0a:	f040 80be 	bne.w	8009c8a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b14:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b1e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009b22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009b26:	4013      	ands	r3, r2
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b32:	1c9a      	adds	r2, r3, #2
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	3b01      	subs	r3, #1
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f040 80a1 	bne.w	8009c9a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b60:	e853 3f00 	ldrex	r3, [r3]
 8009b64:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	461a      	mov	r2, r3
 8009b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b76:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b78:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b7e:	e841 2300 	strex	r3, r2, [r1]
 8009b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1e6      	bne.n	8009b58 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3308      	adds	r3, #8
 8009b90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9c:	f023 0301 	bic.w	r3, r3, #1
 8009ba0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009baa:	643a      	str	r2, [r7, #64]	@ 0x40
 8009bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009bb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bb2:	e841 2300 	strex	r3, r2, [r1]
 8009bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e5      	bne.n	8009b8a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a33      	ldr	r2, [pc, #204]	@ (8009ca4 <UART_RxISR_16BIT+0x1b4>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d01f      	beq.n	8009c1c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d018      	beq.n	8009c1c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	e853 3f00 	ldrex	r3, [r3]
 8009bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009bfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	461a      	mov	r2, r3
 8009c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c0a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c10:	e841 2300 	strex	r3, r2, [r1]
 8009c14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1e6      	bne.n	8009bea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d12e      	bne.n	8009c82 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	e853 3f00 	ldrex	r3, [r3]
 8009c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f023 0310 	bic.w	r3, r3, #16
 8009c3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	461a      	mov	r2, r3
 8009c46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c48:	61bb      	str	r3, [r7, #24]
 8009c4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4c:	6979      	ldr	r1, [r7, #20]
 8009c4e:	69ba      	ldr	r2, [r7, #24]
 8009c50:	e841 2300 	strex	r3, r2, [r1]
 8009c54:	613b      	str	r3, [r7, #16]
   return(result);
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e6      	bne.n	8009c2a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	f003 0310 	and.w	r3, r3, #16
 8009c66:	2b10      	cmp	r3, #16
 8009c68:	d103      	bne.n	8009c72 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2210      	movs	r2, #16
 8009c70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7fe fe70 	bl	8008960 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c80:	e00b      	b.n	8009c9a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7f9 fca2 	bl	80035cc <HAL_UART_RxCpltCallback>
}
 8009c88:	e007      	b.n	8009c9a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	699a      	ldr	r2, [r3, #24]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f042 0208 	orr.w	r2, r2, #8
 8009c98:	619a      	str	r2, [r3, #24]
}
 8009c9a:	bf00      	nop
 8009c9c:	3770      	adds	r7, #112	@ 0x70
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	40008000 	.word	0x40008000

08009ca8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b0ac      	sub	sp, #176	@ 0xb0
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009cb6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cde:	2b22      	cmp	r3, #34	@ 0x22
 8009ce0:	f040 8183 	bne.w	8009fea <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009cea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009cee:	e126      	b.n	8009f3e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009cfa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009cfe:	b2d9      	uxtb	r1, r3
 8009d00:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d0a:	400a      	ands	r2, r1
 8009d0c:	b2d2      	uxtb	r2, r2
 8009d0e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d14:	1c5a      	adds	r2, r3, #1
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d3a:	f003 0307 	and.w	r3, r3, #7
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d053      	beq.n	8009dea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d46:	f003 0301 	and.w	r3, r3, #1
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d011      	beq.n	8009d72 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009d4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00b      	beq.n	8009d72 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d68:	f043 0201 	orr.w	r2, r3, #1
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d76:	f003 0302 	and.w	r3, r3, #2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d011      	beq.n	8009da2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00b      	beq.n	8009da2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2202      	movs	r2, #2
 8009d90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d98:	f043 0204 	orr.w	r2, r3, #4
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009da6:	f003 0304 	and.w	r3, r3, #4
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d011      	beq.n	8009dd2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009db2:	f003 0301 	and.w	r3, r3, #1
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00b      	beq.n	8009dd2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2204      	movs	r2, #4
 8009dc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dc8:	f043 0202 	orr.w	r2, r3, #2
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d006      	beq.n	8009dea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7fe fdb5 	bl	800894c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f040 80a3 	bne.w	8009f3e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	461a      	mov	r2, r3
 8009e16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e1c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009e20:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009e22:	e841 2300 	strex	r3, r2, [r1]
 8009e26:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009e28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1e4      	bne.n	8009df8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3308      	adds	r3, #8
 8009e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e38:	e853 3f00 	ldrex	r3, [r3]
 8009e3c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009e3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e44:	f023 0301 	bic.w	r3, r3, #1
 8009e48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3308      	adds	r3, #8
 8009e52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e56:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009e58:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009e5c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009e5e:	e841 2300 	strex	r3, r2, [r1]
 8009e62:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009e64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1e1      	bne.n	8009e2e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a60      	ldr	r2, [pc, #384]	@ (800a004 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d021      	beq.n	8009ecc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d01a      	beq.n	8009ecc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e9e:	e853 3f00 	ldrex	r3, [r3]
 8009ea2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ea6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009eaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009eb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8009eba:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ebe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009ec0:	e841 2300 	strex	r3, r2, [r1]
 8009ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1e4      	bne.n	8009e96 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d130      	bne.n	8009f36 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ee2:	e853 3f00 	ldrex	r3, [r3]
 8009ee6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eea:	f023 0310 	bic.w	r3, r3, #16
 8009eee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009efc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009efe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f04:	e841 2300 	strex	r3, r2, [r1]
 8009f08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1e4      	bne.n	8009eda <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	f003 0310 	and.w	r3, r3, #16
 8009f1a:	2b10      	cmp	r3, #16
 8009f1c:	d103      	bne.n	8009f26 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2210      	movs	r2, #16
 8009f24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7fe fd16 	bl	8008960 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009f34:	e00e      	b.n	8009f54 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7f9 fb48 	bl	80035cc <HAL_UART_RxCpltCallback>
        break;
 8009f3c:	e00a      	b.n	8009f54 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f3e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d006      	beq.n	8009f54 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8009f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f4a:	f003 0320 	and.w	r3, r3, #32
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f47f aece 	bne.w	8009cf0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f5a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d049      	beq.n	8009ffa <UART_RxISR_8BIT_FIFOEN+0x352>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f6c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d242      	bcs.n	8009ffa <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3308      	adds	r3, #8
 8009f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7c:	6a3b      	ldr	r3, [r7, #32]
 8009f7e:	e853 3f00 	ldrex	r3, [r3]
 8009f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3308      	adds	r3, #8
 8009f94:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009f98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fa0:	e841 2300 	strex	r3, r2, [r1]
 8009fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1e3      	bne.n	8009f74 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a16      	ldr	r2, [pc, #88]	@ (800a008 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009fb0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	e853 3f00 	ldrex	r3, [r3]
 8009fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f043 0320 	orr.w	r3, r3, #32
 8009fc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009fd4:	61bb      	str	r3, [r7, #24]
 8009fd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd8:	6979      	ldr	r1, [r7, #20]
 8009fda:	69ba      	ldr	r2, [r7, #24]
 8009fdc:	e841 2300 	strex	r3, r2, [r1]
 8009fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1e4      	bne.n	8009fb2 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009fe8:	e007      	b.n	8009ffa <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	699a      	ldr	r2, [r3, #24]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f042 0208 	orr.w	r2, r2, #8
 8009ff8:	619a      	str	r2, [r3, #24]
}
 8009ffa:	bf00      	nop
 8009ffc:	37b0      	adds	r7, #176	@ 0xb0
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	40008000 	.word	0x40008000
 800a008:	08009939 	.word	0x08009939

0800a00c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b0ae      	sub	sp, #184	@ 0xb8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a01a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	69db      	ldr	r3, [r3, #28]
 800a024:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a042:	2b22      	cmp	r3, #34	@ 0x22
 800a044:	f040 8187 	bne.w	800a356 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a04e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a052:	e12a      	b.n	800a2aa <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a05a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a066:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a06a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a06e:	4013      	ands	r3, r2
 800a070:	b29a      	uxth	r2, r3
 800a072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a076:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a07c:	1c9a      	adds	r2, r3, #2
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a088:	b29b      	uxth	r3, r3
 800a08a:	3b01      	subs	r3, #1
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a09e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a0a2:	f003 0307 	and.w	r3, r3, #7
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d053      	beq.n	800a152 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a0aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d011      	beq.n	800a0da <UART_RxISR_16BIT_FIFOEN+0xce>
 800a0b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00b      	beq.n	800a0da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0d0:	f043 0201 	orr.w	r2, r3, #1
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d011      	beq.n	800a10a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a0e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a0ea:	f003 0301 	and.w	r3, r3, #1
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00b      	beq.n	800a10a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a100:	f043 0204 	orr.w	r2, r3, #4
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a10a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a10e:	f003 0304 	and.w	r3, r3, #4
 800a112:	2b00      	cmp	r3, #0
 800a114:	d011      	beq.n	800a13a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a116:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00b      	beq.n	800a13a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2204      	movs	r2, #4
 800a128:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a130:	f043 0202 	orr.w	r2, r3, #2
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a140:	2b00      	cmp	r3, #0
 800a142:	d006      	beq.n	800a152 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7fe fc01 	bl	800894c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a158:	b29b      	uxth	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f040 80a5 	bne.w	800a2aa <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a16e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a174:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	461a      	mov	r2, r3
 800a17e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a186:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a188:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a18a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a18e:	e841 2300 	strex	r3, r2, [r1]
 800a192:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a194:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1e2      	bne.n	800a160 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3308      	adds	r3, #8
 800a1a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a1aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1b0:	f023 0301 	bic.w	r3, r3, #1
 800a1b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3308      	adds	r3, #8
 800a1be:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a1c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a1c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a1c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a1ca:	e841 2300 	strex	r3, r2, [r1]
 800a1ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a1d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1e1      	bne.n	800a19a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2220      	movs	r2, #32
 800a1da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a60      	ldr	r2, [pc, #384]	@ (800a370 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d021      	beq.n	800a238 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d01a      	beq.n	800a238 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a20a:	e853 3f00 	ldrex	r3, [r3]
 800a20e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a212:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a216:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a224:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a226:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a228:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a22a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a22c:	e841 2300 	strex	r3, r2, [r1]
 800a230:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1e4      	bne.n	800a202 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d130      	bne.n	800a2a2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24e:	e853 3f00 	ldrex	r3, [r3]
 800a252:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a256:	f023 0310 	bic.w	r3, r3, #16
 800a25a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	461a      	mov	r2, r3
 800a264:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a268:	647b      	str	r3, [r7, #68]	@ 0x44
 800a26a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a26e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a270:	e841 2300 	strex	r3, r2, [r1]
 800a274:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1e4      	bne.n	800a246 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	f003 0310 	and.w	r3, r3, #16
 800a286:	2b10      	cmp	r3, #16
 800a288:	d103      	bne.n	800a292 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2210      	movs	r2, #16
 800a290:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a298:	4619      	mov	r1, r3
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f7fe fb60 	bl	8008960 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a2a0:	e00e      	b.n	800a2c0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7f9 f992 	bl	80035cc <HAL_UART_RxCpltCallback>
        break;
 800a2a8:	e00a      	b.n	800a2c0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a2aa:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d006      	beq.n	800a2c0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800a2b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a2b6:	f003 0320 	and.w	r3, r3, #32
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f47f aeca 	bne.w	800a054 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2c6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a2ca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d049      	beq.n	800a366 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a2d8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d242      	bcs.n	800a366 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ea:	e853 3f00 	ldrex	r3, [r3]
 800a2ee:	623b      	str	r3, [r7, #32]
   return(result);
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3308      	adds	r3, #8
 800a300:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a304:	633a      	str	r2, [r7, #48]	@ 0x30
 800a306:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a308:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a30a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a30c:	e841 2300 	strex	r3, r2, [r1]
 800a310:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e3      	bne.n	800a2e0 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a16      	ldr	r2, [pc, #88]	@ (800a374 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800a31c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f043 0320 	orr.w	r3, r3, #32
 800a332:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	461a      	mov	r2, r3
 800a33c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a340:	61fb      	str	r3, [r7, #28]
 800a342:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a344:	69b9      	ldr	r1, [r7, #24]
 800a346:	69fa      	ldr	r2, [r7, #28]
 800a348:	e841 2300 	strex	r3, r2, [r1]
 800a34c:	617b      	str	r3, [r7, #20]
   return(result);
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1e4      	bne.n	800a31e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a354:	e007      	b.n	800a366 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	699a      	ldr	r2, [r3, #24]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f042 0208 	orr.w	r2, r2, #8
 800a364:	619a      	str	r2, [r3, #24]
}
 800a366:	bf00      	nop
 800a368:	37b8      	adds	r7, #184	@ 0xb8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	40008000 	.word	0x40008000
 800a374:	08009af1 	.word	0x08009af1

0800a378 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a386:	2b01      	cmp	r3, #1
 800a388:	d101      	bne.n	800a38e <HAL_UARTEx_DisableFifoMode+0x16>
 800a38a:	2302      	movs	r3, #2
 800a38c:	e027      	b.n	800a3de <HAL_UARTEx_DisableFifoMode+0x66>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2224      	movs	r2, #36	@ 0x24
 800a39a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f022 0201 	bic.w	r2, r2, #1
 800a3b4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a3bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2220      	movs	r2, #32
 800a3d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b084      	sub	sp, #16
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d101      	bne.n	800a402 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a3fe:	2302      	movs	r3, #2
 800a400:	e02d      	b.n	800a45e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2224      	movs	r2, #36	@ 0x24
 800a40e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f022 0201 	bic.w	r2, r2, #1
 800a428:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	430a      	orrs	r2, r1
 800a43c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f850 	bl	800a4e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2220      	movs	r2, #32
 800a450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b084      	sub	sp, #16
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a476:	2b01      	cmp	r3, #1
 800a478:	d101      	bne.n	800a47e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a47a:	2302      	movs	r3, #2
 800a47c:	e02d      	b.n	800a4da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2224      	movs	r2, #36	@ 0x24
 800a48a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f022 0201 	bic.w	r2, r2, #1
 800a4a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	683a      	ldr	r2, [r7, #0]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f812 	bl	800a4e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
	...

0800a4e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d108      	bne.n	800a506 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a504:	e031      	b.n	800a56a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a506:	2308      	movs	r3, #8
 800a508:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a50a:	2308      	movs	r3, #8
 800a50c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	0e5b      	lsrs	r3, r3, #25
 800a516:	b2db      	uxtb	r3, r3
 800a518:	f003 0307 	and.w	r3, r3, #7
 800a51c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	0f5b      	lsrs	r3, r3, #29
 800a526:	b2db      	uxtb	r3, r3
 800a528:	f003 0307 	and.w	r3, r3, #7
 800a52c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a52e:	7bbb      	ldrb	r3, [r7, #14]
 800a530:	7b3a      	ldrb	r2, [r7, #12]
 800a532:	4911      	ldr	r1, [pc, #68]	@ (800a578 <UARTEx_SetNbDataToProcess+0x94>)
 800a534:	5c8a      	ldrb	r2, [r1, r2]
 800a536:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a53a:	7b3a      	ldrb	r2, [r7, #12]
 800a53c:	490f      	ldr	r1, [pc, #60]	@ (800a57c <UARTEx_SetNbDataToProcess+0x98>)
 800a53e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a540:	fb93 f3f2 	sdiv	r3, r3, r2
 800a544:	b29a      	uxth	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
 800a54e:	7b7a      	ldrb	r2, [r7, #13]
 800a550:	4909      	ldr	r1, [pc, #36]	@ (800a578 <UARTEx_SetNbDataToProcess+0x94>)
 800a552:	5c8a      	ldrb	r2, [r1, r2]
 800a554:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a558:	7b7a      	ldrb	r2, [r7, #13]
 800a55a:	4908      	ldr	r1, [pc, #32]	@ (800a57c <UARTEx_SetNbDataToProcess+0x98>)
 800a55c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a55e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a562:	b29a      	uxth	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a56a:	bf00      	nop
 800a56c:	3714      	adds	r7, #20
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	0800b1f0 	.word	0x0800b1f0
 800a57c:	0800b1f8 	.word	0x0800b1f8

0800a580 <siprintf>:
 800a580:	b40e      	push	{r1, r2, r3}
 800a582:	b500      	push	{lr}
 800a584:	b09c      	sub	sp, #112	@ 0x70
 800a586:	ab1d      	add	r3, sp, #116	@ 0x74
 800a588:	9002      	str	r0, [sp, #8]
 800a58a:	9006      	str	r0, [sp, #24]
 800a58c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a590:	4809      	ldr	r0, [pc, #36]	@ (800a5b8 <siprintf+0x38>)
 800a592:	9107      	str	r1, [sp, #28]
 800a594:	9104      	str	r1, [sp, #16]
 800a596:	4909      	ldr	r1, [pc, #36]	@ (800a5bc <siprintf+0x3c>)
 800a598:	f853 2b04 	ldr.w	r2, [r3], #4
 800a59c:	9105      	str	r1, [sp, #20]
 800a59e:	6800      	ldr	r0, [r0, #0]
 800a5a0:	9301      	str	r3, [sp, #4]
 800a5a2:	a902      	add	r1, sp, #8
 800a5a4:	f000 f9a4 	bl	800a8f0 <_svfiprintf_r>
 800a5a8:	9b02      	ldr	r3, [sp, #8]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	701a      	strb	r2, [r3, #0]
 800a5ae:	b01c      	add	sp, #112	@ 0x70
 800a5b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5b4:	b003      	add	sp, #12
 800a5b6:	4770      	bx	lr
 800a5b8:	20000014 	.word	0x20000014
 800a5bc:	ffff0208 	.word	0xffff0208

0800a5c0 <memset>:
 800a5c0:	4402      	add	r2, r0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d100      	bne.n	800a5ca <memset+0xa>
 800a5c8:	4770      	bx	lr
 800a5ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ce:	e7f9      	b.n	800a5c4 <memset+0x4>

0800a5d0 <strcat>:
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	7814      	ldrb	r4, [r2, #0]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	3201      	adds	r2, #1
 800a5da:	2c00      	cmp	r4, #0
 800a5dc:	d1fa      	bne.n	800a5d4 <strcat+0x4>
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	d1f9      	bne.n	800a5e0 <strcat+0x10>
 800a5ec:	bd10      	pop	{r4, pc}
	...

0800a5f0 <__errno>:
 800a5f0:	4b01      	ldr	r3, [pc, #4]	@ (800a5f8 <__errno+0x8>)
 800a5f2:	6818      	ldr	r0, [r3, #0]
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	20000014 	.word	0x20000014

0800a5fc <__libc_init_array>:
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	4d0d      	ldr	r5, [pc, #52]	@ (800a634 <__libc_init_array+0x38>)
 800a600:	4c0d      	ldr	r4, [pc, #52]	@ (800a638 <__libc_init_array+0x3c>)
 800a602:	1b64      	subs	r4, r4, r5
 800a604:	10a4      	asrs	r4, r4, #2
 800a606:	2600      	movs	r6, #0
 800a608:	42a6      	cmp	r6, r4
 800a60a:	d109      	bne.n	800a620 <__libc_init_array+0x24>
 800a60c:	4d0b      	ldr	r5, [pc, #44]	@ (800a63c <__libc_init_array+0x40>)
 800a60e:	4c0c      	ldr	r4, [pc, #48]	@ (800a640 <__libc_init_array+0x44>)
 800a610:	f000 fc66 	bl	800aee0 <_init>
 800a614:	1b64      	subs	r4, r4, r5
 800a616:	10a4      	asrs	r4, r4, #2
 800a618:	2600      	movs	r6, #0
 800a61a:	42a6      	cmp	r6, r4
 800a61c:	d105      	bne.n	800a62a <__libc_init_array+0x2e>
 800a61e:	bd70      	pop	{r4, r5, r6, pc}
 800a620:	f855 3b04 	ldr.w	r3, [r5], #4
 800a624:	4798      	blx	r3
 800a626:	3601      	adds	r6, #1
 800a628:	e7ee      	b.n	800a608 <__libc_init_array+0xc>
 800a62a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62e:	4798      	blx	r3
 800a630:	3601      	adds	r6, #1
 800a632:	e7f2      	b.n	800a61a <__libc_init_array+0x1e>
 800a634:	0800b23c 	.word	0x0800b23c
 800a638:	0800b23c 	.word	0x0800b23c
 800a63c:	0800b23c 	.word	0x0800b23c
 800a640:	0800b240 	.word	0x0800b240

0800a644 <__retarget_lock_acquire_recursive>:
 800a644:	4770      	bx	lr

0800a646 <__retarget_lock_release_recursive>:
 800a646:	4770      	bx	lr

0800a648 <_free_r>:
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4605      	mov	r5, r0
 800a64c:	2900      	cmp	r1, #0
 800a64e:	d041      	beq.n	800a6d4 <_free_r+0x8c>
 800a650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a654:	1f0c      	subs	r4, r1, #4
 800a656:	2b00      	cmp	r3, #0
 800a658:	bfb8      	it	lt
 800a65a:	18e4      	addlt	r4, r4, r3
 800a65c:	f000 f8e0 	bl	800a820 <__malloc_lock>
 800a660:	4a1d      	ldr	r2, [pc, #116]	@ (800a6d8 <_free_r+0x90>)
 800a662:	6813      	ldr	r3, [r2, #0]
 800a664:	b933      	cbnz	r3, 800a674 <_free_r+0x2c>
 800a666:	6063      	str	r3, [r4, #4]
 800a668:	6014      	str	r4, [r2, #0]
 800a66a:	4628      	mov	r0, r5
 800a66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a670:	f000 b8dc 	b.w	800a82c <__malloc_unlock>
 800a674:	42a3      	cmp	r3, r4
 800a676:	d908      	bls.n	800a68a <_free_r+0x42>
 800a678:	6820      	ldr	r0, [r4, #0]
 800a67a:	1821      	adds	r1, r4, r0
 800a67c:	428b      	cmp	r3, r1
 800a67e:	bf01      	itttt	eq
 800a680:	6819      	ldreq	r1, [r3, #0]
 800a682:	685b      	ldreq	r3, [r3, #4]
 800a684:	1809      	addeq	r1, r1, r0
 800a686:	6021      	streq	r1, [r4, #0]
 800a688:	e7ed      	b.n	800a666 <_free_r+0x1e>
 800a68a:	461a      	mov	r2, r3
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	b10b      	cbz	r3, 800a694 <_free_r+0x4c>
 800a690:	42a3      	cmp	r3, r4
 800a692:	d9fa      	bls.n	800a68a <_free_r+0x42>
 800a694:	6811      	ldr	r1, [r2, #0]
 800a696:	1850      	adds	r0, r2, r1
 800a698:	42a0      	cmp	r0, r4
 800a69a:	d10b      	bne.n	800a6b4 <_free_r+0x6c>
 800a69c:	6820      	ldr	r0, [r4, #0]
 800a69e:	4401      	add	r1, r0
 800a6a0:	1850      	adds	r0, r2, r1
 800a6a2:	4283      	cmp	r3, r0
 800a6a4:	6011      	str	r1, [r2, #0]
 800a6a6:	d1e0      	bne.n	800a66a <_free_r+0x22>
 800a6a8:	6818      	ldr	r0, [r3, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	6053      	str	r3, [r2, #4]
 800a6ae:	4408      	add	r0, r1
 800a6b0:	6010      	str	r0, [r2, #0]
 800a6b2:	e7da      	b.n	800a66a <_free_r+0x22>
 800a6b4:	d902      	bls.n	800a6bc <_free_r+0x74>
 800a6b6:	230c      	movs	r3, #12
 800a6b8:	602b      	str	r3, [r5, #0]
 800a6ba:	e7d6      	b.n	800a66a <_free_r+0x22>
 800a6bc:	6820      	ldr	r0, [r4, #0]
 800a6be:	1821      	adds	r1, r4, r0
 800a6c0:	428b      	cmp	r3, r1
 800a6c2:	bf04      	itt	eq
 800a6c4:	6819      	ldreq	r1, [r3, #0]
 800a6c6:	685b      	ldreq	r3, [r3, #4]
 800a6c8:	6063      	str	r3, [r4, #4]
 800a6ca:	bf04      	itt	eq
 800a6cc:	1809      	addeq	r1, r1, r0
 800a6ce:	6021      	streq	r1, [r4, #0]
 800a6d0:	6054      	str	r4, [r2, #4]
 800a6d2:	e7ca      	b.n	800a66a <_free_r+0x22>
 800a6d4:	bd38      	pop	{r3, r4, r5, pc}
 800a6d6:	bf00      	nop
 800a6d8:	20001538 	.word	0x20001538

0800a6dc <sbrk_aligned>:
 800a6dc:	b570      	push	{r4, r5, r6, lr}
 800a6de:	4e0f      	ldr	r6, [pc, #60]	@ (800a71c <sbrk_aligned+0x40>)
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	6831      	ldr	r1, [r6, #0]
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	b911      	cbnz	r1, 800a6ee <sbrk_aligned+0x12>
 800a6e8:	f000 fba6 	bl	800ae38 <_sbrk_r>
 800a6ec:	6030      	str	r0, [r6, #0]
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f000 fba1 	bl	800ae38 <_sbrk_r>
 800a6f6:	1c43      	adds	r3, r0, #1
 800a6f8:	d103      	bne.n	800a702 <sbrk_aligned+0x26>
 800a6fa:	f04f 34ff 	mov.w	r4, #4294967295
 800a6fe:	4620      	mov	r0, r4
 800a700:	bd70      	pop	{r4, r5, r6, pc}
 800a702:	1cc4      	adds	r4, r0, #3
 800a704:	f024 0403 	bic.w	r4, r4, #3
 800a708:	42a0      	cmp	r0, r4
 800a70a:	d0f8      	beq.n	800a6fe <sbrk_aligned+0x22>
 800a70c:	1a21      	subs	r1, r4, r0
 800a70e:	4628      	mov	r0, r5
 800a710:	f000 fb92 	bl	800ae38 <_sbrk_r>
 800a714:	3001      	adds	r0, #1
 800a716:	d1f2      	bne.n	800a6fe <sbrk_aligned+0x22>
 800a718:	e7ef      	b.n	800a6fa <sbrk_aligned+0x1e>
 800a71a:	bf00      	nop
 800a71c:	20001534 	.word	0x20001534

0800a720 <_malloc_r>:
 800a720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a724:	1ccd      	adds	r5, r1, #3
 800a726:	f025 0503 	bic.w	r5, r5, #3
 800a72a:	3508      	adds	r5, #8
 800a72c:	2d0c      	cmp	r5, #12
 800a72e:	bf38      	it	cc
 800a730:	250c      	movcc	r5, #12
 800a732:	2d00      	cmp	r5, #0
 800a734:	4606      	mov	r6, r0
 800a736:	db01      	blt.n	800a73c <_malloc_r+0x1c>
 800a738:	42a9      	cmp	r1, r5
 800a73a:	d904      	bls.n	800a746 <_malloc_r+0x26>
 800a73c:	230c      	movs	r3, #12
 800a73e:	6033      	str	r3, [r6, #0]
 800a740:	2000      	movs	r0, #0
 800a742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a81c <_malloc_r+0xfc>
 800a74a:	f000 f869 	bl	800a820 <__malloc_lock>
 800a74e:	f8d8 3000 	ldr.w	r3, [r8]
 800a752:	461c      	mov	r4, r3
 800a754:	bb44      	cbnz	r4, 800a7a8 <_malloc_r+0x88>
 800a756:	4629      	mov	r1, r5
 800a758:	4630      	mov	r0, r6
 800a75a:	f7ff ffbf 	bl	800a6dc <sbrk_aligned>
 800a75e:	1c43      	adds	r3, r0, #1
 800a760:	4604      	mov	r4, r0
 800a762:	d158      	bne.n	800a816 <_malloc_r+0xf6>
 800a764:	f8d8 4000 	ldr.w	r4, [r8]
 800a768:	4627      	mov	r7, r4
 800a76a:	2f00      	cmp	r7, #0
 800a76c:	d143      	bne.n	800a7f6 <_malloc_r+0xd6>
 800a76e:	2c00      	cmp	r4, #0
 800a770:	d04b      	beq.n	800a80a <_malloc_r+0xea>
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	4639      	mov	r1, r7
 800a776:	4630      	mov	r0, r6
 800a778:	eb04 0903 	add.w	r9, r4, r3
 800a77c:	f000 fb5c 	bl	800ae38 <_sbrk_r>
 800a780:	4581      	cmp	r9, r0
 800a782:	d142      	bne.n	800a80a <_malloc_r+0xea>
 800a784:	6821      	ldr	r1, [r4, #0]
 800a786:	1a6d      	subs	r5, r5, r1
 800a788:	4629      	mov	r1, r5
 800a78a:	4630      	mov	r0, r6
 800a78c:	f7ff ffa6 	bl	800a6dc <sbrk_aligned>
 800a790:	3001      	adds	r0, #1
 800a792:	d03a      	beq.n	800a80a <_malloc_r+0xea>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	442b      	add	r3, r5
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	f8d8 3000 	ldr.w	r3, [r8]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	bb62      	cbnz	r2, 800a7fc <_malloc_r+0xdc>
 800a7a2:	f8c8 7000 	str.w	r7, [r8]
 800a7a6:	e00f      	b.n	800a7c8 <_malloc_r+0xa8>
 800a7a8:	6822      	ldr	r2, [r4, #0]
 800a7aa:	1b52      	subs	r2, r2, r5
 800a7ac:	d420      	bmi.n	800a7f0 <_malloc_r+0xd0>
 800a7ae:	2a0b      	cmp	r2, #11
 800a7b0:	d917      	bls.n	800a7e2 <_malloc_r+0xc2>
 800a7b2:	1961      	adds	r1, r4, r5
 800a7b4:	42a3      	cmp	r3, r4
 800a7b6:	6025      	str	r5, [r4, #0]
 800a7b8:	bf18      	it	ne
 800a7ba:	6059      	strne	r1, [r3, #4]
 800a7bc:	6863      	ldr	r3, [r4, #4]
 800a7be:	bf08      	it	eq
 800a7c0:	f8c8 1000 	streq.w	r1, [r8]
 800a7c4:	5162      	str	r2, [r4, r5]
 800a7c6:	604b      	str	r3, [r1, #4]
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	f000 f82f 	bl	800a82c <__malloc_unlock>
 800a7ce:	f104 000b 	add.w	r0, r4, #11
 800a7d2:	1d23      	adds	r3, r4, #4
 800a7d4:	f020 0007 	bic.w	r0, r0, #7
 800a7d8:	1ac2      	subs	r2, r0, r3
 800a7da:	bf1c      	itt	ne
 800a7dc:	1a1b      	subne	r3, r3, r0
 800a7de:	50a3      	strne	r3, [r4, r2]
 800a7e0:	e7af      	b.n	800a742 <_malloc_r+0x22>
 800a7e2:	6862      	ldr	r2, [r4, #4]
 800a7e4:	42a3      	cmp	r3, r4
 800a7e6:	bf0c      	ite	eq
 800a7e8:	f8c8 2000 	streq.w	r2, [r8]
 800a7ec:	605a      	strne	r2, [r3, #4]
 800a7ee:	e7eb      	b.n	800a7c8 <_malloc_r+0xa8>
 800a7f0:	4623      	mov	r3, r4
 800a7f2:	6864      	ldr	r4, [r4, #4]
 800a7f4:	e7ae      	b.n	800a754 <_malloc_r+0x34>
 800a7f6:	463c      	mov	r4, r7
 800a7f8:	687f      	ldr	r7, [r7, #4]
 800a7fa:	e7b6      	b.n	800a76a <_malloc_r+0x4a>
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	42a3      	cmp	r3, r4
 800a802:	d1fb      	bne.n	800a7fc <_malloc_r+0xdc>
 800a804:	2300      	movs	r3, #0
 800a806:	6053      	str	r3, [r2, #4]
 800a808:	e7de      	b.n	800a7c8 <_malloc_r+0xa8>
 800a80a:	230c      	movs	r3, #12
 800a80c:	6033      	str	r3, [r6, #0]
 800a80e:	4630      	mov	r0, r6
 800a810:	f000 f80c 	bl	800a82c <__malloc_unlock>
 800a814:	e794      	b.n	800a740 <_malloc_r+0x20>
 800a816:	6005      	str	r5, [r0, #0]
 800a818:	e7d6      	b.n	800a7c8 <_malloc_r+0xa8>
 800a81a:	bf00      	nop
 800a81c:	20001538 	.word	0x20001538

0800a820 <__malloc_lock>:
 800a820:	4801      	ldr	r0, [pc, #4]	@ (800a828 <__malloc_lock+0x8>)
 800a822:	f7ff bf0f 	b.w	800a644 <__retarget_lock_acquire_recursive>
 800a826:	bf00      	nop
 800a828:	20001530 	.word	0x20001530

0800a82c <__malloc_unlock>:
 800a82c:	4801      	ldr	r0, [pc, #4]	@ (800a834 <__malloc_unlock+0x8>)
 800a82e:	f7ff bf0a 	b.w	800a646 <__retarget_lock_release_recursive>
 800a832:	bf00      	nop
 800a834:	20001530 	.word	0x20001530

0800a838 <__ssputs_r>:
 800a838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a83c:	688e      	ldr	r6, [r1, #8]
 800a83e:	461f      	mov	r7, r3
 800a840:	42be      	cmp	r6, r7
 800a842:	680b      	ldr	r3, [r1, #0]
 800a844:	4682      	mov	sl, r0
 800a846:	460c      	mov	r4, r1
 800a848:	4690      	mov	r8, r2
 800a84a:	d82d      	bhi.n	800a8a8 <__ssputs_r+0x70>
 800a84c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a850:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a854:	d026      	beq.n	800a8a4 <__ssputs_r+0x6c>
 800a856:	6965      	ldr	r5, [r4, #20]
 800a858:	6909      	ldr	r1, [r1, #16]
 800a85a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a85e:	eba3 0901 	sub.w	r9, r3, r1
 800a862:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a866:	1c7b      	adds	r3, r7, #1
 800a868:	444b      	add	r3, r9
 800a86a:	106d      	asrs	r5, r5, #1
 800a86c:	429d      	cmp	r5, r3
 800a86e:	bf38      	it	cc
 800a870:	461d      	movcc	r5, r3
 800a872:	0553      	lsls	r3, r2, #21
 800a874:	d527      	bpl.n	800a8c6 <__ssputs_r+0x8e>
 800a876:	4629      	mov	r1, r5
 800a878:	f7ff ff52 	bl	800a720 <_malloc_r>
 800a87c:	4606      	mov	r6, r0
 800a87e:	b360      	cbz	r0, 800a8da <__ssputs_r+0xa2>
 800a880:	6921      	ldr	r1, [r4, #16]
 800a882:	464a      	mov	r2, r9
 800a884:	f000 fae8 	bl	800ae58 <memcpy>
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a88e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a892:	81a3      	strh	r3, [r4, #12]
 800a894:	6126      	str	r6, [r4, #16]
 800a896:	6165      	str	r5, [r4, #20]
 800a898:	444e      	add	r6, r9
 800a89a:	eba5 0509 	sub.w	r5, r5, r9
 800a89e:	6026      	str	r6, [r4, #0]
 800a8a0:	60a5      	str	r5, [r4, #8]
 800a8a2:	463e      	mov	r6, r7
 800a8a4:	42be      	cmp	r6, r7
 800a8a6:	d900      	bls.n	800a8aa <__ssputs_r+0x72>
 800a8a8:	463e      	mov	r6, r7
 800a8aa:	6820      	ldr	r0, [r4, #0]
 800a8ac:	4632      	mov	r2, r6
 800a8ae:	4641      	mov	r1, r8
 800a8b0:	f000 faa8 	bl	800ae04 <memmove>
 800a8b4:	68a3      	ldr	r3, [r4, #8]
 800a8b6:	1b9b      	subs	r3, r3, r6
 800a8b8:	60a3      	str	r3, [r4, #8]
 800a8ba:	6823      	ldr	r3, [r4, #0]
 800a8bc:	4433      	add	r3, r6
 800a8be:	6023      	str	r3, [r4, #0]
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c6:	462a      	mov	r2, r5
 800a8c8:	f000 fad4 	bl	800ae74 <_realloc_r>
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d1e0      	bne.n	800a894 <__ssputs_r+0x5c>
 800a8d2:	6921      	ldr	r1, [r4, #16]
 800a8d4:	4650      	mov	r0, sl
 800a8d6:	f7ff feb7 	bl	800a648 <_free_r>
 800a8da:	230c      	movs	r3, #12
 800a8dc:	f8ca 3000 	str.w	r3, [sl]
 800a8e0:	89a3      	ldrh	r3, [r4, #12]
 800a8e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8e6:	81a3      	strh	r3, [r4, #12]
 800a8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ec:	e7e9      	b.n	800a8c2 <__ssputs_r+0x8a>
	...

0800a8f0 <_svfiprintf_r>:
 800a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	4698      	mov	r8, r3
 800a8f6:	898b      	ldrh	r3, [r1, #12]
 800a8f8:	061b      	lsls	r3, r3, #24
 800a8fa:	b09d      	sub	sp, #116	@ 0x74
 800a8fc:	4607      	mov	r7, r0
 800a8fe:	460d      	mov	r5, r1
 800a900:	4614      	mov	r4, r2
 800a902:	d510      	bpl.n	800a926 <_svfiprintf_r+0x36>
 800a904:	690b      	ldr	r3, [r1, #16]
 800a906:	b973      	cbnz	r3, 800a926 <_svfiprintf_r+0x36>
 800a908:	2140      	movs	r1, #64	@ 0x40
 800a90a:	f7ff ff09 	bl	800a720 <_malloc_r>
 800a90e:	6028      	str	r0, [r5, #0]
 800a910:	6128      	str	r0, [r5, #16]
 800a912:	b930      	cbnz	r0, 800a922 <_svfiprintf_r+0x32>
 800a914:	230c      	movs	r3, #12
 800a916:	603b      	str	r3, [r7, #0]
 800a918:	f04f 30ff 	mov.w	r0, #4294967295
 800a91c:	b01d      	add	sp, #116	@ 0x74
 800a91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a922:	2340      	movs	r3, #64	@ 0x40
 800a924:	616b      	str	r3, [r5, #20]
 800a926:	2300      	movs	r3, #0
 800a928:	9309      	str	r3, [sp, #36]	@ 0x24
 800a92a:	2320      	movs	r3, #32
 800a92c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a930:	f8cd 800c 	str.w	r8, [sp, #12]
 800a934:	2330      	movs	r3, #48	@ 0x30
 800a936:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aad4 <_svfiprintf_r+0x1e4>
 800a93a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a93e:	f04f 0901 	mov.w	r9, #1
 800a942:	4623      	mov	r3, r4
 800a944:	469a      	mov	sl, r3
 800a946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a94a:	b10a      	cbz	r2, 800a950 <_svfiprintf_r+0x60>
 800a94c:	2a25      	cmp	r2, #37	@ 0x25
 800a94e:	d1f9      	bne.n	800a944 <_svfiprintf_r+0x54>
 800a950:	ebba 0b04 	subs.w	fp, sl, r4
 800a954:	d00b      	beq.n	800a96e <_svfiprintf_r+0x7e>
 800a956:	465b      	mov	r3, fp
 800a958:	4622      	mov	r2, r4
 800a95a:	4629      	mov	r1, r5
 800a95c:	4638      	mov	r0, r7
 800a95e:	f7ff ff6b 	bl	800a838 <__ssputs_r>
 800a962:	3001      	adds	r0, #1
 800a964:	f000 80a7 	beq.w	800aab6 <_svfiprintf_r+0x1c6>
 800a968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a96a:	445a      	add	r2, fp
 800a96c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a96e:	f89a 3000 	ldrb.w	r3, [sl]
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 809f 	beq.w	800aab6 <_svfiprintf_r+0x1c6>
 800a978:	2300      	movs	r3, #0
 800a97a:	f04f 32ff 	mov.w	r2, #4294967295
 800a97e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a982:	f10a 0a01 	add.w	sl, sl, #1
 800a986:	9304      	str	r3, [sp, #16]
 800a988:	9307      	str	r3, [sp, #28]
 800a98a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a98e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a990:	4654      	mov	r4, sl
 800a992:	2205      	movs	r2, #5
 800a994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a998:	484e      	ldr	r0, [pc, #312]	@ (800aad4 <_svfiprintf_r+0x1e4>)
 800a99a:	f7f5 fc59 	bl	8000250 <memchr>
 800a99e:	9a04      	ldr	r2, [sp, #16]
 800a9a0:	b9d8      	cbnz	r0, 800a9da <_svfiprintf_r+0xea>
 800a9a2:	06d0      	lsls	r0, r2, #27
 800a9a4:	bf44      	itt	mi
 800a9a6:	2320      	movmi	r3, #32
 800a9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9ac:	0711      	lsls	r1, r2, #28
 800a9ae:	bf44      	itt	mi
 800a9b0:	232b      	movmi	r3, #43	@ 0x2b
 800a9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9bc:	d015      	beq.n	800a9ea <_svfiprintf_r+0xfa>
 800a9be:	9a07      	ldr	r2, [sp, #28]
 800a9c0:	4654      	mov	r4, sl
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	f04f 0c0a 	mov.w	ip, #10
 800a9c8:	4621      	mov	r1, r4
 800a9ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ce:	3b30      	subs	r3, #48	@ 0x30
 800a9d0:	2b09      	cmp	r3, #9
 800a9d2:	d94b      	bls.n	800aa6c <_svfiprintf_r+0x17c>
 800a9d4:	b1b0      	cbz	r0, 800aa04 <_svfiprintf_r+0x114>
 800a9d6:	9207      	str	r2, [sp, #28]
 800a9d8:	e014      	b.n	800aa04 <_svfiprintf_r+0x114>
 800a9da:	eba0 0308 	sub.w	r3, r0, r8
 800a9de:	fa09 f303 	lsl.w	r3, r9, r3
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	9304      	str	r3, [sp, #16]
 800a9e6:	46a2      	mov	sl, r4
 800a9e8:	e7d2      	b.n	800a990 <_svfiprintf_r+0xa0>
 800a9ea:	9b03      	ldr	r3, [sp, #12]
 800a9ec:	1d19      	adds	r1, r3, #4
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	9103      	str	r1, [sp, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	bfbb      	ittet	lt
 800a9f6:	425b      	neglt	r3, r3
 800a9f8:	f042 0202 	orrlt.w	r2, r2, #2
 800a9fc:	9307      	strge	r3, [sp, #28]
 800a9fe:	9307      	strlt	r3, [sp, #28]
 800aa00:	bfb8      	it	lt
 800aa02:	9204      	strlt	r2, [sp, #16]
 800aa04:	7823      	ldrb	r3, [r4, #0]
 800aa06:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa08:	d10a      	bne.n	800aa20 <_svfiprintf_r+0x130>
 800aa0a:	7863      	ldrb	r3, [r4, #1]
 800aa0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa0e:	d132      	bne.n	800aa76 <_svfiprintf_r+0x186>
 800aa10:	9b03      	ldr	r3, [sp, #12]
 800aa12:	1d1a      	adds	r2, r3, #4
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	9203      	str	r2, [sp, #12]
 800aa18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa1c:	3402      	adds	r4, #2
 800aa1e:	9305      	str	r3, [sp, #20]
 800aa20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aae4 <_svfiprintf_r+0x1f4>
 800aa24:	7821      	ldrb	r1, [r4, #0]
 800aa26:	2203      	movs	r2, #3
 800aa28:	4650      	mov	r0, sl
 800aa2a:	f7f5 fc11 	bl	8000250 <memchr>
 800aa2e:	b138      	cbz	r0, 800aa40 <_svfiprintf_r+0x150>
 800aa30:	9b04      	ldr	r3, [sp, #16]
 800aa32:	eba0 000a 	sub.w	r0, r0, sl
 800aa36:	2240      	movs	r2, #64	@ 0x40
 800aa38:	4082      	lsls	r2, r0
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	3401      	adds	r4, #1
 800aa3e:	9304      	str	r3, [sp, #16]
 800aa40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa44:	4824      	ldr	r0, [pc, #144]	@ (800aad8 <_svfiprintf_r+0x1e8>)
 800aa46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa4a:	2206      	movs	r2, #6
 800aa4c:	f7f5 fc00 	bl	8000250 <memchr>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d036      	beq.n	800aac2 <_svfiprintf_r+0x1d2>
 800aa54:	4b21      	ldr	r3, [pc, #132]	@ (800aadc <_svfiprintf_r+0x1ec>)
 800aa56:	bb1b      	cbnz	r3, 800aaa0 <_svfiprintf_r+0x1b0>
 800aa58:	9b03      	ldr	r3, [sp, #12]
 800aa5a:	3307      	adds	r3, #7
 800aa5c:	f023 0307 	bic.w	r3, r3, #7
 800aa60:	3308      	adds	r3, #8
 800aa62:	9303      	str	r3, [sp, #12]
 800aa64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa66:	4433      	add	r3, r6
 800aa68:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa6a:	e76a      	b.n	800a942 <_svfiprintf_r+0x52>
 800aa6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa70:	460c      	mov	r4, r1
 800aa72:	2001      	movs	r0, #1
 800aa74:	e7a8      	b.n	800a9c8 <_svfiprintf_r+0xd8>
 800aa76:	2300      	movs	r3, #0
 800aa78:	3401      	adds	r4, #1
 800aa7a:	9305      	str	r3, [sp, #20]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	f04f 0c0a 	mov.w	ip, #10
 800aa82:	4620      	mov	r0, r4
 800aa84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa88:	3a30      	subs	r2, #48	@ 0x30
 800aa8a:	2a09      	cmp	r2, #9
 800aa8c:	d903      	bls.n	800aa96 <_svfiprintf_r+0x1a6>
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d0c6      	beq.n	800aa20 <_svfiprintf_r+0x130>
 800aa92:	9105      	str	r1, [sp, #20]
 800aa94:	e7c4      	b.n	800aa20 <_svfiprintf_r+0x130>
 800aa96:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e7f0      	b.n	800aa82 <_svfiprintf_r+0x192>
 800aaa0:	ab03      	add	r3, sp, #12
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	462a      	mov	r2, r5
 800aaa6:	4b0e      	ldr	r3, [pc, #56]	@ (800aae0 <_svfiprintf_r+0x1f0>)
 800aaa8:	a904      	add	r1, sp, #16
 800aaaa:	4638      	mov	r0, r7
 800aaac:	f3af 8000 	nop.w
 800aab0:	1c42      	adds	r2, r0, #1
 800aab2:	4606      	mov	r6, r0
 800aab4:	d1d6      	bne.n	800aa64 <_svfiprintf_r+0x174>
 800aab6:	89ab      	ldrh	r3, [r5, #12]
 800aab8:	065b      	lsls	r3, r3, #25
 800aaba:	f53f af2d 	bmi.w	800a918 <_svfiprintf_r+0x28>
 800aabe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aac0:	e72c      	b.n	800a91c <_svfiprintf_r+0x2c>
 800aac2:	ab03      	add	r3, sp, #12
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	462a      	mov	r2, r5
 800aac8:	4b05      	ldr	r3, [pc, #20]	@ (800aae0 <_svfiprintf_r+0x1f0>)
 800aaca:	a904      	add	r1, sp, #16
 800aacc:	4638      	mov	r0, r7
 800aace:	f000 f879 	bl	800abc4 <_printf_i>
 800aad2:	e7ed      	b.n	800aab0 <_svfiprintf_r+0x1c0>
 800aad4:	0800b200 	.word	0x0800b200
 800aad8:	0800b20a 	.word	0x0800b20a
 800aadc:	00000000 	.word	0x00000000
 800aae0:	0800a839 	.word	0x0800a839
 800aae4:	0800b206 	.word	0x0800b206

0800aae8 <_printf_common>:
 800aae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaec:	4616      	mov	r6, r2
 800aaee:	4698      	mov	r8, r3
 800aaf0:	688a      	ldr	r2, [r1, #8]
 800aaf2:	690b      	ldr	r3, [r1, #16]
 800aaf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	bfb8      	it	lt
 800aafc:	4613      	movlt	r3, r2
 800aafe:	6033      	str	r3, [r6, #0]
 800ab00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab04:	4607      	mov	r7, r0
 800ab06:	460c      	mov	r4, r1
 800ab08:	b10a      	cbz	r2, 800ab0e <_printf_common+0x26>
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	6033      	str	r3, [r6, #0]
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	0699      	lsls	r1, r3, #26
 800ab12:	bf42      	ittt	mi
 800ab14:	6833      	ldrmi	r3, [r6, #0]
 800ab16:	3302      	addmi	r3, #2
 800ab18:	6033      	strmi	r3, [r6, #0]
 800ab1a:	6825      	ldr	r5, [r4, #0]
 800ab1c:	f015 0506 	ands.w	r5, r5, #6
 800ab20:	d106      	bne.n	800ab30 <_printf_common+0x48>
 800ab22:	f104 0a19 	add.w	sl, r4, #25
 800ab26:	68e3      	ldr	r3, [r4, #12]
 800ab28:	6832      	ldr	r2, [r6, #0]
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	42ab      	cmp	r3, r5
 800ab2e:	dc26      	bgt.n	800ab7e <_printf_common+0x96>
 800ab30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab34:	6822      	ldr	r2, [r4, #0]
 800ab36:	3b00      	subs	r3, #0
 800ab38:	bf18      	it	ne
 800ab3a:	2301      	movne	r3, #1
 800ab3c:	0692      	lsls	r2, r2, #26
 800ab3e:	d42b      	bmi.n	800ab98 <_printf_common+0xb0>
 800ab40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab44:	4641      	mov	r1, r8
 800ab46:	4638      	mov	r0, r7
 800ab48:	47c8      	blx	r9
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d01e      	beq.n	800ab8c <_printf_common+0xa4>
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	6922      	ldr	r2, [r4, #16]
 800ab52:	f003 0306 	and.w	r3, r3, #6
 800ab56:	2b04      	cmp	r3, #4
 800ab58:	bf02      	ittt	eq
 800ab5a:	68e5      	ldreq	r5, [r4, #12]
 800ab5c:	6833      	ldreq	r3, [r6, #0]
 800ab5e:	1aed      	subeq	r5, r5, r3
 800ab60:	68a3      	ldr	r3, [r4, #8]
 800ab62:	bf0c      	ite	eq
 800ab64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab68:	2500      	movne	r5, #0
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	bfc4      	itt	gt
 800ab6e:	1a9b      	subgt	r3, r3, r2
 800ab70:	18ed      	addgt	r5, r5, r3
 800ab72:	2600      	movs	r6, #0
 800ab74:	341a      	adds	r4, #26
 800ab76:	42b5      	cmp	r5, r6
 800ab78:	d11a      	bne.n	800abb0 <_printf_common+0xc8>
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	e008      	b.n	800ab90 <_printf_common+0xa8>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	4652      	mov	r2, sl
 800ab82:	4641      	mov	r1, r8
 800ab84:	4638      	mov	r0, r7
 800ab86:	47c8      	blx	r9
 800ab88:	3001      	adds	r0, #1
 800ab8a:	d103      	bne.n	800ab94 <_printf_common+0xac>
 800ab8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab94:	3501      	adds	r5, #1
 800ab96:	e7c6      	b.n	800ab26 <_printf_common+0x3e>
 800ab98:	18e1      	adds	r1, r4, r3
 800ab9a:	1c5a      	adds	r2, r3, #1
 800ab9c:	2030      	movs	r0, #48	@ 0x30
 800ab9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aba2:	4422      	add	r2, r4
 800aba4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800abac:	3302      	adds	r3, #2
 800abae:	e7c7      	b.n	800ab40 <_printf_common+0x58>
 800abb0:	2301      	movs	r3, #1
 800abb2:	4622      	mov	r2, r4
 800abb4:	4641      	mov	r1, r8
 800abb6:	4638      	mov	r0, r7
 800abb8:	47c8      	blx	r9
 800abba:	3001      	adds	r0, #1
 800abbc:	d0e6      	beq.n	800ab8c <_printf_common+0xa4>
 800abbe:	3601      	adds	r6, #1
 800abc0:	e7d9      	b.n	800ab76 <_printf_common+0x8e>
	...

0800abc4 <_printf_i>:
 800abc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abc8:	7e0f      	ldrb	r7, [r1, #24]
 800abca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800abcc:	2f78      	cmp	r7, #120	@ 0x78
 800abce:	4691      	mov	r9, r2
 800abd0:	4680      	mov	r8, r0
 800abd2:	460c      	mov	r4, r1
 800abd4:	469a      	mov	sl, r3
 800abd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800abda:	d807      	bhi.n	800abec <_printf_i+0x28>
 800abdc:	2f62      	cmp	r7, #98	@ 0x62
 800abde:	d80a      	bhi.n	800abf6 <_printf_i+0x32>
 800abe0:	2f00      	cmp	r7, #0
 800abe2:	f000 80d2 	beq.w	800ad8a <_printf_i+0x1c6>
 800abe6:	2f58      	cmp	r7, #88	@ 0x58
 800abe8:	f000 80b9 	beq.w	800ad5e <_printf_i+0x19a>
 800abec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800abf4:	e03a      	b.n	800ac6c <_printf_i+0xa8>
 800abf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800abfa:	2b15      	cmp	r3, #21
 800abfc:	d8f6      	bhi.n	800abec <_printf_i+0x28>
 800abfe:	a101      	add	r1, pc, #4	@ (adr r1, 800ac04 <_printf_i+0x40>)
 800ac00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac04:	0800ac5d 	.word	0x0800ac5d
 800ac08:	0800ac71 	.word	0x0800ac71
 800ac0c:	0800abed 	.word	0x0800abed
 800ac10:	0800abed 	.word	0x0800abed
 800ac14:	0800abed 	.word	0x0800abed
 800ac18:	0800abed 	.word	0x0800abed
 800ac1c:	0800ac71 	.word	0x0800ac71
 800ac20:	0800abed 	.word	0x0800abed
 800ac24:	0800abed 	.word	0x0800abed
 800ac28:	0800abed 	.word	0x0800abed
 800ac2c:	0800abed 	.word	0x0800abed
 800ac30:	0800ad71 	.word	0x0800ad71
 800ac34:	0800ac9b 	.word	0x0800ac9b
 800ac38:	0800ad2b 	.word	0x0800ad2b
 800ac3c:	0800abed 	.word	0x0800abed
 800ac40:	0800abed 	.word	0x0800abed
 800ac44:	0800ad93 	.word	0x0800ad93
 800ac48:	0800abed 	.word	0x0800abed
 800ac4c:	0800ac9b 	.word	0x0800ac9b
 800ac50:	0800abed 	.word	0x0800abed
 800ac54:	0800abed 	.word	0x0800abed
 800ac58:	0800ad33 	.word	0x0800ad33
 800ac5c:	6833      	ldr	r3, [r6, #0]
 800ac5e:	1d1a      	adds	r2, r3, #4
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	6032      	str	r2, [r6, #0]
 800ac64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e09d      	b.n	800adac <_printf_i+0x1e8>
 800ac70:	6833      	ldr	r3, [r6, #0]
 800ac72:	6820      	ldr	r0, [r4, #0]
 800ac74:	1d19      	adds	r1, r3, #4
 800ac76:	6031      	str	r1, [r6, #0]
 800ac78:	0606      	lsls	r6, r0, #24
 800ac7a:	d501      	bpl.n	800ac80 <_printf_i+0xbc>
 800ac7c:	681d      	ldr	r5, [r3, #0]
 800ac7e:	e003      	b.n	800ac88 <_printf_i+0xc4>
 800ac80:	0645      	lsls	r5, r0, #25
 800ac82:	d5fb      	bpl.n	800ac7c <_printf_i+0xb8>
 800ac84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac88:	2d00      	cmp	r5, #0
 800ac8a:	da03      	bge.n	800ac94 <_printf_i+0xd0>
 800ac8c:	232d      	movs	r3, #45	@ 0x2d
 800ac8e:	426d      	negs	r5, r5
 800ac90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac94:	4859      	ldr	r0, [pc, #356]	@ (800adfc <_printf_i+0x238>)
 800ac96:	230a      	movs	r3, #10
 800ac98:	e011      	b.n	800acbe <_printf_i+0xfa>
 800ac9a:	6821      	ldr	r1, [r4, #0]
 800ac9c:	6833      	ldr	r3, [r6, #0]
 800ac9e:	0608      	lsls	r0, r1, #24
 800aca0:	f853 5b04 	ldr.w	r5, [r3], #4
 800aca4:	d402      	bmi.n	800acac <_printf_i+0xe8>
 800aca6:	0649      	lsls	r1, r1, #25
 800aca8:	bf48      	it	mi
 800acaa:	b2ad      	uxthmi	r5, r5
 800acac:	2f6f      	cmp	r7, #111	@ 0x6f
 800acae:	4853      	ldr	r0, [pc, #332]	@ (800adfc <_printf_i+0x238>)
 800acb0:	6033      	str	r3, [r6, #0]
 800acb2:	bf14      	ite	ne
 800acb4:	230a      	movne	r3, #10
 800acb6:	2308      	moveq	r3, #8
 800acb8:	2100      	movs	r1, #0
 800acba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800acbe:	6866      	ldr	r6, [r4, #4]
 800acc0:	60a6      	str	r6, [r4, #8]
 800acc2:	2e00      	cmp	r6, #0
 800acc4:	bfa2      	ittt	ge
 800acc6:	6821      	ldrge	r1, [r4, #0]
 800acc8:	f021 0104 	bicge.w	r1, r1, #4
 800accc:	6021      	strge	r1, [r4, #0]
 800acce:	b90d      	cbnz	r5, 800acd4 <_printf_i+0x110>
 800acd0:	2e00      	cmp	r6, #0
 800acd2:	d04b      	beq.n	800ad6c <_printf_i+0x1a8>
 800acd4:	4616      	mov	r6, r2
 800acd6:	fbb5 f1f3 	udiv	r1, r5, r3
 800acda:	fb03 5711 	mls	r7, r3, r1, r5
 800acde:	5dc7      	ldrb	r7, [r0, r7]
 800ace0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ace4:	462f      	mov	r7, r5
 800ace6:	42bb      	cmp	r3, r7
 800ace8:	460d      	mov	r5, r1
 800acea:	d9f4      	bls.n	800acd6 <_printf_i+0x112>
 800acec:	2b08      	cmp	r3, #8
 800acee:	d10b      	bne.n	800ad08 <_printf_i+0x144>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	07df      	lsls	r7, r3, #31
 800acf4:	d508      	bpl.n	800ad08 <_printf_i+0x144>
 800acf6:	6923      	ldr	r3, [r4, #16]
 800acf8:	6861      	ldr	r1, [r4, #4]
 800acfa:	4299      	cmp	r1, r3
 800acfc:	bfde      	ittt	le
 800acfe:	2330      	movle	r3, #48	@ 0x30
 800ad00:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad04:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad08:	1b92      	subs	r2, r2, r6
 800ad0a:	6122      	str	r2, [r4, #16]
 800ad0c:	f8cd a000 	str.w	sl, [sp]
 800ad10:	464b      	mov	r3, r9
 800ad12:	aa03      	add	r2, sp, #12
 800ad14:	4621      	mov	r1, r4
 800ad16:	4640      	mov	r0, r8
 800ad18:	f7ff fee6 	bl	800aae8 <_printf_common>
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d14a      	bne.n	800adb6 <_printf_i+0x1f2>
 800ad20:	f04f 30ff 	mov.w	r0, #4294967295
 800ad24:	b004      	add	sp, #16
 800ad26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	f043 0320 	orr.w	r3, r3, #32
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	4833      	ldr	r0, [pc, #204]	@ (800ae00 <_printf_i+0x23c>)
 800ad34:	2778      	movs	r7, #120	@ 0x78
 800ad36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	6831      	ldr	r1, [r6, #0]
 800ad3e:	061f      	lsls	r7, r3, #24
 800ad40:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad44:	d402      	bmi.n	800ad4c <_printf_i+0x188>
 800ad46:	065f      	lsls	r7, r3, #25
 800ad48:	bf48      	it	mi
 800ad4a:	b2ad      	uxthmi	r5, r5
 800ad4c:	6031      	str	r1, [r6, #0]
 800ad4e:	07d9      	lsls	r1, r3, #31
 800ad50:	bf44      	itt	mi
 800ad52:	f043 0320 	orrmi.w	r3, r3, #32
 800ad56:	6023      	strmi	r3, [r4, #0]
 800ad58:	b11d      	cbz	r5, 800ad62 <_printf_i+0x19e>
 800ad5a:	2310      	movs	r3, #16
 800ad5c:	e7ac      	b.n	800acb8 <_printf_i+0xf4>
 800ad5e:	4827      	ldr	r0, [pc, #156]	@ (800adfc <_printf_i+0x238>)
 800ad60:	e7e9      	b.n	800ad36 <_printf_i+0x172>
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	f023 0320 	bic.w	r3, r3, #32
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	e7f6      	b.n	800ad5a <_printf_i+0x196>
 800ad6c:	4616      	mov	r6, r2
 800ad6e:	e7bd      	b.n	800acec <_printf_i+0x128>
 800ad70:	6833      	ldr	r3, [r6, #0]
 800ad72:	6825      	ldr	r5, [r4, #0]
 800ad74:	6961      	ldr	r1, [r4, #20]
 800ad76:	1d18      	adds	r0, r3, #4
 800ad78:	6030      	str	r0, [r6, #0]
 800ad7a:	062e      	lsls	r6, r5, #24
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	d501      	bpl.n	800ad84 <_printf_i+0x1c0>
 800ad80:	6019      	str	r1, [r3, #0]
 800ad82:	e002      	b.n	800ad8a <_printf_i+0x1c6>
 800ad84:	0668      	lsls	r0, r5, #25
 800ad86:	d5fb      	bpl.n	800ad80 <_printf_i+0x1bc>
 800ad88:	8019      	strh	r1, [r3, #0]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	6123      	str	r3, [r4, #16]
 800ad8e:	4616      	mov	r6, r2
 800ad90:	e7bc      	b.n	800ad0c <_printf_i+0x148>
 800ad92:	6833      	ldr	r3, [r6, #0]
 800ad94:	1d1a      	adds	r2, r3, #4
 800ad96:	6032      	str	r2, [r6, #0]
 800ad98:	681e      	ldr	r6, [r3, #0]
 800ad9a:	6862      	ldr	r2, [r4, #4]
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f7f5 fa56 	bl	8000250 <memchr>
 800ada4:	b108      	cbz	r0, 800adaa <_printf_i+0x1e6>
 800ada6:	1b80      	subs	r0, r0, r6
 800ada8:	6060      	str	r0, [r4, #4]
 800adaa:	6863      	ldr	r3, [r4, #4]
 800adac:	6123      	str	r3, [r4, #16]
 800adae:	2300      	movs	r3, #0
 800adb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adb4:	e7aa      	b.n	800ad0c <_printf_i+0x148>
 800adb6:	6923      	ldr	r3, [r4, #16]
 800adb8:	4632      	mov	r2, r6
 800adba:	4649      	mov	r1, r9
 800adbc:	4640      	mov	r0, r8
 800adbe:	47d0      	blx	sl
 800adc0:	3001      	adds	r0, #1
 800adc2:	d0ad      	beq.n	800ad20 <_printf_i+0x15c>
 800adc4:	6823      	ldr	r3, [r4, #0]
 800adc6:	079b      	lsls	r3, r3, #30
 800adc8:	d413      	bmi.n	800adf2 <_printf_i+0x22e>
 800adca:	68e0      	ldr	r0, [r4, #12]
 800adcc:	9b03      	ldr	r3, [sp, #12]
 800adce:	4298      	cmp	r0, r3
 800add0:	bfb8      	it	lt
 800add2:	4618      	movlt	r0, r3
 800add4:	e7a6      	b.n	800ad24 <_printf_i+0x160>
 800add6:	2301      	movs	r3, #1
 800add8:	4632      	mov	r2, r6
 800adda:	4649      	mov	r1, r9
 800addc:	4640      	mov	r0, r8
 800adde:	47d0      	blx	sl
 800ade0:	3001      	adds	r0, #1
 800ade2:	d09d      	beq.n	800ad20 <_printf_i+0x15c>
 800ade4:	3501      	adds	r5, #1
 800ade6:	68e3      	ldr	r3, [r4, #12]
 800ade8:	9903      	ldr	r1, [sp, #12]
 800adea:	1a5b      	subs	r3, r3, r1
 800adec:	42ab      	cmp	r3, r5
 800adee:	dcf2      	bgt.n	800add6 <_printf_i+0x212>
 800adf0:	e7eb      	b.n	800adca <_printf_i+0x206>
 800adf2:	2500      	movs	r5, #0
 800adf4:	f104 0619 	add.w	r6, r4, #25
 800adf8:	e7f5      	b.n	800ade6 <_printf_i+0x222>
 800adfa:	bf00      	nop
 800adfc:	0800b211 	.word	0x0800b211
 800ae00:	0800b222 	.word	0x0800b222

0800ae04 <memmove>:
 800ae04:	4288      	cmp	r0, r1
 800ae06:	b510      	push	{r4, lr}
 800ae08:	eb01 0402 	add.w	r4, r1, r2
 800ae0c:	d902      	bls.n	800ae14 <memmove+0x10>
 800ae0e:	4284      	cmp	r4, r0
 800ae10:	4623      	mov	r3, r4
 800ae12:	d807      	bhi.n	800ae24 <memmove+0x20>
 800ae14:	1e43      	subs	r3, r0, #1
 800ae16:	42a1      	cmp	r1, r4
 800ae18:	d008      	beq.n	800ae2c <memmove+0x28>
 800ae1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae22:	e7f8      	b.n	800ae16 <memmove+0x12>
 800ae24:	4402      	add	r2, r0
 800ae26:	4601      	mov	r1, r0
 800ae28:	428a      	cmp	r2, r1
 800ae2a:	d100      	bne.n	800ae2e <memmove+0x2a>
 800ae2c:	bd10      	pop	{r4, pc}
 800ae2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae36:	e7f7      	b.n	800ae28 <memmove+0x24>

0800ae38 <_sbrk_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4d06      	ldr	r5, [pc, #24]	@ (800ae54 <_sbrk_r+0x1c>)
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4604      	mov	r4, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	602b      	str	r3, [r5, #0]
 800ae44:	f7f8 fa70 	bl	8003328 <_sbrk>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d102      	bne.n	800ae52 <_sbrk_r+0x1a>
 800ae4c:	682b      	ldr	r3, [r5, #0]
 800ae4e:	b103      	cbz	r3, 800ae52 <_sbrk_r+0x1a>
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	2000152c 	.word	0x2000152c

0800ae58 <memcpy>:
 800ae58:	440a      	add	r2, r1
 800ae5a:	4291      	cmp	r1, r2
 800ae5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae60:	d100      	bne.n	800ae64 <memcpy+0xc>
 800ae62:	4770      	bx	lr
 800ae64:	b510      	push	{r4, lr}
 800ae66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae6e:	4291      	cmp	r1, r2
 800ae70:	d1f9      	bne.n	800ae66 <memcpy+0xe>
 800ae72:	bd10      	pop	{r4, pc}

0800ae74 <_realloc_r>:
 800ae74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae78:	4680      	mov	r8, r0
 800ae7a:	4615      	mov	r5, r2
 800ae7c:	460c      	mov	r4, r1
 800ae7e:	b921      	cbnz	r1, 800ae8a <_realloc_r+0x16>
 800ae80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae84:	4611      	mov	r1, r2
 800ae86:	f7ff bc4b 	b.w	800a720 <_malloc_r>
 800ae8a:	b92a      	cbnz	r2, 800ae98 <_realloc_r+0x24>
 800ae8c:	f7ff fbdc 	bl	800a648 <_free_r>
 800ae90:	2400      	movs	r4, #0
 800ae92:	4620      	mov	r0, r4
 800ae94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae98:	f000 f81a 	bl	800aed0 <_malloc_usable_size_r>
 800ae9c:	4285      	cmp	r5, r0
 800ae9e:	4606      	mov	r6, r0
 800aea0:	d802      	bhi.n	800aea8 <_realloc_r+0x34>
 800aea2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aea6:	d8f4      	bhi.n	800ae92 <_realloc_r+0x1e>
 800aea8:	4629      	mov	r1, r5
 800aeaa:	4640      	mov	r0, r8
 800aeac:	f7ff fc38 	bl	800a720 <_malloc_r>
 800aeb0:	4607      	mov	r7, r0
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d0ec      	beq.n	800ae90 <_realloc_r+0x1c>
 800aeb6:	42b5      	cmp	r5, r6
 800aeb8:	462a      	mov	r2, r5
 800aeba:	4621      	mov	r1, r4
 800aebc:	bf28      	it	cs
 800aebe:	4632      	movcs	r2, r6
 800aec0:	f7ff ffca 	bl	800ae58 <memcpy>
 800aec4:	4621      	mov	r1, r4
 800aec6:	4640      	mov	r0, r8
 800aec8:	f7ff fbbe 	bl	800a648 <_free_r>
 800aecc:	463c      	mov	r4, r7
 800aece:	e7e0      	b.n	800ae92 <_realloc_r+0x1e>

0800aed0 <_malloc_usable_size_r>:
 800aed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed4:	1f18      	subs	r0, r3, #4
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	bfbc      	itt	lt
 800aeda:	580b      	ldrlt	r3, [r1, r0]
 800aedc:	18c0      	addlt	r0, r0, r3
 800aede:	4770      	bx	lr

0800aee0 <_init>:
 800aee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee2:	bf00      	nop
 800aee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aee6:	bc08      	pop	{r3}
 800aee8:	469e      	mov	lr, r3
 800aeea:	4770      	bx	lr

0800aeec <_fini>:
 800aeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeee:	bf00      	nop
 800aef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef2:	bc08      	pop	{r3}
 800aef4:	469e      	mov	lr, r3
 800aef6:	4770      	bx	lr
