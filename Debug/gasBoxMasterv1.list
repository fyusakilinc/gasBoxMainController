
gasBoxMasterv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009724  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08009904  08009904  0000a904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c3c  08009c3c  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  08009c3c  08009c3c  0000ac3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c44  08009c44  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c44  08009c44  0000ac44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c48  08009c48  0000ac48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009c4c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c4  20000060  08009cac  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001424  08009cac  0000b424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd54  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000422b  00000000  00000000  00026de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  0002b010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137d  00000000  00000000  0002c920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b06  00000000  00000000  0002dc9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021666  00000000  00000000  000537a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2f65  00000000  00000000  00074e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167d6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d08  00000000  00000000  00167db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0016eabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	080098ec 	.word	0x080098ec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	080098ec 	.word	0x080098ec

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <hw_sero_get>:


// Serviceroutine Hadware Get
// Prueft im wesentlichen auf Harwarefehlersignale
void hw_sero_get(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <hw_sero_set>:

// Serviceroutine Hadware Set
// Verwaltet die Heartbeat LED
void hw_sero_set(void)
{	if (ct_hbeat_null()==1)
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	f002 fad2 	bl	8002b9c <ct_hbeat_null>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d107      	bne.n	800060e <hw_sero_set+0x1e>
	 { set_ct_hbeat(500);
 80005fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000602:	f002 fabb 	bl	8002b7c <set_ct_hbeat>
	 HAL_GPIO_TogglePin(UC_HEARTBEAT_GPIO_Port, UC_HEARTBEAT_Pin);
 8000606:	2108      	movs	r1, #8
 8000608:	4802      	ldr	r0, [pc, #8]	@ (8000614 <hw_sero_set+0x24>)
 800060a:	f005 f81f 	bl	800564c <HAL_GPIO_TogglePin>
	}
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	48000c00 	.word	0x48000c00

08000618 <u_ok>:
void hw_set_error_out(uint8_t p)
{

}

uint8_t u_ok(GPIO_TypeDef *port, uint16_t pin) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	807b      	strh	r3, [r7, #2]
    GPIO_PinState s = HAL_GPIO_ReadPin(port, pin);
 8000624:	887b      	ldrh	r3, [r7, #2]
 8000626:	4619      	mov	r1, r3
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f004 ffdf 	bl	80055ec <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	73fb      	strb	r3, [r7, #15]
    return (s == GPIO_PIN_SET) ? 1u : 0u;
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d101      	bne.n	800063c <u_ok+0x24>
 8000638:	2301      	movs	r3, #1
 800063a:	e000      	b.n	800063e <u_ok+0x26>
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <update_uok>:

uint8_t update_uok(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	uint8_t res1 = u_ok(UC__5VOK_GPIO_Port,UC__5VOK_Pin);
 800064e:	2110      	movs	r1, #16
 8000650:	480b      	ldr	r0, [pc, #44]	@ (8000680 <update_uok+0x38>)
 8000652:	f7ff ffe1 	bl	8000618 <u_ok>
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	uint8_t res2 = u_ok(UC__12VOK_GPIO_Port,UC__12VOK_Pin);
 800065a:	2120      	movs	r1, #32
 800065c:	4808      	ldr	r0, [pc, #32]	@ (8000680 <update_uok+0x38>)
 800065e:	f7ff ffdb 	bl	8000618 <u_ok>
 8000662:	4603      	mov	r3, r0
 8000664:	71bb      	strb	r3, [r7, #6]
	if((res1 && res2)){
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d004      	beq.n	8000676 <update_uok+0x2e>
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <update_uok+0x2e>
		return 1;
 8000672:	2301      	movs	r3, #1
 8000674:	e000      	b.n	8000678 <update_uok+0x30>
	}
	return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	48000c00 	.word	0x48000c00

08000684 <readPumpWarning>:
                      set ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

// these two functions might just need a pulse

uint8_t readPumpWarning(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	GPIO_PinState s = HAL_GPIO_ReadPin(UC_PUMP_WARNING_GPIO_Port, UC_PUMP_WARNING_Pin);
 800068a:	2110      	movs	r1, #16
 800068c:	4807      	ldr	r0, [pc, #28]	@ (80006ac <readPumpWarning+0x28>)
 800068e:	f004 ffad 	bl	80055ec <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	return (s == GPIO_PIN_SET) ? 1u : 0u;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d101      	bne.n	80006a0 <readPumpWarning+0x1c>
 800069c:	2301      	movs	r3, #1
 800069e:	e000      	b.n	80006a2 <readPumpWarning+0x1e>
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	48001000 	.word	0x48001000

080006b0 <readPumpAlarm>:

uint8_t readPumpAlarm(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	GPIO_PinState s = HAL_GPIO_ReadPin(UC_PUMP_ALARM_GPIO_Port, UC_PUMP_ALARM_Pin);
 80006b6:	2120      	movs	r1, #32
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <readPumpAlarm+0x28>)
 80006ba:	f004 ff97 	bl	80055ec <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	return (s == GPIO_PIN_SET) ? 1u : 0u;
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d101      	bne.n	80006cc <readPumpAlarm+0x1c>
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <readPumpAlarm+0x1e>
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	48001000 	.word	0x48001000

080006dc <MX_ADC5_Init>:

ADC_HandleTypeDef hadc5;

/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2220      	movs	r2, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f008 fc6f 	bl	8008fcc <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80006ee:	4b2b      	ldr	r3, [pc, #172]	@ (800079c <MX_ADC5_Init+0xc0>)
 80006f0:	4a2b      	ldr	r2, [pc, #172]	@ (80007a0 <MX_ADC5_Init+0xc4>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f4:	4b29      	ldr	r3, [pc, #164]	@ (800079c <MX_ADC5_Init+0xc0>)
 80006f6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006fa:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b27      	ldr	r3, [pc, #156]	@ (800079c <MX_ADC5_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b26      	ldr	r3, [pc, #152]	@ (800079c <MX_ADC5_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000708:	4b24      	ldr	r3, [pc, #144]	@ (800079c <MX_ADC5_Init+0xc0>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070e:	4b23      	ldr	r3, [pc, #140]	@ (800079c <MX_ADC5_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b21      	ldr	r3, [pc, #132]	@ (800079c <MX_ADC5_Init+0xc0>)
 8000716:	2204      	movs	r2, #4
 8000718:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800071a:	4b20      	ldr	r3, [pc, #128]	@ (800079c <MX_ADC5_Init+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1e      	ldr	r3, [pc, #120]	@ (800079c <MX_ADC5_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000726:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <MX_ADC5_Init+0xc0>)
 8000728:	2201      	movs	r2, #1
 800072a:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <MX_ADC5_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b19      	ldr	r3, [pc, #100]	@ (800079c <MX_ADC5_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b18      	ldr	r3, [pc, #96]	@ (800079c <MX_ADC5_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <MX_ADC5_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <MX_ADC5_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <MX_ADC5_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000756:	4811      	ldr	r0, [pc, #68]	@ (800079c <MX_ADC5_Init+0xc0>)
 8000758:	f003 fe88 	bl	800446c <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000762:	f000 fc5a 	bl	800101a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_ADC5_Init+0xc8>)
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076a:	2306      	movs	r3, #6
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000772:	237f      	movs	r3, #127	@ 0x7f
 8000774:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000776:	2304      	movs	r3, #4
 8000778:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	@ (800079c <MX_ADC5_Init+0xc0>)
 8000784:	f004 f82e 	bl	80047e4 <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 800078e:	f000 fc44 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000007c 	.word	0x2000007c
 80007a0:	50000600 	.word	0x50000600
 80007a4:	1d500080 	.word	0x1d500080

080007a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09e      	sub	sp, #120	@ 0x78
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	2254      	movs	r2, #84	@ 0x54
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f008 fbff 	bl	8008fcc <memset>
  if(adcHandle->Instance==ADC5)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a1e      	ldr	r2, [pc, #120]	@ (800084c <HAL_ADC_MspInit+0xa4>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d134      	bne.n	8000842 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80007d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80007de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80007e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4618      	mov	r0, r3
 80007ea:	f005 fd2b 	bl	8006244 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007f4:	f000 fc11 	bl	800101a <Error_Handler>
    }

    /* ADC5 clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 80007f8:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <HAL_ADC_MspInit+0xa8>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	4a14      	ldr	r2, [pc, #80]	@ (8000850 <HAL_ADC_MspInit+0xa8>)
 80007fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000802:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <HAL_ADC_MspInit+0xa8>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000810:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <HAL_ADC_MspInit+0xa8>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000814:	4a0e      	ldr	r2, [pc, #56]	@ (8000850 <HAL_ADC_MspInit+0xa8>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <HAL_ADC_MspInit+0xa8>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    PD10     ------> ADC5_IN7
    PD11     ------> ADC5_IN8
    PD12     ------> ADC5_IN9
    PD13     ------> ADC5_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000828:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800082c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000836:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	@ (8000854 <HAL_ADC_MspInit+0xac>)
 800083e:	f004 fd53 	bl	80052e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000842:	bf00      	nop
 8000844:	3778      	adds	r7, #120	@ 0x78
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	50000600 	.word	0x50000600
 8000850:	40021000 	.word	0x40021000
 8000854:	48000c00 	.word	0x48000c00

08000858 <delay_ms>:
	for(volatile uint32_t i=0; i<m; i++);				// volatile, damit nicht vom Compiler wegoptimiert
}

//Verz�gerung um n * 1ms
void delay_ms(uint16_t n)
{	HAL_Delay(n);
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	80fb      	strh	r3, [r7, #6]
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fc09 	bl	800407c <HAL_Delay>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <clamp16>:
		return 1;
	else
		return 0;
}

uint16_t clamp16(int32_t v) {
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
    if (v < 0)      return 0u;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b00      	cmp	r3, #0
 800087e:	da01      	bge.n	8000884 <clamp16+0x12>
 8000880:	2300      	movs	r3, #0
 8000882:	e008      	b.n	8000896 <clamp16+0x24>
    if (v > 65535)  return 65535u;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800088a:	db02      	blt.n	8000892 <clamp16+0x20>
 800088c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000890:	e001      	b.n	8000896 <clamp16+0x24>
    return (uint16_t)v;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	b29b      	uxth	r3, r3
}
 8000896:	4618      	mov	r0, r3
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <gb_sero_get>:

//----- GASBOX CONTROLLER -------------------------------------------------

// Gasbox (UART4, binary)
void gb_sero_get(void)
{
 80008a4:	b598      	push	{r3, r4, r7, lr}
 80008a6:	af00      	add	r7, sp, #0
    nzeichen = 0;
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <gb_sero_get+0x54>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
    while ((rb_rx_used(&uart4_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 80008ae:	e00e      	b.n	80008ce <gb_sero_get+0x2a>
        msg[nzeichen++] = (uint8_t)uartRB_Getc(&uart4_rb);
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <gb_sero_get+0x54>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	b2d1      	uxtb	r1, r2
 80008ba:	4a0f      	ldr	r2, [pc, #60]	@ (80008f8 <gb_sero_get+0x54>)
 80008bc:	7011      	strb	r1, [r2, #0]
 80008be:	461c      	mov	r4, r3
 80008c0:	480e      	ldr	r0, [pc, #56]	@ (80008fc <gb_sero_get+0x58>)
 80008c2:	f002 fb53 	bl	8002f6c <uartRB_Getc>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <gb_sero_get+0x5c>)
 80008cc:	551a      	strb	r2, [r3, r4]
    while ((rb_rx_used(&uart4_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 80008ce:	480b      	ldr	r0, [pc, #44]	@ (80008fc <gb_sero_get+0x58>)
 80008d0:	f002 fa8b 	bl	8002dea <rb_rx_used>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	dd04      	ble.n	80008e4 <gb_sero_get+0x40>
 80008da:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <gb_sero_get+0x54>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b0d      	cmp	r3, #13
 80008e2:	d9e5      	bls.n	80008b0 <gb_sero_get+0xc>
    }
    if (nzeichen) parse_binary_gasbox();
 80008e4:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <gb_sero_get+0x54>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <gb_sero_get+0x4e>
 80008ee:	f000 f809 	bl	8000904 <parse_binary_gasbox>
}
 80008f2:	bf00      	nop
 80008f4:	bd98      	pop	{r3, r4, r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000f7 	.word	0x200000f7
 80008fc:	200009a8 	.word	0x200009a8
 8000900:	200000e8 	.word	0x200000e8

08000904 <parse_binary_gasbox>:


// ---- parser  ----
static void parse_binary_gasbox(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
	uint8_t data;
	uint8_t ptr = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	73fb      	strb	r3, [r7, #15]

	do {
		switch (state) {
 800090e:	4b7a      	ldr	r3, [pc, #488]	@ (8000af8 <parse_binary_gasbox+0x1f4>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b03      	cmp	r3, #3
 8000914:	f000 80a8 	beq.w	8000a68 <parse_binary_gasbox+0x164>
 8000918:	2b03      	cmp	r3, #3
 800091a:	f300 80e1 	bgt.w	8000ae0 <parse_binary_gasbox+0x1dc>
 800091e:	2b01      	cmp	r3, #1
 8000920:	d030      	beq.n	8000984 <parse_binary_gasbox+0x80>
 8000922:	2b02      	cmp	r3, #2
 8000924:	f000 8098 	beq.w	8000a58 <parse_binary_gasbox+0x154>
 8000928:	e0da      	b.n	8000ae0 <parse_binary_gasbox+0x1dc>
		case RMT_WAIT_FOR_PAKET_START: {
			// scan for DLE 'S'
			while (ptr < nzeichen) {
				data = msg[ptr++];
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	1c5a      	adds	r2, r3, #1
 800092e:	73fa      	strb	r2, [r7, #15]
 8000930:	461a      	mov	r2, r3
 8000932:	4b72      	ldr	r3, [pc, #456]	@ (8000afc <parse_binary_gasbox+0x1f8>)
 8000934:	5c9b      	ldrb	r3, [r3, r2]
 8000936:	717b      	strb	r3, [r7, #5]
				if (dleFlag) {
 8000938:	4b71      	ldr	r3, [pc, #452]	@ (8000b00 <parse_binary_gasbox+0x1fc>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d01b      	beq.n	8000978 <parse_binary_gasbox+0x74>
					// second control char after DLE
					if (data == GB_DLE) {
 8000940:	797b      	ldrb	r3, [r7, #5]
 8000942:	2b3d      	cmp	r3, #61	@ 0x3d
 8000944:	d103      	bne.n	800094e <parse_binary_gasbox+0x4a>
						// interpret as literal DLE
						dleFlag = 0;
 8000946:	4b6e      	ldr	r3, [pc, #440]	@ (8000b00 <parse_binary_gasbox+0x1fc>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	e01a      	b.n	8000984 <parse_binary_gasbox+0x80>
						// (no payload yet in WAIT state)
					} else if (data == GB_SOT) {
 800094e:	797b      	ldrb	r3, [r7, #5]
 8000950:	2b53      	cmp	r3, #83	@ 0x53
 8000952:	d10d      	bne.n	8000970 <parse_binary_gasbox+0x6c>
						// start of frame
						lengthRx = 0;
 8000954:	4b6b      	ldr	r3, [pc, #428]	@ (8000b04 <parse_binary_gasbox+0x200>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
						checksum = 0;
 800095a:	4b6b      	ldr	r3, [pc, #428]	@ (8000b08 <parse_binary_gasbox+0x204>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000960:	4b67      	ldr	r3, [pc, #412]	@ (8000b00 <parse_binary_gasbox+0x1fc>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
						state = RMT_READ_PAKET;
 8000966:	4b64      	ldr	r3, [pc, #400]	@ (8000af8 <parse_binary_gasbox+0x1f4>)
 8000968:	2202      	movs	r2, #2
 800096a:	701a      	strb	r2, [r3, #0]
						break;
 800096c:	bf00      	nop
					if (data == GB_DLE)
						dleFlag = 1;
				}
			}
		}
			break;
 800096e:	e0b7      	b.n	8000ae0 <parse_binary_gasbox+0x1dc>
						dleFlag = 0;
 8000970:	4b63      	ldr	r3, [pc, #396]	@ (8000b00 <parse_binary_gasbox+0x1fc>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	e005      	b.n	8000984 <parse_binary_gasbox+0x80>
					if (data == GB_DLE)
 8000978:	797b      	ldrb	r3, [r7, #5]
 800097a:	2b3d      	cmp	r3, #61	@ 0x3d
 800097c:	d102      	bne.n	8000984 <parse_binary_gasbox+0x80>
						dleFlag = 1;
 800097e:	4b60      	ldr	r3, [pc, #384]	@ (8000b00 <parse_binary_gasbox+0x1fc>)
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
			while (ptr < nzeichen) {
 8000984:	4b61      	ldr	r3, [pc, #388]	@ (8000b0c <parse_binary_gasbox+0x208>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	7bfa      	ldrb	r2, [r7, #15]
 800098c:	429a      	cmp	r2, r3
 800098e:	d3cc      	bcc.n	800092a <parse_binary_gasbox+0x26>
			break;
 8000990:	e0a6      	b.n	8000ae0 <parse_binary_gasbox+0x1dc>

		case RMT_READ_PAKET: {
			while (ptr < nzeichen) {
				data = msg[ptr++];
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	1c5a      	adds	r2, r3, #1
 8000996:	73fa      	strb	r2, [r7, #15]
 8000998:	461a      	mov	r2, r3
 800099a:	4b58      	ldr	r3, [pc, #352]	@ (8000afc <parse_binary_gasbox+0x1f8>)
 800099c:	5c9b      	ldrb	r3, [r3, r2]
 800099e:	717b      	strb	r3, [r7, #5]

				// avoid runaway frames
				if (lengthRx > RMT_MAX_PAKET_LENGTH) {
 80009a0:	4b58      	ldr	r3, [pc, #352]	@ (8000b04 <parse_binary_gasbox+0x200>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b0e      	cmp	r3, #14
 80009a6:	d906      	bls.n	80009b6 <parse_binary_gasbox+0xb2>
					dleFlag = 0;
 80009a8:	4b55      	ldr	r3, [pc, #340]	@ (8000b00 <parse_binary_gasbox+0x1fc>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
					state = RMT_WAIT_FOR_PAKET_START;
 80009ae:	4b52      	ldr	r3, [pc, #328]	@ (8000af8 <parse_binary_gasbox+0x1f4>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
					break;
 80009b4:	e057      	b.n	8000a66 <parse_binary_gasbox+0x162>
				}

				if (dleFlag) {
 80009b6:	4b52      	ldr	r3, [pc, #328]	@ (8000b00 <parse_binary_gasbox+0x1fc>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d034      	beq.n	8000a28 <parse_binary_gasbox+0x124>
					if (data == GB_DLE) {
 80009be:	797b      	ldrb	r3, [r7, #5]
 80009c0:	2b3d      	cmp	r3, #61	@ 0x3d
 80009c2:	d113      	bne.n	80009ec <parse_binary_gasbox+0xe8>
						// stuffed DLE as data
						dleFlag = 0;
 80009c4:	4b4e      	ldr	r3, [pc, #312]	@ (8000b00 <parse_binary_gasbox+0x1fc>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
						bufferRx[lengthRx++] = GB_DLE;
 80009ca:	4b4e      	ldr	r3, [pc, #312]	@ (8000b04 <parse_binary_gasbox+0x200>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	b2d1      	uxtb	r1, r2
 80009d2:	4a4c      	ldr	r2, [pc, #304]	@ (8000b04 <parse_binary_gasbox+0x200>)
 80009d4:	7011      	strb	r1, [r2, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b4d      	ldr	r3, [pc, #308]	@ (8000b10 <parse_binary_gasbox+0x20c>)
 80009da:	213d      	movs	r1, #61	@ 0x3d
 80009dc:	5499      	strb	r1, [r3, r2]
						checksum += GB_DLE;
 80009de:	4b4a      	ldr	r3, [pc, #296]	@ (8000b08 <parse_binary_gasbox+0x204>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	333d      	adds	r3, #61	@ 0x3d
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b48      	ldr	r3, [pc, #288]	@ (8000b08 <parse_binary_gasbox+0x204>)
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	e035      	b.n	8000a58 <parse_binary_gasbox+0x154>
					} else if (data == GB_SOT) {
 80009ec:	797b      	ldrb	r3, [r7, #5]
 80009ee:	2b53      	cmp	r3, #83	@ 0x53
 80009f0:	d10c      	bne.n	8000a0c <parse_binary_gasbox+0x108>
						// unexpected new start → restart frame
						lengthRx = 0;
 80009f2:	4b44      	ldr	r3, [pc, #272]	@ (8000b04 <parse_binary_gasbox+0x200>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
						checksum = 0;
 80009f8:	4b43      	ldr	r3, [pc, #268]	@ (8000b08 <parse_binary_gasbox+0x204>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 80009fe:	4b40      	ldr	r3, [pc, #256]	@ (8000b00 <parse_binary_gasbox+0x1fc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
						state = RMT_READ_PAKET;
 8000a04:	4b3c      	ldr	r3, [pc, #240]	@ (8000af8 <parse_binary_gasbox+0x1f4>)
 8000a06:	2202      	movs	r2, #2
 8000a08:	701a      	strb	r2, [r3, #0]
						break;
 8000a0a:	e02c      	b.n	8000a66 <parse_binary_gasbox+0x162>
					} else if (data == GB_EOT) {
 8000a0c:	797b      	ldrb	r3, [r7, #5]
 8000a0e:	2b45      	cmp	r3, #69	@ 0x45
 8000a10:	d106      	bne.n	8000a20 <parse_binary_gasbox+0x11c>
						// proper trailer -> parse
						state = RMT_PARSE_PAKET;
 8000a12:	4b39      	ldr	r3, [pc, #228]	@ (8000af8 <parse_binary_gasbox+0x1f4>)
 8000a14:	2203      	movs	r2, #3
 8000a16:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000a18:	4b39      	ldr	r3, [pc, #228]	@ (8000b00 <parse_binary_gasbox+0x1fc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
						break;
 8000a1e:	e022      	b.n	8000a66 <parse_binary_gasbox+0x162>
					} else {
						dleFlag = 0; // unknown after DLE -> ignore
 8000a20:	4b37      	ldr	r3, [pc, #220]	@ (8000b00 <parse_binary_gasbox+0x1fc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	e017      	b.n	8000a58 <parse_binary_gasbox+0x154>
					}
				} else {
					if (data == GB_DLE) {
 8000a28:	797b      	ldrb	r3, [r7, #5]
 8000a2a:	2b3d      	cmp	r3, #61	@ 0x3d
 8000a2c:	d103      	bne.n	8000a36 <parse_binary_gasbox+0x132>
						dleFlag = 1;            // next is control
 8000a2e:	4b34      	ldr	r3, [pc, #208]	@ (8000b00 <parse_binary_gasbox+0x1fc>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
 8000a34:	e010      	b.n	8000a58 <parse_binary_gasbox+0x154>
					} else {
						bufferRx[lengthRx++] = data;
 8000a36:	4b33      	ldr	r3, [pc, #204]	@ (8000b04 <parse_binary_gasbox+0x200>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	b2d1      	uxtb	r1, r2
 8000a3e:	4a31      	ldr	r2, [pc, #196]	@ (8000b04 <parse_binary_gasbox+0x200>)
 8000a40:	7011      	strb	r1, [r2, #0]
 8000a42:	4619      	mov	r1, r3
 8000a44:	4a32      	ldr	r2, [pc, #200]	@ (8000b10 <parse_binary_gasbox+0x20c>)
 8000a46:	797b      	ldrb	r3, [r7, #5]
 8000a48:	5453      	strb	r3, [r2, r1]
						checksum += data;
 8000a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b08 <parse_binary_gasbox+0x204>)
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	797b      	ldrb	r3, [r7, #5]
 8000a50:	4413      	add	r3, r2
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b2c      	ldr	r3, [pc, #176]	@ (8000b08 <parse_binary_gasbox+0x204>)
 8000a56:	701a      	strb	r2, [r3, #0]
			while (ptr < nzeichen) {
 8000a58:	4b2c      	ldr	r3, [pc, #176]	@ (8000b0c <parse_binary_gasbox+0x208>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	7bfa      	ldrb	r2, [r7, #15]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d396      	bcc.n	8000992 <parse_binary_gasbox+0x8e>
					}
				}
			}
		}
			break;
 8000a64:	e03c      	b.n	8000ae0 <parse_binary_gasbox+0x1dc>
 8000a66:	e03b      	b.n	8000ae0 <parse_binary_gasbox+0x1dc>

		case RMT_PARSE_PAKET: {
		    // Expect 4 payload bytes + 1 checksum (net length 5)
		    if (lengthRx == 5) {
 8000a68:	4b26      	ldr	r3, [pc, #152]	@ (8000b04 <parse_binary_gasbox+0x200>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b05      	cmp	r3, #5
 8000a6e:	d12a      	bne.n	8000ac6 <parse_binary_gasbox+0x1c2>
		        uint8_t cmd    = bufferRx[0];
 8000a70:	4b27      	ldr	r3, [pc, #156]	@ (8000b10 <parse_binary_gasbox+0x20c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	73bb      	strb	r3, [r7, #14]
		        uint8_t status = bufferRx[1];
 8000a76:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <parse_binary_gasbox+0x20c>)
 8000a78:	785b      	ldrb	r3, [r3, #1]
 8000a7a:	737b      	strb	r3, [r7, #13]
		        uint8_t pH     = bufferRx[2];
 8000a7c:	4b24      	ldr	r3, [pc, #144]	@ (8000b10 <parse_binary_gasbox+0x20c>)
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	733b      	strb	r3, [r7, #12]
		        uint8_t pL     = bufferRx[3];
 8000a82:	4b23      	ldr	r3, [pc, #140]	@ (8000b10 <parse_binary_gasbox+0x20c>)
 8000a84:	78db      	ldrb	r3, [r3, #3]
 8000a86:	72fb      	strb	r3, [r7, #11]
		        uint8_t cks    = bufferRx[4];
 8000a88:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <parse_binary_gasbox+0x20c>)
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	72bb      	strb	r3, [r7, #10]

		        // checksum over the 4 payload bytes
		        uint8_t sum = (uint8_t)(cmd + status + pH + pL);
 8000a8e:	7bba      	ldrb	r2, [r7, #14]
 8000a90:	7b7b      	ldrb	r3, [r7, #13]
 8000a92:	4413      	add	r3, r2
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	7b3b      	ldrb	r3, [r7, #12]
 8000a98:	4413      	add	r3, r2
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	7afb      	ldrb	r3, [r7, #11]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	727b      	strb	r3, [r7, #9]

		        if (sum == cks) {
 8000aa2:	7a7a      	ldrb	r2, [r7, #9]
 8000aa4:	7abb      	ldrb	r3, [r7, #10]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d10d      	bne.n	8000ac6 <parse_binary_gasbox+0x1c2>
		            uint16_t val = ((uint16_t)pH << 8) | pL;
 8000aaa:	7b3b      	ldrb	r3, [r7, #12]
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	b21a      	sxth	r2, r3
 8000ab0:	7afb      	ldrb	r3, [r7, #11]
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	80fb      	strh	r3, [r7, #6]
		            // Publish to mailbox: if someone is waiting for this cmd, wake them.
		            gb_on_frame(cmd, status, val);
 8000aba:	88fa      	ldrh	r2, [r7, #6]
 8000abc:	7b79      	ldrb	r1, [r7, #13]
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 f8d3 	bl	8000c6c <gb_on_frame>
		        }
		        // else: bad checksum -> drop silently (or raise an error flag if you want)
		    }
		    // reset for next frame
		    state     = RMT_WAIT_FOR_PAKET_START;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <parse_binary_gasbox+0x1f4>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
		    lengthRx  = 0;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <parse_binary_gasbox+0x200>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
		    checksum  = 0;
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b08 <parse_binary_gasbox+0x204>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
		    dleFlag   = 0;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <parse_binary_gasbox+0x1fc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
		} break;
 8000ade:	bf00      	nop
		}
	} while (ptr < nzeichen);
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <parse_binary_gasbox+0x208>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	7bfa      	ldrb	r2, [r7, #15]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	f4ff af10 	bcc.w	800090e <parse_binary_gasbox+0xa>
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000000 	.word	0x20000000
 8000afc:	200000e8 	.word	0x200000e8
 8000b00:	20000108 	.word	0x20000108
 8000b04:	20000107 	.word	0x20000107
 8000b08:	20000109 	.word	0x20000109
 8000b0c:	200000f7 	.word	0x200000f7
 8000b10:	200000f8 	.word	0x200000f8

08000b14 <gb_sum8>:


static inline uint8_t gb_sum8(const uint8_t *p, int n){
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
    uint32_t s = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<n; ++i) s += p[i];
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	e00a      	b.n	8000b3e <gb_sum8+0x2a>
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	dbf0      	blt.n	8000b28 <gb_sum8+0x14>
    return (uint8_t)s;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	b2db      	uxtb	r3, r3
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <gb_push_escaped>:

static inline void gb_push_escaped(uint8_t **wp, uint8_t b){
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	70fb      	strb	r3, [r7, #3]
    *(*wp)++ = b;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	1c59      	adds	r1, r3, #1
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	6011      	str	r1, [r2, #0]
 8000b6c:	78fa      	ldrb	r2, [r7, #3]
 8000b6e:	701a      	strb	r2, [r3, #0]
    if (b == GB_DLE) *(*wp)++ = b;  // double any DLE in-band
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	2b3d      	cmp	r3, #61	@ 0x3d
 8000b74:	d106      	bne.n	8000b84 <gb_push_escaped+0x2e>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	1c59      	adds	r1, r3, #1
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	6011      	str	r1, [r2, #0]
 8000b80:	78fa      	ldrb	r2, [r7, #3]
 8000b82:	701a      	strb	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <gasbox_send>:
 * Build + queue one framed command to the gasbox on UART4.
 * payload = [ cmd, 0x00, param_H, param_L ] ; cks = sum(payload)
 * Returns 1 if queued, 0 if TX ring had no room.
 */
uint8_t gasbox_send(uint8_t cmd, uint16_t param)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	@ 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	460a      	mov	r2, r1
 8000b9a:	71fb      	strb	r3, [r7, #7]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	80bb      	strh	r3, [r7, #4]
    uint8_t payload[4] = {
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	773b      	strb	r3, [r7, #28]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	777b      	strb	r3, [r7, #29]
        cmd,
        0x00,                               // reserved/status=0 in requests
        (uint8_t)(param >> 8),
 8000ba8:	88bb      	ldrh	r3, [r7, #4]
 8000baa:	0a1b      	lsrs	r3, r3, #8
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b2db      	uxtb	r3, r3
    uint8_t payload[4] = {
 8000bb0:	77bb      	strb	r3, [r7, #30]
        (uint8_t)(param & 0xFF)
 8000bb2:	88bb      	ldrh	r3, [r7, #4]
 8000bb4:	b2db      	uxtb	r3, r3
    uint8_t payload[4] = {
 8000bb6:	77fb      	strb	r3, [r7, #31]
    };
    uint8_t cks = gb_sum8(payload, 4);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ffa8 	bl	8000b14 <gb_sum8>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    // Worst case: 2 (DLE,S) + each of 5 bytes doubled + 2 (DLE,E) = 14
    uint8_t frame[16], *w = frame;
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	60bb      	str	r3, [r7, #8]

    *w++ = GB_DLE; *w++ = GB_SOT;
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	60ba      	str	r2, [r7, #8]
 8000bd6:	223d      	movs	r2, #61	@ 0x3d
 8000bd8:	701a      	strb	r2, [r3, #0]
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	60ba      	str	r2, [r7, #8]
 8000be0:	2253      	movs	r2, #83	@ 0x53
 8000be2:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<4; ++i) gb_push_escaped(&w, payload[i]);
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000be8:	e00d      	b.n	8000c06 <gasbox_send+0x76>
 8000bea:	f107 021c 	add.w	r2, r7, #28
 8000bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781a      	ldrb	r2, [r3, #0]
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ffab 	bl	8000b56 <gb_push_escaped>
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	3301      	adds	r3, #1
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	ddee      	ble.n	8000bea <gasbox_send+0x5a>
    gb_push_escaped(&w, cks);
 8000c0c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff9d 	bl	8000b56 <gb_push_escaped>
    *w++ = GB_DLE; *w++ = GB_EOT;
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	60ba      	str	r2, [r7, #8]
 8000c22:	223d      	movs	r2, #61	@ 0x3d
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	60ba      	str	r2, [r7, #8]
 8000c2c:	2245      	movs	r2, #69	@ 0x45
 8000c2e:	701a      	strb	r2, [r3, #0]

    uint8_t len = (uint8_t)(w - frame);
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    // queue to UART4 ring
    if (!uartRB_Put(&uart4_rb, (char*)frame, len)) return 0;
 8000c3c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	4808      	ldr	r0, [pc, #32]	@ (8000c68 <gasbox_send+0xd8>)
 8000c48:	f002 f93c 	bl	8002ec4 <uartRB_Put>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <gasbox_send+0xc6>
 8000c52:	2300      	movs	r3, #0
 8000c54:	e003      	b.n	8000c5e <gasbox_send+0xce>
    uartRB_KickTx(&uart4_rb);
 8000c56:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <gasbox_send+0xd8>)
 8000c58:	f002 f8ee 	bl	8002e38 <uartRB_KickTx>
    return 1;
 8000c5c:	2301      	movs	r3, #1
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3728      	adds	r7, #40	@ 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200009a8 	.word	0x200009a8

08000c6c <gb_on_frame>:
    volatile uint8_t have;
    GbReply          r;
} gb_sync = {0};

void gb_on_frame(uint8_t cmd, uint8_t status, uint16_t value)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	460b      	mov	r3, r1
 8000c78:	71bb      	strb	r3, [r7, #6]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	80bb      	strh	r3, [r7, #4]
    // deliver to a waiting xfer if it matches the command we sent
    if (gb_sync.waiting && gb_sync.expect_cmd == cmd) {
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <gb_on_frame+0x54>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d015      	beq.n	8000cb4 <gb_on_frame+0x48>
 8000c88:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <gb_on_frame+0x54>)
 8000c8a:	785b      	ldrb	r3, [r3, #1]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	79fa      	ldrb	r2, [r7, #7]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d10f      	bne.n	8000cb4 <gb_on_frame+0x48>
        gb_sync.r.cmd = cmd; gb_sync.r.status = status; gb_sync.r.value = value;
 8000c94:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <gb_on_frame+0x54>)
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	7113      	strb	r3, [r2, #4]
 8000c9a:	4a09      	ldr	r2, [pc, #36]	@ (8000cc0 <gb_on_frame+0x54>)
 8000c9c:	79bb      	ldrb	r3, [r7, #6]
 8000c9e:	7153      	strb	r3, [r2, #5]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	@ (8000cc0 <gb_on_frame+0x54>)
 8000ca2:	88bb      	ldrh	r3, [r7, #4]
 8000ca4:	80d3      	strh	r3, [r2, #6]
        gb_sync.have = 1;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <gb_on_frame+0x54>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	709a      	strb	r2, [r3, #2]
        gb_sync.waiting = 0;
 8000cac:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <gb_on_frame+0x54>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
        return;
 8000cb2:	bf00      	nop
    }
    // else: unsolicited → raise events / z_set_error(...) as you like
}
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	2000010c 	.word	0x2000010c

08000cc4 <gasbox_xfer>:
/**
 * Send one request and wait for its echo parsed by the always-on gb_sero_get().
 * Returns 1 on success (out filled), 0 on timeout or queue failure.
 */
uint8_t gasbox_xfer(uint8_t cmd, uint16_t param, GbReply *out, uint32_t timeout_ms)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60ba      	str	r2, [r7, #8]
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4603      	mov	r3, r0
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	81bb      	strh	r3, [r7, #12]
    // only one outstanding transaction
    if (gb_sync.waiting) return 0;
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <gasbox_xfer+0x90>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <gasbox_xfer+0x20>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	e032      	b.n	8000d4a <gasbox_xfer+0x86>

    gb_sync.expect_cmd = cmd;
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d54 <gasbox_xfer+0x90>)
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	7053      	strb	r3, [r2, #1]
    gb_sync.have = 0;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <gasbox_xfer+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	709a      	strb	r2, [r3, #2]
    gb_sync.waiting = 1;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <gasbox_xfer+0x90>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]

    if (!gasbox_send(cmd, param)) { gb_sync.waiting = 0; return 0; }
 8000cf6:	89ba      	ldrh	r2, [r7, #12]
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff47 	bl	8000b90 <gasbox_send>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d104      	bne.n	8000d12 <gasbox_xfer+0x4e>
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <gasbox_xfer+0x90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e01b      	b.n	8000d4a <gasbox_xfer+0x86>

    uint32_t t0 = HAL_GetTick();
 8000d12:	f003 f9a7 	bl	8004064 <HAL_GetTick>
 8000d16:	6178      	str	r0, [r7, #20]
    while (!gb_sync.have) {
 8000d18:	e00c      	b.n	8000d34 <gasbox_xfer+0x70>
        if ((HAL_GetTick() - t0) > timeout_ms) {
 8000d1a:	f003 f9a3 	bl	8004064 <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d204      	bcs.n	8000d34 <gasbox_xfer+0x70>
            gb_sync.waiting = 0;
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <gasbox_xfer+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
            return 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	e00a      	b.n	8000d4a <gasbox_xfer+0x86>
    while (!gb_sync.have) {
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <gasbox_xfer+0x90>)
 8000d36:	789b      	ldrb	r3, [r3, #2]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0ed      	beq.n	8000d1a <gasbox_xfer+0x56>
        }
        // do NOT call gb_sero_get() here; main loop owns it
    }
    *out = gb_sync.r;
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <gasbox_xfer+0x90>)
 8000d42:	3304      	adds	r3, #4
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	6010      	str	r0, [r2, #0]
    return 1;
 8000d48:	2301      	movs	r3, #1
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000010c 	.word	0x2000010c

08000d58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	@ 0x30
 8000d5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6e:	4b64      	ldr	r3, [pc, #400]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	4a63      	ldr	r2, [pc, #396]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000d74:	f043 0310 	orr.w	r3, r3, #16
 8000d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7a:	4b61      	ldr	r3, [pc, #388]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	f003 0310 	and.w	r3, r3, #16
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d86:	4b5e      	ldr	r3, [pc, #376]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	4a5d      	ldr	r2, [pc, #372]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000d8c:	f043 0320 	orr.w	r3, r3, #32
 8000d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d92:	4b5b      	ldr	r3, [pc, #364]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	f003 0320 	and.w	r3, r3, #32
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b58      	ldr	r3, [pc, #352]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	4a57      	ldr	r2, [pc, #348]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000daa:	4b55      	ldr	r3, [pc, #340]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b52      	ldr	r3, [pc, #328]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	4a51      	ldr	r2, [pc, #324]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc2:	4b4f      	ldr	r3, [pc, #316]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b4c      	ldr	r3, [pc, #304]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	4a4b      	ldr	r2, [pc, #300]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dda:	4b49      	ldr	r3, [pc, #292]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	4b46      	ldr	r3, [pc, #280]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	4a45      	ldr	r2, [pc, #276]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df2:	4b43      	ldr	r3, [pc, #268]	@ (8000f00 <MX_GPIO_Init+0x1a8>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, UC_PUMP_START_Pin|UC_PUMP_STOP_Pin|UC_AUX_RESET_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 8000e04:	483f      	ldr	r0, [pc, #252]	@ (8000f04 <MX_GPIO_Init+0x1ac>)
 8000e06:	f004 fc09 	bl	800561c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UC_CS_AUX1_GPIO_Port, UC_CS_AUX1_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e10:	483d      	ldr	r0, [pc, #244]	@ (8000f08 <MX_GPIO_Init+0x1b0>)
 8000e12:	f004 fc03 	bl	800561c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UC_CS_AUX0_GPIO_Port, UC_CS_AUX0_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2110      	movs	r1, #16
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1e:	f004 fbfd 	bl	800561c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UC_CS_SPS_OUT_Pin|UC_CS_SPS_IN_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2106      	movs	r1, #6
 8000e26:	4839      	ldr	r0, [pc, #228]	@ (8000f0c <MX_GPIO_Init+0x1b4>)
 8000e28:	f004 fbf8 	bl	800561c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UC_HEARTBEAT_GPIO_Port, UC_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2108      	movs	r1, #8
 8000e30:	4837      	ldr	r0, [pc, #220]	@ (8000f10 <MX_GPIO_Init+0x1b8>)
 8000e32:	f004 fbf3 	bl	800561c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = UC_PUMP_START_Pin|UC_PUMP_STOP_Pin|UC_AUX_RESET_Pin;
 8000e36:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	482d      	ldr	r0, [pc, #180]	@ (8000f04 <MX_GPIO_Init+0x1ac>)
 8000e50:	f004 fa4a 	bl	80052e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = UC_PUMP_WARNING_Pin|UC_PUMP_ALARM_Pin|UC_PUMP_REMOTE_Pin;
 8000e54:	2370      	movs	r3, #112	@ 0x70
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4827      	ldr	r0, [pc, #156]	@ (8000f04 <MX_GPIO_Init+0x1ac>)
 8000e68:	f004 fa3e 	bl	80052e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UC_CS_AUX1_Pin;
 8000e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UC_CS_AUX1_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	4820      	ldr	r0, [pc, #128]	@ (8000f08 <MX_GPIO_Init+0x1b0>)
 8000e86:	f004 fa2f 	bl	80052e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UC_CS_AUX0_Pin;
 8000e8a:	2310      	movs	r3, #16
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UC_CS_AUX0_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f004 fa20 	bl	80052e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UC_CS_SPS_OUT_Pin|UC_CS_SPS_IN_Pin;
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4813      	ldr	r0, [pc, #76]	@ (8000f0c <MX_GPIO_Init+0x1b4>)
 8000ec0:	f004 fa12 	bl	80052e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UC_HEARTBEAT_Pin;
 8000ec4:	2308      	movs	r3, #8
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UC_HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <MX_GPIO_Init+0x1b8>)
 8000edc:	f004 fa04 	bl	80052e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = UC__5VOK_Pin|UC__12VOK_Pin;
 8000ee0:	2330      	movs	r3, #48	@ 0x30
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <MX_GPIO_Init+0x1b8>)
 8000ef4:	f004 f9f8 	bl	80052e8 <HAL_GPIO_Init>

}
 8000ef8:	bf00      	nop
 8000efa:	3730      	adds	r7, #48	@ 0x30
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40021000 	.word	0x40021000
 8000f04:	48001000 	.word	0x48001000
 8000f08:	48001400 	.word	0x48001400
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	48000c00 	.word	0x48000c00

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f18:	f003 f83f 	bl	8003f9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1c:	f000 f834 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f20:	f7ff ff1a 	bl	8000d58 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f24:	f001 fa60 	bl	80023e8 <MX_SPI1_Init>
  MX_UART4_Init();
 8000f28:	f002 f84e 	bl	8002fc8 <MX_UART4_Init>
  MX_UART5_Init();
 8000f2c:	f002 f898 	bl	8003060 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000f30:	f002 f8e2 	bl	80030f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f34:	f002 f92c 	bl	8003190 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f38:	f002 f978 	bl	800322c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000f3c:	f001 fd94 	bl	8002a68 <MX_TIM1_Init>
  MX_ADC5_Init();
 8000f40:	f7ff fbcc 	bl	80006dc <MX_ADC5_Init>
  /* USER CODE BEGIN 2 */
  //--- Stacks fuer die Anfragen an Zentrale und MatchingCube vorbereiten ------
  priolist_init();
 8000f44:	f000 f950 	bl	80011e8 <priolist_init>
  stacks_init();
 8000f48:	f001 face 	bl	80024e8 <stacks_init>
  //--- Ergbenissstack fuer die Antworten von Zentrale und MatchingCube vorbereiten -------
  resultQueue_init();
 8000f4c:	f001 f96e 	bl	800222c <resultQueue_init>
  uart_initAll();
 8000f50:	f001 fea2 	bl	8002c98 <uart_initAll>
  remote_init();
 8000f54:	f000 f9b0 	bl	80012b8 <remote_init>
  zentrale_init();
 8000f58:	f002 fb90 	bl	800367c <zentrale_init>

  delay_ms(500);
 8000f5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f60:	f7ff fc7a 	bl	8000858 <delay_ms>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		hw_sero_get();
 8000f64:	f7ff fb3c 	bl	80005e0 <hw_sero_get>
		remote_sero_get();
 8000f68:	f000 f9d2 	bl	8001310 <remote_sero_get>
		gb_sero_get();
 8000f6c:	f7ff fc9a 	bl	80008a4 <gb_sero_get>
		result_get_sero();
 8000f70:	f001 fa0e 	bl	8002390 <result_get_sero>

		zentrale();
 8000f74:	f002 fbc8 	bl	8003708 <zentrale>

		result_get_sero();
 8000f78:	f001 fa0a 	bl	8002390 <result_get_sero>
		hw_sero_set();
 8000f7c:	f7ff fb38 	bl	80005f0 <hw_sero_set>
		z_cmd_scheduler();
 8000f80:	f002 fde8 	bl	8003b54 <z_cmd_scheduler>
		hw_sero_get();
 8000f84:	bf00      	nop
 8000f86:	e7ed      	b.n	8000f64 <main+0x50>

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	@ 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0318 	add.w	r3, r7, #24
 8000f92:	2238      	movs	r2, #56	@ 0x38
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f008 f818 	bl	8008fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f004 fb68 	bl	8005680 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fb4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fb8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000fc6:	2328      	movs	r3, #40	@ 0x28
 8000fc8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd6:	f107 0318 	add.w	r3, r7, #24
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 fc04 	bl	80057e8 <HAL_RCC_OscConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000fe6:	f000 f818 	bl	800101a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fea:	230f      	movs	r3, #15
 8000fec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2104      	movs	r1, #4
 8001002:	4618      	mov	r0, r3
 8001004:	f004 ff02 	bl	8005e0c <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800100e:	f000 f804 	bl	800101a <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3750      	adds	r7, #80	@ 0x50
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101e:	b672      	cpsid	i
}
 8001020:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001022:	bf00      	nop
 8001024:	e7fd      	b.n	8001022 <Error_Handler+0x8>

08001026 <priolist_push>:
uint8_t priolist_pop (priority_item prio_list[], uint8_t priolevel_header[], uint8_t *firstunused, uint8_t priolevel_data);


//--------------FUNKTIONSDEFINITIONS----------------------------
uint8_t priolist_push (priority_item prio_list[], uint8_t priolist_length,  uint8_t priolevel_header[], uint8_t *firstunused, uint8_t stack_index, uint8_t priolevel_data)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b088      	sub	sp, #32
 800102a:	af02      	add	r7, sp, #8
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	460b      	mov	r3, r1
 8001034:	72fb      	strb	r3, [r7, #11]

	uint8_t flag = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	75fb      	strb	r3, [r7, #23]

	if (*firstunused == NONEXT )            //wenn es keinen freien Platz in der prio_list gibt,
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2bff      	cmp	r3, #255	@ 0xff
 8001040:	d102      	bne.n	8001048 <priolist_push+0x22>
	{
		flag = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	75fb      	strb	r3, [r7, #23]
 8001046:	e034      	b.n	80010b2 <priolist_push+0x8c>
	}
	else
	{
		switch (priolevel_data)
 8001048:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800104c:	2b02      	cmp	r3, #2
 800104e:	d022      	beq.n	8001096 <priolist_push+0x70>
 8001050:	2b02      	cmp	r3, #2
 8001052:	dc2e      	bgt.n	80010b2 <priolist_push+0x8c>
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <priolist_push+0x38>
 8001058:	2b01      	cmp	r3, #1
 800105a:	d00e      	beq.n	800107a <priolist_push+0x54>
 800105c:	e029      	b.n	80010b2 <priolist_push+0x8c>
		{
			case  PRIO_LEVEL0:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL0);
 800105e:	7af9      	ldrb	r1, [r7, #11]
 8001060:	2300      	movs	r3, #0
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f000 f824 	bl	80010bc <priolist_node_insert>
			flag = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	75fb      	strb	r3, [r7, #23]
			break;
 8001078:	e01b      	b.n	80010b2 <priolist_push+0x8c>
			case  PRIO_LEVEL1:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL1);
 800107a:	7af9      	ldrb	r1, [r7, #11]
 800107c:	2301      	movs	r3, #1
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f000 f816 	bl	80010bc <priolist_node_insert>
			flag = 1;
 8001090:	2301      	movs	r3, #1
 8001092:	75fb      	strb	r3, [r7, #23]
			break;
 8001094:	e00d      	b.n	80010b2 <priolist_push+0x8c>
			case  PRIO_LEVEL2:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL2);
 8001096:	7af9      	ldrb	r1, [r7, #11]
 8001098:	2302      	movs	r3, #2
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f000 f808 	bl	80010bc <priolist_node_insert>
			flag = 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	75fb      	strb	r3, [r7, #23]
			break;
 80010b0:	bf00      	nop
		};
	};
	return flag;
 80010b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <priolist_node_insert>:

void priolist_node_insert(priority_item prio_list[], uint8_t priolist_length,  uint8_t priolevel_header[], uint8_t *unused_list, uint8_t stackindex, uint8_t priolevel)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	460b      	mov	r3, r1
 80010ca:	72fb      	strb	r3, [r7, #11]
	uint8_t act_index ;
	uint8_t last;

	act_index = *unused_list;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	75bb      	strb	r3, [r7, #22]
	*unused_list = prio_list[act_index].next;
 80010d2:	7dbb      	ldrb	r3, [r7, #22]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4413      	add	r3, r2
 80010da:	785a      	ldrb	r2, [r3, #1]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	701a      	strb	r2, [r3, #0]
	if (priolevel_header[priolevel] == NONEXT)                //Wenn die Prioritätsliste mit dem Level0 noch leer ist,
 80010e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2bff      	cmp	r3, #255	@ 0xff
 80010ec:	d112      	bne.n	8001114 <priolist_node_insert+0x58>
	{

		prio_list[act_index].stackindex = stackindex;
 80010ee:	7dbb      	ldrb	r3, [r7, #22]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4413      	add	r3, r2
 80010f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010fa:	701a      	strb	r2, [r3, #0]
		priolevel_header[priolevel] = act_index;
 80010fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4413      	add	r3, r2
 8001104:	7dba      	ldrb	r2, [r7, #22]
 8001106:	701a      	strb	r2, [r3, #0]
		prio_list[act_index].next = NONEXT;
 8001108:	7dbb      	ldrb	r3, [r7, #22]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	22ff      	movs	r2, #255	@ 0xff
 8001112:	705a      	strb	r2, [r3, #1]
	};
	if (priolevel_header[priolevel] < priolist_length)    //Wenn die Prioritätsliste schon existiert,
 8001114:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	7afa      	ldrb	r2, [r7, #11]
 8001120:	429a      	cmp	r2, r3
 8001122:	d926      	bls.n	8001172 <priolist_node_insert+0xb6>
	{
		prio_list[act_index].stackindex = stackindex;
 8001124:	7dbb      	ldrb	r3, [r7, #22]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001130:	701a      	strb	r2, [r3, #0]
		last =  priolevel_header[priolevel];                  //das erste Element der Prioritätsliste
 8001132:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	75fb      	strb	r3, [r7, #23]
		while (prio_list[last].next != NONEXT)               //Suche den Ende der Prioritätsliste, um das neue Element hineinzufügen
 800113e:	e005      	b.n	800114c <priolist_node_insert+0x90>
		{
			last = prio_list[last].next;
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	785b      	ldrb	r3, [r3, #1]
 800114a:	75fb      	strb	r3, [r7, #23]
		while (prio_list[last].next != NONEXT)               //Suche den Ende der Prioritätsliste, um das neue Element hineinzufügen
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	2bff      	cmp	r3, #255	@ 0xff
 8001158:	d1f2      	bne.n	8001140 <priolist_node_insert+0x84>
		};
		prio_list[last].next = act_index;
 800115a:	7dfb      	ldrb	r3, [r7, #23]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4413      	add	r3, r2
 8001162:	7dba      	ldrb	r2, [r7, #22]
 8001164:	705a      	strb	r2, [r3, #1]
		prio_list[act_index].next = NONEXT;
 8001166:	7dbb      	ldrb	r3, [r7, #22]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	22ff      	movs	r2, #255	@ 0xff
 8001170:	705a      	strb	r2, [r3, #1]
	};
}
 8001172:	bf00      	nop
 8001174:	371c      	adds	r7, #28
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <priolist_pop>:

uint8_t priolist_pop (priority_item prio_list[], uint8_t priolevel_header[], uint8_t *firstunused, uint8_t priolevel_data)
{
 800117e:	b480      	push	{r7}
 8001180:	b087      	sub	sp, #28
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	70fb      	strb	r3, [r7, #3]
	uint8_t stack_index = NONEXT ;  //ungültige Wert, wenn die Prioritätsliste noch leer oder ein Fehler
 800118c:	23ff      	movs	r3, #255	@ 0xff
 800118e:	75fb      	strb	r3, [r7, #23]

	if (priolevel_header[priolevel_data] != NONEXT)
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	4413      	add	r3, r2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2bff      	cmp	r3, #255	@ 0xff
 800119a:	d01d      	beq.n	80011d8 <priolist_pop+0x5a>
	{
		uint8_t act_index = priolevel_header[priolevel_data];
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	75bb      	strb	r3, [r7, #22]
		stack_index = prio_list[act_index].stackindex;
 80011a6:	7dbb      	ldrb	r3, [r7, #22]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	75fb      	strb	r3, [r7, #23]
		priolevel_header[priolevel_data] = prio_list[act_index].next;
 80011b2:	7dbb      	ldrb	r3, [r7, #22]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	441a      	add	r2, r3
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	440b      	add	r3, r1
 80011c0:	7852      	ldrb	r2, [r2, #1]
 80011c2:	701a      	strb	r2, [r3, #0]

		prio_list[act_index].next = *firstunused;
 80011c4:	7dbb      	ldrb	r3, [r7, #22]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	705a      	strb	r2, [r3, #1]
		*firstunused = act_index;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7dba      	ldrb	r2, [r7, #22]
 80011d6:	701a      	strb	r2, [r3, #0]
	};

	return stack_index;
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <priolist_init>:
//--------------FUNKTIONSDEKLARATIONS----------------------------------------------------------------------------------------
void priolist_init(void);

//--------------FUNKTIONSDEFINITIONS-----------------------------------------------------------------------------------------
void priolist_init(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	71fb      	strb	r3, [r7, #7]

	zpriolist_firstunused_index = 0;         //der gültige Wert liegt zwischen 0 und (Z_STACK_SIZE-1); wenn = NONEXT, d.h. keinen freien Platz in der Prioliste.
 80011f2:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <priolist_init+0xb8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
	mcpriolist_firstunused_index = 0;		//der Wert liegt zwischen 0 und (MC_STACK_SIZE-1)
 80011f8:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <priolist_init+0xbc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]

	for (i = 0;  i < PRIO_LEVELS; i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	e00a      	b.n	800121a <priolist_init+0x32>
	{
		z_priolevel_header[i] = NONEXT;    //d.h. es gibt noch keinen Befehl in der i-te. Prioritätsliste.
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	4a28      	ldr	r2, [pc, #160]	@ (80012a8 <priolist_init+0xc0>)
 8001208:	21ff      	movs	r1, #255	@ 0xff
 800120a:	54d1      	strb	r1, [r2, r3]

		mc_priolevel_header[i] = NONEXT;
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	4a27      	ldr	r2, [pc, #156]	@ (80012ac <priolist_init+0xc4>)
 8001210:	21ff      	movs	r1, #255	@ 0xff
 8001212:	54d1      	strb	r1, [r2, r3]
	for (i = 0;  i < PRIO_LEVELS; i++)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	3301      	adds	r3, #1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d9f1      	bls.n	8001204 <priolist_init+0x1c>

	}

	for ( i= 0; i < Z_STACK_SIZE; i++)
 8001220:	2300      	movs	r3, #0
 8001222:	71fb      	strb	r3, [r7, #7]
 8001224:	e015      	b.n	8001252 <priolist_init+0x6a>
	{
		if (i == (Z_STACK_SIZE-1) )
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b1d      	cmp	r3, #29
 800122a:	d106      	bne.n	800123a <priolist_init+0x52>
		{
			z_priolist[i].next = NONEXT;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4a20      	ldr	r2, [pc, #128]	@ (80012b0 <priolist_init+0xc8>)
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	22ff      	movs	r2, #255	@ 0xff
 8001236:	705a      	strb	r2, [r3, #1]
 8001238:	e008      	b.n	800124c <priolist_init+0x64>
		}
		else
		{
			z_priolist[i].next = i+1;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	79fa      	ldrb	r2, [r7, #7]
 800123e:	3201      	adds	r2, #1
 8001240:	b2d1      	uxtb	r1, r2
 8001242:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <priolist_init+0xc8>)
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	460a      	mov	r2, r1
 800124a:	705a      	strb	r2, [r3, #1]
	for ( i= 0; i < Z_STACK_SIZE; i++)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	3301      	adds	r3, #1
 8001250:	71fb      	strb	r3, [r7, #7]
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b1d      	cmp	r3, #29
 8001256:	d9e6      	bls.n	8001226 <priolist_init+0x3e>
		};
	};

	for ( i= 0; i < MC_STACK_SIZE; i++)
 8001258:	2300      	movs	r3, #0
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	e015      	b.n	800128a <priolist_init+0xa2>
	{
		if (i == (MC_STACK_SIZE-1) )
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b13      	cmp	r3, #19
 8001262:	d106      	bne.n	8001272 <priolist_init+0x8a>
		{
			mc_priolist[i].next = NONEXT;
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4a13      	ldr	r2, [pc, #76]	@ (80012b4 <priolist_init+0xcc>)
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	22ff      	movs	r2, #255	@ 0xff
 800126e:	705a      	strb	r2, [r3, #1]
 8001270:	e008      	b.n	8001284 <priolist_init+0x9c>
		}
		else
		{
			mc_priolist[i].next = i+1;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	79fa      	ldrb	r2, [r7, #7]
 8001276:	3201      	adds	r2, #1
 8001278:	b2d1      	uxtb	r1, r2
 800127a:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <priolist_init+0xcc>)
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	460a      	mov	r2, r1
 8001282:	705a      	strb	r2, [r3, #1]
	for ( i= 0; i < MC_STACK_SIZE; i++)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	3301      	adds	r3, #1
 8001288:	71fb      	strb	r3, [r7, #7]
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b13      	cmp	r3, #19
 800128e:	d9e6      	bls.n	800125e <priolist_init+0x76>
		};
	};
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	2000017f 	.word	0x2000017f
 80012a4:	20000180 	.word	0x20000180
 80012a8:	20000178 	.word	0x20000178
 80012ac:	2000017c 	.word	0x2000017c
 80012b0:	20000114 	.word	0x20000114
 80012b4:	20000150 	.word	0x20000150

080012b8 <remote_init>:
void output_ascii(int32_t);
void Binary_Search(uint8_t ncmd, char *key, uint16_t *cmdindex);
void output_ascii_cmdack(uint8_t verbose_flg, uint8_t crlf_flg, uint8_t cmd_ack);

// ---- public API ----
void remote_init(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	nzeichen = 0;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <remote_init+0x3c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
	state = RMT_WAIT_FOR_PAKET_START;
 80012c2:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <remote_init+0x40>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
	lengthRx = 0;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <remote_init+0x44>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
	dleFlag = 0;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <remote_init+0x48>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 80012d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <remote_init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
	memset((void*) msg, 0, sizeof(msg));
 80012da:	220f      	movs	r2, #15
 80012dc:	2100      	movs	r1, #0
 80012de:	480a      	ldr	r0, [pc, #40]	@ (8001308 <remote_init+0x50>)
 80012e0:	f007 fe74 	bl	8008fcc <memset>
	memset(bufferRx, 0, sizeof(bufferRx));
 80012e4:	220f      	movs	r2, #15
 80012e6:	2100      	movs	r1, #0
 80012e8:	4808      	ldr	r0, [pc, #32]	@ (800130c <remote_init+0x54>)
 80012ea:	f007 fe6f 	bl	8008fcc <memset>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000197 	.word	0x20000197
 80012f8:	20000001 	.word	0x20000001
 80012fc:	200001a7 	.word	0x200001a7
 8001300:	200001a8 	.word	0x200001a8
 8001304:	200001a9 	.word	0x200001a9
 8001308:	20000188 	.word	0x20000188
 800130c:	20000198 	.word	0x20000198

08001310 <remote_sero_get>:

// Pull bytes from UART4 RX ring into msg[] and feed parser
void remote_sero_get(void) {
 8001310:	b598      	push	{r3, r4, r7, lr}
 8001312:	af00      	add	r7, sp, #0
	nzeichen = 0;
 8001314:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <remote_sero_get+0x54>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
	while ((rb_rx_used(&usart3_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 800131a:	e00e      	b.n	800133a <remote_sero_get+0x2a>
		msg[nzeichen++] = (uint8_t) uartRB_Getc(&usart3_rb);   // legacy getc()
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <remote_sero_get+0x54>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	b2d1      	uxtb	r1, r2
 8001326:	4a0f      	ldr	r2, [pc, #60]	@ (8001364 <remote_sero_get+0x54>)
 8001328:	7011      	strb	r1, [r2, #0]
 800132a:	461c      	mov	r4, r3
 800132c:	480e      	ldr	r0, [pc, #56]	@ (8001368 <remote_sero_get+0x58>)
 800132e:	f001 fe1d 	bl	8002f6c <uartRB_Getc>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <remote_sero_get+0x5c>)
 8001338:	551a      	strb	r2, [r3, r4]
	while ((rb_rx_used(&usart3_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 800133a:	480b      	ldr	r0, [pc, #44]	@ (8001368 <remote_sero_get+0x58>)
 800133c:	f001 fd55 	bl	8002dea <rb_rx_used>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	dd04      	ble.n	8001350 <remote_sero_get+0x40>
 8001346:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <remote_sero_get+0x54>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b0d      	cmp	r3, #13
 800134e:	d9e5      	bls.n	800131c <remote_sero_get+0xc>
	}
	if (nzeichen)
 8001350:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <remote_sero_get+0x54>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <remote_sero_get+0x4e>
		parse_ascii();
 800135a:	f000 f809 	bl	8001370 <parse_ascii>
}
 800135e:	bf00      	nop
 8001360:	bd98      	pop	{r3, r4, r7, pc}
 8001362:	bf00      	nop
 8001364:	20000197 	.word	0x20000197
 8001368:	20000e58 	.word	0x20000e58
 800136c:	20000188 	.word	0x20000188

08001370 <parse_ascii>:

// das Paket in ASCII-Format analysieren und das Paket in den Stack einfügen.
void parse_ascii(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
	volatile static uint8_t pflag = 0;
	volatile static uint8_t eflag = 0;

	static uint8_t negativ_zahl = 0;

	uint8_t ptr = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	75fb      	strb	r3, [r7, #23]
	uint16_t cmd_index = BINARY_INDEX_MAX;
 800137a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800137e:	82bb      	strh	r3, [r7, #20]

	stack_item stack_data;

	do {
		// wenn es ein Zeichen in UART1 Buffer gibt und die Automate nicht im Bearbeitungszustand ist
		if ((nzeichen > 0) && (a_state != proc_cmd)) {
 8001380:	4b9c      	ldr	r3, [pc, #624]	@ (80015f4 <parse_ascii+0x284>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d01d      	beq.n	80013c6 <parse_ascii+0x56>
 800138a:	4b9b      	ldr	r3, [pc, #620]	@ (80015f8 <parse_ascii+0x288>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b04      	cmp	r3, #4
 8001392:	d018      	beq.n	80013c6 <parse_ascii+0x56>
			nc = msg[ptr++];				// hole ein Zeichen aus msg-buffer
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	75fa      	strb	r2, [r7, #23]
 800139a:	461a      	mov	r2, r3
 800139c:	4b97      	ldr	r3, [pc, #604]	@ (80015fc <parse_ascii+0x28c>)
 800139e:	5c9b      	ldrb	r3, [r3, r2]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b97      	ldr	r3, [pc, #604]	@ (8001600 <parse_ascii+0x290>)
 80013a4:	701a      	strb	r2, [r3, #0]
			if (echo == 1)// Wenn die Kommunikationsmode im Echo-Mode ist, wird es das Zeichen direkt wieder zurückgeben.
 80013a6:	4b97      	ldr	r3, [pc, #604]	@ (8001604 <parse_ascii+0x294>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d10d      	bne.n	80013cc <parse_ascii+0x5c>
					{
				char1[0] = nc;
 80013b0:	4b93      	ldr	r3, [pc, #588]	@ (8001600 <parse_ascii+0x290>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b94      	ldr	r3, [pc, #592]	@ (8001608 <parse_ascii+0x298>)
 80013b8:	701a      	strb	r2, [r3, #0]
				uartRB_Put(&usart3_rb, char1, 1);
 80013ba:	2201      	movs	r2, #1
 80013bc:	4992      	ldr	r1, [pc, #584]	@ (8001608 <parse_ascii+0x298>)
 80013be:	4893      	ldr	r0, [pc, #588]	@ (800160c <parse_ascii+0x29c>)
 80013c0:	f001 fd80 	bl	8002ec4 <uartRB_Put>
			if (echo == 1)// Wenn die Kommunikationsmode im Echo-Mode ist, wird es das Zeichen direkt wieder zurückgeben.
 80013c4:	e002      	b.n	80013cc <parse_ascii+0x5c>
			}
		} else
			nc = 0;
 80013c6:	4b8e      	ldr	r3, [pc, #568]	@ (8001600 <parse_ascii+0x290>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]

		if (strlen(cmd) > 22)// Ascii-Kommando darf nicht länger als 22 Zeichen.
 80013cc:	4890      	ldr	r0, [pc, #576]	@ (8001610 <parse_ascii+0x2a0>)
 80013ce:	f7fe ff31 	bl	8000234 <strlen>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b16      	cmp	r3, #22
 80013d6:	d90e      	bls.n	80013f6 <parse_ascii+0x86>
				{
			strcpy(cmd, "");
 80013d8:	4b8d      	ldr	r3, [pc, #564]	@ (8001610 <parse_ascii+0x2a0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
			val = 0;
 80013de:	4b8d      	ldr	r3, [pc, #564]	@ (8001614 <parse_ascii+0x2a4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
			pflag = 0;
 80013e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001618 <parse_ascii+0x2a8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
			eflag = 0;
 80013ea:	4b8c      	ldr	r3, [pc, #560]	@ (800161c <parse_ascii+0x2ac>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
			a_state = get_cmd;
 80013f0:	4b81      	ldr	r3, [pc, #516]	@ (80015f8 <parse_ascii+0x288>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
		}

		switch (a_state) {
 80013f6:	4b80      	ldr	r3, [pc, #512]	@ (80015f8 <parse_ascii+0x288>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	3b01      	subs	r3, #1
 80013fe:	2b03      	cmp	r3, #3
 8001400:	f200 8301 	bhi.w	8001a06 <parse_ascii+0x696>
 8001404:	a201      	add	r2, pc, #4	@ (adr r2, 800140c <parse_ascii+0x9c>)
 8001406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140a:	bf00      	nop
 800140c:	0800141d 	.word	0x0800141d
 8001410:	08001551 	.word	0x08001551
 8001414:	0800162d 	.word	0x0800162d
 8001418:	080016df 	.word	0x080016df
		case get_cmd:
			if (((nc >= 65) && (nc <= 90)) || ((nc >= 48) && (nc <= 57))
 800141c:	4b78      	ldr	r3, [pc, #480]	@ (8001600 <parse_ascii+0x290>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b40      	cmp	r3, #64	@ 0x40
 8001424:	d904      	bls.n	8001430 <parse_ascii+0xc0>
 8001426:	4b76      	ldr	r3, [pc, #472]	@ (8001600 <parse_ascii+0x290>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b5a      	cmp	r3, #90	@ 0x5a
 800142e:	d913      	bls.n	8001458 <parse_ascii+0xe8>
 8001430:	4b73      	ldr	r3, [pc, #460]	@ (8001600 <parse_ascii+0x290>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b2f      	cmp	r3, #47	@ 0x2f
 8001438:	d904      	bls.n	8001444 <parse_ascii+0xd4>
 800143a:	4b71      	ldr	r3, [pc, #452]	@ (8001600 <parse_ascii+0x290>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b39      	cmp	r3, #57	@ 0x39
 8001442:	d909      	bls.n	8001458 <parse_ascii+0xe8>
					|| (nc == 58) || (nc == 63)) {
 8001444:	4b6e      	ldr	r3, [pc, #440]	@ (8001600 <parse_ascii+0x290>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b3a      	cmp	r3, #58	@ 0x3a
 800144c:	d004      	beq.n	8001458 <parse_ascii+0xe8>
 800144e:	4b6c      	ldr	r3, [pc, #432]	@ (8001600 <parse_ascii+0x290>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b3f      	cmp	r3, #63	@ 0x3f
 8001456:	d109      	bne.n	800146c <parse_ascii+0xfc>
				char1[0] = nc;				//verkette char1 an cmd
 8001458:	4b69      	ldr	r3, [pc, #420]	@ (8001600 <parse_ascii+0x290>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b6a      	ldr	r3, [pc, #424]	@ (8001608 <parse_ascii+0x298>)
 8001460:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 8001462:	4969      	ldr	r1, [pc, #420]	@ (8001608 <parse_ascii+0x298>)
 8001464:	486a      	ldr	r0, [pc, #424]	@ (8001610 <parse_ascii+0x2a0>)
 8001466:	f007 fdb9 	bl	8008fdc <strcat>
 800146a:	e070      	b.n	800154e <parse_ascii+0x1de>
			} else if ((nc == 46) && (sloppy == 1)) {
 800146c:	4b64      	ldr	r3, [pc, #400]	@ (8001600 <parse_ascii+0x290>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b2e      	cmp	r3, #46	@ 0x2e
 8001474:	d10c      	bne.n	8001490 <parse_ascii+0x120>
 8001476:	4b6a      	ldr	r3, [pc, #424]	@ (8001620 <parse_ascii+0x2b0>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d107      	bne.n	8001490 <parse_ascii+0x120>
				char1[0] = 58;
 8001480:	4b61      	ldr	r3, [pc, #388]	@ (8001608 <parse_ascii+0x298>)
 8001482:	223a      	movs	r2, #58	@ 0x3a
 8001484:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 8001486:	4960      	ldr	r1, [pc, #384]	@ (8001608 <parse_ascii+0x298>)
 8001488:	4861      	ldr	r0, [pc, #388]	@ (8001610 <parse_ascii+0x2a0>)
 800148a:	f007 fda7 	bl	8008fdc <strcat>
 800148e:	e05e      	b.n	800154e <parse_ascii+0x1de>
			} else if ((nc == 35) && (sloppy == 1)) {
 8001490:	4b5b      	ldr	r3, [pc, #364]	@ (8001600 <parse_ascii+0x290>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b23      	cmp	r3, #35	@ 0x23
 8001498:	d10c      	bne.n	80014b4 <parse_ascii+0x144>
 800149a:	4b61      	ldr	r3, [pc, #388]	@ (8001620 <parse_ascii+0x2b0>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d107      	bne.n	80014b4 <parse_ascii+0x144>
				char1[0] = 63;
 80014a4:	4b58      	ldr	r3, [pc, #352]	@ (8001608 <parse_ascii+0x298>)
 80014a6:	223f      	movs	r2, #63	@ 0x3f
 80014a8:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 80014aa:	4957      	ldr	r1, [pc, #348]	@ (8001608 <parse_ascii+0x298>)
 80014ac:	4858      	ldr	r0, [pc, #352]	@ (8001610 <parse_ascii+0x2a0>)
 80014ae:	f007 fd95 	bl	8008fdc <strcat>
 80014b2:	e04c      	b.n	800154e <parse_ascii+0x1de>
			} else if ((nc >= 97) && (nc <= 122)) {
 80014b4:	4b52      	ldr	r3, [pc, #328]	@ (8001600 <parse_ascii+0x290>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b60      	cmp	r3, #96	@ 0x60
 80014bc:	d910      	bls.n	80014e0 <parse_ascii+0x170>
 80014be:	4b50      	ldr	r3, [pc, #320]	@ (8001600 <parse_ascii+0x290>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b7a      	cmp	r3, #122	@ 0x7a
 80014c6:	d80b      	bhi.n	80014e0 <parse_ascii+0x170>
				char1[0] = (nc - 32);
 80014c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001600 <parse_ascii+0x290>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	3b20      	subs	r3, #32
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001608 <parse_ascii+0x298>)
 80014d4:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 80014d6:	494c      	ldr	r1, [pc, #304]	@ (8001608 <parse_ascii+0x298>)
 80014d8:	484d      	ldr	r0, [pc, #308]	@ (8001610 <parse_ascii+0x2a0>)
 80014da:	f007 fd7f 	bl	8008fdc <strcat>
 80014de:	e036      	b.n	800154e <parse_ascii+0x1de>
			} else if (nc == 32) {
 80014e0:	4b47      	ldr	r3, [pc, #284]	@ (8001600 <parse_ascii+0x290>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b20      	cmp	r3, #32
 80014e8:	d10b      	bne.n	8001502 <parse_ascii+0x192>
				if (strlen(cmd) > 0) {
 80014ea:	4b49      	ldr	r3, [pc, #292]	@ (8001610 <parse_ascii+0x2a0>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 828d 	beq.w	8001a0e <parse_ascii+0x69e>
					val = 0;
 80014f4:	4b47      	ldr	r3, [pc, #284]	@ (8001614 <parse_ascii+0x2a4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
					a_state = get_sign;
 80014fa:	4b3f      	ldr	r3, [pc, #252]	@ (80015f8 <parse_ascii+0x288>)
 80014fc:	2202      	movs	r2, #2
 80014fe:	701a      	strb	r2, [r3, #0]
				a_state = proc_cmd;
			} else {
				if (nc != 0)
					strcat(cmd, "*");
			}
			break;
 8001500:	e285      	b.n	8001a0e <parse_ascii+0x69e>
			} else if ((nc == 59) || ((nc == 13) && (sloppy == 1))) {
 8001502:	4b3f      	ldr	r3, [pc, #252]	@ (8001600 <parse_ascii+0x290>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b3b      	cmp	r3, #59	@ 0x3b
 800150a:	d009      	beq.n	8001520 <parse_ascii+0x1b0>
 800150c:	4b3c      	ldr	r3, [pc, #240]	@ (8001600 <parse_ascii+0x290>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b0d      	cmp	r3, #13
 8001514:	d108      	bne.n	8001528 <parse_ascii+0x1b8>
 8001516:	4b42      	ldr	r3, [pc, #264]	@ (8001620 <parse_ascii+0x2b0>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b01      	cmp	r3, #1
 800151e:	d103      	bne.n	8001528 <parse_ascii+0x1b8>
				a_state = proc_cmd;
 8001520:	4b35      	ldr	r3, [pc, #212]	@ (80015f8 <parse_ascii+0x288>)
 8001522:	2204      	movs	r2, #4
 8001524:	701a      	strb	r2, [r3, #0]
 8001526:	e012      	b.n	800154e <parse_ascii+0x1de>
				if (nc != 0)
 8001528:	4b35      	ldr	r3, [pc, #212]	@ (8001600 <parse_ascii+0x290>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 826d 	beq.w	8001a0e <parse_ascii+0x69e>
					strcat(cmd, "*");
 8001534:	4836      	ldr	r0, [pc, #216]	@ (8001610 <parse_ascii+0x2a0>)
 8001536:	f7fe fe7d 	bl	8000234 <strlen>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	4b34      	ldr	r3, [pc, #208]	@ (8001610 <parse_ascii+0x2a0>)
 8001540:	4413      	add	r3, r2
 8001542:	4938      	ldr	r1, [pc, #224]	@ (8001624 <parse_ascii+0x2b4>)
 8001544:	461a      	mov	r2, r3
 8001546:	460b      	mov	r3, r1
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	8013      	strh	r3, [r2, #0]
			break;
 800154c:	e25f      	b.n	8001a0e <parse_ascii+0x69e>
 800154e:	e25e      	b.n	8001a0e <parse_ascii+0x69e>

		case get_sign:
			if (nc == 45) {
 8001550:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <parse_ascii+0x290>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b2d      	cmp	r3, #45	@ 0x2d
 8001558:	d106      	bne.n	8001568 <parse_ascii+0x1f8>
				negativ_zahl = 1;
 800155a:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <parse_ascii+0x2b8>)
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
				a_state = get_val;
 8001560:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <parse_ascii+0x288>)
 8001562:	2203      	movs	r2, #3
 8001564:	701a      	strb	r2, [r3, #0]
				break;
 8001566:	e257      	b.n	8001a18 <parse_ascii+0x6a8>
			} else if ((nc >= 48) && (nc <= 57) && (val < INT32_MAX)) //val < 1000000
 8001568:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <parse_ascii+0x290>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001570:	d91f      	bls.n	80015b2 <parse_ascii+0x242>
 8001572:	4b23      	ldr	r3, [pc, #140]	@ (8001600 <parse_ascii+0x290>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b39      	cmp	r3, #57	@ 0x39
 800157a:	d81a      	bhi.n	80015b2 <parse_ascii+0x242>
 800157c:	4b25      	ldr	r3, [pc, #148]	@ (8001614 <parse_ascii+0x2a4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001584:	4293      	cmp	r3, r2
 8001586:	d014      	beq.n	80015b2 <parse_ascii+0x242>
					{
				val = val * 10 + (nc - 48);
 8001588:	4b22      	ldr	r3, [pc, #136]	@ (8001614 <parse_ascii+0x2a4>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	461a      	mov	r2, r3
 8001596:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <parse_ascii+0x290>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3b30      	subs	r3, #48	@ 0x30
 800159e:	4413      	add	r3, r2
 80015a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001614 <parse_ascii+0x2a4>)
 80015a2:	6013      	str	r3, [r2, #0]
				pflag = 1;
 80015a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <parse_ascii+0x2a8>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
				a_state = get_val;
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <parse_ascii+0x288>)
 80015ac:	2203      	movs	r2, #3
 80015ae:	701a      	strb	r2, [r3, #0]
				break;
 80015b0:	e232      	b.n	8001a18 <parse_ascii+0x6a8>
			} else if ((nc == 59) || (nc == 13)) {
 80015b2:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <parse_ascii+0x290>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80015ba:	d004      	beq.n	80015c6 <parse_ascii+0x256>
 80015bc:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <parse_ascii+0x290>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b0d      	cmp	r3, #13
 80015c4:	d103      	bne.n	80015ce <parse_ascii+0x25e>
				a_state = proc_cmd;
 80015c6:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <parse_ascii+0x288>)
 80015c8:	2204      	movs	r2, #4
 80015ca:	701a      	strb	r2, [r3, #0]
					eflag = 1;
				}

			}
			;
			break;
 80015cc:	e221      	b.n	8001a12 <parse_ascii+0x6a2>
				if (nc != 0) {
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <parse_ascii+0x290>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 821c 	beq.w	8001a12 <parse_ascii+0x6a2>
					negativ_zahl = 0;
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <parse_ascii+0x2b8>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
					val = 0;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <parse_ascii+0x2a4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
					pflag = 0;
 80015e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <parse_ascii+0x2a8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
					eflag = 1;
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <parse_ascii+0x2ac>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
			break;
 80015f2:	e20e      	b.n	8001a12 <parse_ascii+0x6a2>
 80015f4:	20000197 	.word	0x20000197
 80015f8:	20000002 	.word	0x20000002
 80015fc:	20000188 	.word	0x20000188
 8001600:	200001aa 	.word	0x200001aa
 8001604:	20000183 	.word	0x20000183
 8001608:	200001ac 	.word	0x200001ac
 800160c:	20000e58 	.word	0x20000e58
 8001610:	200001b0 	.word	0x200001b0
 8001614:	200001cc 	.word	0x200001cc
 8001618:	200001d0 	.word	0x200001d0
 800161c:	200001d1 	.word	0x200001d1
 8001620:	20000184 	.word	0x20000184
 8001624:	08009904 	.word	0x08009904
 8001628:	200001d2 	.word	0x200001d2
		case get_val:

			if ((nc >= 48) && (nc <= 57) && (val < INT32_MAX))   //val < 1000000
 800162c:	4b94      	ldr	r3, [pc, #592]	@ (8001880 <parse_ascii+0x510>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b2f      	cmp	r3, #47	@ 0x2f
 8001634:	d91c      	bls.n	8001670 <parse_ascii+0x300>
 8001636:	4b92      	ldr	r3, [pc, #584]	@ (8001880 <parse_ascii+0x510>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b39      	cmp	r3, #57	@ 0x39
 800163e:	d817      	bhi.n	8001670 <parse_ascii+0x300>
 8001640:	4b90      	ldr	r3, [pc, #576]	@ (8001884 <parse_ascii+0x514>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001648:	4293      	cmp	r3, r2
 800164a:	d011      	beq.n	8001670 <parse_ascii+0x300>
					{
				val = val * 10 + (nc - 48);
 800164c:	4b8d      	ldr	r3, [pc, #564]	@ (8001884 <parse_ascii+0x514>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	461a      	mov	r2, r3
 800165a:	4b89      	ldr	r3, [pc, #548]	@ (8001880 <parse_ascii+0x510>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	3b30      	subs	r3, #48	@ 0x30
 8001662:	4413      	add	r3, r2
 8001664:	4a87      	ldr	r2, [pc, #540]	@ (8001884 <parse_ascii+0x514>)
 8001666:	6013      	str	r3, [r2, #0]
				pflag = 1;
 8001668:	4b87      	ldr	r3, [pc, #540]	@ (8001888 <parse_ascii+0x518>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	e035      	b.n	80016dc <parse_ascii+0x36c>
			} else if ((nc == 59) || (nc == 13)) {
 8001670:	4b83      	ldr	r3, [pc, #524]	@ (8001880 <parse_ascii+0x510>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b3b      	cmp	r3, #59	@ 0x3b
 8001678:	d004      	beq.n	8001684 <parse_ascii+0x314>
 800167a:	4b81      	ldr	r3, [pc, #516]	@ (8001880 <parse_ascii+0x510>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b0d      	cmp	r3, #13
 8001682:	d118      	bne.n	80016b6 <parse_ascii+0x346>
				if (negativ_zahl) {
 8001684:	4b81      	ldr	r3, [pc, #516]	@ (800188c <parse_ascii+0x51c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d010      	beq.n	80016ae <parse_ascii+0x33e>
					if (pflag == 0) {
 800168c:	4b7e      	ldr	r3, [pc, #504]	@ (8001888 <parse_ascii+0x518>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10b      	bne.n	80016ae <parse_ascii+0x33e>
						negativ_zahl = 0;
 8001696:	4b7d      	ldr	r3, [pc, #500]	@ (800188c <parse_ascii+0x51c>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
						val = 0;
 800169c:	4b79      	ldr	r3, [pc, #484]	@ (8001884 <parse_ascii+0x514>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
						pflag = 0;
 80016a2:	4b79      	ldr	r3, [pc, #484]	@ (8001888 <parse_ascii+0x518>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
						eflag = 1;
 80016a8:	4b79      	ldr	r3, [pc, #484]	@ (8001890 <parse_ascii+0x520>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
					}
				}
				a_state = proc_cmd;
 80016ae:	4b79      	ldr	r3, [pc, #484]	@ (8001894 <parse_ascii+0x524>)
 80016b0:	2204      	movs	r2, #4
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e012      	b.n	80016dc <parse_ascii+0x36c>
			} else {
				if (nc != 0) {
 80016b6:	4b72      	ldr	r3, [pc, #456]	@ (8001880 <parse_ascii+0x510>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 81aa 	beq.w	8001a16 <parse_ascii+0x6a6>
					negativ_zahl = 0;
 80016c2:	4b72      	ldr	r3, [pc, #456]	@ (800188c <parse_ascii+0x51c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
					val = 0;
 80016c8:	4b6e      	ldr	r3, [pc, #440]	@ (8001884 <parse_ascii+0x514>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
					pflag = 0;
 80016ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001888 <parse_ascii+0x518>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
					eflag = 1;
 80016d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001890 <parse_ascii+0x520>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
				}

			}
			break;
 80016da:	e19c      	b.n	8001a16 <parse_ascii+0x6a6>
 80016dc:	e19b      	b.n	8001a16 <parse_ascii+0x6a6>

		case proc_cmd:

			if (eflag == 1) {
 80016de:	4b6c      	ldr	r3, [pc, #432]	@ (8001890 <parse_ascii+0x520>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d103      	bne.n	80016f0 <parse_ascii+0x380>
				ret = CMR_MALFORMATTEDCOMMAND;
 80016e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001898 <parse_ascii+0x528>)
 80016ea:	221f      	movs	r2, #31
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	e160      	b.n	80019b2 <parse_ascii+0x642>
			}
			//hier beginnt die Verarbeitung der Befehle zum Einstellen der Kommunikation
			else if (strcmp(cmd, "VERB") == 0) {
 80016f0:	496a      	ldr	r1, [pc, #424]	@ (800189c <parse_ascii+0x52c>)
 80016f2:	486b      	ldr	r0, [pc, #428]	@ (80018a0 <parse_ascii+0x530>)
 80016f4:	f7fe fd94 	bl	8000220 <strcmp>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d12c      	bne.n	8001758 <parse_ascii+0x3e8>
				if (pflag == 0) {
 80016fe:	4b62      	ldr	r3, [pc, #392]	@ (8001888 <parse_ascii+0x518>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d103      	bne.n	8001710 <parse_ascii+0x3a0>
					ret = CMR_MISSINGPARAMETER;
 8001708:	4b63      	ldr	r3, [pc, #396]	@ (8001898 <parse_ascii+0x528>)
 800170a:	220c      	movs	r2, #12
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	e150      	b.n	80019b2 <parse_ascii+0x642>
				} else {
					switch (val) {
 8001710:	4b5c      	ldr	r3, [pc, #368]	@ (8001884 <parse_ascii+0x514>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d014      	beq.n	8001742 <parse_ascii+0x3d2>
 8001718:	2b02      	cmp	r3, #2
 800171a:	dc19      	bgt.n	8001750 <parse_ascii+0x3e0>
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <parse_ascii+0x3b6>
 8001720:	2b01      	cmp	r3, #1
 8001722:	d007      	beq.n	8001734 <parse_ascii+0x3c4>
 8001724:	e014      	b.n	8001750 <parse_ascii+0x3e0>
					case 0:
						verbose = 0;
 8001726:	4b5f      	ldr	r3, [pc, #380]	@ (80018a4 <parse_ascii+0x534>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 800172c:	4b5a      	ldr	r3, [pc, #360]	@ (8001898 <parse_ascii+0x528>)
 800172e:	2280      	movs	r2, #128	@ 0x80
 8001730:	701a      	strb	r2, [r3, #0]
						break;
 8001732:	e13e      	b.n	80019b2 <parse_ascii+0x642>
					case 1:
						verbose = 1;
 8001734:	4b5b      	ldr	r3, [pc, #364]	@ (80018a4 <parse_ascii+0x534>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 800173a:	4b57      	ldr	r3, [pc, #348]	@ (8001898 <parse_ascii+0x528>)
 800173c:	2280      	movs	r2, #128	@ 0x80
 800173e:	701a      	strb	r2, [r3, #0]
						break;
 8001740:	e137      	b.n	80019b2 <parse_ascii+0x642>
					case 2:
						verbose = 2;
 8001742:	4b58      	ldr	r3, [pc, #352]	@ (80018a4 <parse_ascii+0x534>)
 8001744:	2202      	movs	r2, #2
 8001746:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001748:	4b53      	ldr	r3, [pc, #332]	@ (8001898 <parse_ascii+0x528>)
 800174a:	2280      	movs	r2, #128	@ 0x80
 800174c:	701a      	strb	r2, [r3, #0]
						break;
 800174e:	e130      	b.n	80019b2 <parse_ascii+0x642>
					default:
						ret = CMR_PARAMETERINVALID;
 8001750:	4b51      	ldr	r3, [pc, #324]	@ (8001898 <parse_ascii+0x528>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
						break;
 8001756:	e12c      	b.n	80019b2 <parse_ascii+0x642>
					};
				}
			} else if (strcmp(cmd, "ECHO") == 0) {
 8001758:	4953      	ldr	r1, [pc, #332]	@ (80018a8 <parse_ascii+0x538>)
 800175a:	4851      	ldr	r0, [pc, #324]	@ (80018a0 <parse_ascii+0x530>)
 800175c:	f7fe fd60 	bl	8000220 <strcmp>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d122      	bne.n	80017ac <parse_ascii+0x43c>
				if (pflag == 0) {
 8001766:	4b48      	ldr	r3, [pc, #288]	@ (8001888 <parse_ascii+0x518>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d103      	bne.n	8001778 <parse_ascii+0x408>
					ret = CMR_MISSINGPARAMETER;
 8001770:	4b49      	ldr	r3, [pc, #292]	@ (8001898 <parse_ascii+0x528>)
 8001772:	220c      	movs	r2, #12
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	e11c      	b.n	80019b2 <parse_ascii+0x642>
				} else {
					if (val == 0) {
 8001778:	4b42      	ldr	r3, [pc, #264]	@ (8001884 <parse_ascii+0x514>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d106      	bne.n	800178e <parse_ascii+0x41e>
						echo = 0;
 8001780:	4b4a      	ldr	r3, [pc, #296]	@ (80018ac <parse_ascii+0x53c>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001786:	4b44      	ldr	r3, [pc, #272]	@ (8001898 <parse_ascii+0x528>)
 8001788:	2280      	movs	r2, #128	@ 0x80
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	e111      	b.n	80019b2 <parse_ascii+0x642>
					} else if (val == 1) {
 800178e:	4b3d      	ldr	r3, [pc, #244]	@ (8001884 <parse_ascii+0x514>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d106      	bne.n	80017a4 <parse_ascii+0x434>
						echo = 1;
 8001796:	4b45      	ldr	r3, [pc, #276]	@ (80018ac <parse_ascii+0x53c>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 800179c:	4b3e      	ldr	r3, [pc, #248]	@ (8001898 <parse_ascii+0x528>)
 800179e:	2280      	movs	r2, #128	@ 0x80
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e106      	b.n	80019b2 <parse_ascii+0x642>
					} else {
						ret = CMR_PARAMETERINVALID;
 80017a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001898 <parse_ascii+0x528>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	e102      	b.n	80019b2 <parse_ascii+0x642>
					}
				}
			} else if (strcmp(cmd, "CRLF") == 0) {
 80017ac:	4940      	ldr	r1, [pc, #256]	@ (80018b0 <parse_ascii+0x540>)
 80017ae:	483c      	ldr	r0, [pc, #240]	@ (80018a0 <parse_ascii+0x530>)
 80017b0:	f7fe fd36 	bl	8000220 <strcmp>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d138      	bne.n	800182c <parse_ascii+0x4bc>
				if (pflag == 0) {
 80017ba:	4b33      	ldr	r3, [pc, #204]	@ (8001888 <parse_ascii+0x518>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d103      	bne.n	80017cc <parse_ascii+0x45c>
					ret = CMR_MISSINGPARAMETER;
 80017c4:	4b34      	ldr	r3, [pc, #208]	@ (8001898 <parse_ascii+0x528>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	e0f2      	b.n	80019b2 <parse_ascii+0x642>
				} else {
					if (val == 0) {
 80017cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001884 <parse_ascii+0x514>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d106      	bne.n	80017e2 <parse_ascii+0x472>
						crlf = 0;
 80017d4:	4b37      	ldr	r3, [pc, #220]	@ (80018b4 <parse_ascii+0x544>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 80017da:	4b2f      	ldr	r3, [pc, #188]	@ (8001898 <parse_ascii+0x528>)
 80017dc:	2280      	movs	r2, #128	@ 0x80
 80017de:	701a      	strb	r2, [r3, #0]
 80017e0:	e0e7      	b.n	80019b2 <parse_ascii+0x642>
					} else if (val == 1) {
 80017e2:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <parse_ascii+0x514>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d106      	bne.n	80017f8 <parse_ascii+0x488>
						crlf = 1;
 80017ea:	4b32      	ldr	r3, [pc, #200]	@ (80018b4 <parse_ascii+0x544>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 80017f0:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <parse_ascii+0x528>)
 80017f2:	2280      	movs	r2, #128	@ 0x80
 80017f4:	701a      	strb	r2, [r3, #0]
 80017f6:	e0dc      	b.n	80019b2 <parse_ascii+0x642>
					} else if (val == 2) {
 80017f8:	4b22      	ldr	r3, [pc, #136]	@ (8001884 <parse_ascii+0x514>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d106      	bne.n	800180e <parse_ascii+0x49e>
						crlf = 2;
 8001800:	4b2c      	ldr	r3, [pc, #176]	@ (80018b4 <parse_ascii+0x544>)
 8001802:	2202      	movs	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001806:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <parse_ascii+0x528>)
 8001808:	2280      	movs	r2, #128	@ 0x80
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e0d1      	b.n	80019b2 <parse_ascii+0x642>
					} else if (val == 3) {
 800180e:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <parse_ascii+0x514>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d106      	bne.n	8001824 <parse_ascii+0x4b4>
						crlf = 3;
 8001816:	4b27      	ldr	r3, [pc, #156]	@ (80018b4 <parse_ascii+0x544>)
 8001818:	2203      	movs	r2, #3
 800181a:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 800181c:	4b1e      	ldr	r3, [pc, #120]	@ (8001898 <parse_ascii+0x528>)
 800181e:	2280      	movs	r2, #128	@ 0x80
 8001820:	701a      	strb	r2, [r3, #0]
 8001822:	e0c6      	b.n	80019b2 <parse_ascii+0x642>
					} else {
						ret = CMR_PARAMETERINVALID;
 8001824:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <parse_ascii+0x528>)
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e0c2      	b.n	80019b2 <parse_ascii+0x642>
					}
				}
			} else if (strcmp(cmd, "SLOPPY") == 0) {
 800182c:	4922      	ldr	r1, [pc, #136]	@ (80018b8 <parse_ascii+0x548>)
 800182e:	481c      	ldr	r0, [pc, #112]	@ (80018a0 <parse_ascii+0x530>)
 8001830:	f7fe fcf6 	bl	8000220 <strcmp>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d142      	bne.n	80018c0 <parse_ascii+0x550>
				if (pflag == 0) {
 800183a:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <parse_ascii+0x518>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d103      	bne.n	800184c <parse_ascii+0x4dc>
					ret = CMR_MISSINGPARAMETER;
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <parse_ascii+0x528>)
 8001846:	220c      	movs	r2, #12
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	e0b2      	b.n	80019b2 <parse_ascii+0x642>
				} else {
					if (val == 0) {
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <parse_ascii+0x514>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d106      	bne.n	8001862 <parse_ascii+0x4f2>
						sloppy = 0;
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <parse_ascii+0x54c>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 800185a:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <parse_ascii+0x528>)
 800185c:	2280      	movs	r2, #128	@ 0x80
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e0a7      	b.n	80019b2 <parse_ascii+0x642>
					} else if (val == 1) {
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <parse_ascii+0x514>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d106      	bne.n	8001878 <parse_ascii+0x508>
						sloppy = 1;
 800186a:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <parse_ascii+0x54c>)
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001870:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <parse_ascii+0x528>)
 8001872:	2280      	movs	r2, #128	@ 0x80
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	e09c      	b.n	80019b2 <parse_ascii+0x642>
					} else {
						ret = CMR_PARAMETERINVALID;
 8001878:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <parse_ascii+0x528>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
 800187e:	e098      	b.n	80019b2 <parse_ascii+0x642>
 8001880:	200001aa 	.word	0x200001aa
 8001884:	200001cc 	.word	0x200001cc
 8001888:	200001d0 	.word	0x200001d0
 800188c:	200001d2 	.word	0x200001d2
 8001890:	200001d1 	.word	0x200001d1
 8001894:	20000002 	.word	0x20000002
 8001898:	200001d3 	.word	0x200001d3
 800189c:	08009908 	.word	0x08009908
 80018a0:	200001b0 	.word	0x200001b0
 80018a4:	20000181 	.word	0x20000181
 80018a8:	08009910 	.word	0x08009910
 80018ac:	20000183 	.word	0x20000183
 80018b0:	08009918 	.word	0x08009918
 80018b4:	20000182 	.word	0x20000182
 80018b8:	08009920 	.word	0x08009920
 80018bc:	20000184 	.word	0x20000184
					}
				}
			} else if (strcmp(cmd, "IBL") == 0) {
 80018c0:	495b      	ldr	r1, [pc, #364]	@ (8001a30 <parse_ascii+0x6c0>)
 80018c2:	485c      	ldr	r0, [pc, #368]	@ (8001a34 <parse_ascii+0x6c4>)
 80018c4:	f7fe fcac 	bl	8000220 <strcmp>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10f      	bne.n	80018ee <parse_ascii+0x57e>
				verbose = 2;
 80018ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001a38 <parse_ascii+0x6c8>)
 80018d0:	2202      	movs	r2, #2
 80018d2:	701a      	strb	r2, [r3, #0]
				echo = 1;
 80018d4:	4b59      	ldr	r3, [pc, #356]	@ (8001a3c <parse_ascii+0x6cc>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
				crlf = 3;
 80018da:	4b59      	ldr	r3, [pc, #356]	@ (8001a40 <parse_ascii+0x6d0>)
 80018dc:	2203      	movs	r2, #3
 80018de:	701a      	strb	r2, [r3, #0]
				sloppy = 1;
 80018e0:	4b58      	ldr	r3, [pc, #352]	@ (8001a44 <parse_ascii+0x6d4>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
				ret = CMR_SUCCESSFULL;
 80018e6:	4b58      	ldr	r3, [pc, #352]	@ (8001a48 <parse_ascii+0x6d8>)
 80018e8:	2280      	movs	r2, #128	@ 0x80
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e061      	b.n	80019b2 <parse_ascii+0x642>
			} else if (strcmp(cmd, "") == 0) {
 80018ee:	4b51      	ldr	r3, [pc, #324]	@ (8001a34 <parse_ascii+0x6c4>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d103      	bne.n	80018fe <parse_ascii+0x58e>
				ret = CMR_SEMICOLONONLY;
 80018f6:	4b54      	ldr	r3, [pc, #336]	@ (8001a48 <parse_ascii+0x6d8>)
 80018f8:	22ff      	movs	r2, #255	@ 0xff
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	e059      	b.n	80019b2 <parse_ascii+0x642>
			}
			//die anderen ASCII-Befehle werden per Binäre-Suche-Funktion eine interne Befehlnummer und ein Attribut zugeordnet
			//und in den Stack eingefügt.
			else {
				Binary_Search(ASCII_CMD_MAX, cmd, &cmd_index);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	461a      	mov	r2, r3
 8001904:	494b      	ldr	r1, [pc, #300]	@ (8001a34 <parse_ascii+0x6c4>)
 8001906:	201d      	movs	r0, #29
 8001908:	f000 fb68 	bl	8001fdc <Binary_Search>
				//uart0_puts(cmd);
				//uart0_puti(cmd_index);

				if (cmd_index != BINARY_INDEX_MAX) {
 800190c:	8abb      	ldrh	r3, [r7, #20]
 800190e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001912:	d04b      	beq.n	80019ac <parse_ascii+0x63c>
					stack_data.cmd_sender = Q_RS232_ASCII;
 8001914:	2304      	movs	r3, #4
 8001916:	713b      	strb	r3, [r7, #4]
					stack_data.cmd_index = cmd_index;
 8001918:	8abb      	ldrh	r3, [r7, #20]
 800191a:	80fb      	strh	r3, [r7, #6]
					stack_data.cmd_ack = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	723b      	strb	r3, [r7, #8]
					stack_data.next = NONEXT;
 8001920:	23ff      	movs	r3, #255	@ 0xff
 8001922:	743b      	strb	r3, [r7, #16]
					stack_data.prio = PRIO_LEVEL1;
 8001924:	2301      	movs	r3, #1
 8001926:	747b      	strb	r3, [r7, #17]

					if (cmd_index & 1) {
 8001928:	8abb      	ldrh	r3, [r7, #20]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d02f      	beq.n	8001992 <parse_ascii+0x622>

						if ((pflag == 1)) {
 8001932:	4b46      	ldr	r3, [pc, #280]	@ (8001a4c <parse_ascii+0x6dc>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d116      	bne.n	800196a <parse_ascii+0x5fa>
							if (negativ_zahl) {
 800193c:	4b44      	ldr	r3, [pc, #272]	@ (8001a50 <parse_ascii+0x6e0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <parse_ascii+0x5de>
								stack_data.parameter = -val;
 8001944:	4b43      	ldr	r3, [pc, #268]	@ (8001a54 <parse_ascii+0x6e4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	425b      	negs	r3, r3
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e002      	b.n	8001954 <parse_ascii+0x5e4>
							} else {
								stack_data.parameter = val;
 800194e:	4b41      	ldr	r3, [pc, #260]	@ (8001a54 <parse_ascii+0x6e4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60fb      	str	r3, [r7, #12]
							}

							stack_data.rwflg = WRITE;
 8001954:	2302      	movs	r3, #2
 8001956:	74bb      	strb	r3, [r7, #18]
							ret = stack_insert_sero(stack_data);
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800195c:	f000 ff32 	bl	80027c4 <stack_insert_sero>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	4b38      	ldr	r3, [pc, #224]	@ (8001a48 <parse_ascii+0x6d8>)
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	e023      	b.n	80019b2 <parse_ascii+0x642>
							//uart0_puti(ret);
							//uart0_puti(stack_data.cmd_index);

						} else if (cmd_index == CMD_RESET_ERROR) {
 800196a:	8abb      	ldrh	r3, [r7, #20]
 800196c:	2b09      	cmp	r3, #9
 800196e:	d10c      	bne.n	800198a <parse_ascii+0x61a>
							stack_data.parameter = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
							stack_data.rwflg = WRITE;
 8001974:	2302      	movs	r3, #2
 8001976:	74bb      	strb	r3, [r7, #18]
							ret = stack_insert_sero(stack_data);
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800197c:	f000 ff22 	bl	80027c4 <stack_insert_sero>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b30      	ldr	r3, [pc, #192]	@ (8001a48 <parse_ascii+0x6d8>)
 8001986:	701a      	strb	r2, [r3, #0]
 8001988:	e013      	b.n	80019b2 <parse_ascii+0x642>
						} else {
							{
								ret = CMR_MISSINGPARAMETER;
 800198a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a48 <parse_ascii+0x6d8>)
 800198c:	220c      	movs	r2, #12
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	e00f      	b.n	80019b2 <parse_ascii+0x642>
							}
						};
					} else  //Lese-Operation
					{
						stack_data.parameter = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
						stack_data.rwflg = READ;
 8001996:	2301      	movs	r3, #1
 8001998:	74bb      	strb	r3, [r7, #18]
						ret = stack_insert_sero(stack_data);
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800199e:	f000 ff11 	bl	80027c4 <stack_insert_sero>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <parse_ascii+0x6d8>)
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	e002      	b.n	80019b2 <parse_ascii+0x642>
					};

				} else //Falls cmd_index = ASCII_CMD_MAX, d.h. der Befehl ist ungültig.
				{
					ret = CMR_UNKNOWNCOMMAND;
 80019ac:	4b26      	ldr	r3, [pc, #152]	@ (8001a48 <parse_ascii+0x6d8>)
 80019ae:	2206      	movs	r2, #6
 80019b0:	701a      	strb	r2, [r3, #0]
				};
			}
			;

			if (ret != STACK_CMDINSTACK) {
 80019b2:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <parse_ascii+0x6d8>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b11      	cmp	r3, #17
 80019ba:	d00b      	beq.n	80019d4 <parse_ascii+0x664>
				output_ascii_cmdack(verbose, crlf, ret);
 80019bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a38 <parse_ascii+0x6c8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a40 <parse_ascii+0x6d0>)
 80019c4:	7812      	ldrb	r2, [r2, #0]
 80019c6:	b2d1      	uxtb	r1, r2
 80019c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a48 <parse_ascii+0x6d8>)
 80019ca:	7812      	ldrb	r2, [r2, #0]
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f8de 	bl	8001b90 <output_ascii_cmdack>
			}
			;

			uartRB_KickTx(&usart3_rb);
 80019d4:	4820      	ldr	r0, [pc, #128]	@ (8001a58 <parse_ascii+0x6e8>)
 80019d6:	f001 fa2f 	bl	8002e38 <uartRB_KickTx>
			strcpy(cmd, "");
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <parse_ascii+0x6c4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
			val = 0;
 80019e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a54 <parse_ascii+0x6e4>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
			ret = 0;
 80019e6:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <parse_ascii+0x6d8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
			pflag = 0;
 80019ec:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <parse_ascii+0x6dc>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
			eflag = 0;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <parse_ascii+0x6ec>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
			negativ_zahl = 0;
 80019f8:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <parse_ascii+0x6e0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]

			a_state = get_cmd;
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <parse_ascii+0x6f0>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
			break;
 8001a04:	e008      	b.n	8001a18 <parse_ascii+0x6a8>

		default:
			a_state = get_cmd;
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <parse_ascii+0x6f0>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
			break;
 8001a0c:	e004      	b.n	8001a18 <parse_ascii+0x6a8>
			break;
 8001a0e:	bf00      	nop
 8001a10:	e002      	b.n	8001a18 <parse_ascii+0x6a8>
			break;
 8001a12:	bf00      	nop
 8001a14:	e000      	b.n	8001a18 <parse_ascii+0x6a8>
			break;
 8001a16:	bf00      	nop

		//	char1[0]=nc;
		//  if(nzeichen >0)	uart1_put(char1, 1);
		//	versandstart1();

	} while (ptr < nzeichen);
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <parse_ascii+0x6f4>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	7dfa      	ldrb	r2, [r7, #23]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f4ff acad 	bcc.w	8001380 <parse_ascii+0x10>
}
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	08009928 	.word	0x08009928
 8001a34:	200001b0 	.word	0x200001b0
 8001a38:	20000181 	.word	0x20000181
 8001a3c:	20000183 	.word	0x20000183
 8001a40:	20000182 	.word	0x20000182
 8001a44:	20000184 	.word	0x20000184
 8001a48:	200001d3 	.word	0x200001d3
 8001a4c:	200001d0 	.word	0x200001d0
 8001a50:	200001d2 	.word	0x200001d2
 8001a54:	200001cc 	.word	0x200001cc
 8001a58:	20000e58 	.word	0x20000e58
 8001a5c:	200001d1 	.word	0x200001d1
 8001a60:	20000002 	.word	0x20000002
 8001a64:	20000197 	.word	0x20000197

08001a68 <serialSendAnswer>:

void serialSendAnswer(uint8_t *message) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t n = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	77bb      	strb	r3, [r7, #30]
	uint8_t checksum = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	777b      	strb	r3, [r7, #29]
	char buffer[RMT_MAX_PAKET_LENGTH + 1];

	if ((message[2] == 0x00) || (message[2] == 0x02) || (message[2] == 0x03)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00e      	beq.n	8001aa0 <serialSendAnswer+0x38>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3302      	adds	r3, #2
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d009      	beq.n	8001aa0 <serialSendAnswer+0x38>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3302      	adds	r3, #2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d004      	beq.n	8001aa0 <serialSendAnswer+0x38>
			|| (message[2] == 0x0A)) //für die Kompabilität vom altem MatchingCube-Programm. später zu löschen
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3302      	adds	r3, #2
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b0a      	cmp	r3, #10
 8001a9e:	d108      	bne.n	8001ab2 <serialSendAnswer+0x4a>
			{
		message[2] |= 0x80;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	781a      	ldrb	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]
	}

	buffer[n++] = RMT_DLE;
 8001ab2:	7fbb      	ldrb	r3, [r7, #30]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	77ba      	strb	r2, [r7, #30]
 8001ab8:	3320      	adds	r3, #32
 8001aba:	443b      	add	r3, r7
 8001abc:	223d      	movs	r2, #61	@ 0x3d
 8001abe:	f803 2c14 	strb.w	r2, [r3, #-20]
	buffer[n++] = RMT_SOT;
 8001ac2:	7fbb      	ldrb	r3, [r7, #30]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	77ba      	strb	r2, [r7, #30]
 8001ac8:	3320      	adds	r3, #32
 8001aca:	443b      	add	r3, r7
 8001acc:	2253      	movs	r2, #83	@ 0x53
 8001ace:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < (CMR_DATAPAKET_LENGTH - 1); i++) {
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	77fb      	strb	r3, [r7, #31]
 8001ad6:	e025      	b.n	8001b24 <serialSendAnswer+0xbc>
		buffer[n++] = message[i];
 8001ad8:	7ffb      	ldrb	r3, [r7, #31]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	441a      	add	r2, r3
 8001ade:	7fbb      	ldrb	r3, [r7, #30]
 8001ae0:	1c59      	adds	r1, r3, #1
 8001ae2:	77b9      	strb	r1, [r7, #30]
 8001ae4:	7812      	ldrb	r2, [r2, #0]
 8001ae6:	3320      	adds	r3, #32
 8001ae8:	443b      	add	r3, r7
 8001aea:	f803 2c14 	strb.w	r2, [r3, #-20]
		if (message[i] == RMT_DLE) {
 8001aee:	7ffb      	ldrb	r3, [r7, #31]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b3d      	cmp	r3, #61	@ 0x3d
 8001af8:	d10a      	bne.n	8001b10 <serialSendAnswer+0xa8>
			buffer[n++] = message[i];
 8001afa:	7ffb      	ldrb	r3, [r7, #31]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	441a      	add	r2, r3
 8001b00:	7fbb      	ldrb	r3, [r7, #30]
 8001b02:	1c59      	adds	r1, r3, #1
 8001b04:	77b9      	strb	r1, [r7, #30]
 8001b06:	7812      	ldrb	r2, [r2, #0]
 8001b08:	3320      	adds	r3, #32
 8001b0a:	443b      	add	r3, r7
 8001b0c:	f803 2c14 	strb.w	r2, [r3, #-20]
			// Die Prüfsumme erstreckt sich nur noch über die NETTO-Payload!
			//checksum += message[i];
		}
		checksum += message[i];
 8001b10:	7ffb      	ldrb	r3, [r7, #31]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	7f7b      	ldrb	r3, [r7, #29]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	777b      	strb	r3, [r7, #29]
	for (i = 0; i < (CMR_DATAPAKET_LENGTH - 1); i++) {
 8001b1e:	7ffb      	ldrb	r3, [r7, #31]
 8001b20:	3301      	adds	r3, #1
 8001b22:	77fb      	strb	r3, [r7, #31]
 8001b24:	7ffb      	ldrb	r3, [r7, #31]
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d9d6      	bls.n	8001ad8 <serialSendAnswer+0x70>
	}
	buffer[n++] = checksum;
 8001b2a:	7fbb      	ldrb	r3, [r7, #30]
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	77ba      	strb	r2, [r7, #30]
 8001b30:	3320      	adds	r3, #32
 8001b32:	443b      	add	r3, r7
 8001b34:	7f7a      	ldrb	r2, [r7, #29]
 8001b36:	f803 2c14 	strb.w	r2, [r3, #-20]
	if (checksum == RMT_DLE) {
 8001b3a:	7f7b      	ldrb	r3, [r7, #29]
 8001b3c:	2b3d      	cmp	r3, #61	@ 0x3d
 8001b3e:	d107      	bne.n	8001b50 <serialSendAnswer+0xe8>
		buffer[n++] = checksum;
 8001b40:	7fbb      	ldrb	r3, [r7, #30]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	77ba      	strb	r2, [r7, #30]
 8001b46:	3320      	adds	r3, #32
 8001b48:	443b      	add	r3, r7
 8001b4a:	7f7a      	ldrb	r2, [r7, #29]
 8001b4c:	f803 2c14 	strb.w	r2, [r3, #-20]
	}
	buffer[n++] = RMT_DLE;
 8001b50:	7fbb      	ldrb	r3, [r7, #30]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	77ba      	strb	r2, [r7, #30]
 8001b56:	3320      	adds	r3, #32
 8001b58:	443b      	add	r3, r7
 8001b5a:	223d      	movs	r2, #61	@ 0x3d
 8001b5c:	f803 2c14 	strb.w	r2, [r3, #-20]
	buffer[n++] = RMT_EOT;
 8001b60:	7fbb      	ldrb	r3, [r7, #30]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	77ba      	strb	r2, [r7, #30]
 8001b66:	3320      	adds	r3, #32
 8001b68:	443b      	add	r3, r7
 8001b6a:	2245      	movs	r2, #69	@ 0x45
 8001b6c:	f803 2c14 	strb.w	r2, [r3, #-20]

	uartRB_Put(&usart3_rb, buffer, n);
 8001b70:	7fba      	ldrb	r2, [r7, #30]
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	4619      	mov	r1, r3
 8001b78:	4804      	ldr	r0, [pc, #16]	@ (8001b8c <serialSendAnswer+0x124>)
 8001b7a:	f001 f9a3 	bl	8002ec4 <uartRB_Put>
	uartRB_KickTx(&usart3_rb);
 8001b7e:	4803      	ldr	r0, [pc, #12]	@ (8001b8c <serialSendAnswer+0x124>)
 8001b80:	f001 f95a 	bl	8002e38 <uartRB_KickTx>
}
 8001b84:	bf00      	nop
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000e58 	.word	0x20000e58

08001b90 <output_ascii_cmdack>:

void output_ascii_cmdack(uint8_t verbose_flg, uint8_t crlf_flg, uint8_t cmd_ack) {
 8001b90:	b5b0      	push	{r4, r5, r7, lr}
 8001b92:	b09c      	sub	sp, #112	@ 0x70
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	71bb      	strb	r3, [r7, #6]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	717b      	strb	r3, [r7, #5]

	if (verbose_flg > 0) {
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 81e3 	beq.w	8001f70 <output_ascii_cmdack+0x3e0>
		if (cmd_ack == CMR_SUCCESSFULL) {
 8001baa:	797b      	ldrb	r3, [r7, #5]
 8001bac:	2b80      	cmp	r3, #128	@ 0x80
 8001bae:	d105      	bne.n	8001bbc <output_ascii_cmdack+0x2c>
			uartRB_Put(&usart3_rb, ">OK;", 4);
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	49ba      	ldr	r1, [pc, #744]	@ (8001e9c <output_ascii_cmdack+0x30c>)
 8001bb4:	48ba      	ldr	r0, [pc, #744]	@ (8001ea0 <output_ascii_cmdack+0x310>)
 8001bb6:	f001 f985 	bl	8002ec4 <uartRB_Put>
 8001bba:	e1e8      	b.n	8001f8e <output_ascii_cmdack+0x3fe>
		} else if (cmd_ack == CMR_SEMICOLONONLY) {
 8001bbc:	797b      	ldrb	r3, [r7, #5]
 8001bbe:	2bff      	cmp	r3, #255	@ 0xff
 8001bc0:	d105      	bne.n	8001bce <output_ascii_cmdack+0x3e>
			uartRB_Put(&usart3_rb, ";", 1);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	49b7      	ldr	r1, [pc, #732]	@ (8001ea4 <output_ascii_cmdack+0x314>)
 8001bc6:	48b6      	ldr	r0, [pc, #728]	@ (8001ea0 <output_ascii_cmdack+0x310>)
 8001bc8:	f001 f97c 	bl	8002ec4 <uartRB_Put>
 8001bcc:	e1df      	b.n	8001f8e <output_ascii_cmdack+0x3fe>
		} else {
			if (verbose_flg == 1) {
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d143      	bne.n	8001c5c <output_ascii_cmdack+0xcc>
				char tmp[10];
				char tmp2[12];
				sprintf(tmp, "%3.3u", (cmd_ack & 0x7F));
 8001bd4:	797b      	ldrb	r3, [r7, #5]
 8001bd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001bda:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bde:	49b2      	ldr	r1, [pc, #712]	@ (8001ea8 <output_ascii_cmdack+0x318>)
 8001be0:	4618      	mov	r0, r3
 8001be2:	f007 f9d3 	bl	8008f8c <siprintf>

				if (cmd_ack > 128) {
 8001be6:	797b      	ldrb	r3, [r7, #5]
 8001be8:	2b80      	cmp	r3, #128	@ 0x80
 8001bea:	d909      	bls.n	8001c00 <output_ascii_cmdack+0x70>
					strcpy(tmp2, ">W");
 8001bec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001bf0:	4aae      	ldr	r2, [pc, #696]	@ (8001eac <output_ascii_cmdack+0x31c>)
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	8019      	strh	r1, [r3, #0]
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	0c12      	lsrs	r2, r2, #16
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e008      	b.n	8001c12 <output_ascii_cmdack+0x82>
				} else {
					strcpy(tmp2, ">E");
 8001c00:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c04:	4aaa      	ldr	r2, [pc, #680]	@ (8001eb0 <output_ascii_cmdack+0x320>)
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	4611      	mov	r1, r2
 8001c0a:	8019      	strh	r1, [r3, #0]
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	0c12      	lsrs	r2, r2, #16
 8001c10:	701a      	strb	r2, [r3, #0]
				}
				strcat(tmp2, tmp);
 8001c12:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001c16:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f007 f9dd 	bl	8008fdc <strcat>
				strcat(tmp2, ";");
 8001c22:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fb04 	bl	8000234 <strlen>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c34:	4413      	add	r3, r2
 8001c36:	499b      	ldr	r1, [pc, #620]	@ (8001ea4 <output_ascii_cmdack+0x314>)
 8001c38:	461a      	mov	r2, r3
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	8013      	strh	r3, [r2, #0]
				uartRB_Put(&usart3_rb, tmp2, strlen(tmp2));
 8001c40:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe faf5 	bl	8000234 <strlen>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c52:	4619      	mov	r1, r3
 8001c54:	4892      	ldr	r0, [pc, #584]	@ (8001ea0 <output_ascii_cmdack+0x310>)
 8001c56:	f001 f935 	bl	8002ec4 <uartRB_Put>
 8001c5a:	e198      	b.n	8001f8e <output_ascii_cmdack+0x3fe>
			} else if (verbose_flg == 2) {
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	f040 8195 	bne.w	8001f8e <output_ascii_cmdack+0x3fe>
				char tmp[35];
				char tmp2[40];
				if (cmd_ack > 128) {
 8001c64:	797b      	ldrb	r3, [r7, #5]
 8001c66:	2b80      	cmp	r3, #128	@ 0x80
 8001c68:	d904      	bls.n	8001c74 <output_ascii_cmdack+0xe4>
					strcpy(tmp2, ">W:");
 8001c6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c6e:	4a91      	ldr	r2, [pc, #580]	@ (8001eb4 <output_ascii_cmdack+0x324>)
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e003      	b.n	8001c7c <output_ascii_cmdack+0xec>
				} else {
					strcpy(tmp2, ">E:");
 8001c74:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c78:	4a8f      	ldr	r2, [pc, #572]	@ (8001eb8 <output_ascii_cmdack+0x328>)
 8001c7a:	601a      	str	r2, [r3, #0]
				}

				switch (cmd_ack & 0xFF)          //(cmd_ack & 0x7F)
 8001c7c:	797b      	ldrb	r3, [r7, #5]
 8001c7e:	2b8a      	cmp	r3, #138	@ 0x8a
 8001c80:	f000 8087 	beq.w	8001d92 <output_ascii_cmdack+0x202>
 8001c84:	2b8a      	cmp	r3, #138	@ 0x8a
 8001c86:	f300 8144 	bgt.w	8001f12 <output_ascii_cmdack+0x382>
 8001c8a:	2b83      	cmp	r3, #131	@ 0x83
 8001c8c:	d075      	beq.n	8001d7a <output_ascii_cmdack+0x1ea>
 8001c8e:	2b83      	cmp	r3, #131	@ 0x83
 8001c90:	f300 813f 	bgt.w	8001f12 <output_ascii_cmdack+0x382>
 8001c94:	2b1f      	cmp	r3, #31
 8001c96:	dc49      	bgt.n	8001d2c <output_ascii_cmdack+0x19c>
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f2c0 813a 	blt.w	8001f12 <output_ascii_cmdack+0x382>
 8001c9e:	2b1f      	cmp	r3, #31
 8001ca0:	f200 8137 	bhi.w	8001f12 <output_ascii_cmdack+0x382>
 8001ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cac <output_ascii_cmdack+0x11c>)
 8001ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001caa:	bf00      	nop
 8001cac:	08001d33 	.word	0x08001d33
 8001cb0:	08001d47 	.word	0x08001d47
 8001cb4:	08001f13 	.word	0x08001f13
 8001cb8:	08001f13 	.word	0x08001f13
 8001cbc:	08001f13 	.word	0x08001f13
 8001cc0:	08001f13 	.word	0x08001f13
 8001cc4:	08001dbf 	.word	0x08001dbf
 8001cc8:	08001dd3 	.word	0x08001dd3
 8001ccc:	08001de5 	.word	0x08001de5
 8001cd0:	08001e4d 	.word	0x08001e4d
 8001cd4:	08001f13 	.word	0x08001f13
 8001cd8:	08001da7 	.word	0x08001da7
 8001cdc:	08001e61 	.word	0x08001e61
 8001ce0:	08001e05 	.word	0x08001e05
 8001ce4:	08001e17 	.word	0x08001e17
 8001ce8:	08001e33 	.word	0x08001e33
 8001cec:	08001e7d 	.word	0x08001e7d
 8001cf0:	08001f13 	.word	0x08001f13
 8001cf4:	08001f13 	.word	0x08001f13
 8001cf8:	08001f13 	.word	0x08001f13
 8001cfc:	08001f13 	.word	0x08001f13
 8001d00:	08001f13 	.word	0x08001f13
 8001d04:	08001f13 	.word	0x08001f13
 8001d08:	08001f13 	.word	0x08001f13
 8001d0c:	08001f13 	.word	0x08001f13
 8001d10:	08001f13 	.word	0x08001f13
 8001d14:	08001f13 	.word	0x08001f13
 8001d18:	08001f13 	.word	0x08001f13
 8001d1c:	08001f13 	.word	0x08001f13
 8001d20:	08001f13 	.word	0x08001f13
 8001d24:	08001f13 	.word	0x08001f13
 8001d28:	08001ef9 	.word	0x08001ef9
 8001d2c:	2b82      	cmp	r3, #130	@ 0x82
 8001d2e:	d018      	beq.n	8001d62 <output_ascii_cmdack+0x1d2>
 8001d30:	e0ef      	b.n	8001f12 <output_ascii_cmdack+0x382>
				{
				case CMR_COMMANDONDEMAND:
					strcpy(tmp, "No Answer!");
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	4a61      	ldr	r2, [pc, #388]	@ (8001ebc <output_ascii_cmdack+0x32c>)
 8001d38:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d3a:	c303      	stmia	r3!, {r0, r1}
 8001d3c:	801a      	strh	r2, [r3, #0]
 8001d3e:	3302      	adds	r3, #2
 8001d40:	0c12      	lsrs	r2, r2, #16
 8001d42:	701a      	strb	r2, [r3, #0]
					break;
 8001d44:	e0ef      	b.n	8001f26 <output_ascii_cmdack+0x396>

				case CMR_PARAMETERINVALID:
					strcpy(tmp, "Parameter Invalid!");
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ec0 <output_ascii_cmdack+0x330>)
 8001d4c:	461c      	mov	r4, r3
 8001d4e:	4615      	mov	r5, r2
 8001d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	8022      	strh	r2, [r4, #0]
 8001d5a:	3402      	adds	r4, #2
 8001d5c:	0c1b      	lsrs	r3, r3, #16
 8001d5e:	7023      	strb	r3, [r4, #0]
					break;
 8001d60:	e0e1      	b.n	8001f26 <output_ascii_cmdack+0x396>

				case CMR_PARAMETERCLIPEDMIN:
					strcpy(tmp, "Parameter Clipped to Minimum!");
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	4a57      	ldr	r2, [pc, #348]	@ (8001ec4 <output_ascii_cmdack+0x334>)
 8001d68:	461c      	mov	r4, r3
 8001d6a:	4615      	mov	r5, r2
 8001d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d74:	c407      	stmia	r4!, {r0, r1, r2}
 8001d76:	8023      	strh	r3, [r4, #0]
					break;
 8001d78:	e0d5      	b.n	8001f26 <output_ascii_cmdack+0x396>

				case CMR_PARAMETERCLIPEDMAX:
					strcpy(tmp, "Parameter Clipped to Maximum!");
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	4a52      	ldr	r2, [pc, #328]	@ (8001ec8 <output_ascii_cmdack+0x338>)
 8001d80:	461c      	mov	r4, r3
 8001d82:	4615      	mov	r5, r2
 8001d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d8c:	c407      	stmia	r4!, {r0, r1, r2}
 8001d8e:	8023      	strh	r3, [r4, #0]
					break;
 8001d90:	e0c9      	b.n	8001f26 <output_ascii_cmdack+0x396>

				case CMR_PARAMETERADJUSTED:
					strcpy(tmp, "Parameter Adjusted!");
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	4a4d      	ldr	r2, [pc, #308]	@ (8001ecc <output_ascii_cmdack+0x33c>)
 8001d98:	461c      	mov	r4, r3
 8001d9a:	4615      	mov	r5, r2
 8001d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da0:	682b      	ldr	r3, [r5, #0]
 8001da2:	6023      	str	r3, [r4, #0]
					break;
 8001da4:	e0bf      	b.n	8001f26 <output_ascii_cmdack+0x396>

				case CMR_WRONGPARAMETERFORMAT:
					strcpy(tmp, "Wrong Parameter Format!");
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	4a49      	ldr	r2, [pc, #292]	@ (8001ed0 <output_ascii_cmdack+0x340>)
 8001dac:	461c      	mov	r4, r3
 8001dae:	4615      	mov	r5, r2
 8001db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001db8:	e884 0003 	stmia.w	r4, {r0, r1}
					break;
 8001dbc:	e0b3      	b.n	8001f26 <output_ascii_cmdack+0x396>

				case CMR_UNKNOWNCOMMAND:
					strcpy(tmp, "Unknown Command!");
 8001dbe:	f107 030c 	add.w	r3, r7, #12
 8001dc2:	4a44      	ldr	r2, [pc, #272]	@ (8001ed4 <output_ascii_cmdack+0x344>)
 8001dc4:	461c      	mov	r4, r3
 8001dc6:	4615      	mov	r5, r2
 8001dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	7023      	strb	r3, [r4, #0]
					break;
 8001dd0:	e0a9      	b.n	8001f26 <output_ascii_cmdack+0x396>

				case CMR_COMMANDDENIED:
					strcpy(tmp, "Command Denied!");
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	4a40      	ldr	r2, [pc, #256]	@ (8001ed8 <output_ascii_cmdack+0x348>)
 8001dd8:	461c      	mov	r4, r3
 8001dda:	4613      	mov	r3, r2
 8001ddc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					break;
 8001de2:	e0a0      	b.n	8001f26 <output_ascii_cmdack+0x396>

				case CMR_COMMANDNOTSUPPORTED:
					strcpy(tmp, "Command Not Supported!");
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	4a3c      	ldr	r2, [pc, #240]	@ (8001edc <output_ascii_cmdack+0x34c>)
 8001dea:	461c      	mov	r4, r3
 8001dec:	4615      	mov	r5, r2
 8001dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001df6:	6020      	str	r0, [r4, #0]
 8001df8:	3404      	adds	r4, #4
 8001dfa:	8021      	strh	r1, [r4, #0]
 8001dfc:	3402      	adds	r4, #2
 8001dfe:	0c0b      	lsrs	r3, r1, #16
 8001e00:	7023      	strb	r3, [r4, #0]
					break;
 8001e02:	e090      	b.n	8001f26 <output_ascii_cmdack+0x396>

				case CMR_EEPROMERROR:
					strcpy(tmp, "EEPROM Error!");
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	4a35      	ldr	r2, [pc, #212]	@ (8001ee0 <output_ascii_cmdack+0x350>)
 8001e0a:	461c      	mov	r4, r3
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e10:	c407      	stmia	r4!, {r0, r1, r2}
 8001e12:	8023      	strh	r3, [r4, #0]
					break;
 8001e14:	e087      	b.n	8001f26 <output_ascii_cmdack+0x396>

				case CMR_EEPWRLOCKED:
					strcpy(tmp, "EEPROM Write Lock!");
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	4a32      	ldr	r2, [pc, #200]	@ (8001ee4 <output_ascii_cmdack+0x354>)
 8001e1c:	461c      	mov	r4, r3
 8001e1e:	4615      	mov	r5, r2
 8001e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e24:	682b      	ldr	r3, [r5, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	8022      	strh	r2, [r4, #0]
 8001e2a:	3402      	adds	r4, #2
 8001e2c:	0c1b      	lsrs	r3, r3, #16
 8001e2e:	7023      	strb	r3, [r4, #0]
					break;
 8001e30:	e079      	b.n	8001f26 <output_ascii_cmdack+0x396>

				case CMR_WRONGOPMODE:
					strcpy(tmp, "Wrong Operation Mode!");
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	4a2c      	ldr	r2, [pc, #176]	@ (8001ee8 <output_ascii_cmdack+0x358>)
 8001e38:	461c      	mov	r4, r3
 8001e3a:	4615      	mov	r5, r2
 8001e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e44:	6020      	str	r0, [r4, #0]
 8001e46:	3404      	adds	r4, #4
 8001e48:	8021      	strh	r1, [r4, #0]
					break;
 8001e4a:	e06c      	b.n	8001f26 <output_ascii_cmdack+0x396>

				case CMR_UNITBUSY:
					strcpy(tmp, "Unit Busy!");
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	4a26      	ldr	r2, [pc, #152]	@ (8001eec <output_ascii_cmdack+0x35c>)
 8001e52:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e54:	c303      	stmia	r3!, {r0, r1}
 8001e56:	801a      	strh	r2, [r3, #0]
 8001e58:	3302      	adds	r3, #2
 8001e5a:	0c12      	lsrs	r2, r2, #16
 8001e5c:	701a      	strb	r2, [r3, #0]
					break;
 8001e5e:	e062      	b.n	8001f26 <output_ascii_cmdack+0x396>

				case CMR_MISSINGPARAMETER:
					strcpy(tmp, "Missing Parameter!");
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	4a22      	ldr	r2, [pc, #136]	@ (8001ef0 <output_ascii_cmdack+0x360>)
 8001e66:	461c      	mov	r4, r3
 8001e68:	4615      	mov	r5, r2
 8001e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6e:	682b      	ldr	r3, [r5, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	8022      	strh	r2, [r4, #0]
 8001e74:	3402      	adds	r4, #2
 8001e76:	0c1b      	lsrs	r3, r3, #16
 8001e78:	7023      	strb	r3, [r4, #0]
					break;
 8001e7a:	e054      	b.n	8001f26 <output_ascii_cmdack+0x396>

				case CMR_OPTIONNOTINSTALLED:
					strcpy(tmp, "Required Option Not Installed!");
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef4 <output_ascii_cmdack+0x364>)
 8001e82:	461c      	mov	r4, r3
 8001e84:	4615      	mov	r5, r2
 8001e86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e8a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e8e:	c407      	stmia	r4!, {r0, r1, r2}
 8001e90:	8023      	strh	r3, [r4, #0]
 8001e92:	3402      	adds	r4, #2
 8001e94:	0c1b      	lsrs	r3, r3, #16
 8001e96:	7023      	strb	r3, [r4, #0]
					break;
 8001e98:	e045      	b.n	8001f26 <output_ascii_cmdack+0x396>
 8001e9a:	bf00      	nop
 8001e9c:	0800992c 	.word	0x0800992c
 8001ea0:	20000e58 	.word	0x20000e58
 8001ea4:	08009934 	.word	0x08009934
 8001ea8:	08009938 	.word	0x08009938
 8001eac:	08009940 	.word	0x08009940
 8001eb0:	08009944 	.word	0x08009944
 8001eb4:	003a573e 	.word	0x003a573e
 8001eb8:	003a453e 	.word	0x003a453e
 8001ebc:	08009948 	.word	0x08009948
 8001ec0:	08009954 	.word	0x08009954
 8001ec4:	08009968 	.word	0x08009968
 8001ec8:	08009988 	.word	0x08009988
 8001ecc:	080099a8 	.word	0x080099a8
 8001ed0:	080099bc 	.word	0x080099bc
 8001ed4:	080099d4 	.word	0x080099d4
 8001ed8:	080099e8 	.word	0x080099e8
 8001edc:	080099f8 	.word	0x080099f8
 8001ee0:	08009a10 	.word	0x08009a10
 8001ee4:	08009a20 	.word	0x08009a20
 8001ee8:	08009a34 	.word	0x08009a34
 8001eec:	08009a4c 	.word	0x08009a4c
 8001ef0:	08009a58 	.word	0x08009a58
 8001ef4:	08009a6c 	.word	0x08009a6c

				case CMR_MALFORMATTEDCOMMAND:
					strcpy(tmp, "Malformatted Command!");
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	4a31      	ldr	r2, [pc, #196]	@ (8001fc4 <output_ascii_cmdack+0x434>)
 8001efe:	461c      	mov	r4, r3
 8001f00:	4615      	mov	r5, r2
 8001f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f0a:	6020      	str	r0, [r4, #0]
 8001f0c:	3404      	adds	r4, #4
 8001f0e:	8021      	strh	r1, [r4, #0]
					break;
 8001f10:	e009      	b.n	8001f26 <output_ascii_cmdack+0x396>

				default:
					sprintf(tmp, "%3.3u", (cmd_ack & 0x7F));
 8001f12:	797b      	ldrb	r3, [r7, #5]
 8001f14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	492a      	ldr	r1, [pc, #168]	@ (8001fc8 <output_ascii_cmdack+0x438>)
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f007 f834 	bl	8008f8c <siprintf>
					break;
 8001f24:	bf00      	nop
				}

				strcat(tmp2, tmp);
 8001f26:	f107 020c 	add.w	r2, r7, #12
 8001f2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f007 f853 	bl	8008fdc <strcat>
				strcat(tmp2, ";");
 8001f36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe f97a 	bl	8000234 <strlen>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f48:	4413      	add	r3, r2
 8001f4a:	4920      	ldr	r1, [pc, #128]	@ (8001fcc <output_ascii_cmdack+0x43c>)
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	460b      	mov	r3, r1
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	8013      	strh	r3, [r2, #0]
				uartRB_Put(&usart3_rb, tmp2, strlen(tmp2));
 8001f54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe f96b 	bl	8000234 <strlen>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f66:	4619      	mov	r1, r3
 8001f68:	4819      	ldr	r0, [pc, #100]	@ (8001fd0 <output_ascii_cmdack+0x440>)
 8001f6a:	f000 ffab 	bl	8002ec4 <uartRB_Put>
 8001f6e:	e00e      	b.n	8001f8e <output_ascii_cmdack+0x3fe>
			}
		}
	} else {
		if (cmd_ack != STACK_CMDINSTACK) {
 8001f70:	797b      	ldrb	r3, [r7, #5]
 8001f72:	2b11      	cmp	r3, #17
 8001f74:	d00b      	beq.n	8001f8e <output_ascii_cmdack+0x3fe>
			//if (((cmd_ack & 0x80) == CMR_SUCCESSFULL))
			if ((cmd_ack == CMR_SEMICOLONONLY)
 8001f76:	797b      	ldrb	r3, [r7, #5]
 8001f78:	2bff      	cmp	r3, #255	@ 0xff
 8001f7a:	d003      	beq.n	8001f84 <output_ascii_cmdack+0x3f4>
					|| ((cmd_ack & 0x80) == CMR_SUCCESSFULL))
 8001f7c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	da04      	bge.n	8001f8e <output_ascii_cmdack+0x3fe>
				uartRB_Put(&usart3_rb, ";", 1);
 8001f84:	2201      	movs	r2, #1
 8001f86:	4911      	ldr	r1, [pc, #68]	@ (8001fcc <output_ascii_cmdack+0x43c>)
 8001f88:	4811      	ldr	r0, [pc, #68]	@ (8001fd0 <output_ascii_cmdack+0x440>)
 8001f8a:	f000 ff9b 	bl	8002ec4 <uartRB_Put>

		};
	}

	if ((crlf_flg & 0x01) > 0) {	//crlf_char= "\r";        //d.h. CR
 8001f8e:	79bb      	ldrb	r3, [r7, #6]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	dd04      	ble.n	8001fa2 <output_ascii_cmdack+0x412>
		uartRB_Put(&usart3_rb, "\r", 1);
 8001f98:	2201      	movs	r2, #1
 8001f9a:	490e      	ldr	r1, [pc, #56]	@ (8001fd4 <output_ascii_cmdack+0x444>)
 8001f9c:	480c      	ldr	r0, [pc, #48]	@ (8001fd0 <output_ascii_cmdack+0x440>)
 8001f9e:	f000 ff91 	bl	8002ec4 <uartRB_Put>
	}
	if ((crlf_flg & 0x02) > 0) {	//*crlf_char=";
 8001fa2:	79bb      	ldrb	r3, [r7, #6]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	dd04      	ble.n	8001fb6 <output_ascii_cmdack+0x426>
		uartRB_Put(&usart3_rb, "\n", 1);
 8001fac:	2201      	movs	r2, #1
 8001fae:	490a      	ldr	r1, [pc, #40]	@ (8001fd8 <output_ascii_cmdack+0x448>)
 8001fb0:	4807      	ldr	r0, [pc, #28]	@ (8001fd0 <output_ascii_cmdack+0x440>)
 8001fb2:	f000 ff87 	bl	8002ec4 <uartRB_Put>
	}
	uartRB_KickTx(&usart3_rb);
 8001fb6:	4806      	ldr	r0, [pc, #24]	@ (8001fd0 <output_ascii_cmdack+0x440>)
 8001fb8:	f000 ff3e 	bl	8002e38 <uartRB_KickTx>
}
 8001fbc:	bf00      	nop
 8001fbe:	3770      	adds	r7, #112	@ 0x70
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc4:	08009a8c 	.word	0x08009a8c
 8001fc8:	08009938 	.word	0x08009938
 8001fcc:	08009934 	.word	0x08009934
 8001fd0:	20000e58 	.word	0x20000e58
 8001fd4:	08009aa4 	.word	0x08009aa4
 8001fd8:	08009aa8 	.word	0x08009aa8

08001fdc <Binary_Search>:

//Die interne Befehlnummer werden für den eingegebenen Befehl zurückgeliefert.
void Binary_Search(uint8_t ncmd, char *key, uint16_t *cmdindex) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	73fb      	strb	r3, [r7, #15]
	volatile uint16_t low = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	83fb      	strh	r3, [r7, #30]
	volatile uint16_t high = ncmd - 1;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	83bb      	strh	r3, [r7, #28]
	volatile uint16_t mid;
	volatile int sflag;
	volatile uint8_t flag = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	74fb      	strb	r3, [r7, #19]

	while ((low <= high) && (flag == 0)) {
 8001ffc:	e045      	b.n	800208a <Binary_Search+0xae>
		mid = ((low + high) >> 1);
 8001ffe:	8bfb      	ldrh	r3, [r7, #30]
 8002000:	b29b      	uxth	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	8bbb      	ldrh	r3, [r7, #28]
 8002006:	b29b      	uxth	r3, r3
 8002008:	4413      	add	r3, r2
 800200a:	105b      	asrs	r3, r3, #1
 800200c:	b29b      	uxth	r3, r3
 800200e:	837b      	strh	r3, [r7, #26]
		sflag = strcmp(key, (char*) &(ASCIICmdTable[mid].cmdline));
 8002010:	8b7b      	ldrh	r3, [r7, #26]
 8002012:	b29b      	uxth	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	2316      	movs	r3, #22
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	4a27      	ldr	r2, [pc, #156]	@ (80020bc <Binary_Search+0xe0>)
 800201e:	4413      	add	r3, r2
 8002020:	4619      	mov	r1, r3
 8002022:	68b8      	ldr	r0, [r7, #8]
 8002024:	f7fe f8fc 	bl	8000220 <strcmp>
 8002028:	4603      	mov	r3, r0
 800202a:	617b      	str	r3, [r7, #20]

		if (sflag < 0) {
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	da12      	bge.n	8002058 <Binary_Search+0x7c>
			if (mid != 0) {
 8002032:	8b7b      	ldrh	r3, [r7, #26]
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <Binary_Search+0x6a>
				high = mid - 1;
 800203a:	8b7b      	ldrh	r3, [r7, #26]
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29b      	uxth	r3, r3
 8002042:	83bb      	strh	r3, [r7, #28]
 8002044:	e005      	b.n	8002052 <Binary_Search+0x76>
			} else {
				if (low != 0) {
 8002046:	8bfb      	ldrh	r3, [r7, #30]
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d028      	beq.n	80020a0 <Binary_Search+0xc4>
					high = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	83bb      	strh	r3, [r7, #28]
				} else {
					break;
				}
			}
			flag = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	74fb      	strb	r3, [r7, #19]
 8002056:	e018      	b.n	800208a <Binary_Search+0xae>
		} else if (sflag == 0) {
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10e      	bne.n	800207c <Binary_Search+0xa0>

			*cmdindex = ASCIICmdTable[mid].cmdindex;
 800205e:	8b7b      	ldrh	r3, [r7, #26]
 8002060:	b29b      	uxth	r3, r3
 8002062:	4619      	mov	r1, r3
 8002064:	4a15      	ldr	r2, [pc, #84]	@ (80020bc <Binary_Search+0xe0>)
 8002066:	2316      	movs	r3, #22
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	3314      	adds	r3, #20
 8002070:	881a      	ldrh	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	801a      	strh	r2, [r3, #0]
			flag = 1;
 8002076:	2301      	movs	r3, #1
 8002078:	74fb      	strb	r3, [r7, #19]
 800207a:	e006      	b.n	800208a <Binary_Search+0xae>
		} else {
			low = mid + 1;
 800207c:	8b7b      	ldrh	r3, [r7, #26]
 800207e:	b29b      	uxth	r3, r3
 8002080:	3301      	adds	r3, #1
 8002082:	b29b      	uxth	r3, r3
 8002084:	83fb      	strh	r3, [r7, #30]
			flag = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	74fb      	strb	r3, [r7, #19]
	while ((low <= high) && (flag == 0)) {
 800208a:	8bfb      	ldrh	r3, [r7, #30]
 800208c:	b29a      	uxth	r2, r3
 800208e:	8bbb      	ldrh	r3, [r7, #28]
 8002090:	b29b      	uxth	r3, r3
 8002092:	429a      	cmp	r2, r3
 8002094:	d805      	bhi.n	80020a2 <Binary_Search+0xc6>
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0af      	beq.n	8001ffe <Binary_Search+0x22>
 800209e:	e000      	b.n	80020a2 <Binary_Search+0xc6>
					break;
 80020a0:	bf00      	nop
		}

	};

	if (flag == 0)   //Falls die Tabelle diesen Befehl nicht enthältet,
 80020a2:	7cfb      	ldrb	r3, [r7, #19]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <Binary_Search+0xd6>
			{
		*cmdindex = BINARY_INDEX_MAX;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020b0:	801a      	strh	r2, [r3, #0]
	};
}
 80020b2:	bf00      	nop
 80020b4:	3720      	adds	r7, #32
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	08009ab4 	.word	0x08009ab4

080020c0 <output_ascii_result>:

void output_ascii_result(uint8_t verbose_data, uint8_t crlf_data,
		stack_item *result_data) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	603a      	str	r2, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
 80020cc:	460b      	mov	r3, r1
 80020ce:	71bb      	strb	r3, [r7, #6]
	//uart0_puts("output");
	switch (result_data->rwflg) {
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	7b9b      	ldrb	r3, [r3, #14]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d002      	beq.n	80020de <output_ascii_result+0x1e>
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d029      	beq.n	8002130 <output_ascii_result+0x70>
		break;
	case WRITE:
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
		break;
	};
}
 80020dc:	e030      	b.n	8002140 <output_ascii_result+0x80>
		switch (result_data->cmd_index) {
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	885b      	ldrh	r3, [r3, #2]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d017      	beq.n	8002116 <output_ascii_result+0x56>
 80020e6:	2b0e      	cmp	r3, #14
 80020e8:	d017      	beq.n	800211a <output_ascii_result+0x5a>
			if ((result_data->cmd_ack == CMR_SUCCESSFULL)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	791b      	ldrb	r3, [r3, #4]
 80020ee:	2b80      	cmp	r3, #128	@ 0x80
 80020f0:	d00b      	beq.n	800210a <output_ascii_result+0x4a>
					|| (result_data->cmd_ack == CMR_PARAMETERCLIPEDMIN)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	791b      	ldrb	r3, [r3, #4]
 80020f6:	2b82      	cmp	r3, #130	@ 0x82
 80020f8:	d007      	beq.n	800210a <output_ascii_result+0x4a>
					|| (result_data->cmd_ack == CMR_PARAMETERCLIPEDMAX)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	791b      	ldrb	r3, [r3, #4]
 80020fe:	2b83      	cmp	r3, #131	@ 0x83
 8002100:	d003      	beq.n	800210a <output_ascii_result+0x4a>
					|| (result_data->cmd_ack == CMR_PARAMETERADJUSTED)) {
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	791b      	ldrb	r3, [r3, #4]
 8002106:	2b8a      	cmp	r3, #138	@ 0x8a
 8002108:	d109      	bne.n	800211e <output_ascii_result+0x5e>
				output_ascii(result_data->parameter);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f850 	bl	80021b4 <output_ascii>
			break;
 8002114:	e003      	b.n	800211e <output_ascii_result+0x5e>
			break;
 8002116:	bf00      	nop
 8002118:	e002      	b.n	8002120 <output_ascii_result+0x60>
			break;
 800211a:	bf00      	nop
 800211c:	e000      	b.n	8002120 <output_ascii_result+0x60>
			break;
 800211e:	bf00      	nop
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	791a      	ldrb	r2, [r3, #4]
 8002124:	79b9      	ldrb	r1, [r7, #6]
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fd31 	bl	8001b90 <output_ascii_cmdack>
		break;
 800212e:	e007      	b.n	8002140 <output_ascii_result+0x80>
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	791a      	ldrb	r2, [r3, #4]
 8002134:	79b9      	ldrb	r1, [r7, #6]
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fd29 	bl	8001b90 <output_ascii_cmdack>
		break;
 800213e:	bf00      	nop
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <output_binary_result>:

void output_binary_result(stack_item *cmd) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[7];
	uint16_t s_tmp = cmd->cmd_sender;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	82fb      	strh	r3, [r7, #22]
	uint16_t r_tmp = cmd->cmd_receiver;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	785b      	ldrb	r3, [r3, #1]
 800215a:	82bb      	strh	r3, [r7, #20]
	int32_t param = cmd->parameter;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	613b      	str	r3, [r7, #16]

	buffer[0] = (s_tmp << 5) | (r_tmp << 3);
 8002162:	8afb      	ldrh	r3, [r7, #22]
 8002164:	015b      	lsls	r3, r3, #5
 8002166:	b25a      	sxtb	r2, r3
 8002168:	8abb      	ldrh	r3, [r7, #20]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	b25b      	sxtb	r3, r3
 800216e:	4313      	orrs	r3, r2
 8002170:	b25b      	sxtb	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	723b      	strb	r3, [r7, #8]
	buffer[1] = cmd->cmd_index;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	885b      	ldrh	r3, [r3, #2]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	727b      	strb	r3, [r7, #9]
	buffer[2] = cmd->cmd_ack;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	791b      	ldrb	r3, [r3, #4]
 8002182:	72bb      	strb	r3, [r7, #10]
	buffer[3] = (param >> 24) & 0xFF;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	0e1b      	lsrs	r3, r3, #24
 8002188:	b2db      	uxtb	r3, r3
 800218a:	72fb      	strb	r3, [r7, #11]
	buffer[4] = (param >> 16) & 0xFF;
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	141b      	asrs	r3, r3, #16
 8002190:	b2db      	uxtb	r3, r3
 8002192:	733b      	strb	r3, [r7, #12]
	buffer[5] = (param >> 8) & 0xFF;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	121b      	asrs	r3, r3, #8
 8002198:	b2db      	uxtb	r3, r3
 800219a:	737b      	strb	r3, [r7, #13]
	buffer[6] = param & 0xFF;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	73bb      	strb	r3, [r7, #14]
	serialSendAnswer(buffer);
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fc5e 	bl	8001a68 <serialSendAnswer>
}
 80021ac:	bf00      	nop
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <output_ascii>:

void output_ascii(int32_t val) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08c      	sub	sp, #48	@ 0x30
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	char tmp[34];
	sprintf(tmp, "%-ld", val);
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	490c      	ldr	r1, [pc, #48]	@ (80021f4 <output_ascii+0x40>)
 80021c4:	4618      	mov	r0, r3
 80021c6:	f006 fee1 	bl	8008f8c <siprintf>
	uartRB_Put(&usart3_rb, tmp, strlen(tmp));
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f830 	bl	8000234 <strlen>
 80021d4:	4603      	mov	r3, r0
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	4619      	mov	r1, r3
 80021de:	4806      	ldr	r0, [pc, #24]	@ (80021f8 <output_ascii+0x44>)
 80021e0:	f000 fe70 	bl	8002ec4 <uartRB_Put>
	uartRB_KickTx(&usart3_rb);
 80021e4:	4804      	ldr	r0, [pc, #16]	@ (80021f8 <output_ascii+0x44>)
 80021e6:	f000 fe27 	bl	8002e38 <uartRB_KickTx>
}
 80021ea:	bf00      	nop
 80021ec:	3730      	adds	r7, #48	@ 0x30
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	08009aac 	.word	0x08009aac
 80021f8:	20000e58 	.word	0x20000e58

080021fc <remote_ascii_verbose>:

uint8_t remote_ascii_verbose(void) {
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
	return verbose;
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <remote_ascii_verbose+0x14>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	b2db      	uxtb	r3, r3
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	20000181 	.word	0x20000181

08002214 <remote_ascii_crlf>:

uint8_t remote_ascii_crlf(void) {
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
	return crlf;
 8002218:	4b03      	ldr	r3, [pc, #12]	@ (8002228 <remote_ascii_crlf+0x14>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b2db      	uxtb	r3, r3
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	20000182 	.word	0x20000182

0800222c <resultQueue_init>:
//void output_touch_result(stack_item *cmd);
//void spi_SendAnswer(uint8_t *message);

//--------------FUNKTIONSDEFINITIONS-----------------------------------------------------------------------------------------
void resultQueue_init(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
	resultQueue_in = 0;
 8002230:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <resultQueue_init+0x1c>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
	resultQueue_out = 0;
 8002236:	4b05      	ldr	r3, [pc, #20]	@ (800224c <resultQueue_init+0x20>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000594 	.word	0x20000594
 800224c:	20000595 	.word	0x20000595

08002250 <get_anzFrei_resultQueue>:

uint8_t get_anzFrei_resultQueue(void)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
	int8_t x;
	//ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		x = resultQueue_in - resultQueue_out;
 8002256:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <get_anzFrei_resultQueue+0x3c>)
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <get_anzFrei_resultQueue+0x40>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	71fb      	strb	r3, [r7, #7]
		if (x < 0) x = x + RESULT_QUEUE_SIZE;
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	da03      	bge.n	8002274 <get_anzFrei_resultQueue+0x24>
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	333c      	adds	r3, #60	@ 0x3c
 8002270:	b2db      	uxtb	r3, r3
 8002272:	71fb      	strb	r3, [r7, #7]
		x = RESULT_QUEUE_SIZE - x;
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 800227a:	b2db      	uxtb	r3, r3
 800227c:	71fb      	strb	r3, [r7, #7]
	}
	return x;
 800227e:	79fb      	ldrb	r3, [r7, #7]
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	20000594 	.word	0x20000594
 8002290:	20000595 	.word	0x20000595

08002294 <get_anzBes_resultQueue>:

uint8_t get_anzBes_resultQueue(void)
{	int8_t x;
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
	//ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		x = resultQueue_in - resultQueue_out;
 800229a:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <get_anzBes_resultQueue+0x34>)
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <get_anzBes_resultQueue+0x38>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	71fb      	strb	r3, [r7, #7]
		if (x < 0) x = x + RESULT_QUEUE_SIZE;
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	da03      	bge.n	80022b8 <get_anzBes_resultQueue+0x24>
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	333c      	adds	r3, #60	@ 0x3c
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	71fb      	strb	r3, [r7, #7]
	}
	return x;
 80022b8:	79fb      	ldrb	r3, [r7, #7]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000594 	.word	0x20000594
 80022cc:	20000595 	.word	0x20000595

080022d0 <resultQueue_push>:

uint8_t resultQueue_push (stack_item  sitem)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	463c      	mov	r4, r7
 80022d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp = get_anzFrei_resultQueue();
 80022dc:	f7ff ffb8 	bl	8002250 <get_anzFrei_resultQueue>
 80022e0:	4603      	mov	r3, r0
 80022e2:	75bb      	strb	r3, [r7, #22]

	uint8_t flag =0;  // der Flag bedeutet, ob das Hinfuegen des Commando in Queue erfolgreich ist: 0= Nicht erfolgreich, 1= Erfolgreich
 80022e4:	2300      	movs	r3, #0
 80022e6:	75fb      	strb	r3, [r7, #23]

	if (tmp > 1)
 80022e8:	7dbb      	ldrb	r3, [r7, #22]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d919      	bls.n	8002322 <resultQueue_push+0x52>
	{
		resultQueue[resultQueue_in] = sitem;
 80022ee:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <resultQueue_push+0x60>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	4a10      	ldr	r2, [pc, #64]	@ (8002334 <resultQueue_push+0x64>)
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	4413      	add	r3, r2
 80022f8:	461c      	mov	r4, r3
 80022fa:	463b      	mov	r3, r7
 80022fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		resultQueue_in ++;
 8002302:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <resultQueue_push+0x60>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <resultQueue_push+0x60>)
 800230c:	701a      	strb	r2, [r3, #0]
		if (resultQueue_in >= RESULT_QUEUE_SIZE) resultQueue_in =0;
 800230e:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <resultQueue_push+0x60>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b3b      	cmp	r3, #59	@ 0x3b
 8002314:	d902      	bls.n	800231c <resultQueue_push+0x4c>
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <resultQueue_push+0x60>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
		flag = 1;
 800231c:	2301      	movs	r3, #1
 800231e:	75fb      	strb	r3, [r7, #23]
 8002320:	e001      	b.n	8002326 <resultQueue_push+0x56>
	}
	else
	{
		flag = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	75fb      	strb	r3, [r7, #23]
	};
	return flag;
 8002326:	7dfb      	ldrb	r3, [r7, #23]
}
 8002328:	4618      	mov	r0, r3
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	bd90      	pop	{r4, r7, pc}
 8002330:	20000594 	.word	0x20000594
 8002334:	200001d4 	.word	0x200001d4

08002338 <resultQueue_pop>:

void resultQueue_pop(stack_item *sitem)
{
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	uint8_t tmp =get_anzFrei_resultQueue();
 8002340:	f7ff ff86 	bl	8002250 <get_anzFrei_resultQueue>
 8002344:	4603      	mov	r3, r0
 8002346:	73fb      	strb	r3, [r7, #15]

	if (tmp < RESULT_QUEUE_SIZE )
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	2b3b      	cmp	r3, #59	@ 0x3b
 800234c:	d817      	bhi.n	800237e <resultQueue_pop+0x46>
	{
		*sitem = resultQueue[resultQueue_out];
 800234e:	4b0e      	ldr	r3, [pc, #56]	@ (8002388 <resultQueue_pop+0x50>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4a0d      	ldr	r2, [pc, #52]	@ (800238c <resultQueue_pop+0x54>)
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	4413      	add	r3, r2
 800235a:	460c      	mov	r4, r1
 800235c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800235e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		resultQueue_out ++;
 8002362:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <resultQueue_pop+0x50>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b07      	ldr	r3, [pc, #28]	@ (8002388 <resultQueue_pop+0x50>)
 800236c:	701a      	strb	r2, [r3, #0]
		if (resultQueue_out >= RESULT_QUEUE_SIZE) resultQueue_out = 0;
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <resultQueue_pop+0x50>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b3b      	cmp	r3, #59	@ 0x3b
 8002374:	d903      	bls.n	800237e <resultQueue_pop+0x46>
 8002376:	4b04      	ldr	r3, [pc, #16]	@ (8002388 <resultQueue_pop+0x50>)
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
	};
	return;
 800237c:	bf00      	nop
 800237e:	bf00      	nop
}
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bd90      	pop	{r4, r7, pc}
 8002386:	bf00      	nop
 8002388:	20000595 	.word	0x20000595
 800238c:	200001d4 	.word	0x200001d4

08002390 <result_get_sero>:

void result_get_sero(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
	stack_item cmd_tmp;
	uint8_t verbose_tmp = remote_ascii_verbose();
 8002396:	f7ff ff31 	bl	80021fc <remote_ascii_verbose>
 800239a:	4603      	mov	r3, r0
 800239c:	75fb      	strb	r3, [r7, #23]
	uint8_t crlf_tmp = remote_ascii_crlf();
 800239e:	f7ff ff39 	bl	8002214 <remote_ascii_crlf>
 80023a2:	4603      	mov	r3, r0
 80023a4:	75bb      	strb	r3, [r7, #22]

	while (get_anzBes_resultQueue() > 0 )
 80023a6:	e015      	b.n	80023d4 <result_get_sero+0x44>
	{
		resultQueue_pop(&cmd_tmp);
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ffc4 	bl	8002338 <resultQueue_pop>
		//uart0_puts("result");
		//uart0_puti(cmd_tmp.cmd_index);
		//uart0_puti(cmd_tmp.cmd_ack);
		//uart0_puti(cmd_tmp.parameter);
		switch (cmd_tmp.cmd_sender)
 80023b0:	793b      	ldrb	r3, [r7, #4]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d008      	beq.n	80023c8 <result_get_sero+0x38>
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d10b      	bne.n	80023d2 <result_get_sero+0x42>
			//case Q_TOUCHPANEL:
				//output_touch_result(&cmd_tmp);
			//	break;
			case Q_RS232_ASCII:
				//uart0_puts("ASC");
				output_ascii_result(verbose_tmp, crlf_tmp, &cmd_tmp);
 80023ba:	1d3a      	adds	r2, r7, #4
 80023bc:	7db9      	ldrb	r1, [r7, #22]
 80023be:	7dfb      	ldrb	r3, [r7, #23]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fe7d 	bl	80020c0 <output_ascii_result>
				break;
 80023c6:	e005      	b.n	80023d4 <result_get_sero+0x44>
			case Q_RS232_BINARY:
				output_binary_result(&cmd_tmp);
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff febc 	bl	8002148 <output_binary_result>
				break;
 80023d0:	e000      	b.n	80023d4 <result_get_sero+0x44>
//				output_userport_result(&cmd_tmp);
//			case Q_ZENTRALE:
//				zentrale_match_get_sero(&cmd_tmp);
//				break;
			default:
				break;
 80023d2:	bf00      	nop
	while (get_anzBes_resultQueue() > 0 )
 80023d4:	f7ff ff5e 	bl	8002294 <get_anzBes_resultQueue>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1e4      	bne.n	80023a8 <result_get_sero+0x18>
		};
	};

	return;
 80023de:	bf00      	nop
}
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <MX_SPI1_Init+0x74>)
 80023ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002460 <MX_SPI1_Init+0x78>)
 80023f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023f2:	4b1a      	ldr	r3, [pc, #104]	@ (800245c <MX_SPI1_Init+0x74>)
 80023f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023fa:	4b18      	ldr	r3, [pc, #96]	@ (800245c <MX_SPI1_Init+0x74>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002400:	4b16      	ldr	r3, [pc, #88]	@ (800245c <MX_SPI1_Init+0x74>)
 8002402:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002406:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002408:	4b14      	ldr	r3, [pc, #80]	@ (800245c <MX_SPI1_Init+0x74>)
 800240a:	2202      	movs	r2, #2
 800240c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800240e:	4b13      	ldr	r3, [pc, #76]	@ (800245c <MX_SPI1_Init+0x74>)
 8002410:	2200      	movs	r2, #0
 8002412:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002414:	4b11      	ldr	r3, [pc, #68]	@ (800245c <MX_SPI1_Init+0x74>)
 8002416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800241a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800241c:	4b0f      	ldr	r3, [pc, #60]	@ (800245c <MX_SPI1_Init+0x74>)
 800241e:	2220      	movs	r2, #32
 8002420:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002422:	4b0e      	ldr	r3, [pc, #56]	@ (800245c <MX_SPI1_Init+0x74>)
 8002424:	2200      	movs	r2, #0
 8002426:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <MX_SPI1_Init+0x74>)
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800242e:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <MX_SPI1_Init+0x74>)
 8002430:	2200      	movs	r2, #0
 8002432:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002434:	4b09      	ldr	r3, [pc, #36]	@ (800245c <MX_SPI1_Init+0x74>)
 8002436:	2207      	movs	r2, #7
 8002438:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800243a:	4b08      	ldr	r3, [pc, #32]	@ (800245c <MX_SPI1_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002440:	4b06      	ldr	r3, [pc, #24]	@ (800245c <MX_SPI1_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002446:	4805      	ldr	r0, [pc, #20]	@ (800245c <MX_SPI1_Init+0x74>)
 8002448:	f004 f94a 	bl	80066e0 <HAL_SPI_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002452:	f7fe fde2 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000598 	.word	0x20000598
 8002460:	40013000 	.word	0x40013000

08002464 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	@ 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a17      	ldr	r2, [pc, #92]	@ (80024e0 <HAL_SPI_MspInit+0x7c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d128      	bne.n	80024d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002486:	4b17      	ldr	r3, [pc, #92]	@ (80024e4 <HAL_SPI_MspInit+0x80>)
 8002488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248a:	4a16      	ldr	r2, [pc, #88]	@ (80024e4 <HAL_SPI_MspInit+0x80>)
 800248c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002490:	6613      	str	r3, [r2, #96]	@ 0x60
 8002492:	4b14      	ldr	r3, [pc, #80]	@ (80024e4 <HAL_SPI_MspInit+0x80>)
 8002494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002496:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <HAL_SPI_MspInit+0x80>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a2:	4a10      	ldr	r2, [pc, #64]	@ (80024e4 <HAL_SPI_MspInit+0x80>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024aa:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <HAL_SPI_MspInit+0x80>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024b6:	23e0      	movs	r3, #224	@ 0xe0
 80024b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024c6:	2305      	movs	r3, #5
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024d4:	f002 ff08 	bl	80052e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024d8:	bf00      	nop
 80024da:	3728      	adds	r7, #40	@ 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40013000 	.word	0x40013000
 80024e4:	40021000 	.word	0x40021000

080024e8 <stacks_init>:
uint8_t zstackindex_list_act_get(void);
uint8_t mcstackindex_list_act_get(void);

//--- FUNKTIONSDEFINITIONS --------------------------------------------------------------------------------------------------
void stacks_init(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	71fb      	strb	r3, [r7, #7]

	zstackindex_list_act = Z_STACK_SIZE -1;        //alle Stackindexe sind frei
 80024f2:	4b20      	ldr	r3, [pc, #128]	@ (8002574 <stacks_init+0x8c>)
 80024f4:	221d      	movs	r2, #29
 80024f6:	701a      	strb	r2, [r3, #0]
	mcstackindex_list_act = MC_STACK_SIZE -1;
 80024f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002578 <stacks_init+0x90>)
 80024fa:	2213      	movs	r2, #19
 80024fc:	701a      	strb	r2, [r3, #0]
	mcstack_rest_length = MC_STACK_SIZE - MCSTACK_ZENTRALE_RESERVATION;
 80024fe:	4b1f      	ldr	r3, [pc, #124]	@ (800257c <stacks_init+0x94>)
 8002500:	2212      	movs	r2, #18
 8002502:	701a      	strb	r2, [r3, #0]


	for (i = 0; i < Z_STACK_SIZE; i++)
 8002504:	2300      	movs	r3, #0
 8002506:	71fb      	strb	r3, [r7, #7]
 8002508:	e011      	b.n	800252e <stacks_init+0x46>
	{
		zentrale_stack[i].next = NONEXT;
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	4a1c      	ldr	r2, [pc, #112]	@ (8002580 <stacks_init+0x98>)
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	4413      	add	r3, r2
 8002512:	330c      	adds	r3, #12
 8002514:	22ff      	movs	r2, #255	@ 0xff
 8002516:	701a      	strb	r2, [r3, #0]
		zstackindex_list[i] = zstackindex_list_act - i;   //alle freien Stackindexe sind abwärts in die Stackindex-Liste(aufwärts) gelegt.
 8002518:	4b16      	ldr	r3, [pc, #88]	@ (8002574 <stacks_init+0x8c>)
 800251a:	7819      	ldrb	r1, [r3, #0]
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	79fa      	ldrb	r2, [r7, #7]
 8002520:	1a8a      	subs	r2, r1, r2
 8002522:	b2d1      	uxtb	r1, r2
 8002524:	4a17      	ldr	r2, [pc, #92]	@ (8002584 <stacks_init+0x9c>)
 8002526:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < Z_STACK_SIZE; i++)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	3301      	adds	r3, #1
 800252c:	71fb      	strb	r3, [r7, #7]
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	2b1d      	cmp	r3, #29
 8002532:	d9ea      	bls.n	800250a <stacks_init+0x22>
	};

	for (i = 0; i < MC_STACK_SIZE; i++)
 8002534:	2300      	movs	r3, #0
 8002536:	71fb      	strb	r3, [r7, #7]
 8002538:	e011      	b.n	800255e <stacks_init+0x76>
	{
		mc_stack[i].next = NONEXT;
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	4a12      	ldr	r2, [pc, #72]	@ (8002588 <stacks_init+0xa0>)
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	4413      	add	r3, r2
 8002542:	330c      	adds	r3, #12
 8002544:	22ff      	movs	r2, #255	@ 0xff
 8002546:	701a      	strb	r2, [r3, #0]
		mcstackindex_list[i] = mcstackindex_list_act - i;
 8002548:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <stacks_init+0x90>)
 800254a:	7819      	ldrb	r1, [r3, #0]
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	79fa      	ldrb	r2, [r7, #7]
 8002550:	1a8a      	subs	r2, r1, r2
 8002552:	b2d1      	uxtb	r1, r2
 8002554:	4a0d      	ldr	r2, [pc, #52]	@ (800258c <stacks_init+0xa4>)
 8002556:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < MC_STACK_SIZE; i++)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	3301      	adds	r3, #1
 800255c:	71fb      	strb	r3, [r7, #7]
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	2b13      	cmp	r3, #19
 8002562:	d9ea      	bls.n	800253a <stacks_init+0x52>
	};
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000950 	.word	0x20000950
 8002578:	20000951 	.word	0x20000951
 800257c:	20000952 	.word	0x20000952
 8002580:	200005fc 	.word	0x200005fc
 8002584:	2000091c 	.word	0x2000091c
 8002588:	200007dc 	.word	0x200007dc
 800258c:	2000093c 	.word	0x2000093c

08002590 <stacks_insert_cmd>:

uint8_t stacks_insert_cmd(stack_item stack[], uint8_t stack_length, uint8_t stackindex_list[], stack_item stack_data, uint8_t *stackindexlist_act, uint8_t *stackindex)
{
 8002590:	b082      	sub	sp, #8
 8002592:	b490      	push	{r4, r7}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
 800259e:	460b      	mov	r3, r1
 80025a0:	72fb      	strb	r3, [r7, #11]
	uint8_t index_tmp;
	uint8_t flag;

	if ( (*stackindexlist_act >= 0)  && (*stackindexlist_act < stack_length) )          //wenn es einen freien Platz gibt,
 80025a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	7afa      	ldrb	r2, [r7, #11]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d923      	bls.n	80025f4 <stacks_insert_cmd+0x64>
	{
		index_tmp = *stackindexlist_act;
 80025ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	75bb      	strb	r3, [r7, #22]
		*stackindex = stackindex_list[index_tmp];                    //fügt einen Element in den Stack ein
 80025b2:	7dbb      	ldrb	r3, [r7, #22]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025bc:	701a      	strb	r2, [r3, #0]
		stack[*stackindex] = stack_data;
 80025be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	461c      	mov	r4, r3
 80025ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if (index_tmp == 0 )                                     //d.h. es keine leer Platz mehr im Stack nach dem Einfügen gibt.
 80025d4:	7dbb      	ldrb	r3, [r7, #22]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d103      	bne.n	80025e2 <stacks_insert_cmd+0x52>
		{
			*stackindexlist_act = NONEXT;           //NONEXT bezeichnet: der Stack ist voll, weil die negative Zahl nicht erlaubt ist.
 80025da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025dc:	22ff      	movs	r2, #255	@ 0xff
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	e005      	b.n	80025ee <stacks_insert_cmd+0x5e>
		}
		else
		{
			index_tmp -=1;
 80025e2:	7dbb      	ldrb	r3, [r7, #22]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	75bb      	strb	r3, [r7, #22]
			*stackindexlist_act = index_tmp;
 80025e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ea:	7dba      	ldrb	r2, [r7, #22]
 80025ec:	701a      	strb	r2, [r3, #0]
		};
		flag = STACK_INTSERT_OK;
 80025ee:	2314      	movs	r3, #20
 80025f0:	75fb      	strb	r3, [r7, #23]
 80025f2:	e001      	b.n	80025f8 <stacks_insert_cmd+0x68>
	}
	else //Falls der Stack voll ist,
	{
		flag = CMR_UNITBUSY;
 80025f4:	2309      	movs	r3, #9
 80025f6:	75fb      	strb	r3, [r7, #23]
	};

	return flag;
 80025f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc90      	pop	{r4, r7}
 8002602:	b002      	add	sp, #8
 8002604:	4770      	bx	lr
	...

08002608 <z_mc_stack_insert>:

uint8_t z_mc_stack_insert(stack_item stack_data, uint8_t mc_flg)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b091      	sub	sp, #68	@ 0x44
 800260c:	af06      	add	r7, sp, #24
 800260e:	463c      	mov	r4, r7
 8002610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t flag = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t push_result = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t prio_pushflg = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t stack_index = NONEXT;
 8002626:	23ff      	movs	r3, #255	@ 0xff
 8002628:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t mc_push_enable = 0;  //=0: es ist nicht erlaubt, die Befehlen in den MC- Stack einlegen; > 1: es ist erlaubt; =1: die Befehlen aus der Zentrale;
 800262c:	2300      	movs	r3, #0
 800262e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	//=2: aus der anderen Quellen.

	stack_item stack_tmp;

	if (mc_flg)   // d.h. der Befehl ist für den MC
 8002632:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002636:	2b00      	cmp	r3, #0
 8002638:	d067      	beq.n	800270a <z_mc_stack_insert+0x102>
	{
		if (stack_data.cmd_sender == Q_ZENTRALE)
 800263a:	783b      	ldrb	r3, [r7, #0]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d103      	bne.n	8002648 <z_mc_stack_insert+0x40>
		{
			mc_push_enable = 1;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002646:	e00e      	b.n	8002666 <z_mc_stack_insert+0x5e>
		}
		else
		{
			if (mcstack_rest_length  > 0)
 8002648:	4b51      	ldr	r3, [pc, #324]	@ (8002790 <z_mc_stack_insert+0x188>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <z_mc_stack_insert+0x52>
			{
				mc_push_enable = 2;
 8002652:	2302      	movs	r3, #2
 8002654:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002658:	e005      	b.n	8002666 <z_mc_stack_insert+0x5e>
			}
			else
			{
				mc_push_enable = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				flag = CMR_UNITBUSY;
 8002660:	2309      	movs	r3, #9
 8002662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			};
		};

		if (mc_push_enable > 0)
 8002666:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8089 	beq.w	8002782 <z_mc_stack_insert+0x17a>
		{
			push_result = stacks_insert_cmd(mc_stack, MC_STACK_SIZE, mcstackindex_list, stack_data, &mcstackindex_list_act, &stack_index);
 8002670:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8002674:	9304      	str	r3, [sp, #16]
 8002676:	4b47      	ldr	r3, [pc, #284]	@ (8002794 <z_mc_stack_insert+0x18c>)
 8002678:	9303      	str	r3, [sp, #12]
 800267a:	466c      	mov	r4, sp
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	4a43      	ldr	r2, [pc, #268]	@ (8002798 <z_mc_stack_insert+0x190>)
 800268a:	2114      	movs	r1, #20
 800268c:	4843      	ldr	r0, [pc, #268]	@ (800279c <z_mc_stack_insert+0x194>)
 800268e:	f7ff ff7f 	bl	8002590 <stacks_insert_cmd>
 8002692:	4603      	mov	r3, r0
 8002694:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			if (push_result == STACK_INTSERT_OK)
 8002698:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800269c:	2b14      	cmp	r3, #20
 800269e:	d130      	bne.n	8002702 <z_mc_stack_insert+0xfa>
			{
				prio_pushflg = priolist_push(mc_priolist, MC_STACK_SIZE, mc_priolevel_header,  &mcpriolist_firstunused_index, stack_index, stack_data.prio);
 80026a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026a4:	7b7a      	ldrb	r2, [r7, #13]
 80026a6:	9201      	str	r2, [sp, #4]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	4b3d      	ldr	r3, [pc, #244]	@ (80027a0 <z_mc_stack_insert+0x198>)
 80026ac:	4a3d      	ldr	r2, [pc, #244]	@ (80027a4 <z_mc_stack_insert+0x19c>)
 80026ae:	2114      	movs	r1, #20
 80026b0:	483d      	ldr	r0, [pc, #244]	@ (80027a8 <z_mc_stack_insert+0x1a0>)
 80026b2:	f7fe fcb8 	bl	8001026 <priolist_push>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				if (prio_pushflg )
 80026bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <z_mc_stack_insert+0xe4>
				{
					flag = STACK_CMDINSTACK;
 80026c4:	2311      	movs	r3, #17
 80026c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					if (mc_push_enable == 2)
 80026ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d157      	bne.n	8002782 <z_mc_stack_insert+0x17a>
					{
						if (mcstack_rest_length > 0)
 80026d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002790 <z_mc_stack_insert+0x188>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d052      	beq.n	8002782 <z_mc_stack_insert+0x17a>
						{
							mcstack_rest_length -=1;                   //die Plätze für die Befehle aus den anderen Quelle ausser der Zentrale wird einen weniger sein.
 80026dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002790 <z_mc_stack_insert+0x188>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002790 <z_mc_stack_insert+0x188>)
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e04a      	b.n	8002782 <z_mc_stack_insert+0x17a>

					};
				}
				else
				{
					mcstack_pop(&stack_tmp, stack_data.prio);
 80026ec:	7b7a      	ldrb	r2, [r7, #13]
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f87f 	bl	80027f8 <mcstack_pop>
					flag = STACK_PRIOLIST_ERROR;
 80026fa:	2313      	movs	r3, #19
 80026fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002700:	e03f      	b.n	8002782 <z_mc_stack_insert+0x17a>
				}
			}
			else
			{
				flag = CMR_UNITBUSY;
 8002702:	2309      	movs	r3, #9
 8002704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002708:	e03b      	b.n	8002782 <z_mc_stack_insert+0x17a>
		};
	}
	else //d.h. der Befehl wird an die Zentrale gesendet
	{

		push_result = stacks_insert_cmd(zentrale_stack, Z_STACK_SIZE, zstackindex_list, stack_data, &zstackindex_list_act, &stack_index);
 800270a:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800270e:	9304      	str	r3, [sp, #16]
 8002710:	4b26      	ldr	r3, [pc, #152]	@ (80027ac <z_mc_stack_insert+0x1a4>)
 8002712:	9303      	str	r3, [sp, #12]
 8002714:	466c      	mov	r4, sp
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800271c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4a23      	ldr	r2, [pc, #140]	@ (80027b0 <z_mc_stack_insert+0x1a8>)
 8002724:	211e      	movs	r1, #30
 8002726:	4823      	ldr	r0, [pc, #140]	@ (80027b4 <z_mc_stack_insert+0x1ac>)
 8002728:	f7ff ff32 	bl	8002590 <stacks_insert_cmd>
 800272c:	4603      	mov	r3, r0
 800272e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		if (push_result == STACK_INTSERT_OK)
 8002732:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002736:	2b14      	cmp	r3, #20
 8002738:	d120      	bne.n	800277c <z_mc_stack_insert+0x174>
		{
			prio_pushflg = priolist_push(z_priolist, Z_STACK_SIZE, z_priolevel_header, &zpriolist_firstunused_index, stack_index, stack_data.prio);
 800273a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800273e:	7b7a      	ldrb	r2, [r7, #13]
 8002740:	9201      	str	r2, [sp, #4]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	4b1c      	ldr	r3, [pc, #112]	@ (80027b8 <z_mc_stack_insert+0x1b0>)
 8002746:	4a1d      	ldr	r2, [pc, #116]	@ (80027bc <z_mc_stack_insert+0x1b4>)
 8002748:	211e      	movs	r1, #30
 800274a:	481d      	ldr	r0, [pc, #116]	@ (80027c0 <z_mc_stack_insert+0x1b8>)
 800274c:	f7fe fc6b 	bl	8001026 <priolist_push>
 8002750:	4603      	mov	r3, r0
 8002752:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			if (prio_pushflg )
 8002756:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <z_mc_stack_insert+0x15e>
			{
				flag = STACK_CMDINSTACK;
 800275e:	2311      	movs	r3, #17
 8002760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002764:	e00d      	b.n	8002782 <z_mc_stack_insert+0x17a>
			}
			else
			{
				zstack_pop(&stack_tmp, stack_data.prio);
 8002766:	7b7a      	ldrb	r2, [r7, #13]
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f898 	bl	80028a4 <zstack_pop>
				flag = STACK_PRIOLIST_ERROR;
 8002774:	2313      	movs	r3, #19
 8002776:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800277a:	e002      	b.n	8002782 <z_mc_stack_insert+0x17a>
			} ;
		}
		else
		{

			flag = CMR_UNITBUSY;
 800277c:	2309      	movs	r3, #9
 800277e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		};
	};
	return flag;
 8002782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002786:	4618      	mov	r0, r3
 8002788:	372c      	adds	r7, #44	@ 0x2c
 800278a:	46bd      	mov	sp, r7
 800278c:	bd90      	pop	{r4, r7, pc}
 800278e:	bf00      	nop
 8002790:	20000952 	.word	0x20000952
 8002794:	20000951 	.word	0x20000951
 8002798:	2000093c 	.word	0x2000093c
 800279c:	200007dc 	.word	0x200007dc
 80027a0:	20000180 	.word	0x20000180
 80027a4:	2000017c 	.word	0x2000017c
 80027a8:	20000150 	.word	0x20000150
 80027ac:	20000950 	.word	0x20000950
 80027b0:	2000091c 	.word	0x2000091c
 80027b4:	200005fc 	.word	0x200005fc
 80027b8:	2000017f 	.word	0x2000017f
 80027bc:	20000178 	.word	0x20000178
 80027c0:	20000114 	.word	0x20000114

080027c4 <stack_insert_sero>:



uint8_t stack_insert_sero(stack_item stack_data)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b089      	sub	sp, #36	@ 0x24
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	463c      	mov	r4, r7
 80027cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t flag = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	75fb      	strb	r3, [r7, #23]
	uint8_t mc_flg = 0;                            //bezeichnet, dass der Befehl für die Zentrale ist, wenn es 0 ist; für den MC , wenn es 1 ist.
 80027d4:	2300      	movs	r3, #0
 80027d6:	75bb      	strb	r3, [r7, #22]

	//hier gibt es nur die Befehle für die Zentrale,

	mc_flg = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	75bb      	strb	r3, [r7, #22]
	flag = z_mc_stack_insert(stack_data, mc_flg);
 80027dc:	7dbb      	ldrb	r3, [r7, #22]
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	463b      	mov	r3, r7
 80027e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e4:	f7ff ff10 	bl	8002608 <z_mc_stack_insert>
 80027e8:	4603      	mov	r3, r0
 80027ea:	75fb      	strb	r3, [r7, #23]
	return flag;
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd90      	pop	{r4, r7, pc}
	...

080027f8 <mcstack_pop>:


uint8_t mcstack_pop(stack_item *sitem, uint8_t priolevel)
{
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	70fb      	strb	r3, [r7, #3]
	uint8_t flag = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	73fb      	strb	r3, [r7, #15]
	uint8_t sindex;

	sindex = priolist_pop(mc_priolist, mc_priolevel_header, &mcpriolist_firstunused_index, priolevel);
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	4a1f      	ldr	r2, [pc, #124]	@ (8002888 <mcstack_pop+0x90>)
 800280c:	491f      	ldr	r1, [pc, #124]	@ (800288c <mcstack_pop+0x94>)
 800280e:	4820      	ldr	r0, [pc, #128]	@ (8002890 <mcstack_pop+0x98>)
 8002810:	f7fe fcb5 	bl	800117e <priolist_pop>
 8002814:	4603      	mov	r3, r0
 8002816:	73bb      	strb	r3, [r7, #14]
	if (sindex == NONEXT)  // die zu der Priorität entsprechende MCStacklist ist leer
 8002818:	7bbb      	ldrb	r3, [r7, #14]
 800281a:	2bff      	cmp	r3, #255	@ 0xff
 800281c:	d102      	bne.n	8002824 <mcstack_pop+0x2c>
	{
		flag = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]
 8002822:	e02c      	b.n	800287e <mcstack_pop+0x86>

	}
	else
	{

			*sitem = mc_stack[sindex];
 8002824:	7bbb      	ldrb	r3, [r7, #14]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4a1a      	ldr	r2, [pc, #104]	@ (8002894 <mcstack_pop+0x9c>)
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	4413      	add	r3, r2
 800282e:	460c      	mov	r4, r1
 8002830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if (mcstackindex_list_act == NONEXT)
 8002836:	4b18      	ldr	r3, [pc, #96]	@ (8002898 <mcstack_pop+0xa0>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2bff      	cmp	r3, #255	@ 0xff
 800283c:	d103      	bne.n	8002846 <mcstack_pop+0x4e>
			{
				mcstackindex_list_act =0;
 800283e:	4b16      	ldr	r3, [pc, #88]	@ (8002898 <mcstack_pop+0xa0>)
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	e005      	b.n	8002852 <mcstack_pop+0x5a>

			}
			else
			{
				mcstackindex_list_act +=1;
 8002846:	4b14      	ldr	r3, [pc, #80]	@ (8002898 <mcstack_pop+0xa0>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	3301      	adds	r3, #1
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <mcstack_pop+0xa0>)
 8002850:	701a      	strb	r2, [r3, #0]

			};

			mcstackindex_list[mcstackindex_list_act] = sindex;
 8002852:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <mcstack_pop+0xa0>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	4619      	mov	r1, r3
 8002858:	4a10      	ldr	r2, [pc, #64]	@ (800289c <mcstack_pop+0xa4>)
 800285a:	7bbb      	ldrb	r3, [r7, #14]
 800285c:	5453      	strb	r3, [r2, r1]

			if (mc_stack[sindex].cmd_sender != Q_ZENTRALE)
 800285e:	7bbb      	ldrb	r3, [r7, #14]
 8002860:	4a0c      	ldr	r2, [pc, #48]	@ (8002894 <mcstack_pop+0x9c>)
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	4413      	add	r3, r2
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d006      	beq.n	800287a <mcstack_pop+0x82>
			{
				mcstack_rest_length += 1;
 800286c:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <mcstack_pop+0xa8>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	3301      	adds	r3, #1
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <mcstack_pop+0xa8>)
 8002878:	701a      	strb	r2, [r3, #0]
			};

			flag = 1;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]

	};
	return flag;
 800287e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}
 8002888:	20000180 	.word	0x20000180
 800288c:	2000017c 	.word	0x2000017c
 8002890:	20000150 	.word	0x20000150
 8002894:	200007dc 	.word	0x200007dc
 8002898:	20000951 	.word	0x20000951
 800289c:	2000093c 	.word	0x2000093c
 80028a0:	20000952 	.word	0x20000952

080028a4 <zstack_pop>:

uint8_t zstack_pop(stack_item *sitem, uint8_t priolevel)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	70fb      	strb	r3, [r7, #3]
	uint8_t flag = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
	uint8_t sindex;
	//uint8_t indexlist_tmp;

	sindex =  priolist_pop(z_priolist, z_priolevel_header, &zpriolist_firstunused_index, priolevel);
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	4a18      	ldr	r2, [pc, #96]	@ (8002918 <zstack_pop+0x74>)
 80028b8:	4918      	ldr	r1, [pc, #96]	@ (800291c <zstack_pop+0x78>)
 80028ba:	4819      	ldr	r0, [pc, #100]	@ (8002920 <zstack_pop+0x7c>)
 80028bc:	f7fe fc5f 	bl	800117e <priolist_pop>
 80028c0:	4603      	mov	r3, r0
 80028c2:	73bb      	strb	r3, [r7, #14]

	if (sindex == NONEXT)  // die zu der Priorität entsprechende MCStacklist ist leer
 80028c4:	7bbb      	ldrb	r3, [r7, #14]
 80028c6:	2bff      	cmp	r3, #255	@ 0xff
 80028c8:	d102      	bne.n	80028d0 <zstack_pop+0x2c>
	{
		flag = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
 80028ce:	e01e      	b.n	800290e <zstack_pop+0x6a>

	}
	else
	{
		*sitem = zentrale_stack[sindex];
 80028d0:	7bbb      	ldrb	r3, [r7, #14]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4a13      	ldr	r2, [pc, #76]	@ (8002924 <zstack_pop+0x80>)
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4413      	add	r3, r2
 80028da:	460c      	mov	r4, r1
 80028dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if (zstackindex_list_act == NONEXT)
 80028e2:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <zstack_pop+0x84>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2bff      	cmp	r3, #255	@ 0xff
 80028e8:	d103      	bne.n	80028f2 <zstack_pop+0x4e>
		{
			zstackindex_list_act = 0;
 80028ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002928 <zstack_pop+0x84>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	e005      	b.n	80028fe <zstack_pop+0x5a>
		}
		else
		{
			zstackindex_list_act +=1;
 80028f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <zstack_pop+0x84>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <zstack_pop+0x84>)
 80028fc:	701a      	strb	r2, [r3, #0]
		};
		zstackindex_list[zstackindex_list_act] = sindex;
 80028fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <zstack_pop+0x84>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	4619      	mov	r1, r3
 8002904:	4a09      	ldr	r2, [pc, #36]	@ (800292c <zstack_pop+0x88>)
 8002906:	7bbb      	ldrb	r3, [r7, #14]
 8002908:	5453      	strb	r3, [r2, r1]

		flag = 1;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]

	};
	return flag;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	bd90      	pop	{r4, r7, pc}
 8002918:	2000017f 	.word	0x2000017f
 800291c:	20000178 	.word	0x20000178
 8002920:	20000114 	.word	0x20000114
 8002924:	200005fc 	.word	0x200005fc
 8002928:	20000950 	.word	0x20000950
 800292c:	2000091c 	.word	0x2000091c

08002930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002936:	4b0f      	ldr	r3, [pc, #60]	@ (8002974 <HAL_MspInit+0x44>)
 8002938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293a:	4a0e      	ldr	r2, [pc, #56]	@ (8002974 <HAL_MspInit+0x44>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6613      	str	r3, [r2, #96]	@ 0x60
 8002942:	4b0c      	ldr	r3, [pc, #48]	@ (8002974 <HAL_MspInit+0x44>)
 8002944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	607b      	str	r3, [r7, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <HAL_MspInit+0x44>)
 8002950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002952:	4a08      	ldr	r2, [pc, #32]	@ (8002974 <HAL_MspInit+0x44>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002958:	6593      	str	r3, [r2, #88]	@ 0x58
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_MspInit+0x44>)
 800295c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002966:	f002 ff2f 	bl	80057c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000

08002978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800297c:	bf00      	nop
 800297e:	e7fd      	b.n	800297c <NMI_Handler+0x4>

08002980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	bf00      	nop
 800298e:	e7fd      	b.n	800298c <MemManage_Handler+0x4>

08002990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <BusFault_Handler+0x4>

08002998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <UsageFault_Handler+0x4>

080029a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ce:	f001 fb37 	bl	8004040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029e0:	4a14      	ldr	r2, [pc, #80]	@ (8002a34 <_sbrk+0x5c>)
 80029e2:	4b15      	ldr	r3, [pc, #84]	@ (8002a38 <_sbrk+0x60>)
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029ec:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <_sbrk+0x64>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029f4:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <_sbrk+0x64>)
 80029f6:	4a12      	ldr	r2, [pc, #72]	@ (8002a40 <_sbrk+0x68>)
 80029f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <_sbrk+0x64>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d207      	bcs.n	8002a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a08:	f006 faf8 	bl	8008ffc <__errno>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	220c      	movs	r2, #12
 8002a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295
 8002a16:	e009      	b.n	8002a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a18:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <_sbrk+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a1e:	4b07      	ldr	r3, [pc, #28]	@ (8002a3c <_sbrk+0x64>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	4a05      	ldr	r2, [pc, #20]	@ (8002a3c <_sbrk+0x64>)
 8002a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20020000 	.word	0x20020000
 8002a38:	00000400 	.word	0x00000400
 8002a3c:	20000954 	.word	0x20000954
 8002a40:	20001428 	.word	0x20001428

08002a44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a48:	4b06      	ldr	r3, [pc, #24]	@ (8002a64 <SystemInit+0x20>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	4a05      	ldr	r2, [pc, #20]	@ (8002a64 <SystemInit+0x20>)
 8002a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08c      	sub	sp, #48	@ 0x30
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a6e:	f107 0320 	add.w	r3, r7, #32
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	609a      	str	r2, [r3, #8]
 8002a7a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8c:	463b      	mov	r3, r7
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a96:	4b27      	ldr	r3, [pc, #156]	@ (8002b34 <MX_TIM1_Init+0xcc>)
 8002a98:	4a27      	ldr	r2, [pc, #156]	@ (8002b38 <MX_TIM1_Init+0xd0>)
 8002a9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8002a9c:	4b25      	ldr	r3, [pc, #148]	@ (8002b34 <MX_TIM1_Init+0xcc>)
 8002a9e:	22a0      	movs	r2, #160	@ 0xa0
 8002aa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa2:	4b24      	ldr	r3, [pc, #144]	@ (8002b34 <MX_TIM1_Init+0xcc>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59;
 8002aa8:	4b22      	ldr	r3, [pc, #136]	@ (8002b34 <MX_TIM1_Init+0xcc>)
 8002aaa:	223b      	movs	r2, #59	@ 0x3b
 8002aac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aae:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <MX_TIM1_Init+0xcc>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b34 <MX_TIM1_Init+0xcc>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aba:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <MX_TIM1_Init+0xcc>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ac0:	481c      	ldr	r0, [pc, #112]	@ (8002b34 <MX_TIM1_Init+0xcc>)
 8002ac2:	f003 feb8 	bl	8006836 <HAL_TIM_Base_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002acc:	f7fe faa5 	bl	800101a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ad0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ad4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ad6:	f107 0320 	add.w	r3, r7, #32
 8002ada:	4619      	mov	r1, r3
 8002adc:	4815      	ldr	r0, [pc, #84]	@ (8002b34 <MX_TIM1_Init+0xcc>)
 8002ade:	f003 ff01 	bl	80068e4 <HAL_TIM_ConfigClockSource>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002ae8:	f7fe fa97 	bl	800101a <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002af4:	f107 030c 	add.w	r3, r7, #12
 8002af8:	4619      	mov	r1, r3
 8002afa:	480e      	ldr	r0, [pc, #56]	@ (8002b34 <MX_TIM1_Init+0xcc>)
 8002afc:	f003 fffe 	bl	8006afc <HAL_TIM_SlaveConfigSynchro>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002b06:	f7fe fa88 	bl	800101a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b16:	463b      	mov	r3, r7
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4806      	ldr	r0, [pc, #24]	@ (8002b34 <MX_TIM1_Init+0xcc>)
 8002b1c:	f004 fa56 	bl	8006fcc <HAL_TIMEx_MasterConfigSynchronization>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002b26:	f7fe fa78 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b2a:	bf00      	nop
 8002b2c:	3730      	adds	r7, #48	@ 0x30
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000958 	.word	0x20000958
 8002b38:	40012c00 	.word	0x40012c00

08002b3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <HAL_TIM_Base_MspInit+0x38>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d10b      	bne.n	8002b66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <HAL_TIM_Base_MspInit+0x3c>)
 8002b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b52:	4a09      	ldr	r2, [pc, #36]	@ (8002b78 <HAL_TIM_Base_MspInit+0x3c>)
 8002b54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b58:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b5a:	4b07      	ldr	r3, [pc, #28]	@ (8002b78 <HAL_TIM_Base_MspInit+0x3c>)
 8002b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	40021000 	.word	0x40021000

08002b7c <set_ct_hbeat>:
    else return 0;
}

// HEARTBEAT Stoppuhr setzen
void set_ct_hbeat(uint16_t ct_hbeatval)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	80fb      	strh	r3, [r7, #6]
    ct_hbeat = ct_hbeatval;
 8002b86:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <set_ct_hbeat+0x1c>)
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	8013      	strh	r3, [r2, #0]

}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	200009a4 	.word	0x200009a4

08002b9c <ct_hbeat_null>:

// HEARTBEAT Stoppuhr abfragen
uint8_t ct_hbeat_null(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_hbeat;
 8002ba2:	4b07      	ldr	r3, [pc, #28]	@ (8002bc0 <ct_hbeat_null+0x24>)
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 8002ba8:	88fb      	ldrh	r3, [r7, #6]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <ct_hbeat_null+0x16>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <ct_hbeat_null+0x18>
    else return 0;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	200009a4 	.word	0x200009a4

08002bc4 <ct_init_null>:

}

// INIT Stoppuhr abfragen
uint8_t ct_init_null(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_init;
 8002bca:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <ct_init_null+0x24>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <ct_init_null+0x16>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <ct_init_null+0x18>
    else return 0;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	200009a6 	.word	0x200009a6

08002bec <HAL_UART_RxCpltCallback>:
int16_t rb_free_rx(UartRB *p);
int16_t rb_free_tx(UartRB *p);
//----- INTERRUPT ROUTINEN ----------------------------------------------------

// Reception interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	uartRB_OnRxCplt(&uart4_rb, huart);
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4807      	ldr	r0, [pc, #28]	@ (8002c14 <HAL_UART_RxCpltCallback+0x28>)
 8002bf8:	f000 f812 	bl	8002c20 <uartRB_OnRxCplt>
	uartRB_OnRxCplt(&uart5_rb, huart);
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4806      	ldr	r0, [pc, #24]	@ (8002c18 <HAL_UART_RxCpltCallback+0x2c>)
 8002c00:	f000 f80e 	bl	8002c20 <uartRB_OnRxCplt>
	uartRB_OnRxCplt(&usart1_rb, huart);
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4805      	ldr	r0, [pc, #20]	@ (8002c1c <HAL_UART_RxCpltCallback+0x30>)
 8002c08:	f000 f80a 	bl	8002c20 <uartRB_OnRxCplt>
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	200009a8 	.word	0x200009a8
 8002c18:	20000b38 	.word	0x20000b38
 8002c1c:	20000cc8 	.word	0x20000cc8

08002c20 <uartRB_OnRxCplt>:
	uartRB_OnTxCplt(&uart4_rb, huart);
	uartRB_OnTxCplt(&uart5_rb, huart);
	uartRB_OnTxCplt(&usart1_rb, huart);
}

void uartRB_OnRxCplt(UartRB *p, UART_HandleTypeDef *huart) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
	if (huart != p->huart)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d12d      	bne.n	8002c90 <uartRB_OnRxCplt+0x70>
		return;

	if (1 < rb_free_rx(p))                        // noch Platz f�r ein Zeichen?
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f8ac 	bl	8002d92 <rb_free_rx>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	dd19      	ble.n	8002c74 <uartRB_OnRxCplt+0x54>
			{
		p->rx[p->rx_in] = p->it_rx;                      // Zeichen �bernehmen
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	895b      	ldrh	r3, [r3, #10]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	4619      	mov	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	440b      	add	r3, r1
 8002c52:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		p->rx_in++;                                       // Zeiger weiterr�cken
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	895b      	ldrh	r3, [r3, #10]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	815a      	strh	r2, [r3, #10]
		if (p->rx_in >= BUFLEN)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	895b      	ldrh	r3, [r3, #10]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b7e      	cmp	r3, #126	@ 0x7e
 8002c6c:	d902      	bls.n	8002c74 <uartRB_OnRxCplt+0x54>
			p->rx_in = 0;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	815a      	strh	r2, [r3, #10]
	}

	while (HAL_UART_Receive_IT(p->huart, &p->it_rx, 1) != HAL_OK) {
 8002c74:	bf00      	nop
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002c80:	2201      	movs	r2, #1
 8002c82:	4619      	mov	r1, r3
 8002c84:	f004 fb1c 	bl	80072c0 <HAL_UART_Receive_IT>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f3      	bne.n	8002c76 <uartRB_OnRxCplt+0x56>
 8002c8e:	e000      	b.n	8002c92 <uartRB_OnRxCplt+0x72>
		return;
 8002c90:	bf00      	nop
	}
}
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <uart_initAll>:

//----- FUNKTIONSDEFINITIONEN -------------------------------------------------

/******************** RS232 ***********************/

void uart_initAll(void) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
	uartRB_Init(&uart4_rb, &huart4, UART4_IRQn);
 8002c9c:	2234      	movs	r2, #52	@ 0x34
 8002c9e:	490a      	ldr	r1, [pc, #40]	@ (8002cc8 <uart_initAll+0x30>)
 8002ca0:	480a      	ldr	r0, [pc, #40]	@ (8002ccc <uart_initAll+0x34>)
 8002ca2:	f000 f821 	bl	8002ce8 <uartRB_Init>
	uartRB_Init(&uart5_rb, &huart5, UART5_IRQn);
 8002ca6:	2235      	movs	r2, #53	@ 0x35
 8002ca8:	4909      	ldr	r1, [pc, #36]	@ (8002cd0 <uart_initAll+0x38>)
 8002caa:	480a      	ldr	r0, [pc, #40]	@ (8002cd4 <uart_initAll+0x3c>)
 8002cac:	f000 f81c 	bl	8002ce8 <uartRB_Init>
	uartRB_Init(&usart1_rb, &huart1, USART1_IRQn);
 8002cb0:	2225      	movs	r2, #37	@ 0x25
 8002cb2:	4909      	ldr	r1, [pc, #36]	@ (8002cd8 <uart_initAll+0x40>)
 8002cb4:	4809      	ldr	r0, [pc, #36]	@ (8002cdc <uart_initAll+0x44>)
 8002cb6:	f000 f817 	bl	8002ce8 <uartRB_Init>
	uartRB_Init(&usart3_rb, &huart3, USART3_IRQn);
 8002cba:	2227      	movs	r2, #39	@ 0x27
 8002cbc:	4908      	ldr	r1, [pc, #32]	@ (8002ce0 <uart_initAll+0x48>)
 8002cbe:	4809      	ldr	r0, [pc, #36]	@ (8002ce4 <uart_initAll+0x4c>)
 8002cc0:	f000 f812 	bl	8002ce8 <uartRB_Init>
}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000fe8 	.word	0x20000fe8
 8002ccc:	200009a8 	.word	0x200009a8
 8002cd0:	2000107c 	.word	0x2000107c
 8002cd4:	20000b38 	.word	0x20000b38
 8002cd8:	20001110 	.word	0x20001110
 8002cdc:	20000cc8 	.word	0x20000cc8
 8002ce0:	20001238 	.word	0x20001238
 8002ce4:	20000e58 	.word	0x20000e58

08002ce8 <uartRB_Init>:

void uartRB_Init(UartRB *p, UART_HandleTypeDef *huart, IRQn_Type irqn) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	71fb      	strb	r3, [r7, #7]
	p->huart = huart;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	601a      	str	r2, [r3, #0]
	p->irqn = irqn;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	79fa      	ldrb	r2, [r7, #7]
 8002d00:	711a      	strb	r2, [r3, #4]
	p->tx_in = p->tx_out = p->rx_in = p->rx_out = 0;
 8002d02:	2200      	movs	r2, #0
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4611      	mov	r1, r2
 8002d08:	8199      	strh	r1, [r3, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	8159      	strh	r1, [r3, #10]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4611      	mov	r1, r2
 8002d14:	8119      	strh	r1, [r3, #8]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	80da      	strh	r2, [r3, #6]
	HAL_UART_Receive_IT(p->huart, &p->it_rx, 1);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002d24:	2201      	movs	r2, #1
 8002d26:	4619      	mov	r1, r3
 8002d28:	f004 faca 	bl	80072c0 <HAL_UART_Receive_IT>
}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <rb_free_tx>:

int16_t rb_free_tx(UartRB *p) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
	int16_t x;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f002 fab5 	bl	80052b2 <HAL_NVIC_DisableIRQ>
	x = (int16_t) p->tx_in - (int8_t) p->tx_out;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	88db      	ldrh	r3, [r3, #6]
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	891b      	ldrh	r3, [r3, #8]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 8002d5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	da03      	bge.n	8002d6e <rb_free_tx+0x3a>
		x += BUFLEN;
 8002d66:	89fb      	ldrh	r3, [r7, #14]
 8002d68:	337f      	adds	r3, #127	@ 0x7f
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	81fb      	strh	r3, [r7, #14]
	x = BUFLEN - x;
 8002d6e:	89fb      	ldrh	r3, [r7, #14]
 8002d70:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_EnableIRQ(p->irqn);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 fa89 	bl	8005296 <HAL_NVIC_EnableIRQ>
	return (uint8_t) x;
 8002d84:	89fb      	ldrh	r3, [r7, #14]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	b21b      	sxth	r3, r3
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <rb_free_rx>:

int16_t rb_free_rx(UartRB *p) {
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
	int16_t x;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f002 fa86 	bl	80052b2 <HAL_NVIC_DisableIRQ>
	x = p->rx_in - p->rx_out;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	895b      	ldrh	r3, [r3, #10]
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	899b      	ldrh	r3, [r3, #12]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 8002db8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	da03      	bge.n	8002dc8 <rb_free_rx+0x36>
		x += BUFLEN;
 8002dc0:	89fb      	ldrh	r3, [r7, #14]
 8002dc2:	337f      	adds	r3, #127	@ 0x7f
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	81fb      	strh	r3, [r7, #14]
	x = BUFLEN - x;
 8002dc8:	89fb      	ldrh	r3, [r7, #14]
 8002dca:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_EnableIRQ(p->irqn);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f002 fa5c 	bl	8005296 <HAL_NVIC_EnableIRQ>
	return x;
 8002dde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <rb_rx_used>:

int16_t rb_rx_used(const UartRB *p)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
	int16_t used;
    HAL_NVIC_DisableIRQ(p->irqn);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f002 fa5a 	bl	80052b2 <HAL_NVIC_DisableIRQ>
    used = (int16_t)p->rx_in - (int32_t)p->rx_out;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	895b      	ldrh	r3, [r3, #10]
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	899b      	ldrh	r3, [r3, #12]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	81fb      	strh	r3, [r7, #14]
    if (used < 0) used += BUFLEN;
 8002e10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	da03      	bge.n	8002e20 <rb_rx_used+0x36>
 8002e18:	89fb      	ldrh	r3, [r7, #14]
 8002e1a:	337f      	adds	r3, #127	@ 0x7f
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	81fb      	strh	r3, [r7, #14]
    HAL_NVIC_EnableIRQ(p->irqn);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f002 fa35 	bl	8005296 <HAL_NVIC_EnableIRQ>
    return used;
 8002e2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <uartRB_KickTx>:

// is this correct
void uartRB_KickTx(UartRB *p) {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

	if (__HAL_UART_GET_FLAG(p->huart, UART_FLAG_TC) == 0)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4c:	2b40      	cmp	r3, #64	@ 0x40
 8002e4e:	d134      	bne.n	8002eba <uartRB_KickTx+0x82>
		return;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 fa2b 	bl	80052b2 <HAL_NVIC_DisableIRQ>
// No, we still have something to transmit?
	int16_t free = rb_free_tx(p);          // how many free slots in TX ring
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ff69 	bl	8002d34 <rb_free_tx>
 8002e62:	4603      	mov	r3, r0
 8002e64:	81fb      	strh	r3, [r7, #14]
	int16_t tmpBuf_out = p->tx_out;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	891b      	ldrh	r3, [r3, #8]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	81bb      	strh	r3, [r7, #12]
	if (free < BUFLEN) {               // => there is at least 1 byte pending
 8002e6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e72:	2b7e      	cmp	r3, #126	@ 0x7e
 8002e74:	dc1a      	bgt.n	8002eac <uartRB_KickTx+0x74>
		p->tx_out++;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	891b      	ldrh	r3, [r3, #8]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	811a      	strh	r2, [r3, #8]
		if (p->tx_out >= BUFLEN) p->tx_out = 0;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	891b      	ldrh	r3, [r3, #8]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b7e      	cmp	r3, #126	@ 0x7e
 8002e8c:	d902      	bls.n	8002e94 <uartRB_KickTx+0x5c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	811a      	strh	r2, [r3, #8]
		HAL_UART_Transmit_IT(p->huart, &p->tx[tmpBuf_out], 1);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e9c:	3308      	adds	r3, #8
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3306      	adds	r3, #6
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f004 f976 	bl	8007198 <HAL_UART_Transmit_IT>
	}
	HAL_NVIC_EnableIRQ(p->irqn);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 f9ef 	bl	8005296 <HAL_NVIC_EnableIRQ>
 8002eb8:	e000      	b.n	8002ebc <uartRB_KickTx+0x84>
		return;
 8002eba:	bf00      	nop
}
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <uartRB_Put>:

uint8_t uartRB_Put(UartRB *p, const void *buf, uint8_t n) {
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(p->irqn);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 f9ea 	bl	80052b2 <HAL_NVIC_DisableIRQ>
	const uint8_t *src = (const uint8_t *)buf;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	613b      	str	r3, [r7, #16]
	if (n > rb_free_tx(p)){
 8002ee2:	79fc      	ldrb	r4, [r7, #7]
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f7ff ff25 	bl	8002d34 <rb_free_tx>
 8002eea:	4603      	mov	r3, r0
 8002eec:	429c      	cmp	r4, r3
 8002eee:	dd07      	ble.n	8002f00 <uartRB_Put+0x3c>
		HAL_NVIC_EnableIRQ(p->irqn);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 f9cd 	bl	8005296 <HAL_NVIC_EnableIRQ>
		return 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e02f      	b.n	8002f60 <uartRB_Put+0x9c>
	}
	for (uint8_t i = 1; i <= n; i++) {
 8002f00:	2301      	movs	r3, #1
 8002f02:	75fb      	strb	r3, [r7, #23]
 8002f04:	e021      	b.n	8002f4a <uartRB_Put+0x86>
		p->tx[p->tx_in] = src[i-1];
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	88d2      	ldrh	r2, [r2, #6]
 8002f12:	b292      	uxth	r2, r2
 8002f14:	4611      	mov	r1, r2
 8002f16:	781a      	ldrb	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	440b      	add	r3, r1
 8002f1c:	739a      	strb	r2, [r3, #14]
		p->tx_in = (uint8_t) ((p->tx_in + 1) % BUFLEN);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	88db      	ldrh	r3, [r3, #6]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	4b10      	ldr	r3, [pc, #64]	@ (8002f68 <uartRB_Put+0xa4>)
 8002f28:	fb83 1302 	smull	r1, r3, r3, r2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	1199      	asrs	r1, r3, #6
 8002f30:	17d3      	asrs	r3, r2, #31
 8002f32:	1ac9      	subs	r1, r1, r3
 8002f34:	460b      	mov	r3, r1
 8002f36:	01db      	lsls	r3, r3, #7
 8002f38:	1a5b      	subs	r3, r3, r1
 8002f3a:	1ad1      	subs	r1, r2, r3
 8002f3c:	b2cb      	uxtb	r3, r1
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	80da      	strh	r2, [r3, #6]
	for (uint8_t i = 1; i <= n; i++) {
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	3301      	adds	r3, #1
 8002f48:	75fb      	strb	r3, [r7, #23]
 8002f4a:	7dfa      	ldrb	r2, [r7, #23]
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d9d9      	bls.n	8002f06 <uartRB_Put+0x42>
	}
	HAL_NVIC_EnableIRQ(p->irqn);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f002 f99c 	bl	8005296 <HAL_NVIC_EnableIRQ>
	return 1;
 8002f5e:	2301      	movs	r3, #1
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd90      	pop	{r4, r7, pc}
 8002f68:	81020409 	.word	0x81020409

08002f6c <uartRB_Getc>:

uint8_t uartRB_Getc(UartRB *p) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	uint8_t c;
	HAL_NVIC_DisableIRQ(p->irqn);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 f999 	bl	80052b2 <HAL_NVIC_DisableIRQ>
	c = p->rx[p->rx_out];
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	899b      	ldrh	r3, [r3, #12]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002f90:	73fb      	strb	r3, [r7, #15]
	p->rx_out++;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	899b      	ldrh	r3, [r3, #12]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	819a      	strh	r2, [r3, #12]
	if (p->rx_out >= BUFLEN) p->rx_out = 0;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	899b      	ldrh	r3, [r3, #12]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b7e      	cmp	r3, #126	@ 0x7e
 8002fa8:	d902      	bls.n	8002fb0 <uartRB_Getc+0x44>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	819a      	strh	r2, [r3, #12]
	HAL_NVIC_EnableIRQ(p->irqn);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f002 f96d 	bl	8005296 <HAL_NVIC_EnableIRQ>
	return c;
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002fcc:	4b22      	ldr	r3, [pc, #136]	@ (8003058 <MX_UART4_Init+0x90>)
 8002fce:	4a23      	ldr	r2, [pc, #140]	@ (800305c <MX_UART4_Init+0x94>)
 8002fd0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 19200;
 8002fd2:	4b21      	ldr	r3, [pc, #132]	@ (8003058 <MX_UART4_Init+0x90>)
 8002fd4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002fd8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002fda:	4b1f      	ldr	r3, [pc, #124]	@ (8003058 <MX_UART4_Init+0x90>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8003058 <MX_UART4_Init+0x90>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8003058 <MX_UART4_Init+0x90>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002fec:	4b1a      	ldr	r3, [pc, #104]	@ (8003058 <MX_UART4_Init+0x90>)
 8002fee:	220c      	movs	r2, #12
 8002ff0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff2:	4b19      	ldr	r3, [pc, #100]	@ (8003058 <MX_UART4_Init+0x90>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff8:	4b17      	ldr	r3, [pc, #92]	@ (8003058 <MX_UART4_Init+0x90>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ffe:	4b16      	ldr	r3, [pc, #88]	@ (8003058 <MX_UART4_Init+0x90>)
 8003000:	2200      	movs	r2, #0
 8003002:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003004:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <MX_UART4_Init+0x90>)
 8003006:	2200      	movs	r2, #0
 8003008:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800300a:	4b13      	ldr	r3, [pc, #76]	@ (8003058 <MX_UART4_Init+0x90>)
 800300c:	2200      	movs	r2, #0
 800300e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003010:	4811      	ldr	r0, [pc, #68]	@ (8003058 <MX_UART4_Init+0x90>)
 8003012:	f004 f871 	bl	80070f8 <HAL_UART_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800301c:	f7fd fffd 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003020:	2100      	movs	r1, #0
 8003022:	480d      	ldr	r0, [pc, #52]	@ (8003058 <MX_UART4_Init+0x90>)
 8003024:	f005 fee7 	bl	8008df6 <HAL_UARTEx_SetTxFifoThreshold>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800302e:	f7fd fff4 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003032:	2100      	movs	r1, #0
 8003034:	4808      	ldr	r0, [pc, #32]	@ (8003058 <MX_UART4_Init+0x90>)
 8003036:	f005 ff1c 	bl	8008e72 <HAL_UARTEx_SetRxFifoThreshold>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003040:	f7fd ffeb 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003044:	4804      	ldr	r0, [pc, #16]	@ (8003058 <MX_UART4_Init+0x90>)
 8003046:	f005 fe9d 	bl	8008d84 <HAL_UARTEx_DisableFifoMode>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003050:	f7fd ffe3 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003054:	bf00      	nop
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20000fe8 	.word	0x20000fe8
 800305c:	40004c00 	.word	0x40004c00

08003060 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003064:	4b22      	ldr	r3, [pc, #136]	@ (80030f0 <MX_UART5_Init+0x90>)
 8003066:	4a23      	ldr	r2, [pc, #140]	@ (80030f4 <MX_UART5_Init+0x94>)
 8003068:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 800306a:	4b21      	ldr	r3, [pc, #132]	@ (80030f0 <MX_UART5_Init+0x90>)
 800306c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003070:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003072:	4b1f      	ldr	r3, [pc, #124]	@ (80030f0 <MX_UART5_Init+0x90>)
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003078:	4b1d      	ldr	r3, [pc, #116]	@ (80030f0 <MX_UART5_Init+0x90>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800307e:	4b1c      	ldr	r3, [pc, #112]	@ (80030f0 <MX_UART5_Init+0x90>)
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003084:	4b1a      	ldr	r3, [pc, #104]	@ (80030f0 <MX_UART5_Init+0x90>)
 8003086:	220c      	movs	r2, #12
 8003088:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800308a:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <MX_UART5_Init+0x90>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003090:	4b17      	ldr	r3, [pc, #92]	@ (80030f0 <MX_UART5_Init+0x90>)
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003096:	4b16      	ldr	r3, [pc, #88]	@ (80030f0 <MX_UART5_Init+0x90>)
 8003098:	2200      	movs	r2, #0
 800309a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800309c:	4b14      	ldr	r3, [pc, #80]	@ (80030f0 <MX_UART5_Init+0x90>)
 800309e:	2200      	movs	r2, #0
 80030a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030a2:	4b13      	ldr	r3, [pc, #76]	@ (80030f0 <MX_UART5_Init+0x90>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80030a8:	4811      	ldr	r0, [pc, #68]	@ (80030f0 <MX_UART5_Init+0x90>)
 80030aa:	f004 f825 	bl	80070f8 <HAL_UART_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80030b4:	f7fd ffb1 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030b8:	2100      	movs	r1, #0
 80030ba:	480d      	ldr	r0, [pc, #52]	@ (80030f0 <MX_UART5_Init+0x90>)
 80030bc:	f005 fe9b 	bl	8008df6 <HAL_UARTEx_SetTxFifoThreshold>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80030c6:	f7fd ffa8 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030ca:	2100      	movs	r1, #0
 80030cc:	4808      	ldr	r0, [pc, #32]	@ (80030f0 <MX_UART5_Init+0x90>)
 80030ce:	f005 fed0 	bl	8008e72 <HAL_UARTEx_SetRxFifoThreshold>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80030d8:	f7fd ff9f 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80030dc:	4804      	ldr	r0, [pc, #16]	@ (80030f0 <MX_UART5_Init+0x90>)
 80030de:	f005 fe51 	bl	8008d84 <HAL_UARTEx_DisableFifoMode>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80030e8:	f7fd ff97 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80030ec:	bf00      	nop
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	2000107c 	.word	0x2000107c
 80030f4:	40005000 	.word	0x40005000

080030f8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030fc:	4b22      	ldr	r3, [pc, #136]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 80030fe:	4a23      	ldr	r2, [pc, #140]	@ (800318c <MX_USART1_UART_Init+0x94>)
 8003100:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8003102:	4b21      	ldr	r3, [pc, #132]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 8003104:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003108:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800310a:	4b1f      	ldr	r3, [pc, #124]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 800310c:	2200      	movs	r2, #0
 800310e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003110:	4b1d      	ldr	r3, [pc, #116]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 8003112:	2200      	movs	r2, #0
 8003114:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003116:	4b1c      	ldr	r3, [pc, #112]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 8003118:	2200      	movs	r2, #0
 800311a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800311c:	4b1a      	ldr	r3, [pc, #104]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 800311e:	220c      	movs	r2, #12
 8003120:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003122:	4b19      	ldr	r3, [pc, #100]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 8003124:	2200      	movs	r2, #0
 8003126:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003128:	4b17      	ldr	r3, [pc, #92]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800312e:	4b16      	ldr	r3, [pc, #88]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 8003130:	2200      	movs	r2, #0
 8003132:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003134:	4b14      	ldr	r3, [pc, #80]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 8003136:	2200      	movs	r2, #0
 8003138:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800313a:	4b13      	ldr	r3, [pc, #76]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 800313c:	2200      	movs	r2, #0
 800313e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003140:	4811      	ldr	r0, [pc, #68]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 8003142:	f003 ffd9 	bl	80070f8 <HAL_UART_Init>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800314c:	f7fd ff65 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003150:	2100      	movs	r1, #0
 8003152:	480d      	ldr	r0, [pc, #52]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 8003154:	f005 fe4f 	bl	8008df6 <HAL_UARTEx_SetTxFifoThreshold>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800315e:	f7fd ff5c 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003162:	2100      	movs	r1, #0
 8003164:	4808      	ldr	r0, [pc, #32]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 8003166:	f005 fe84 	bl	8008e72 <HAL_UARTEx_SetRxFifoThreshold>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003170:	f7fd ff53 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003174:	4804      	ldr	r0, [pc, #16]	@ (8003188 <MX_USART1_UART_Init+0x90>)
 8003176:	f005 fe05 	bl	8008d84 <HAL_UARTEx_DisableFifoMode>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003180:	f7fd ff4b 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20001110 	.word	0x20001110
 800318c:	40013800 	.word	0x40013800

08003190 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003194:	4b23      	ldr	r3, [pc, #140]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 8003196:	4a24      	ldr	r2, [pc, #144]	@ (8003228 <MX_USART2_UART_Init+0x98>)
 8003198:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800319a:	4b22      	ldr	r3, [pc, #136]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 800319c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80031a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031a2:	4b20      	ldr	r3, [pc, #128]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 80031b6:	220c      	movs	r2, #12
 80031b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80031ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 80031bc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80031c0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031c2:	4b18      	ldr	r3, [pc, #96]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031c8:	4b16      	ldr	r3, [pc, #88]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031ce:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031d4:	4b13      	ldr	r3, [pc, #76]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031da:	4812      	ldr	r0, [pc, #72]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 80031dc:	f003 ff8c 	bl	80070f8 <HAL_UART_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80031e6:	f7fd ff18 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031ea:	2100      	movs	r1, #0
 80031ec:	480d      	ldr	r0, [pc, #52]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 80031ee:	f005 fe02 	bl	8008df6 <HAL_UARTEx_SetTxFifoThreshold>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80031f8:	f7fd ff0f 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031fc:	2100      	movs	r1, #0
 80031fe:	4809      	ldr	r0, [pc, #36]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 8003200:	f005 fe37 	bl	8008e72 <HAL_UARTEx_SetRxFifoThreshold>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800320a:	f7fd ff06 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800320e:	4805      	ldr	r0, [pc, #20]	@ (8003224 <MX_USART2_UART_Init+0x94>)
 8003210:	f005 fdb8 	bl	8008d84 <HAL_UARTEx_DisableFifoMode>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800321a:	f7fd fefe 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	200011a4 	.word	0x200011a4
 8003228:	40004400 	.word	0x40004400

0800322c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003230:	4b23      	ldr	r3, [pc, #140]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 8003232:	4a24      	ldr	r2, [pc, #144]	@ (80032c4 <MX_USART3_UART_Init+0x98>)
 8003234:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8003236:	4b22      	ldr	r3, [pc, #136]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 8003238:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800323c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800323e:	4b20      	ldr	r3, [pc, #128]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003244:	4b1e      	ldr	r3, [pc, #120]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 8003246:	2200      	movs	r2, #0
 8003248:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800324a:	4b1d      	ldr	r3, [pc, #116]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 800324c:	2200      	movs	r2, #0
 800324e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003250:	4b1b      	ldr	r3, [pc, #108]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 8003252:	220c      	movs	r2, #12
 8003254:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003256:	4b1a      	ldr	r3, [pc, #104]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 8003258:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800325c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800325e:	4b18      	ldr	r3, [pc, #96]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 8003260:	2200      	movs	r2, #0
 8003262:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003264:	4b16      	ldr	r3, [pc, #88]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 8003266:	2200      	movs	r2, #0
 8003268:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800326a:	4b15      	ldr	r3, [pc, #84]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 800326c:	2200      	movs	r2, #0
 800326e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003270:	4b13      	ldr	r3, [pc, #76]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 8003272:	2200      	movs	r2, #0
 8003274:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003276:	4812      	ldr	r0, [pc, #72]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 8003278:	f003 ff3e 	bl	80070f8 <HAL_UART_Init>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8003282:	f7fd feca 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003286:	2100      	movs	r1, #0
 8003288:	480d      	ldr	r0, [pc, #52]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 800328a:	f005 fdb4 	bl	8008df6 <HAL_UARTEx_SetTxFifoThreshold>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8003294:	f7fd fec1 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003298:	2100      	movs	r1, #0
 800329a:	4809      	ldr	r0, [pc, #36]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 800329c:	f005 fde9 	bl	8008e72 <HAL_UARTEx_SetRxFifoThreshold>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 80032a6:	f7fd feb8 	bl	800101a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80032aa:	4805      	ldr	r0, [pc, #20]	@ (80032c0 <MX_USART3_UART_Init+0x94>)
 80032ac:	f005 fd6a 	bl	8008d84 <HAL_UARTEx_DisableFifoMode>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 80032b6:	f7fd feb0 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20001238 	.word	0x20001238
 80032c4:	40004800 	.word	0x40004800

080032c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b0aa      	sub	sp, #168	@ 0xa8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80032e4:	2254      	movs	r2, #84	@ 0x54
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f005 fe6f 	bl	8008fcc <memset>
  if(uartHandle->Instance==UART4)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4aa3      	ldr	r2, [pc, #652]	@ (8003580 <HAL_UART_MspInit+0x2b8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d13c      	bne.n	8003372 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80032f8:	2308      	movs	r3, #8
 80032fa:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80032fc:	2300      	movs	r3, #0
 80032fe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003300:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003304:	4618      	mov	r0, r3
 8003306:	f002 ff9d 	bl	8006244 <HAL_RCCEx_PeriphCLKConfig>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003310:	f7fd fe83 	bl	800101a <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003314:	4b9b      	ldr	r3, [pc, #620]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003318:	4a9a      	ldr	r2, [pc, #616]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 800331a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800331e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003320:	4b98      	ldr	r3, [pc, #608]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003324:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003328:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800332a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800332c:	4b95      	ldr	r3, [pc, #596]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 800332e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003330:	4a94      	ldr	r2, [pc, #592]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 8003332:	f043 0304 	orr.w	r3, r3, #4
 8003336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003338:	4b92      	ldr	r3, [pc, #584]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 800333a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003344:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003348:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	2302      	movs	r3, #2
 800334e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003358:	2300      	movs	r3, #0
 800335a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800335e:	2305      	movs	r3, #5
 8003360:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003364:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003368:	4619      	mov	r1, r3
 800336a:	4887      	ldr	r0, [pc, #540]	@ (8003588 <HAL_UART_MspInit+0x2c0>)
 800336c:	f001 ffbc 	bl	80052e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003370:	e177      	b.n	8003662 <HAL_UART_MspInit+0x39a>
  else if(uartHandle->Instance==UART5)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a85      	ldr	r2, [pc, #532]	@ (800358c <HAL_UART_MspInit+0x2c4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d15d      	bne.n	8003438 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800337c:	2310      	movs	r3, #16
 800337e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003380:	2300      	movs	r3, #0
 8003382:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003384:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003388:	4618      	mov	r0, r3
 800338a:	f002 ff5b 	bl	8006244 <HAL_RCCEx_PeriphCLKConfig>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003394:	f7fd fe41 	bl	800101a <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003398:	4b7a      	ldr	r3, [pc, #488]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339c:	4a79      	ldr	r2, [pc, #484]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 800339e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033a4:	4b77      	ldr	r3, [pc, #476]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80033ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b0:	4b74      	ldr	r3, [pc, #464]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 80033b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b4:	4a73      	ldr	r2, [pc, #460]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033bc:	4b71      	ldr	r3, [pc, #452]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 80033be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80033c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033c8:	4b6e      	ldr	r3, [pc, #440]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 80033ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033cc:	4a6d      	ldr	r2, [pc, #436]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 80033ce:	f043 0308 	orr.w	r3, r3, #8
 80033d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 80033d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80033e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e8:	2302      	movs	r3, #2
 80033ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80033fa:	2305      	movs	r3, #5
 80033fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003400:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003404:	4619      	mov	r1, r3
 8003406:	4860      	ldr	r0, [pc, #384]	@ (8003588 <HAL_UART_MspInit+0x2c0>)
 8003408:	f001 ff6e 	bl	80052e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800340c:	2304      	movs	r3, #4
 800340e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341e:	2300      	movs	r3, #0
 8003420:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003424:	2305      	movs	r3, #5
 8003426:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800342a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800342e:	4619      	mov	r1, r3
 8003430:	4857      	ldr	r0, [pc, #348]	@ (8003590 <HAL_UART_MspInit+0x2c8>)
 8003432:	f001 ff59 	bl	80052e8 <HAL_GPIO_Init>
}
 8003436:	e114      	b.n	8003662 <HAL_UART_MspInit+0x39a>
  else if(uartHandle->Instance==USART1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a55      	ldr	r2, [pc, #340]	@ (8003594 <HAL_UART_MspInit+0x2cc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d13b      	bne.n	80034ba <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003442:	2301      	movs	r3, #1
 8003444:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003446:	2300      	movs	r3, #0
 8003448:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800344a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800344e:	4618      	mov	r0, r3
 8003450:	f002 fef8 	bl	8006244 <HAL_RCCEx_PeriphCLKConfig>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_UART_MspInit+0x196>
      Error_Handler();
 800345a:	f7fd fdde 	bl	800101a <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800345e:	4b49      	ldr	r3, [pc, #292]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 8003460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003462:	4a48      	ldr	r2, [pc, #288]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 8003464:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003468:	6613      	str	r3, [r2, #96]	@ 0x60
 800346a:	4b46      	ldr	r3, [pc, #280]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 800346c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003476:	4b43      	ldr	r3, [pc, #268]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 8003478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800347a:	4a42      	ldr	r2, [pc, #264]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 800347c:	f043 0304 	orr.w	r3, r3, #4
 8003480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003482:	4b40      	ldr	r3, [pc, #256]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 8003484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800348e:	2330      	movs	r3, #48	@ 0x30
 8003490:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	2302      	movs	r3, #2
 8003496:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a0:	2300      	movs	r3, #0
 80034a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034a6:	2307      	movs	r3, #7
 80034a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ac:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80034b0:	4619      	mov	r1, r3
 80034b2:	4835      	ldr	r0, [pc, #212]	@ (8003588 <HAL_UART_MspInit+0x2c0>)
 80034b4:	f001 ff18 	bl	80052e8 <HAL_GPIO_Init>
}
 80034b8:	e0d3      	b.n	8003662 <HAL_UART_MspInit+0x39a>
  else if(uartHandle->Instance==USART2)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a36      	ldr	r2, [pc, #216]	@ (8003598 <HAL_UART_MspInit+0x2d0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d16b      	bne.n	800359c <HAL_UART_MspInit+0x2d4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80034c4:	2302      	movs	r3, #2
 80034c6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80034c8:	2300      	movs	r3, #0
 80034ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80034d0:	4618      	mov	r0, r3
 80034d2:	f002 feb7 	bl	8006244 <HAL_RCCEx_PeriphCLKConfig>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_UART_MspInit+0x218>
      Error_Handler();
 80034dc:	f7fd fd9d 	bl	800101a <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80034e0:	4b28      	ldr	r3, [pc, #160]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 80034e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e4:	4a27      	ldr	r2, [pc, #156]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 80034e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80034ec:	4b25      	ldr	r3, [pc, #148]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 80034ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f4:	623b      	str	r3, [r7, #32]
 80034f6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f8:	4b22      	ldr	r3, [pc, #136]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 80034fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fc:	4a21      	ldr	r2, [pc, #132]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003504:	4b1f      	ldr	r3, [pc, #124]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 8003506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003510:	4b1c      	ldr	r3, [pc, #112]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 8003512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003514:	4a1b      	ldr	r2, [pc, #108]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 8003516:	f043 0308 	orr.w	r3, r3, #8
 800351a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800351c:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <HAL_UART_MspInit+0x2bc>)
 800351e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003528:	2307      	movs	r3, #7
 800352a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353a:	2300      	movs	r3, #0
 800353c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003540:	2307      	movs	r3, #7
 8003542:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003546:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003550:	f001 feca 	bl	80052e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003554:	2340      	movs	r3, #64	@ 0x40
 8003556:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	2302      	movs	r3, #2
 800355c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800356c:	2307      	movs	r3, #7
 800356e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003572:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003576:	4619      	mov	r1, r3
 8003578:	4805      	ldr	r0, [pc, #20]	@ (8003590 <HAL_UART_MspInit+0x2c8>)
 800357a:	f001 feb5 	bl	80052e8 <HAL_GPIO_Init>
}
 800357e:	e070      	b.n	8003662 <HAL_UART_MspInit+0x39a>
 8003580:	40004c00 	.word	0x40004c00
 8003584:	40021000 	.word	0x40021000
 8003588:	48000800 	.word	0x48000800
 800358c:	40005000 	.word	0x40005000
 8003590:	48000c00 	.word	0x48000c00
 8003594:	40013800 	.word	0x40013800
 8003598:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a32      	ldr	r2, [pc, #200]	@ (800366c <HAL_UART_MspInit+0x3a4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d15d      	bne.n	8003662 <HAL_UART_MspInit+0x39a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80035a6:	2304      	movs	r3, #4
 80035a8:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80035aa:	2300      	movs	r3, #0
 80035ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80035b2:	4618      	mov	r0, r3
 80035b4:	f002 fe46 	bl	8006244 <HAL_RCCEx_PeriphCLKConfig>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_UART_MspInit+0x2fa>
      Error_Handler();
 80035be:	f7fd fd2c 	bl	800101a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80035c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003670 <HAL_UART_MspInit+0x3a8>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003670 <HAL_UART_MspInit+0x3a8>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ce:	4b28      	ldr	r3, [pc, #160]	@ (8003670 <HAL_UART_MspInit+0x3a8>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035da:	4b25      	ldr	r3, [pc, #148]	@ (8003670 <HAL_UART_MspInit+0x3a8>)
 80035dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035de:	4a24      	ldr	r2, [pc, #144]	@ (8003670 <HAL_UART_MspInit+0x3a8>)
 80035e0:	f043 0310 	orr.w	r3, r3, #16
 80035e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035e6:	4b22      	ldr	r3, [pc, #136]	@ (8003670 <HAL_UART_MspInit+0x3a8>)
 80035e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003670 <HAL_UART_MspInit+0x3a8>)
 80035f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003670 <HAL_UART_MspInit+0x3a8>)
 80035f8:	f043 0302 	orr.w	r3, r3, #2
 80035fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003670 <HAL_UART_MspInit+0x3a8>)
 8003600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800360a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800360e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003612:	2302      	movs	r3, #2
 8003614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361e:	2300      	movs	r3, #0
 8003620:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003624:	2307      	movs	r3, #7
 8003626:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800362a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800362e:	4619      	mov	r1, r3
 8003630:	4810      	ldr	r0, [pc, #64]	@ (8003674 <HAL_UART_MspInit+0x3ac>)
 8003632:	f001 fe59 	bl	80052e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14;
 8003636:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 800363a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363e:	2302      	movs	r3, #2
 8003640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	2300      	movs	r3, #0
 8003646:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364a:	2300      	movs	r3, #0
 800364c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003650:	2307      	movs	r3, #7
 8003652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003656:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800365a:	4619      	mov	r1, r3
 800365c:	4806      	ldr	r0, [pc, #24]	@ (8003678 <HAL_UART_MspInit+0x3b0>)
 800365e:	f001 fe43 	bl	80052e8 <HAL_GPIO_Init>
}
 8003662:	bf00      	nop
 8003664:	37a8      	adds	r7, #168	@ 0xa8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40004800 	.word	0x40004800
 8003670:	40021000 	.word	0x40021000
 8003674:	48001000 	.word	0x48001000
 8003678:	48000400 	.word	0x48000400

0800367c <zentrale_init>:


//-----------------FUNKTIONSDEFINITIONEN---------------------------------------

// Zentrale initialisieren.
void zentrale_init(void) {
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
	z_status = POWERON;
 8003680:	4b09      	ldr	r3, [pc, #36]	@ (80036a8 <zentrale_init+0x2c>)
 8003682:	2202      	movs	r2, #2
 8003684:	701a      	strb	r2, [r3, #0]
	z_status_h = NOP;
 8003686:	4b09      	ldr	r3, [pc, #36]	@ (80036ac <zentrale_init+0x30>)
 8003688:	22ff      	movs	r2, #255	@ 0xff
 800368a:	701a      	strb	r2, [r3, #0]
	z_status_tend = NOP;
 800368c:	4b08      	ldr	r3, [pc, #32]	@ (80036b0 <zentrale_init+0x34>)
 800368e:	22ff      	movs	r2, #255	@ 0xff
 8003690:	701a      	strb	r2, [r3, #0]
	z_error_akt = 0;
 8003692:	4b08      	ldr	r3, [pc, #32]	@ (80036b4 <zentrale_init+0x38>)
 8003694:	2200      	movs	r2, #0
 8003696:	801a      	strh	r2, [r3, #0]
	z_error_kum = 0;
 8003698:	4b07      	ldr	r3, [pc, #28]	@ (80036b8 <zentrale_init+0x3c>)
 800369a:	2200      	movs	r2, #0
 800369c:	801a      	strh	r2, [r3, #0]

}
 800369e:	bf00      	nop
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	200012cc 	.word	0x200012cc
 80036ac:	200012cd 	.word	0x200012cd
 80036b0:	200012ce 	.word	0x200012ce
 80036b4:	200012d0 	.word	0x200012d0
 80036b8:	200012d2 	.word	0x200012d2

080036bc <z_update_power_errors>:

static void z_update_power_errors(void) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
	// If you only have update_uok():
	if (!update_uok()) {
 80036c2:	f7fc ffc1 	bl	8000648 <update_uok>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d117      	bne.n	80036fc <z_update_power_errors+0x40>
		// If you want individual bits, read pins directly (or add helpers):
		uint8_t ok5 = u_ok(UC__5VOK_GPIO_Port, UC__5VOK_Pin);
 80036cc:	2110      	movs	r1, #16
 80036ce:	480d      	ldr	r0, [pc, #52]	@ (8003704 <z_update_power_errors+0x48>)
 80036d0:	f7fc ffa2 	bl	8000618 <u_ok>
 80036d4:	4603      	mov	r3, r0
 80036d6:	71fb      	strb	r3, [r7, #7]
		uint8_t ok12 = u_ok(UC__12VOK_GPIO_Port, UC__12VOK_Pin);
 80036d8:	2120      	movs	r1, #32
 80036da:	480a      	ldr	r0, [pc, #40]	@ (8003704 <z_update_power_errors+0x48>)
 80036dc:	f7fc ff9c 	bl	8000618 <u_ok>
 80036e0:	4603      	mov	r3, r0
 80036e2:	71bb      	strb	r3, [r7, #6]
		if (!ok5)
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d102      	bne.n	80036f0 <z_update_power_errors+0x34>
			z_set_error(SG_ERR_U5V);
 80036ea:	2002      	movs	r0, #2
 80036ec:	f000 f90c 	bl	8003908 <z_set_error>
		if (!ok12)
 80036f0:	79bb      	ldrb	r3, [r7, #6]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <z_update_power_errors+0x40>
			z_set_error(SG_ERR_U12V);
 80036f6:	2003      	movs	r0, #3
 80036f8:	f000 f906 	bl	8003908 <z_set_error>
	}
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	48000c00 	.word	0x48000c00

08003708 <zentrale>:

// Zentrale denken und entscheiden.
void zentrale(void) {	// ----- DENKEN -----
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0

	z_update_power_errors();
 800370c:	f7ff ffd6 	bl	80036bc <z_update_power_errors>

	if (readPumpAlarm()) {
 8003710:	f7fc ffce 	bl	80006b0 <readPumpAlarm>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <zentrale+0x18>
		z_set_error(SG_ERR_PUMP_ALARM);
 800371a:	2004      	movs	r0, #4
 800371c:	f000 f8f4 	bl	8003908 <z_set_error>
	}
	if (readPumpWarning()) {
 8003720:	f7fc ffb0 	bl	8000684 <readPumpWarning>
		//z_set_error(SG_ERR_PUMP_WARNING);
	}

	// Fehlerüberprüfung
	if (z_error_akt != 0)
 8003724:	4b66      	ldr	r3, [pc, #408]	@ (80038c0 <zentrale+0x1b8>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <zentrale+0x2a>
		z_set_status_tend(ZERROR);
 800372c:	2001      	movs	r0, #1
 800372e:	f000 f8d5 	bl	80038dc <z_set_status_tend>

	switch (z_status)// Je nach aktuellem Systemzustand auf Anfragen zur Zustands�nderung
 8003732:	4b64      	ldr	r3, [pc, #400]	@ (80038c4 <zentrale+0x1bc>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	3b01      	subs	r3, #1
 8003738:	2b0a      	cmp	r3, #10
 800373a:	f200 80ac 	bhi.w	8003896 <zentrale+0x18e>
 800373e:	a201      	add	r2, pc, #4	@ (adr r2, 8003744 <zentrale+0x3c>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003771 	.word	0x08003771
 8003748:	080037c9 	.word	0x080037c9
 800374c:	08003897 	.word	0x08003897
 8003750:	08003897 	.word	0x08003897
 8003754:	08003897 	.word	0x08003897
 8003758:	08003897 	.word	0x08003897
 800375c:	08003897 	.word	0x08003897
 8003760:	08003897 	.word	0x08003897
 8003764:	08003801 	.word	0x08003801
 8003768:	08003897 	.word	0x08003897
 800376c:	0800384f 	.word	0x0800384f
	{// reagieren
	case ZERROR:
		if (z_status_h != ZERROR) {				// add what to do when error
 8003770:	4b55      	ldr	r3, [pc, #340]	@ (80038c8 <zentrale+0x1c0>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d005      	beq.n	8003784 <zentrale+0x7c>
			z_status_h = ZERROR;
 8003778:	4b53      	ldr	r3, [pc, #332]	@ (80038c8 <zentrale+0x1c0>)
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
			z_rf_state = 0;
 800377e:	4b53      	ldr	r3, [pc, #332]	@ (80038cc <zentrale+0x1c4>)
 8003780:	2200      	movs	r2, #0
 8003782:	701a      	strb	r2, [r3, #0]
		}

		if ((z_error_akt) > 0) // Wenn aktuell noch ein Fehler mit Ausnahme des ERREXT vorliegt
 8003784:	4b4e      	ldr	r3, [pc, #312]	@ (80038c0 <zentrale+0x1b8>)
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <zentrale+0x9a>
				{
			z_error_kum |= z_error_akt; // Wir aktualisieren hier schon mal den Kummulierten Fehler
 800378c:	4b50      	ldr	r3, [pc, #320]	@ (80038d0 <zentrale+0x1c8>)
 800378e:	881a      	ldrh	r2, [r3, #0]
 8003790:	4b4b      	ldr	r3, [pc, #300]	@ (80038c0 <zentrale+0x1b8>)
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	4313      	orrs	r3, r2
 8003796:	b29a      	uxth	r2, r3
 8003798:	4b4d      	ldr	r3, [pc, #308]	@ (80038d0 <zentrale+0x1c8>)
 800379a:	801a      	strh	r2, [r3, #0]
			z_set_status_tend(ZERROR); // kann als Folgezustand nur der Zustand ERROR eingenommen werden!
 800379c:	2001      	movs	r0, #1
 800379e:	f000 f89d 	bl	80038dc <z_set_status_tend>
		} else {       // Falls kein Fehler im Modul vorliegt schließen wir hier
		}

		switch (z_status_tend) // Wünsche bezüglich einer Zustandsänderung bearbeiten
 80037a2:	4b4c      	ldr	r3, [pc, #304]	@ (80038d4 <zentrale+0x1cc>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d002      	beq.n	80037b0 <zentrale+0xa8>
 80037aa:	2b09      	cmp	r3, #9
 80037ac:	d004      	beq.n	80037b8 <zentrale+0xb0>
			break;
		case INACTIVE:
			z_status = INACTIVE;                // Zustand INACTIVE vorbereiten
			break;
		default:
			break;
 80037ae:	e007      	b.n	80037c0 <zentrale+0xb8>
			z_status = POWERON;
 80037b0:	4b44      	ldr	r3, [pc, #272]	@ (80038c4 <zentrale+0x1bc>)
 80037b2:	2202      	movs	r2, #2
 80037b4:	701a      	strb	r2, [r3, #0]
			break;
 80037b6:	e003      	b.n	80037c0 <zentrale+0xb8>
			z_status = INACTIVE;                // Zustand INACTIVE vorbereiten
 80037b8:	4b42      	ldr	r3, [pc, #264]	@ (80038c4 <zentrale+0x1bc>)
 80037ba:	2209      	movs	r2, #9
 80037bc:	701a      	strb	r2, [r3, #0]
			break;
 80037be:	bf00      	nop
		}
		z_status_tend = NOP;                         // Status_tend zurücksetzen
 80037c0:	4b44      	ldr	r3, [pc, #272]	@ (80038d4 <zentrale+0x1cc>)
 80037c2:	22ff      	movs	r2, #255	@ 0xff
 80037c4:	701a      	strb	r2, [r3, #0]
		break;
 80037c6:	e06d      	b.n	80038a4 <zentrale+0x19c>
//			if(((z_error_kum && ((1<<SG_ERREN) + (1<<SG_ERRDTC))) != 0) && (adc7927_chk_en() != 1))
//				z_set_status_tend(Z_ERROR);


	case POWERON:// Startzustand nach Einschalten des Ger�tes. Keine Fehlerbehandlung!
		if (z_status_h != POWERON) {
 80037c8:	4b3f      	ldr	r3, [pc, #252]	@ (80038c8 <zentrale+0x1c0>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d008      	beq.n	80037e2 <zentrale+0xda>
			z_init_done = 0;
 80037d0:	4b41      	ldr	r3, [pc, #260]	@ (80038d8 <zentrale+0x1d0>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
			z_rf_state = 0;
 80037d6:	4b3d      	ldr	r3, [pc, #244]	@ (80038cc <zentrale+0x1c4>)
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
			z_status_h = POWERON;
 80037dc:	4b3a      	ldr	r3, [pc, #232]	@ (80038c8 <zentrale+0x1c0>)
 80037de:	2202      	movs	r2, #2
 80037e0:	701a      	strb	r2, [r3, #0]
		}

		if (ct_init_null()) {
 80037e2:	f7ff f9ef 	bl	8002bc4 <ct_init_null>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <zentrale+0xf0>
			z_init_done = 1;
 80037ec:	4b3a      	ldr	r3, [pc, #232]	@ (80038d8 <zentrale+0x1d0>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
			z_status = INACTIVE;
 80037f2:	4b34      	ldr	r3, [pc, #208]	@ (80038c4 <zentrale+0x1bc>)
 80037f4:	2209      	movs	r2, #9
 80037f6:	701a      	strb	r2, [r3, #0]
		}

		z_status_tend = NOP;					// z_status_tend zur�cksetzen
 80037f8:	4b36      	ldr	r3, [pc, #216]	@ (80038d4 <zentrale+0x1cc>)
 80037fa:	22ff      	movs	r2, #255	@ 0xff
 80037fc:	701a      	strb	r2, [r3, #0]
		break;
 80037fe:	e051      	b.n	80038a4 <zentrale+0x19c>

	case INACTIVE:						//----- System im INACTIVE-Zustand

		if (z_status_h != INACTIVE) {
 8003800:	4b31      	ldr	r3, [pc, #196]	@ (80038c8 <zentrale+0x1c0>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b09      	cmp	r3, #9
 8003806:	d008      	beq.n	800381a <zentrale+0x112>
			z_error_kum = 0;
 8003808:	4b31      	ldr	r3, [pc, #196]	@ (80038d0 <zentrale+0x1c8>)
 800380a:	2200      	movs	r2, #0
 800380c:	801a      	strh	r2, [r3, #0]
			z_rf_state = 0;
 800380e:	4b2f      	ldr	r3, [pc, #188]	@ (80038cc <zentrale+0x1c4>)
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
			z_status_h = INACTIVE;
 8003814:	4b2c      	ldr	r3, [pc, #176]	@ (80038c8 <zentrale+0x1c0>)
 8003816:	2209      	movs	r2, #9
 8003818:	701a      	strb	r2, [r3, #0]
		}

		if (z_error_akt != 0)
 800381a:	4b29      	ldr	r3, [pc, #164]	@ (80038c0 <zentrale+0x1b8>)
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <zentrale+0x120>
			z_set_status_tend(ZERROR);
 8003822:	2001      	movs	r0, #1
 8003824:	f000 f85a 	bl	80038dc <z_set_status_tend>

		switch (z_status_tend) {
 8003828:	4b2a      	ldr	r3, [pc, #168]	@ (80038d4 <zentrale+0x1cc>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d002      	beq.n	8003836 <zentrale+0x12e>
 8003830:	2b0b      	cmp	r3, #11
 8003832:	d004      	beq.n	800383e <zentrale+0x136>
			z_status = ZERROR;
			break;
		case ACTIVE:
			z_status = ACTIVE;
		default:
			break;
 8003834:	e006      	b.n	8003844 <zentrale+0x13c>
			z_status = ZERROR;
 8003836:	4b23      	ldr	r3, [pc, #140]	@ (80038c4 <zentrale+0x1bc>)
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
			break;
 800383c:	e003      	b.n	8003846 <zentrale+0x13e>
			z_status = ACTIVE;
 800383e:	4b21      	ldr	r3, [pc, #132]	@ (80038c4 <zentrale+0x1bc>)
 8003840:	220b      	movs	r2, #11
 8003842:	701a      	strb	r2, [r3, #0]
			break;
 8003844:	bf00      	nop
		}
		z_status_tend = NOP;
 8003846:	4b23      	ldr	r3, [pc, #140]	@ (80038d4 <zentrale+0x1cc>)
 8003848:	22ff      	movs	r2, #255	@ 0xff
 800384a:	701a      	strb	r2, [r3, #0]
		break;
 800384c:	e02a      	b.n	80038a4 <zentrale+0x19c>

	case ACTIVE:
		if (z_status_h != ACTIVE) {
 800384e:	4b1e      	ldr	r3, [pc, #120]	@ (80038c8 <zentrale+0x1c0>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b0b      	cmp	r3, #11
 8003854:	d005      	beq.n	8003862 <zentrale+0x15a>
			z_rf_state = 1;
 8003856:	4b1d      	ldr	r3, [pc, #116]	@ (80038cc <zentrale+0x1c4>)
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
			z_status_h = ACTIVE;
 800385c:	4b1a      	ldr	r3, [pc, #104]	@ (80038c8 <zentrale+0x1c0>)
 800385e:	220b      	movs	r2, #11
 8003860:	701a      	strb	r2, [r3, #0]
		}

		if (z_error_akt != 0)
 8003862:	4b17      	ldr	r3, [pc, #92]	@ (80038c0 <zentrale+0x1b8>)
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <zentrale+0x168>
			z_set_status_tend(ZERROR);
 800386a:	2001      	movs	r0, #1
 800386c:	f000 f836 	bl	80038dc <z_set_status_tend>

		switch (z_status_tend) {
 8003870:	4b18      	ldr	r3, [pc, #96]	@ (80038d4 <zentrale+0x1cc>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d002      	beq.n	800387e <zentrale+0x176>
 8003878:	2b09      	cmp	r3, #9
 800387a:	d004      	beq.n	8003886 <zentrale+0x17e>
			z_status = ZERROR;
			break;
		case INACTIVE:
			z_status = INACTIVE;
		default:
			break;
 800387c:	e006      	b.n	800388c <zentrale+0x184>
			z_status = ZERROR;
 800387e:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <zentrale+0x1bc>)
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
			break;
 8003884:	e003      	b.n	800388e <zentrale+0x186>
			z_status = INACTIVE;
 8003886:	4b0f      	ldr	r3, [pc, #60]	@ (80038c4 <zentrale+0x1bc>)
 8003888:	2209      	movs	r2, #9
 800388a:	701a      	strb	r2, [r3, #0]
			break;
 800388c:	bf00      	nop
		}
		z_status_tend = NOP;
 800388e:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <zentrale+0x1cc>)
 8003890:	22ff      	movs	r2, #255	@ 0xff
 8003892:	701a      	strb	r2, [r3, #0]
		break;
 8003894:	e006      	b.n	80038a4 <zentrale+0x19c>

	default:
		z_status_tend = NOP;
 8003896:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <zentrale+0x1cc>)
 8003898:	22ff      	movs	r2, #255	@ 0xff
 800389a:	701a      	strb	r2, [r3, #0]
		z_status_h = NOP;
 800389c:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <zentrale+0x1c0>)
 800389e:	22ff      	movs	r2, #255	@ 0xff
 80038a0:	701a      	strb	r2, [r3, #0]
		break;
 80038a2:	bf00      	nop
	}
	z_error_kum |= z_error_akt;	// Eventuell aufgetretenen neuen Fehler zur kummulierten
 80038a4:	4b0a      	ldr	r3, [pc, #40]	@ (80038d0 <zentrale+0x1c8>)
 80038a6:	881a      	ldrh	r2, [r3, #0]
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <zentrale+0x1b8>)
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <zentrale+0x1c8>)
 80038b2:	801a      	strh	r2, [r3, #0]
	z_error_akt = 0;// Fehleranzeige für aktuell vorliegende Fehler zurücksetzen
 80038b4:	4b02      	ldr	r3, [pc, #8]	@ (80038c0 <zentrale+0x1b8>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	801a      	strh	r2, [r3, #0]

}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200012d0 	.word	0x200012d0
 80038c4:	200012cc 	.word	0x200012cc
 80038c8:	200012cd 	.word	0x200012cd
 80038cc:	200012d5 	.word	0x200012d5
 80038d0:	200012d2 	.word	0x200012d2
 80038d4:	200012ce 	.word	0x200012ce
 80038d8:	200012d4 	.word	0x200012d4

080038dc <z_set_status_tend>:


// Statuswunsch setzen
// Priorität:   error, inactive, start, active
void z_set_status_tend(uint8_t statnew) {
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	71fb      	strb	r3, [r7, #7]
	if (z_status_tend > statnew)
 80038e6:	4b07      	ldr	r3, [pc, #28]	@ (8003904 <z_set_status_tend+0x28>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	79fa      	ldrb	r2, [r7, #7]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d203      	bcs.n	80038f8 <z_set_status_tend+0x1c>
		z_status_tend = statnew;    // nur Status höherer Priorität übernehmen
 80038f0:	4a04      	ldr	r2, [pc, #16]	@ (8003904 <z_set_status_tend+0x28>)
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	7013      	strb	r3, [r2, #0]

	return;
 80038f6:	bf00      	nop
 80038f8:	bf00      	nop
}
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	200012ce 	.word	0x200012ce

08003908 <z_set_error>:
uint16_t z_get_error(void) {
	return z_error_kum;
}

// Fehler an Zentrale melden
void z_set_error(uint8_t errnr) {
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
	if (errnr <= 15)
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	2b0f      	cmp	r3, #15
 8003916:	d80c      	bhi.n	8003932 <z_set_error+0x2a>
		z_error_akt |= (1 << errnr);
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	2201      	movs	r2, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	b21a      	sxth	r2, r3
 8003922:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <z_set_error+0x38>)
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b21b      	sxth	r3, r3
 8003928:	4313      	orrs	r3, r2
 800392a:	b21b      	sxth	r3, r3
 800392c:	b29a      	uxth	r2, r3
 800392e:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <z_set_error+0x38>)
 8003930:	801a      	strh	r2, [r3, #0]
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	200012d0 	.word	0x200012d0

08003944 <z_mfc_set>:
	}
	return CMR_SUCCESSFULL;
}


uint8_t z_mfc_set(uint8_t idx, uint16_t val) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	460a      	mov	r2, r1
 800394e:	71fb      	strb	r3, [r7, #7]
 8003950:	4613      	mov	r3, r2
 8003952:	80bb      	strh	r3, [r7, #4]
    GbReply r;
    return gasbox_xfer(kMfc[idx].cmd_set, val, &r, GB_TIMEOUT_MS) && (r.status == GB_STATUS_OK);
 8003954:	79fa      	ldrb	r2, [r7, #7]
 8003956:	490d      	ldr	r1, [pc, #52]	@ (800398c <z_mfc_set+0x48>)
 8003958:	4613      	mov	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4413      	add	r3, r2
 800395e:	440b      	add	r3, r1
 8003960:	7818      	ldrb	r0, [r3, #0]
 8003962:	f107 020c 	add.w	r2, r7, #12
 8003966:	88b9      	ldrh	r1, [r7, #4]
 8003968:	2302      	movs	r3, #2
 800396a:	f7fd f9ab 	bl	8000cc4 <gasbox_xfer>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d004      	beq.n	800397e <z_mfc_set+0x3a>
 8003974:	7b7b      	ldrb	r3, [r7, #13]
 8003976:	2b80      	cmp	r3, #128	@ 0x80
 8003978:	d101      	bne.n	800397e <z_mfc_set+0x3a>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <z_mfc_set+0x3c>
 800397e:	2300      	movs	r3, #0
 8003980:	b2db      	uxtb	r3, r3
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	08009bd4 	.word	0x08009bd4

08003990 <z_mfc_get>:
uint8_t z_mfc_get(uint8_t idx, uint16_t *out) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	6039      	str	r1, [r7, #0]
 800399a:	71fb      	strb	r3, [r7, #7]
    GbReply r;
    if (!gasbox_xfer(kMfc[idx].cmd_get, 0, &r, GB_TIMEOUT_MS) || r.status != GB_STATUS_OK) return 0;
 800399c:	79fa      	ldrb	r2, [r7, #7]
 800399e:	490e      	ldr	r1, [pc, #56]	@ (80039d8 <z_mfc_get+0x48>)
 80039a0:	4613      	mov	r3, r2
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4413      	add	r3, r2
 80039a6:	440b      	add	r3, r1
 80039a8:	3301      	adds	r3, #1
 80039aa:	7818      	ldrb	r0, [r3, #0]
 80039ac:	f107 020c 	add.w	r2, r7, #12
 80039b0:	2302      	movs	r3, #2
 80039b2:	2100      	movs	r1, #0
 80039b4:	f7fd f986 	bl	8000cc4 <gasbox_xfer>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <z_mfc_get+0x34>
 80039be:	7b7b      	ldrb	r3, [r7, #13]
 80039c0:	2b80      	cmp	r3, #128	@ 0x80
 80039c2:	d001      	beq.n	80039c8 <z_mfc_get+0x38>
 80039c4:	2300      	movs	r3, #0
 80039c6:	e003      	b.n	80039d0 <z_mfc_get+0x40>
    *out = r.value; return 1;
 80039c8:	89fa      	ldrh	r2, [r7, #14]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	801a      	strh	r2, [r3, #0]
 80039ce:	2301      	movs	r3, #1
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	08009bd4 	.word	0x08009bd4

080039dc <z_mfc_close>:
uint8_t z_mfc_close(uint8_t idx) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
    GbReply r;
    return gasbox_xfer(kMfc[idx].cmd_close, 0, &r, GB_TIMEOUT_MS) && (r.status == GB_STATUS_OK);
 80039e6:	79fa      	ldrb	r2, [r7, #7]
 80039e8:	490d      	ldr	r1, [pc, #52]	@ (8003a20 <z_mfc_close+0x44>)
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	440b      	add	r3, r1
 80039f2:	3302      	adds	r3, #2
 80039f4:	7818      	ldrb	r0, [r3, #0]
 80039f6:	f107 020c 	add.w	r2, r7, #12
 80039fa:	2302      	movs	r3, #2
 80039fc:	2100      	movs	r1, #0
 80039fe:	f7fd f961 	bl	8000cc4 <gasbox_xfer>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d004      	beq.n	8003a12 <z_mfc_close+0x36>
 8003a08:	7b7b      	ldrb	r3, [r7, #13]
 8003a0a:	2b80      	cmp	r3, #128	@ 0x80
 8003a0c:	d101      	bne.n	8003a12 <z_mfc_close+0x36>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <z_mfc_close+0x38>
 8003a12:	2300      	movs	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	08009bd4 	.word	0x08009bd4

08003a24 <gb_do>:

static inline uint8_t gb_do(uint8_t cmd, uint16_t param) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	460a      	mov	r2, r1
 8003a2e:	71fb      	strb	r3, [r7, #7]
 8003a30:	4613      	mov	r3, r2
 8003a32:	80bb      	strh	r3, [r7, #4]
    GbReply r;
    return gasbox_xfer(cmd, param, &r, GB_TIMEOUT_MS) && (r.status == GB_STATUS_OK);
 8003a34:	f107 020c 	add.w	r2, r7, #12
 8003a38:	88b9      	ldrh	r1, [r7, #4]
 8003a3a:	79f8      	ldrb	r0, [r7, #7]
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	f7fd f941 	bl	8000cc4 <gasbox_xfer>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <gb_do+0x2e>
 8003a48:	7b7b      	ldrb	r3, [r7, #13]
 8003a4a:	2b80      	cmp	r3, #128	@ 0x80
 8003a4c:	d101      	bne.n	8003a52 <gb_do+0x2e>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <gb_do+0x30>
 8003a52:	2300      	movs	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <gb_get16>:

static inline uint8_t gb_get16(uint8_t cmd, uint16_t *out) {
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	4603      	mov	r3, r0
 8003a66:	6039      	str	r1, [r7, #0]
 8003a68:	71fb      	strb	r3, [r7, #7]
    GbReply r;
    if (!gasbox_xfer(cmd, 0, &r, GB_TIMEOUT_MS) || r.status != GB_STATUS_OK) return 0;
 8003a6a:	f107 020c 	add.w	r2, r7, #12
 8003a6e:	79f8      	ldrb	r0, [r7, #7]
 8003a70:	2302      	movs	r3, #2
 8003a72:	2100      	movs	r1, #0
 8003a74:	f7fd f926 	bl	8000cc4 <gasbox_xfer>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <gb_get16+0x26>
 8003a7e:	7b7b      	ldrb	r3, [r7, #13]
 8003a80:	2b80      	cmp	r3, #128	@ 0x80
 8003a82:	d001      	beq.n	8003a88 <gb_get16+0x2a>
 8003a84:	2300      	movs	r3, #0
 8003a86:	e003      	b.n	8003a90 <gb_get16+0x32>
    *out = r.value; return 1;
 8003a88:	89fa      	ldrh	r2, [r7, #14]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	801a      	strh	r2, [r3, #0]
 8003a8e:	2301      	movs	r3, #1
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <z_valve_open>:

uint8_t z_valve_open(uint8_t idx)  {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
	return gb_do(idx==3 ? GB_CMD_VALVE3_OPEN  : GB_CMD_VALVE4_OPEN, 0);
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d101      	bne.n	8003aac <z_valve_open+0x14>
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	e000      	b.n	8003aae <z_valve_open+0x16>
 8003aac:	230d      	movs	r3, #13
 8003aae:	2100      	movs	r1, #0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff ffb7 	bl	8003a24 <gb_do>
 8003ab6:	4603      	mov	r3, r0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <z_valve_close>:
uint8_t z_valve_close(uint8_t idx) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
	return gb_do(idx==3 ? GB_CMD_VALVE3_CLOSE : GB_CMD_VALVE4_CLOSE, 0);
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d101      	bne.n	8003ad4 <z_valve_close+0x14>
 8003ad0:	230a      	movs	r3, #10
 8003ad2:	e000      	b.n	8003ad6 <z_valve_close+0x16>
 8003ad4:	230b      	movs	r3, #11
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff ffa3 	bl	8003a24 <gb_do>
 8003ade:	4603      	mov	r3, r0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <z_valve_get>:
uint8_t z_valve_get(uint8_t idx, uint16_t *state) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	6039      	str	r1, [r7, #0]
 8003af2:	71fb      	strb	r3, [r7, #7]
    return gb_get16(idx==3 ? GB_CMD_VALVE3_GET : GB_CMD_VALVE4_GET, state);
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d101      	bne.n	8003afe <z_valve_get+0x16>
 8003afa:	230e      	movs	r3, #14
 8003afc:	e000      	b.n	8003b00 <z_valve_get+0x18>
 8003afe:	230f      	movs	r3, #15
 8003b00:	6839      	ldr	r1, [r7, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ffab 	bl	8003a5e <gb_get16>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <z_gb_err_clr>:
uint8_t z_gb_err_clr(){
 8003b12:	b580      	push	{r7, lr}
 8003b14:	af00      	add	r7, sp, #0
	return gb_do(GB_CMD_CLR_ERR, 0) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003b16:	2100      	movs	r1, #0
 8003b18:	2011      	movs	r0, #17
 8003b1a:	f7ff ff83 	bl	8003a24 <gb_do>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <z_gb_err_clr+0x16>
 8003b24:	2380      	movs	r3, #128	@ 0x80
 8003b26:	e000      	b.n	8003b2a <z_gb_err_clr+0x18>
 8003b28:	2307      	movs	r3, #7
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <z_gb_err_get>:
uint8_t z_gb_err_get(uint16_t *out_err) {
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
    return gb_get16(GB_CMD_GET_ERR, out_err) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	2010      	movs	r0, #16
 8003b3a:	f7ff ff90 	bl	8003a5e <gb_get16>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <z_gb_err_get+0x1a>
 8003b44:	2380      	movs	r3, #128	@ 0x80
 8003b46:	e000      	b.n	8003b4a <z_gb_err_get+0x1c>
 8003b48:	2307      	movs	r3, #7
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <z_cmd_scheduler>:

//--- FUNKTIONSDEKLARATIONS -------------------------------------------------------------------------------------------------
//die Mechanimus zur Verarbeitung der Befehle mit den unterschiedlichen Prioritäten
//--- FUNKTIONSDEFINITIONS --------------------------------------------------------------------------------------------------
void z_cmd_scheduler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
	uint8_t priolevel0_null_flg = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]
	uint8_t priolevel1_null_flg = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	75bb      	strb	r3, [r7, #22]
	uint8_t priolevel2_null_flg = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	757b      	strb	r3, [r7, #21]

	uint8_t cmdcount = 0;                       //Zähler für die zu verarbeitenden Befehle
 8003b66:	2300      	movs	r3, #0
 8003b68:	753b      	strb	r3, [r7, #20]
	uint8_t cmd_flg = 0;                       //Falls cmd_flg = 1 ist, d.h. keinen Befehl zu verarbeiten; cmd_flg = 0, d.h. noch Befehl zu verarbeiten
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	74fb      	strb	r3, [r7, #19]
	stack_item cmd;

	uint8_t resultflg = get_anzFrei_resultQueue();
 8003b6e:	f7fe fb6f 	bl	8002250 <get_anzFrei_resultQueue>
 8003b72:	4603      	mov	r3, r0
 8003b74:	74bb      	strb	r3, [r7, #18]

	if (resultflg > 1 )            //prüft, ob es noch freien Platz in resultqueue.
 8003b76:	7cbb      	ldrb	r3, [r7, #18]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d953      	bls.n	8003c24 <z_cmd_scheduler+0xd0>
	{
		do
		{
			while ((cmdcount < Z_MAX_HIGHPRIO_NUM) && (priolevel0_null_flg == 0))
 8003b7c:	e012      	b.n	8003ba4 <z_cmd_scheduler+0x50>
			{
				if (z_priolevel_header[PRIO_LEVEL0] != NONEXT)
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c2c <z_cmd_scheduler+0xd8>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2bff      	cmp	r3, #255	@ 0xff
 8003b84:	d00c      	beq.n	8003ba0 <z_cmd_scheduler+0x4c>
				{
					zstack_pop(&cmd, PRIO_LEVEL0);
 8003b86:	463b      	mov	r3, r7
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe fe8a 	bl	80028a4 <zstack_pop>
					z_cmd_sero(cmd);
 8003b90:	463b      	mov	r3, r7
 8003b92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b94:	f000 f84c 	bl	8003c30 <z_cmd_sero>
					cmdcount++;
 8003b98:	7d3b      	ldrb	r3, [r7, #20]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	753b      	strb	r3, [r7, #20]
 8003b9e:	e001      	b.n	8003ba4 <z_cmd_scheduler+0x50>

				}
				else
				{
					priolevel0_null_flg = 1;      //es gibt keinen Befehl in der Prioritätliste mit Level 0
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	75fb      	strb	r3, [r7, #23]
			while ((cmdcount < Z_MAX_HIGHPRIO_NUM) && (priolevel0_null_flg == 0))
 8003ba4:	7d3b      	ldrb	r3, [r7, #20]
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d802      	bhi.n	8003bb0 <z_cmd_scheduler+0x5c>
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0e6      	beq.n	8003b7e <z_cmd_scheduler+0x2a>
				};
			};

			if (z_priolevel_header[PRIO_LEVEL1] != NONEXT)
 8003bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c2c <z_cmd_scheduler+0xd8>)
 8003bb2:	785b      	ldrb	r3, [r3, #1]
 8003bb4:	2bff      	cmp	r3, #255	@ 0xff
 8003bb6:	d00f      	beq.n	8003bd8 <z_cmd_scheduler+0x84>
			{
				if (cmdcount < Z_MAXCMD)
 8003bb8:	7d3b      	ldrb	r3, [r7, #20]
 8003bba:	2b09      	cmp	r3, #9
 8003bbc:	d80e      	bhi.n	8003bdc <z_cmd_scheduler+0x88>
				{
					zstack_pop(&cmd, PRIO_LEVEL1);
 8003bbe:	463b      	mov	r3, r7
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fe6e 	bl	80028a4 <zstack_pop>
					z_cmd_sero(cmd);
 8003bc8:	463b      	mov	r3, r7
 8003bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bcc:	f000 f830 	bl	8003c30 <z_cmd_sero>
					cmdcount++;
 8003bd0:	7d3b      	ldrb	r3, [r7, #20]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	753b      	strb	r3, [r7, #20]
 8003bd6:	e001      	b.n	8003bdc <z_cmd_scheduler+0x88>

				};
			}
			else
			{
				priolevel1_null_flg = 1;   //es gibt keinen Befehl in der Prioritätliste mit Level 1
 8003bd8:	2301      	movs	r3, #1
 8003bda:	75bb      	strb	r3, [r7, #22]
			};

			if (z_priolevel_header[PRIO_LEVEL2] != NONEXT)
 8003bdc:	4b13      	ldr	r3, [pc, #76]	@ (8003c2c <z_cmd_scheduler+0xd8>)
 8003bde:	789b      	ldrb	r3, [r3, #2]
 8003be0:	2bff      	cmp	r3, #255	@ 0xff
 8003be2:	d00f      	beq.n	8003c04 <z_cmd_scheduler+0xb0>
			{
				if (cmdcount < Z_MAXCMD)
 8003be4:	7d3b      	ldrb	r3, [r7, #20]
 8003be6:	2b09      	cmp	r3, #9
 8003be8:	d80e      	bhi.n	8003c08 <z_cmd_scheduler+0xb4>
				{
					zstack_pop(&cmd, PRIO_LEVEL2);
 8003bea:	463b      	mov	r3, r7
 8003bec:	2102      	movs	r1, #2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fe58 	bl	80028a4 <zstack_pop>
					z_cmd_sero(cmd);
 8003bf4:	463b      	mov	r3, r7
 8003bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bf8:	f000 f81a 	bl	8003c30 <z_cmd_sero>
					cmdcount++;
 8003bfc:	7d3b      	ldrb	r3, [r7, #20]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	753b      	strb	r3, [r7, #20]
 8003c02:	e001      	b.n	8003c08 <z_cmd_scheduler+0xb4>
				};
			}
			else
			{
				priolevel2_null_flg = 1;   //es gibt keinen Befehl in der Prioritätliste mit Level 2
 8003c04:	2301      	movs	r3, #1
 8003c06:	757b      	strb	r3, [r7, #21]
			};

			//prüft, ob die drei Prioritätslisten alle leer sind.
			cmd_flg = priolevel0_null_flg & priolevel1_null_flg;
 8003c08:	7dfa      	ldrb	r2, [r7, #23]
 8003c0a:	7dbb      	ldrb	r3, [r7, #22]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	74fb      	strb	r3, [r7, #19]
			cmd_flg &= priolevel2_null_flg;
 8003c10:	7cfa      	ldrb	r2, [r7, #19]
 8003c12:	7d7b      	ldrb	r3, [r7, #21]
 8003c14:	4013      	ands	r3, r2
 8003c16:	74fb      	strb	r3, [r7, #19]

		}while ( (cmdcount < Z_MAXCMD) && (cmd_flg == 0));
 8003c18:	7d3b      	ldrb	r3, [r7, #20]
 8003c1a:	2b09      	cmp	r3, #9
 8003c1c:	d802      	bhi.n	8003c24 <z_cmd_scheduler+0xd0>
 8003c1e:	7cfb      	ldrb	r3, [r7, #19]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0bf      	beq.n	8003ba4 <z_cmd_scheduler+0x50>
	};

}
 8003c24:	bf00      	nop
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000178 	.word	0x20000178

08003c30 <z_cmd_sero>:

void z_cmd_sero(stack_item cmd) {
 8003c30:	b590      	push	{r4, r7, lr}
 8003c32:	b08b      	sub	sp, #44	@ 0x2c
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	463c      	mov	r4, r7
 8003c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch (cmd.cmd_index) {
 8003c3c:	887b      	ldrh	r3, [r7, #2]
 8003c3e:	3b0a      	subs	r3, #10
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	f200 816d 	bhi.w	8003f20 <z_cmd_sero+0x2f0>
 8003c46:	a201      	add	r2, pc, #4	@ (adr r2, 8003c4c <z_cmd_sero+0x1c>)
 8003c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4c:	08003efd 	.word	0x08003efd
 8003c50:	08003f17 	.word	0x08003f17
 8003c54:	08003f21 	.word	0x08003f21
 8003c58:	08003f21 	.word	0x08003f21
 8003c5c:	08003f21 	.word	0x08003f21
 8003c60:	08003f21 	.word	0x08003f21
 8003c64:	08003f21 	.word	0x08003f21
 8003c68:	08003f21 	.word	0x08003f21
 8003c6c:	08003f21 	.word	0x08003f21
 8003c70:	08003f21 	.word	0x08003f21
 8003c74:	08003e09 	.word	0x08003e09
 8003c78:	08003f21 	.word	0x08003f21
 8003c7c:	08003e1f 	.word	0x08003e1f
 8003c80:	08003f21 	.word	0x08003f21
 8003c84:	08003cd1 	.word	0x08003cd1
 8003c88:	08003d69 	.word	0x08003d69
 8003c8c:	08003cf7 	.word	0x08003cf7
 8003c90:	08003d91 	.word	0x08003d91
 8003c94:	08003d1d 	.word	0x08003d1d
 8003c98:	08003db9 	.word	0x08003db9
 8003c9c:	08003d43 	.word	0x08003d43
 8003ca0:	08003de1 	.word	0x08003de1
 8003ca4:	08003e77 	.word	0x08003e77
 8003ca8:	08003e8d 	.word	0x08003e8d
 8003cac:	08003e61 	.word	0x08003e61
 8003cb0:	08003f21 	.word	0x08003f21
 8003cb4:	08003ec5 	.word	0x08003ec5
 8003cb8:	08003edb 	.word	0x08003edb
 8003cbc:	08003eaf 	.word	0x08003eaf
 8003cc0:	08003f21 	.word	0x08003f21
 8003cc4:	08003e35 	.word	0x08003e35
 8003cc8:	08003f21 	.word	0x08003f21
 8003ccc:	08003e4b 	.word	0x08003e4b

	// MFC1..MFC4 SET
	case CMD_MFC1_SET: {
		uint16_t p = clamp16(cmd.parameter);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fc fdcd 	bl	8000872 <clamp16>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	843b      	strh	r3, [r7, #32]
		cmd.cmd_ack = z_mfc_set(0, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003cdc:	8c3b      	ldrh	r3, [r7, #32]
 8003cde:	4619      	mov	r1, r3
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f7ff fe2f 	bl	8003944 <z_mfc_set>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <z_cmd_sero+0xc0>
 8003cec:	2380      	movs	r3, #128	@ 0x80
 8003cee:	e000      	b.n	8003cf2 <z_cmd_sero+0xc2>
 8003cf0:	2307      	movs	r3, #7
 8003cf2:	713b      	strb	r3, [r7, #4]
		break;
 8003cf4:	e120      	b.n	8003f38 <z_cmd_sero+0x308>
	}
	case CMD_MFC2_SET: {
		uint16_t p = clamp16(cmd.parameter);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fc fdba 	bl	8000872 <clamp16>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	847b      	strh	r3, [r7, #34]	@ 0x22
		cmd.cmd_ack = z_mfc_set(1, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003d02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003d04:	4619      	mov	r1, r3
 8003d06:	2001      	movs	r0, #1
 8003d08:	f7ff fe1c 	bl	8003944 <z_mfc_set>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <z_cmd_sero+0xe6>
 8003d12:	2380      	movs	r3, #128	@ 0x80
 8003d14:	e000      	b.n	8003d18 <z_cmd_sero+0xe8>
 8003d16:	2307      	movs	r3, #7
 8003d18:	713b      	strb	r3, [r7, #4]
		break;
 8003d1a:	e10d      	b.n	8003f38 <z_cmd_sero+0x308>
	}
	case CMD_MFC3_SET: {
		uint16_t p = clamp16(cmd.parameter);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fc fda7 	bl	8000872 <clamp16>
 8003d24:	4603      	mov	r3, r0
 8003d26:	84bb      	strh	r3, [r7, #36]	@ 0x24
		cmd.cmd_ack = z_mfc_set(2, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003d28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	2002      	movs	r0, #2
 8003d2e:	f7ff fe09 	bl	8003944 <z_mfc_set>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <z_cmd_sero+0x10c>
 8003d38:	2380      	movs	r3, #128	@ 0x80
 8003d3a:	e000      	b.n	8003d3e <z_cmd_sero+0x10e>
 8003d3c:	2307      	movs	r3, #7
 8003d3e:	713b      	strb	r3, [r7, #4]
		break;
 8003d40:	e0fa      	b.n	8003f38 <z_cmd_sero+0x308>
	}
	case CMD_MFC4_SET: {
		uint16_t p = clamp16(cmd.parameter);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fc fd94 	bl	8000872 <clamp16>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
		cmd.cmd_ack = z_mfc_set(3, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003d4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003d50:	4619      	mov	r1, r3
 8003d52:	2003      	movs	r0, #3
 8003d54:	f7ff fdf6 	bl	8003944 <z_mfc_set>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <z_cmd_sero+0x132>
 8003d5e:	2380      	movs	r3, #128	@ 0x80
 8003d60:	e000      	b.n	8003d64 <z_cmd_sero+0x134>
 8003d62:	2307      	movs	r3, #7
 8003d64:	713b      	strb	r3, [r7, #4]
		break;
 8003d66:	e0e7      	b.n	8003f38 <z_cmd_sero+0x308>
	}

	// MFC1..MFC4 GET
	case CMD_MFC1_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(0, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003d68:	f107 031e 	add.w	r3, r7, #30
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f7ff fe0e 	bl	8003990 <z_mfc_get>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <z_cmd_sero+0x14e>
 8003d7a:	2380      	movs	r3, #128	@ 0x80
 8003d7c:	e000      	b.n	8003d80 <z_cmd_sero+0x150>
 8003d7e:	2307      	movs	r3, #7
 8003d80:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 8003d82:	793b      	ldrb	r3, [r7, #4]
 8003d84:	2b80      	cmp	r3, #128	@ 0x80
 8003d86:	f040 80ce 	bne.w	8003f26 <z_cmd_sero+0x2f6>
			cmd.parameter = v;
 8003d8a:	8bfb      	ldrh	r3, [r7, #30]
 8003d8c:	60bb      	str	r3, [r7, #8]
		break;
 8003d8e:	e0ca      	b.n	8003f26 <z_cmd_sero+0x2f6>
	}
	case CMD_MFC2_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(1, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003d90:	f107 031c 	add.w	r3, r7, #28
 8003d94:	4619      	mov	r1, r3
 8003d96:	2001      	movs	r0, #1
 8003d98:	f7ff fdfa 	bl	8003990 <z_mfc_get>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <z_cmd_sero+0x176>
 8003da2:	2380      	movs	r3, #128	@ 0x80
 8003da4:	e000      	b.n	8003da8 <z_cmd_sero+0x178>
 8003da6:	2307      	movs	r3, #7
 8003da8:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 8003daa:	793b      	ldrb	r3, [r7, #4]
 8003dac:	2b80      	cmp	r3, #128	@ 0x80
 8003dae:	f040 80bc 	bne.w	8003f2a <z_cmd_sero+0x2fa>
			cmd.parameter = v;
 8003db2:	8bbb      	ldrh	r3, [r7, #28]
 8003db4:	60bb      	str	r3, [r7, #8]
		break;
 8003db6:	e0b8      	b.n	8003f2a <z_cmd_sero+0x2fa>
	}
	case CMD_MFC3_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(2, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003db8:	f107 031a 	add.w	r3, r7, #26
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	2002      	movs	r0, #2
 8003dc0:	f7ff fde6 	bl	8003990 <z_mfc_get>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <z_cmd_sero+0x19e>
 8003dca:	2380      	movs	r3, #128	@ 0x80
 8003dcc:	e000      	b.n	8003dd0 <z_cmd_sero+0x1a0>
 8003dce:	2307      	movs	r3, #7
 8003dd0:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 8003dd2:	793b      	ldrb	r3, [r7, #4]
 8003dd4:	2b80      	cmp	r3, #128	@ 0x80
 8003dd6:	f040 80aa 	bne.w	8003f2e <z_cmd_sero+0x2fe>
			cmd.parameter = v;
 8003dda:	8b7b      	ldrh	r3, [r7, #26]
 8003ddc:	60bb      	str	r3, [r7, #8]
		break;
 8003dde:	e0a6      	b.n	8003f2e <z_cmd_sero+0x2fe>
	}
	case CMD_MFC4_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(3, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003de0:	f107 0318 	add.w	r3, r7, #24
 8003de4:	4619      	mov	r1, r3
 8003de6:	2003      	movs	r0, #3
 8003de8:	f7ff fdd2 	bl	8003990 <z_mfc_get>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <z_cmd_sero+0x1c6>
 8003df2:	2380      	movs	r3, #128	@ 0x80
 8003df4:	e000      	b.n	8003df8 <z_cmd_sero+0x1c8>
 8003df6:	2307      	movs	r3, #7
 8003df8:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 8003dfa:	793b      	ldrb	r3, [r7, #4]
 8003dfc:	2b80      	cmp	r3, #128	@ 0x80
 8003dfe:	f040 8098 	bne.w	8003f32 <z_cmd_sero+0x302>
			cmd.parameter = v;
 8003e02:	8b3b      	ldrh	r3, [r7, #24]
 8003e04:	60bb      	str	r3, [r7, #8]
		break;
 8003e06:	e094      	b.n	8003f32 <z_cmd_sero+0x302>
	}

	// MFC1..MFC4 CLOSE
	case CMD_MFC1_CLOSE: {
		cmd.cmd_ack = z_mfc_close(0) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003e08:	2000      	movs	r0, #0
 8003e0a:	f7ff fde7 	bl	80039dc <z_mfc_close>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <z_cmd_sero+0x1e8>
 8003e14:	2380      	movs	r3, #128	@ 0x80
 8003e16:	e000      	b.n	8003e1a <z_cmd_sero+0x1ea>
 8003e18:	2307      	movs	r3, #7
 8003e1a:	713b      	strb	r3, [r7, #4]
		break;
 8003e1c:	e08c      	b.n	8003f38 <z_cmd_sero+0x308>
	}
	case CMD_MFC2_CLOSE: {
		cmd.cmd_ack = z_mfc_close(1) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003e1e:	2001      	movs	r0, #1
 8003e20:	f7ff fddc 	bl	80039dc <z_mfc_close>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <z_cmd_sero+0x1fe>
 8003e2a:	2380      	movs	r3, #128	@ 0x80
 8003e2c:	e000      	b.n	8003e30 <z_cmd_sero+0x200>
 8003e2e:	2307      	movs	r3, #7
 8003e30:	713b      	strb	r3, [r7, #4]
		break;
 8003e32:	e081      	b.n	8003f38 <z_cmd_sero+0x308>
	}
	case CMD_MFC3_CLOSE: {
		cmd.cmd_ack = z_mfc_close(2) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003e34:	2002      	movs	r0, #2
 8003e36:	f7ff fdd1 	bl	80039dc <z_mfc_close>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <z_cmd_sero+0x214>
 8003e40:	2380      	movs	r3, #128	@ 0x80
 8003e42:	e000      	b.n	8003e46 <z_cmd_sero+0x216>
 8003e44:	2307      	movs	r3, #7
 8003e46:	713b      	strb	r3, [r7, #4]
		break;
 8003e48:	e076      	b.n	8003f38 <z_cmd_sero+0x308>
	}
	case CMD_MFC4_CLOSE: {
		cmd.cmd_ack = z_mfc_close(3) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003e4a:	2003      	movs	r0, #3
 8003e4c:	f7ff fdc6 	bl	80039dc <z_mfc_close>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <z_cmd_sero+0x22a>
 8003e56:	2380      	movs	r3, #128	@ 0x80
 8003e58:	e000      	b.n	8003e5c <z_cmd_sero+0x22c>
 8003e5a:	2307      	movs	r3, #7
 8003e5c:	713b      	strb	r3, [r7, #4]
		break;
 8003e5e:	e06b      	b.n	8003f38 <z_cmd_sero+0x308>
	}

	// Valves OPEN-CLOSE-READ
	case CMD_V3_OPEN: {
	    cmd.cmd_ack = z_valve_open(3) ? CMR_SUCCESSFULL : CMR_UNITBUSY;
 8003e60:	2003      	movs	r0, #3
 8003e62:	f7ff fe19 	bl	8003a98 <z_valve_open>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <z_cmd_sero+0x240>
 8003e6c:	2380      	movs	r3, #128	@ 0x80
 8003e6e:	e000      	b.n	8003e72 <z_cmd_sero+0x242>
 8003e70:	2309      	movs	r3, #9
 8003e72:	713b      	strb	r3, [r7, #4]
	    break;
 8003e74:	e060      	b.n	8003f38 <z_cmd_sero+0x308>
	}
	case CMD_V3_CLOSE: {
	    cmd.cmd_ack = z_valve_close(3) ? CMR_SUCCESSFULL : CMR_UNITBUSY;
 8003e76:	2003      	movs	r0, #3
 8003e78:	f7ff fe22 	bl	8003ac0 <z_valve_close>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <z_cmd_sero+0x256>
 8003e82:	2380      	movs	r3, #128	@ 0x80
 8003e84:	e000      	b.n	8003e88 <z_cmd_sero+0x258>
 8003e86:	2309      	movs	r3, #9
 8003e88:	713b      	strb	r3, [r7, #4]
	    break;
 8003e8a:	e055      	b.n	8003f38 <z_cmd_sero+0x308>
	}
	case CMD_V3_READ: {
	    uint16_t st;
	    if (z_valve_get(3, &st)) { cmd.parameter = st; cmd.cmd_ack = CMR_SUCCESSFULL; }
 8003e8c:	f107 0316 	add.w	r3, r7, #22
 8003e90:	4619      	mov	r1, r3
 8003e92:	2003      	movs	r0, #3
 8003e94:	f7ff fe28 	bl	8003ae8 <z_valve_get>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <z_cmd_sero+0x278>
 8003e9e:	8afb      	ldrh	r3, [r7, #22]
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	2380      	movs	r3, #128	@ 0x80
 8003ea4:	713b      	strb	r3, [r7, #4]
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
	    break;
 8003ea6:	e047      	b.n	8003f38 <z_cmd_sero+0x308>
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
 8003ea8:	2307      	movs	r3, #7
 8003eaa:	713b      	strb	r3, [r7, #4]
	    break;
 8003eac:	e044      	b.n	8003f38 <z_cmd_sero+0x308>
	}

	case CMD_V4_OPEN: {
	    cmd.cmd_ack = z_valve_open(4) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003eae:	2004      	movs	r0, #4
 8003eb0:	f7ff fdf2 	bl	8003a98 <z_valve_open>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <z_cmd_sero+0x28e>
 8003eba:	2380      	movs	r3, #128	@ 0x80
 8003ebc:	e000      	b.n	8003ec0 <z_cmd_sero+0x290>
 8003ebe:	2307      	movs	r3, #7
 8003ec0:	713b      	strb	r3, [r7, #4]
	    break;
 8003ec2:	e039      	b.n	8003f38 <z_cmd_sero+0x308>
	}
	case CMD_V4_CLOSE: {
	    cmd.cmd_ack = z_valve_close(4) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8003ec4:	2004      	movs	r0, #4
 8003ec6:	f7ff fdfb 	bl	8003ac0 <z_valve_close>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <z_cmd_sero+0x2a4>
 8003ed0:	2380      	movs	r3, #128	@ 0x80
 8003ed2:	e000      	b.n	8003ed6 <z_cmd_sero+0x2a6>
 8003ed4:	2307      	movs	r3, #7
 8003ed6:	713b      	strb	r3, [r7, #4]
	    break;
 8003ed8:	e02e      	b.n	8003f38 <z_cmd_sero+0x308>
	}
	case CMD_V4_READ: {
	    uint16_t st;
	    if (z_valve_get(4, &st)) { cmd.parameter = st; cmd.cmd_ack = CMR_SUCCESSFULL; }
 8003eda:	f107 0314 	add.w	r3, r7, #20
 8003ede:	4619      	mov	r1, r3
 8003ee0:	2004      	movs	r0, #4
 8003ee2:	f7ff fe01 	bl	8003ae8 <z_valve_get>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d004      	beq.n	8003ef6 <z_cmd_sero+0x2c6>
 8003eec:	8abb      	ldrh	r3, [r7, #20]
 8003eee:	60bb      	str	r3, [r7, #8]
 8003ef0:	2380      	movs	r3, #128	@ 0x80
 8003ef2:	713b      	strb	r3, [r7, #4]
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
	    break;
 8003ef4:	e020      	b.n	8003f38 <z_cmd_sero+0x308>
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
 8003ef6:	2307      	movs	r3, #7
 8003ef8:	713b      	strb	r3, [r7, #4]
	    break;
 8003efa:	e01d      	b.n	8003f38 <z_cmd_sero+0x308>
	}

	// GET SET ERR GASBOX
	case CMD_GET_ERR_GB: {
	    uint16_t e;
	    cmd.cmd_ack = z_gb_err_get(&e);
 8003efc:	f107 0312 	add.w	r3, r7, #18
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fe14 	bl	8003b2e <z_gb_err_get>
 8003f06:	4603      	mov	r3, r0
 8003f08:	713b      	strb	r3, [r7, #4]
	    if (cmd.cmd_ack == CMR_SUCCESSFULL) cmd.parameter = e;
 8003f0a:	793b      	ldrb	r3, [r7, #4]
 8003f0c:	2b80      	cmp	r3, #128	@ 0x80
 8003f0e:	d112      	bne.n	8003f36 <z_cmd_sero+0x306>
 8003f10:	8a7b      	ldrh	r3, [r7, #18]
 8003f12:	60bb      	str	r3, [r7, #8]
	    break;
 8003f14:	e00f      	b.n	8003f36 <z_cmd_sero+0x306>
	}
	case CMD_RESET_ERR_GB: {
	    cmd.cmd_ack = z_gb_err_clr();
 8003f16:	f7ff fdfc 	bl	8003b12 <z_gb_err_clr>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	713b      	strb	r3, [r7, #4]
	    break;
 8003f1e:	e00b      	b.n	8003f38 <z_cmd_sero+0x308>
	}


	default:
		cmd.cmd_ack = CMR_UNKNOWNCOMMAND;
 8003f20:	2306      	movs	r3, #6
 8003f22:	713b      	strb	r3, [r7, #4]
		break;
 8003f24:	e008      	b.n	8003f38 <z_cmd_sero+0x308>
		break;
 8003f26:	bf00      	nop
 8003f28:	e006      	b.n	8003f38 <z_cmd_sero+0x308>
		break;
 8003f2a:	bf00      	nop
 8003f2c:	e004      	b.n	8003f38 <z_cmd_sero+0x308>
		break;
 8003f2e:	bf00      	nop
 8003f30:	e002      	b.n	8003f38 <z_cmd_sero+0x308>
		break;
 8003f32:	bf00      	nop
 8003f34:	e000      	b.n	8003f38 <z_cmd_sero+0x308>
	    break;
 8003f36:	bf00      	nop
	};
	resultQueue_push(cmd);
 8003f38:	463b      	mov	r3, r7
 8003f3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f3c:	f7fe f9c8 	bl	80022d0 <resultQueue_push>

}
 8003f40:	bf00      	nop
 8003f42:	372c      	adds	r7, #44	@ 0x2c
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd90      	pop	{r4, r7, pc}

08003f48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003f48:	480d      	ldr	r0, [pc, #52]	@ (8003f80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f4a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f4c:	f7fe fd7a 	bl	8002a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f50:	480c      	ldr	r0, [pc, #48]	@ (8003f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f52:	490d      	ldr	r1, [pc, #52]	@ (8003f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f54:	4a0d      	ldr	r2, [pc, #52]	@ (8003f8c <LoopForever+0xe>)
  movs r3, #0
 8003f56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003f58:	e002      	b.n	8003f60 <LoopCopyDataInit>

08003f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f5e:	3304      	adds	r3, #4

08003f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f64:	d3f9      	bcc.n	8003f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f66:	4a0a      	ldr	r2, [pc, #40]	@ (8003f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f68:	4c0a      	ldr	r4, [pc, #40]	@ (8003f94 <LoopForever+0x16>)
  movs r3, #0
 8003f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f6c:	e001      	b.n	8003f72 <LoopFillZerobss>

08003f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f70:	3204      	adds	r2, #4

08003f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f74:	d3fb      	bcc.n	8003f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f76:	f005 f847 	bl	8009008 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f7a:	f7fc ffcb 	bl	8000f14 <main>

08003f7e <LoopForever>:

LoopForever:
    b LoopForever
 8003f7e:	e7fe      	b.n	8003f7e <LoopForever>
  ldr   r0, =_estack
 8003f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f88:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003f8c:	08009c4c 	.word	0x08009c4c
  ldr r2, =_sbss
 8003f90:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003f94:	20001424 	.word	0x20001424

08003f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f98:	e7fe      	b.n	8003f98 <ADC1_2_IRQHandler>

08003f9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fa4:	2003      	movs	r0, #3
 8003fa6:	f001 f951 	bl	800524c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003faa:	200f      	movs	r0, #15
 8003fac:	f000 f80e 	bl	8003fcc <HAL_InitTick>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	71fb      	strb	r3, [r7, #7]
 8003fba:	e001      	b.n	8003fc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fbc:	f7fe fcb8 	bl	8002930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fc0:	79fb      	ldrb	r3, [r7, #7]

}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003fd8:	4b16      	ldr	r3, [pc, #88]	@ (8004034 <HAL_InitTick+0x68>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d022      	beq.n	8004026 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003fe0:	4b15      	ldr	r3, [pc, #84]	@ (8004038 <HAL_InitTick+0x6c>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b13      	ldr	r3, [pc, #76]	@ (8004034 <HAL_InitTick+0x68>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f001 f96a 	bl	80052ce <HAL_SYSTICK_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10f      	bne.n	8004020 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b0f      	cmp	r3, #15
 8004004:	d809      	bhi.n	800401a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004006:	2200      	movs	r2, #0
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	f04f 30ff 	mov.w	r0, #4294967295
 800400e:	f001 f928 	bl	8005262 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004012:	4a0a      	ldr	r2, [pc, #40]	@ (800403c <HAL_InitTick+0x70>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	e007      	b.n	800402a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
 800401e:	e004      	b.n	800402a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
 8004024:	e001      	b.n	800402a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800402a:	7bfb      	ldrb	r3, [r7, #15]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	2000000c 	.word	0x2000000c
 8004038:	20000004 	.word	0x20000004
 800403c:	20000008 	.word	0x20000008

08004040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004044:	4b05      	ldr	r3, [pc, #20]	@ (800405c <HAL_IncTick+0x1c>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <HAL_IncTick+0x20>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4413      	add	r3, r2
 800404e:	4a03      	ldr	r2, [pc, #12]	@ (800405c <HAL_IncTick+0x1c>)
 8004050:	6013      	str	r3, [r2, #0]
}
 8004052:	bf00      	nop
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	200012d8 	.word	0x200012d8
 8004060:	2000000c 	.word	0x2000000c

08004064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return uwTick;
 8004068:	4b03      	ldr	r3, [pc, #12]	@ (8004078 <HAL_GetTick+0x14>)
 800406a:	681b      	ldr	r3, [r3, #0]
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	200012d8 	.word	0x200012d8

0800407c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004084:	f7ff ffee 	bl	8004064 <HAL_GetTick>
 8004088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d004      	beq.n	80040a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004096:	4b09      	ldr	r3, [pc, #36]	@ (80040bc <HAL_Delay+0x40>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4413      	add	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040a0:	bf00      	nop
 80040a2:	f7ff ffdf 	bl	8004064 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d8f7      	bhi.n	80040a2 <HAL_Delay+0x26>
  {
  }
}
 80040b2:	bf00      	nop
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	2000000c 	.word	0x2000000c

080040c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	609a      	str	r2, [r3, #8]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	609a      	str	r2, [r3, #8]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3360      	adds	r3, #96	@ 0x60
 800413a:	461a      	mov	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b08      	ldr	r3, [pc, #32]	@ (800416c <LL_ADC_SetOffset+0x44>)
 800414a:	4013      	ands	r3, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	4313      	orrs	r3, r2
 8004158:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004160:	bf00      	nop
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	03fff000 	.word	0x03fff000

08004170 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3360      	adds	r3, #96	@ 0x60
 800417e:	461a      	mov	r2, r3
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3360      	adds	r3, #96	@ 0x60
 80041ac:	461a      	mov	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b087      	sub	sp, #28
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3360      	adds	r3, #96	@ 0x60
 80041e2:	461a      	mov	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3360      	adds	r3, #96	@ 0x60
 8004218:	461a      	mov	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	431a      	orrs	r2, r3
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	615a      	str	r2, [r3, #20]
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3330      	adds	r3, #48	@ 0x30
 8004274:	461a      	mov	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	0a1b      	lsrs	r3, r3, #8
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	4413      	add	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	211f      	movs	r1, #31
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	401a      	ands	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	0e9b      	lsrs	r3, r3, #26
 800429c:	f003 011f 	and.w	r1, r3, #31
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 031f 	and.w	r3, r3, #31
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	431a      	orrs	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80042b0:	bf00      	nop
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3314      	adds	r3, #20
 80042cc:	461a      	mov	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	0e5b      	lsrs	r3, r3, #25
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	4413      	add	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	0d1b      	lsrs	r3, r3, #20
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	2107      	movs	r1, #7
 80042ea:	fa01 f303 	lsl.w	r3, r1, r3
 80042ee:	43db      	mvns	r3, r3
 80042f0:	401a      	ands	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	0d1b      	lsrs	r3, r3, #20
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	431a      	orrs	r2, r3
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432c:	43db      	mvns	r3, r3
 800432e:	401a      	ands	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f003 0318 	and.w	r3, r3, #24
 8004336:	4908      	ldr	r1, [pc, #32]	@ (8004358 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004338:	40d9      	lsrs	r1, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	400b      	ands	r3, r1
 800433e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004342:	431a      	orrs	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	0007ffff 	.word	0x0007ffff

0800435c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800436c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6093      	str	r3, [r2, #8]
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004394:	d101      	bne.n	800439a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80043b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043e4:	d101      	bne.n	80043ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <LL_ADC_IsEnabled+0x18>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <LL_ADC_IsEnabled+0x1a>
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b04      	cmp	r3, #4
 8004430:	d101      	bne.n	8004436 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b08      	cmp	r3, #8
 8004456:	d101      	bne.n	800445c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
	...

0800446c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b089      	sub	sp, #36	@ 0x24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e1a9      	b.n	80047da <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7fc f987 	bl	80007a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff ff67 	bl	8004380 <LL_ADC_IsDeepPowerDownEnabled>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d004      	beq.n	80044c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ff4d 	bl	800435c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff ff82 	bl	80043d0 <LL_ADC_IsInternalRegulatorEnabled>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d115      	bne.n	80044fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff ff66 	bl	80043a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044dc:	4b9c      	ldr	r3, [pc, #624]	@ (8004750 <HAL_ADC_Init+0x2e4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	099b      	lsrs	r3, r3, #6
 80044e2:	4a9c      	ldr	r2, [pc, #624]	@ (8004754 <HAL_ADC_Init+0x2e8>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	099b      	lsrs	r3, r3, #6
 80044ea:	3301      	adds	r3, #1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80044f0:	e002      	b.n	80044f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f9      	bne.n	80044f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff ff64 	bl	80043d0 <LL_ADC_IsInternalRegulatorEnabled>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10d      	bne.n	800452a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004512:	f043 0210 	orr.w	r2, r3, #16
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451e:	f043 0201 	orr.w	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ff75 	bl	800441e <LL_ADC_REG_IsConversionOngoing>
 8004534:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	f040 8142 	bne.w	80047c8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f040 813e 	bne.w	80047c8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004550:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004554:	f043 0202 	orr.w	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff ff49 	bl	80043f8 <LL_ADC_IsEnabled>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d141      	bne.n	80045f0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004574:	d004      	beq.n	8004580 <HAL_ADC_Init+0x114>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a77      	ldr	r2, [pc, #476]	@ (8004758 <HAL_ADC_Init+0x2ec>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d10f      	bne.n	80045a0 <HAL_ADC_Init+0x134>
 8004580:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004584:	f7ff ff38 	bl	80043f8 <LL_ADC_IsEnabled>
 8004588:	4604      	mov	r4, r0
 800458a:	4873      	ldr	r0, [pc, #460]	@ (8004758 <HAL_ADC_Init+0x2ec>)
 800458c:	f7ff ff34 	bl	80043f8 <LL_ADC_IsEnabled>
 8004590:	4603      	mov	r3, r0
 8004592:	4323      	orrs	r3, r4
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e012      	b.n	80045c6 <HAL_ADC_Init+0x15a>
 80045a0:	486e      	ldr	r0, [pc, #440]	@ (800475c <HAL_ADC_Init+0x2f0>)
 80045a2:	f7ff ff29 	bl	80043f8 <LL_ADC_IsEnabled>
 80045a6:	4604      	mov	r4, r0
 80045a8:	486d      	ldr	r0, [pc, #436]	@ (8004760 <HAL_ADC_Init+0x2f4>)
 80045aa:	f7ff ff25 	bl	80043f8 <LL_ADC_IsEnabled>
 80045ae:	4603      	mov	r3, r0
 80045b0:	431c      	orrs	r4, r3
 80045b2:	486c      	ldr	r0, [pc, #432]	@ (8004764 <HAL_ADC_Init+0x2f8>)
 80045b4:	f7ff ff20 	bl	80043f8 <LL_ADC_IsEnabled>
 80045b8:	4603      	mov	r3, r0
 80045ba:	4323      	orrs	r3, r4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d012      	beq.n	80045f0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045d2:	d004      	beq.n	80045de <HAL_ADC_Init+0x172>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a5f      	ldr	r2, [pc, #380]	@ (8004758 <HAL_ADC_Init+0x2ec>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d101      	bne.n	80045e2 <HAL_ADC_Init+0x176>
 80045de:	4a62      	ldr	r2, [pc, #392]	@ (8004768 <HAL_ADC_Init+0x2fc>)
 80045e0:	e000      	b.n	80045e4 <HAL_ADC_Init+0x178>
 80045e2:	4a62      	ldr	r2, [pc, #392]	@ (800476c <HAL_ADC_Init+0x300>)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f7ff fd68 	bl	80040c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	7f5b      	ldrb	r3, [r3, #29]
 80045f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004600:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004606:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800460e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800461a:	2b01      	cmp	r3, #1
 800461c:	d106      	bne.n	800462c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	3b01      	subs	r3, #1
 8004624:	045b      	lsls	r3, r3, #17
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d009      	beq.n	8004648 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	4b48      	ldr	r3, [pc, #288]	@ (8004770 <HAL_ADC_Init+0x304>)
 8004650:	4013      	ands	r3, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6812      	ldr	r2, [r2, #0]
 8004656:	69b9      	ldr	r1, [r7, #24]
 8004658:	430b      	orrs	r3, r1
 800465a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff fee4 	bl	8004444 <LL_ADC_INJ_IsConversionOngoing>
 800467c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d17f      	bne.n	8004784 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d17c      	bne.n	8004784 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800468e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004696:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046a6:	f023 0302 	bic.w	r3, r3, #2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	69b9      	ldr	r1, [r7, #24]
 80046b0:	430b      	orrs	r3, r1
 80046b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d017      	beq.n	80046ec <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80046ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80046d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80046d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6911      	ldr	r1, [r2, #16]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	430b      	orrs	r3, r1
 80046e6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80046ea:	e013      	b.n	8004714 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80046fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800470c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004710:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800471a:	2b01      	cmp	r3, #1
 800471c:	d12a      	bne.n	8004774 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004728:	f023 0304 	bic.w	r3, r3, #4
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004734:	4311      	orrs	r1, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800473a:	4311      	orrs	r1, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004740:	430a      	orrs	r2, r1
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0201 	orr.w	r2, r2, #1
 800474c:	611a      	str	r2, [r3, #16]
 800474e:	e019      	b.n	8004784 <HAL_ADC_Init+0x318>
 8004750:	20000004 	.word	0x20000004
 8004754:	053e2d63 	.word	0x053e2d63
 8004758:	50000100 	.word	0x50000100
 800475c:	50000400 	.word	0x50000400
 8004760:	50000500 	.word	0x50000500
 8004764:	50000600 	.word	0x50000600
 8004768:	50000300 	.word	0x50000300
 800476c:	50000700 	.word	0x50000700
 8004770:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d10c      	bne.n	80047a6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004792:	f023 010f 	bic.w	r1, r3, #15
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	1e5a      	subs	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80047a4:	e007      	b.n	80047b6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 020f 	bic.w	r2, r2, #15
 80047b4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	f043 0201 	orr.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047c6:	e007      	b.n	80047d8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047cc:	f043 0210 	orr.w	r2, r3, #16
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3724      	adds	r7, #36	@ 0x24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd90      	pop	{r4, r7, pc}
 80047e2:	bf00      	nop

080047e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b0b6      	sub	sp, #216	@ 0xd8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d102      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x24>
 8004802:	2302      	movs	r3, #2
 8004804:	f000 bc13 	b.w	800502e <HAL_ADC_ConfigChannel+0x84a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fe02 	bl	800441e <LL_ADC_REG_IsConversionOngoing>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 83f3 	bne.w	8005008 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6859      	ldr	r1, [r3, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	f7ff fd18 	bl	8004264 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff fdf0 	bl	800441e <LL_ADC_REG_IsConversionOngoing>
 800483e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fdfc 	bl	8004444 <LL_ADC_INJ_IsConversionOngoing>
 800484c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004850:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004854:	2b00      	cmp	r3, #0
 8004856:	f040 81d9 	bne.w	8004c0c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800485a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800485e:	2b00      	cmp	r3, #0
 8004860:	f040 81d4 	bne.w	8004c0c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800486c:	d10f      	bne.n	800488e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2200      	movs	r2, #0
 8004878:	4619      	mov	r1, r3
 800487a:	f7ff fd1f 	bl	80042bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fcd9 	bl	800423e <LL_ADC_SetSamplingTimeCommonConfig>
 800488c:	e00e      	b.n	80048ac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6819      	ldr	r1, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	461a      	mov	r2, r3
 800489c:	f7ff fd0e 	bl	80042bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2100      	movs	r1, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fcc9 	bl	800423e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	08db      	lsrs	r3, r3, #3
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d022      	beq.n	8004914 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6919      	ldr	r1, [r3, #16]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80048de:	f7ff fc23 	bl	8004128 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6919      	ldr	r1, [r3, #16]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	461a      	mov	r2, r3
 80048f0:	f7ff fc6f 	bl	80041d2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004900:	2b01      	cmp	r3, #1
 8004902:	d102      	bne.n	800490a <HAL_ADC_ConfigChannel+0x126>
 8004904:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004908:	e000      	b.n	800490c <HAL_ADC_ConfigChannel+0x128>
 800490a:	2300      	movs	r3, #0
 800490c:	461a      	mov	r2, r3
 800490e:	f7ff fc7b 	bl	8004208 <LL_ADC_SetOffsetSaturation>
 8004912:	e17b      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff fc28 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004920:	4603      	mov	r3, r0
 8004922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x15c>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2100      	movs	r1, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fc1d 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004936:	4603      	mov	r3, r0
 8004938:	0e9b      	lsrs	r3, r3, #26
 800493a:	f003 021f 	and.w	r2, r3, #31
 800493e:	e01e      	b.n	800497e <HAL_ADC_ConfigChannel+0x19a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fc12 	bl	8004170 <LL_ADC_GetOffsetChannel>
 800494c:	4603      	mov	r3, r0
 800494e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004952:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004956:	fa93 f3a3 	rbit	r3, r3
 800495a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800495e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004962:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004966:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800496e:	2320      	movs	r3, #32
 8004970:	e004      	b.n	800497c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004972:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004976:	fab3 f383 	clz	r3, r3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x1b2>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	0e9b      	lsrs	r3, r3, #26
 8004990:	f003 031f 	and.w	r3, r3, #31
 8004994:	e018      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x1e4>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80049aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80049b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80049ba:	2320      	movs	r3, #32
 80049bc:	e004      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80049be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d106      	bne.n	80049da <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2100      	movs	r1, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff fbe1 	bl	800419c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2101      	movs	r1, #1
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fbc5 	bl	8004170 <LL_ADC_GetOffsetChannel>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x222>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2101      	movs	r1, #1
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fbba 	bl	8004170 <LL_ADC_GetOffsetChannel>
 80049fc:	4603      	mov	r3, r0
 80049fe:	0e9b      	lsrs	r3, r3, #26
 8004a00:	f003 021f 	and.w	r2, r3, #31
 8004a04:	e01e      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x260>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fbaf 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a1c:	fa93 f3a3 	rbit	r3, r3
 8004a20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004a24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004a2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004a34:	2320      	movs	r3, #32
 8004a36:	e004      	b.n	8004a42 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004a38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a3c:	fab3 f383 	clz	r3, r3
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_ADC_ConfigChannel+0x278>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	0e9b      	lsrs	r3, r3, #26
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	e018      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x2aa>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a68:	fa93 f3a3 	rbit	r3, r3
 8004a6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004a70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004a80:	2320      	movs	r3, #32
 8004a82:	e004      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a88:	fab3 f383 	clz	r3, r3
 8004a8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d106      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2200      	movs	r2, #0
 8004a98:	2101      	movs	r1, #1
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff fb7e 	bl	800419c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff fb62 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10a      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x2e8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2102      	movs	r1, #2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff fb57 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	0e9b      	lsrs	r3, r3, #26
 8004ac6:	f003 021f 	and.w	r2, r3, #31
 8004aca:	e01e      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x326>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff fb4c 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ae2:	fa93 f3a3 	rbit	r3, r3
 8004ae6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004af2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004afa:	2320      	movs	r3, #32
 8004afc:	e004      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b02:	fab3 f383 	clz	r3, r3
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d105      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x33e>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	0e9b      	lsrs	r3, r3, #26
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	e016      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x36c>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b2e:	fa93 f3a3 	rbit	r3, r3
 8004b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004b34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004b42:	2320      	movs	r3, #32
 8004b44:	e004      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b4a:	fab3 f383 	clz	r3, r3
 8004b4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d106      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fb1d 	bl	800419c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2103      	movs	r1, #3
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff fb01 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <HAL_ADC_ConfigChannel+0x3aa>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2103      	movs	r1, #3
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff faf6 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004b84:	4603      	mov	r3, r0
 8004b86:	0e9b      	lsrs	r3, r3, #26
 8004b88:	f003 021f 	and.w	r2, r3, #31
 8004b8c:	e017      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x3da>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2103      	movs	r1, #3
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff faeb 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ba0:	fa93 f3a3 	rbit	r3, r3
 8004ba4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004ba6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ba8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004baa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004bb0:	2320      	movs	r3, #32
 8004bb2:	e003      	b.n	8004bbc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004bb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bb6:	fab3 f383 	clz	r3, r3
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d105      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x3f2>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	0e9b      	lsrs	r3, r3, #26
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	e011      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x416>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bde:	fa93 f3a3 	rbit	r3, r3
 8004be2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004be4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004be6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004bee:	2320      	movs	r3, #32
 8004bf0:	e003      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf4:	fab3 f383 	clz	r3, r3
 8004bf8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d106      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2200      	movs	r2, #0
 8004c04:	2103      	movs	r1, #3
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fac8 	bl	800419c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fbf1 	bl	80043f8 <LL_ADC_IsEnabled>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f040 813d 	bne.w	8004e98 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6819      	ldr	r1, [r3, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f7ff fb72 	bl	8004314 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4aa2      	ldr	r2, [pc, #648]	@ (8004ec0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f040 812e 	bne.w	8004e98 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x480>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	0e9b      	lsrs	r3, r3, #26
 8004c52:	3301      	adds	r3, #1
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	2b09      	cmp	r3, #9
 8004c5a:	bf94      	ite	ls
 8004c5c:	2301      	movls	r3, #1
 8004c5e:	2300      	movhi	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e019      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x4b4>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004c72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c74:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004c76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	e003      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004c80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c82:	fab3 f383 	clz	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	2b09      	cmp	r3, #9
 8004c90:	bf94      	ite	ls
 8004c92:	2301      	movls	r3, #1
 8004c94:	2300      	movhi	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d079      	beq.n	8004d90 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d107      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x4d4>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	0e9b      	lsrs	r3, r3, #26
 8004cae:	3301      	adds	r3, #1
 8004cb0:	069b      	lsls	r3, r3, #26
 8004cb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cb6:	e015      	b.n	8004ce4 <HAL_ADC_ConfigChannel+0x500>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cc0:	fa93 f3a3 	rbit	r3, r3
 8004cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cc8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004cd0:	2320      	movs	r3, #32
 8004cd2:	e003      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	3301      	adds	r3, #1
 8004cde:	069b      	lsls	r3, r3, #26
 8004ce0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d109      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x520>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	0e9b      	lsrs	r3, r3, #26
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004d02:	e017      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x550>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d0c:	fa93 f3a3 	rbit	r3, r3
 8004d10:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d14:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004d1c:	2320      	movs	r3, #32
 8004d1e:	e003      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d22:	fab3 f383 	clz	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	3301      	adds	r3, #1
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	2101      	movs	r1, #1
 8004d30:	fa01 f303 	lsl.w	r3, r1, r3
 8004d34:	ea42 0103 	orr.w	r1, r2, r3
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x576>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	0e9b      	lsrs	r3, r3, #26
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f003 021f 	and.w	r2, r3, #31
 8004d50:	4613      	mov	r3, r2
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	4413      	add	r3, r2
 8004d56:	051b      	lsls	r3, r3, #20
 8004d58:	e018      	b.n	8004d8c <HAL_ADC_ConfigChannel+0x5a8>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d62:	fa93 f3a3 	rbit	r3, r3
 8004d66:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004d72:	2320      	movs	r3, #32
 8004d74:	e003      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d78:	fab3 f383 	clz	r3, r3
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f003 021f 	and.w	r2, r3, #31
 8004d84:	4613      	mov	r3, r2
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	4413      	add	r3, r2
 8004d8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	e07e      	b.n	8004e8e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d107      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x5c8>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	0e9b      	lsrs	r3, r3, #26
 8004da2:	3301      	adds	r3, #1
 8004da4:	069b      	lsls	r3, r3, #26
 8004da6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004daa:	e015      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x5f4>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db4:	fa93 f3a3 	rbit	r3, r3
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004dc4:	2320      	movs	r3, #32
 8004dc6:	e003      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dca:	fab3 f383 	clz	r3, r3
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	069b      	lsls	r3, r3, #26
 8004dd4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d109      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0x614>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	0e9b      	lsrs	r3, r3, #26
 8004dea:	3301      	adds	r3, #1
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	2101      	movs	r1, #1
 8004df2:	fa01 f303 	lsl.w	r3, r1, r3
 8004df6:	e017      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x644>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	fa93 f3a3 	rbit	r3, r3
 8004e04:	61fb      	str	r3, [r7, #28]
  return result;
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004e10:	2320      	movs	r3, #32
 8004e12:	e003      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	fab3 f383 	clz	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	2101      	movs	r1, #1
 8004e24:	fa01 f303 	lsl.w	r3, r1, r3
 8004e28:	ea42 0103 	orr.w	r1, r2, r3
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10d      	bne.n	8004e54 <HAL_ADC_ConfigChannel+0x670>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	0e9b      	lsrs	r3, r3, #26
 8004e3e:	3301      	adds	r3, #1
 8004e40:	f003 021f 	and.w	r2, r3, #31
 8004e44:	4613      	mov	r3, r2
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	4413      	add	r3, r2
 8004e4a:	3b1e      	subs	r3, #30
 8004e4c:	051b      	lsls	r3, r3, #20
 8004e4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e52:	e01b      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x6a8>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	fa93 f3a3 	rbit	r3, r3
 8004e60:	613b      	str	r3, [r7, #16]
  return result;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004e6c:	2320      	movs	r3, #32
 8004e6e:	e003      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	fab3 f383 	clz	r3, r3
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	3301      	adds	r3, #1
 8004e7a:	f003 021f 	and.w	r2, r3, #31
 8004e7e:	4613      	mov	r3, r2
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	4413      	add	r3, r2
 8004e84:	3b1e      	subs	r3, #30
 8004e86:	051b      	lsls	r3, r3, #20
 8004e88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e8c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e92:	4619      	mov	r1, r3
 8004e94:	f7ff fa12 	bl	80042bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <HAL_ADC_ConfigChannel+0x6e0>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80be 	beq.w	8005022 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004eae:	d004      	beq.n	8004eba <HAL_ADC_ConfigChannel+0x6d6>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a04      	ldr	r2, [pc, #16]	@ (8004ec8 <HAL_ADC_ConfigChannel+0x6e4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x6ec>
 8004eba:	4b04      	ldr	r3, [pc, #16]	@ (8004ecc <HAL_ADC_ConfigChannel+0x6e8>)
 8004ebc:	e009      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x6ee>
 8004ebe:	bf00      	nop
 8004ec0:	407f0000 	.word	0x407f0000
 8004ec4:	80080000 	.word	0x80080000
 8004ec8:	50000100 	.word	0x50000100
 8004ecc:	50000300 	.word	0x50000300
 8004ed0:	4b59      	ldr	r3, [pc, #356]	@ (8005038 <HAL_ADC_ConfigChannel+0x854>)
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff f91a 	bl	800410c <LL_ADC_GetCommonPathInternalCh>
 8004ed8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a56      	ldr	r2, [pc, #344]	@ (800503c <HAL_ADC_ConfigChannel+0x858>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_ADC_ConfigChannel+0x70c>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a55      	ldr	r2, [pc, #340]	@ (8005040 <HAL_ADC_ConfigChannel+0x85c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d13a      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ef4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d134      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f04:	d005      	beq.n	8004f12 <HAL_ADC_ConfigChannel+0x72e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a4e      	ldr	r2, [pc, #312]	@ (8005044 <HAL_ADC_ConfigChannel+0x860>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	f040 8085 	bne.w	800501c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f1a:	d004      	beq.n	8004f26 <HAL_ADC_ConfigChannel+0x742>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a49      	ldr	r2, [pc, #292]	@ (8005048 <HAL_ADC_ConfigChannel+0x864>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d101      	bne.n	8004f2a <HAL_ADC_ConfigChannel+0x746>
 8004f26:	4a49      	ldr	r2, [pc, #292]	@ (800504c <HAL_ADC_ConfigChannel+0x868>)
 8004f28:	e000      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x748>
 8004f2a:	4a43      	ldr	r2, [pc, #268]	@ (8005038 <HAL_ADC_ConfigChannel+0x854>)
 8004f2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f7ff f8d5 	bl	80040e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f3c:	4b44      	ldr	r3, [pc, #272]	@ (8005050 <HAL_ADC_ConfigChannel+0x86c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	099b      	lsrs	r3, r3, #6
 8004f42:	4a44      	ldr	r2, [pc, #272]	@ (8005054 <HAL_ADC_ConfigChannel+0x870>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	099b      	lsrs	r3, r3, #6
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f56:	e002      	b.n	8004f5e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1f9      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f64:	e05a      	b.n	800501c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a3b      	ldr	r2, [pc, #236]	@ (8005058 <HAL_ADC_ConfigChannel+0x874>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d125      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d11f      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a31      	ldr	r2, [pc, #196]	@ (8005048 <HAL_ADC_ConfigChannel+0x864>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d104      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x7ac>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a34      	ldr	r2, [pc, #208]	@ (800505c <HAL_ADC_ConfigChannel+0x878>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d047      	beq.n	8005020 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f98:	d004      	beq.n	8004fa4 <HAL_ADC_ConfigChannel+0x7c0>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8005048 <HAL_ADC_ConfigChannel+0x864>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d101      	bne.n	8004fa8 <HAL_ADC_ConfigChannel+0x7c4>
 8004fa4:	4a29      	ldr	r2, [pc, #164]	@ (800504c <HAL_ADC_ConfigChannel+0x868>)
 8004fa6:	e000      	b.n	8004faa <HAL_ADC_ConfigChannel+0x7c6>
 8004fa8:	4a23      	ldr	r2, [pc, #140]	@ (8005038 <HAL_ADC_ConfigChannel+0x854>)
 8004faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f7ff f896 	bl	80040e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fba:	e031      	b.n	8005020 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a27      	ldr	r2, [pc, #156]	@ (8005060 <HAL_ADC_ConfigChannel+0x87c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d12d      	bne.n	8005022 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d127      	bne.n	8005022 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8005048 <HAL_ADC_ConfigChannel+0x864>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d022      	beq.n	8005022 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fe4:	d004      	beq.n	8004ff0 <HAL_ADC_ConfigChannel+0x80c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a17      	ldr	r2, [pc, #92]	@ (8005048 <HAL_ADC_ConfigChannel+0x864>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x810>
 8004ff0:	4a16      	ldr	r2, [pc, #88]	@ (800504c <HAL_ADC_ConfigChannel+0x868>)
 8004ff2:	e000      	b.n	8004ff6 <HAL_ADC_ConfigChannel+0x812>
 8004ff4:	4a10      	ldr	r2, [pc, #64]	@ (8005038 <HAL_ADC_ConfigChannel+0x854>)
 8004ff6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ffa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f7ff f870 	bl	80040e6 <LL_ADC_SetCommonPathInternalCh>
 8005006:	e00c      	b.n	8005022 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800501a:	e002      	b.n	8005022 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800501c:	bf00      	nop
 800501e:	e000      	b.n	8005022 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005020:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800502a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800502e:	4618      	mov	r0, r3
 8005030:	37d8      	adds	r7, #216	@ 0xd8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	50000700 	.word	0x50000700
 800503c:	c3210000 	.word	0xc3210000
 8005040:	90c00010 	.word	0x90c00010
 8005044:	50000600 	.word	0x50000600
 8005048:	50000100 	.word	0x50000100
 800504c:	50000300 	.word	0x50000300
 8005050:	20000004 	.word	0x20000004
 8005054:	053e2d63 	.word	0x053e2d63
 8005058:	c7520000 	.word	0xc7520000
 800505c:	50000500 	.word	0x50000500
 8005060:	cb840000 	.word	0xcb840000

08005064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005074:	4b0c      	ldr	r3, [pc, #48]	@ (80050a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005080:	4013      	ands	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800508c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005096:	4a04      	ldr	r2, [pc, #16]	@ (80050a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	60d3      	str	r3, [r2, #12]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	e000ed00 	.word	0xe000ed00

080050ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050b0:	4b04      	ldr	r3, [pc, #16]	@ (80050c4 <__NVIC_GetPriorityGrouping+0x18>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	f003 0307 	and.w	r3, r3, #7
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	e000ed00 	.word	0xe000ed00

080050c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	db0b      	blt.n	80050f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	f003 021f 	and.w	r2, r3, #31
 80050e0:	4907      	ldr	r1, [pc, #28]	@ (8005100 <__NVIC_EnableIRQ+0x38>)
 80050e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	2001      	movs	r0, #1
 80050ea:	fa00 f202 	lsl.w	r2, r0, r2
 80050ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	e000e100 	.word	0xe000e100

08005104 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800510e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005112:	2b00      	cmp	r3, #0
 8005114:	db12      	blt.n	800513c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	f003 021f 	and.w	r2, r3, #31
 800511c:	490a      	ldr	r1, [pc, #40]	@ (8005148 <__NVIC_DisableIRQ+0x44>)
 800511e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	2001      	movs	r0, #1
 8005126:	fa00 f202 	lsl.w	r2, r0, r2
 800512a:	3320      	adds	r3, #32
 800512c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005130:	f3bf 8f4f 	dsb	sy
}
 8005134:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005136:	f3bf 8f6f 	isb	sy
}
 800513a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	e000e100 	.word	0xe000e100

0800514c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	6039      	str	r1, [r7, #0]
 8005156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515c:	2b00      	cmp	r3, #0
 800515e:	db0a      	blt.n	8005176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	b2da      	uxtb	r2, r3
 8005164:	490c      	ldr	r1, [pc, #48]	@ (8005198 <__NVIC_SetPriority+0x4c>)
 8005166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516a:	0112      	lsls	r2, r2, #4
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	440b      	add	r3, r1
 8005170:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005174:	e00a      	b.n	800518c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	b2da      	uxtb	r2, r3
 800517a:	4908      	ldr	r1, [pc, #32]	@ (800519c <__NVIC_SetPriority+0x50>)
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	3b04      	subs	r3, #4
 8005184:	0112      	lsls	r2, r2, #4
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	440b      	add	r3, r1
 800518a:	761a      	strb	r2, [r3, #24]
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	e000e100 	.word	0xe000e100
 800519c:	e000ed00 	.word	0xe000ed00

080051a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b089      	sub	sp, #36	@ 0x24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f1c3 0307 	rsb	r3, r3, #7
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	bf28      	it	cs
 80051be:	2304      	movcs	r3, #4
 80051c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	3304      	adds	r3, #4
 80051c6:	2b06      	cmp	r3, #6
 80051c8:	d902      	bls.n	80051d0 <NVIC_EncodePriority+0x30>
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	3b03      	subs	r3, #3
 80051ce:	e000      	b.n	80051d2 <NVIC_EncodePriority+0x32>
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051d4:	f04f 32ff 	mov.w	r2, #4294967295
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43da      	mvns	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	401a      	ands	r2, r3
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051e8:	f04f 31ff 	mov.w	r1, #4294967295
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	fa01 f303 	lsl.w	r3, r1, r3
 80051f2:	43d9      	mvns	r1, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051f8:	4313      	orrs	r3, r2
         );
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3724      	adds	r7, #36	@ 0x24
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3b01      	subs	r3, #1
 8005214:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005218:	d301      	bcc.n	800521e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800521a:	2301      	movs	r3, #1
 800521c:	e00f      	b.n	800523e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800521e:	4a0a      	ldr	r2, [pc, #40]	@ (8005248 <SysTick_Config+0x40>)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3b01      	subs	r3, #1
 8005224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005226:	210f      	movs	r1, #15
 8005228:	f04f 30ff 	mov.w	r0, #4294967295
 800522c:	f7ff ff8e 	bl	800514c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005230:	4b05      	ldr	r3, [pc, #20]	@ (8005248 <SysTick_Config+0x40>)
 8005232:	2200      	movs	r2, #0
 8005234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005236:	4b04      	ldr	r3, [pc, #16]	@ (8005248 <SysTick_Config+0x40>)
 8005238:	2207      	movs	r2, #7
 800523a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	e000e010 	.word	0xe000e010

0800524c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff ff05 	bl	8005064 <__NVIC_SetPriorityGrouping>
}
 800525a:	bf00      	nop
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b086      	sub	sp, #24
 8005266:	af00      	add	r7, sp, #0
 8005268:	4603      	mov	r3, r0
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
 800526e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005270:	f7ff ff1c 	bl	80050ac <__NVIC_GetPriorityGrouping>
 8005274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	6978      	ldr	r0, [r7, #20]
 800527c:	f7ff ff90 	bl	80051a0 <NVIC_EncodePriority>
 8005280:	4602      	mov	r2, r0
 8005282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005286:	4611      	mov	r1, r2
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff ff5f 	bl	800514c <__NVIC_SetPriority>
}
 800528e:	bf00      	nop
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	4603      	mov	r3, r0
 800529e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff ff0f 	bl	80050c8 <__NVIC_EnableIRQ>
}
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	4603      	mov	r3, r0
 80052ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80052bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff ff1f 	bl	8005104 <__NVIC_DisableIRQ>
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff ff96 	bl	8005208 <SysTick_Config>
 80052dc:	4603      	mov	r3, r0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80052f6:	e15a      	b.n	80055ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	2101      	movs	r1, #1
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	fa01 f303 	lsl.w	r3, r1, r3
 8005304:	4013      	ands	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 814c 	beq.w	80055a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f003 0303 	and.w	r3, r3, #3
 8005318:	2b01      	cmp	r3, #1
 800531a:	d005      	beq.n	8005328 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005324:	2b02      	cmp	r3, #2
 8005326:	d130      	bne.n	800538a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	2203      	movs	r2, #3
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4013      	ands	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800535e:	2201      	movs	r2, #1
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	43db      	mvns	r3, r3
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4013      	ands	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	091b      	lsrs	r3, r3, #4
 8005374:	f003 0201 	and.w	r2, r3, #1
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	2b03      	cmp	r3, #3
 8005394:	d017      	beq.n	80053c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	2203      	movs	r2, #3
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	43db      	mvns	r3, r3
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	4013      	ands	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d123      	bne.n	800541a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	08da      	lsrs	r2, r3, #3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3208      	adds	r2, #8
 80053da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	220f      	movs	r2, #15
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	43db      	mvns	r3, r3
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4013      	ands	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	08da      	lsrs	r2, r3, #3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3208      	adds	r2, #8
 8005414:	6939      	ldr	r1, [r7, #16]
 8005416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	2203      	movs	r2, #3
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	43db      	mvns	r3, r3
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4013      	ands	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f003 0203 	and.w	r2, r3, #3
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 80a6 	beq.w	80055a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800545c:	4b5b      	ldr	r3, [pc, #364]	@ (80055cc <HAL_GPIO_Init+0x2e4>)
 800545e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005460:	4a5a      	ldr	r2, [pc, #360]	@ (80055cc <HAL_GPIO_Init+0x2e4>)
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	6613      	str	r3, [r2, #96]	@ 0x60
 8005468:	4b58      	ldr	r3, [pc, #352]	@ (80055cc <HAL_GPIO_Init+0x2e4>)
 800546a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	60bb      	str	r3, [r7, #8]
 8005472:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005474:	4a56      	ldr	r2, [pc, #344]	@ (80055d0 <HAL_GPIO_Init+0x2e8>)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	089b      	lsrs	r3, r3, #2
 800547a:	3302      	adds	r3, #2
 800547c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	220f      	movs	r2, #15
 800548c:	fa02 f303 	lsl.w	r3, r2, r3
 8005490:	43db      	mvns	r3, r3
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4013      	ands	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800549e:	d01f      	beq.n	80054e0 <HAL_GPIO_Init+0x1f8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a4c      	ldr	r2, [pc, #304]	@ (80055d4 <HAL_GPIO_Init+0x2ec>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d019      	beq.n	80054dc <HAL_GPIO_Init+0x1f4>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a4b      	ldr	r2, [pc, #300]	@ (80055d8 <HAL_GPIO_Init+0x2f0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <HAL_GPIO_Init+0x1f0>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a4a      	ldr	r2, [pc, #296]	@ (80055dc <HAL_GPIO_Init+0x2f4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00d      	beq.n	80054d4 <HAL_GPIO_Init+0x1ec>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a49      	ldr	r2, [pc, #292]	@ (80055e0 <HAL_GPIO_Init+0x2f8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d007      	beq.n	80054d0 <HAL_GPIO_Init+0x1e8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a48      	ldr	r2, [pc, #288]	@ (80055e4 <HAL_GPIO_Init+0x2fc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d101      	bne.n	80054cc <HAL_GPIO_Init+0x1e4>
 80054c8:	2305      	movs	r3, #5
 80054ca:	e00a      	b.n	80054e2 <HAL_GPIO_Init+0x1fa>
 80054cc:	2306      	movs	r3, #6
 80054ce:	e008      	b.n	80054e2 <HAL_GPIO_Init+0x1fa>
 80054d0:	2304      	movs	r3, #4
 80054d2:	e006      	b.n	80054e2 <HAL_GPIO_Init+0x1fa>
 80054d4:	2303      	movs	r3, #3
 80054d6:	e004      	b.n	80054e2 <HAL_GPIO_Init+0x1fa>
 80054d8:	2302      	movs	r3, #2
 80054da:	e002      	b.n	80054e2 <HAL_GPIO_Init+0x1fa>
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <HAL_GPIO_Init+0x1fa>
 80054e0:	2300      	movs	r3, #0
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	f002 0203 	and.w	r2, r2, #3
 80054e8:	0092      	lsls	r2, r2, #2
 80054ea:	4093      	lsls	r3, r2
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054f2:	4937      	ldr	r1, [pc, #220]	@ (80055d0 <HAL_GPIO_Init+0x2e8>)
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	089b      	lsrs	r3, r3, #2
 80054f8:	3302      	adds	r3, #2
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005500:	4b39      	ldr	r3, [pc, #228]	@ (80055e8 <HAL_GPIO_Init+0x300>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	43db      	mvns	r3, r3
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4013      	ands	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005524:	4a30      	ldr	r2, [pc, #192]	@ (80055e8 <HAL_GPIO_Init+0x300>)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800552a:	4b2f      	ldr	r3, [pc, #188]	@ (80055e8 <HAL_GPIO_Init+0x300>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	43db      	mvns	r3, r3
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4013      	ands	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800554e:	4a26      	ldr	r2, [pc, #152]	@ (80055e8 <HAL_GPIO_Init+0x300>)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005554:	4b24      	ldr	r3, [pc, #144]	@ (80055e8 <HAL_GPIO_Init+0x300>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	43db      	mvns	r3, r3
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4013      	ands	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005578:	4a1b      	ldr	r2, [pc, #108]	@ (80055e8 <HAL_GPIO_Init+0x300>)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800557e:	4b1a      	ldr	r3, [pc, #104]	@ (80055e8 <HAL_GPIO_Init+0x300>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	43db      	mvns	r3, r3
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4013      	ands	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055a2:	4a11      	ldr	r2, [pc, #68]	@ (80055e8 <HAL_GPIO_Init+0x300>)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	3301      	adds	r3, #1
 80055ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f47f ae9d 	bne.w	80052f8 <HAL_GPIO_Init+0x10>
  }
}
 80055be:	bf00      	nop
 80055c0:	bf00      	nop
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40021000 	.word	0x40021000
 80055d0:	40010000 	.word	0x40010000
 80055d4:	48000400 	.word	0x48000400
 80055d8:	48000800 	.word	0x48000800
 80055dc:	48000c00 	.word	0x48000c00
 80055e0:	48001000 	.word	0x48001000
 80055e4:	48001400 	.word	0x48001400
 80055e8:	40010400 	.word	0x40010400

080055ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	887b      	ldrh	r3, [r7, #2]
 80055fe:	4013      	ands	r3, r2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005604:	2301      	movs	r3, #1
 8005606:	73fb      	strb	r3, [r7, #15]
 8005608:	e001      	b.n	800560e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800560a:	2300      	movs	r3, #0
 800560c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	807b      	strh	r3, [r7, #2]
 8005628:	4613      	mov	r3, r2
 800562a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800562c:	787b      	ldrb	r3, [r7, #1]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005632:	887a      	ldrh	r2, [r7, #2]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005638:	e002      	b.n	8005640 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800563a:	887a      	ldrh	r2, [r7, #2]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800565e:	887a      	ldrh	r2, [r7, #2]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4013      	ands	r3, r2
 8005664:	041a      	lsls	r2, r3, #16
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	43d9      	mvns	r1, r3
 800566a:	887b      	ldrh	r3, [r7, #2]
 800566c:	400b      	ands	r3, r1
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	619a      	str	r2, [r3, #24]
}
 8005674:	bf00      	nop
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d141      	bne.n	8005712 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800568e:	4b4b      	ldr	r3, [pc, #300]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800569a:	d131      	bne.n	8005700 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800569c:	4b47      	ldr	r3, [pc, #284]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800569e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056a2:	4a46      	ldr	r2, [pc, #280]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056ac:	4b43      	ldr	r3, [pc, #268]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056b4:	4a41      	ldr	r2, [pc, #260]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056bc:	4b40      	ldr	r3, [pc, #256]	@ (80057c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2232      	movs	r2, #50	@ 0x32
 80056c2:	fb02 f303 	mul.w	r3, r2, r3
 80056c6:	4a3f      	ldr	r2, [pc, #252]	@ (80057c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	0c9b      	lsrs	r3, r3, #18
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056d2:	e002      	b.n	80056da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056da:	4b38      	ldr	r3, [pc, #224]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056e6:	d102      	bne.n	80056ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f2      	bne.n	80056d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056ee:	4b33      	ldr	r3, [pc, #204]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056fa:	d158      	bne.n	80057ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e057      	b.n	80057b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005700:	4b2e      	ldr	r3, [pc, #184]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005706:	4a2d      	ldr	r2, [pc, #180]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800570c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005710:	e04d      	b.n	80057ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005718:	d141      	bne.n	800579e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800571a:	4b28      	ldr	r3, [pc, #160]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005726:	d131      	bne.n	800578c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005728:	4b24      	ldr	r3, [pc, #144]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800572a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800572e:	4a23      	ldr	r2, [pc, #140]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005734:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005738:	4b20      	ldr	r3, [pc, #128]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005740:	4a1e      	ldr	r2, [pc, #120]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005742:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005746:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005748:	4b1d      	ldr	r3, [pc, #116]	@ (80057c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2232      	movs	r2, #50	@ 0x32
 800574e:	fb02 f303 	mul.w	r3, r2, r3
 8005752:	4a1c      	ldr	r2, [pc, #112]	@ (80057c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005754:	fba2 2303 	umull	r2, r3, r2, r3
 8005758:	0c9b      	lsrs	r3, r3, #18
 800575a:	3301      	adds	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800575e:	e002      	b.n	8005766 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3b01      	subs	r3, #1
 8005764:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005766:	4b15      	ldr	r3, [pc, #84]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800576e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005772:	d102      	bne.n	800577a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f2      	bne.n	8005760 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800577a:	4b10      	ldr	r3, [pc, #64]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005786:	d112      	bne.n	80057ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e011      	b.n	80057b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800578c:	4b0b      	ldr	r3, [pc, #44]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005792:	4a0a      	ldr	r2, [pc, #40]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005798:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800579c:	e007      	b.n	80057ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800579e:	4b07      	ldr	r3, [pc, #28]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057a6:	4a05      	ldr	r2, [pc, #20]	@ (80057bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	40007000 	.word	0x40007000
 80057c0:	20000004 	.word	0x20000004
 80057c4:	431bde83 	.word	0x431bde83

080057c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80057cc:	4b05      	ldr	r3, [pc, #20]	@ (80057e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4a04      	ldr	r2, [pc, #16]	@ (80057e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057d6:	6093      	str	r3, [r2, #8]
}
 80057d8:	bf00      	nop
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40007000 	.word	0x40007000

080057e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e2fe      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d075      	beq.n	80058f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005806:	4b97      	ldr	r3, [pc, #604]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 030c 	and.w	r3, r3, #12
 800580e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005810:	4b94      	ldr	r3, [pc, #592]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0303 	and.w	r3, r3, #3
 8005818:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b0c      	cmp	r3, #12
 800581e:	d102      	bne.n	8005826 <HAL_RCC_OscConfig+0x3e>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b03      	cmp	r3, #3
 8005824:	d002      	beq.n	800582c <HAL_RCC_OscConfig+0x44>
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b08      	cmp	r3, #8
 800582a:	d10b      	bne.n	8005844 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800582c:	4b8d      	ldr	r3, [pc, #564]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d05b      	beq.n	80058f0 <HAL_RCC_OscConfig+0x108>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d157      	bne.n	80058f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e2d9      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800584c:	d106      	bne.n	800585c <HAL_RCC_OscConfig+0x74>
 800584e:	4b85      	ldr	r3, [pc, #532]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a84      	ldr	r2, [pc, #528]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e01d      	b.n	8005898 <HAL_RCC_OscConfig+0xb0>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005864:	d10c      	bne.n	8005880 <HAL_RCC_OscConfig+0x98>
 8005866:	4b7f      	ldr	r3, [pc, #508]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800586c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	4b7c      	ldr	r3, [pc, #496]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a7b      	ldr	r2, [pc, #492]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e00b      	b.n	8005898 <HAL_RCC_OscConfig+0xb0>
 8005880:	4b78      	ldr	r3, [pc, #480]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a77      	ldr	r2, [pc, #476]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	4b75      	ldr	r3, [pc, #468]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a74      	ldr	r2, [pc, #464]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005892:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d013      	beq.n	80058c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a0:	f7fe fbe0 	bl	8004064 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a8:	f7fe fbdc 	bl	8004064 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b64      	cmp	r3, #100	@ 0x64
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e29e      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0f0      	beq.n	80058a8 <HAL_RCC_OscConfig+0xc0>
 80058c6:	e014      	b.n	80058f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fe fbcc 	bl	8004064 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058d0:	f7fe fbc8 	bl	8004064 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b64      	cmp	r3, #100	@ 0x64
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e28a      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058e2:	4b60      	ldr	r3, [pc, #384]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0xe8>
 80058ee:	e000      	b.n	80058f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d075      	beq.n	80059ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058fe:	4b59      	ldr	r3, [pc, #356]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 030c 	and.w	r3, r3, #12
 8005906:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005908:	4b56      	ldr	r3, [pc, #344]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0303 	and.w	r3, r3, #3
 8005910:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b0c      	cmp	r3, #12
 8005916:	d102      	bne.n	800591e <HAL_RCC_OscConfig+0x136>
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2b02      	cmp	r3, #2
 800591c:	d002      	beq.n	8005924 <HAL_RCC_OscConfig+0x13c>
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b04      	cmp	r3, #4
 8005922:	d11f      	bne.n	8005964 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005924:	4b4f      	ldr	r3, [pc, #316]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <HAL_RCC_OscConfig+0x154>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e25d      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593c:	4b49      	ldr	r3, [pc, #292]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	061b      	lsls	r3, r3, #24
 800594a:	4946      	ldr	r1, [pc, #280]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800594c:	4313      	orrs	r3, r2
 800594e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005950:	4b45      	ldr	r3, [pc, #276]	@ (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe fb39 	bl	8003fcc <HAL_InitTick>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d043      	beq.n	80059e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e249      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d023      	beq.n	80059b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800596c:	4b3d      	ldr	r3, [pc, #244]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a3c      	ldr	r2, [pc, #240]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005978:	f7fe fb74 	bl	8004064 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005980:	f7fe fb70 	bl	8004064 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e232      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005992:	4b34      	ldr	r3, [pc, #208]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599e:	4b31      	ldr	r3, [pc, #196]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	061b      	lsls	r3, r3, #24
 80059ac:	492d      	ldr	r1, [pc, #180]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	604b      	str	r3, [r1, #4]
 80059b2:	e01a      	b.n	80059ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80059ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fe fb50 	bl	8004064 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059c8:	f7fe fb4c 	bl	8004064 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e20e      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059da:	4b22      	ldr	r3, [pc, #136]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x1e0>
 80059e6:	e000      	b.n	80059ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d041      	beq.n	8005a7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01c      	beq.n	8005a38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059fe:	4b19      	ldr	r3, [pc, #100]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a04:	4a17      	ldr	r2, [pc, #92]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005a06:	f043 0301 	orr.w	r3, r3, #1
 8005a0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0e:	f7fe fb29 	bl	8004064 <HAL_GetTick>
 8005a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a14:	e008      	b.n	8005a28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a16:	f7fe fb25 	bl	8004064 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e1e7      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a28:	4b0e      	ldr	r3, [pc, #56]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0ef      	beq.n	8005a16 <HAL_RCC_OscConfig+0x22e>
 8005a36:	e020      	b.n	8005a7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a38:	4b0a      	ldr	r3, [pc, #40]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a3e:	4a09      	ldr	r2, [pc, #36]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005a40:	f023 0301 	bic.w	r3, r3, #1
 8005a44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a48:	f7fe fb0c 	bl	8004064 <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a4e:	e00d      	b.n	8005a6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a50:	f7fe fb08 	bl	8004064 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d906      	bls.n	8005a6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e1ca      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
 8005a62:	bf00      	nop
 8005a64:	40021000 	.word	0x40021000
 8005a68:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a6c:	4b8c      	ldr	r3, [pc, #560]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1ea      	bne.n	8005a50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80a6 	beq.w	8005bd4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a8c:	4b84      	ldr	r3, [pc, #528]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_OscConfig+0x2b4>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <HAL_RCC_OscConfig+0x2b6>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00d      	beq.n	8005abe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aa2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aae:	4b7c      	ldr	r3, [pc, #496]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005aba:	2301      	movs	r3, #1
 8005abc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005abe:	4b79      	ldr	r3, [pc, #484]	@ (8005ca4 <HAL_RCC_OscConfig+0x4bc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d118      	bne.n	8005afc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aca:	4b76      	ldr	r3, [pc, #472]	@ (8005ca4 <HAL_RCC_OscConfig+0x4bc>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a75      	ldr	r2, [pc, #468]	@ (8005ca4 <HAL_RCC_OscConfig+0x4bc>)
 8005ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ad6:	f7fe fac5 	bl	8004064 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ade:	f7fe fac1 	bl	8004064 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e183      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005af0:	4b6c      	ldr	r3, [pc, #432]	@ (8005ca4 <HAL_RCC_OscConfig+0x4bc>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0f0      	beq.n	8005ade <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d108      	bne.n	8005b16 <HAL_RCC_OscConfig+0x32e>
 8005b04:	4b66      	ldr	r3, [pc, #408]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b0a:	4a65      	ldr	r2, [pc, #404]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b0c:	f043 0301 	orr.w	r3, r3, #1
 8005b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b14:	e024      	b.n	8005b60 <HAL_RCC_OscConfig+0x378>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b05      	cmp	r3, #5
 8005b1c:	d110      	bne.n	8005b40 <HAL_RCC_OscConfig+0x358>
 8005b1e:	4b60      	ldr	r3, [pc, #384]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b24:	4a5e      	ldr	r2, [pc, #376]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b26:	f043 0304 	orr.w	r3, r3, #4
 8005b2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b34:	4a5a      	ldr	r2, [pc, #360]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b36:	f043 0301 	orr.w	r3, r3, #1
 8005b3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b3e:	e00f      	b.n	8005b60 <HAL_RCC_OscConfig+0x378>
 8005b40:	4b57      	ldr	r3, [pc, #348]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b46:	4a56      	ldr	r2, [pc, #344]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b48:	f023 0301 	bic.w	r3, r3, #1
 8005b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b50:	4b53      	ldr	r3, [pc, #332]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b56:	4a52      	ldr	r2, [pc, #328]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b58:	f023 0304 	bic.w	r3, r3, #4
 8005b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d016      	beq.n	8005b96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b68:	f7fe fa7c 	bl	8004064 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b6e:	e00a      	b.n	8005b86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b70:	f7fe fa78 	bl	8004064 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e138      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b86:	4b46      	ldr	r3, [pc, #280]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0ed      	beq.n	8005b70 <HAL_RCC_OscConfig+0x388>
 8005b94:	e015      	b.n	8005bc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b96:	f7fe fa65 	bl	8004064 <HAL_GetTick>
 8005b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b9c:	e00a      	b.n	8005bb4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b9e:	f7fe fa61 	bl	8004064 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e121      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1ed      	bne.n	8005b9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bc2:	7ffb      	ldrb	r3, [r7, #31]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d105      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc8:	4b35      	ldr	r3, [pc, #212]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bcc:	4a34      	ldr	r2, [pc, #208]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bd2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d03c      	beq.n	8005c5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d01c      	beq.n	8005c22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005be8:	4b2d      	ldr	r3, [pc, #180]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bee:	4a2c      	ldr	r2, [pc, #176]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005bf0:	f043 0301 	orr.w	r3, r3, #1
 8005bf4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf8:	f7fe fa34 	bl	8004064 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c00:	f7fe fa30 	bl	8004064 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e0f2      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c12:	4b23      	ldr	r3, [pc, #140]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0ef      	beq.n	8005c00 <HAL_RCC_OscConfig+0x418>
 8005c20:	e01b      	b.n	8005c5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c22:	4b1f      	ldr	r3, [pc, #124]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c28:	4a1d      	ldr	r2, [pc, #116]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c2a:	f023 0301 	bic.w	r3, r3, #1
 8005c2e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c32:	f7fe fa17 	bl	8004064 <HAL_GetTick>
 8005c36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c3a:	f7fe fa13 	bl	8004064 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e0d5      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c4c:	4b14      	ldr	r3, [pc, #80]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1ef      	bne.n	8005c3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 80c9 	beq.w	8005df6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c64:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 030c 	and.w	r3, r3, #12
 8005c6c:	2b0c      	cmp	r3, #12
 8005c6e:	f000 8083 	beq.w	8005d78 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d15e      	bne.n	8005d38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c7a:	4b09      	ldr	r3, [pc, #36]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c86:	f7fe f9ed 	bl	8004064 <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c8c:	e00c      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c8e:	f7fe f9e9 	bl	8004064 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d905      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e0ab      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ca8:	4b55      	ldr	r3, [pc, #340]	@ (8005e00 <HAL_RCC_OscConfig+0x618>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1ec      	bne.n	8005c8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cb4:	4b52      	ldr	r3, [pc, #328]	@ (8005e00 <HAL_RCC_OscConfig+0x618>)
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	4b52      	ldr	r3, [pc, #328]	@ (8005e04 <HAL_RCC_OscConfig+0x61c>)
 8005cba:	4013      	ands	r3, r2
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6a11      	ldr	r1, [r2, #32]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cc4:	3a01      	subs	r2, #1
 8005cc6:	0112      	lsls	r2, r2, #4
 8005cc8:	4311      	orrs	r1, r2
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005cce:	0212      	lsls	r2, r2, #8
 8005cd0:	4311      	orrs	r1, r2
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005cd6:	0852      	lsrs	r2, r2, #1
 8005cd8:	3a01      	subs	r2, #1
 8005cda:	0552      	lsls	r2, r2, #21
 8005cdc:	4311      	orrs	r1, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ce2:	0852      	lsrs	r2, r2, #1
 8005ce4:	3a01      	subs	r2, #1
 8005ce6:	0652      	lsls	r2, r2, #25
 8005ce8:	4311      	orrs	r1, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005cee:	06d2      	lsls	r2, r2, #27
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	4943      	ldr	r1, [pc, #268]	@ (8005e00 <HAL_RCC_OscConfig+0x618>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cf8:	4b41      	ldr	r3, [pc, #260]	@ (8005e00 <HAL_RCC_OscConfig+0x618>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a40      	ldr	r2, [pc, #256]	@ (8005e00 <HAL_RCC_OscConfig+0x618>)
 8005cfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d04:	4b3e      	ldr	r3, [pc, #248]	@ (8005e00 <HAL_RCC_OscConfig+0x618>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	4a3d      	ldr	r2, [pc, #244]	@ (8005e00 <HAL_RCC_OscConfig+0x618>)
 8005d0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d10:	f7fe f9a8 	bl	8004064 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d18:	f7fe f9a4 	bl	8004064 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e066      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d2a:	4b35      	ldr	r3, [pc, #212]	@ (8005e00 <HAL_RCC_OscConfig+0x618>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0f0      	beq.n	8005d18 <HAL_RCC_OscConfig+0x530>
 8005d36:	e05e      	b.n	8005df6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d38:	4b31      	ldr	r3, [pc, #196]	@ (8005e00 <HAL_RCC_OscConfig+0x618>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a30      	ldr	r2, [pc, #192]	@ (8005e00 <HAL_RCC_OscConfig+0x618>)
 8005d3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d44:	f7fe f98e 	bl	8004064 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fe f98a 	bl	8004064 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e04c      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d5e:	4b28      	ldr	r3, [pc, #160]	@ (8005e00 <HAL_RCC_OscConfig+0x618>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d6a:	4b25      	ldr	r3, [pc, #148]	@ (8005e00 <HAL_RCC_OscConfig+0x618>)
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	4924      	ldr	r1, [pc, #144]	@ (8005e00 <HAL_RCC_OscConfig+0x618>)
 8005d70:	4b25      	ldr	r3, [pc, #148]	@ (8005e08 <HAL_RCC_OscConfig+0x620>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	60cb      	str	r3, [r1, #12]
 8005d76:	e03e      	b.n	8005df6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e039      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d84:	4b1e      	ldr	r3, [pc, #120]	@ (8005e00 <HAL_RCC_OscConfig+0x618>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f003 0203 	and.w	r2, r3, #3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d12c      	bne.n	8005df2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da2:	3b01      	subs	r3, #1
 8005da4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d123      	bne.n	8005df2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d11b      	bne.n	8005df2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d113      	bne.n	8005df2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd4:	085b      	lsrs	r3, r3, #1
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d109      	bne.n	8005df2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	3b01      	subs	r3, #1
 8005dec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d001      	beq.n	8005df6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3720      	adds	r7, #32
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40021000 	.word	0x40021000
 8005e04:	019f800c 	.word	0x019f800c
 8005e08:	feeefffc 	.word	0xfeeefffc

08005e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e11e      	b.n	8006062 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e24:	4b91      	ldr	r3, [pc, #580]	@ (800606c <HAL_RCC_ClockConfig+0x260>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 030f 	and.w	r3, r3, #15
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d910      	bls.n	8005e54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e32:	4b8e      	ldr	r3, [pc, #568]	@ (800606c <HAL_RCC_ClockConfig+0x260>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f023 020f 	bic.w	r2, r3, #15
 8005e3a:	498c      	ldr	r1, [pc, #560]	@ (800606c <HAL_RCC_ClockConfig+0x260>)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e42:	4b8a      	ldr	r3, [pc, #552]	@ (800606c <HAL_RCC_ClockConfig+0x260>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d001      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e106      	b.n	8006062 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d073      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d129      	bne.n	8005ebc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e68:	4b81      	ldr	r3, [pc, #516]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e0f4      	b.n	8006062 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e78:	f000 f99e 	bl	80061b8 <RCC_GetSysClockFreqFromPLLSource>
 8005e7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4a7c      	ldr	r2, [pc, #496]	@ (8006074 <HAL_RCC_ClockConfig+0x268>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d93f      	bls.n	8005f06 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e86:	4b7a      	ldr	r3, [pc, #488]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d009      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d033      	beq.n	8005f06 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d12f      	bne.n	8005f06 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ea6:	4b72      	ldr	r3, [pc, #456]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eae:	4a70      	ldr	r2, [pc, #448]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005eb6:	2380      	movs	r3, #128	@ 0x80
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	e024      	b.n	8005f06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d107      	bne.n	8005ed4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d109      	bne.n	8005ee4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e0c6      	b.n	8006062 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ed4:	4b66      	ldr	r3, [pc, #408]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0be      	b.n	8006062 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ee4:	f000 f8ce 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 8005ee8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	4a61      	ldr	r2, [pc, #388]	@ (8006074 <HAL_RCC_ClockConfig+0x268>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d909      	bls.n	8005f06 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ef2:	4b5f      	ldr	r3, [pc, #380]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005efa:	4a5d      	ldr	r2, [pc, #372]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f02:	2380      	movs	r3, #128	@ 0x80
 8005f04:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f06:	4b5a      	ldr	r3, [pc, #360]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f023 0203 	bic.w	r2, r3, #3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	4957      	ldr	r1, [pc, #348]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f18:	f7fe f8a4 	bl	8004064 <HAL_GetTick>
 8005f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f1e:	e00a      	b.n	8005f36 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f20:	f7fe f8a0 	bl	8004064 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e095      	b.n	8006062 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f36:	4b4e      	ldr	r3, [pc, #312]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 020c 	and.w	r2, r3, #12
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d1eb      	bne.n	8005f20 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d023      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f60:	4b43      	ldr	r3, [pc, #268]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	4a42      	ldr	r2, [pc, #264]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005f66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f6a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f78:	4b3d      	ldr	r3, [pc, #244]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f80:	4a3b      	ldr	r2, [pc, #236]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005f82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f88:	4b39      	ldr	r3, [pc, #228]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	4936      	ldr	r1, [pc, #216]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	608b      	str	r3, [r1, #8]
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2b80      	cmp	r3, #128	@ 0x80
 8005fa0:	d105      	bne.n	8005fae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005fa2:	4b33      	ldr	r3, [pc, #204]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	4a32      	ldr	r2, [pc, #200]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8005fa8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fae:	4b2f      	ldr	r3, [pc, #188]	@ (800606c <HAL_RCC_ClockConfig+0x260>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d21d      	bcs.n	8005ff8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800606c <HAL_RCC_ClockConfig+0x260>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f023 020f 	bic.w	r2, r3, #15
 8005fc4:	4929      	ldr	r1, [pc, #164]	@ (800606c <HAL_RCC_ClockConfig+0x260>)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fcc:	f7fe f84a 	bl	8004064 <HAL_GetTick>
 8005fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd2:	e00a      	b.n	8005fea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd4:	f7fe f846 	bl	8004064 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e03b      	b.n	8006062 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fea:	4b20      	ldr	r3, [pc, #128]	@ (800606c <HAL_RCC_ClockConfig+0x260>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 030f 	and.w	r3, r3, #15
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d1ed      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d008      	beq.n	8006016 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006004:	4b1a      	ldr	r3, [pc, #104]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	4917      	ldr	r1, [pc, #92]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8006012:	4313      	orrs	r3, r2
 8006014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0308 	and.w	r3, r3, #8
 800601e:	2b00      	cmp	r3, #0
 8006020:	d009      	beq.n	8006036 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006022:	4b13      	ldr	r3, [pc, #76]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	490f      	ldr	r1, [pc, #60]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 8006032:	4313      	orrs	r3, r2
 8006034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006036:	f000 f825 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 800603a:	4602      	mov	r2, r0
 800603c:	4b0c      	ldr	r3, [pc, #48]	@ (8006070 <HAL_RCC_ClockConfig+0x264>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	091b      	lsrs	r3, r3, #4
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	490c      	ldr	r1, [pc, #48]	@ (8006078 <HAL_RCC_ClockConfig+0x26c>)
 8006048:	5ccb      	ldrb	r3, [r1, r3]
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	fa22 f303 	lsr.w	r3, r2, r3
 8006052:	4a0a      	ldr	r2, [pc, #40]	@ (800607c <HAL_RCC_ClockConfig+0x270>)
 8006054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006056:	4b0a      	ldr	r3, [pc, #40]	@ (8006080 <HAL_RCC_ClockConfig+0x274>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f7fd ffb6 	bl	8003fcc <HAL_InitTick>
 8006060:	4603      	mov	r3, r0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	40022000 	.word	0x40022000
 8006070:	40021000 	.word	0x40021000
 8006074:	04c4b400 	.word	0x04c4b400
 8006078:	08009bbc 	.word	0x08009bbc
 800607c:	20000004 	.word	0x20000004
 8006080:	20000008 	.word	0x20000008

08006084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800608a:	4b2c      	ldr	r3, [pc, #176]	@ (800613c <HAL_RCC_GetSysClockFreq+0xb8>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 030c 	and.w	r3, r3, #12
 8006092:	2b04      	cmp	r3, #4
 8006094:	d102      	bne.n	800609c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006096:	4b2a      	ldr	r3, [pc, #168]	@ (8006140 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006098:	613b      	str	r3, [r7, #16]
 800609a:	e047      	b.n	800612c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800609c:	4b27      	ldr	r3, [pc, #156]	@ (800613c <HAL_RCC_GetSysClockFreq+0xb8>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 030c 	and.w	r3, r3, #12
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d102      	bne.n	80060ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060a8:	4b26      	ldr	r3, [pc, #152]	@ (8006144 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	e03e      	b.n	800612c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80060ae:	4b23      	ldr	r3, [pc, #140]	@ (800613c <HAL_RCC_GetSysClockFreq+0xb8>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 030c 	and.w	r3, r3, #12
 80060b6:	2b0c      	cmp	r3, #12
 80060b8:	d136      	bne.n	8006128 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060ba:	4b20      	ldr	r3, [pc, #128]	@ (800613c <HAL_RCC_GetSysClockFreq+0xb8>)
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060c4:	4b1d      	ldr	r3, [pc, #116]	@ (800613c <HAL_RCC_GetSysClockFreq+0xb8>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	3301      	adds	r3, #1
 80060d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d10c      	bne.n	80060f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006144 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	4a16      	ldr	r2, [pc, #88]	@ (800613c <HAL_RCC_GetSysClockFreq+0xb8>)
 80060e2:	68d2      	ldr	r2, [r2, #12]
 80060e4:	0a12      	lsrs	r2, r2, #8
 80060e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060ea:	fb02 f303 	mul.w	r3, r2, r3
 80060ee:	617b      	str	r3, [r7, #20]
      break;
 80060f0:	e00c      	b.n	800610c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060f2:	4a13      	ldr	r2, [pc, #76]	@ (8006140 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fa:	4a10      	ldr	r2, [pc, #64]	@ (800613c <HAL_RCC_GetSysClockFreq+0xb8>)
 80060fc:	68d2      	ldr	r2, [r2, #12]
 80060fe:	0a12      	lsrs	r2, r2, #8
 8006100:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006104:	fb02 f303 	mul.w	r3, r2, r3
 8006108:	617b      	str	r3, [r7, #20]
      break;
 800610a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800610c:	4b0b      	ldr	r3, [pc, #44]	@ (800613c <HAL_RCC_GetSysClockFreq+0xb8>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	0e5b      	lsrs	r3, r3, #25
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	3301      	adds	r3, #1
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	fbb2 f3f3 	udiv	r3, r2, r3
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	e001      	b.n	800612c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800612c:	693b      	ldr	r3, [r7, #16]
}
 800612e:	4618      	mov	r0, r3
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	40021000 	.word	0x40021000
 8006140:	00f42400 	.word	0x00f42400
 8006144:	007a1200 	.word	0x007a1200

08006148 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800614c:	4b03      	ldr	r3, [pc, #12]	@ (800615c <HAL_RCC_GetHCLKFreq+0x14>)
 800614e:	681b      	ldr	r3, [r3, #0]
}
 8006150:	4618      	mov	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	20000004 	.word	0x20000004

08006160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006164:	f7ff fff0 	bl	8006148 <HAL_RCC_GetHCLKFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	0a1b      	lsrs	r3, r3, #8
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	4904      	ldr	r1, [pc, #16]	@ (8006188 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006176:	5ccb      	ldrb	r3, [r1, r3]
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006180:	4618      	mov	r0, r3
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40021000 	.word	0x40021000
 8006188:	08009bcc 	.word	0x08009bcc

0800618c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006190:	f7ff ffda 	bl	8006148 <HAL_RCC_GetHCLKFreq>
 8006194:	4602      	mov	r2, r0
 8006196:	4b06      	ldr	r3, [pc, #24]	@ (80061b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	0adb      	lsrs	r3, r3, #11
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	4904      	ldr	r1, [pc, #16]	@ (80061b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061a2:	5ccb      	ldrb	r3, [r1, r3]
 80061a4:	f003 031f 	and.w	r3, r3, #31
 80061a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	40021000 	.word	0x40021000
 80061b4:	08009bcc 	.word	0x08009bcc

080061b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061be:	4b1e      	ldr	r3, [pc, #120]	@ (8006238 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006238 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	091b      	lsrs	r3, r3, #4
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	3301      	adds	r3, #1
 80061d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d10c      	bne.n	80061f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061dc:	4a17      	ldr	r2, [pc, #92]	@ (800623c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e4:	4a14      	ldr	r2, [pc, #80]	@ (8006238 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061e6:	68d2      	ldr	r2, [r2, #12]
 80061e8:	0a12      	lsrs	r2, r2, #8
 80061ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061ee:	fb02 f303 	mul.w	r3, r2, r3
 80061f2:	617b      	str	r3, [r7, #20]
    break;
 80061f4:	e00c      	b.n	8006210 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061f6:	4a12      	ldr	r2, [pc, #72]	@ (8006240 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006238 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006200:	68d2      	ldr	r2, [r2, #12]
 8006202:	0a12      	lsrs	r2, r2, #8
 8006204:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006208:	fb02 f303 	mul.w	r3, r2, r3
 800620c:	617b      	str	r3, [r7, #20]
    break;
 800620e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006210:	4b09      	ldr	r3, [pc, #36]	@ (8006238 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	0e5b      	lsrs	r3, r3, #25
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	3301      	adds	r3, #1
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	fbb2 f3f3 	udiv	r3, r2, r3
 8006228:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800622a:	687b      	ldr	r3, [r7, #4]
}
 800622c:	4618      	mov	r0, r3
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	40021000 	.word	0x40021000
 800623c:	007a1200 	.word	0x007a1200
 8006240:	00f42400 	.word	0x00f42400

08006244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800624c:	2300      	movs	r3, #0
 800624e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006250:	2300      	movs	r3, #0
 8006252:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 8098 	beq.w	8006392 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006262:	2300      	movs	r3, #0
 8006264:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006266:	4b43      	ldr	r3, [pc, #268]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10d      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006272:	4b40      	ldr	r3, [pc, #256]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006276:	4a3f      	ldr	r2, [pc, #252]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800627c:	6593      	str	r3, [r2, #88]	@ 0x58
 800627e:	4b3d      	ldr	r3, [pc, #244]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006286:	60bb      	str	r3, [r7, #8]
 8006288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800628a:	2301      	movs	r3, #1
 800628c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800628e:	4b3a      	ldr	r3, [pc, #232]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a39      	ldr	r2, [pc, #228]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006298:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800629a:	f7fd fee3 	bl	8004064 <HAL_GetTick>
 800629e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062a0:	e009      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062a2:	f7fd fedf 	bl	8004064 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d902      	bls.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	74fb      	strb	r3, [r7, #19]
        break;
 80062b4:	e005      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062b6:	4b30      	ldr	r3, [pc, #192]	@ (8006378 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0ef      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80062c2:	7cfb      	ldrb	r3, [r7, #19]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d159      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062c8:	4b2a      	ldr	r3, [pc, #168]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d01e      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d019      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062e4:	4b23      	ldr	r3, [pc, #140]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062f0:	4b20      	ldr	r3, [pc, #128]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006300:	4b1c      	ldr	r3, [pc, #112]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006306:	4a1b      	ldr	r2, [pc, #108]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800630c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006310:	4a18      	ldr	r2, [pc, #96]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d016      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006322:	f7fd fe9f 	bl	8004064 <HAL_GetTick>
 8006326:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006328:	e00b      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800632a:	f7fd fe9b 	bl	8004064 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006338:	4293      	cmp	r3, r2
 800633a:	d902      	bls.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	74fb      	strb	r3, [r7, #19]
            break;
 8006340:	e006      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006342:	4b0c      	ldr	r3, [pc, #48]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0ec      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006350:	7cfb      	ldrb	r3, [r7, #19]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006356:	4b07      	ldr	r3, [pc, #28]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800635c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006364:	4903      	ldr	r1, [pc, #12]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800636c:	e008      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800636e:	7cfb      	ldrb	r3, [r7, #19]
 8006370:	74bb      	strb	r3, [r7, #18]
 8006372:	e005      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006374:	40021000 	.word	0x40021000
 8006378:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637c:	7cfb      	ldrb	r3, [r7, #19]
 800637e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006380:	7c7b      	ldrb	r3, [r7, #17]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d105      	bne.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006386:	4ba7      	ldr	r3, [pc, #668]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638a:	4aa6      	ldr	r2, [pc, #664]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800638c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006390:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800639e:	4ba1      	ldr	r3, [pc, #644]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a4:	f023 0203 	bic.w	r2, r3, #3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	499d      	ldr	r1, [pc, #628]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063c0:	4b98      	ldr	r3, [pc, #608]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c6:	f023 020c 	bic.w	r2, r3, #12
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	4995      	ldr	r1, [pc, #596]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063e2:	4b90      	ldr	r3, [pc, #576]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	498c      	ldr	r1, [pc, #560]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006404:	4b87      	ldr	r3, [pc, #540]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800640a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	4984      	ldr	r1, [pc, #528]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006414:	4313      	orrs	r3, r2
 8006416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006426:	4b7f      	ldr	r3, [pc, #508]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800642c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	497b      	ldr	r1, [pc, #492]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0320 	and.w	r3, r3, #32
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00a      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006448:	4b76      	ldr	r3, [pc, #472]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800644a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800644e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	4973      	ldr	r1, [pc, #460]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006458:	4313      	orrs	r3, r2
 800645a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800646a:	4b6e      	ldr	r3, [pc, #440]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800646c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006470:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	496a      	ldr	r1, [pc, #424]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800647a:	4313      	orrs	r3, r2
 800647c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800648c:	4b65      	ldr	r3, [pc, #404]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006492:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	4962      	ldr	r1, [pc, #392]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649c:	4313      	orrs	r3, r2
 800649e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064ae:	4b5d      	ldr	r3, [pc, #372]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	4959      	ldr	r1, [pc, #356]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00a      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064d0:	4b54      	ldr	r3, [pc, #336]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064d6:	f023 0203 	bic.w	r2, r3, #3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064de:	4951      	ldr	r1, [pc, #324]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064f2:	4b4c      	ldr	r3, [pc, #304]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006500:	4948      	ldr	r1, [pc, #288]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006510:	2b00      	cmp	r3, #0
 8006512:	d015      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006514:	4b43      	ldr	r3, [pc, #268]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006522:	4940      	ldr	r1, [pc, #256]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800652e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006532:	d105      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006534:	4b3b      	ldr	r3, [pc, #236]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	4a3a      	ldr	r2, [pc, #232]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800653e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006548:	2b00      	cmp	r3, #0
 800654a:	d015      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800654c:	4b35      	ldr	r3, [pc, #212]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800654e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006552:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655a:	4932      	ldr	r1, [pc, #200]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800656a:	d105      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800656c:	4b2d      	ldr	r3, [pc, #180]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	4a2c      	ldr	r2, [pc, #176]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006576:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d015      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006584:	4b27      	ldr	r3, [pc, #156]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006592:	4924      	ldr	r1, [pc, #144]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065a2:	d105      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d015      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065bc:	4b19      	ldr	r3, [pc, #100]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ca:	4916      	ldr	r1, [pc, #88]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065da:	d105      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065dc:	4b11      	ldr	r3, [pc, #68]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	4a10      	ldr	r2, [pc, #64]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d019      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006602:	4908      	ldr	r1, [pc, #32]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006604:	4313      	orrs	r3, r2
 8006606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006612:	d109      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006614:	4b03      	ldr	r3, [pc, #12]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	4a02      	ldr	r2, [pc, #8]	@ (8006624 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800661e:	60d3      	str	r3, [r2, #12]
 8006620:	e002      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006622:	bf00      	nop
 8006624:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d015      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006634:	4b29      	ldr	r3, [pc, #164]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800663a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006642:	4926      	ldr	r1, [pc, #152]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006644:	4313      	orrs	r3, r2
 8006646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800664e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006652:	d105      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006654:	4b21      	ldr	r3, [pc, #132]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	4a20      	ldr	r2, [pc, #128]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800665a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800665e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d015      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800666c:	4b1b      	ldr	r3, [pc, #108]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800666e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006672:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800667a:	4918      	ldr	r1, [pc, #96]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800667c:	4313      	orrs	r3, r2
 800667e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800668a:	d105      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800668c:	4b13      	ldr	r3, [pc, #76]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	4a12      	ldr	r2, [pc, #72]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006696:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d015      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80066a4:	4b0d      	ldr	r3, [pc, #52]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066b2:	490a      	ldr	r1, [pc, #40]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066c2:	d105      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066c4:	4b05      	ldr	r3, [pc, #20]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	4a04      	ldr	r2, [pc, #16]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80066d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40021000 	.word	0x40021000

080066e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e09d      	b.n	800682e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d108      	bne.n	800670c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006702:	d009      	beq.n	8006718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	61da      	str	r2, [r3, #28]
 800670a:	e005      	b.n	8006718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fb fe96 	bl	8002464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800674e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006758:	d902      	bls.n	8006760 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	e002      	b.n	8006766 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006764:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800676e:	d007      	beq.n	8006780 <HAL_SPI_Init+0xa0>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006778:	d002      	beq.n	8006780 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067c2:	ea42 0103 	orr.w	r1, r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	0c1b      	lsrs	r3, r3, #16
 80067dc:	f003 0204 	and.w	r2, r3, #4
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	431a      	orrs	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ee:	f003 0308 	and.w	r3, r3, #8
 80067f2:	431a      	orrs	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80067fc:	ea42 0103 	orr.w	r1, r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69da      	ldr	r2, [r3, #28]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800681c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e049      	b.n	80068dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d106      	bne.n	8006862 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7fc f96d 	bl	8002b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	3304      	adds	r3, #4
 8006872:	4619      	mov	r1, r3
 8006874:	4610      	mov	r0, r2
 8006876:	f000 f983 	bl	8006b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_TIM_ConfigClockSource+0x1c>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e0ee      	b.n	8006ade <HAL_TIM_ConfigClockSource+0x1fa>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800691e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800692a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a6b      	ldr	r2, [pc, #428]	@ (8006ae8 <HAL_TIM_ConfigClockSource+0x204>)
 800693a:	4293      	cmp	r3, r2
 800693c:	f000 80b9 	beq.w	8006ab2 <HAL_TIM_ConfigClockSource+0x1ce>
 8006940:	4a69      	ldr	r2, [pc, #420]	@ (8006ae8 <HAL_TIM_ConfigClockSource+0x204>)
 8006942:	4293      	cmp	r3, r2
 8006944:	f200 80be 	bhi.w	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 8006948:	4a68      	ldr	r2, [pc, #416]	@ (8006aec <HAL_TIM_ConfigClockSource+0x208>)
 800694a:	4293      	cmp	r3, r2
 800694c:	f000 80b1 	beq.w	8006ab2 <HAL_TIM_ConfigClockSource+0x1ce>
 8006950:	4a66      	ldr	r2, [pc, #408]	@ (8006aec <HAL_TIM_ConfigClockSource+0x208>)
 8006952:	4293      	cmp	r3, r2
 8006954:	f200 80b6 	bhi.w	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 8006958:	4a65      	ldr	r2, [pc, #404]	@ (8006af0 <HAL_TIM_ConfigClockSource+0x20c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	f000 80a9 	beq.w	8006ab2 <HAL_TIM_ConfigClockSource+0x1ce>
 8006960:	4a63      	ldr	r2, [pc, #396]	@ (8006af0 <HAL_TIM_ConfigClockSource+0x20c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	f200 80ae 	bhi.w	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 8006968:	4a62      	ldr	r2, [pc, #392]	@ (8006af4 <HAL_TIM_ConfigClockSource+0x210>)
 800696a:	4293      	cmp	r3, r2
 800696c:	f000 80a1 	beq.w	8006ab2 <HAL_TIM_ConfigClockSource+0x1ce>
 8006970:	4a60      	ldr	r2, [pc, #384]	@ (8006af4 <HAL_TIM_ConfigClockSource+0x210>)
 8006972:	4293      	cmp	r3, r2
 8006974:	f200 80a6 	bhi.w	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 8006978:	4a5f      	ldr	r2, [pc, #380]	@ (8006af8 <HAL_TIM_ConfigClockSource+0x214>)
 800697a:	4293      	cmp	r3, r2
 800697c:	f000 8099 	beq.w	8006ab2 <HAL_TIM_ConfigClockSource+0x1ce>
 8006980:	4a5d      	ldr	r2, [pc, #372]	@ (8006af8 <HAL_TIM_ConfigClockSource+0x214>)
 8006982:	4293      	cmp	r3, r2
 8006984:	f200 809e 	bhi.w	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 8006988:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800698c:	f000 8091 	beq.w	8006ab2 <HAL_TIM_ConfigClockSource+0x1ce>
 8006990:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006994:	f200 8096 	bhi.w	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 8006998:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800699c:	f000 8089 	beq.w	8006ab2 <HAL_TIM_ConfigClockSource+0x1ce>
 80069a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069a4:	f200 808e 	bhi.w	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 80069a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ac:	d03e      	beq.n	8006a2c <HAL_TIM_ConfigClockSource+0x148>
 80069ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069b2:	f200 8087 	bhi.w	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 80069b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ba:	f000 8086 	beq.w	8006aca <HAL_TIM_ConfigClockSource+0x1e6>
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069c2:	d87f      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 80069c4:	2b70      	cmp	r3, #112	@ 0x70
 80069c6:	d01a      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x11a>
 80069c8:	2b70      	cmp	r3, #112	@ 0x70
 80069ca:	d87b      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 80069cc:	2b60      	cmp	r3, #96	@ 0x60
 80069ce:	d050      	beq.n	8006a72 <HAL_TIM_ConfigClockSource+0x18e>
 80069d0:	2b60      	cmp	r3, #96	@ 0x60
 80069d2:	d877      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 80069d4:	2b50      	cmp	r3, #80	@ 0x50
 80069d6:	d03c      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x16e>
 80069d8:	2b50      	cmp	r3, #80	@ 0x50
 80069da:	d873      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 80069dc:	2b40      	cmp	r3, #64	@ 0x40
 80069de:	d058      	beq.n	8006a92 <HAL_TIM_ConfigClockSource+0x1ae>
 80069e0:	2b40      	cmp	r3, #64	@ 0x40
 80069e2:	d86f      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 80069e4:	2b30      	cmp	r3, #48	@ 0x30
 80069e6:	d064      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0x1ce>
 80069e8:	2b30      	cmp	r3, #48	@ 0x30
 80069ea:	d86b      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	d060      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0x1ce>
 80069f0:	2b20      	cmp	r3, #32
 80069f2:	d867      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d05c      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0x1ce>
 80069f8:	2b10      	cmp	r3, #16
 80069fa:	d05a      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0x1ce>
 80069fc:	e062      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a0e:	f000 fabd 	bl	8006f8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	609a      	str	r2, [r3, #8]
      break;
 8006a2a:	e04f      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a3c:	f000 faa6 	bl	8006f8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689a      	ldr	r2, [r3, #8]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a4e:	609a      	str	r2, [r3, #8]
      break;
 8006a50:	e03c      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f000 fa18 	bl	8006e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2150      	movs	r1, #80	@ 0x50
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fa71 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006a70:	e02c      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f000 fa37 	bl	8006ef2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2160      	movs	r1, #96	@ 0x60
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fa61 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006a90:	e01c      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f000 f9f8 	bl	8006e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2140      	movs	r1, #64	@ 0x40
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fa51 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006ab0:	e00c      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4619      	mov	r1, r3
 8006abc:	4610      	mov	r0, r2
 8006abe:	f000 fa48 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006ac2:	e003      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac8:	e000      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8006aca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	00100070 	.word	0x00100070
 8006aec:	00100050 	.word	0x00100050
 8006af0:	00100040 	.word	0x00100040
 8006af4:	00100030 	.word	0x00100030
 8006af8:	00100020 	.word	0x00100020

08006afc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e031      	b.n	8006b78 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f8de 	bl	8006ce8 <TIM_SlaveTimer_SetConfig>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d009      	beq.n	8006b46 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e018      	b.n	8006b78 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b54:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b64:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a4c      	ldr	r2, [pc, #304]	@ (8006cc4 <TIM_Base_SetConfig+0x144>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d017      	beq.n	8006bc8 <TIM_Base_SetConfig+0x48>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b9e:	d013      	beq.n	8006bc8 <TIM_Base_SetConfig+0x48>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a49      	ldr	r2, [pc, #292]	@ (8006cc8 <TIM_Base_SetConfig+0x148>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00f      	beq.n	8006bc8 <TIM_Base_SetConfig+0x48>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a48      	ldr	r2, [pc, #288]	@ (8006ccc <TIM_Base_SetConfig+0x14c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00b      	beq.n	8006bc8 <TIM_Base_SetConfig+0x48>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a47      	ldr	r2, [pc, #284]	@ (8006cd0 <TIM_Base_SetConfig+0x150>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d007      	beq.n	8006bc8 <TIM_Base_SetConfig+0x48>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a46      	ldr	r2, [pc, #280]	@ (8006cd4 <TIM_Base_SetConfig+0x154>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d003      	beq.n	8006bc8 <TIM_Base_SetConfig+0x48>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a45      	ldr	r2, [pc, #276]	@ (8006cd8 <TIM_Base_SetConfig+0x158>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d108      	bne.n	8006bda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a39      	ldr	r2, [pc, #228]	@ (8006cc4 <TIM_Base_SetConfig+0x144>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d023      	beq.n	8006c2a <TIM_Base_SetConfig+0xaa>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be8:	d01f      	beq.n	8006c2a <TIM_Base_SetConfig+0xaa>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a36      	ldr	r2, [pc, #216]	@ (8006cc8 <TIM_Base_SetConfig+0x148>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d01b      	beq.n	8006c2a <TIM_Base_SetConfig+0xaa>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a35      	ldr	r2, [pc, #212]	@ (8006ccc <TIM_Base_SetConfig+0x14c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d017      	beq.n	8006c2a <TIM_Base_SetConfig+0xaa>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a34      	ldr	r2, [pc, #208]	@ (8006cd0 <TIM_Base_SetConfig+0x150>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <TIM_Base_SetConfig+0xaa>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a33      	ldr	r2, [pc, #204]	@ (8006cd4 <TIM_Base_SetConfig+0x154>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00f      	beq.n	8006c2a <TIM_Base_SetConfig+0xaa>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a33      	ldr	r2, [pc, #204]	@ (8006cdc <TIM_Base_SetConfig+0x15c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00b      	beq.n	8006c2a <TIM_Base_SetConfig+0xaa>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a32      	ldr	r2, [pc, #200]	@ (8006ce0 <TIM_Base_SetConfig+0x160>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d007      	beq.n	8006c2a <TIM_Base_SetConfig+0xaa>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a31      	ldr	r2, [pc, #196]	@ (8006ce4 <TIM_Base_SetConfig+0x164>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_Base_SetConfig+0xaa>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a2c      	ldr	r2, [pc, #176]	@ (8006cd8 <TIM_Base_SetConfig+0x158>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d108      	bne.n	8006c3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a18      	ldr	r2, [pc, #96]	@ (8006cc4 <TIM_Base_SetConfig+0x144>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <TIM_Base_SetConfig+0x110>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8006cd4 <TIM_Base_SetConfig+0x154>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00f      	beq.n	8006c90 <TIM_Base_SetConfig+0x110>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a1a      	ldr	r2, [pc, #104]	@ (8006cdc <TIM_Base_SetConfig+0x15c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00b      	beq.n	8006c90 <TIM_Base_SetConfig+0x110>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a19      	ldr	r2, [pc, #100]	@ (8006ce0 <TIM_Base_SetConfig+0x160>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d007      	beq.n	8006c90 <TIM_Base_SetConfig+0x110>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a18      	ldr	r2, [pc, #96]	@ (8006ce4 <TIM_Base_SetConfig+0x164>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <TIM_Base_SetConfig+0x110>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a13      	ldr	r2, [pc, #76]	@ (8006cd8 <TIM_Base_SetConfig+0x158>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d103      	bne.n	8006c98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d105      	bne.n	8006cb6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f023 0201 	bic.w	r2, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	611a      	str	r2, [r3, #16]
  }
}
 8006cb6:	bf00      	nop
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	40012c00 	.word	0x40012c00
 8006cc8:	40000400 	.word	0x40000400
 8006ccc:	40000800 	.word	0x40000800
 8006cd0:	40000c00 	.word	0x40000c00
 8006cd4:	40013400 	.word	0x40013400
 8006cd8:	40015000 	.word	0x40015000
 8006cdc:	40014000 	.word	0x40014000
 8006ce0:	40014400 	.word	0x40014400
 8006ce4:	40014800 	.word	0x40014800

08006ce8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006d04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d08:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d1a:	f023 0307 	bic.w	r3, r3, #7
 8006d1e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	4a52      	ldr	r2, [pc, #328]	@ (8006e80 <TIM_SlaveTimer_SetConfig+0x198>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	f000 809a 	beq.w	8006e72 <TIM_SlaveTimer_SetConfig+0x18a>
 8006d3e:	4a50      	ldr	r2, [pc, #320]	@ (8006e80 <TIM_SlaveTimer_SetConfig+0x198>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	f200 8093 	bhi.w	8006e6c <TIM_SlaveTimer_SetConfig+0x184>
 8006d46:	4a4f      	ldr	r2, [pc, #316]	@ (8006e84 <TIM_SlaveTimer_SetConfig+0x19c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	f000 8092 	beq.w	8006e72 <TIM_SlaveTimer_SetConfig+0x18a>
 8006d4e:	4a4d      	ldr	r2, [pc, #308]	@ (8006e84 <TIM_SlaveTimer_SetConfig+0x19c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	f200 808b 	bhi.w	8006e6c <TIM_SlaveTimer_SetConfig+0x184>
 8006d56:	4a4c      	ldr	r2, [pc, #304]	@ (8006e88 <TIM_SlaveTimer_SetConfig+0x1a0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	f000 808a 	beq.w	8006e72 <TIM_SlaveTimer_SetConfig+0x18a>
 8006d5e:	4a4a      	ldr	r2, [pc, #296]	@ (8006e88 <TIM_SlaveTimer_SetConfig+0x1a0>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	f200 8083 	bhi.w	8006e6c <TIM_SlaveTimer_SetConfig+0x184>
 8006d66:	4a49      	ldr	r2, [pc, #292]	@ (8006e8c <TIM_SlaveTimer_SetConfig+0x1a4>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	f000 8082 	beq.w	8006e72 <TIM_SlaveTimer_SetConfig+0x18a>
 8006d6e:	4a47      	ldr	r2, [pc, #284]	@ (8006e8c <TIM_SlaveTimer_SetConfig+0x1a4>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d87b      	bhi.n	8006e6c <TIM_SlaveTimer_SetConfig+0x184>
 8006d74:	4a46      	ldr	r2, [pc, #280]	@ (8006e90 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d07b      	beq.n	8006e72 <TIM_SlaveTimer_SetConfig+0x18a>
 8006d7a:	4a45      	ldr	r2, [pc, #276]	@ (8006e90 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d875      	bhi.n	8006e6c <TIM_SlaveTimer_SetConfig+0x184>
 8006d80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d84:	d075      	beq.n	8006e72 <TIM_SlaveTimer_SetConfig+0x18a>
 8006d86:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d8a:	d86f      	bhi.n	8006e6c <TIM_SlaveTimer_SetConfig+0x184>
 8006d8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d90:	d06f      	beq.n	8006e72 <TIM_SlaveTimer_SetConfig+0x18a>
 8006d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d96:	d869      	bhi.n	8006e6c <TIM_SlaveTimer_SetConfig+0x184>
 8006d98:	2b70      	cmp	r3, #112	@ 0x70
 8006d9a:	d01a      	beq.n	8006dd2 <TIM_SlaveTimer_SetConfig+0xea>
 8006d9c:	2b70      	cmp	r3, #112	@ 0x70
 8006d9e:	d865      	bhi.n	8006e6c <TIM_SlaveTimer_SetConfig+0x184>
 8006da0:	2b60      	cmp	r3, #96	@ 0x60
 8006da2:	d059      	beq.n	8006e58 <TIM_SlaveTimer_SetConfig+0x170>
 8006da4:	2b60      	cmp	r3, #96	@ 0x60
 8006da6:	d861      	bhi.n	8006e6c <TIM_SlaveTimer_SetConfig+0x184>
 8006da8:	2b50      	cmp	r3, #80	@ 0x50
 8006daa:	d04b      	beq.n	8006e44 <TIM_SlaveTimer_SetConfig+0x15c>
 8006dac:	2b50      	cmp	r3, #80	@ 0x50
 8006dae:	d85d      	bhi.n	8006e6c <TIM_SlaveTimer_SetConfig+0x184>
 8006db0:	2b40      	cmp	r3, #64	@ 0x40
 8006db2:	d019      	beq.n	8006de8 <TIM_SlaveTimer_SetConfig+0x100>
 8006db4:	2b40      	cmp	r3, #64	@ 0x40
 8006db6:	d859      	bhi.n	8006e6c <TIM_SlaveTimer_SetConfig+0x184>
 8006db8:	2b30      	cmp	r3, #48	@ 0x30
 8006dba:	d05a      	beq.n	8006e72 <TIM_SlaveTimer_SetConfig+0x18a>
 8006dbc:	2b30      	cmp	r3, #48	@ 0x30
 8006dbe:	d855      	bhi.n	8006e6c <TIM_SlaveTimer_SetConfig+0x184>
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d056      	beq.n	8006e72 <TIM_SlaveTimer_SetConfig+0x18a>
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d851      	bhi.n	8006e6c <TIM_SlaveTimer_SetConfig+0x184>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d052      	beq.n	8006e72 <TIM_SlaveTimer_SetConfig+0x18a>
 8006dcc:	2b10      	cmp	r3, #16
 8006dce:	d050      	beq.n	8006e72 <TIM_SlaveTimer_SetConfig+0x18a>
 8006dd0:	e04c      	b.n	8006e6c <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006de2:	f000 f8d3 	bl	8006f8c <TIM_ETR_SetConfig>
      break;
 8006de6:	e045      	b.n	8006e74 <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b05      	cmp	r3, #5
 8006dee:	d004      	beq.n	8006dfa <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006df4:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8006df8:	d101      	bne.n	8006dfe <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e03b      	b.n	8006e76 <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6a1a      	ldr	r2, [r3, #32]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0201 	bic.w	r2, r2, #1
 8006e14:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e24:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	011b      	lsls	r3, r3, #4
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]
      break;
 8006e42:	e017      	b.n	8006e74 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e50:	461a      	mov	r2, r3
 8006e52:	f000 f81f 	bl	8006e94 <TIM_TI1_ConfigInputStage>
      break;
 8006e56:	e00d      	b.n	8006e74 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e64:	461a      	mov	r2, r3
 8006e66:	f000 f844 	bl	8006ef2 <TIM_TI2_ConfigInputStage>
      break;
 8006e6a:	e003      	b.n	8006e74 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e70:	e000      	b.n	8006e74 <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 8006e72:	bf00      	nop
  }

  return status;
 8006e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	00100070 	.word	0x00100070
 8006e84:	00100050 	.word	0x00100050
 8006e88:	00100040 	.word	0x00100040
 8006e8c:	00100030 	.word	0x00100030
 8006e90:	00100020 	.word	0x00100020

08006e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	f023 0201 	bic.w	r2, r3, #1
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f023 030a 	bic.w	r3, r3, #10
 8006ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b087      	sub	sp, #28
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	f023 0210 	bic.w	r2, r3, #16
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	031b      	lsls	r3, r3, #12
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	621a      	str	r2, [r3, #32]
}
 8006f46:	bf00      	nop
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f043 0307 	orr.w	r3, r3, #7
 8006f78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	609a      	str	r2, [r3, #8]
}
 8006f80:	bf00      	nop
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
 8006f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	021a      	lsls	r2, r3, #8
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	609a      	str	r2, [r3, #8]
}
 8006fc0:	bf00      	nop
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e074      	b.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a34      	ldr	r2, [pc, #208]	@ (80070dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d009      	beq.n	8007022 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a33      	ldr	r2, [pc, #204]	@ (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d004      	beq.n	8007022 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a31      	ldr	r2, [pc, #196]	@ (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d108      	bne.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007028:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	4313      	orrs	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800703a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800703e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a21      	ldr	r2, [pc, #132]	@ (80070dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d022      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007064:	d01d      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a1f      	ldr	r2, [pc, #124]	@ (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d018      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a1d      	ldr	r2, [pc, #116]	@ (80070ec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d013      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a1c      	ldr	r2, [pc, #112]	@ (80070f0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00e      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a15      	ldr	r2, [pc, #84]	@ (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d009      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a18      	ldr	r2, [pc, #96]	@ (80070f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d004      	beq.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a11      	ldr	r2, [pc, #68]	@ (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d10c      	bne.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40012c00 	.word	0x40012c00
 80070e0:	40013400 	.word	0x40013400
 80070e4:	40015000 	.word	0x40015000
 80070e8:	40000400 	.word	0x40000400
 80070ec:	40000800 	.word	0x40000800
 80070f0:	40000c00 	.word	0x40000c00
 80070f4:	40014000 	.word	0x40014000

080070f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e042      	b.n	8007190 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7fc f8d3 	bl	80032c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2224      	movs	r2, #36	@ 0x24
 8007126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0201 	bic.w	r2, r2, #1
 8007138:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fc1a 	bl	800797c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f91b 	bl	8007384 <UART_SetConfig>
 800714e:	4603      	mov	r3, r0
 8007150:	2b01      	cmp	r3, #1
 8007152:	d101      	bne.n	8007158 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e01b      	b.n	8007190 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0201 	orr.w	r2, r2, #1
 8007186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fc99 	bl	8007ac0 <UART_CheckIdleState>
 800718e:	4603      	mov	r3, r0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007198:	b480      	push	{r7}
 800719a:	b091      	sub	sp, #68	@ 0x44
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	d178      	bne.n	80072a2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <HAL_UART_Transmit_IT+0x24>
 80071b6:	88fb      	ldrh	r3, [r7, #6]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e071      	b.n	80072a4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	88fa      	ldrh	r2, [r7, #6]
 80071ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	88fa      	ldrh	r2, [r7, #6]
 80071d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2221      	movs	r2, #33	@ 0x21
 80071e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071f4:	d12a      	bne.n	800724c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071fe:	d107      	bne.n	8007210 <HAL_UART_Transmit_IT+0x78>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d103      	bne.n	8007210 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4a29      	ldr	r2, [pc, #164]	@ (80072b0 <HAL_UART_Transmit_IT+0x118>)
 800720c:	679a      	str	r2, [r3, #120]	@ 0x78
 800720e:	e002      	b.n	8007216 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4a28      	ldr	r2, [pc, #160]	@ (80072b4 <HAL_UART_Transmit_IT+0x11c>)
 8007214:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3308      	adds	r3, #8
 800721c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007220:	e853 3f00 	ldrex	r3, [r3]
 8007224:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800722c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3308      	adds	r3, #8
 8007234:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007236:	637a      	str	r2, [r7, #52]	@ 0x34
 8007238:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800723c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1e5      	bne.n	8007216 <HAL_UART_Transmit_IT+0x7e>
 800724a:	e028      	b.n	800729e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007254:	d107      	bne.n	8007266 <HAL_UART_Transmit_IT+0xce>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d103      	bne.n	8007266 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4a15      	ldr	r2, [pc, #84]	@ (80072b8 <HAL_UART_Transmit_IT+0x120>)
 8007262:	679a      	str	r2, [r3, #120]	@ 0x78
 8007264:	e002      	b.n	800726c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4a14      	ldr	r2, [pc, #80]	@ (80072bc <HAL_UART_Transmit_IT+0x124>)
 800726a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	613b      	str	r3, [r7, #16]
   return(result);
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800728a:	623b      	str	r3, [r7, #32]
 800728c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	69f9      	ldr	r1, [r7, #28]
 8007290:	6a3a      	ldr	r2, [r7, #32]
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	61bb      	str	r3, [r7, #24]
   return(result);
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e6      	bne.n	800726c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	e000      	b.n	80072a4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80072a2:	2302      	movs	r3, #2
  }
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3744      	adds	r7, #68	@ 0x44
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	0800825b 	.word	0x0800825b
 80072b4:	0800817b 	.word	0x0800817b
 80072b8:	080080b9 	.word	0x080080b9
 80072bc:	08008001 	.word	0x08008001

080072c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08a      	sub	sp, #40	@ 0x28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	4613      	mov	r3, r2
 80072cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	d137      	bne.n	8007348 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <HAL_UART_Receive_IT+0x24>
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e030      	b.n	800734a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a18      	ldr	r2, [pc, #96]	@ (8007354 <HAL_UART_Receive_IT+0x94>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d01f      	beq.n	8007338 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d018      	beq.n	8007338 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	613b      	str	r3, [r7, #16]
   return(result);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800731a:	627b      	str	r3, [r7, #36]	@ 0x24
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007324:	623b      	str	r3, [r7, #32]
 8007326:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	69f9      	ldr	r1, [r7, #28]
 800732a:	6a3a      	ldr	r2, [r7, #32]
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	61bb      	str	r3, [r7, #24]
   return(result);
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e6      	bne.n	8007306 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	461a      	mov	r2, r3
 800733c:	68b9      	ldr	r1, [r7, #8]
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 fcd6 	bl	8007cf0 <UART_Start_Receive_IT>
 8007344:	4603      	mov	r3, r0
 8007346:	e000      	b.n	800734a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007348:	2302      	movs	r3, #2
  }
}
 800734a:	4618      	mov	r0, r3
 800734c:	3728      	adds	r7, #40	@ 0x28
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	40008000 	.word	0x40008000

08007358 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007388:	b08c      	sub	sp, #48	@ 0x30
 800738a:	af00      	add	r7, sp, #0
 800738c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	431a      	orrs	r2, r3
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	431a      	orrs	r2, r3
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	69db      	ldr	r3, [r3, #28]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	4baa      	ldr	r3, [pc, #680]	@ (800765c <UART_SetConfig+0x2d8>)
 80073b4:	4013      	ands	r3, r2
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	6812      	ldr	r2, [r2, #0]
 80073ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073bc:	430b      	orrs	r3, r1
 80073be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a9f      	ldr	r2, [pc, #636]	@ (8007660 <UART_SetConfig+0x2dc>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d004      	beq.n	80073f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073ec:	4313      	orrs	r3, r2
 80073ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80073fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007404:	430b      	orrs	r3, r1
 8007406:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740e:	f023 010f 	bic.w	r1, r3, #15
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a90      	ldr	r2, [pc, #576]	@ (8007664 <UART_SetConfig+0x2e0>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d125      	bne.n	8007474 <UART_SetConfig+0xf0>
 8007428:	4b8f      	ldr	r3, [pc, #572]	@ (8007668 <UART_SetConfig+0x2e4>)
 800742a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	2b03      	cmp	r3, #3
 8007434:	d81a      	bhi.n	800746c <UART_SetConfig+0xe8>
 8007436:	a201      	add	r2, pc, #4	@ (adr r2, 800743c <UART_SetConfig+0xb8>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	0800744d 	.word	0x0800744d
 8007440:	0800745d 	.word	0x0800745d
 8007444:	08007455 	.word	0x08007455
 8007448:	08007465 	.word	0x08007465
 800744c:	2301      	movs	r3, #1
 800744e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007452:	e116      	b.n	8007682 <UART_SetConfig+0x2fe>
 8007454:	2302      	movs	r3, #2
 8007456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800745a:	e112      	b.n	8007682 <UART_SetConfig+0x2fe>
 800745c:	2304      	movs	r3, #4
 800745e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007462:	e10e      	b.n	8007682 <UART_SetConfig+0x2fe>
 8007464:	2308      	movs	r3, #8
 8007466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800746a:	e10a      	b.n	8007682 <UART_SetConfig+0x2fe>
 800746c:	2310      	movs	r3, #16
 800746e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007472:	e106      	b.n	8007682 <UART_SetConfig+0x2fe>
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a7c      	ldr	r2, [pc, #496]	@ (800766c <UART_SetConfig+0x2e8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d138      	bne.n	80074f0 <UART_SetConfig+0x16c>
 800747e:	4b7a      	ldr	r3, [pc, #488]	@ (8007668 <UART_SetConfig+0x2e4>)
 8007480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007484:	f003 030c 	and.w	r3, r3, #12
 8007488:	2b0c      	cmp	r3, #12
 800748a:	d82d      	bhi.n	80074e8 <UART_SetConfig+0x164>
 800748c:	a201      	add	r2, pc, #4	@ (adr r2, 8007494 <UART_SetConfig+0x110>)
 800748e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007492:	bf00      	nop
 8007494:	080074c9 	.word	0x080074c9
 8007498:	080074e9 	.word	0x080074e9
 800749c:	080074e9 	.word	0x080074e9
 80074a0:	080074e9 	.word	0x080074e9
 80074a4:	080074d9 	.word	0x080074d9
 80074a8:	080074e9 	.word	0x080074e9
 80074ac:	080074e9 	.word	0x080074e9
 80074b0:	080074e9 	.word	0x080074e9
 80074b4:	080074d1 	.word	0x080074d1
 80074b8:	080074e9 	.word	0x080074e9
 80074bc:	080074e9 	.word	0x080074e9
 80074c0:	080074e9 	.word	0x080074e9
 80074c4:	080074e1 	.word	0x080074e1
 80074c8:	2300      	movs	r3, #0
 80074ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ce:	e0d8      	b.n	8007682 <UART_SetConfig+0x2fe>
 80074d0:	2302      	movs	r3, #2
 80074d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d6:	e0d4      	b.n	8007682 <UART_SetConfig+0x2fe>
 80074d8:	2304      	movs	r3, #4
 80074da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074de:	e0d0      	b.n	8007682 <UART_SetConfig+0x2fe>
 80074e0:	2308      	movs	r3, #8
 80074e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e6:	e0cc      	b.n	8007682 <UART_SetConfig+0x2fe>
 80074e8:	2310      	movs	r3, #16
 80074ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ee:	e0c8      	b.n	8007682 <UART_SetConfig+0x2fe>
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a5e      	ldr	r2, [pc, #376]	@ (8007670 <UART_SetConfig+0x2ec>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d125      	bne.n	8007546 <UART_SetConfig+0x1c2>
 80074fa:	4b5b      	ldr	r3, [pc, #364]	@ (8007668 <UART_SetConfig+0x2e4>)
 80074fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007500:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007504:	2b30      	cmp	r3, #48	@ 0x30
 8007506:	d016      	beq.n	8007536 <UART_SetConfig+0x1b2>
 8007508:	2b30      	cmp	r3, #48	@ 0x30
 800750a:	d818      	bhi.n	800753e <UART_SetConfig+0x1ba>
 800750c:	2b20      	cmp	r3, #32
 800750e:	d00a      	beq.n	8007526 <UART_SetConfig+0x1a2>
 8007510:	2b20      	cmp	r3, #32
 8007512:	d814      	bhi.n	800753e <UART_SetConfig+0x1ba>
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <UART_SetConfig+0x19a>
 8007518:	2b10      	cmp	r3, #16
 800751a:	d008      	beq.n	800752e <UART_SetConfig+0x1aa>
 800751c:	e00f      	b.n	800753e <UART_SetConfig+0x1ba>
 800751e:	2300      	movs	r3, #0
 8007520:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007524:	e0ad      	b.n	8007682 <UART_SetConfig+0x2fe>
 8007526:	2302      	movs	r3, #2
 8007528:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800752c:	e0a9      	b.n	8007682 <UART_SetConfig+0x2fe>
 800752e:	2304      	movs	r3, #4
 8007530:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007534:	e0a5      	b.n	8007682 <UART_SetConfig+0x2fe>
 8007536:	2308      	movs	r3, #8
 8007538:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800753c:	e0a1      	b.n	8007682 <UART_SetConfig+0x2fe>
 800753e:	2310      	movs	r3, #16
 8007540:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007544:	e09d      	b.n	8007682 <UART_SetConfig+0x2fe>
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a4a      	ldr	r2, [pc, #296]	@ (8007674 <UART_SetConfig+0x2f0>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d125      	bne.n	800759c <UART_SetConfig+0x218>
 8007550:	4b45      	ldr	r3, [pc, #276]	@ (8007668 <UART_SetConfig+0x2e4>)
 8007552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007556:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800755a:	2bc0      	cmp	r3, #192	@ 0xc0
 800755c:	d016      	beq.n	800758c <UART_SetConfig+0x208>
 800755e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007560:	d818      	bhi.n	8007594 <UART_SetConfig+0x210>
 8007562:	2b80      	cmp	r3, #128	@ 0x80
 8007564:	d00a      	beq.n	800757c <UART_SetConfig+0x1f8>
 8007566:	2b80      	cmp	r3, #128	@ 0x80
 8007568:	d814      	bhi.n	8007594 <UART_SetConfig+0x210>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <UART_SetConfig+0x1f0>
 800756e:	2b40      	cmp	r3, #64	@ 0x40
 8007570:	d008      	beq.n	8007584 <UART_SetConfig+0x200>
 8007572:	e00f      	b.n	8007594 <UART_SetConfig+0x210>
 8007574:	2300      	movs	r3, #0
 8007576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800757a:	e082      	b.n	8007682 <UART_SetConfig+0x2fe>
 800757c:	2302      	movs	r3, #2
 800757e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007582:	e07e      	b.n	8007682 <UART_SetConfig+0x2fe>
 8007584:	2304      	movs	r3, #4
 8007586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800758a:	e07a      	b.n	8007682 <UART_SetConfig+0x2fe>
 800758c:	2308      	movs	r3, #8
 800758e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007592:	e076      	b.n	8007682 <UART_SetConfig+0x2fe>
 8007594:	2310      	movs	r3, #16
 8007596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800759a:	e072      	b.n	8007682 <UART_SetConfig+0x2fe>
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a35      	ldr	r2, [pc, #212]	@ (8007678 <UART_SetConfig+0x2f4>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d12a      	bne.n	80075fc <UART_SetConfig+0x278>
 80075a6:	4b30      	ldr	r3, [pc, #192]	@ (8007668 <UART_SetConfig+0x2e4>)
 80075a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075b4:	d01a      	beq.n	80075ec <UART_SetConfig+0x268>
 80075b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075ba:	d81b      	bhi.n	80075f4 <UART_SetConfig+0x270>
 80075bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075c0:	d00c      	beq.n	80075dc <UART_SetConfig+0x258>
 80075c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075c6:	d815      	bhi.n	80075f4 <UART_SetConfig+0x270>
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <UART_SetConfig+0x250>
 80075cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075d0:	d008      	beq.n	80075e4 <UART_SetConfig+0x260>
 80075d2:	e00f      	b.n	80075f4 <UART_SetConfig+0x270>
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075da:	e052      	b.n	8007682 <UART_SetConfig+0x2fe>
 80075dc:	2302      	movs	r3, #2
 80075de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e2:	e04e      	b.n	8007682 <UART_SetConfig+0x2fe>
 80075e4:	2304      	movs	r3, #4
 80075e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ea:	e04a      	b.n	8007682 <UART_SetConfig+0x2fe>
 80075ec:	2308      	movs	r3, #8
 80075ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075f2:	e046      	b.n	8007682 <UART_SetConfig+0x2fe>
 80075f4:	2310      	movs	r3, #16
 80075f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075fa:	e042      	b.n	8007682 <UART_SetConfig+0x2fe>
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a17      	ldr	r2, [pc, #92]	@ (8007660 <UART_SetConfig+0x2dc>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d13a      	bne.n	800767c <UART_SetConfig+0x2f8>
 8007606:	4b18      	ldr	r3, [pc, #96]	@ (8007668 <UART_SetConfig+0x2e4>)
 8007608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800760c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007610:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007614:	d01a      	beq.n	800764c <UART_SetConfig+0x2c8>
 8007616:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800761a:	d81b      	bhi.n	8007654 <UART_SetConfig+0x2d0>
 800761c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007620:	d00c      	beq.n	800763c <UART_SetConfig+0x2b8>
 8007622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007626:	d815      	bhi.n	8007654 <UART_SetConfig+0x2d0>
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <UART_SetConfig+0x2b0>
 800762c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007630:	d008      	beq.n	8007644 <UART_SetConfig+0x2c0>
 8007632:	e00f      	b.n	8007654 <UART_SetConfig+0x2d0>
 8007634:	2300      	movs	r3, #0
 8007636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800763a:	e022      	b.n	8007682 <UART_SetConfig+0x2fe>
 800763c:	2302      	movs	r3, #2
 800763e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007642:	e01e      	b.n	8007682 <UART_SetConfig+0x2fe>
 8007644:	2304      	movs	r3, #4
 8007646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800764a:	e01a      	b.n	8007682 <UART_SetConfig+0x2fe>
 800764c:	2308      	movs	r3, #8
 800764e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007652:	e016      	b.n	8007682 <UART_SetConfig+0x2fe>
 8007654:	2310      	movs	r3, #16
 8007656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765a:	e012      	b.n	8007682 <UART_SetConfig+0x2fe>
 800765c:	cfff69f3 	.word	0xcfff69f3
 8007660:	40008000 	.word	0x40008000
 8007664:	40013800 	.word	0x40013800
 8007668:	40021000 	.word	0x40021000
 800766c:	40004400 	.word	0x40004400
 8007670:	40004800 	.word	0x40004800
 8007674:	40004c00 	.word	0x40004c00
 8007678:	40005000 	.word	0x40005000
 800767c:	2310      	movs	r3, #16
 800767e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4aae      	ldr	r2, [pc, #696]	@ (8007940 <UART_SetConfig+0x5bc>)
 8007688:	4293      	cmp	r3, r2
 800768a:	f040 8097 	bne.w	80077bc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800768e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007692:	2b08      	cmp	r3, #8
 8007694:	d823      	bhi.n	80076de <UART_SetConfig+0x35a>
 8007696:	a201      	add	r2, pc, #4	@ (adr r2, 800769c <UART_SetConfig+0x318>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	080076c1 	.word	0x080076c1
 80076a0:	080076df 	.word	0x080076df
 80076a4:	080076c9 	.word	0x080076c9
 80076a8:	080076df 	.word	0x080076df
 80076ac:	080076cf 	.word	0x080076cf
 80076b0:	080076df 	.word	0x080076df
 80076b4:	080076df 	.word	0x080076df
 80076b8:	080076df 	.word	0x080076df
 80076bc:	080076d7 	.word	0x080076d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076c0:	f7fe fd4e 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 80076c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076c6:	e010      	b.n	80076ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076c8:	4b9e      	ldr	r3, [pc, #632]	@ (8007944 <UART_SetConfig+0x5c0>)
 80076ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076cc:	e00d      	b.n	80076ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ce:	f7fe fcd9 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 80076d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076d4:	e009      	b.n	80076ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076dc:	e005      	b.n	80076ea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80076e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 8130 	beq.w	8007952 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f6:	4a94      	ldr	r2, [pc, #592]	@ (8007948 <UART_SetConfig+0x5c4>)
 80076f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076fc:	461a      	mov	r2, r3
 80076fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007700:	fbb3 f3f2 	udiv	r3, r3, r2
 8007704:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	4613      	mov	r3, r2
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	4413      	add	r3, r2
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	429a      	cmp	r2, r3
 8007714:	d305      	bcc.n	8007722 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	429a      	cmp	r2, r3
 8007720:	d903      	bls.n	800772a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007728:	e113      	b.n	8007952 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	2200      	movs	r2, #0
 800772e:	60bb      	str	r3, [r7, #8]
 8007730:	60fa      	str	r2, [r7, #12]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007736:	4a84      	ldr	r2, [pc, #528]	@ (8007948 <UART_SetConfig+0x5c4>)
 8007738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800773c:	b29b      	uxth	r3, r3
 800773e:	2200      	movs	r2, #0
 8007740:	603b      	str	r3, [r7, #0]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007748:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800774c:	f7f8 fdd0 	bl	80002f0 <__aeabi_uldivmod>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4610      	mov	r0, r2
 8007756:	4619      	mov	r1, r3
 8007758:	f04f 0200 	mov.w	r2, #0
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	020b      	lsls	r3, r1, #8
 8007762:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007766:	0202      	lsls	r2, r0, #8
 8007768:	6979      	ldr	r1, [r7, #20]
 800776a:	6849      	ldr	r1, [r1, #4]
 800776c:	0849      	lsrs	r1, r1, #1
 800776e:	2000      	movs	r0, #0
 8007770:	460c      	mov	r4, r1
 8007772:	4605      	mov	r5, r0
 8007774:	eb12 0804 	adds.w	r8, r2, r4
 8007778:	eb43 0905 	adc.w	r9, r3, r5
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	469a      	mov	sl, r3
 8007784:	4693      	mov	fp, r2
 8007786:	4652      	mov	r2, sl
 8007788:	465b      	mov	r3, fp
 800778a:	4640      	mov	r0, r8
 800778c:	4649      	mov	r1, r9
 800778e:	f7f8 fdaf 	bl	80002f0 <__aeabi_uldivmod>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	4613      	mov	r3, r2
 8007798:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077a0:	d308      	bcc.n	80077b4 <UART_SetConfig+0x430>
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077a8:	d204      	bcs.n	80077b4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6a3a      	ldr	r2, [r7, #32]
 80077b0:	60da      	str	r2, [r3, #12]
 80077b2:	e0ce      	b.n	8007952 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80077ba:	e0ca      	b.n	8007952 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077c4:	d166      	bne.n	8007894 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80077c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077ca:	2b08      	cmp	r3, #8
 80077cc:	d827      	bhi.n	800781e <UART_SetConfig+0x49a>
 80077ce:	a201      	add	r2, pc, #4	@ (adr r2, 80077d4 <UART_SetConfig+0x450>)
 80077d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d4:	080077f9 	.word	0x080077f9
 80077d8:	08007801 	.word	0x08007801
 80077dc:	08007809 	.word	0x08007809
 80077e0:	0800781f 	.word	0x0800781f
 80077e4:	0800780f 	.word	0x0800780f
 80077e8:	0800781f 	.word	0x0800781f
 80077ec:	0800781f 	.word	0x0800781f
 80077f0:	0800781f 	.word	0x0800781f
 80077f4:	08007817 	.word	0x08007817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f8:	f7fe fcb2 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 80077fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077fe:	e014      	b.n	800782a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007800:	f7fe fcc4 	bl	800618c <HAL_RCC_GetPCLK2Freq>
 8007804:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007806:	e010      	b.n	800782a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007808:	4b4e      	ldr	r3, [pc, #312]	@ (8007944 <UART_SetConfig+0x5c0>)
 800780a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800780c:	e00d      	b.n	800782a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800780e:	f7fe fc39 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 8007812:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007814:	e009      	b.n	800782a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800781a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800781c:	e005      	b.n	800782a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007828:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 8090 	beq.w	8007952 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007836:	4a44      	ldr	r2, [pc, #272]	@ (8007948 <UART_SetConfig+0x5c4>)
 8007838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800783c:	461a      	mov	r2, r3
 800783e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007840:	fbb3 f3f2 	udiv	r3, r3, r2
 8007844:	005a      	lsls	r2, r3, #1
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	085b      	lsrs	r3, r3, #1
 800784c:	441a      	add	r2, r3
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	fbb2 f3f3 	udiv	r3, r2, r3
 8007856:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	2b0f      	cmp	r3, #15
 800785c:	d916      	bls.n	800788c <UART_SetConfig+0x508>
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007864:	d212      	bcs.n	800788c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	b29b      	uxth	r3, r3
 800786a:	f023 030f 	bic.w	r3, r3, #15
 800786e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	085b      	lsrs	r3, r3, #1
 8007874:	b29b      	uxth	r3, r3
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	b29a      	uxth	r2, r3
 800787c:	8bfb      	ldrh	r3, [r7, #30]
 800787e:	4313      	orrs	r3, r2
 8007880:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	8bfa      	ldrh	r2, [r7, #30]
 8007888:	60da      	str	r2, [r3, #12]
 800788a:	e062      	b.n	8007952 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007892:	e05e      	b.n	8007952 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007894:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007898:	2b08      	cmp	r3, #8
 800789a:	d828      	bhi.n	80078ee <UART_SetConfig+0x56a>
 800789c:	a201      	add	r2, pc, #4	@ (adr r2, 80078a4 <UART_SetConfig+0x520>)
 800789e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a2:	bf00      	nop
 80078a4:	080078c9 	.word	0x080078c9
 80078a8:	080078d1 	.word	0x080078d1
 80078ac:	080078d9 	.word	0x080078d9
 80078b0:	080078ef 	.word	0x080078ef
 80078b4:	080078df 	.word	0x080078df
 80078b8:	080078ef 	.word	0x080078ef
 80078bc:	080078ef 	.word	0x080078ef
 80078c0:	080078ef 	.word	0x080078ef
 80078c4:	080078e7 	.word	0x080078e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078c8:	f7fe fc4a 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 80078cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078ce:	e014      	b.n	80078fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078d0:	f7fe fc5c 	bl	800618c <HAL_RCC_GetPCLK2Freq>
 80078d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078d6:	e010      	b.n	80078fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007944 <UART_SetConfig+0x5c0>)
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078dc:	e00d      	b.n	80078fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078de:	f7fe fbd1 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 80078e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078e4:	e009      	b.n	80078fa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078ec:	e005      	b.n	80078fa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80078f8:	bf00      	nop
    }

    if (pclk != 0U)
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d028      	beq.n	8007952 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007904:	4a10      	ldr	r2, [pc, #64]	@ (8007948 <UART_SetConfig+0x5c4>)
 8007906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800790a:	461a      	mov	r2, r3
 800790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	085b      	lsrs	r3, r3, #1
 8007918:	441a      	add	r2, r3
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007922:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	2b0f      	cmp	r3, #15
 8007928:	d910      	bls.n	800794c <UART_SetConfig+0x5c8>
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007930:	d20c      	bcs.n	800794c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	b29a      	uxth	r2, r3
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	60da      	str	r2, [r3, #12]
 800793c:	e009      	b.n	8007952 <UART_SetConfig+0x5ce>
 800793e:	bf00      	nop
 8007940:	40008000 	.word	0x40008000
 8007944:	00f42400 	.word	0x00f42400
 8007948:	08009be0 	.word	0x08009be0
      }
      else
      {
        ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2201      	movs	r2, #1
 8007956:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2201      	movs	r2, #1
 800795e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2200      	movs	r2, #0
 8007966:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2200      	movs	r2, #0
 800796c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800796e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007972:	4618      	mov	r0, r3
 8007974:	3730      	adds	r7, #48	@ 0x30
 8007976:	46bd      	mov	sp, r7
 8007978:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800797c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007988:	f003 0308 	and.w	r3, r3, #8
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00a      	beq.n	80079a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00a      	beq.n	80079ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ee:	f003 0304 	and.w	r3, r3, #4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a10:	f003 0310 	and.w	r3, r3, #16
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00a      	beq.n	8007a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d01a      	beq.n	8007a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a7a:	d10a      	bne.n	8007a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	605a      	str	r2, [r3, #4]
  }
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b098      	sub	sp, #96	@ 0x60
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ad0:	f7fc fac8 	bl	8004064 <HAL_GetTick>
 8007ad4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0308 	and.w	r3, r3, #8
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d12f      	bne.n	8007b44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ae4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aec:	2200      	movs	r2, #0
 8007aee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f88e 	bl	8007c14 <UART_WaitOnFlagUntilTimeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d022      	beq.n	8007b44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b12:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e6      	bne.n	8007afe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e063      	b.n	8007c0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0304 	and.w	r3, r3, #4
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d149      	bne.n	8007be6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f857 	bl	8007c14 <UART_WaitOnFlagUntilTimeout>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d03c      	beq.n	8007be6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	623b      	str	r3, [r7, #32]
   return(result);
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b92:	e841 2300 	strex	r3, r2, [r1]
 8007b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1e6      	bne.n	8007b6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f023 0301 	bic.w	r3, r3, #1
 8007bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bbe:	61fa      	str	r2, [r7, #28]
 8007bc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	69b9      	ldr	r1, [r7, #24]
 8007bc4:	69fa      	ldr	r2, [r7, #28]
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	617b      	str	r3, [r7, #20]
   return(result);
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e5      	bne.n	8007b9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e012      	b.n	8007c0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3758      	adds	r7, #88	@ 0x58
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	4613      	mov	r3, r2
 8007c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c24:	e04f      	b.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2c:	d04b      	beq.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c2e:	f7fc fa19 	bl	8004064 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d302      	bcc.n	8007c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e04e      	b.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0304 	and.w	r3, r3, #4
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d037      	beq.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2b80      	cmp	r3, #128	@ 0x80
 8007c5a:	d034      	beq.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b40      	cmp	r3, #64	@ 0x40
 8007c60:	d031      	beq.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	f003 0308 	and.w	r3, r3, #8
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d110      	bne.n	8007c92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2208      	movs	r2, #8
 8007c76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 f95b 	bl	8007f34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2208      	movs	r2, #8
 8007c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e029      	b.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ca0:	d111      	bne.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 f941 	bl	8007f34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e00f      	b.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69da      	ldr	r2, [r3, #28]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	bf0c      	ite	eq
 8007cd6:	2301      	moveq	r3, #1
 8007cd8:	2300      	movne	r3, #0
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	461a      	mov	r2, r3
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d0a0      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b0a3      	sub	sp, #140	@ 0x8c
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	88fa      	ldrh	r2, [r7, #6]
 8007d08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	88fa      	ldrh	r2, [r7, #6]
 8007d10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d22:	d10e      	bne.n	8007d42 <UART_Start_Receive_IT+0x52>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d105      	bne.n	8007d38 <UART_Start_Receive_IT+0x48>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007d32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d36:	e02d      	b.n	8007d94 <UART_Start_Receive_IT+0xa4>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	22ff      	movs	r2, #255	@ 0xff
 8007d3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d40:	e028      	b.n	8007d94 <UART_Start_Receive_IT+0xa4>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10d      	bne.n	8007d66 <UART_Start_Receive_IT+0x76>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d104      	bne.n	8007d5c <UART_Start_Receive_IT+0x6c>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	22ff      	movs	r2, #255	@ 0xff
 8007d56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d5a:	e01b      	b.n	8007d94 <UART_Start_Receive_IT+0xa4>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	227f      	movs	r2, #127	@ 0x7f
 8007d60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d64:	e016      	b.n	8007d94 <UART_Start_Receive_IT+0xa4>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d6e:	d10d      	bne.n	8007d8c <UART_Start_Receive_IT+0x9c>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d104      	bne.n	8007d82 <UART_Start_Receive_IT+0x92>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	227f      	movs	r2, #127	@ 0x7f
 8007d7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d80:	e008      	b.n	8007d94 <UART_Start_Receive_IT+0xa4>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	223f      	movs	r2, #63	@ 0x3f
 8007d86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d8a:	e003      	b.n	8007d94 <UART_Start_Receive_IT+0xa4>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2222      	movs	r2, #34	@ 0x22
 8007da0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3308      	adds	r3, #8
 8007daa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007db4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007db6:	f043 0301 	orr.w	r3, r3, #1
 8007dba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007dc8:	673a      	str	r2, [r7, #112]	@ 0x70
 8007dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dcc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007dce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007dd0:	e841 2300 	strex	r3, r2, [r1]
 8007dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007dd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e3      	bne.n	8007da4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007de4:	d14f      	bne.n	8007e86 <UART_Start_Receive_IT+0x196>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007dec:	88fa      	ldrh	r2, [r7, #6]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d349      	bcc.n	8007e86 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dfa:	d107      	bne.n	8007e0c <UART_Start_Receive_IT+0x11c>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d103      	bne.n	8007e0c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4a47      	ldr	r2, [pc, #284]	@ (8007f24 <UART_Start_Receive_IT+0x234>)
 8007e08:	675a      	str	r2, [r3, #116]	@ 0x74
 8007e0a:	e002      	b.n	8007e12 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4a46      	ldr	r2, [pc, #280]	@ (8007f28 <UART_Start_Receive_IT+0x238>)
 8007e10:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d01a      	beq.n	8007e50 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	461a      	mov	r2, r3
 8007e38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e3e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007e42:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007e44:	e841 2300 	strex	r3, r2, [r1]
 8007e48:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1e4      	bne.n	8007e1a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3308      	adds	r3, #8
 8007e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e5a:	e853 3f00 	ldrex	r3, [r3]
 8007e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3308      	adds	r3, #8
 8007e6e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007e70:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007e72:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e74:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e5      	bne.n	8007e50 <UART_Start_Receive_IT+0x160>
 8007e84:	e046      	b.n	8007f14 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e8e:	d107      	bne.n	8007ea0 <UART_Start_Receive_IT+0x1b0>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d103      	bne.n	8007ea0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4a24      	ldr	r2, [pc, #144]	@ (8007f2c <UART_Start_Receive_IT+0x23c>)
 8007e9c:	675a      	str	r2, [r3, #116]	@ 0x74
 8007e9e:	e002      	b.n	8007ea6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4a23      	ldr	r2, [pc, #140]	@ (8007f30 <UART_Start_Receive_IT+0x240>)
 8007ea4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d019      	beq.n	8007ee2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb6:	e853 3f00 	ldrex	r3, [r3]
 8007eba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007ec2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ece:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ed2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ed4:	e841 2300 	strex	r3, r2, [r1]
 8007ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e6      	bne.n	8007eae <UART_Start_Receive_IT+0x1be>
 8007ee0:	e018      	b.n	8007f14 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	e853 3f00 	ldrex	r3, [r3]
 8007eee:	613b      	str	r3, [r7, #16]
   return(result);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f043 0320 	orr.w	r3, r3, #32
 8007ef6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	461a      	mov	r2, r3
 8007efe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f00:	623b      	str	r3, [r7, #32]
 8007f02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	69f9      	ldr	r1, [r7, #28]
 8007f06:	6a3a      	ldr	r2, [r7, #32]
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e6      	bne.n	8007ee2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	378c      	adds	r7, #140	@ 0x8c
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	08008a19 	.word	0x08008a19
 8007f28:	080086b5 	.word	0x080086b5
 8007f2c:	080084fd 	.word	0x080084fd
 8007f30:	08008345 	.word	0x08008345

08007f34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b095      	sub	sp, #84	@ 0x54
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e6      	bne.n	8007f3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3308      	adds	r3, #8
 8007f74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f84:	f023 0301 	bic.w	r3, r3, #1
 8007f88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3308      	adds	r3, #8
 8007f90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e3      	bne.n	8007f6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d118      	bne.n	8007fe0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f023 0310 	bic.w	r3, r3, #16
 8007fc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fcc:	61bb      	str	r3, [r7, #24]
 8007fce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd0:	6979      	ldr	r1, [r7, #20]
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	e841 2300 	strex	r3, r2, [r1]
 8007fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e6      	bne.n	8007fae <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007ff4:	bf00      	nop
 8007ff6:	3754      	adds	r7, #84	@ 0x54
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008000:	b480      	push	{r7}
 8008002:	b08f      	sub	sp, #60	@ 0x3c
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800800e:	2b21      	cmp	r3, #33	@ 0x21
 8008010:	d14c      	bne.n	80080ac <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008018:	b29b      	uxth	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d132      	bne.n	8008084 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	e853 3f00 	ldrex	r3, [r3]
 800802a:	61fb      	str	r3, [r7, #28]
   return(result);
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008032:	637b      	str	r3, [r7, #52]	@ 0x34
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800803c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800803e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e6      	bne.n	800801e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	60bb      	str	r3, [r7, #8]
   return(result);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008064:	633b      	str	r3, [r7, #48]	@ 0x30
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806e:	61bb      	str	r3, [r7, #24]
 8008070:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	6979      	ldr	r1, [r7, #20]
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	e841 2300 	strex	r3, r2, [r1]
 800807a:	613b      	str	r3, [r7, #16]
   return(result);
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e6      	bne.n	8008050 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008082:	e013      	b.n	80080ac <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	3b01      	subs	r3, #1
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80080ac:	bf00      	nop
 80080ae:	373c      	adds	r7, #60	@ 0x3c
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b091      	sub	sp, #68	@ 0x44
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080c6:	2b21      	cmp	r3, #33	@ 0x21
 80080c8:	d151      	bne.n	800816e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d132      	bne.n	800813c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	623b      	str	r3, [r7, #32]
   return(result);
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80080f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080fc:	e841 2300 	strex	r3, r2, [r1]
 8008100:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e6      	bne.n	80080d6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	60fb      	str	r3, [r7, #12]
   return(result);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800811c:	637b      	str	r3, [r7, #52]	@ 0x34
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008126:	61fb      	str	r3, [r7, #28]
 8008128:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812a:	69b9      	ldr	r1, [r7, #24]
 800812c:	69fa      	ldr	r2, [r7, #28]
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	617b      	str	r3, [r7, #20]
   return(result);
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e6      	bne.n	8008108 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800813a:	e018      	b.n	800816e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008140:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008150:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008156:	1c9a      	adds	r2, r3, #2
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008162:	b29b      	uxth	r3, r3
 8008164:	3b01      	subs	r3, #1
 8008166:	b29a      	uxth	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800816e:	bf00      	nop
 8008170:	3744      	adds	r7, #68	@ 0x44
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800817a:	b480      	push	{r7}
 800817c:	b091      	sub	sp, #68	@ 0x44
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008188:	2b21      	cmp	r3, #33	@ 0x21
 800818a:	d160      	bne.n	800824e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008192:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008194:	e057      	b.n	8008246 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800819c:	b29b      	uxth	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d133      	bne.n	800820a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3308      	adds	r3, #8
 80081a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	623b      	str	r3, [r7, #32]
   return(result);
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80081b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3308      	adds	r3, #8
 80081c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80081c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e5      	bne.n	80081a2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	e853 3f00 	ldrex	r3, [r3]
 80081e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f4:	61fb      	str	r3, [r7, #28]
 80081f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f8:	69b9      	ldr	r1, [r7, #24]
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	e841 2300 	strex	r3, r2, [r1]
 8008200:	617b      	str	r3, [r7, #20]
   return(result);
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1e6      	bne.n	80081d6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008208:	e021      	b.n	800824e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008214:	2b00      	cmp	r3, #0
 8008216:	d013      	beq.n	8008240 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800821c:	781a      	ldrb	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008234:	b29b      	uxth	r3, r3
 8008236:	3b01      	subs	r3, #1
 8008238:	b29a      	uxth	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008240:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008242:	3b01      	subs	r3, #1
 8008244:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008246:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1a4      	bne.n	8008196 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800824c:	e7ff      	b.n	800824e <UART_TxISR_8BIT_FIFOEN+0xd4>
 800824e:	bf00      	nop
 8008250:	3744      	adds	r7, #68	@ 0x44
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800825a:	b480      	push	{r7}
 800825c:	b091      	sub	sp, #68	@ 0x44
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008268:	2b21      	cmp	r3, #33	@ 0x21
 800826a:	d165      	bne.n	8008338 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008272:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008274:	e05c      	b.n	8008330 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800827c:	b29b      	uxth	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d133      	bne.n	80082ea <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3308      	adds	r3, #8
 8008288:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	61fb      	str	r3, [r7, #28]
   return(result);
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008298:	637b      	str	r3, [r7, #52]	@ 0x34
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3308      	adds	r3, #8
 80082a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082aa:	e841 2300 	strex	r3, r2, [r1]
 80082ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e5      	bne.n	8008282 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	e853 3f00 	ldrex	r3, [r3]
 80082c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	461a      	mov	r2, r3
 80082d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d4:	61bb      	str	r3, [r7, #24]
 80082d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	6979      	ldr	r1, [r7, #20]
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	e841 2300 	strex	r3, r2, [r1]
 80082e0:	613b      	str	r3, [r7, #16]
   return(result);
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1e6      	bne.n	80082b6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80082e8:	e026      	b.n	8008338 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d018      	beq.n	800832a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082fc:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80082fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800830c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008312:	1c9a      	adds	r2, r3, #2
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800831e:	b29b      	uxth	r3, r3
 8008320:	3b01      	subs	r3, #1
 8008322:	b29a      	uxth	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800832a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800832c:	3b01      	subs	r3, #1
 800832e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008330:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008332:	2b00      	cmp	r3, #0
 8008334:	d19f      	bne.n	8008276 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008336:	e7ff      	b.n	8008338 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008338:	bf00      	nop
 800833a:	3744      	adds	r7, #68	@ 0x44
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b09c      	sub	sp, #112	@ 0x70
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008352:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800835c:	2b22      	cmp	r3, #34	@ 0x22
 800835e:	f040 80be 	bne.w	80084de <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008368:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800836c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008370:	b2d9      	uxtb	r1, r3
 8008372:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008376:	b2da      	uxtb	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800837c:	400a      	ands	r2, r1
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008392:	b29b      	uxth	r3, r3
 8008394:	3b01      	subs	r3, #1
 8008396:	b29a      	uxth	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f040 80a1 	bne.w	80084ee <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e6      	bne.n	80083ac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3308      	adds	r3, #8
 80083e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f0:	f023 0301 	bic.w	r3, r3, #1
 80083f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3308      	adds	r3, #8
 80083fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80083fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8008400:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008404:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800840c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e5      	bne.n	80083de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2220      	movs	r2, #32
 8008416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a33      	ldr	r2, [pc, #204]	@ (80084f8 <UART_RxISR_8BIT+0x1b4>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d01f      	beq.n	8008470 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d018      	beq.n	8008470 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008446:	e853 3f00 	ldrex	r3, [r3]
 800844a:	623b      	str	r3, [r7, #32]
   return(result);
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008452:	663b      	str	r3, [r7, #96]	@ 0x60
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800845c:	633b      	str	r3, [r7, #48]	@ 0x30
 800845e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800846a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e6      	bne.n	800843e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008474:	2b01      	cmp	r3, #1
 8008476:	d12e      	bne.n	80084d6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	60fb      	str	r3, [r7, #12]
   return(result);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f023 0310 	bic.w	r3, r3, #16
 8008492:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800849c:	61fb      	str	r3, [r7, #28]
 800849e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a0:	69b9      	ldr	r1, [r7, #24]
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	e841 2300 	strex	r3, r2, [r1]
 80084a8:	617b      	str	r3, [r7, #20]
   return(result);
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e6      	bne.n	800847e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	f003 0310 	and.w	r3, r3, #16
 80084ba:	2b10      	cmp	r3, #16
 80084bc:	d103      	bne.n	80084c6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2210      	movs	r2, #16
 80084c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7fe ff4c 	bl	800736c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084d4:	e00b      	b.n	80084ee <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7fa fb88 	bl	8002bec <HAL_UART_RxCpltCallback>
}
 80084dc:	e007      	b.n	80084ee <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	699a      	ldr	r2, [r3, #24]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f042 0208 	orr.w	r2, r2, #8
 80084ec:	619a      	str	r2, [r3, #24]
}
 80084ee:	bf00      	nop
 80084f0:	3770      	adds	r7, #112	@ 0x70
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	40008000 	.word	0x40008000

080084fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b09c      	sub	sp, #112	@ 0x70
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800850a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008514:	2b22      	cmp	r3, #34	@ 0x22
 8008516:	f040 80be 	bne.w	8008696 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008520:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008528:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800852a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800852e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008532:	4013      	ands	r3, r2
 8008534:	b29a      	uxth	r2, r3
 8008536:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008538:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800853e:	1c9a      	adds	r2, r3, #2
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800854a:	b29b      	uxth	r3, r3
 800854c:	3b01      	subs	r3, #1
 800854e:	b29a      	uxth	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	f040 80a1 	bne.w	80086a6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800856c:	e853 3f00 	ldrex	r3, [r3]
 8008570:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008574:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008578:	667b      	str	r3, [r7, #100]	@ 0x64
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	461a      	mov	r2, r3
 8008580:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008582:	657b      	str	r3, [r7, #84]	@ 0x54
 8008584:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008586:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008588:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800858a:	e841 2300 	strex	r3, r2, [r1]
 800858e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e6      	bne.n	8008564 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3308      	adds	r3, #8
 800859c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a8:	f023 0301 	bic.w	r3, r3, #1
 80085ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3308      	adds	r3, #8
 80085b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80085b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80085b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e5      	bne.n	8008596 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a33      	ldr	r2, [pc, #204]	@ (80086b0 <UART_RxISR_16BIT+0x1b4>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d01f      	beq.n	8008628 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d018      	beq.n	8008628 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	61fb      	str	r3, [r7, #28]
   return(result);
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800860a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	461a      	mov	r2, r3
 8008612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008616:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008618:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800861a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800861c:	e841 2300 	strex	r3, r2, [r1]
 8008620:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1e6      	bne.n	80085f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800862c:	2b01      	cmp	r3, #1
 800862e:	d12e      	bne.n	800868e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	e853 3f00 	ldrex	r3, [r3]
 8008642:	60bb      	str	r3, [r7, #8]
   return(result);
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f023 0310 	bic.w	r3, r3, #16
 800864a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	461a      	mov	r2, r3
 8008652:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008654:	61bb      	str	r3, [r7, #24]
 8008656:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008658:	6979      	ldr	r1, [r7, #20]
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	e841 2300 	strex	r3, r2, [r1]
 8008660:	613b      	str	r3, [r7, #16]
   return(result);
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e6      	bne.n	8008636 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	f003 0310 	and.w	r3, r3, #16
 8008672:	2b10      	cmp	r3, #16
 8008674:	d103      	bne.n	800867e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2210      	movs	r2, #16
 800867c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7fe fe70 	bl	800736c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800868c:	e00b      	b.n	80086a6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7fa faac 	bl	8002bec <HAL_UART_RxCpltCallback>
}
 8008694:	e007      	b.n	80086a6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	699a      	ldr	r2, [r3, #24]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f042 0208 	orr.w	r2, r2, #8
 80086a4:	619a      	str	r2, [r3, #24]
}
 80086a6:	bf00      	nop
 80086a8:	3770      	adds	r7, #112	@ 0x70
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	40008000 	.word	0x40008000

080086b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b0ac      	sub	sp, #176	@ 0xb0
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80086c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086ea:	2b22      	cmp	r3, #34	@ 0x22
 80086ec:	f040 8183 	bne.w	80089f6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80086f6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086fa:	e126      	b.n	800894a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008702:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008706:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800870a:	b2d9      	uxtb	r1, r3
 800870c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008710:	b2da      	uxtb	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008716:	400a      	ands	r2, r1
 8008718:	b2d2      	uxtb	r2, r2
 800871a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800872c:	b29b      	uxth	r3, r3
 800872e:	3b01      	subs	r3, #1
 8008730:	b29a      	uxth	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	2b00      	cmp	r3, #0
 800874c:	d053      	beq.n	80087f6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800874e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d011      	beq.n	800877e <UART_RxISR_8BIT_FIFOEN+0xca>
 800875a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800875e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00b      	beq.n	800877e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2201      	movs	r2, #1
 800876c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008774:	f043 0201 	orr.w	r2, r3, #1
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800877e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d011      	beq.n	80087ae <UART_RxISR_8BIT_FIFOEN+0xfa>
 800878a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00b      	beq.n	80087ae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2202      	movs	r2, #2
 800879c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087a4:	f043 0204 	orr.w	r2, r3, #4
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087b2:	f003 0304 	and.w	r3, r3, #4
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d011      	beq.n	80087de <UART_RxISR_8BIT_FIFOEN+0x12a>
 80087ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00b      	beq.n	80087de <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2204      	movs	r2, #4
 80087cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087d4:	f043 0202 	orr.w	r2, r3, #2
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d006      	beq.n	80087f6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7fe fdb5 	bl	8007358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f040 80a3 	bne.w	800894a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	461a      	mov	r2, r3
 8008822:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008826:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008828:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800882c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008834:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e4      	bne.n	8008804 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3308      	adds	r3, #8
 8008840:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800884a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800884c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008850:	f023 0301 	bic.w	r3, r3, #1
 8008854:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3308      	adds	r3, #8
 800885e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008862:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008864:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008868:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008870:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e1      	bne.n	800883a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2220      	movs	r2, #32
 800887a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a60      	ldr	r2, [pc, #384]	@ (8008a10 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d021      	beq.n	80088d8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d01a      	beq.n	80088d8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80088b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80088c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80088c6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80088ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80088cc:	e841 2300 	strex	r3, r2, [r1]
 80088d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80088d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e4      	bne.n	80088a2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d130      	bne.n	8008942 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f6:	f023 0310 	bic.w	r3, r3, #16
 80088fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008908:	643b      	str	r3, [r7, #64]	@ 0x40
 800890a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800890e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008910:	e841 2300 	strex	r3, r2, [r1]
 8008914:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1e4      	bne.n	80088e6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	f003 0310 	and.w	r3, r3, #16
 8008926:	2b10      	cmp	r3, #16
 8008928:	d103      	bne.n	8008932 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2210      	movs	r2, #16
 8008930:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7fe fd16 	bl	800736c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008940:	e00e      	b.n	8008960 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7fa f952 	bl	8002bec <HAL_UART_RxCpltCallback>
        break;
 8008948:	e00a      	b.n	8008960 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800894a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800894e:	2b00      	cmp	r3, #0
 8008950:	d006      	beq.n	8008960 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8008952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008956:	f003 0320 	and.w	r3, r3, #32
 800895a:	2b00      	cmp	r3, #0
 800895c:	f47f aece 	bne.w	80086fc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008966:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800896a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800896e:	2b00      	cmp	r3, #0
 8008970:	d049      	beq.n	8008a06 <UART_RxISR_8BIT_FIFOEN+0x352>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008978:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800897c:	429a      	cmp	r2, r3
 800897e:	d242      	bcs.n	8008a06 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3308      	adds	r3, #8
 8008986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008996:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3308      	adds	r3, #8
 80089a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80089a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e3      	bne.n	8008980 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a16      	ldr	r2, [pc, #88]	@ (8008a14 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80089bc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f043 0320 	orr.w	r3, r3, #32
 80089d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80089e0:	61bb      	str	r3, [r7, #24]
 80089e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	6979      	ldr	r1, [r7, #20]
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	e841 2300 	strex	r3, r2, [r1]
 80089ec:	613b      	str	r3, [r7, #16]
   return(result);
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e4      	bne.n	80089be <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089f4:	e007      	b.n	8008a06 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	699a      	ldr	r2, [r3, #24]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f042 0208 	orr.w	r2, r2, #8
 8008a04:	619a      	str	r2, [r3, #24]
}
 8008a06:	bf00      	nop
 8008a08:	37b0      	adds	r7, #176	@ 0xb0
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	40008000 	.word	0x40008000
 8008a14:	08008345 	.word	0x08008345

08008a18 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b0ae      	sub	sp, #184	@ 0xb8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a26:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a4e:	2b22      	cmp	r3, #34	@ 0x22
 8008a50:	f040 8187 	bne.w	8008d62 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008a5a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a5e:	e12a      	b.n	8008cb6 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a66:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008a72:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008a76:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a88:	1c9a      	adds	r2, r3, #2
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	3b01      	subs	r3, #1
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008aaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008aae:	f003 0307 	and.w	r3, r3, #7
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d053      	beq.n	8008b5e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d011      	beq.n	8008ae6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00b      	beq.n	8008ae6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008adc:	f043 0201 	orr.w	r2, r3, #1
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d011      	beq.n	8008b16 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00b      	beq.n	8008b16 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2202      	movs	r2, #2
 8008b04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b0c:	f043 0204 	orr.w	r2, r3, #4
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008b1a:	f003 0304 	and.w	r3, r3, #4
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d011      	beq.n	8008b46 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008b22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00b      	beq.n	8008b46 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2204      	movs	r2, #4
 8008b34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b3c:	f043 0202 	orr.w	r2, r3, #2
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d006      	beq.n	8008b5e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7fe fc01 	bl	8007358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f040 80a5 	bne.w	8008cb6 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b74:	e853 3f00 	ldrex	r3, [r3]
 8008b78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b92:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ba0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e2      	bne.n	8008b6c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3308      	adds	r3, #8
 8008bac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bb0:	e853 3f00 	ldrex	r3, [r3]
 8008bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bbc:	f023 0301 	bic.w	r3, r3, #1
 8008bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3308      	adds	r3, #8
 8008bca:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008bce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008bd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008bd6:	e841 2300 	strex	r3, r2, [r1]
 8008bda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008bdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e1      	bne.n	8008ba6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2220      	movs	r2, #32
 8008be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a60      	ldr	r2, [pc, #384]	@ (8008d7c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d021      	beq.n	8008c44 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d01a      	beq.n	8008c44 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c16:	e853 3f00 	ldrex	r3, [r3]
 8008c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c32:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c38:	e841 2300 	strex	r3, r2, [r1]
 8008c3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1e4      	bne.n	8008c0e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d130      	bne.n	8008cae <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5a:	e853 3f00 	ldrex	r3, [r3]
 8008c5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c62:	f023 0310 	bic.w	r3, r3, #16
 8008c66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c7c:	e841 2300 	strex	r3, r2, [r1]
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1e4      	bne.n	8008c52 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	f003 0310 	and.w	r3, r3, #16
 8008c92:	2b10      	cmp	r3, #16
 8008c94:	d103      	bne.n	8008c9e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2210      	movs	r2, #16
 8008c9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7fe fb60 	bl	800736c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008cac:	e00e      	b.n	8008ccc <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7f9 ff9c 	bl	8002bec <HAL_UART_RxCpltCallback>
        break;
 8008cb4:	e00a      	b.n	8008ccc <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cb6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d006      	beq.n	8008ccc <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8008cbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f47f aeca 	bne.w	8008a60 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cd2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008cd6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d049      	beq.n	8008d72 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ce4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d242      	bcs.n	8008d72 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf6:	e853 3f00 	ldrex	r3, [r3]
 8008cfa:	623b      	str	r3, [r7, #32]
   return(result);
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008d10:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d18:	e841 2300 	strex	r3, r2, [r1]
 8008d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e3      	bne.n	8008cec <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a16      	ldr	r2, [pc, #88]	@ (8008d80 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8008d28:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	e853 3f00 	ldrex	r3, [r3]
 8008d36:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f043 0320 	orr.w	r3, r3, #32
 8008d3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d4c:	61fb      	str	r3, [r7, #28]
 8008d4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d50:	69b9      	ldr	r1, [r7, #24]
 8008d52:	69fa      	ldr	r2, [r7, #28]
 8008d54:	e841 2300 	strex	r3, r2, [r1]
 8008d58:	617b      	str	r3, [r7, #20]
   return(result);
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e4      	bne.n	8008d2a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d60:	e007      	b.n	8008d72 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	699a      	ldr	r2, [r3, #24]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f042 0208 	orr.w	r2, r2, #8
 8008d70:	619a      	str	r2, [r3, #24]
}
 8008d72:	bf00      	nop
 8008d74:	37b8      	adds	r7, #184	@ 0xb8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	40008000 	.word	0x40008000
 8008d80:	080084fd 	.word	0x080084fd

08008d84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d101      	bne.n	8008d9a <HAL_UARTEx_DisableFifoMode+0x16>
 8008d96:	2302      	movs	r3, #2
 8008d98:	e027      	b.n	8008dea <HAL_UARTEx_DisableFifoMode+0x66>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2224      	movs	r2, #36	@ 0x24
 8008da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f022 0201 	bic.w	r2, r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008dc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2220      	movs	r2, #32
 8008ddc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d101      	bne.n	8008e0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	e02d      	b.n	8008e6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2224      	movs	r2, #36	@ 0x24
 8008e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 0201 	bic.w	r2, r2, #1
 8008e34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f850 	bl	8008ef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d101      	bne.n	8008e8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e86:	2302      	movs	r3, #2
 8008e88:	e02d      	b.n	8008ee6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2224      	movs	r2, #36	@ 0x24
 8008e96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 0201 	bic.w	r2, r2, #1
 8008eb0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f812 	bl	8008ef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d108      	bne.n	8008f12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f10:	e031      	b.n	8008f76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f12:	2308      	movs	r3, #8
 8008f14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f16:	2308      	movs	r3, #8
 8008f18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	0e5b      	lsrs	r3, r3, #25
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	f003 0307 	and.w	r3, r3, #7
 8008f28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	0f5b      	lsrs	r3, r3, #29
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	f003 0307 	and.w	r3, r3, #7
 8008f38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f3a:	7bbb      	ldrb	r3, [r7, #14]
 8008f3c:	7b3a      	ldrb	r2, [r7, #12]
 8008f3e:	4911      	ldr	r1, [pc, #68]	@ (8008f84 <UARTEx_SetNbDataToProcess+0x94>)
 8008f40:	5c8a      	ldrb	r2, [r1, r2]
 8008f42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f46:	7b3a      	ldrb	r2, [r7, #12]
 8008f48:	490f      	ldr	r1, [pc, #60]	@ (8008f88 <UARTEx_SetNbDataToProcess+0x98>)
 8008f4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	7b7a      	ldrb	r2, [r7, #13]
 8008f5c:	4909      	ldr	r1, [pc, #36]	@ (8008f84 <UARTEx_SetNbDataToProcess+0x94>)
 8008f5e:	5c8a      	ldrb	r2, [r1, r2]
 8008f60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f64:	7b7a      	ldrb	r2, [r7, #13]
 8008f66:	4908      	ldr	r1, [pc, #32]	@ (8008f88 <UARTEx_SetNbDataToProcess+0x98>)
 8008f68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008f76:	bf00      	nop
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	08009bf8 	.word	0x08009bf8
 8008f88:	08009c00 	.word	0x08009c00

08008f8c <siprintf>:
 8008f8c:	b40e      	push	{r1, r2, r3}
 8008f8e:	b500      	push	{lr}
 8008f90:	b09c      	sub	sp, #112	@ 0x70
 8008f92:	ab1d      	add	r3, sp, #116	@ 0x74
 8008f94:	9002      	str	r0, [sp, #8]
 8008f96:	9006      	str	r0, [sp, #24]
 8008f98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008f9c:	4809      	ldr	r0, [pc, #36]	@ (8008fc4 <siprintf+0x38>)
 8008f9e:	9107      	str	r1, [sp, #28]
 8008fa0:	9104      	str	r1, [sp, #16]
 8008fa2:	4909      	ldr	r1, [pc, #36]	@ (8008fc8 <siprintf+0x3c>)
 8008fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fa8:	9105      	str	r1, [sp, #20]
 8008faa:	6800      	ldr	r0, [r0, #0]
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	a902      	add	r1, sp, #8
 8008fb0:	f000 f9a4 	bl	80092fc <_svfiprintf_r>
 8008fb4:	9b02      	ldr	r3, [sp, #8]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	701a      	strb	r2, [r3, #0]
 8008fba:	b01c      	add	sp, #112	@ 0x70
 8008fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fc0:	b003      	add	sp, #12
 8008fc2:	4770      	bx	lr
 8008fc4:	20000010 	.word	0x20000010
 8008fc8:	ffff0208 	.word	0xffff0208

08008fcc <memset>:
 8008fcc:	4402      	add	r2, r0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d100      	bne.n	8008fd6 <memset+0xa>
 8008fd4:	4770      	bx	lr
 8008fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8008fda:	e7f9      	b.n	8008fd0 <memset+0x4>

08008fdc <strcat>:
 8008fdc:	b510      	push	{r4, lr}
 8008fde:	4602      	mov	r2, r0
 8008fe0:	7814      	ldrb	r4, [r2, #0]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	3201      	adds	r2, #1
 8008fe6:	2c00      	cmp	r4, #0
 8008fe8:	d1fa      	bne.n	8008fe0 <strcat+0x4>
 8008fea:	3b01      	subs	r3, #1
 8008fec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ff0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ff4:	2a00      	cmp	r2, #0
 8008ff6:	d1f9      	bne.n	8008fec <strcat+0x10>
 8008ff8:	bd10      	pop	{r4, pc}
	...

08008ffc <__errno>:
 8008ffc:	4b01      	ldr	r3, [pc, #4]	@ (8009004 <__errno+0x8>)
 8008ffe:	6818      	ldr	r0, [r3, #0]
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000010 	.word	0x20000010

08009008 <__libc_init_array>:
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	4d0d      	ldr	r5, [pc, #52]	@ (8009040 <__libc_init_array+0x38>)
 800900c:	4c0d      	ldr	r4, [pc, #52]	@ (8009044 <__libc_init_array+0x3c>)
 800900e:	1b64      	subs	r4, r4, r5
 8009010:	10a4      	asrs	r4, r4, #2
 8009012:	2600      	movs	r6, #0
 8009014:	42a6      	cmp	r6, r4
 8009016:	d109      	bne.n	800902c <__libc_init_array+0x24>
 8009018:	4d0b      	ldr	r5, [pc, #44]	@ (8009048 <__libc_init_array+0x40>)
 800901a:	4c0c      	ldr	r4, [pc, #48]	@ (800904c <__libc_init_array+0x44>)
 800901c:	f000 fc66 	bl	80098ec <_init>
 8009020:	1b64      	subs	r4, r4, r5
 8009022:	10a4      	asrs	r4, r4, #2
 8009024:	2600      	movs	r6, #0
 8009026:	42a6      	cmp	r6, r4
 8009028:	d105      	bne.n	8009036 <__libc_init_array+0x2e>
 800902a:	bd70      	pop	{r4, r5, r6, pc}
 800902c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009030:	4798      	blx	r3
 8009032:	3601      	adds	r6, #1
 8009034:	e7ee      	b.n	8009014 <__libc_init_array+0xc>
 8009036:	f855 3b04 	ldr.w	r3, [r5], #4
 800903a:	4798      	blx	r3
 800903c:	3601      	adds	r6, #1
 800903e:	e7f2      	b.n	8009026 <__libc_init_array+0x1e>
 8009040:	08009c44 	.word	0x08009c44
 8009044:	08009c44 	.word	0x08009c44
 8009048:	08009c44 	.word	0x08009c44
 800904c:	08009c48 	.word	0x08009c48

08009050 <__retarget_lock_acquire_recursive>:
 8009050:	4770      	bx	lr

08009052 <__retarget_lock_release_recursive>:
 8009052:	4770      	bx	lr

08009054 <_free_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4605      	mov	r5, r0
 8009058:	2900      	cmp	r1, #0
 800905a:	d041      	beq.n	80090e0 <_free_r+0x8c>
 800905c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009060:	1f0c      	subs	r4, r1, #4
 8009062:	2b00      	cmp	r3, #0
 8009064:	bfb8      	it	lt
 8009066:	18e4      	addlt	r4, r4, r3
 8009068:	f000 f8e0 	bl	800922c <__malloc_lock>
 800906c:	4a1d      	ldr	r2, [pc, #116]	@ (80090e4 <_free_r+0x90>)
 800906e:	6813      	ldr	r3, [r2, #0]
 8009070:	b933      	cbnz	r3, 8009080 <_free_r+0x2c>
 8009072:	6063      	str	r3, [r4, #4]
 8009074:	6014      	str	r4, [r2, #0]
 8009076:	4628      	mov	r0, r5
 8009078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800907c:	f000 b8dc 	b.w	8009238 <__malloc_unlock>
 8009080:	42a3      	cmp	r3, r4
 8009082:	d908      	bls.n	8009096 <_free_r+0x42>
 8009084:	6820      	ldr	r0, [r4, #0]
 8009086:	1821      	adds	r1, r4, r0
 8009088:	428b      	cmp	r3, r1
 800908a:	bf01      	itttt	eq
 800908c:	6819      	ldreq	r1, [r3, #0]
 800908e:	685b      	ldreq	r3, [r3, #4]
 8009090:	1809      	addeq	r1, r1, r0
 8009092:	6021      	streq	r1, [r4, #0]
 8009094:	e7ed      	b.n	8009072 <_free_r+0x1e>
 8009096:	461a      	mov	r2, r3
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	b10b      	cbz	r3, 80090a0 <_free_r+0x4c>
 800909c:	42a3      	cmp	r3, r4
 800909e:	d9fa      	bls.n	8009096 <_free_r+0x42>
 80090a0:	6811      	ldr	r1, [r2, #0]
 80090a2:	1850      	adds	r0, r2, r1
 80090a4:	42a0      	cmp	r0, r4
 80090a6:	d10b      	bne.n	80090c0 <_free_r+0x6c>
 80090a8:	6820      	ldr	r0, [r4, #0]
 80090aa:	4401      	add	r1, r0
 80090ac:	1850      	adds	r0, r2, r1
 80090ae:	4283      	cmp	r3, r0
 80090b0:	6011      	str	r1, [r2, #0]
 80090b2:	d1e0      	bne.n	8009076 <_free_r+0x22>
 80090b4:	6818      	ldr	r0, [r3, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	6053      	str	r3, [r2, #4]
 80090ba:	4408      	add	r0, r1
 80090bc:	6010      	str	r0, [r2, #0]
 80090be:	e7da      	b.n	8009076 <_free_r+0x22>
 80090c0:	d902      	bls.n	80090c8 <_free_r+0x74>
 80090c2:	230c      	movs	r3, #12
 80090c4:	602b      	str	r3, [r5, #0]
 80090c6:	e7d6      	b.n	8009076 <_free_r+0x22>
 80090c8:	6820      	ldr	r0, [r4, #0]
 80090ca:	1821      	adds	r1, r4, r0
 80090cc:	428b      	cmp	r3, r1
 80090ce:	bf04      	itt	eq
 80090d0:	6819      	ldreq	r1, [r3, #0]
 80090d2:	685b      	ldreq	r3, [r3, #4]
 80090d4:	6063      	str	r3, [r4, #4]
 80090d6:	bf04      	itt	eq
 80090d8:	1809      	addeq	r1, r1, r0
 80090da:	6021      	streq	r1, [r4, #0]
 80090dc:	6054      	str	r4, [r2, #4]
 80090de:	e7ca      	b.n	8009076 <_free_r+0x22>
 80090e0:	bd38      	pop	{r3, r4, r5, pc}
 80090e2:	bf00      	nop
 80090e4:	20001420 	.word	0x20001420

080090e8 <sbrk_aligned>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	4e0f      	ldr	r6, [pc, #60]	@ (8009128 <sbrk_aligned+0x40>)
 80090ec:	460c      	mov	r4, r1
 80090ee:	6831      	ldr	r1, [r6, #0]
 80090f0:	4605      	mov	r5, r0
 80090f2:	b911      	cbnz	r1, 80090fa <sbrk_aligned+0x12>
 80090f4:	f000 fba6 	bl	8009844 <_sbrk_r>
 80090f8:	6030      	str	r0, [r6, #0]
 80090fa:	4621      	mov	r1, r4
 80090fc:	4628      	mov	r0, r5
 80090fe:	f000 fba1 	bl	8009844 <_sbrk_r>
 8009102:	1c43      	adds	r3, r0, #1
 8009104:	d103      	bne.n	800910e <sbrk_aligned+0x26>
 8009106:	f04f 34ff 	mov.w	r4, #4294967295
 800910a:	4620      	mov	r0, r4
 800910c:	bd70      	pop	{r4, r5, r6, pc}
 800910e:	1cc4      	adds	r4, r0, #3
 8009110:	f024 0403 	bic.w	r4, r4, #3
 8009114:	42a0      	cmp	r0, r4
 8009116:	d0f8      	beq.n	800910a <sbrk_aligned+0x22>
 8009118:	1a21      	subs	r1, r4, r0
 800911a:	4628      	mov	r0, r5
 800911c:	f000 fb92 	bl	8009844 <_sbrk_r>
 8009120:	3001      	adds	r0, #1
 8009122:	d1f2      	bne.n	800910a <sbrk_aligned+0x22>
 8009124:	e7ef      	b.n	8009106 <sbrk_aligned+0x1e>
 8009126:	bf00      	nop
 8009128:	2000141c 	.word	0x2000141c

0800912c <_malloc_r>:
 800912c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009130:	1ccd      	adds	r5, r1, #3
 8009132:	f025 0503 	bic.w	r5, r5, #3
 8009136:	3508      	adds	r5, #8
 8009138:	2d0c      	cmp	r5, #12
 800913a:	bf38      	it	cc
 800913c:	250c      	movcc	r5, #12
 800913e:	2d00      	cmp	r5, #0
 8009140:	4606      	mov	r6, r0
 8009142:	db01      	blt.n	8009148 <_malloc_r+0x1c>
 8009144:	42a9      	cmp	r1, r5
 8009146:	d904      	bls.n	8009152 <_malloc_r+0x26>
 8009148:	230c      	movs	r3, #12
 800914a:	6033      	str	r3, [r6, #0]
 800914c:	2000      	movs	r0, #0
 800914e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009152:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009228 <_malloc_r+0xfc>
 8009156:	f000 f869 	bl	800922c <__malloc_lock>
 800915a:	f8d8 3000 	ldr.w	r3, [r8]
 800915e:	461c      	mov	r4, r3
 8009160:	bb44      	cbnz	r4, 80091b4 <_malloc_r+0x88>
 8009162:	4629      	mov	r1, r5
 8009164:	4630      	mov	r0, r6
 8009166:	f7ff ffbf 	bl	80090e8 <sbrk_aligned>
 800916a:	1c43      	adds	r3, r0, #1
 800916c:	4604      	mov	r4, r0
 800916e:	d158      	bne.n	8009222 <_malloc_r+0xf6>
 8009170:	f8d8 4000 	ldr.w	r4, [r8]
 8009174:	4627      	mov	r7, r4
 8009176:	2f00      	cmp	r7, #0
 8009178:	d143      	bne.n	8009202 <_malloc_r+0xd6>
 800917a:	2c00      	cmp	r4, #0
 800917c:	d04b      	beq.n	8009216 <_malloc_r+0xea>
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	4639      	mov	r1, r7
 8009182:	4630      	mov	r0, r6
 8009184:	eb04 0903 	add.w	r9, r4, r3
 8009188:	f000 fb5c 	bl	8009844 <_sbrk_r>
 800918c:	4581      	cmp	r9, r0
 800918e:	d142      	bne.n	8009216 <_malloc_r+0xea>
 8009190:	6821      	ldr	r1, [r4, #0]
 8009192:	1a6d      	subs	r5, r5, r1
 8009194:	4629      	mov	r1, r5
 8009196:	4630      	mov	r0, r6
 8009198:	f7ff ffa6 	bl	80090e8 <sbrk_aligned>
 800919c:	3001      	adds	r0, #1
 800919e:	d03a      	beq.n	8009216 <_malloc_r+0xea>
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	442b      	add	r3, r5
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	f8d8 3000 	ldr.w	r3, [r8]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	bb62      	cbnz	r2, 8009208 <_malloc_r+0xdc>
 80091ae:	f8c8 7000 	str.w	r7, [r8]
 80091b2:	e00f      	b.n	80091d4 <_malloc_r+0xa8>
 80091b4:	6822      	ldr	r2, [r4, #0]
 80091b6:	1b52      	subs	r2, r2, r5
 80091b8:	d420      	bmi.n	80091fc <_malloc_r+0xd0>
 80091ba:	2a0b      	cmp	r2, #11
 80091bc:	d917      	bls.n	80091ee <_malloc_r+0xc2>
 80091be:	1961      	adds	r1, r4, r5
 80091c0:	42a3      	cmp	r3, r4
 80091c2:	6025      	str	r5, [r4, #0]
 80091c4:	bf18      	it	ne
 80091c6:	6059      	strne	r1, [r3, #4]
 80091c8:	6863      	ldr	r3, [r4, #4]
 80091ca:	bf08      	it	eq
 80091cc:	f8c8 1000 	streq.w	r1, [r8]
 80091d0:	5162      	str	r2, [r4, r5]
 80091d2:	604b      	str	r3, [r1, #4]
 80091d4:	4630      	mov	r0, r6
 80091d6:	f000 f82f 	bl	8009238 <__malloc_unlock>
 80091da:	f104 000b 	add.w	r0, r4, #11
 80091de:	1d23      	adds	r3, r4, #4
 80091e0:	f020 0007 	bic.w	r0, r0, #7
 80091e4:	1ac2      	subs	r2, r0, r3
 80091e6:	bf1c      	itt	ne
 80091e8:	1a1b      	subne	r3, r3, r0
 80091ea:	50a3      	strne	r3, [r4, r2]
 80091ec:	e7af      	b.n	800914e <_malloc_r+0x22>
 80091ee:	6862      	ldr	r2, [r4, #4]
 80091f0:	42a3      	cmp	r3, r4
 80091f2:	bf0c      	ite	eq
 80091f4:	f8c8 2000 	streq.w	r2, [r8]
 80091f8:	605a      	strne	r2, [r3, #4]
 80091fa:	e7eb      	b.n	80091d4 <_malloc_r+0xa8>
 80091fc:	4623      	mov	r3, r4
 80091fe:	6864      	ldr	r4, [r4, #4]
 8009200:	e7ae      	b.n	8009160 <_malloc_r+0x34>
 8009202:	463c      	mov	r4, r7
 8009204:	687f      	ldr	r7, [r7, #4]
 8009206:	e7b6      	b.n	8009176 <_malloc_r+0x4a>
 8009208:	461a      	mov	r2, r3
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	42a3      	cmp	r3, r4
 800920e:	d1fb      	bne.n	8009208 <_malloc_r+0xdc>
 8009210:	2300      	movs	r3, #0
 8009212:	6053      	str	r3, [r2, #4]
 8009214:	e7de      	b.n	80091d4 <_malloc_r+0xa8>
 8009216:	230c      	movs	r3, #12
 8009218:	6033      	str	r3, [r6, #0]
 800921a:	4630      	mov	r0, r6
 800921c:	f000 f80c 	bl	8009238 <__malloc_unlock>
 8009220:	e794      	b.n	800914c <_malloc_r+0x20>
 8009222:	6005      	str	r5, [r0, #0]
 8009224:	e7d6      	b.n	80091d4 <_malloc_r+0xa8>
 8009226:	bf00      	nop
 8009228:	20001420 	.word	0x20001420

0800922c <__malloc_lock>:
 800922c:	4801      	ldr	r0, [pc, #4]	@ (8009234 <__malloc_lock+0x8>)
 800922e:	f7ff bf0f 	b.w	8009050 <__retarget_lock_acquire_recursive>
 8009232:	bf00      	nop
 8009234:	20001418 	.word	0x20001418

08009238 <__malloc_unlock>:
 8009238:	4801      	ldr	r0, [pc, #4]	@ (8009240 <__malloc_unlock+0x8>)
 800923a:	f7ff bf0a 	b.w	8009052 <__retarget_lock_release_recursive>
 800923e:	bf00      	nop
 8009240:	20001418 	.word	0x20001418

08009244 <__ssputs_r>:
 8009244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009248:	688e      	ldr	r6, [r1, #8]
 800924a:	461f      	mov	r7, r3
 800924c:	42be      	cmp	r6, r7
 800924e:	680b      	ldr	r3, [r1, #0]
 8009250:	4682      	mov	sl, r0
 8009252:	460c      	mov	r4, r1
 8009254:	4690      	mov	r8, r2
 8009256:	d82d      	bhi.n	80092b4 <__ssputs_r+0x70>
 8009258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800925c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009260:	d026      	beq.n	80092b0 <__ssputs_r+0x6c>
 8009262:	6965      	ldr	r5, [r4, #20]
 8009264:	6909      	ldr	r1, [r1, #16]
 8009266:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800926a:	eba3 0901 	sub.w	r9, r3, r1
 800926e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009272:	1c7b      	adds	r3, r7, #1
 8009274:	444b      	add	r3, r9
 8009276:	106d      	asrs	r5, r5, #1
 8009278:	429d      	cmp	r5, r3
 800927a:	bf38      	it	cc
 800927c:	461d      	movcc	r5, r3
 800927e:	0553      	lsls	r3, r2, #21
 8009280:	d527      	bpl.n	80092d2 <__ssputs_r+0x8e>
 8009282:	4629      	mov	r1, r5
 8009284:	f7ff ff52 	bl	800912c <_malloc_r>
 8009288:	4606      	mov	r6, r0
 800928a:	b360      	cbz	r0, 80092e6 <__ssputs_r+0xa2>
 800928c:	6921      	ldr	r1, [r4, #16]
 800928e:	464a      	mov	r2, r9
 8009290:	f000 fae8 	bl	8009864 <memcpy>
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800929a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800929e:	81a3      	strh	r3, [r4, #12]
 80092a0:	6126      	str	r6, [r4, #16]
 80092a2:	6165      	str	r5, [r4, #20]
 80092a4:	444e      	add	r6, r9
 80092a6:	eba5 0509 	sub.w	r5, r5, r9
 80092aa:	6026      	str	r6, [r4, #0]
 80092ac:	60a5      	str	r5, [r4, #8]
 80092ae:	463e      	mov	r6, r7
 80092b0:	42be      	cmp	r6, r7
 80092b2:	d900      	bls.n	80092b6 <__ssputs_r+0x72>
 80092b4:	463e      	mov	r6, r7
 80092b6:	6820      	ldr	r0, [r4, #0]
 80092b8:	4632      	mov	r2, r6
 80092ba:	4641      	mov	r1, r8
 80092bc:	f000 faa8 	bl	8009810 <memmove>
 80092c0:	68a3      	ldr	r3, [r4, #8]
 80092c2:	1b9b      	subs	r3, r3, r6
 80092c4:	60a3      	str	r3, [r4, #8]
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	4433      	add	r3, r6
 80092ca:	6023      	str	r3, [r4, #0]
 80092cc:	2000      	movs	r0, #0
 80092ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d2:	462a      	mov	r2, r5
 80092d4:	f000 fad4 	bl	8009880 <_realloc_r>
 80092d8:	4606      	mov	r6, r0
 80092da:	2800      	cmp	r0, #0
 80092dc:	d1e0      	bne.n	80092a0 <__ssputs_r+0x5c>
 80092de:	6921      	ldr	r1, [r4, #16]
 80092e0:	4650      	mov	r0, sl
 80092e2:	f7ff feb7 	bl	8009054 <_free_r>
 80092e6:	230c      	movs	r3, #12
 80092e8:	f8ca 3000 	str.w	r3, [sl]
 80092ec:	89a3      	ldrh	r3, [r4, #12]
 80092ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092f2:	81a3      	strh	r3, [r4, #12]
 80092f4:	f04f 30ff 	mov.w	r0, #4294967295
 80092f8:	e7e9      	b.n	80092ce <__ssputs_r+0x8a>
	...

080092fc <_svfiprintf_r>:
 80092fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009300:	4698      	mov	r8, r3
 8009302:	898b      	ldrh	r3, [r1, #12]
 8009304:	061b      	lsls	r3, r3, #24
 8009306:	b09d      	sub	sp, #116	@ 0x74
 8009308:	4607      	mov	r7, r0
 800930a:	460d      	mov	r5, r1
 800930c:	4614      	mov	r4, r2
 800930e:	d510      	bpl.n	8009332 <_svfiprintf_r+0x36>
 8009310:	690b      	ldr	r3, [r1, #16]
 8009312:	b973      	cbnz	r3, 8009332 <_svfiprintf_r+0x36>
 8009314:	2140      	movs	r1, #64	@ 0x40
 8009316:	f7ff ff09 	bl	800912c <_malloc_r>
 800931a:	6028      	str	r0, [r5, #0]
 800931c:	6128      	str	r0, [r5, #16]
 800931e:	b930      	cbnz	r0, 800932e <_svfiprintf_r+0x32>
 8009320:	230c      	movs	r3, #12
 8009322:	603b      	str	r3, [r7, #0]
 8009324:	f04f 30ff 	mov.w	r0, #4294967295
 8009328:	b01d      	add	sp, #116	@ 0x74
 800932a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800932e:	2340      	movs	r3, #64	@ 0x40
 8009330:	616b      	str	r3, [r5, #20]
 8009332:	2300      	movs	r3, #0
 8009334:	9309      	str	r3, [sp, #36]	@ 0x24
 8009336:	2320      	movs	r3, #32
 8009338:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800933c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009340:	2330      	movs	r3, #48	@ 0x30
 8009342:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80094e0 <_svfiprintf_r+0x1e4>
 8009346:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800934a:	f04f 0901 	mov.w	r9, #1
 800934e:	4623      	mov	r3, r4
 8009350:	469a      	mov	sl, r3
 8009352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009356:	b10a      	cbz	r2, 800935c <_svfiprintf_r+0x60>
 8009358:	2a25      	cmp	r2, #37	@ 0x25
 800935a:	d1f9      	bne.n	8009350 <_svfiprintf_r+0x54>
 800935c:	ebba 0b04 	subs.w	fp, sl, r4
 8009360:	d00b      	beq.n	800937a <_svfiprintf_r+0x7e>
 8009362:	465b      	mov	r3, fp
 8009364:	4622      	mov	r2, r4
 8009366:	4629      	mov	r1, r5
 8009368:	4638      	mov	r0, r7
 800936a:	f7ff ff6b 	bl	8009244 <__ssputs_r>
 800936e:	3001      	adds	r0, #1
 8009370:	f000 80a7 	beq.w	80094c2 <_svfiprintf_r+0x1c6>
 8009374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009376:	445a      	add	r2, fp
 8009378:	9209      	str	r2, [sp, #36]	@ 0x24
 800937a:	f89a 3000 	ldrb.w	r3, [sl]
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 809f 	beq.w	80094c2 <_svfiprintf_r+0x1c6>
 8009384:	2300      	movs	r3, #0
 8009386:	f04f 32ff 	mov.w	r2, #4294967295
 800938a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800938e:	f10a 0a01 	add.w	sl, sl, #1
 8009392:	9304      	str	r3, [sp, #16]
 8009394:	9307      	str	r3, [sp, #28]
 8009396:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800939a:	931a      	str	r3, [sp, #104]	@ 0x68
 800939c:	4654      	mov	r4, sl
 800939e:	2205      	movs	r2, #5
 80093a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a4:	484e      	ldr	r0, [pc, #312]	@ (80094e0 <_svfiprintf_r+0x1e4>)
 80093a6:	f7f6 ff53 	bl	8000250 <memchr>
 80093aa:	9a04      	ldr	r2, [sp, #16]
 80093ac:	b9d8      	cbnz	r0, 80093e6 <_svfiprintf_r+0xea>
 80093ae:	06d0      	lsls	r0, r2, #27
 80093b0:	bf44      	itt	mi
 80093b2:	2320      	movmi	r3, #32
 80093b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093b8:	0711      	lsls	r1, r2, #28
 80093ba:	bf44      	itt	mi
 80093bc:	232b      	movmi	r3, #43	@ 0x2b
 80093be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093c2:	f89a 3000 	ldrb.w	r3, [sl]
 80093c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80093c8:	d015      	beq.n	80093f6 <_svfiprintf_r+0xfa>
 80093ca:	9a07      	ldr	r2, [sp, #28]
 80093cc:	4654      	mov	r4, sl
 80093ce:	2000      	movs	r0, #0
 80093d0:	f04f 0c0a 	mov.w	ip, #10
 80093d4:	4621      	mov	r1, r4
 80093d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093da:	3b30      	subs	r3, #48	@ 0x30
 80093dc:	2b09      	cmp	r3, #9
 80093de:	d94b      	bls.n	8009478 <_svfiprintf_r+0x17c>
 80093e0:	b1b0      	cbz	r0, 8009410 <_svfiprintf_r+0x114>
 80093e2:	9207      	str	r2, [sp, #28]
 80093e4:	e014      	b.n	8009410 <_svfiprintf_r+0x114>
 80093e6:	eba0 0308 	sub.w	r3, r0, r8
 80093ea:	fa09 f303 	lsl.w	r3, r9, r3
 80093ee:	4313      	orrs	r3, r2
 80093f0:	9304      	str	r3, [sp, #16]
 80093f2:	46a2      	mov	sl, r4
 80093f4:	e7d2      	b.n	800939c <_svfiprintf_r+0xa0>
 80093f6:	9b03      	ldr	r3, [sp, #12]
 80093f8:	1d19      	adds	r1, r3, #4
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	9103      	str	r1, [sp, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	bfbb      	ittet	lt
 8009402:	425b      	neglt	r3, r3
 8009404:	f042 0202 	orrlt.w	r2, r2, #2
 8009408:	9307      	strge	r3, [sp, #28]
 800940a:	9307      	strlt	r3, [sp, #28]
 800940c:	bfb8      	it	lt
 800940e:	9204      	strlt	r2, [sp, #16]
 8009410:	7823      	ldrb	r3, [r4, #0]
 8009412:	2b2e      	cmp	r3, #46	@ 0x2e
 8009414:	d10a      	bne.n	800942c <_svfiprintf_r+0x130>
 8009416:	7863      	ldrb	r3, [r4, #1]
 8009418:	2b2a      	cmp	r3, #42	@ 0x2a
 800941a:	d132      	bne.n	8009482 <_svfiprintf_r+0x186>
 800941c:	9b03      	ldr	r3, [sp, #12]
 800941e:	1d1a      	adds	r2, r3, #4
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	9203      	str	r2, [sp, #12]
 8009424:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009428:	3402      	adds	r4, #2
 800942a:	9305      	str	r3, [sp, #20]
 800942c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80094f0 <_svfiprintf_r+0x1f4>
 8009430:	7821      	ldrb	r1, [r4, #0]
 8009432:	2203      	movs	r2, #3
 8009434:	4650      	mov	r0, sl
 8009436:	f7f6 ff0b 	bl	8000250 <memchr>
 800943a:	b138      	cbz	r0, 800944c <_svfiprintf_r+0x150>
 800943c:	9b04      	ldr	r3, [sp, #16]
 800943e:	eba0 000a 	sub.w	r0, r0, sl
 8009442:	2240      	movs	r2, #64	@ 0x40
 8009444:	4082      	lsls	r2, r0
 8009446:	4313      	orrs	r3, r2
 8009448:	3401      	adds	r4, #1
 800944a:	9304      	str	r3, [sp, #16]
 800944c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009450:	4824      	ldr	r0, [pc, #144]	@ (80094e4 <_svfiprintf_r+0x1e8>)
 8009452:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009456:	2206      	movs	r2, #6
 8009458:	f7f6 fefa 	bl	8000250 <memchr>
 800945c:	2800      	cmp	r0, #0
 800945e:	d036      	beq.n	80094ce <_svfiprintf_r+0x1d2>
 8009460:	4b21      	ldr	r3, [pc, #132]	@ (80094e8 <_svfiprintf_r+0x1ec>)
 8009462:	bb1b      	cbnz	r3, 80094ac <_svfiprintf_r+0x1b0>
 8009464:	9b03      	ldr	r3, [sp, #12]
 8009466:	3307      	adds	r3, #7
 8009468:	f023 0307 	bic.w	r3, r3, #7
 800946c:	3308      	adds	r3, #8
 800946e:	9303      	str	r3, [sp, #12]
 8009470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009472:	4433      	add	r3, r6
 8009474:	9309      	str	r3, [sp, #36]	@ 0x24
 8009476:	e76a      	b.n	800934e <_svfiprintf_r+0x52>
 8009478:	fb0c 3202 	mla	r2, ip, r2, r3
 800947c:	460c      	mov	r4, r1
 800947e:	2001      	movs	r0, #1
 8009480:	e7a8      	b.n	80093d4 <_svfiprintf_r+0xd8>
 8009482:	2300      	movs	r3, #0
 8009484:	3401      	adds	r4, #1
 8009486:	9305      	str	r3, [sp, #20]
 8009488:	4619      	mov	r1, r3
 800948a:	f04f 0c0a 	mov.w	ip, #10
 800948e:	4620      	mov	r0, r4
 8009490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009494:	3a30      	subs	r2, #48	@ 0x30
 8009496:	2a09      	cmp	r2, #9
 8009498:	d903      	bls.n	80094a2 <_svfiprintf_r+0x1a6>
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0c6      	beq.n	800942c <_svfiprintf_r+0x130>
 800949e:	9105      	str	r1, [sp, #20]
 80094a0:	e7c4      	b.n	800942c <_svfiprintf_r+0x130>
 80094a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80094a6:	4604      	mov	r4, r0
 80094a8:	2301      	movs	r3, #1
 80094aa:	e7f0      	b.n	800948e <_svfiprintf_r+0x192>
 80094ac:	ab03      	add	r3, sp, #12
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	462a      	mov	r2, r5
 80094b2:	4b0e      	ldr	r3, [pc, #56]	@ (80094ec <_svfiprintf_r+0x1f0>)
 80094b4:	a904      	add	r1, sp, #16
 80094b6:	4638      	mov	r0, r7
 80094b8:	f3af 8000 	nop.w
 80094bc:	1c42      	adds	r2, r0, #1
 80094be:	4606      	mov	r6, r0
 80094c0:	d1d6      	bne.n	8009470 <_svfiprintf_r+0x174>
 80094c2:	89ab      	ldrh	r3, [r5, #12]
 80094c4:	065b      	lsls	r3, r3, #25
 80094c6:	f53f af2d 	bmi.w	8009324 <_svfiprintf_r+0x28>
 80094ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094cc:	e72c      	b.n	8009328 <_svfiprintf_r+0x2c>
 80094ce:	ab03      	add	r3, sp, #12
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	462a      	mov	r2, r5
 80094d4:	4b05      	ldr	r3, [pc, #20]	@ (80094ec <_svfiprintf_r+0x1f0>)
 80094d6:	a904      	add	r1, sp, #16
 80094d8:	4638      	mov	r0, r7
 80094da:	f000 f879 	bl	80095d0 <_printf_i>
 80094de:	e7ed      	b.n	80094bc <_svfiprintf_r+0x1c0>
 80094e0:	08009c08 	.word	0x08009c08
 80094e4:	08009c12 	.word	0x08009c12
 80094e8:	00000000 	.word	0x00000000
 80094ec:	08009245 	.word	0x08009245
 80094f0:	08009c0e 	.word	0x08009c0e

080094f4 <_printf_common>:
 80094f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f8:	4616      	mov	r6, r2
 80094fa:	4698      	mov	r8, r3
 80094fc:	688a      	ldr	r2, [r1, #8]
 80094fe:	690b      	ldr	r3, [r1, #16]
 8009500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009504:	4293      	cmp	r3, r2
 8009506:	bfb8      	it	lt
 8009508:	4613      	movlt	r3, r2
 800950a:	6033      	str	r3, [r6, #0]
 800950c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009510:	4607      	mov	r7, r0
 8009512:	460c      	mov	r4, r1
 8009514:	b10a      	cbz	r2, 800951a <_printf_common+0x26>
 8009516:	3301      	adds	r3, #1
 8009518:	6033      	str	r3, [r6, #0]
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	0699      	lsls	r1, r3, #26
 800951e:	bf42      	ittt	mi
 8009520:	6833      	ldrmi	r3, [r6, #0]
 8009522:	3302      	addmi	r3, #2
 8009524:	6033      	strmi	r3, [r6, #0]
 8009526:	6825      	ldr	r5, [r4, #0]
 8009528:	f015 0506 	ands.w	r5, r5, #6
 800952c:	d106      	bne.n	800953c <_printf_common+0x48>
 800952e:	f104 0a19 	add.w	sl, r4, #25
 8009532:	68e3      	ldr	r3, [r4, #12]
 8009534:	6832      	ldr	r2, [r6, #0]
 8009536:	1a9b      	subs	r3, r3, r2
 8009538:	42ab      	cmp	r3, r5
 800953a:	dc26      	bgt.n	800958a <_printf_common+0x96>
 800953c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009540:	6822      	ldr	r2, [r4, #0]
 8009542:	3b00      	subs	r3, #0
 8009544:	bf18      	it	ne
 8009546:	2301      	movne	r3, #1
 8009548:	0692      	lsls	r2, r2, #26
 800954a:	d42b      	bmi.n	80095a4 <_printf_common+0xb0>
 800954c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009550:	4641      	mov	r1, r8
 8009552:	4638      	mov	r0, r7
 8009554:	47c8      	blx	r9
 8009556:	3001      	adds	r0, #1
 8009558:	d01e      	beq.n	8009598 <_printf_common+0xa4>
 800955a:	6823      	ldr	r3, [r4, #0]
 800955c:	6922      	ldr	r2, [r4, #16]
 800955e:	f003 0306 	and.w	r3, r3, #6
 8009562:	2b04      	cmp	r3, #4
 8009564:	bf02      	ittt	eq
 8009566:	68e5      	ldreq	r5, [r4, #12]
 8009568:	6833      	ldreq	r3, [r6, #0]
 800956a:	1aed      	subeq	r5, r5, r3
 800956c:	68a3      	ldr	r3, [r4, #8]
 800956e:	bf0c      	ite	eq
 8009570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009574:	2500      	movne	r5, #0
 8009576:	4293      	cmp	r3, r2
 8009578:	bfc4      	itt	gt
 800957a:	1a9b      	subgt	r3, r3, r2
 800957c:	18ed      	addgt	r5, r5, r3
 800957e:	2600      	movs	r6, #0
 8009580:	341a      	adds	r4, #26
 8009582:	42b5      	cmp	r5, r6
 8009584:	d11a      	bne.n	80095bc <_printf_common+0xc8>
 8009586:	2000      	movs	r0, #0
 8009588:	e008      	b.n	800959c <_printf_common+0xa8>
 800958a:	2301      	movs	r3, #1
 800958c:	4652      	mov	r2, sl
 800958e:	4641      	mov	r1, r8
 8009590:	4638      	mov	r0, r7
 8009592:	47c8      	blx	r9
 8009594:	3001      	adds	r0, #1
 8009596:	d103      	bne.n	80095a0 <_printf_common+0xac>
 8009598:	f04f 30ff 	mov.w	r0, #4294967295
 800959c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a0:	3501      	adds	r5, #1
 80095a2:	e7c6      	b.n	8009532 <_printf_common+0x3e>
 80095a4:	18e1      	adds	r1, r4, r3
 80095a6:	1c5a      	adds	r2, r3, #1
 80095a8:	2030      	movs	r0, #48	@ 0x30
 80095aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095ae:	4422      	add	r2, r4
 80095b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095b8:	3302      	adds	r3, #2
 80095ba:	e7c7      	b.n	800954c <_printf_common+0x58>
 80095bc:	2301      	movs	r3, #1
 80095be:	4622      	mov	r2, r4
 80095c0:	4641      	mov	r1, r8
 80095c2:	4638      	mov	r0, r7
 80095c4:	47c8      	blx	r9
 80095c6:	3001      	adds	r0, #1
 80095c8:	d0e6      	beq.n	8009598 <_printf_common+0xa4>
 80095ca:	3601      	adds	r6, #1
 80095cc:	e7d9      	b.n	8009582 <_printf_common+0x8e>
	...

080095d0 <_printf_i>:
 80095d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095d4:	7e0f      	ldrb	r7, [r1, #24]
 80095d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095d8:	2f78      	cmp	r7, #120	@ 0x78
 80095da:	4691      	mov	r9, r2
 80095dc:	4680      	mov	r8, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	469a      	mov	sl, r3
 80095e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095e6:	d807      	bhi.n	80095f8 <_printf_i+0x28>
 80095e8:	2f62      	cmp	r7, #98	@ 0x62
 80095ea:	d80a      	bhi.n	8009602 <_printf_i+0x32>
 80095ec:	2f00      	cmp	r7, #0
 80095ee:	f000 80d2 	beq.w	8009796 <_printf_i+0x1c6>
 80095f2:	2f58      	cmp	r7, #88	@ 0x58
 80095f4:	f000 80b9 	beq.w	800976a <_printf_i+0x19a>
 80095f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009600:	e03a      	b.n	8009678 <_printf_i+0xa8>
 8009602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009606:	2b15      	cmp	r3, #21
 8009608:	d8f6      	bhi.n	80095f8 <_printf_i+0x28>
 800960a:	a101      	add	r1, pc, #4	@ (adr r1, 8009610 <_printf_i+0x40>)
 800960c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009610:	08009669 	.word	0x08009669
 8009614:	0800967d 	.word	0x0800967d
 8009618:	080095f9 	.word	0x080095f9
 800961c:	080095f9 	.word	0x080095f9
 8009620:	080095f9 	.word	0x080095f9
 8009624:	080095f9 	.word	0x080095f9
 8009628:	0800967d 	.word	0x0800967d
 800962c:	080095f9 	.word	0x080095f9
 8009630:	080095f9 	.word	0x080095f9
 8009634:	080095f9 	.word	0x080095f9
 8009638:	080095f9 	.word	0x080095f9
 800963c:	0800977d 	.word	0x0800977d
 8009640:	080096a7 	.word	0x080096a7
 8009644:	08009737 	.word	0x08009737
 8009648:	080095f9 	.word	0x080095f9
 800964c:	080095f9 	.word	0x080095f9
 8009650:	0800979f 	.word	0x0800979f
 8009654:	080095f9 	.word	0x080095f9
 8009658:	080096a7 	.word	0x080096a7
 800965c:	080095f9 	.word	0x080095f9
 8009660:	080095f9 	.word	0x080095f9
 8009664:	0800973f 	.word	0x0800973f
 8009668:	6833      	ldr	r3, [r6, #0]
 800966a:	1d1a      	adds	r2, r3, #4
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	6032      	str	r2, [r6, #0]
 8009670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009678:	2301      	movs	r3, #1
 800967a:	e09d      	b.n	80097b8 <_printf_i+0x1e8>
 800967c:	6833      	ldr	r3, [r6, #0]
 800967e:	6820      	ldr	r0, [r4, #0]
 8009680:	1d19      	adds	r1, r3, #4
 8009682:	6031      	str	r1, [r6, #0]
 8009684:	0606      	lsls	r6, r0, #24
 8009686:	d501      	bpl.n	800968c <_printf_i+0xbc>
 8009688:	681d      	ldr	r5, [r3, #0]
 800968a:	e003      	b.n	8009694 <_printf_i+0xc4>
 800968c:	0645      	lsls	r5, r0, #25
 800968e:	d5fb      	bpl.n	8009688 <_printf_i+0xb8>
 8009690:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009694:	2d00      	cmp	r5, #0
 8009696:	da03      	bge.n	80096a0 <_printf_i+0xd0>
 8009698:	232d      	movs	r3, #45	@ 0x2d
 800969a:	426d      	negs	r5, r5
 800969c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096a0:	4859      	ldr	r0, [pc, #356]	@ (8009808 <_printf_i+0x238>)
 80096a2:	230a      	movs	r3, #10
 80096a4:	e011      	b.n	80096ca <_printf_i+0xfa>
 80096a6:	6821      	ldr	r1, [r4, #0]
 80096a8:	6833      	ldr	r3, [r6, #0]
 80096aa:	0608      	lsls	r0, r1, #24
 80096ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80096b0:	d402      	bmi.n	80096b8 <_printf_i+0xe8>
 80096b2:	0649      	lsls	r1, r1, #25
 80096b4:	bf48      	it	mi
 80096b6:	b2ad      	uxthmi	r5, r5
 80096b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80096ba:	4853      	ldr	r0, [pc, #332]	@ (8009808 <_printf_i+0x238>)
 80096bc:	6033      	str	r3, [r6, #0]
 80096be:	bf14      	ite	ne
 80096c0:	230a      	movne	r3, #10
 80096c2:	2308      	moveq	r3, #8
 80096c4:	2100      	movs	r1, #0
 80096c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096ca:	6866      	ldr	r6, [r4, #4]
 80096cc:	60a6      	str	r6, [r4, #8]
 80096ce:	2e00      	cmp	r6, #0
 80096d0:	bfa2      	ittt	ge
 80096d2:	6821      	ldrge	r1, [r4, #0]
 80096d4:	f021 0104 	bicge.w	r1, r1, #4
 80096d8:	6021      	strge	r1, [r4, #0]
 80096da:	b90d      	cbnz	r5, 80096e0 <_printf_i+0x110>
 80096dc:	2e00      	cmp	r6, #0
 80096de:	d04b      	beq.n	8009778 <_printf_i+0x1a8>
 80096e0:	4616      	mov	r6, r2
 80096e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80096e6:	fb03 5711 	mls	r7, r3, r1, r5
 80096ea:	5dc7      	ldrb	r7, [r0, r7]
 80096ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096f0:	462f      	mov	r7, r5
 80096f2:	42bb      	cmp	r3, r7
 80096f4:	460d      	mov	r5, r1
 80096f6:	d9f4      	bls.n	80096e2 <_printf_i+0x112>
 80096f8:	2b08      	cmp	r3, #8
 80096fa:	d10b      	bne.n	8009714 <_printf_i+0x144>
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	07df      	lsls	r7, r3, #31
 8009700:	d508      	bpl.n	8009714 <_printf_i+0x144>
 8009702:	6923      	ldr	r3, [r4, #16]
 8009704:	6861      	ldr	r1, [r4, #4]
 8009706:	4299      	cmp	r1, r3
 8009708:	bfde      	ittt	le
 800970a:	2330      	movle	r3, #48	@ 0x30
 800970c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009710:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009714:	1b92      	subs	r2, r2, r6
 8009716:	6122      	str	r2, [r4, #16]
 8009718:	f8cd a000 	str.w	sl, [sp]
 800971c:	464b      	mov	r3, r9
 800971e:	aa03      	add	r2, sp, #12
 8009720:	4621      	mov	r1, r4
 8009722:	4640      	mov	r0, r8
 8009724:	f7ff fee6 	bl	80094f4 <_printf_common>
 8009728:	3001      	adds	r0, #1
 800972a:	d14a      	bne.n	80097c2 <_printf_i+0x1f2>
 800972c:	f04f 30ff 	mov.w	r0, #4294967295
 8009730:	b004      	add	sp, #16
 8009732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	f043 0320 	orr.w	r3, r3, #32
 800973c:	6023      	str	r3, [r4, #0]
 800973e:	4833      	ldr	r0, [pc, #204]	@ (800980c <_printf_i+0x23c>)
 8009740:	2778      	movs	r7, #120	@ 0x78
 8009742:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009746:	6823      	ldr	r3, [r4, #0]
 8009748:	6831      	ldr	r1, [r6, #0]
 800974a:	061f      	lsls	r7, r3, #24
 800974c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009750:	d402      	bmi.n	8009758 <_printf_i+0x188>
 8009752:	065f      	lsls	r7, r3, #25
 8009754:	bf48      	it	mi
 8009756:	b2ad      	uxthmi	r5, r5
 8009758:	6031      	str	r1, [r6, #0]
 800975a:	07d9      	lsls	r1, r3, #31
 800975c:	bf44      	itt	mi
 800975e:	f043 0320 	orrmi.w	r3, r3, #32
 8009762:	6023      	strmi	r3, [r4, #0]
 8009764:	b11d      	cbz	r5, 800976e <_printf_i+0x19e>
 8009766:	2310      	movs	r3, #16
 8009768:	e7ac      	b.n	80096c4 <_printf_i+0xf4>
 800976a:	4827      	ldr	r0, [pc, #156]	@ (8009808 <_printf_i+0x238>)
 800976c:	e7e9      	b.n	8009742 <_printf_i+0x172>
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	f023 0320 	bic.w	r3, r3, #32
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	e7f6      	b.n	8009766 <_printf_i+0x196>
 8009778:	4616      	mov	r6, r2
 800977a:	e7bd      	b.n	80096f8 <_printf_i+0x128>
 800977c:	6833      	ldr	r3, [r6, #0]
 800977e:	6825      	ldr	r5, [r4, #0]
 8009780:	6961      	ldr	r1, [r4, #20]
 8009782:	1d18      	adds	r0, r3, #4
 8009784:	6030      	str	r0, [r6, #0]
 8009786:	062e      	lsls	r6, r5, #24
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	d501      	bpl.n	8009790 <_printf_i+0x1c0>
 800978c:	6019      	str	r1, [r3, #0]
 800978e:	e002      	b.n	8009796 <_printf_i+0x1c6>
 8009790:	0668      	lsls	r0, r5, #25
 8009792:	d5fb      	bpl.n	800978c <_printf_i+0x1bc>
 8009794:	8019      	strh	r1, [r3, #0]
 8009796:	2300      	movs	r3, #0
 8009798:	6123      	str	r3, [r4, #16]
 800979a:	4616      	mov	r6, r2
 800979c:	e7bc      	b.n	8009718 <_printf_i+0x148>
 800979e:	6833      	ldr	r3, [r6, #0]
 80097a0:	1d1a      	adds	r2, r3, #4
 80097a2:	6032      	str	r2, [r6, #0]
 80097a4:	681e      	ldr	r6, [r3, #0]
 80097a6:	6862      	ldr	r2, [r4, #4]
 80097a8:	2100      	movs	r1, #0
 80097aa:	4630      	mov	r0, r6
 80097ac:	f7f6 fd50 	bl	8000250 <memchr>
 80097b0:	b108      	cbz	r0, 80097b6 <_printf_i+0x1e6>
 80097b2:	1b80      	subs	r0, r0, r6
 80097b4:	6060      	str	r0, [r4, #4]
 80097b6:	6863      	ldr	r3, [r4, #4]
 80097b8:	6123      	str	r3, [r4, #16]
 80097ba:	2300      	movs	r3, #0
 80097bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097c0:	e7aa      	b.n	8009718 <_printf_i+0x148>
 80097c2:	6923      	ldr	r3, [r4, #16]
 80097c4:	4632      	mov	r2, r6
 80097c6:	4649      	mov	r1, r9
 80097c8:	4640      	mov	r0, r8
 80097ca:	47d0      	blx	sl
 80097cc:	3001      	adds	r0, #1
 80097ce:	d0ad      	beq.n	800972c <_printf_i+0x15c>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	079b      	lsls	r3, r3, #30
 80097d4:	d413      	bmi.n	80097fe <_printf_i+0x22e>
 80097d6:	68e0      	ldr	r0, [r4, #12]
 80097d8:	9b03      	ldr	r3, [sp, #12]
 80097da:	4298      	cmp	r0, r3
 80097dc:	bfb8      	it	lt
 80097de:	4618      	movlt	r0, r3
 80097e0:	e7a6      	b.n	8009730 <_printf_i+0x160>
 80097e2:	2301      	movs	r3, #1
 80097e4:	4632      	mov	r2, r6
 80097e6:	4649      	mov	r1, r9
 80097e8:	4640      	mov	r0, r8
 80097ea:	47d0      	blx	sl
 80097ec:	3001      	adds	r0, #1
 80097ee:	d09d      	beq.n	800972c <_printf_i+0x15c>
 80097f0:	3501      	adds	r5, #1
 80097f2:	68e3      	ldr	r3, [r4, #12]
 80097f4:	9903      	ldr	r1, [sp, #12]
 80097f6:	1a5b      	subs	r3, r3, r1
 80097f8:	42ab      	cmp	r3, r5
 80097fa:	dcf2      	bgt.n	80097e2 <_printf_i+0x212>
 80097fc:	e7eb      	b.n	80097d6 <_printf_i+0x206>
 80097fe:	2500      	movs	r5, #0
 8009800:	f104 0619 	add.w	r6, r4, #25
 8009804:	e7f5      	b.n	80097f2 <_printf_i+0x222>
 8009806:	bf00      	nop
 8009808:	08009c19 	.word	0x08009c19
 800980c:	08009c2a 	.word	0x08009c2a

08009810 <memmove>:
 8009810:	4288      	cmp	r0, r1
 8009812:	b510      	push	{r4, lr}
 8009814:	eb01 0402 	add.w	r4, r1, r2
 8009818:	d902      	bls.n	8009820 <memmove+0x10>
 800981a:	4284      	cmp	r4, r0
 800981c:	4623      	mov	r3, r4
 800981e:	d807      	bhi.n	8009830 <memmove+0x20>
 8009820:	1e43      	subs	r3, r0, #1
 8009822:	42a1      	cmp	r1, r4
 8009824:	d008      	beq.n	8009838 <memmove+0x28>
 8009826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800982a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800982e:	e7f8      	b.n	8009822 <memmove+0x12>
 8009830:	4402      	add	r2, r0
 8009832:	4601      	mov	r1, r0
 8009834:	428a      	cmp	r2, r1
 8009836:	d100      	bne.n	800983a <memmove+0x2a>
 8009838:	bd10      	pop	{r4, pc}
 800983a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800983e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009842:	e7f7      	b.n	8009834 <memmove+0x24>

08009844 <_sbrk_r>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	4d06      	ldr	r5, [pc, #24]	@ (8009860 <_sbrk_r+0x1c>)
 8009848:	2300      	movs	r3, #0
 800984a:	4604      	mov	r4, r0
 800984c:	4608      	mov	r0, r1
 800984e:	602b      	str	r3, [r5, #0]
 8009850:	f7f9 f8c2 	bl	80029d8 <_sbrk>
 8009854:	1c43      	adds	r3, r0, #1
 8009856:	d102      	bne.n	800985e <_sbrk_r+0x1a>
 8009858:	682b      	ldr	r3, [r5, #0]
 800985a:	b103      	cbz	r3, 800985e <_sbrk_r+0x1a>
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	bd38      	pop	{r3, r4, r5, pc}
 8009860:	20001414 	.word	0x20001414

08009864 <memcpy>:
 8009864:	440a      	add	r2, r1
 8009866:	4291      	cmp	r1, r2
 8009868:	f100 33ff 	add.w	r3, r0, #4294967295
 800986c:	d100      	bne.n	8009870 <memcpy+0xc>
 800986e:	4770      	bx	lr
 8009870:	b510      	push	{r4, lr}
 8009872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800987a:	4291      	cmp	r1, r2
 800987c:	d1f9      	bne.n	8009872 <memcpy+0xe>
 800987e:	bd10      	pop	{r4, pc}

08009880 <_realloc_r>:
 8009880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009884:	4680      	mov	r8, r0
 8009886:	4615      	mov	r5, r2
 8009888:	460c      	mov	r4, r1
 800988a:	b921      	cbnz	r1, 8009896 <_realloc_r+0x16>
 800988c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009890:	4611      	mov	r1, r2
 8009892:	f7ff bc4b 	b.w	800912c <_malloc_r>
 8009896:	b92a      	cbnz	r2, 80098a4 <_realloc_r+0x24>
 8009898:	f7ff fbdc 	bl	8009054 <_free_r>
 800989c:	2400      	movs	r4, #0
 800989e:	4620      	mov	r0, r4
 80098a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a4:	f000 f81a 	bl	80098dc <_malloc_usable_size_r>
 80098a8:	4285      	cmp	r5, r0
 80098aa:	4606      	mov	r6, r0
 80098ac:	d802      	bhi.n	80098b4 <_realloc_r+0x34>
 80098ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80098b2:	d8f4      	bhi.n	800989e <_realloc_r+0x1e>
 80098b4:	4629      	mov	r1, r5
 80098b6:	4640      	mov	r0, r8
 80098b8:	f7ff fc38 	bl	800912c <_malloc_r>
 80098bc:	4607      	mov	r7, r0
 80098be:	2800      	cmp	r0, #0
 80098c0:	d0ec      	beq.n	800989c <_realloc_r+0x1c>
 80098c2:	42b5      	cmp	r5, r6
 80098c4:	462a      	mov	r2, r5
 80098c6:	4621      	mov	r1, r4
 80098c8:	bf28      	it	cs
 80098ca:	4632      	movcs	r2, r6
 80098cc:	f7ff ffca 	bl	8009864 <memcpy>
 80098d0:	4621      	mov	r1, r4
 80098d2:	4640      	mov	r0, r8
 80098d4:	f7ff fbbe 	bl	8009054 <_free_r>
 80098d8:	463c      	mov	r4, r7
 80098da:	e7e0      	b.n	800989e <_realloc_r+0x1e>

080098dc <_malloc_usable_size_r>:
 80098dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098e0:	1f18      	subs	r0, r3, #4
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	bfbc      	itt	lt
 80098e6:	580b      	ldrlt	r3, [r1, r0]
 80098e8:	18c0      	addlt	r0, r0, r3
 80098ea:	4770      	bx	lr

080098ec <_init>:
 80098ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ee:	bf00      	nop
 80098f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098f2:	bc08      	pop	{r3}
 80098f4:	469e      	mov	lr, r3
 80098f6:	4770      	bx	lr

080098f8 <_fini>:
 80098f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fa:	bf00      	nop
 80098fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098fe:	bc08      	pop	{r3}
 8009900:	469e      	mov	lr, r3
 8009902:	4770      	bx	lr
