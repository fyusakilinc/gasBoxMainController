
gasBoxMasterv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5d4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800a7b4  0800a7b4  0000b7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaec  0800aaec  0000c064  2**0
                  CONTENTS
  4 .ARM          00000008  0800aaec  0800aaec  0000baec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaf4  0800aaf4  0000c064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaf4  0800aaf4  0000baf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aaf8  0800aaf8  0000baf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800aafc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014cc  20000064  0800ab60  0000c064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001530  0800ab60  0000c530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c45d  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000442e  00000000  00000000  000284f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  0002c920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013c4  00000000  00000000  0002e290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e98  00000000  00000000  0002f654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000220a9  00000000  00000000  000554ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3082  00000000  00000000  00077595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a617  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e54  00000000  00000000  0016a65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001714b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a79c 	.word	0x0800a79c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	0800a79c 	.word	0x0800a79c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <hw_sero_get>:


// Serviceroutine Hadware Get
// Prueft im wesentlichen auf Harwarefehlersignale
void hw_sero_get(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <hw_sero_set>:

// Serviceroutine Hadware Set
// Verwaltet die Heartbeat LED
void hw_sero_set(void)
{	if (ct_hbeat_null()==1)
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	f002 fd9c 	bl	8003130 <ct_hbeat_null>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d107      	bne.n	800060e <hw_sero_set+0x1e>
	 { set_ct_hbeat(500);
 80005fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000602:	f002 fd85 	bl	8003110 <set_ct_hbeat>
	 HAL_GPIO_TogglePin(UC_HEARTBEAT_GPIO_Port, UC_HEARTBEAT_Pin);
 8000606:	2108      	movs	r1, #8
 8000608:	4802      	ldr	r0, [pc, #8]	@ (8000614 <hw_sero_set+0x24>)
 800060a:	f005 fbcb 	bl	8005da4 <HAL_GPIO_TogglePin>
	}
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	48000c00 	.word	0x48000c00

08000618 <u_ok>:
void hw_set_error_out(uint8_t p)
{

}

uint8_t u_ok(GPIO_TypeDef *port, uint16_t pin) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	807b      	strh	r3, [r7, #2]
    GPIO_PinState s = HAL_GPIO_ReadPin(port, pin);
 8000624:	887b      	ldrh	r3, [r7, #2]
 8000626:	4619      	mov	r1, r3
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f005 fb8b 	bl	8005d44 <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	73fb      	strb	r3, [r7, #15]
    return (s == GPIO_PIN_SET) ? 1u : 0u;
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d101      	bne.n	800063c <u_ok+0x24>
 8000638:	2301      	movs	r3, #1
 800063a:	e000      	b.n	800063e <u_ok+0x26>
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <update_uok>:

uint8_t update_uok(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	uint8_t res1 = u_ok(UC__5VOK_GPIO_Port,UC__5VOK_Pin);
 800064e:	2110      	movs	r1, #16
 8000650:	480b      	ldr	r0, [pc, #44]	@ (8000680 <update_uok+0x38>)
 8000652:	f7ff ffe1 	bl	8000618 <u_ok>
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	uint8_t res2 = u_ok(UC__12VOK_GPIO_Port,UC__12VOK_Pin);
 800065a:	2120      	movs	r1, #32
 800065c:	4808      	ldr	r0, [pc, #32]	@ (8000680 <update_uok+0x38>)
 800065e:	f7ff ffdb 	bl	8000618 <u_ok>
 8000662:	4603      	mov	r3, r0
 8000664:	71bb      	strb	r3, [r7, #6]
	if((res1 && res2)){
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d004      	beq.n	8000676 <update_uok+0x2e>
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <update_uok+0x2e>
		return 1;
 8000672:	2301      	movs	r3, #1
 8000674:	e000      	b.n	8000678 <update_uok+0x30>
	}
	return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	48000c00 	.word	0x48000c00

08000684 <readPumpWarning>:
                      set ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

// these two functions might just need a pulse

uint8_t readPumpWarning(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	GPIO_PinState s = HAL_GPIO_ReadPin(UC_PUMP_WARNING_GPIO_Port, UC_PUMP_WARNING_Pin);
 800068a:	2110      	movs	r1, #16
 800068c:	4807      	ldr	r0, [pc, #28]	@ (80006ac <readPumpWarning+0x28>)
 800068e:	f005 fb59 	bl	8005d44 <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	return (s == GPIO_PIN_SET) ? 1u : 0u;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d101      	bne.n	80006a0 <readPumpWarning+0x1c>
 800069c:	2301      	movs	r3, #1
 800069e:	e000      	b.n	80006a2 <readPumpWarning+0x1e>
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	48001000 	.word	0x48001000

080006b0 <readPumpAlarm>:

uint8_t readPumpAlarm(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	GPIO_PinState s = HAL_GPIO_ReadPin(UC_PUMP_ALARM_GPIO_Port, UC_PUMP_ALARM_Pin);
 80006b6:	2120      	movs	r1, #32
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <readPumpAlarm+0x28>)
 80006ba:	f005 fb43 	bl	8005d44 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	return (s == GPIO_PIN_SET) ? 1u : 0u;
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d101      	bne.n	80006cc <readPumpAlarm+0x1c>
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <readPumpAlarm+0x1e>
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	48001000 	.word	0x48001000

080006dc <MIO_RESET_Pulse>:
static uint16_t ADCS = (1<<MIO_ADC0);

static inline void MIO_CS_L(void){ HAL_GPIO_WritePin(UC_CS_AUX0_GPIO_Port, UC_CS_AUX0_Pin, GPIO_PIN_RESET); }
static inline void MIO_CS_H(void){ HAL_GPIO_WritePin(UC_CS_AUX0_GPIO_Port, UC_CS_AUX0_Pin, GPIO_PIN_SET); }

static inline void MIO_RESET_Pulse(void){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
    // Optional reset pulse like your AVR did
    HAL_GPIO_WritePin(UC_AUX_RESET_GPIO_Port, UC_AUX_RESET_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006e6:	4808      	ldr	r0, [pc, #32]	@ (8000708 <MIO_RESET_Pulse+0x2c>)
 80006e8:	f005 fb44 	bl	8005d74 <HAL_GPIO_WritePin>
    HAL_Delay(1);   // 1 ms is plenty
 80006ec:	2001      	movs	r0, #1
 80006ee:	f003 ff8f 	bl	8004610 <HAL_Delay>
    HAL_GPIO_WritePin(UC_AUX_RESET_GPIO_Port, UC_AUX_RESET_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006f8:	4803      	ldr	r0, [pc, #12]	@ (8000708 <MIO_RESET_Pulse+0x2c>)
 80006fa:	f005 fb3b 	bl	8005d74 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f003 ff86 	bl	8004610 <HAL_Delay>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	48001000 	.word	0x48001000

0800070c <mio_send_word>:

static inline void mio_send_word(uint16_t w){
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	80fb      	strh	r3, [r7, #6]
	spi_access_device(spi_mio);
 8000716:	2001      	movs	r0, #1
 8000718:	f002 f8be 	bl	8002898 <spi_access_device>
	spiTransferWord(w);
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	4618      	mov	r0, r3
 8000720:	f002 f8a2 	bl	8002868 <spiTransferWord>
	spi_release_device(spi_mio);
 8000724:	2001      	movs	r0, #1
 8000726:	f002 f8c5 	bl	80028b4 <spi_release_device>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <mio_init>:

void mio_init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
    MIO_RESET_Pulse();  // optional
 800073a:	f7ff ffcf 	bl	80006dc <MIO_RESET_Pulse>
    delay_us(10);
 800073e:	200a      	movs	r0, #10
 8000740:	f000 fa0c 	bl	8000b5c <delay_us>

    mio_send_word(AD5592R_CMD_SW_RESET | 0x0DAC);
 8000744:	f647 50ac 	movw	r0, #32172	@ 0x7dac
 8000748:	f7ff ffe0 	bl	800070c <mio_send_word>
    // Configure channels on AVR:
    mio_send_word(AD5592R_CMD_ADC_PIN_SELECT | ADCS);
 800074c:	4b33      	ldr	r3, [pc, #204]	@ (800081c <mio_init+0xe8>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000754:	b29b      	uxth	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ffd8 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_DAC_PIN_SELECT | DACS);
 800075c:	4b30      	ldr	r3, [pc, #192]	@ (8000820 <mio_init+0xec>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8000764:	b29b      	uxth	r3, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ffd0 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_PULL_DOWN_SET);
 800076c:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8000770:	f7ff ffcc 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_GPIO_WRITE_CONFIG);
 8000774:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000778:	f7ff ffc8 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_GPIO_READ_CONFIG);
 800077c:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
 8000780:	f7ff ffc4 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_GPIO_DRAIN_CONFIG);
 8000784:	f44f 40c0 	mov.w	r0, #24576	@ 0x6000
 8000788:	f7ff ffc0 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_THREE_STATE_CONFIG);
 800078c:	f44f 40d0 	mov.w	r0, #26624	@ 0x6800
 8000790:	f7ff ffbc 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_GP_CNTRL | (0b1100<<6));   // buf precharge + ADC buffer enable
 8000794:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8000798:	f7ff ffb8 	bl	800070c <mio_send_word>

    // Power-down unused DACs (same trick you used)
    uint16_t ref_ctrl_bits = ~(DACS) & 0xFF;
 800079c:	4b20      	ldr	r3, [pc, #128]	@ (8000820 <mio_init+0xec>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	43db      	mvns	r3, r3
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	80bb      	strh	r3, [r7, #4]
    mio_send_word(AD5592R_CMD_POWER_DWN_REF_CNTRL | ref_ctrl_bits);
 80007a8:	88bb      	ldrh	r3, [r7, #4]
 80007aa:	f443 43b0 	orr.w	r3, r3, #22528	@ 0x5800
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ffab 	bl	800070c <mio_send_word>

    mio_send_word(AD5592R_CMD_CNTRL_REG_READBACK);
 80007b6:	f44f 5060 	mov.w	r0, #14336	@ 0x3800
 80007ba:	f7ff ffa7 	bl	800070c <mio_send_word>
    mio_send_word(AD5592R_CMD_ADC_READ | (1u<<9) | ADCS); // program ADC sequence
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <mio_init+0xe8>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	f443 5390 	orr.w	r3, r3, #4608	@ 0x1200
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff9f 	bl	800070c <mio_send_word>

	// Felder löschen
	for(uint8_t i=0; i < MIO_CHN_COUNT; i++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	e017      	b.n	8000804 <mio_init+0xd0>
	{
		adc_val_ptr[i] = 0;
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	4a13      	ldr	r2, [pc, #76]	@ (8000824 <mio_init+0xf0>)
 80007d8:	2100      	movs	r1, #0
 80007da:	54d1      	strb	r1, [r2, r3]

		for (uint8_t j=0; j < MIO_AVRG_LEN; j++)
 80007dc:	2300      	movs	r3, #0
 80007de:	71bb      	strb	r3, [r7, #6]
 80007e0:	e00a      	b.n	80007f8 <mio_init+0xc4>
		{
			adc_val[i][j] = 0;
 80007e2:	79fa      	ldrb	r2, [r7, #7]
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	4910      	ldr	r1, [pc, #64]	@ (8000828 <mio_init+0xf4>)
 80007e8:	0112      	lsls	r2, r2, #4
 80007ea:	4413      	add	r3, r2
 80007ec:	2200      	movs	r2, #0
 80007ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint8_t j=0; j < MIO_AVRG_LEN; j++)
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	3301      	adds	r3, #1
 80007f6:	71bb      	strb	r3, [r7, #6]
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	d9f1      	bls.n	80007e2 <mio_init+0xae>
	for(uint8_t i=0; i < MIO_CHN_COUNT; i++)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	3301      	adds	r3, #1
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b07      	cmp	r3, #7
 8000808:	d9e4      	bls.n	80007d4 <mio_init+0xa0>
		}
	}
    // init set
	mio_set_dac(MIO_DAC0, 0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f000 f8b3 	bl	8000978 <mio_set_dac>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000002 	.word	0x20000002
 8000820:	20000000 	.word	0x20000000
 8000824:	20000180 	.word	0x20000180
 8000828:	20000080 	.word	0x20000080

0800082c <mio_sero_set>:

void mio_sero_set(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <mio_sero_get>:

void mio_sero_get(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
	// Step-by-step reading of the analog signals. One signal per call (4 in total)

	uint8_t chn = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	80bb      	strh	r3, [r7, #4]

	HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800084a:	2023      	movs	r0, #35	@ 0x23
 800084c:	f004 fffb 	bl	8005846 <HAL_NVIC_DisableIRQ>
	spi_access_device(spi_mio);
 8000850:	2001      	movs	r0, #1
 8000852:	f002 f821 	bl	8002898 <spi_access_device>

	tmp = spiTransferWord(0); // Get result
 8000856:	2000      	movs	r0, #0
 8000858:	f002 f806 	bl	8002868 <spiTransferWord>
 800085c:	4603      	mov	r3, r0
 800085e:	80bb      	strh	r3, [r7, #4]

	spi_release_device(spi_mio);
 8000860:	2001      	movs	r0, #1
 8000862:	f002 f827 	bl	80028b4 <spi_release_device>
	HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000866:	2023      	movs	r0, #35	@ 0x23
 8000868:	f004 ffdf 	bl	800582a <HAL_NVIC_EnableIRQ>

	chn = ((tmp & 0x7000) >> 12);
 800086c:	88bb      	ldrh	r3, [r7, #4]
 800086e:	131b      	asrs	r3, r3, #12
 8000870:	b2db      	uxtb	r3, r3
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	71fb      	strb	r3, [r7, #7]
	tmp &= AD5592R_DAC_VALUE_MASK;
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800087e:	80bb      	strh	r3, [r7, #4]

	switch(chn)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	3b01      	subs	r3, #1
 8000884:	2b06      	cmp	r3, #6
 8000886:	d865      	bhi.n	8000954 <mio_sero_get+0x118>
 8000888:	a201      	add	r2, pc, #4	@ (adr r2, 8000890 <mio_sero_get+0x54>)
 800088a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088e:	bf00      	nop
 8000890:	080008ad 	.word	0x080008ad
 8000894:	08000955 	.word	0x08000955
 8000898:	080008d7 	.word	0x080008d7
 800089c:	08000955 	.word	0x08000955
 80008a0:	08000901 	.word	0x08000901
 80008a4:	08000955 	.word	0x08000955
 80008a8:	0800092b 	.word	0x0800092b
	{
		case MIO_ADC0:
			adc_val[MIO_ADC0][adc_val_ptr[MIO_ADC0]] = tmp;
 80008ac:	4b30      	ldr	r3, [pc, #192]	@ (8000970 <mio_sero_get+0x134>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	4930      	ldr	r1, [pc, #192]	@ (8000974 <mio_sero_get+0x138>)
 80008b2:	3310      	adds	r3, #16
 80008b4:	88ba      	ldrh	r2, [r7, #4]
 80008b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_val_ptr[MIO_ADC0]++;
 80008ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000970 <mio_sero_get+0x134>)
 80008bc:	785b      	ldrb	r3, [r3, #1]
 80008be:	3301      	adds	r3, #1
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000970 <mio_sero_get+0x134>)
 80008c4:	705a      	strb	r2, [r3, #1]
			if(adc_val_ptr[MIO_ADC0] > MIO_AVRG_LEN)
 80008c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <mio_sero_get+0x134>)
 80008c8:	785b      	ldrb	r3, [r3, #1]
 80008ca:	2b10      	cmp	r3, #16
 80008cc:	d944      	bls.n	8000958 <mio_sero_get+0x11c>
				adc_val_ptr[MIO_ADC0] = 0;
 80008ce:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <mio_sero_get+0x134>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	705a      	strb	r2, [r3, #1]
		break;
 80008d4:	e040      	b.n	8000958 <mio_sero_get+0x11c>

		case MIO_ADC1:
			adc_val[MIO_ADC1][adc_val_ptr[MIO_ADC1]] = tmp;
 80008d6:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <mio_sero_get+0x134>)
 80008d8:	78db      	ldrb	r3, [r3, #3]
 80008da:	4926      	ldr	r1, [pc, #152]	@ (8000974 <mio_sero_get+0x138>)
 80008dc:	3330      	adds	r3, #48	@ 0x30
 80008de:	88ba      	ldrh	r2, [r7, #4]
 80008e0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_val_ptr[MIO_ADC1]++;
 80008e4:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <mio_sero_get+0x134>)
 80008e6:	78db      	ldrb	r3, [r3, #3]
 80008e8:	3301      	adds	r3, #1
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <mio_sero_get+0x134>)
 80008ee:	70da      	strb	r2, [r3, #3]
			if(adc_val_ptr[MIO_ADC1] > MIO_AVRG_LEN)
 80008f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <mio_sero_get+0x134>)
 80008f2:	78db      	ldrb	r3, [r3, #3]
 80008f4:	2b10      	cmp	r3, #16
 80008f6:	d931      	bls.n	800095c <mio_sero_get+0x120>
				adc_val_ptr[MIO_ADC1] = 0;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <mio_sero_get+0x134>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	70da      	strb	r2, [r3, #3]
		break;
 80008fe:	e02d      	b.n	800095c <mio_sero_get+0x120>

		case MIO_ADC2:
			adc_val[MIO_ADC2][adc_val_ptr[MIO_ADC2]] = tmp;
 8000900:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <mio_sero_get+0x134>)
 8000902:	795b      	ldrb	r3, [r3, #5]
 8000904:	491b      	ldr	r1, [pc, #108]	@ (8000974 <mio_sero_get+0x138>)
 8000906:	3350      	adds	r3, #80	@ 0x50
 8000908:	88ba      	ldrh	r2, [r7, #4]
 800090a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_val_ptr[MIO_ADC2]++;
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <mio_sero_get+0x134>)
 8000910:	795b      	ldrb	r3, [r3, #5]
 8000912:	3301      	adds	r3, #1
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <mio_sero_get+0x134>)
 8000918:	715a      	strb	r2, [r3, #5]
			if(adc_val_ptr[MIO_ADC2] > MIO_AVRG_LEN)
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <mio_sero_get+0x134>)
 800091c:	795b      	ldrb	r3, [r3, #5]
 800091e:	2b10      	cmp	r3, #16
 8000920:	d91e      	bls.n	8000960 <mio_sero_get+0x124>
				adc_val_ptr[MIO_ADC2] = 0;
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <mio_sero_get+0x134>)
 8000924:	2200      	movs	r2, #0
 8000926:	715a      	strb	r2, [r3, #5]
		break;
 8000928:	e01a      	b.n	8000960 <mio_sero_get+0x124>

		case MIO_ADC3:
			adc_val[MIO_ADC3][adc_val_ptr[MIO_ADC3]] = tmp;
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <mio_sero_get+0x134>)
 800092c:	79db      	ldrb	r3, [r3, #7]
 800092e:	4911      	ldr	r1, [pc, #68]	@ (8000974 <mio_sero_get+0x138>)
 8000930:	3370      	adds	r3, #112	@ 0x70
 8000932:	88ba      	ldrh	r2, [r7, #4]
 8000934:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			adc_val_ptr[MIO_ADC3]++;
 8000938:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <mio_sero_get+0x134>)
 800093a:	79db      	ldrb	r3, [r3, #7]
 800093c:	3301      	adds	r3, #1
 800093e:	b2da      	uxtb	r2, r3
 8000940:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <mio_sero_get+0x134>)
 8000942:	71da      	strb	r2, [r3, #7]
			if(adc_val_ptr[MIO_ADC3] > MIO_AVRG_LEN)
 8000944:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <mio_sero_get+0x134>)
 8000946:	79db      	ldrb	r3, [r3, #7]
 8000948:	2b10      	cmp	r3, #16
 800094a:	d90b      	bls.n	8000964 <mio_sero_get+0x128>
				adc_val_ptr[MIO_ADC3] = 0;
 800094c:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <mio_sero_get+0x134>)
 800094e:	2200      	movs	r2, #0
 8000950:	71da      	strb	r2, [r3, #7]
		break;
 8000952:	e007      	b.n	8000964 <mio_sero_get+0x128>

		default:
		break;
 8000954:	bf00      	nop
 8000956:	e006      	b.n	8000966 <mio_sero_get+0x12a>
		break;
 8000958:	bf00      	nop
 800095a:	e004      	b.n	8000966 <mio_sero_get+0x12a>
		break;
 800095c:	bf00      	nop
 800095e:	e002      	b.n	8000966 <mio_sero_get+0x12a>
		break;
 8000960:	bf00      	nop
 8000962:	e000      	b.n	8000966 <mio_sero_get+0x12a>
		break;
 8000964:	bf00      	nop
	}

	// From here, process all 10ms values further and provide query functions
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000180 	.word	0x20000180
 8000974:	20000080 	.word	0x20000080

08000978 <mio_set_dac>:

void mio_set_dac(uint8_t channel, uint16_t val) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	460a      	mov	r2, r1
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	4613      	mov	r3, r2
 8000986:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	81fb      	strh	r3, [r7, #14]

	tmp = (channel & 0x7);
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	b29b      	uxth	r3, r3
 8000990:	f003 0307 	and.w	r3, r3, #7
 8000994:	81fb      	strh	r3, [r7, #14]
	tmp <<= 12;
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	031b      	lsls	r3, r3, #12
 800099a:	81fb      	strh	r3, [r7, #14]
	if (val > AD5592R_DAC_VALUE_MASK)
 800099c:	88bb      	ldrh	r3, [r7, #4]
 800099e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80009a2:	d304      	bcc.n	80009ae <mio_set_dac+0x36>
		tmp += AD5592R_DAC_VALUE_MASK;
 80009a4:	89fb      	ldrh	r3, [r7, #14]
 80009a6:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80009aa:	81fb      	strh	r3, [r7, #14]
 80009ac:	e003      	b.n	80009b6 <mio_set_dac+0x3e>
	else
		tmp += val;
 80009ae:	89fa      	ldrh	r2, [r7, #14]
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	4413      	add	r3, r2
 80009b4:	81fb      	strh	r3, [r7, #14]
	//tmp += (val & 0x0FFF);
	tmp |= (AD5592R_DAC_WRITE_MASK);
 80009b6:	89fb      	ldrh	r3, [r7, #14]
 80009b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80009bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80009c0:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_DisableIRQ(SPI1_IRQn); 	// atomic restorate
 80009c2:	2023      	movs	r0, #35	@ 0x23
 80009c4:	f004 ff3f 	bl	8005846 <HAL_NVIC_DisableIRQ>
	mio_send_word(tmp);					// transfer the word
 80009c8:	89fb      	ldrh	r3, [r7, #14]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe9e 	bl	800070c <mio_send_word>
	HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009d0:	2023      	movs	r0, #35	@ 0x23
 80009d2:	f004 ff2a 	bl	800582a <HAL_NVIC_EnableIRQ>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <MX_ADC5_Init>:

ADC_HandleTypeDef hadc5;

/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e6:	463b      	mov	r3, r7
 80009e8:	2220      	movs	r2, #32
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f009 fa45 	bl	8009e7c <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80009f2:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 80009f4:	4a2b      	ldr	r2, [pc, #172]	@ (8000aa4 <MX_ADC5_Init+0xc4>)
 80009f6:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009f8:	4b29      	ldr	r3, [pc, #164]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 80009fa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009fe:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000a00:	4b27      	ldr	r3, [pc, #156]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a06:	4b26      	ldr	r3, [pc, #152]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000a0c:	4b24      	ldr	r3, [pc, #144]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a12:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000a44:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000a5a:	4811      	ldr	r0, [pc, #68]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a5c:	f003 ffd0 	bl	8004a00 <HAL_ADC_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000a66:	f000 fc7c 	bl	8001362 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_ADC5_Init+0xc8>)
 8000a6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a6e:	2306      	movs	r3, #6
 8000a70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a76:	237f      	movs	r3, #127	@ 0x7f
 8000a78:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <MX_ADC5_Init+0xc0>)
 8000a88:	f004 f976 	bl	8004d78 <HAL_ADC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000a92:	f000 fc66 	bl	8001362 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3720      	adds	r7, #32
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000188 	.word	0x20000188
 8000aa4:	50000600 	.word	0x50000600
 8000aa8:	1d500080 	.word	0x1d500080

08000aac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b09e      	sub	sp, #120	@ 0x78
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	2254      	movs	r2, #84	@ 0x54
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f009 f9d5 	bl	8009e7c <memset>
  if(adcHandle->Instance==ADC5)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b50 <HAL_ADC_MspInit+0xa4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d134      	bne.n	8000b46 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000adc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ae0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000ae2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000ae6:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4618      	mov	r0, r3
 8000aee:	f005 ff55 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000af8:	f000 fc33 	bl	8001362 <Error_Handler>
    }

    /* ADC5 clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_ADC_MspInit+0xa8>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b00:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <HAL_ADC_MspInit+0xa8>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_ADC_MspInit+0xa8>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b14:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <HAL_ADC_MspInit+0xa8>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b18:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <HAL_ADC_MspInit+0xa8>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_ADC_MspInit+0xa8>)
 8000b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
    PD10     ------> ADC5_IN7
    PD11     ------> ADC5_IN8
    PD12     ------> ADC5_IN9
    PD13     ------> ADC5_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000b2c:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000b30:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b32:	2303      	movs	r3, #3
 8000b34:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <HAL_ADC_MspInit+0xac>)
 8000b42:	f004 fe9b 	bl	800587c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000b46:	bf00      	nop
 8000b48:	3778      	adds	r7, #120	@ 0x78
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	50000600 	.word	0x50000600
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48000c00 	.word	0x48000c00

08000b5c <delay_us>:
#include "func.h"
#include "timer0.h"

// Verz�gerung um n * 1us
void delay_us(uint16_t n)
{	uint16_t m = n * 12; // Calibrated for 160 MHz, 5 us.
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	80fb      	strh	r3, [r7, #6]
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	0052      	lsls	r2, r2, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	81fb      	strh	r3, [r7, #14]
	for(volatile uint32_t i=0; i<m; i++);				// volatile, damit nicht vom Compiler wegoptimiert
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	e002      	b.n	8000b7e <delay_us+0x22>
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	89fa      	ldrh	r2, [r7, #14]
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d8f8      	bhi.n	8000b78 <delay_us+0x1c>
}
 8000b86:	bf00      	nop
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <delay_ms>:

//Verz�gerung um n * 1ms
void delay_ms(uint16_t n)
{	HAL_Delay(n);
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 fd35 	bl	8004610 <HAL_Delay>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <clamp16>:
		return 1;
	else
		return 0;
}

uint16_t clamp16(int32_t v) {
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
    if (v < 0)      return 0u;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	da01      	bge.n	8000bc0 <clamp16+0x12>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e008      	b.n	8000bd2 <clamp16+0x24>
    if (v > 65535)  return 65535u;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bc6:	db02      	blt.n	8000bce <clamp16+0x20>
 8000bc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bcc:	e001      	b.n	8000bd2 <clamp16+0x24>
    return (uint16_t)v;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	b29b      	uxth	r3, r3
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <gb_sero_get>:

//----- GASBOX CONTROLLER -------------------------------------------------

// Gasbox (UART4, binary)
void gb_sero_get(void)
{
 8000be0:	b598      	push	{r3, r4, r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    nzeichen = 0;
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <gb_sero_get+0x54>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
    while ((rb_rx_used(&uart4_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8000bea:	e00e      	b.n	8000c0a <gb_sero_get+0x2a>
        msg[nzeichen++] = (uint8_t)uartRB_Getc(&uart4_rb);
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <gb_sero_get+0x54>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	b2d1      	uxtb	r1, r2
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <gb_sero_get+0x54>)
 8000bf8:	7011      	strb	r1, [r2, #0]
 8000bfa:	461c      	mov	r4, r3
 8000bfc:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <gb_sero_get+0x58>)
 8000bfe:	f002 fc7f 	bl	8003500 <uartRB_Getc>
 8000c02:	4603      	mov	r3, r0
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <gb_sero_get+0x5c>)
 8000c08:	551a      	strb	r2, [r3, r4]
    while ((rb_rx_used(&uart4_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8000c0a:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <gb_sero_get+0x58>)
 8000c0c:	f002 fbb7 	bl	800337e <rb_rx_used>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	dd04      	ble.n	8000c20 <gb_sero_get+0x40>
 8000c16:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <gb_sero_get+0x54>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b0d      	cmp	r3, #13
 8000c1e:	d9e5      	bls.n	8000bec <gb_sero_get+0xc>
    }
    if (nzeichen) parse_binary_gasbox();
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <gb_sero_get+0x54>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <gb_sero_get+0x4e>
 8000c2a:	f000 f809 	bl	8000c40 <parse_binary_gasbox>
}
 8000c2e:	bf00      	nop
 8000c30:	bd98      	pop	{r3, r4, r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000203 	.word	0x20000203
 8000c38:	20000ab4 	.word	0x20000ab4
 8000c3c:	200001f4 	.word	0x200001f4

08000c40 <parse_binary_gasbox>:


// ---- parser  ----
static void parse_binary_gasbox(void) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
	uint8_t data;
	uint8_t ptr = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]

	do {
		switch (state) {
 8000c4a:	4b7a      	ldr	r3, [pc, #488]	@ (8000e34 <parse_binary_gasbox+0x1f4>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	f000 80a8 	beq.w	8000da4 <parse_binary_gasbox+0x164>
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	f300 80e1 	bgt.w	8000e1c <parse_binary_gasbox+0x1dc>
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d030      	beq.n	8000cc0 <parse_binary_gasbox+0x80>
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	f000 8098 	beq.w	8000d94 <parse_binary_gasbox+0x154>
 8000c64:	e0da      	b.n	8000e1c <parse_binary_gasbox+0x1dc>
		case RMT_WAIT_FOR_PAKET_START: {
			// scan for DLE 'S'
			while (ptr < nzeichen) {
				data = msg[ptr++];
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	1c5a      	adds	r2, r3, #1
 8000c6a:	73fa      	strb	r2, [r7, #15]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b72      	ldr	r3, [pc, #456]	@ (8000e38 <parse_binary_gasbox+0x1f8>)
 8000c70:	5c9b      	ldrb	r3, [r3, r2]
 8000c72:	717b      	strb	r3, [r7, #5]
				if (dleFlag) {
 8000c74:	4b71      	ldr	r3, [pc, #452]	@ (8000e3c <parse_binary_gasbox+0x1fc>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d01b      	beq.n	8000cb4 <parse_binary_gasbox+0x74>
					// second control char after DLE
					if (data == GB_DLE) {
 8000c7c:	797b      	ldrb	r3, [r7, #5]
 8000c7e:	2b3d      	cmp	r3, #61	@ 0x3d
 8000c80:	d103      	bne.n	8000c8a <parse_binary_gasbox+0x4a>
						// interpret as literal DLE
						dleFlag = 0;
 8000c82:	4b6e      	ldr	r3, [pc, #440]	@ (8000e3c <parse_binary_gasbox+0x1fc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	e01a      	b.n	8000cc0 <parse_binary_gasbox+0x80>
						// (no payload yet in WAIT state)
					} else if (data == GB_SOT) {
 8000c8a:	797b      	ldrb	r3, [r7, #5]
 8000c8c:	2b53      	cmp	r3, #83	@ 0x53
 8000c8e:	d10d      	bne.n	8000cac <parse_binary_gasbox+0x6c>
						// start of frame
						lengthRx = 0;
 8000c90:	4b6b      	ldr	r3, [pc, #428]	@ (8000e40 <parse_binary_gasbox+0x200>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
						checksum = 0;
 8000c96:	4b6b      	ldr	r3, [pc, #428]	@ (8000e44 <parse_binary_gasbox+0x204>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000c9c:	4b67      	ldr	r3, [pc, #412]	@ (8000e3c <parse_binary_gasbox+0x1fc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
						state = RMT_READ_PAKET;
 8000ca2:	4b64      	ldr	r3, [pc, #400]	@ (8000e34 <parse_binary_gasbox+0x1f4>)
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	701a      	strb	r2, [r3, #0]
						break;
 8000ca8:	bf00      	nop
					if (data == GB_DLE)
						dleFlag = 1;
				}
			}
		}
			break;
 8000caa:	e0b7      	b.n	8000e1c <parse_binary_gasbox+0x1dc>
						dleFlag = 0;
 8000cac:	4b63      	ldr	r3, [pc, #396]	@ (8000e3c <parse_binary_gasbox+0x1fc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	e005      	b.n	8000cc0 <parse_binary_gasbox+0x80>
					if (data == GB_DLE)
 8000cb4:	797b      	ldrb	r3, [r7, #5]
 8000cb6:	2b3d      	cmp	r3, #61	@ 0x3d
 8000cb8:	d102      	bne.n	8000cc0 <parse_binary_gasbox+0x80>
						dleFlag = 1;
 8000cba:	4b60      	ldr	r3, [pc, #384]	@ (8000e3c <parse_binary_gasbox+0x1fc>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
			while (ptr < nzeichen) {
 8000cc0:	4b61      	ldr	r3, [pc, #388]	@ (8000e48 <parse_binary_gasbox+0x208>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	7bfa      	ldrb	r2, [r7, #15]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d3cc      	bcc.n	8000c66 <parse_binary_gasbox+0x26>
			break;
 8000ccc:	e0a6      	b.n	8000e1c <parse_binary_gasbox+0x1dc>

		case RMT_READ_PAKET: {
			while (ptr < nzeichen) {
				data = msg[ptr++];
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	73fa      	strb	r2, [r7, #15]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b58      	ldr	r3, [pc, #352]	@ (8000e38 <parse_binary_gasbox+0x1f8>)
 8000cd8:	5c9b      	ldrb	r3, [r3, r2]
 8000cda:	717b      	strb	r3, [r7, #5]

				// avoid runaway frames
				if (lengthRx > RMT_MAX_PAKET_LENGTH) {
 8000cdc:	4b58      	ldr	r3, [pc, #352]	@ (8000e40 <parse_binary_gasbox+0x200>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b0e      	cmp	r3, #14
 8000ce2:	d906      	bls.n	8000cf2 <parse_binary_gasbox+0xb2>
					dleFlag = 0;
 8000ce4:	4b55      	ldr	r3, [pc, #340]	@ (8000e3c <parse_binary_gasbox+0x1fc>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
					state = RMT_WAIT_FOR_PAKET_START;
 8000cea:	4b52      	ldr	r3, [pc, #328]	@ (8000e34 <parse_binary_gasbox+0x1f4>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
					break;
 8000cf0:	e057      	b.n	8000da2 <parse_binary_gasbox+0x162>
				}

				if (dleFlag) {
 8000cf2:	4b52      	ldr	r3, [pc, #328]	@ (8000e3c <parse_binary_gasbox+0x1fc>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d034      	beq.n	8000d64 <parse_binary_gasbox+0x124>
					if (data == GB_DLE) {
 8000cfa:	797b      	ldrb	r3, [r7, #5]
 8000cfc:	2b3d      	cmp	r3, #61	@ 0x3d
 8000cfe:	d113      	bne.n	8000d28 <parse_binary_gasbox+0xe8>
						// stuffed DLE as data
						dleFlag = 0;
 8000d00:	4b4e      	ldr	r3, [pc, #312]	@ (8000e3c <parse_binary_gasbox+0x1fc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
						bufferRx[lengthRx++] = GB_DLE;
 8000d06:	4b4e      	ldr	r3, [pc, #312]	@ (8000e40 <parse_binary_gasbox+0x200>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	b2d1      	uxtb	r1, r2
 8000d0e:	4a4c      	ldr	r2, [pc, #304]	@ (8000e40 <parse_binary_gasbox+0x200>)
 8000d10:	7011      	strb	r1, [r2, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b4d      	ldr	r3, [pc, #308]	@ (8000e4c <parse_binary_gasbox+0x20c>)
 8000d16:	213d      	movs	r1, #61	@ 0x3d
 8000d18:	5499      	strb	r1, [r3, r2]
						checksum += GB_DLE;
 8000d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e44 <parse_binary_gasbox+0x204>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	333d      	adds	r3, #61	@ 0x3d
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b48      	ldr	r3, [pc, #288]	@ (8000e44 <parse_binary_gasbox+0x204>)
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e035      	b.n	8000d94 <parse_binary_gasbox+0x154>
					} else if (data == GB_SOT) {
 8000d28:	797b      	ldrb	r3, [r7, #5]
 8000d2a:	2b53      	cmp	r3, #83	@ 0x53
 8000d2c:	d10c      	bne.n	8000d48 <parse_binary_gasbox+0x108>
						// unexpected new start → restart frame
						lengthRx = 0;
 8000d2e:	4b44      	ldr	r3, [pc, #272]	@ (8000e40 <parse_binary_gasbox+0x200>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
						checksum = 0;
 8000d34:	4b43      	ldr	r3, [pc, #268]	@ (8000e44 <parse_binary_gasbox+0x204>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000d3a:	4b40      	ldr	r3, [pc, #256]	@ (8000e3c <parse_binary_gasbox+0x1fc>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
						state = RMT_READ_PAKET;
 8000d40:	4b3c      	ldr	r3, [pc, #240]	@ (8000e34 <parse_binary_gasbox+0x1f4>)
 8000d42:	2202      	movs	r2, #2
 8000d44:	701a      	strb	r2, [r3, #0]
						break;
 8000d46:	e02c      	b.n	8000da2 <parse_binary_gasbox+0x162>
					} else if (data == GB_EOT) {
 8000d48:	797b      	ldrb	r3, [r7, #5]
 8000d4a:	2b45      	cmp	r3, #69	@ 0x45
 8000d4c:	d106      	bne.n	8000d5c <parse_binary_gasbox+0x11c>
						// proper trailer -> parse
						state = RMT_PARSE_PAKET;
 8000d4e:	4b39      	ldr	r3, [pc, #228]	@ (8000e34 <parse_binary_gasbox+0x1f4>)
 8000d50:	2203      	movs	r2, #3
 8000d52:	701a      	strb	r2, [r3, #0]
						dleFlag = 0;
 8000d54:	4b39      	ldr	r3, [pc, #228]	@ (8000e3c <parse_binary_gasbox+0x1fc>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
						break;
 8000d5a:	e022      	b.n	8000da2 <parse_binary_gasbox+0x162>
					} else {
						dleFlag = 0; // unknown after DLE -> ignore
 8000d5c:	4b37      	ldr	r3, [pc, #220]	@ (8000e3c <parse_binary_gasbox+0x1fc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e017      	b.n	8000d94 <parse_binary_gasbox+0x154>
					}
				} else {
					if (data == GB_DLE) {
 8000d64:	797b      	ldrb	r3, [r7, #5]
 8000d66:	2b3d      	cmp	r3, #61	@ 0x3d
 8000d68:	d103      	bne.n	8000d72 <parse_binary_gasbox+0x132>
						dleFlag = 1;            // next is control
 8000d6a:	4b34      	ldr	r3, [pc, #208]	@ (8000e3c <parse_binary_gasbox+0x1fc>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
 8000d70:	e010      	b.n	8000d94 <parse_binary_gasbox+0x154>
					} else {
						bufferRx[lengthRx++] = data;
 8000d72:	4b33      	ldr	r3, [pc, #204]	@ (8000e40 <parse_binary_gasbox+0x200>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	b2d1      	uxtb	r1, r2
 8000d7a:	4a31      	ldr	r2, [pc, #196]	@ (8000e40 <parse_binary_gasbox+0x200>)
 8000d7c:	7011      	strb	r1, [r2, #0]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4a32      	ldr	r2, [pc, #200]	@ (8000e4c <parse_binary_gasbox+0x20c>)
 8000d82:	797b      	ldrb	r3, [r7, #5]
 8000d84:	5453      	strb	r3, [r2, r1]
						checksum += data;
 8000d86:	4b2f      	ldr	r3, [pc, #188]	@ (8000e44 <parse_binary_gasbox+0x204>)
 8000d88:	781a      	ldrb	r2, [r3, #0]
 8000d8a:	797b      	ldrb	r3, [r7, #5]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b2c      	ldr	r3, [pc, #176]	@ (8000e44 <parse_binary_gasbox+0x204>)
 8000d92:	701a      	strb	r2, [r3, #0]
			while (ptr < nzeichen) {
 8000d94:	4b2c      	ldr	r3, [pc, #176]	@ (8000e48 <parse_binary_gasbox+0x208>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	7bfa      	ldrb	r2, [r7, #15]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d396      	bcc.n	8000cce <parse_binary_gasbox+0x8e>
					}
				}
			}
		}
			break;
 8000da0:	e03c      	b.n	8000e1c <parse_binary_gasbox+0x1dc>
 8000da2:	e03b      	b.n	8000e1c <parse_binary_gasbox+0x1dc>

		case RMT_PARSE_PAKET: {
		    // Expect 4 payload bytes + 1 checksum (net length 5)
		    if (lengthRx == 5) {
 8000da4:	4b26      	ldr	r3, [pc, #152]	@ (8000e40 <parse_binary_gasbox+0x200>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b05      	cmp	r3, #5
 8000daa:	d12a      	bne.n	8000e02 <parse_binary_gasbox+0x1c2>
		        uint8_t cmd    = bufferRx[0];
 8000dac:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <parse_binary_gasbox+0x20c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	73bb      	strb	r3, [r7, #14]
		        uint8_t status = bufferRx[1];
 8000db2:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <parse_binary_gasbox+0x20c>)
 8000db4:	785b      	ldrb	r3, [r3, #1]
 8000db6:	737b      	strb	r3, [r7, #13]
		        uint8_t pH     = bufferRx[2];
 8000db8:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <parse_binary_gasbox+0x20c>)
 8000dba:	789b      	ldrb	r3, [r3, #2]
 8000dbc:	733b      	strb	r3, [r7, #12]
		        uint8_t pL     = bufferRx[3];
 8000dbe:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <parse_binary_gasbox+0x20c>)
 8000dc0:	78db      	ldrb	r3, [r3, #3]
 8000dc2:	72fb      	strb	r3, [r7, #11]
		        uint8_t cks    = bufferRx[4];
 8000dc4:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <parse_binary_gasbox+0x20c>)
 8000dc6:	791b      	ldrb	r3, [r3, #4]
 8000dc8:	72bb      	strb	r3, [r7, #10]

		        // checksum over the 4 payload bytes
		        uint8_t sum = (uint8_t)(cmd + status + pH + pL);
 8000dca:	7bba      	ldrb	r2, [r7, #14]
 8000dcc:	7b7b      	ldrb	r3, [r7, #13]
 8000dce:	4413      	add	r3, r2
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	7b3b      	ldrb	r3, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	7afb      	ldrb	r3, [r7, #11]
 8000dda:	4413      	add	r3, r2
 8000ddc:	727b      	strb	r3, [r7, #9]

		        if (sum == cks) {
 8000dde:	7a7a      	ldrb	r2, [r7, #9]
 8000de0:	7abb      	ldrb	r3, [r7, #10]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d10d      	bne.n	8000e02 <parse_binary_gasbox+0x1c2>
		            uint16_t val = ((uint16_t)pH << 8) | pL;
 8000de6:	7b3b      	ldrb	r3, [r7, #12]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	7afb      	ldrb	r3, [r7, #11]
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	80fb      	strh	r3, [r7, #6]
		            // Publish to mailbox: if someone is waiting for this cmd, wake them.
		            gb_on_frame(cmd, status, val);
 8000df6:	88fa      	ldrh	r2, [r7, #6]
 8000df8:	7b79      	ldrb	r1, [r7, #13]
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f8d3 	bl	8000fa8 <gb_on_frame>
		        }
		        // else: bad checksum -> drop silently (or raise an error flag if you want)
		    }
		    // reset for next frame
		    state     = RMT_WAIT_FOR_PAKET_START;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <parse_binary_gasbox+0x1f4>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
		    lengthRx  = 0;
 8000e08:	4b0d      	ldr	r3, [pc, #52]	@ (8000e40 <parse_binary_gasbox+0x200>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
		    checksum  = 0;
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <parse_binary_gasbox+0x204>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
		    dleFlag   = 0;
 8000e14:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <parse_binary_gasbox+0x1fc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
		} break;
 8000e1a:	bf00      	nop
		}
	} while (ptr < nzeichen);
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <parse_binary_gasbox+0x208>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	7bfa      	ldrb	r2, [r7, #15]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f4ff af10 	bcc.w	8000c4a <parse_binary_gasbox+0xa>
}
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000004 	.word	0x20000004
 8000e38:	200001f4 	.word	0x200001f4
 8000e3c:	20000214 	.word	0x20000214
 8000e40:	20000213 	.word	0x20000213
 8000e44:	20000215 	.word	0x20000215
 8000e48:	20000203 	.word	0x20000203
 8000e4c:	20000204 	.word	0x20000204

08000e50 <gb_sum8>:


static inline uint8_t gb_sum8(const uint8_t *p, int n){
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
    uint32_t s = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<n; ++i) s += p[i];
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	e00a      	b.n	8000e7a <gb_sum8+0x2a>
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4413      	add	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3301      	adds	r3, #1
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dbf0      	blt.n	8000e64 <gb_sum8+0x14>
    return (uint8_t)s;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	b2db      	uxtb	r3, r3
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <gb_push_escaped>:

static inline void gb_push_escaped(uint8_t **wp, uint8_t b){
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	70fb      	strb	r3, [r7, #3]
    *(*wp)++ = b;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	1c59      	adds	r1, r3, #1
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	6011      	str	r1, [r2, #0]
 8000ea8:	78fa      	ldrb	r2, [r7, #3]
 8000eaa:	701a      	strb	r2, [r3, #0]
    if (b == GB_DLE) *(*wp)++ = b;  // double any DLE in-band
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	2b3d      	cmp	r3, #61	@ 0x3d
 8000eb0:	d106      	bne.n	8000ec0 <gb_push_escaped+0x2e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	1c59      	adds	r1, r3, #1
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6011      	str	r1, [r2, #0]
 8000ebc:	78fa      	ldrb	r2, [r7, #3]
 8000ebe:	701a      	strb	r2, [r3, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <gasbox_send>:
 * Build + queue one framed command to the gasbox on UART4.
 * payload = [ cmd, 0x00, param_H, param_L ] ; cks = sum(payload)
 * Returns 1 if queued, 0 if TX ring had no room.
 */
uint8_t gasbox_send(uint8_t cmd, uint16_t param)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	@ 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	80bb      	strh	r3, [r7, #4]
    uint8_t payload[4] = {
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	773b      	strb	r3, [r7, #28]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	777b      	strb	r3, [r7, #29]
        cmd,
        0x00,                               // reserved/status=0 in requests
        (uint8_t)(param >> 8),
 8000ee4:	88bb      	ldrh	r3, [r7, #4]
 8000ee6:	0a1b      	lsrs	r3, r3, #8
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	b2db      	uxtb	r3, r3
    uint8_t payload[4] = {
 8000eec:	77bb      	strb	r3, [r7, #30]
        (uint8_t)(param & 0xFF)
 8000eee:	88bb      	ldrh	r3, [r7, #4]
 8000ef0:	b2db      	uxtb	r3, r3
    uint8_t payload[4] = {
 8000ef2:	77fb      	strb	r3, [r7, #31]
    };
    uint8_t cks = gb_sum8(payload, 4);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	2104      	movs	r1, #4
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ffa8 	bl	8000e50 <gb_sum8>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    // Worst case: 2 (DLE,S) + each of 5 bytes doubled + 2 (DLE,E) = 14
    uint8_t frame[16], *w = frame;
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	60bb      	str	r3, [r7, #8]

    *w++ = GB_DLE; *w++ = GB_SOT;
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	60ba      	str	r2, [r7, #8]
 8000f12:	223d      	movs	r2, #61	@ 0x3d
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	60ba      	str	r2, [r7, #8]
 8000f1c:	2253      	movs	r2, #83	@ 0x53
 8000f1e:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<4; ++i) gb_push_escaped(&w, payload[i]);
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f24:	e00d      	b.n	8000f42 <gasbox_send+0x76>
 8000f26:	f107 021c 	add.w	r2, r7, #28
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2c:	4413      	add	r3, r2
 8000f2e:	781a      	ldrb	r2, [r3, #0]
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ffab 	bl	8000e92 <gb_push_escaped>
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3e:	3301      	adds	r3, #1
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	ddee      	ble.n	8000f26 <gasbox_send+0x5a>
    gb_push_escaped(&w, cks);
 8000f48:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff9d 	bl	8000e92 <gb_push_escaped>
    *w++ = GB_DLE; *w++ = GB_EOT;
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	60ba      	str	r2, [r7, #8]
 8000f5e:	223d      	movs	r2, #61	@ 0x3d
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	60ba      	str	r2, [r7, #8]
 8000f68:	2245      	movs	r2, #69	@ 0x45
 8000f6a:	701a      	strb	r2, [r3, #0]

    uint8_t len = (uint8_t)(w - frame);
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    // queue to UART4 ring
    if (!uartRB_Put(&uart4_rb, (char*)frame, len)) return 0;
 8000f78:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	4808      	ldr	r0, [pc, #32]	@ (8000fa4 <gasbox_send+0xd8>)
 8000f84:	f002 fa68 	bl	8003458 <uartRB_Put>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <gasbox_send+0xc6>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e003      	b.n	8000f9a <gasbox_send+0xce>
    uartRB_KickTx(&uart4_rb);
 8000f92:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <gasbox_send+0xd8>)
 8000f94:	f002 fa1a 	bl	80033cc <uartRB_KickTx>
    return 1;
 8000f98:	2301      	movs	r3, #1
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3728      	adds	r7, #40	@ 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000ab4 	.word	0x20000ab4

08000fa8 <gb_on_frame>:
    volatile uint8_t have;
    GbReply          r;
} gb_sync = {0};

void gb_on_frame(uint8_t cmd, uint8_t status, uint16_t value)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	71bb      	strb	r3, [r7, #6]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	80bb      	strh	r3, [r7, #4]
    // deliver to a waiting xfer if it matches the command we sent
    if (gb_sync.waiting && gb_sync.expect_cmd == cmd) {
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <gb_on_frame+0x54>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d015      	beq.n	8000ff0 <gb_on_frame+0x48>
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <gb_on_frame+0x54>)
 8000fc6:	785b      	ldrb	r3, [r3, #1]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	79fa      	ldrb	r2, [r7, #7]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d10f      	bne.n	8000ff0 <gb_on_frame+0x48>
        gb_sync.r.cmd = cmd; gb_sync.r.status = status; gb_sync.r.value = value;
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <gb_on_frame+0x54>)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	7113      	strb	r3, [r2, #4]
 8000fd6:	4a09      	ldr	r2, [pc, #36]	@ (8000ffc <gb_on_frame+0x54>)
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	7153      	strb	r3, [r2, #5]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	@ (8000ffc <gb_on_frame+0x54>)
 8000fde:	88bb      	ldrh	r3, [r7, #4]
 8000fe0:	80d3      	strh	r3, [r2, #6]
        gb_sync.have = 1;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <gb_on_frame+0x54>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	709a      	strb	r2, [r3, #2]
        gb_sync.waiting = 0;
 8000fe8:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <gb_on_frame+0x54>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
        return;
 8000fee:	bf00      	nop
    }
    // else: unsolicited → raise events / z_set_error(...) as you like
}
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000218 	.word	0x20000218

08001000 <gasbox_xfer>:
/**
 * Send one request and wait for its echo parsed by the always-on gb_sero_get().
 * Returns 1 on success (out filled), 0 on timeout or queue failure.
 */
uint8_t gasbox_xfer(uint8_t cmd, uint16_t param, GbReply *out, uint32_t timeout_ms)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60ba      	str	r2, [r7, #8]
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	460b      	mov	r3, r1
 8001010:	81bb      	strh	r3, [r7, #12]
    // only one outstanding transaction
    if (gb_sync.waiting) return 0;
 8001012:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <gasbox_xfer+0x90>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <gasbox_xfer+0x20>
 800101c:	2300      	movs	r3, #0
 800101e:	e032      	b.n	8001086 <gasbox_xfer+0x86>

    gb_sync.expect_cmd = cmd;
 8001020:	4a1b      	ldr	r2, [pc, #108]	@ (8001090 <gasbox_xfer+0x90>)
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	7053      	strb	r3, [r2, #1]
    gb_sync.have = 0;
 8001026:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <gasbox_xfer+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	709a      	strb	r2, [r3, #2]
    gb_sync.waiting = 1;
 800102c:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <gasbox_xfer+0x90>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]

    if (!gasbox_send(cmd, param)) { gb_sync.waiting = 0; return 0; }
 8001032:	89ba      	ldrh	r2, [r7, #12]
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff47 	bl	8000ecc <gasbox_send>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d104      	bne.n	800104e <gasbox_xfer+0x4e>
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <gasbox_xfer+0x90>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	2300      	movs	r3, #0
 800104c:	e01b      	b.n	8001086 <gasbox_xfer+0x86>

    uint32_t t0 = HAL_GetTick();
 800104e:	f003 fad3 	bl	80045f8 <HAL_GetTick>
 8001052:	6178      	str	r0, [r7, #20]
    while (!gb_sync.have) {
 8001054:	e00c      	b.n	8001070 <gasbox_xfer+0x70>
        if ((HAL_GetTick() - t0) > timeout_ms) {
 8001056:	f003 facf 	bl	80045f8 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	d204      	bcs.n	8001070 <gasbox_xfer+0x70>
            gb_sync.waiting = 0;
 8001066:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <gasbox_xfer+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
            return 0;
 800106c:	2300      	movs	r3, #0
 800106e:	e00a      	b.n	8001086 <gasbox_xfer+0x86>
    while (!gb_sync.have) {
 8001070:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <gasbox_xfer+0x90>)
 8001072:	789b      	ldrb	r3, [r3, #2]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0ed      	beq.n	8001056 <gasbox_xfer+0x56>
        }
        // do NOT call gb_sero_get() here; main loop owns it
    }
    *out = gb_sync.r;
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <gasbox_xfer+0x90>)
 800107e:	3304      	adds	r3, #4
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	6010      	str	r0, [r2, #0]
    return 1;
 8001084:	2301      	movs	r3, #1
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000218 	.word	0x20000218

08001094 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	@ 0x30
 8001098:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010aa:	4b64      	ldr	r3, [pc, #400]	@ (800123c <MX_GPIO_Init+0x1a8>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	4a63      	ldr	r2, [pc, #396]	@ (800123c <MX_GPIO_Init+0x1a8>)
 80010b0:	f043 0310 	orr.w	r3, r3, #16
 80010b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b6:	4b61      	ldr	r3, [pc, #388]	@ (800123c <MX_GPIO_Init+0x1a8>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010c2:	4b5e      	ldr	r3, [pc, #376]	@ (800123c <MX_GPIO_Init+0x1a8>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a5d      	ldr	r2, [pc, #372]	@ (800123c <MX_GPIO_Init+0x1a8>)
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b5b      	ldr	r3, [pc, #364]	@ (800123c <MX_GPIO_Init+0x1a8>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0320 	and.w	r3, r3, #32
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	4b58      	ldr	r3, [pc, #352]	@ (800123c <MX_GPIO_Init+0x1a8>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	4a57      	ldr	r2, [pc, #348]	@ (800123c <MX_GPIO_Init+0x1a8>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e6:	4b55      	ldr	r3, [pc, #340]	@ (800123c <MX_GPIO_Init+0x1a8>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b52      	ldr	r3, [pc, #328]	@ (800123c <MX_GPIO_Init+0x1a8>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	4a51      	ldr	r2, [pc, #324]	@ (800123c <MX_GPIO_Init+0x1a8>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fe:	4b4f      	ldr	r3, [pc, #316]	@ (800123c <MX_GPIO_Init+0x1a8>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b4c      	ldr	r3, [pc, #304]	@ (800123c <MX_GPIO_Init+0x1a8>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	4a4b      	ldr	r2, [pc, #300]	@ (800123c <MX_GPIO_Init+0x1a8>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001116:	4b49      	ldr	r3, [pc, #292]	@ (800123c <MX_GPIO_Init+0x1a8>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	4b46      	ldr	r3, [pc, #280]	@ (800123c <MX_GPIO_Init+0x1a8>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	4a45      	ldr	r2, [pc, #276]	@ (800123c <MX_GPIO_Init+0x1a8>)
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112e:	4b43      	ldr	r3, [pc, #268]	@ (800123c <MX_GPIO_Init+0x1a8>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, UC_PUMP_START_Pin|UC_PUMP_STOP_Pin|UC_AUX_RESET_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 8001140:	483f      	ldr	r0, [pc, #252]	@ (8001240 <MX_GPIO_Init+0x1ac>)
 8001142:	f004 fe17 	bl	8005d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UC_CS_AUX1_GPIO_Port, UC_CS_AUX1_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800114c:	483d      	ldr	r0, [pc, #244]	@ (8001244 <MX_GPIO_Init+0x1b0>)
 800114e:	f004 fe11 	bl	8005d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UC_CS_AUX0_GPIO_Port, UC_CS_AUX0_Pin, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2110      	movs	r1, #16
 8001156:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800115a:	f004 fe0b 	bl	8005d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UC_CS_SPS_OUT_Pin|UC_CS_SPS_IN_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2106      	movs	r1, #6
 8001162:	4839      	ldr	r0, [pc, #228]	@ (8001248 <MX_GPIO_Init+0x1b4>)
 8001164:	f004 fe06 	bl	8005d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UC_HEARTBEAT_GPIO_Port, UC_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2108      	movs	r1, #8
 800116c:	4837      	ldr	r0, [pc, #220]	@ (800124c <MX_GPIO_Init+0x1b8>)
 800116e:	f004 fe01 	bl	8005d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = UC_PUMP_START_Pin|UC_PUMP_STOP_Pin|UC_AUX_RESET_Pin;
 8001172:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8001176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	482d      	ldr	r0, [pc, #180]	@ (8001240 <MX_GPIO_Init+0x1ac>)
 800118c:	f004 fb76 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = UC_PUMP_WARNING_Pin|UC_PUMP_ALARM_Pin|UC_PUMP_REMOTE_Pin;
 8001190:	2370      	movs	r3, #112	@ 0x70
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	4827      	ldr	r0, [pc, #156]	@ (8001240 <MX_GPIO_Init+0x1ac>)
 80011a4:	f004 fb6a 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UC_CS_AUX1_Pin;
 80011a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UC_CS_AUX1_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	4820      	ldr	r0, [pc, #128]	@ (8001244 <MX_GPIO_Init+0x1b0>)
 80011c2:	f004 fb5b 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UC_CS_AUX0_Pin;
 80011c6:	2310      	movs	r3, #16
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UC_CS_AUX0_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e0:	f004 fb4c 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UC_CS_SPS_OUT_Pin|UC_CS_SPS_IN_Pin;
 80011e4:	2306      	movs	r3, #6
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	4813      	ldr	r0, [pc, #76]	@ (8001248 <MX_GPIO_Init+0x1b4>)
 80011fc:	f004 fb3e 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UC_HEARTBEAT_Pin;
 8001200:	2308      	movs	r3, #8
 8001202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UC_HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	@ (800124c <MX_GPIO_Init+0x1b8>)
 8001218:	f004 fb30 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = UC__5VOK_Pin|UC__12VOK_Pin;
 800121c:	2330      	movs	r3, #48	@ 0x30
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	4807      	ldr	r0, [pc, #28]	@ (800124c <MX_GPIO_Init+0x1b8>)
 8001230:	f004 fb24 	bl	800587c <HAL_GPIO_Init>

}
 8001234:	bf00      	nop
 8001236:	3730      	adds	r7, #48	@ 0x30
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40021000 	.word	0x40021000
 8001240:	48001000 	.word	0x48001000
 8001244:	48001400 	.word	0x48001400
 8001248:	48000400 	.word	0x48000400
 800124c:	48000c00 	.word	0x48000c00

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001254:	f003 f96b 	bl	800452e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001258:	f000 f83a 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125c:	f7ff ff1a 	bl	8001094 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001260:	f001 fa66 	bl	8002730 <MX_SPI1_Init>
  MX_UART4_Init();
 8001264:	f002 f97a 	bl	800355c <MX_UART4_Init>
  MX_UART5_Init();
 8001268:	f002 f9c4 	bl	80035f4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800126c:	f002 fa0e 	bl	800368c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001270:	f002 fa58 	bl	8003724 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001274:	f002 faa4 	bl	80037c0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001278:	f001 fec0 	bl	8002ffc <MX_TIM1_Init>
  MX_ADC5_Init();
 800127c:	f7ff fbb0 	bl	80009e0 <MX_ADC5_Init>
  /* USER CODE BEGIN 2 */
  //--- Stacks fuer die Anfragen an Zentrale und MatchingCube vorbereiten ------
  priolist_init();
 8001280:	f000 f956 	bl	8001530 <priolist_init>
  stacks_init();
 8001284:	f001 fbfa 	bl	8002a7c <stacks_init>
  //--- Ergbenissstack fuer die Antworten von Zentrale und MatchingCube vorbereiten -------
  resultQueue_init();
 8001288:	f001 f974 	bl	8002574 <resultQueue_init>
  uart_initAll();
 800128c:	f001 ffce 	bl	800322c <uart_initAll>
  remote_init();
 8001290:	f000 f9b6 	bl	8001600 <remote_init>
  zentrale_init();
 8001294:	f002 fcbc 	bl	8003c10 <zentrale_init>
  mio_init();
 8001298:	f7ff fa4c 	bl	8000734 <mio_init>

  delay_ms(500);
 800129c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012a0:	f7ff fc78 	bl	8000b94 <delay_ms>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		hw_sero_get();
 80012a4:	f7ff f99c 	bl	80005e0 <hw_sero_get>
		remote_sero_get();
 80012a8:	f000 f9d6 	bl	8001658 <remote_sero_get>
		gb_sero_get();
 80012ac:	f7ff fc98 	bl	8000be0 <gb_sero_get>
		result_get_sero();
 80012b0:	f001 fa12 	bl	80026d8 <result_get_sero>
		mio_sero_get();
 80012b4:	f7ff fac2 	bl	800083c <mio_sero_get>

		zentrale();
 80012b8:	f002 fcf0 	bl	8003c9c <zentrale>

		result_get_sero();
 80012bc:	f001 fa0c 	bl	80026d8 <result_get_sero>
		hw_sero_set();
 80012c0:	f7ff f996 	bl	80005f0 <hw_sero_set>
		mio_sero_set();
 80012c4:	f7ff fab2 	bl	800082c <mio_sero_set>
		z_cmd_scheduler();
 80012c8:	f002 ff0e 	bl	80040e8 <z_cmd_scheduler>
		hw_sero_get();
 80012cc:	bf00      	nop
 80012ce:	e7e9      	b.n	80012a4 <main+0x54>

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b094      	sub	sp, #80	@ 0x50
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	2238      	movs	r2, #56	@ 0x38
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f008 fdcc 	bl	8009e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f004 fd70 	bl	8005dd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012fc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001300:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001302:	2302      	movs	r3, #2
 8001304:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001306:	2303      	movs	r3, #3
 8001308:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800130a:	2301      	movs	r3, #1
 800130c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800130e:	2328      	movs	r3, #40	@ 0x28
 8001310:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001312:	2302      	movs	r3, #2
 8001314:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001316:	2302      	movs	r3, #2
 8001318:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800131a:	2302      	movs	r3, #2
 800131c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131e:	f107 0318 	add.w	r3, r7, #24
 8001322:	4618      	mov	r0, r3
 8001324:	f004 fe0c 	bl	8005f40 <HAL_RCC_OscConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800132e:	f000 f818 	bl	8001362 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001332:	230f      	movs	r3, #15
 8001334:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001336:	2303      	movs	r3, #3
 8001338:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2104      	movs	r1, #4
 800134a:	4618      	mov	r0, r3
 800134c:	f005 f90a 	bl	8006564 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001356:	f000 f804 	bl	8001362 <Error_Handler>
  }
}
 800135a:	bf00      	nop
 800135c:	3750      	adds	r7, #80	@ 0x50
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001366:	b672      	cpsid	i
}
 8001368:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136a:	bf00      	nop
 800136c:	e7fd      	b.n	800136a <Error_Handler+0x8>

0800136e <priolist_push>:
uint8_t priolist_pop (priority_item prio_list[], uint8_t priolevel_header[], uint8_t *firstunused, uint8_t priolevel_data);


//--------------FUNKTIONSDEFINITIONS----------------------------
uint8_t priolist_push (priority_item prio_list[], uint8_t priolist_length,  uint8_t priolevel_header[], uint8_t *firstunused, uint8_t stack_index, uint8_t priolevel_data)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b088      	sub	sp, #32
 8001372:	af02      	add	r7, sp, #8
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	460b      	mov	r3, r1
 800137c:	72fb      	strb	r3, [r7, #11]

	uint8_t flag = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	75fb      	strb	r3, [r7, #23]

	if (*firstunused == NONEXT )            //wenn es keinen freien Platz in der prio_list gibt,
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2bff      	cmp	r3, #255	@ 0xff
 8001388:	d102      	bne.n	8001390 <priolist_push+0x22>
	{
		flag = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	75fb      	strb	r3, [r7, #23]
 800138e:	e034      	b.n	80013fa <priolist_push+0x8c>
	}
	else
	{
		switch (priolevel_data)
 8001390:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001394:	2b02      	cmp	r3, #2
 8001396:	d022      	beq.n	80013de <priolist_push+0x70>
 8001398:	2b02      	cmp	r3, #2
 800139a:	dc2e      	bgt.n	80013fa <priolist_push+0x8c>
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <priolist_push+0x38>
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d00e      	beq.n	80013c2 <priolist_push+0x54>
 80013a4:	e029      	b.n	80013fa <priolist_push+0x8c>
		{
			case  PRIO_LEVEL0:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL0);
 80013a6:	7af9      	ldrb	r1, [r7, #11]
 80013a8:	2300      	movs	r3, #0
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 f824 	bl	8001404 <priolist_node_insert>
			flag = 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	75fb      	strb	r3, [r7, #23]
			break;
 80013c0:	e01b      	b.n	80013fa <priolist_push+0x8c>
			case  PRIO_LEVEL1:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL1);
 80013c2:	7af9      	ldrb	r1, [r7, #11]
 80013c4:	2301      	movs	r3, #1
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 f816 	bl	8001404 <priolist_node_insert>
			flag = 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	75fb      	strb	r3, [r7, #23]
			break;
 80013dc:	e00d      	b.n	80013fa <priolist_push+0x8c>
			case  PRIO_LEVEL2:
			priolist_node_insert(prio_list, priolist_length, priolevel_header, firstunused, stack_index, PRIO_LEVEL2);
 80013de:	7af9      	ldrb	r1, [r7, #11]
 80013e0:	2302      	movs	r3, #2
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f808 	bl	8001404 <priolist_node_insert>
			flag = 1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	75fb      	strb	r3, [r7, #23]
			break;
 80013f8:	bf00      	nop
		};
	};
	return flag;
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <priolist_node_insert>:

void priolist_node_insert(priority_item prio_list[], uint8_t priolist_length,  uint8_t priolevel_header[], uint8_t *unused_list, uint8_t stackindex, uint8_t priolevel)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	460b      	mov	r3, r1
 8001412:	72fb      	strb	r3, [r7, #11]
	uint8_t act_index ;
	uint8_t last;

	act_index = *unused_list;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	75bb      	strb	r3, [r7, #22]
	*unused_list = prio_list[act_index].next;
 800141a:	7dbb      	ldrb	r3, [r7, #22]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4413      	add	r3, r2
 8001422:	785a      	ldrb	r2, [r3, #1]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	701a      	strb	r2, [r3, #0]
	if (priolevel_header[priolevel] == NONEXT)                //Wenn die Prioritätsliste mit dem Level0 noch leer ist,
 8001428:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2bff      	cmp	r3, #255	@ 0xff
 8001434:	d112      	bne.n	800145c <priolist_node_insert+0x58>
	{

		prio_list[act_index].stackindex = stackindex;
 8001436:	7dbb      	ldrb	r3, [r7, #22]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4413      	add	r3, r2
 800143e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001442:	701a      	strb	r2, [r3, #0]
		priolevel_header[priolevel] = act_index;
 8001444:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	7dba      	ldrb	r2, [r7, #22]
 800144e:	701a      	strb	r2, [r3, #0]
		prio_list[act_index].next = NONEXT;
 8001450:	7dbb      	ldrb	r3, [r7, #22]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	22ff      	movs	r2, #255	@ 0xff
 800145a:	705a      	strb	r2, [r3, #1]
	};
	if (priolevel_header[priolevel] < priolist_length)    //Wenn die Prioritätsliste schon existiert,
 800145c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	4413      	add	r3, r2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	7afa      	ldrb	r2, [r7, #11]
 8001468:	429a      	cmp	r2, r3
 800146a:	d926      	bls.n	80014ba <priolist_node_insert+0xb6>
	{
		prio_list[act_index].stackindex = stackindex;
 800146c:	7dbb      	ldrb	r3, [r7, #22]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001478:	701a      	strb	r2, [r3, #0]
		last =  priolevel_header[priolevel];                  //das erste Element der Prioritätsliste
 800147a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	75fb      	strb	r3, [r7, #23]
		while (prio_list[last].next != NONEXT)               //Suche den Ende der Prioritätsliste, um das neue Element hineinzufügen
 8001486:	e005      	b.n	8001494 <priolist_node_insert+0x90>
		{
			last = prio_list[last].next;
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	785b      	ldrb	r3, [r3, #1]
 8001492:	75fb      	strb	r3, [r7, #23]
		while (prio_list[last].next != NONEXT)               //Suche den Ende der Prioritätsliste, um das neue Element hineinzufügen
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	2bff      	cmp	r3, #255	@ 0xff
 80014a0:	d1f2      	bne.n	8001488 <priolist_node_insert+0x84>
		};
		prio_list[last].next = act_index;
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	4413      	add	r3, r2
 80014aa:	7dba      	ldrb	r2, [r7, #22]
 80014ac:	705a      	strb	r2, [r3, #1]
		prio_list[act_index].next = NONEXT;
 80014ae:	7dbb      	ldrb	r3, [r7, #22]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4413      	add	r3, r2
 80014b6:	22ff      	movs	r2, #255	@ 0xff
 80014b8:	705a      	strb	r2, [r3, #1]
	};
}
 80014ba:	bf00      	nop
 80014bc:	371c      	adds	r7, #28
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <priolist_pop>:

uint8_t priolist_pop (priority_item prio_list[], uint8_t priolevel_header[], uint8_t *firstunused, uint8_t priolevel_data)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b087      	sub	sp, #28
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	70fb      	strb	r3, [r7, #3]
	uint8_t stack_index = NONEXT ;  //ungültige Wert, wenn die Prioritätsliste noch leer oder ein Fehler
 80014d4:	23ff      	movs	r3, #255	@ 0xff
 80014d6:	75fb      	strb	r3, [r7, #23]

	if (priolevel_header[priolevel_data] != NONEXT)
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	4413      	add	r3, r2
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2bff      	cmp	r3, #255	@ 0xff
 80014e2:	d01d      	beq.n	8001520 <priolist_pop+0x5a>
	{
		uint8_t act_index = priolevel_header[priolevel_data];
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	75bb      	strb	r3, [r7, #22]
		stack_index = prio_list[act_index].stackindex;
 80014ee:	7dbb      	ldrb	r3, [r7, #22]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	75fb      	strb	r3, [r7, #23]
		priolevel_header[priolevel_data] = prio_list[act_index].next;
 80014fa:	7dbb      	ldrb	r3, [r7, #22]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	441a      	add	r2, r3
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	440b      	add	r3, r1
 8001508:	7852      	ldrb	r2, [r2, #1]
 800150a:	701a      	strb	r2, [r3, #0]

		prio_list[act_index].next = *firstunused;
 800150c:	7dbb      	ldrb	r3, [r7, #22]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	7812      	ldrb	r2, [r2, #0]
 8001518:	705a      	strb	r2, [r3, #1]
		*firstunused = act_index;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7dba      	ldrb	r2, [r7, #22]
 800151e:	701a      	strb	r2, [r3, #0]
	};

	return stack_index;
 8001520:	7dfb      	ldrb	r3, [r7, #23]
}
 8001522:	4618      	mov	r0, r3
 8001524:	371c      	adds	r7, #28
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <priolist_init>:
//--------------FUNKTIONSDEKLARATIONS----------------------------------------------------------------------------------------
void priolist_init(void);

//--------------FUNKTIONSDEFINITIONS-----------------------------------------------------------------------------------------
void priolist_init(void)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	71fb      	strb	r3, [r7, #7]

	zpriolist_firstunused_index = 0;         //der gültige Wert liegt zwischen 0 und (Z_STACK_SIZE-1); wenn = NONEXT, d.h. keinen freien Platz in der Prioliste.
 800153a:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <priolist_init+0xb8>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
	mcpriolist_firstunused_index = 0;		//der Wert liegt zwischen 0 und (MC_STACK_SIZE-1)
 8001540:	4b2a      	ldr	r3, [pc, #168]	@ (80015ec <priolist_init+0xbc>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]

	for (i = 0;  i < PRIO_LEVELS; i++)
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	e00a      	b.n	8001562 <priolist_init+0x32>
	{
		z_priolevel_header[i] = NONEXT;    //d.h. es gibt noch keinen Befehl in der i-te. Prioritätsliste.
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4a28      	ldr	r2, [pc, #160]	@ (80015f0 <priolist_init+0xc0>)
 8001550:	21ff      	movs	r1, #255	@ 0xff
 8001552:	54d1      	strb	r1, [r2, r3]

		mc_priolevel_header[i] = NONEXT;
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	4a27      	ldr	r2, [pc, #156]	@ (80015f4 <priolist_init+0xc4>)
 8001558:	21ff      	movs	r1, #255	@ 0xff
 800155a:	54d1      	strb	r1, [r2, r3]
	for (i = 0;  i < PRIO_LEVELS; i++)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	3301      	adds	r3, #1
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d9f1      	bls.n	800154c <priolist_init+0x1c>

	}

	for ( i= 0; i < Z_STACK_SIZE; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	e015      	b.n	800159a <priolist_init+0x6a>
	{
		if (i == (Z_STACK_SIZE-1) )
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b1d      	cmp	r3, #29
 8001572:	d106      	bne.n	8001582 <priolist_init+0x52>
		{
			z_priolist[i].next = NONEXT;
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	4a20      	ldr	r2, [pc, #128]	@ (80015f8 <priolist_init+0xc8>)
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	22ff      	movs	r2, #255	@ 0xff
 800157e:	705a      	strb	r2, [r3, #1]
 8001580:	e008      	b.n	8001594 <priolist_init+0x64>
		}
		else
		{
			z_priolist[i].next = i+1;
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	79fa      	ldrb	r2, [r7, #7]
 8001586:	3201      	adds	r2, #1
 8001588:	b2d1      	uxtb	r1, r2
 800158a:	4a1b      	ldr	r2, [pc, #108]	@ (80015f8 <priolist_init+0xc8>)
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	460a      	mov	r2, r1
 8001592:	705a      	strb	r2, [r3, #1]
	for ( i= 0; i < Z_STACK_SIZE; i++)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	3301      	adds	r3, #1
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	2b1d      	cmp	r3, #29
 800159e:	d9e6      	bls.n	800156e <priolist_init+0x3e>
		};
	};

	for ( i= 0; i < MC_STACK_SIZE; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	71fb      	strb	r3, [r7, #7]
 80015a4:	e015      	b.n	80015d2 <priolist_init+0xa2>
	{
		if (i == (MC_STACK_SIZE-1) )
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b13      	cmp	r3, #19
 80015aa:	d106      	bne.n	80015ba <priolist_init+0x8a>
		{
			mc_priolist[i].next = NONEXT;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4a13      	ldr	r2, [pc, #76]	@ (80015fc <priolist_init+0xcc>)
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	22ff      	movs	r2, #255	@ 0xff
 80015b6:	705a      	strb	r2, [r3, #1]
 80015b8:	e008      	b.n	80015cc <priolist_init+0x9c>
		}
		else
		{
			mc_priolist[i].next = i+1;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	3201      	adds	r2, #1
 80015c0:	b2d1      	uxtb	r1, r2
 80015c2:	4a0e      	ldr	r2, [pc, #56]	@ (80015fc <priolist_init+0xcc>)
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	460a      	mov	r2, r1
 80015ca:	705a      	strb	r2, [r3, #1]
	for ( i= 0; i < MC_STACK_SIZE; i++)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	3301      	adds	r3, #1
 80015d0:	71fb      	strb	r3, [r7, #7]
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b13      	cmp	r3, #19
 80015d6:	d9e6      	bls.n	80015a6 <priolist_init+0x76>
		};
	};
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	2000028b 	.word	0x2000028b
 80015ec:	2000028c 	.word	0x2000028c
 80015f0:	20000284 	.word	0x20000284
 80015f4:	20000288 	.word	0x20000288
 80015f8:	20000220 	.word	0x20000220
 80015fc:	2000025c 	.word	0x2000025c

08001600 <remote_init>:
void output_ascii(int32_t);
void Binary_Search(uint8_t ncmd, char *key, uint16_t *cmdindex);
void output_ascii_cmdack(uint8_t verbose_flg, uint8_t crlf_flg, uint8_t cmd_ack);

// ---- public API ----
void remote_init(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	nzeichen = 0;
 8001604:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <remote_init+0x3c>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
	state = RMT_WAIT_FOR_PAKET_START;
 800160a:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <remote_init+0x40>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
	lengthRx = 0;
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <remote_init+0x44>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
	dleFlag = 0;
 8001616:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <remote_init+0x48>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <remote_init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
	memset((void*) msg, 0, sizeof(msg));
 8001622:	220f      	movs	r2, #15
 8001624:	2100      	movs	r1, #0
 8001626:	480a      	ldr	r0, [pc, #40]	@ (8001650 <remote_init+0x50>)
 8001628:	f008 fc28 	bl	8009e7c <memset>
	memset(bufferRx, 0, sizeof(bufferRx));
 800162c:	220f      	movs	r2, #15
 800162e:	2100      	movs	r1, #0
 8001630:	4808      	ldr	r0, [pc, #32]	@ (8001654 <remote_init+0x54>)
 8001632:	f008 fc23 	bl	8009e7c <memset>
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200002a3 	.word	0x200002a3
 8001640:	20000005 	.word	0x20000005
 8001644:	200002b3 	.word	0x200002b3
 8001648:	200002b4 	.word	0x200002b4
 800164c:	200002b5 	.word	0x200002b5
 8001650:	20000294 	.word	0x20000294
 8001654:	200002a4 	.word	0x200002a4

08001658 <remote_sero_get>:

// Pull bytes from UART4 RX ring into msg[] and feed parser
void remote_sero_get(void) {
 8001658:	b598      	push	{r3, r4, r7, lr}
 800165a:	af00      	add	r7, sp, #0
	nzeichen = 0;
 800165c:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <remote_sero_get+0x54>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
	while ((rb_rx_used(&usart3_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8001662:	e00e      	b.n	8001682 <remote_sero_get+0x2a>
		msg[nzeichen++] = (uint8_t) uartRB_Getc(&usart3_rb);   // legacy getc()
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <remote_sero_get+0x54>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	b2d1      	uxtb	r1, r2
 800166e:	4a0f      	ldr	r2, [pc, #60]	@ (80016ac <remote_sero_get+0x54>)
 8001670:	7011      	strb	r1, [r2, #0]
 8001672:	461c      	mov	r4, r3
 8001674:	480e      	ldr	r0, [pc, #56]	@ (80016b0 <remote_sero_get+0x58>)
 8001676:	f001 ff43 	bl	8003500 <uartRB_Getc>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <remote_sero_get+0x5c>)
 8001680:	551a      	strb	r2, [r3, r4]
	while ((rb_rx_used(&usart3_rb) > 0) && (nzeichen < RMT_MAX_PAKET_LENGTH)) {
 8001682:	480b      	ldr	r0, [pc, #44]	@ (80016b0 <remote_sero_get+0x58>)
 8001684:	f001 fe7b 	bl	800337e <rb_rx_used>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	dd04      	ble.n	8001698 <remote_sero_get+0x40>
 800168e:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <remote_sero_get+0x54>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b0d      	cmp	r3, #13
 8001696:	d9e5      	bls.n	8001664 <remote_sero_get+0xc>
	}
	if (nzeichen)
 8001698:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <remote_sero_get+0x54>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <remote_sero_get+0x4e>
		parse_ascii();
 80016a2:	f000 f809 	bl	80016b8 <parse_ascii>
}
 80016a6:	bf00      	nop
 80016a8:	bd98      	pop	{r3, r4, r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200002a3 	.word	0x200002a3
 80016b0:	20000f64 	.word	0x20000f64
 80016b4:	20000294 	.word	0x20000294

080016b8 <parse_ascii>:

// das Paket in ASCII-Format analysieren und das Paket in den Stack einfügen.
void parse_ascii(void) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
	volatile static uint8_t pflag = 0;
	volatile static uint8_t eflag = 0;

	static uint8_t negativ_zahl = 0;

	uint8_t ptr = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	75fb      	strb	r3, [r7, #23]
	uint16_t cmd_index = BINARY_INDEX_MAX;
 80016c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016c6:	82bb      	strh	r3, [r7, #20]

	stack_item stack_data;

	do {
		// wenn es ein Zeichen in UART1 Buffer gibt und die Automate nicht im Bearbeitungszustand ist
		if ((nzeichen > 0) && (a_state != proc_cmd)) {
 80016c8:	4b9c      	ldr	r3, [pc, #624]	@ (800193c <parse_ascii+0x284>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d01d      	beq.n	800170e <parse_ascii+0x56>
 80016d2:	4b9b      	ldr	r3, [pc, #620]	@ (8001940 <parse_ascii+0x288>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d018      	beq.n	800170e <parse_ascii+0x56>
			nc = msg[ptr++];				// hole ein Zeichen aus msg-buffer
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	75fa      	strb	r2, [r7, #23]
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b97      	ldr	r3, [pc, #604]	@ (8001944 <parse_ascii+0x28c>)
 80016e6:	5c9b      	ldrb	r3, [r3, r2]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b97      	ldr	r3, [pc, #604]	@ (8001948 <parse_ascii+0x290>)
 80016ec:	701a      	strb	r2, [r3, #0]
			if (echo == 1)// Wenn die Kommunikationsmode im Echo-Mode ist, wird es das Zeichen direkt wieder zurückgeben.
 80016ee:	4b97      	ldr	r3, [pc, #604]	@ (800194c <parse_ascii+0x294>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d10d      	bne.n	8001714 <parse_ascii+0x5c>
					{
				char1[0] = nc;
 80016f8:	4b93      	ldr	r3, [pc, #588]	@ (8001948 <parse_ascii+0x290>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b94      	ldr	r3, [pc, #592]	@ (8001950 <parse_ascii+0x298>)
 8001700:	701a      	strb	r2, [r3, #0]
				uartRB_Put(&usart3_rb, char1, 1);
 8001702:	2201      	movs	r2, #1
 8001704:	4992      	ldr	r1, [pc, #584]	@ (8001950 <parse_ascii+0x298>)
 8001706:	4893      	ldr	r0, [pc, #588]	@ (8001954 <parse_ascii+0x29c>)
 8001708:	f001 fea6 	bl	8003458 <uartRB_Put>
			if (echo == 1)// Wenn die Kommunikationsmode im Echo-Mode ist, wird es das Zeichen direkt wieder zurückgeben.
 800170c:	e002      	b.n	8001714 <parse_ascii+0x5c>
			}
		} else
			nc = 0;
 800170e:	4b8e      	ldr	r3, [pc, #568]	@ (8001948 <parse_ascii+0x290>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]

		if (strlen(cmd) > 22)// Ascii-Kommando darf nicht länger als 22 Zeichen.
 8001714:	4890      	ldr	r0, [pc, #576]	@ (8001958 <parse_ascii+0x2a0>)
 8001716:	f7fe fd8d 	bl	8000234 <strlen>
 800171a:	4603      	mov	r3, r0
 800171c:	2b16      	cmp	r3, #22
 800171e:	d90e      	bls.n	800173e <parse_ascii+0x86>
				{
			strcpy(cmd, "");
 8001720:	4b8d      	ldr	r3, [pc, #564]	@ (8001958 <parse_ascii+0x2a0>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
			val = 0;
 8001726:	4b8d      	ldr	r3, [pc, #564]	@ (800195c <parse_ascii+0x2a4>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
			pflag = 0;
 800172c:	4b8c      	ldr	r3, [pc, #560]	@ (8001960 <parse_ascii+0x2a8>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
			eflag = 0;
 8001732:	4b8c      	ldr	r3, [pc, #560]	@ (8001964 <parse_ascii+0x2ac>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
			a_state = get_cmd;
 8001738:	4b81      	ldr	r3, [pc, #516]	@ (8001940 <parse_ascii+0x288>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
		}

		switch (a_state) {
 800173e:	4b80      	ldr	r3, [pc, #512]	@ (8001940 <parse_ascii+0x288>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	3b01      	subs	r3, #1
 8001746:	2b03      	cmp	r3, #3
 8001748:	f200 8301 	bhi.w	8001d4e <parse_ascii+0x696>
 800174c:	a201      	add	r2, pc, #4	@ (adr r2, 8001754 <parse_ascii+0x9c>)
 800174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001752:	bf00      	nop
 8001754:	08001765 	.word	0x08001765
 8001758:	08001899 	.word	0x08001899
 800175c:	08001975 	.word	0x08001975
 8001760:	08001a27 	.word	0x08001a27
		case get_cmd:
			if (((nc >= 65) && (nc <= 90)) || ((nc >= 48) && (nc <= 57))
 8001764:	4b78      	ldr	r3, [pc, #480]	@ (8001948 <parse_ascii+0x290>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b40      	cmp	r3, #64	@ 0x40
 800176c:	d904      	bls.n	8001778 <parse_ascii+0xc0>
 800176e:	4b76      	ldr	r3, [pc, #472]	@ (8001948 <parse_ascii+0x290>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b5a      	cmp	r3, #90	@ 0x5a
 8001776:	d913      	bls.n	80017a0 <parse_ascii+0xe8>
 8001778:	4b73      	ldr	r3, [pc, #460]	@ (8001948 <parse_ascii+0x290>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001780:	d904      	bls.n	800178c <parse_ascii+0xd4>
 8001782:	4b71      	ldr	r3, [pc, #452]	@ (8001948 <parse_ascii+0x290>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b39      	cmp	r3, #57	@ 0x39
 800178a:	d909      	bls.n	80017a0 <parse_ascii+0xe8>
					|| (nc == 58) || (nc == 63)) {
 800178c:	4b6e      	ldr	r3, [pc, #440]	@ (8001948 <parse_ascii+0x290>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b3a      	cmp	r3, #58	@ 0x3a
 8001794:	d004      	beq.n	80017a0 <parse_ascii+0xe8>
 8001796:	4b6c      	ldr	r3, [pc, #432]	@ (8001948 <parse_ascii+0x290>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b3f      	cmp	r3, #63	@ 0x3f
 800179e:	d109      	bne.n	80017b4 <parse_ascii+0xfc>
				char1[0] = nc;				//verkette char1 an cmd
 80017a0:	4b69      	ldr	r3, [pc, #420]	@ (8001948 <parse_ascii+0x290>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001950 <parse_ascii+0x298>)
 80017a8:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 80017aa:	4969      	ldr	r1, [pc, #420]	@ (8001950 <parse_ascii+0x298>)
 80017ac:	486a      	ldr	r0, [pc, #424]	@ (8001958 <parse_ascii+0x2a0>)
 80017ae:	f008 fb6d 	bl	8009e8c <strcat>
 80017b2:	e070      	b.n	8001896 <parse_ascii+0x1de>
			} else if ((nc == 46) && (sloppy == 1)) {
 80017b4:	4b64      	ldr	r3, [pc, #400]	@ (8001948 <parse_ascii+0x290>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80017bc:	d10c      	bne.n	80017d8 <parse_ascii+0x120>
 80017be:	4b6a      	ldr	r3, [pc, #424]	@ (8001968 <parse_ascii+0x2b0>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d107      	bne.n	80017d8 <parse_ascii+0x120>
				char1[0] = 58;
 80017c8:	4b61      	ldr	r3, [pc, #388]	@ (8001950 <parse_ascii+0x298>)
 80017ca:	223a      	movs	r2, #58	@ 0x3a
 80017cc:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 80017ce:	4960      	ldr	r1, [pc, #384]	@ (8001950 <parse_ascii+0x298>)
 80017d0:	4861      	ldr	r0, [pc, #388]	@ (8001958 <parse_ascii+0x2a0>)
 80017d2:	f008 fb5b 	bl	8009e8c <strcat>
 80017d6:	e05e      	b.n	8001896 <parse_ascii+0x1de>
			} else if ((nc == 35) && (sloppy == 1)) {
 80017d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001948 <parse_ascii+0x290>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b23      	cmp	r3, #35	@ 0x23
 80017e0:	d10c      	bne.n	80017fc <parse_ascii+0x144>
 80017e2:	4b61      	ldr	r3, [pc, #388]	@ (8001968 <parse_ascii+0x2b0>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d107      	bne.n	80017fc <parse_ascii+0x144>
				char1[0] = 63;
 80017ec:	4b58      	ldr	r3, [pc, #352]	@ (8001950 <parse_ascii+0x298>)
 80017ee:	223f      	movs	r2, #63	@ 0x3f
 80017f0:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 80017f2:	4957      	ldr	r1, [pc, #348]	@ (8001950 <parse_ascii+0x298>)
 80017f4:	4858      	ldr	r0, [pc, #352]	@ (8001958 <parse_ascii+0x2a0>)
 80017f6:	f008 fb49 	bl	8009e8c <strcat>
 80017fa:	e04c      	b.n	8001896 <parse_ascii+0x1de>
			} else if ((nc >= 97) && (nc <= 122)) {
 80017fc:	4b52      	ldr	r3, [pc, #328]	@ (8001948 <parse_ascii+0x290>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b60      	cmp	r3, #96	@ 0x60
 8001804:	d910      	bls.n	8001828 <parse_ascii+0x170>
 8001806:	4b50      	ldr	r3, [pc, #320]	@ (8001948 <parse_ascii+0x290>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b7a      	cmp	r3, #122	@ 0x7a
 800180e:	d80b      	bhi.n	8001828 <parse_ascii+0x170>
				char1[0] = (nc - 32);
 8001810:	4b4d      	ldr	r3, [pc, #308]	@ (8001948 <parse_ascii+0x290>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	3b20      	subs	r3, #32
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b4d      	ldr	r3, [pc, #308]	@ (8001950 <parse_ascii+0x298>)
 800181c:	701a      	strb	r2, [r3, #0]
				strcat(cmd, char1);
 800181e:	494c      	ldr	r1, [pc, #304]	@ (8001950 <parse_ascii+0x298>)
 8001820:	484d      	ldr	r0, [pc, #308]	@ (8001958 <parse_ascii+0x2a0>)
 8001822:	f008 fb33 	bl	8009e8c <strcat>
 8001826:	e036      	b.n	8001896 <parse_ascii+0x1de>
			} else if (nc == 32) {
 8001828:	4b47      	ldr	r3, [pc, #284]	@ (8001948 <parse_ascii+0x290>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b20      	cmp	r3, #32
 8001830:	d10b      	bne.n	800184a <parse_ascii+0x192>
				if (strlen(cmd) > 0) {
 8001832:	4b49      	ldr	r3, [pc, #292]	@ (8001958 <parse_ascii+0x2a0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 828d 	beq.w	8001d56 <parse_ascii+0x69e>
					val = 0;
 800183c:	4b47      	ldr	r3, [pc, #284]	@ (800195c <parse_ascii+0x2a4>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
					a_state = get_sign;
 8001842:	4b3f      	ldr	r3, [pc, #252]	@ (8001940 <parse_ascii+0x288>)
 8001844:	2202      	movs	r2, #2
 8001846:	701a      	strb	r2, [r3, #0]
				a_state = proc_cmd;
			} else {
				if (nc != 0)
					strcat(cmd, "*");
			}
			break;
 8001848:	e285      	b.n	8001d56 <parse_ascii+0x69e>
			} else if ((nc == 59) || ((nc == 13) && (sloppy == 1))) {
 800184a:	4b3f      	ldr	r3, [pc, #252]	@ (8001948 <parse_ascii+0x290>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b3b      	cmp	r3, #59	@ 0x3b
 8001852:	d009      	beq.n	8001868 <parse_ascii+0x1b0>
 8001854:	4b3c      	ldr	r3, [pc, #240]	@ (8001948 <parse_ascii+0x290>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b0d      	cmp	r3, #13
 800185c:	d108      	bne.n	8001870 <parse_ascii+0x1b8>
 800185e:	4b42      	ldr	r3, [pc, #264]	@ (8001968 <parse_ascii+0x2b0>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d103      	bne.n	8001870 <parse_ascii+0x1b8>
				a_state = proc_cmd;
 8001868:	4b35      	ldr	r3, [pc, #212]	@ (8001940 <parse_ascii+0x288>)
 800186a:	2204      	movs	r2, #4
 800186c:	701a      	strb	r2, [r3, #0]
 800186e:	e012      	b.n	8001896 <parse_ascii+0x1de>
				if (nc != 0)
 8001870:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <parse_ascii+0x290>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 826d 	beq.w	8001d56 <parse_ascii+0x69e>
					strcat(cmd, "*");
 800187c:	4836      	ldr	r0, [pc, #216]	@ (8001958 <parse_ascii+0x2a0>)
 800187e:	f7fe fcd9 	bl	8000234 <strlen>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	4b34      	ldr	r3, [pc, #208]	@ (8001958 <parse_ascii+0x2a0>)
 8001888:	4413      	add	r3, r2
 800188a:	4938      	ldr	r1, [pc, #224]	@ (800196c <parse_ascii+0x2b4>)
 800188c:	461a      	mov	r2, r3
 800188e:	460b      	mov	r3, r1
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	8013      	strh	r3, [r2, #0]
			break;
 8001894:	e25f      	b.n	8001d56 <parse_ascii+0x69e>
 8001896:	e25e      	b.n	8001d56 <parse_ascii+0x69e>

		case get_sign:
			if (nc == 45) {
 8001898:	4b2b      	ldr	r3, [pc, #172]	@ (8001948 <parse_ascii+0x290>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b2d      	cmp	r3, #45	@ 0x2d
 80018a0:	d106      	bne.n	80018b0 <parse_ascii+0x1f8>
				negativ_zahl = 1;
 80018a2:	4b33      	ldr	r3, [pc, #204]	@ (8001970 <parse_ascii+0x2b8>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
				a_state = get_val;
 80018a8:	4b25      	ldr	r3, [pc, #148]	@ (8001940 <parse_ascii+0x288>)
 80018aa:	2203      	movs	r2, #3
 80018ac:	701a      	strb	r2, [r3, #0]
				break;
 80018ae:	e257      	b.n	8001d60 <parse_ascii+0x6a8>
			} else if ((nc >= 48) && (nc <= 57) && (val < INT32_MAX)) //val < 1000000
 80018b0:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <parse_ascii+0x290>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80018b8:	d91f      	bls.n	80018fa <parse_ascii+0x242>
 80018ba:	4b23      	ldr	r3, [pc, #140]	@ (8001948 <parse_ascii+0x290>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b39      	cmp	r3, #57	@ 0x39
 80018c2:	d81a      	bhi.n	80018fa <parse_ascii+0x242>
 80018c4:	4b25      	ldr	r3, [pc, #148]	@ (800195c <parse_ascii+0x2a4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d014      	beq.n	80018fa <parse_ascii+0x242>
					{
				val = val * 10 + (nc - 48);
 80018d0:	4b22      	ldr	r3, [pc, #136]	@ (800195c <parse_ascii+0x2a4>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	461a      	mov	r2, r3
 80018de:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <parse_ascii+0x290>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	3b30      	subs	r3, #48	@ 0x30
 80018e6:	4413      	add	r3, r2
 80018e8:	4a1c      	ldr	r2, [pc, #112]	@ (800195c <parse_ascii+0x2a4>)
 80018ea:	6013      	str	r3, [r2, #0]
				pflag = 1;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <parse_ascii+0x2a8>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
				a_state = get_val;
 80018f2:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <parse_ascii+0x288>)
 80018f4:	2203      	movs	r2, #3
 80018f6:	701a      	strb	r2, [r3, #0]
				break;
 80018f8:	e232      	b.n	8001d60 <parse_ascii+0x6a8>
			} else if ((nc == 59) || (nc == 13)) {
 80018fa:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <parse_ascii+0x290>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b3b      	cmp	r3, #59	@ 0x3b
 8001902:	d004      	beq.n	800190e <parse_ascii+0x256>
 8001904:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <parse_ascii+0x290>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b0d      	cmp	r3, #13
 800190c:	d103      	bne.n	8001916 <parse_ascii+0x25e>
				a_state = proc_cmd;
 800190e:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <parse_ascii+0x288>)
 8001910:	2204      	movs	r2, #4
 8001912:	701a      	strb	r2, [r3, #0]
					eflag = 1;
				}

			}
			;
			break;
 8001914:	e221      	b.n	8001d5a <parse_ascii+0x6a2>
				if (nc != 0) {
 8001916:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <parse_ascii+0x290>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 821c 	beq.w	8001d5a <parse_ascii+0x6a2>
					negativ_zahl = 0;
 8001922:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <parse_ascii+0x2b8>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
					val = 0;
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <parse_ascii+0x2a4>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
					pflag = 0;
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <parse_ascii+0x2a8>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
					eflag = 1;
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <parse_ascii+0x2ac>)
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
			break;
 800193a:	e20e      	b.n	8001d5a <parse_ascii+0x6a2>
 800193c:	200002a3 	.word	0x200002a3
 8001940:	20000006 	.word	0x20000006
 8001944:	20000294 	.word	0x20000294
 8001948:	200002b6 	.word	0x200002b6
 800194c:	2000028f 	.word	0x2000028f
 8001950:	200002b8 	.word	0x200002b8
 8001954:	20000f64 	.word	0x20000f64
 8001958:	200002bc 	.word	0x200002bc
 800195c:	200002d8 	.word	0x200002d8
 8001960:	200002dc 	.word	0x200002dc
 8001964:	200002dd 	.word	0x200002dd
 8001968:	20000290 	.word	0x20000290
 800196c:	0800a7b4 	.word	0x0800a7b4
 8001970:	200002de 	.word	0x200002de
		case get_val:

			if ((nc >= 48) && (nc <= 57) && (val < INT32_MAX))   //val < 1000000
 8001974:	4b94      	ldr	r3, [pc, #592]	@ (8001bc8 <parse_ascii+0x510>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b2f      	cmp	r3, #47	@ 0x2f
 800197c:	d91c      	bls.n	80019b8 <parse_ascii+0x300>
 800197e:	4b92      	ldr	r3, [pc, #584]	@ (8001bc8 <parse_ascii+0x510>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b39      	cmp	r3, #57	@ 0x39
 8001986:	d817      	bhi.n	80019b8 <parse_ascii+0x300>
 8001988:	4b90      	ldr	r3, [pc, #576]	@ (8001bcc <parse_ascii+0x514>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001990:	4293      	cmp	r3, r2
 8001992:	d011      	beq.n	80019b8 <parse_ascii+0x300>
					{
				val = val * 10 + (nc - 48);
 8001994:	4b8d      	ldr	r3, [pc, #564]	@ (8001bcc <parse_ascii+0x514>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b89      	ldr	r3, [pc, #548]	@ (8001bc8 <parse_ascii+0x510>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	3b30      	subs	r3, #48	@ 0x30
 80019aa:	4413      	add	r3, r2
 80019ac:	4a87      	ldr	r2, [pc, #540]	@ (8001bcc <parse_ascii+0x514>)
 80019ae:	6013      	str	r3, [r2, #0]
				pflag = 1;
 80019b0:	4b87      	ldr	r3, [pc, #540]	@ (8001bd0 <parse_ascii+0x518>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	e035      	b.n	8001a24 <parse_ascii+0x36c>
			} else if ((nc == 59) || (nc == 13)) {
 80019b8:	4b83      	ldr	r3, [pc, #524]	@ (8001bc8 <parse_ascii+0x510>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b3b      	cmp	r3, #59	@ 0x3b
 80019c0:	d004      	beq.n	80019cc <parse_ascii+0x314>
 80019c2:	4b81      	ldr	r3, [pc, #516]	@ (8001bc8 <parse_ascii+0x510>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b0d      	cmp	r3, #13
 80019ca:	d118      	bne.n	80019fe <parse_ascii+0x346>
				if (negativ_zahl) {
 80019cc:	4b81      	ldr	r3, [pc, #516]	@ (8001bd4 <parse_ascii+0x51c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d010      	beq.n	80019f6 <parse_ascii+0x33e>
					if (pflag == 0) {
 80019d4:	4b7e      	ldr	r3, [pc, #504]	@ (8001bd0 <parse_ascii+0x518>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10b      	bne.n	80019f6 <parse_ascii+0x33e>
						negativ_zahl = 0;
 80019de:	4b7d      	ldr	r3, [pc, #500]	@ (8001bd4 <parse_ascii+0x51c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
						val = 0;
 80019e4:	4b79      	ldr	r3, [pc, #484]	@ (8001bcc <parse_ascii+0x514>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
						pflag = 0;
 80019ea:	4b79      	ldr	r3, [pc, #484]	@ (8001bd0 <parse_ascii+0x518>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
						eflag = 1;
 80019f0:	4b79      	ldr	r3, [pc, #484]	@ (8001bd8 <parse_ascii+0x520>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
					}
				}
				a_state = proc_cmd;
 80019f6:	4b79      	ldr	r3, [pc, #484]	@ (8001bdc <parse_ascii+0x524>)
 80019f8:	2204      	movs	r2, #4
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e012      	b.n	8001a24 <parse_ascii+0x36c>
			} else {
				if (nc != 0) {
 80019fe:	4b72      	ldr	r3, [pc, #456]	@ (8001bc8 <parse_ascii+0x510>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 81aa 	beq.w	8001d5e <parse_ascii+0x6a6>
					negativ_zahl = 0;
 8001a0a:	4b72      	ldr	r3, [pc, #456]	@ (8001bd4 <parse_ascii+0x51c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
					val = 0;
 8001a10:	4b6e      	ldr	r3, [pc, #440]	@ (8001bcc <parse_ascii+0x514>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
					pflag = 0;
 8001a16:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd0 <parse_ascii+0x518>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
					eflag = 1;
 8001a1c:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd8 <parse_ascii+0x520>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
				}

			}
			break;
 8001a22:	e19c      	b.n	8001d5e <parse_ascii+0x6a6>
 8001a24:	e19b      	b.n	8001d5e <parse_ascii+0x6a6>

		case proc_cmd:

			if (eflag == 1) {
 8001a26:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd8 <parse_ascii+0x520>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d103      	bne.n	8001a38 <parse_ascii+0x380>
				ret = CMR_MALFORMATTEDCOMMAND;
 8001a30:	4b6b      	ldr	r3, [pc, #428]	@ (8001be0 <parse_ascii+0x528>)
 8001a32:	221f      	movs	r2, #31
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	e160      	b.n	8001cfa <parse_ascii+0x642>
			}
			//hier beginnt die Verarbeitung der Befehle zum Einstellen der Kommunikation
			else if (strcmp(cmd, "VERB") == 0) {
 8001a38:	496a      	ldr	r1, [pc, #424]	@ (8001be4 <parse_ascii+0x52c>)
 8001a3a:	486b      	ldr	r0, [pc, #428]	@ (8001be8 <parse_ascii+0x530>)
 8001a3c:	f7fe fbf0 	bl	8000220 <strcmp>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d12c      	bne.n	8001aa0 <parse_ascii+0x3e8>
				if (pflag == 0) {
 8001a46:	4b62      	ldr	r3, [pc, #392]	@ (8001bd0 <parse_ascii+0x518>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d103      	bne.n	8001a58 <parse_ascii+0x3a0>
					ret = CMR_MISSINGPARAMETER;
 8001a50:	4b63      	ldr	r3, [pc, #396]	@ (8001be0 <parse_ascii+0x528>)
 8001a52:	220c      	movs	r2, #12
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	e150      	b.n	8001cfa <parse_ascii+0x642>
				} else {
					switch (val) {
 8001a58:	4b5c      	ldr	r3, [pc, #368]	@ (8001bcc <parse_ascii+0x514>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d014      	beq.n	8001a8a <parse_ascii+0x3d2>
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	dc19      	bgt.n	8001a98 <parse_ascii+0x3e0>
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <parse_ascii+0x3b6>
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d007      	beq.n	8001a7c <parse_ascii+0x3c4>
 8001a6c:	e014      	b.n	8001a98 <parse_ascii+0x3e0>
					case 0:
						verbose = 0;
 8001a6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bec <parse_ascii+0x534>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001a74:	4b5a      	ldr	r3, [pc, #360]	@ (8001be0 <parse_ascii+0x528>)
 8001a76:	2280      	movs	r2, #128	@ 0x80
 8001a78:	701a      	strb	r2, [r3, #0]
						break;
 8001a7a:	e13e      	b.n	8001cfa <parse_ascii+0x642>
					case 1:
						verbose = 1;
 8001a7c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bec <parse_ascii+0x534>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001a82:	4b57      	ldr	r3, [pc, #348]	@ (8001be0 <parse_ascii+0x528>)
 8001a84:	2280      	movs	r2, #128	@ 0x80
 8001a86:	701a      	strb	r2, [r3, #0]
						break;
 8001a88:	e137      	b.n	8001cfa <parse_ascii+0x642>
					case 2:
						verbose = 2;
 8001a8a:	4b58      	ldr	r3, [pc, #352]	@ (8001bec <parse_ascii+0x534>)
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001a90:	4b53      	ldr	r3, [pc, #332]	@ (8001be0 <parse_ascii+0x528>)
 8001a92:	2280      	movs	r2, #128	@ 0x80
 8001a94:	701a      	strb	r2, [r3, #0]
						break;
 8001a96:	e130      	b.n	8001cfa <parse_ascii+0x642>
					default:
						ret = CMR_PARAMETERINVALID;
 8001a98:	4b51      	ldr	r3, [pc, #324]	@ (8001be0 <parse_ascii+0x528>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
						break;
 8001a9e:	e12c      	b.n	8001cfa <parse_ascii+0x642>
					};
				}
			} else if (strcmp(cmd, "ECHO") == 0) {
 8001aa0:	4953      	ldr	r1, [pc, #332]	@ (8001bf0 <parse_ascii+0x538>)
 8001aa2:	4851      	ldr	r0, [pc, #324]	@ (8001be8 <parse_ascii+0x530>)
 8001aa4:	f7fe fbbc 	bl	8000220 <strcmp>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d122      	bne.n	8001af4 <parse_ascii+0x43c>
				if (pflag == 0) {
 8001aae:	4b48      	ldr	r3, [pc, #288]	@ (8001bd0 <parse_ascii+0x518>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d103      	bne.n	8001ac0 <parse_ascii+0x408>
					ret = CMR_MISSINGPARAMETER;
 8001ab8:	4b49      	ldr	r3, [pc, #292]	@ (8001be0 <parse_ascii+0x528>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e11c      	b.n	8001cfa <parse_ascii+0x642>
				} else {
					if (val == 0) {
 8001ac0:	4b42      	ldr	r3, [pc, #264]	@ (8001bcc <parse_ascii+0x514>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d106      	bne.n	8001ad6 <parse_ascii+0x41e>
						echo = 0;
 8001ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf4 <parse_ascii+0x53c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001ace:	4b44      	ldr	r3, [pc, #272]	@ (8001be0 <parse_ascii+0x528>)
 8001ad0:	2280      	movs	r2, #128	@ 0x80
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	e111      	b.n	8001cfa <parse_ascii+0x642>
					} else if (val == 1) {
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bcc <parse_ascii+0x514>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d106      	bne.n	8001aec <parse_ascii+0x434>
						echo = 1;
 8001ade:	4b45      	ldr	r3, [pc, #276]	@ (8001bf4 <parse_ascii+0x53c>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001ae4:	4b3e      	ldr	r3, [pc, #248]	@ (8001be0 <parse_ascii+0x528>)
 8001ae6:	2280      	movs	r2, #128	@ 0x80
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	e106      	b.n	8001cfa <parse_ascii+0x642>
					} else {
						ret = CMR_PARAMETERINVALID;
 8001aec:	4b3c      	ldr	r3, [pc, #240]	@ (8001be0 <parse_ascii+0x528>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
 8001af2:	e102      	b.n	8001cfa <parse_ascii+0x642>
					}
				}
			} else if (strcmp(cmd, "CRLF") == 0) {
 8001af4:	4940      	ldr	r1, [pc, #256]	@ (8001bf8 <parse_ascii+0x540>)
 8001af6:	483c      	ldr	r0, [pc, #240]	@ (8001be8 <parse_ascii+0x530>)
 8001af8:	f7fe fb92 	bl	8000220 <strcmp>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d138      	bne.n	8001b74 <parse_ascii+0x4bc>
				if (pflag == 0) {
 8001b02:	4b33      	ldr	r3, [pc, #204]	@ (8001bd0 <parse_ascii+0x518>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d103      	bne.n	8001b14 <parse_ascii+0x45c>
					ret = CMR_MISSINGPARAMETER;
 8001b0c:	4b34      	ldr	r3, [pc, #208]	@ (8001be0 <parse_ascii+0x528>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	701a      	strb	r2, [r3, #0]
 8001b12:	e0f2      	b.n	8001cfa <parse_ascii+0x642>
				} else {
					if (val == 0) {
 8001b14:	4b2d      	ldr	r3, [pc, #180]	@ (8001bcc <parse_ascii+0x514>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d106      	bne.n	8001b2a <parse_ascii+0x472>
						crlf = 0;
 8001b1c:	4b37      	ldr	r3, [pc, #220]	@ (8001bfc <parse_ascii+0x544>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001b22:	4b2f      	ldr	r3, [pc, #188]	@ (8001be0 <parse_ascii+0x528>)
 8001b24:	2280      	movs	r2, #128	@ 0x80
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e0e7      	b.n	8001cfa <parse_ascii+0x642>
					} else if (val == 1) {
 8001b2a:	4b28      	ldr	r3, [pc, #160]	@ (8001bcc <parse_ascii+0x514>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d106      	bne.n	8001b40 <parse_ascii+0x488>
						crlf = 1;
 8001b32:	4b32      	ldr	r3, [pc, #200]	@ (8001bfc <parse_ascii+0x544>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001b38:	4b29      	ldr	r3, [pc, #164]	@ (8001be0 <parse_ascii+0x528>)
 8001b3a:	2280      	movs	r2, #128	@ 0x80
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	e0dc      	b.n	8001cfa <parse_ascii+0x642>
					} else if (val == 2) {
 8001b40:	4b22      	ldr	r3, [pc, #136]	@ (8001bcc <parse_ascii+0x514>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d106      	bne.n	8001b56 <parse_ascii+0x49e>
						crlf = 2;
 8001b48:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <parse_ascii+0x544>)
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001b4e:	4b24      	ldr	r3, [pc, #144]	@ (8001be0 <parse_ascii+0x528>)
 8001b50:	2280      	movs	r2, #128	@ 0x80
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	e0d1      	b.n	8001cfa <parse_ascii+0x642>
					} else if (val == 3) {
 8001b56:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <parse_ascii+0x514>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d106      	bne.n	8001b6c <parse_ascii+0x4b4>
						crlf = 3;
 8001b5e:	4b27      	ldr	r3, [pc, #156]	@ (8001bfc <parse_ascii+0x544>)
 8001b60:	2203      	movs	r2, #3
 8001b62:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001b64:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <parse_ascii+0x528>)
 8001b66:	2280      	movs	r2, #128	@ 0x80
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	e0c6      	b.n	8001cfa <parse_ascii+0x642>
					} else {
						ret = CMR_PARAMETERINVALID;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <parse_ascii+0x528>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e0c2      	b.n	8001cfa <parse_ascii+0x642>
					}
				}
			} else if (strcmp(cmd, "SLOPPY") == 0) {
 8001b74:	4922      	ldr	r1, [pc, #136]	@ (8001c00 <parse_ascii+0x548>)
 8001b76:	481c      	ldr	r0, [pc, #112]	@ (8001be8 <parse_ascii+0x530>)
 8001b78:	f7fe fb52 	bl	8000220 <strcmp>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d142      	bne.n	8001c08 <parse_ascii+0x550>
				if (pflag == 0) {
 8001b82:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <parse_ascii+0x518>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d103      	bne.n	8001b94 <parse_ascii+0x4dc>
					ret = CMR_MISSINGPARAMETER;
 8001b8c:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <parse_ascii+0x528>)
 8001b8e:	220c      	movs	r2, #12
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	e0b2      	b.n	8001cfa <parse_ascii+0x642>
				} else {
					if (val == 0) {
 8001b94:	4b0d      	ldr	r3, [pc, #52]	@ (8001bcc <parse_ascii+0x514>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d106      	bne.n	8001baa <parse_ascii+0x4f2>
						sloppy = 0;
 8001b9c:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <parse_ascii+0x54c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <parse_ascii+0x528>)
 8001ba4:	2280      	movs	r2, #128	@ 0x80
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	e0a7      	b.n	8001cfa <parse_ascii+0x642>
					} else if (val == 1) {
 8001baa:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <parse_ascii+0x514>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d106      	bne.n	8001bc0 <parse_ascii+0x508>
						sloppy = 1;
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <parse_ascii+0x54c>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
						ret = CMR_SUCCESSFULL;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <parse_ascii+0x528>)
 8001bba:	2280      	movs	r2, #128	@ 0x80
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	e09c      	b.n	8001cfa <parse_ascii+0x642>
					} else {
						ret = CMR_PARAMETERINVALID;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <parse_ascii+0x528>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e098      	b.n	8001cfa <parse_ascii+0x642>
 8001bc8:	200002b6 	.word	0x200002b6
 8001bcc:	200002d8 	.word	0x200002d8
 8001bd0:	200002dc 	.word	0x200002dc
 8001bd4:	200002de 	.word	0x200002de
 8001bd8:	200002dd 	.word	0x200002dd
 8001bdc:	20000006 	.word	0x20000006
 8001be0:	200002df 	.word	0x200002df
 8001be4:	0800a7b8 	.word	0x0800a7b8
 8001be8:	200002bc 	.word	0x200002bc
 8001bec:	2000028d 	.word	0x2000028d
 8001bf0:	0800a7c0 	.word	0x0800a7c0
 8001bf4:	2000028f 	.word	0x2000028f
 8001bf8:	0800a7c8 	.word	0x0800a7c8
 8001bfc:	2000028e 	.word	0x2000028e
 8001c00:	0800a7d0 	.word	0x0800a7d0
 8001c04:	20000290 	.word	0x20000290
					}
				}
			} else if (strcmp(cmd, "IBL") == 0) {
 8001c08:	495b      	ldr	r1, [pc, #364]	@ (8001d78 <parse_ascii+0x6c0>)
 8001c0a:	485c      	ldr	r0, [pc, #368]	@ (8001d7c <parse_ascii+0x6c4>)
 8001c0c:	f7fe fb08 	bl	8000220 <strcmp>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10f      	bne.n	8001c36 <parse_ascii+0x57e>
				verbose = 2;
 8001c16:	4b5a      	ldr	r3, [pc, #360]	@ (8001d80 <parse_ascii+0x6c8>)
 8001c18:	2202      	movs	r2, #2
 8001c1a:	701a      	strb	r2, [r3, #0]
				echo = 1;
 8001c1c:	4b59      	ldr	r3, [pc, #356]	@ (8001d84 <parse_ascii+0x6cc>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
				crlf = 3;
 8001c22:	4b59      	ldr	r3, [pc, #356]	@ (8001d88 <parse_ascii+0x6d0>)
 8001c24:	2203      	movs	r2, #3
 8001c26:	701a      	strb	r2, [r3, #0]
				sloppy = 1;
 8001c28:	4b58      	ldr	r3, [pc, #352]	@ (8001d8c <parse_ascii+0x6d4>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
				ret = CMR_SUCCESSFULL;
 8001c2e:	4b58      	ldr	r3, [pc, #352]	@ (8001d90 <parse_ascii+0x6d8>)
 8001c30:	2280      	movs	r2, #128	@ 0x80
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	e061      	b.n	8001cfa <parse_ascii+0x642>
			} else if (strcmp(cmd, "") == 0) {
 8001c36:	4b51      	ldr	r3, [pc, #324]	@ (8001d7c <parse_ascii+0x6c4>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d103      	bne.n	8001c46 <parse_ascii+0x58e>
				ret = CMR_SEMICOLONONLY;
 8001c3e:	4b54      	ldr	r3, [pc, #336]	@ (8001d90 <parse_ascii+0x6d8>)
 8001c40:	22ff      	movs	r2, #255	@ 0xff
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	e059      	b.n	8001cfa <parse_ascii+0x642>
			}
			//die anderen ASCII-Befehle werden per Binäre-Suche-Funktion eine interne Befehlnummer und ein Attribut zugeordnet
			//und in den Stack eingefügt.
			else {
				Binary_Search(ASCII_CMD_MAX, cmd, &cmd_index);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	494b      	ldr	r1, [pc, #300]	@ (8001d7c <parse_ascii+0x6c4>)
 8001c4e:	201d      	movs	r0, #29
 8001c50:	f000 fb68 	bl	8002324 <Binary_Search>
				//uart0_puts(cmd);
				//uart0_puti(cmd_index);

				if (cmd_index != BINARY_INDEX_MAX) {
 8001c54:	8abb      	ldrh	r3, [r7, #20]
 8001c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c5a:	d04b      	beq.n	8001cf4 <parse_ascii+0x63c>
					stack_data.cmd_sender = Q_RS232_ASCII;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	713b      	strb	r3, [r7, #4]
					stack_data.cmd_index = cmd_index;
 8001c60:	8abb      	ldrh	r3, [r7, #20]
 8001c62:	80fb      	strh	r3, [r7, #6]
					stack_data.cmd_ack = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	723b      	strb	r3, [r7, #8]
					stack_data.next = NONEXT;
 8001c68:	23ff      	movs	r3, #255	@ 0xff
 8001c6a:	743b      	strb	r3, [r7, #16]
					stack_data.prio = PRIO_LEVEL1;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	747b      	strb	r3, [r7, #17]

					if (cmd_index & 1) {
 8001c70:	8abb      	ldrh	r3, [r7, #20]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d02f      	beq.n	8001cda <parse_ascii+0x622>

						if ((pflag == 1)) {
 8001c7a:	4b46      	ldr	r3, [pc, #280]	@ (8001d94 <parse_ascii+0x6dc>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d116      	bne.n	8001cb2 <parse_ascii+0x5fa>
							if (negativ_zahl) {
 8001c84:	4b44      	ldr	r3, [pc, #272]	@ (8001d98 <parse_ascii+0x6e0>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <parse_ascii+0x5de>
								stack_data.parameter = -val;
 8001c8c:	4b43      	ldr	r3, [pc, #268]	@ (8001d9c <parse_ascii+0x6e4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	425b      	negs	r3, r3
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e002      	b.n	8001c9c <parse_ascii+0x5e4>
							} else {
								stack_data.parameter = val;
 8001c96:	4b41      	ldr	r3, [pc, #260]	@ (8001d9c <parse_ascii+0x6e4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]
							}

							stack_data.rwflg = WRITE;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	74bb      	strb	r3, [r7, #18]
							ret = stack_insert_sero(stack_data);
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca4:	f001 f858 	bl	8002d58 <stack_insert_sero>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b38      	ldr	r3, [pc, #224]	@ (8001d90 <parse_ascii+0x6d8>)
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	e023      	b.n	8001cfa <parse_ascii+0x642>
							//uart0_puti(ret);
							//uart0_puti(stack_data.cmd_index);

						} else if (cmd_index == CMD_RESET_ERROR) {
 8001cb2:	8abb      	ldrh	r3, [r7, #20]
 8001cb4:	2b09      	cmp	r3, #9
 8001cb6:	d10c      	bne.n	8001cd2 <parse_ascii+0x61a>
							stack_data.parameter = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
							stack_data.rwflg = WRITE;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	74bb      	strb	r3, [r7, #18]
							ret = stack_insert_sero(stack_data);
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc4:	f001 f848 	bl	8002d58 <stack_insert_sero>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b30      	ldr	r3, [pc, #192]	@ (8001d90 <parse_ascii+0x6d8>)
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	e013      	b.n	8001cfa <parse_ascii+0x642>
						} else {
							{
								ret = CMR_MISSINGPARAMETER;
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d90 <parse_ascii+0x6d8>)
 8001cd4:	220c      	movs	r2, #12
 8001cd6:	701a      	strb	r2, [r3, #0]
 8001cd8:	e00f      	b.n	8001cfa <parse_ascii+0x642>
							}
						};
					} else  //Lese-Operation
					{
						stack_data.parameter = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
						stack_data.rwflg = READ;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	74bb      	strb	r3, [r7, #18]
						ret = stack_insert_sero(stack_data);
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ce6:	f001 f837 	bl	8002d58 <stack_insert_sero>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b28      	ldr	r3, [pc, #160]	@ (8001d90 <parse_ascii+0x6d8>)
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e002      	b.n	8001cfa <parse_ascii+0x642>
					};

				} else //Falls cmd_index = ASCII_CMD_MAX, d.h. der Befehl ist ungültig.
				{
					ret = CMR_UNKNOWNCOMMAND;
 8001cf4:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <parse_ascii+0x6d8>)
 8001cf6:	2206      	movs	r2, #6
 8001cf8:	701a      	strb	r2, [r3, #0]
				};
			}
			;

			if (ret != STACK_CMDINSTACK) {
 8001cfa:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <parse_ascii+0x6d8>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b11      	cmp	r3, #17
 8001d02:	d00b      	beq.n	8001d1c <parse_ascii+0x664>
				output_ascii_cmdack(verbose, crlf, ret);
 8001d04:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <parse_ascii+0x6c8>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d88 <parse_ascii+0x6d0>)
 8001d0c:	7812      	ldrb	r2, [r2, #0]
 8001d0e:	b2d1      	uxtb	r1, r2
 8001d10:	4a1f      	ldr	r2, [pc, #124]	@ (8001d90 <parse_ascii+0x6d8>)
 8001d12:	7812      	ldrb	r2, [r2, #0]
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f8de 	bl	8001ed8 <output_ascii_cmdack>
			}
			;

			uartRB_KickTx(&usart3_rb);
 8001d1c:	4820      	ldr	r0, [pc, #128]	@ (8001da0 <parse_ascii+0x6e8>)
 8001d1e:	f001 fb55 	bl	80033cc <uartRB_KickTx>
			strcpy(cmd, "");
 8001d22:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <parse_ascii+0x6c4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
			val = 0;
 8001d28:	4b1c      	ldr	r3, [pc, #112]	@ (8001d9c <parse_ascii+0x6e4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
			ret = 0;
 8001d2e:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <parse_ascii+0x6d8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
			pflag = 0;
 8001d34:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <parse_ascii+0x6dc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
			eflag = 0;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <parse_ascii+0x6ec>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
			negativ_zahl = 0;
 8001d40:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <parse_ascii+0x6e0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]

			a_state = get_cmd;
 8001d46:	4b18      	ldr	r3, [pc, #96]	@ (8001da8 <parse_ascii+0x6f0>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
			break;
 8001d4c:	e008      	b.n	8001d60 <parse_ascii+0x6a8>

		default:
			a_state = get_cmd;
 8001d4e:	4b16      	ldr	r3, [pc, #88]	@ (8001da8 <parse_ascii+0x6f0>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
			break;
 8001d54:	e004      	b.n	8001d60 <parse_ascii+0x6a8>
			break;
 8001d56:	bf00      	nop
 8001d58:	e002      	b.n	8001d60 <parse_ascii+0x6a8>
			break;
 8001d5a:	bf00      	nop
 8001d5c:	e000      	b.n	8001d60 <parse_ascii+0x6a8>
			break;
 8001d5e:	bf00      	nop

		//	char1[0]=nc;
		//  if(nzeichen >0)	uart1_put(char1, 1);
		//	versandstart1();

	} while (ptr < nzeichen);
 8001d60:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <parse_ascii+0x6f4>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	7dfa      	ldrb	r2, [r7, #23]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	f4ff acad 	bcc.w	80016c8 <parse_ascii+0x10>
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	0800a7d8 	.word	0x0800a7d8
 8001d7c:	200002bc 	.word	0x200002bc
 8001d80:	2000028d 	.word	0x2000028d
 8001d84:	2000028f 	.word	0x2000028f
 8001d88:	2000028e 	.word	0x2000028e
 8001d8c:	20000290 	.word	0x20000290
 8001d90:	200002df 	.word	0x200002df
 8001d94:	200002dc 	.word	0x200002dc
 8001d98:	200002de 	.word	0x200002de
 8001d9c:	200002d8 	.word	0x200002d8
 8001da0:	20000f64 	.word	0x20000f64
 8001da4:	200002dd 	.word	0x200002dd
 8001da8:	20000006 	.word	0x20000006
 8001dac:	200002a3 	.word	0x200002a3

08001db0 <serialSendAnswer>:

void serialSendAnswer(uint8_t *message) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t n = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	77bb      	strb	r3, [r7, #30]
	uint8_t checksum = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	777b      	strb	r3, [r7, #29]
	char buffer[RMT_MAX_PAKET_LENGTH + 1];

	if ((message[2] == 0x00) || (message[2] == 0x02) || (message[2] == 0x03)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00e      	beq.n	8001de8 <serialSendAnswer+0x38>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3302      	adds	r3, #2
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d009      	beq.n	8001de8 <serialSendAnswer+0x38>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d004      	beq.n	8001de8 <serialSendAnswer+0x38>
			|| (message[2] == 0x0A)) //für die Kompabilität vom altem MatchingCube-Programm. später zu löschen
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3302      	adds	r3, #2
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b0a      	cmp	r3, #10
 8001de6:	d108      	bne.n	8001dfa <serialSendAnswer+0x4a>
			{
		message[2] |= 0x80;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3302      	adds	r3, #2
 8001dec:	781a      	ldrb	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3302      	adds	r3, #2
 8001df2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]
	}

	buffer[n++] = RMT_DLE;
 8001dfa:	7fbb      	ldrb	r3, [r7, #30]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	77ba      	strb	r2, [r7, #30]
 8001e00:	3320      	adds	r3, #32
 8001e02:	443b      	add	r3, r7
 8001e04:	223d      	movs	r2, #61	@ 0x3d
 8001e06:	f803 2c14 	strb.w	r2, [r3, #-20]
	buffer[n++] = RMT_SOT;
 8001e0a:	7fbb      	ldrb	r3, [r7, #30]
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	77ba      	strb	r2, [r7, #30]
 8001e10:	3320      	adds	r3, #32
 8001e12:	443b      	add	r3, r7
 8001e14:	2253      	movs	r2, #83	@ 0x53
 8001e16:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < (CMR_DATAPAKET_LENGTH - 1); i++) {
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	77fb      	strb	r3, [r7, #31]
 8001e1e:	e025      	b.n	8001e6c <serialSendAnswer+0xbc>
		buffer[n++] = message[i];
 8001e20:	7ffb      	ldrb	r3, [r7, #31]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	441a      	add	r2, r3
 8001e26:	7fbb      	ldrb	r3, [r7, #30]
 8001e28:	1c59      	adds	r1, r3, #1
 8001e2a:	77b9      	strb	r1, [r7, #30]
 8001e2c:	7812      	ldrb	r2, [r2, #0]
 8001e2e:	3320      	adds	r3, #32
 8001e30:	443b      	add	r3, r7
 8001e32:	f803 2c14 	strb.w	r2, [r3, #-20]
		if (message[i] == RMT_DLE) {
 8001e36:	7ffb      	ldrb	r3, [r7, #31]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b3d      	cmp	r3, #61	@ 0x3d
 8001e40:	d10a      	bne.n	8001e58 <serialSendAnswer+0xa8>
			buffer[n++] = message[i];
 8001e42:	7ffb      	ldrb	r3, [r7, #31]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	441a      	add	r2, r3
 8001e48:	7fbb      	ldrb	r3, [r7, #30]
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	77b9      	strb	r1, [r7, #30]
 8001e4e:	7812      	ldrb	r2, [r2, #0]
 8001e50:	3320      	adds	r3, #32
 8001e52:	443b      	add	r3, r7
 8001e54:	f803 2c14 	strb.w	r2, [r3, #-20]
			// Die Prüfsumme erstreckt sich nur noch über die NETTO-Payload!
			//checksum += message[i];
		}
		checksum += message[i];
 8001e58:	7ffb      	ldrb	r3, [r7, #31]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	781a      	ldrb	r2, [r3, #0]
 8001e60:	7f7b      	ldrb	r3, [r7, #29]
 8001e62:	4413      	add	r3, r2
 8001e64:	777b      	strb	r3, [r7, #29]
	for (i = 0; i < (CMR_DATAPAKET_LENGTH - 1); i++) {
 8001e66:	7ffb      	ldrb	r3, [r7, #31]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	77fb      	strb	r3, [r7, #31]
 8001e6c:	7ffb      	ldrb	r3, [r7, #31]
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d9d6      	bls.n	8001e20 <serialSendAnswer+0x70>
	}
	buffer[n++] = checksum;
 8001e72:	7fbb      	ldrb	r3, [r7, #30]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	77ba      	strb	r2, [r7, #30]
 8001e78:	3320      	adds	r3, #32
 8001e7a:	443b      	add	r3, r7
 8001e7c:	7f7a      	ldrb	r2, [r7, #29]
 8001e7e:	f803 2c14 	strb.w	r2, [r3, #-20]
	if (checksum == RMT_DLE) {
 8001e82:	7f7b      	ldrb	r3, [r7, #29]
 8001e84:	2b3d      	cmp	r3, #61	@ 0x3d
 8001e86:	d107      	bne.n	8001e98 <serialSendAnswer+0xe8>
		buffer[n++] = checksum;
 8001e88:	7fbb      	ldrb	r3, [r7, #30]
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	77ba      	strb	r2, [r7, #30]
 8001e8e:	3320      	adds	r3, #32
 8001e90:	443b      	add	r3, r7
 8001e92:	7f7a      	ldrb	r2, [r7, #29]
 8001e94:	f803 2c14 	strb.w	r2, [r3, #-20]
	}
	buffer[n++] = RMT_DLE;
 8001e98:	7fbb      	ldrb	r3, [r7, #30]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	77ba      	strb	r2, [r7, #30]
 8001e9e:	3320      	adds	r3, #32
 8001ea0:	443b      	add	r3, r7
 8001ea2:	223d      	movs	r2, #61	@ 0x3d
 8001ea4:	f803 2c14 	strb.w	r2, [r3, #-20]
	buffer[n++] = RMT_EOT;
 8001ea8:	7fbb      	ldrb	r3, [r7, #30]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	77ba      	strb	r2, [r7, #30]
 8001eae:	3320      	adds	r3, #32
 8001eb0:	443b      	add	r3, r7
 8001eb2:	2245      	movs	r2, #69	@ 0x45
 8001eb4:	f803 2c14 	strb.w	r2, [r3, #-20]

	uartRB_Put(&usart3_rb, buffer, n);
 8001eb8:	7fba      	ldrb	r2, [r7, #30]
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4804      	ldr	r0, [pc, #16]	@ (8001ed4 <serialSendAnswer+0x124>)
 8001ec2:	f001 fac9 	bl	8003458 <uartRB_Put>
	uartRB_KickTx(&usart3_rb);
 8001ec6:	4803      	ldr	r0, [pc, #12]	@ (8001ed4 <serialSendAnswer+0x124>)
 8001ec8:	f001 fa80 	bl	80033cc <uartRB_KickTx>
}
 8001ecc:	bf00      	nop
 8001ece:	3720      	adds	r7, #32
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000f64 	.word	0x20000f64

08001ed8 <output_ascii_cmdack>:

void output_ascii_cmdack(uint8_t verbose_flg, uint8_t crlf_flg, uint8_t cmd_ack) {
 8001ed8:	b5b0      	push	{r4, r5, r7, lr}
 8001eda:	b09c      	sub	sp, #112	@ 0x70
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	71bb      	strb	r3, [r7, #6]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	717b      	strb	r3, [r7, #5]

	if (verbose_flg > 0) {
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 81e3 	beq.w	80022b8 <output_ascii_cmdack+0x3e0>
		if (cmd_ack == CMR_SUCCESSFULL) {
 8001ef2:	797b      	ldrb	r3, [r7, #5]
 8001ef4:	2b80      	cmp	r3, #128	@ 0x80
 8001ef6:	d105      	bne.n	8001f04 <output_ascii_cmdack+0x2c>
			uartRB_Put(&usart3_rb, ">OK;", 4);
 8001ef8:	2204      	movs	r2, #4
 8001efa:	49ba      	ldr	r1, [pc, #744]	@ (80021e4 <output_ascii_cmdack+0x30c>)
 8001efc:	48ba      	ldr	r0, [pc, #744]	@ (80021e8 <output_ascii_cmdack+0x310>)
 8001efe:	f001 faab 	bl	8003458 <uartRB_Put>
 8001f02:	e1e8      	b.n	80022d6 <output_ascii_cmdack+0x3fe>
		} else if (cmd_ack == CMR_SEMICOLONONLY) {
 8001f04:	797b      	ldrb	r3, [r7, #5]
 8001f06:	2bff      	cmp	r3, #255	@ 0xff
 8001f08:	d105      	bne.n	8001f16 <output_ascii_cmdack+0x3e>
			uartRB_Put(&usart3_rb, ";", 1);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	49b7      	ldr	r1, [pc, #732]	@ (80021ec <output_ascii_cmdack+0x314>)
 8001f0e:	48b6      	ldr	r0, [pc, #728]	@ (80021e8 <output_ascii_cmdack+0x310>)
 8001f10:	f001 faa2 	bl	8003458 <uartRB_Put>
 8001f14:	e1df      	b.n	80022d6 <output_ascii_cmdack+0x3fe>
		} else {
			if (verbose_flg == 1) {
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d143      	bne.n	8001fa4 <output_ascii_cmdack+0xcc>
				char tmp[10];
				char tmp2[12];
				sprintf(tmp, "%3.3u", (cmd_ack & 0x7F));
 8001f1c:	797b      	ldrb	r3, [r7, #5]
 8001f1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f22:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f26:	49b2      	ldr	r1, [pc, #712]	@ (80021f0 <output_ascii_cmdack+0x318>)
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f007 ff87 	bl	8009e3c <siprintf>

				if (cmd_ack > 128) {
 8001f2e:	797b      	ldrb	r3, [r7, #5]
 8001f30:	2b80      	cmp	r3, #128	@ 0x80
 8001f32:	d909      	bls.n	8001f48 <output_ascii_cmdack+0x70>
					strcpy(tmp2, ">W");
 8001f34:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f38:	4aae      	ldr	r2, [pc, #696]	@ (80021f4 <output_ascii_cmdack+0x31c>)
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	8019      	strh	r1, [r3, #0]
 8001f40:	3302      	adds	r3, #2
 8001f42:	0c12      	lsrs	r2, r2, #16
 8001f44:	701a      	strb	r2, [r3, #0]
 8001f46:	e008      	b.n	8001f5a <output_ascii_cmdack+0x82>
				} else {
					strcpy(tmp2, ">E");
 8001f48:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f4c:	4aaa      	ldr	r2, [pc, #680]	@ (80021f8 <output_ascii_cmdack+0x320>)
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	4611      	mov	r1, r2
 8001f52:	8019      	strh	r1, [r3, #0]
 8001f54:	3302      	adds	r3, #2
 8001f56:	0c12      	lsrs	r2, r2, #16
 8001f58:	701a      	strb	r2, [r3, #0]
				}
				strcat(tmp2, tmp);
 8001f5a:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001f5e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f007 ff91 	bl	8009e8c <strcat>
				strcat(tmp2, ";");
 8001f6a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe f960 	bl	8000234 <strlen>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f7c:	4413      	add	r3, r2
 8001f7e:	499b      	ldr	r1, [pc, #620]	@ (80021ec <output_ascii_cmdack+0x314>)
 8001f80:	461a      	mov	r2, r3
 8001f82:	460b      	mov	r3, r1
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	8013      	strh	r3, [r2, #0]
				uartRB_Put(&usart3_rb, tmp2, strlen(tmp2));
 8001f88:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe f951 	bl	8000234 <strlen>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4892      	ldr	r0, [pc, #584]	@ (80021e8 <output_ascii_cmdack+0x310>)
 8001f9e:	f001 fa5b 	bl	8003458 <uartRB_Put>
 8001fa2:	e198      	b.n	80022d6 <output_ascii_cmdack+0x3fe>
			} else if (verbose_flg == 2) {
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	f040 8195 	bne.w	80022d6 <output_ascii_cmdack+0x3fe>
				char tmp[35];
				char tmp2[40];
				if (cmd_ack > 128) {
 8001fac:	797b      	ldrb	r3, [r7, #5]
 8001fae:	2b80      	cmp	r3, #128	@ 0x80
 8001fb0:	d904      	bls.n	8001fbc <output_ascii_cmdack+0xe4>
					strcpy(tmp2, ">W:");
 8001fb2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001fb6:	4a91      	ldr	r2, [pc, #580]	@ (80021fc <output_ascii_cmdack+0x324>)
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	e003      	b.n	8001fc4 <output_ascii_cmdack+0xec>
				} else {
					strcpy(tmp2, ">E:");
 8001fbc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001fc0:	4a8f      	ldr	r2, [pc, #572]	@ (8002200 <output_ascii_cmdack+0x328>)
 8001fc2:	601a      	str	r2, [r3, #0]
				}

				switch (cmd_ack & 0xFF)          //(cmd_ack & 0x7F)
 8001fc4:	797b      	ldrb	r3, [r7, #5]
 8001fc6:	2b8a      	cmp	r3, #138	@ 0x8a
 8001fc8:	f000 8087 	beq.w	80020da <output_ascii_cmdack+0x202>
 8001fcc:	2b8a      	cmp	r3, #138	@ 0x8a
 8001fce:	f300 8144 	bgt.w	800225a <output_ascii_cmdack+0x382>
 8001fd2:	2b83      	cmp	r3, #131	@ 0x83
 8001fd4:	d075      	beq.n	80020c2 <output_ascii_cmdack+0x1ea>
 8001fd6:	2b83      	cmp	r3, #131	@ 0x83
 8001fd8:	f300 813f 	bgt.w	800225a <output_ascii_cmdack+0x382>
 8001fdc:	2b1f      	cmp	r3, #31
 8001fde:	dc49      	bgt.n	8002074 <output_ascii_cmdack+0x19c>
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f2c0 813a 	blt.w	800225a <output_ascii_cmdack+0x382>
 8001fe6:	2b1f      	cmp	r3, #31
 8001fe8:	f200 8137 	bhi.w	800225a <output_ascii_cmdack+0x382>
 8001fec:	a201      	add	r2, pc, #4	@ (adr r2, 8001ff4 <output_ascii_cmdack+0x11c>)
 8001fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff2:	bf00      	nop
 8001ff4:	0800207b 	.word	0x0800207b
 8001ff8:	0800208f 	.word	0x0800208f
 8001ffc:	0800225b 	.word	0x0800225b
 8002000:	0800225b 	.word	0x0800225b
 8002004:	0800225b 	.word	0x0800225b
 8002008:	0800225b 	.word	0x0800225b
 800200c:	08002107 	.word	0x08002107
 8002010:	0800211b 	.word	0x0800211b
 8002014:	0800212d 	.word	0x0800212d
 8002018:	08002195 	.word	0x08002195
 800201c:	0800225b 	.word	0x0800225b
 8002020:	080020ef 	.word	0x080020ef
 8002024:	080021a9 	.word	0x080021a9
 8002028:	0800214d 	.word	0x0800214d
 800202c:	0800215f 	.word	0x0800215f
 8002030:	0800217b 	.word	0x0800217b
 8002034:	080021c5 	.word	0x080021c5
 8002038:	0800225b 	.word	0x0800225b
 800203c:	0800225b 	.word	0x0800225b
 8002040:	0800225b 	.word	0x0800225b
 8002044:	0800225b 	.word	0x0800225b
 8002048:	0800225b 	.word	0x0800225b
 800204c:	0800225b 	.word	0x0800225b
 8002050:	0800225b 	.word	0x0800225b
 8002054:	0800225b 	.word	0x0800225b
 8002058:	0800225b 	.word	0x0800225b
 800205c:	0800225b 	.word	0x0800225b
 8002060:	0800225b 	.word	0x0800225b
 8002064:	0800225b 	.word	0x0800225b
 8002068:	0800225b 	.word	0x0800225b
 800206c:	0800225b 	.word	0x0800225b
 8002070:	08002241 	.word	0x08002241
 8002074:	2b82      	cmp	r3, #130	@ 0x82
 8002076:	d018      	beq.n	80020aa <output_ascii_cmdack+0x1d2>
 8002078:	e0ef      	b.n	800225a <output_ascii_cmdack+0x382>
				{
				case CMR_COMMANDONDEMAND:
					strcpy(tmp, "No Answer!");
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	4a61      	ldr	r2, [pc, #388]	@ (8002204 <output_ascii_cmdack+0x32c>)
 8002080:	ca07      	ldmia	r2, {r0, r1, r2}
 8002082:	c303      	stmia	r3!, {r0, r1}
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	3302      	adds	r3, #2
 8002088:	0c12      	lsrs	r2, r2, #16
 800208a:	701a      	strb	r2, [r3, #0]
					break;
 800208c:	e0ef      	b.n	800226e <output_ascii_cmdack+0x396>

				case CMR_PARAMETERINVALID:
					strcpy(tmp, "Parameter Invalid!");
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	4a5d      	ldr	r2, [pc, #372]	@ (8002208 <output_ascii_cmdack+0x330>)
 8002094:	461c      	mov	r4, r3
 8002096:	4615      	mov	r5, r2
 8002098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800209a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800209c:	682b      	ldr	r3, [r5, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	8022      	strh	r2, [r4, #0]
 80020a2:	3402      	adds	r4, #2
 80020a4:	0c1b      	lsrs	r3, r3, #16
 80020a6:	7023      	strb	r3, [r4, #0]
					break;
 80020a8:	e0e1      	b.n	800226e <output_ascii_cmdack+0x396>

				case CMR_PARAMETERCLIPEDMIN:
					strcpy(tmp, "Parameter Clipped to Minimum!");
 80020aa:	f107 030c 	add.w	r3, r7, #12
 80020ae:	4a57      	ldr	r2, [pc, #348]	@ (800220c <output_ascii_cmdack+0x334>)
 80020b0:	461c      	mov	r4, r3
 80020b2:	4615      	mov	r5, r2
 80020b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020bc:	c407      	stmia	r4!, {r0, r1, r2}
 80020be:	8023      	strh	r3, [r4, #0]
					break;
 80020c0:	e0d5      	b.n	800226e <output_ascii_cmdack+0x396>

				case CMR_PARAMETERCLIPEDMAX:
					strcpy(tmp, "Parameter Clipped to Maximum!");
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	4a52      	ldr	r2, [pc, #328]	@ (8002210 <output_ascii_cmdack+0x338>)
 80020c8:	461c      	mov	r4, r3
 80020ca:	4615      	mov	r5, r2
 80020cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020d4:	c407      	stmia	r4!, {r0, r1, r2}
 80020d6:	8023      	strh	r3, [r4, #0]
					break;
 80020d8:	e0c9      	b.n	800226e <output_ascii_cmdack+0x396>

				case CMR_PARAMETERADJUSTED:
					strcpy(tmp, "Parameter Adjusted!");
 80020da:	f107 030c 	add.w	r3, r7, #12
 80020de:	4a4d      	ldr	r2, [pc, #308]	@ (8002214 <output_ascii_cmdack+0x33c>)
 80020e0:	461c      	mov	r4, r3
 80020e2:	4615      	mov	r5, r2
 80020e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020e8:	682b      	ldr	r3, [r5, #0]
 80020ea:	6023      	str	r3, [r4, #0]
					break;
 80020ec:	e0bf      	b.n	800226e <output_ascii_cmdack+0x396>

				case CMR_WRONGPARAMETERFORMAT:
					strcpy(tmp, "Wrong Parameter Format!");
 80020ee:	f107 030c 	add.w	r3, r7, #12
 80020f2:	4a49      	ldr	r2, [pc, #292]	@ (8002218 <output_ascii_cmdack+0x340>)
 80020f4:	461c      	mov	r4, r3
 80020f6:	4615      	mov	r5, r2
 80020f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002100:	e884 0003 	stmia.w	r4, {r0, r1}
					break;
 8002104:	e0b3      	b.n	800226e <output_ascii_cmdack+0x396>

				case CMR_UNKNOWNCOMMAND:
					strcpy(tmp, "Unknown Command!");
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	4a44      	ldr	r2, [pc, #272]	@ (800221c <output_ascii_cmdack+0x344>)
 800210c:	461c      	mov	r4, r3
 800210e:	4615      	mov	r5, r2
 8002110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002114:	682b      	ldr	r3, [r5, #0]
 8002116:	7023      	strb	r3, [r4, #0]
					break;
 8002118:	e0a9      	b.n	800226e <output_ascii_cmdack+0x396>

				case CMR_COMMANDDENIED:
					strcpy(tmp, "Command Denied!");
 800211a:	f107 030c 	add.w	r3, r7, #12
 800211e:	4a40      	ldr	r2, [pc, #256]	@ (8002220 <output_ascii_cmdack+0x348>)
 8002120:	461c      	mov	r4, r3
 8002122:	4613      	mov	r3, r2
 8002124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002126:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					break;
 800212a:	e0a0      	b.n	800226e <output_ascii_cmdack+0x396>

				case CMR_COMMANDNOTSUPPORTED:
					strcpy(tmp, "Command Not Supported!");
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	4a3c      	ldr	r2, [pc, #240]	@ (8002224 <output_ascii_cmdack+0x34c>)
 8002132:	461c      	mov	r4, r3
 8002134:	4615      	mov	r5, r2
 8002136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800213e:	6020      	str	r0, [r4, #0]
 8002140:	3404      	adds	r4, #4
 8002142:	8021      	strh	r1, [r4, #0]
 8002144:	3402      	adds	r4, #2
 8002146:	0c0b      	lsrs	r3, r1, #16
 8002148:	7023      	strb	r3, [r4, #0]
					break;
 800214a:	e090      	b.n	800226e <output_ascii_cmdack+0x396>

				case CMR_EEPROMERROR:
					strcpy(tmp, "EEPROM Error!");
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	4a35      	ldr	r2, [pc, #212]	@ (8002228 <output_ascii_cmdack+0x350>)
 8002152:	461c      	mov	r4, r3
 8002154:	4613      	mov	r3, r2
 8002156:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002158:	c407      	stmia	r4!, {r0, r1, r2}
 800215a:	8023      	strh	r3, [r4, #0]
					break;
 800215c:	e087      	b.n	800226e <output_ascii_cmdack+0x396>

				case CMR_EEPWRLOCKED:
					strcpy(tmp, "EEPROM Write Lock!");
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	4a32      	ldr	r2, [pc, #200]	@ (800222c <output_ascii_cmdack+0x354>)
 8002164:	461c      	mov	r4, r3
 8002166:	4615      	mov	r5, r2
 8002168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800216a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800216c:	682b      	ldr	r3, [r5, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	8022      	strh	r2, [r4, #0]
 8002172:	3402      	adds	r4, #2
 8002174:	0c1b      	lsrs	r3, r3, #16
 8002176:	7023      	strb	r3, [r4, #0]
					break;
 8002178:	e079      	b.n	800226e <output_ascii_cmdack+0x396>

				case CMR_WRONGOPMODE:
					strcpy(tmp, "Wrong Operation Mode!");
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	4a2c      	ldr	r2, [pc, #176]	@ (8002230 <output_ascii_cmdack+0x358>)
 8002180:	461c      	mov	r4, r3
 8002182:	4615      	mov	r5, r2
 8002184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002188:	e895 0003 	ldmia.w	r5, {r0, r1}
 800218c:	6020      	str	r0, [r4, #0]
 800218e:	3404      	adds	r4, #4
 8002190:	8021      	strh	r1, [r4, #0]
					break;
 8002192:	e06c      	b.n	800226e <output_ascii_cmdack+0x396>

				case CMR_UNITBUSY:
					strcpy(tmp, "Unit Busy!");
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	4a26      	ldr	r2, [pc, #152]	@ (8002234 <output_ascii_cmdack+0x35c>)
 800219a:	ca07      	ldmia	r2, {r0, r1, r2}
 800219c:	c303      	stmia	r3!, {r0, r1}
 800219e:	801a      	strh	r2, [r3, #0]
 80021a0:	3302      	adds	r3, #2
 80021a2:	0c12      	lsrs	r2, r2, #16
 80021a4:	701a      	strb	r2, [r3, #0]
					break;
 80021a6:	e062      	b.n	800226e <output_ascii_cmdack+0x396>

				case CMR_MISSINGPARAMETER:
					strcpy(tmp, "Missing Parameter!");
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	4a22      	ldr	r2, [pc, #136]	@ (8002238 <output_ascii_cmdack+0x360>)
 80021ae:	461c      	mov	r4, r3
 80021b0:	4615      	mov	r5, r2
 80021b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b6:	682b      	ldr	r3, [r5, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	8022      	strh	r2, [r4, #0]
 80021bc:	3402      	adds	r4, #2
 80021be:	0c1b      	lsrs	r3, r3, #16
 80021c0:	7023      	strb	r3, [r4, #0]
					break;
 80021c2:	e054      	b.n	800226e <output_ascii_cmdack+0x396>

				case CMR_OPTIONNOTINSTALLED:
					strcpy(tmp, "Required Option Not Installed!");
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	4a1c      	ldr	r2, [pc, #112]	@ (800223c <output_ascii_cmdack+0x364>)
 80021ca:	461c      	mov	r4, r3
 80021cc:	4615      	mov	r5, r2
 80021ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80021d6:	c407      	stmia	r4!, {r0, r1, r2}
 80021d8:	8023      	strh	r3, [r4, #0]
 80021da:	3402      	adds	r4, #2
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	7023      	strb	r3, [r4, #0]
					break;
 80021e0:	e045      	b.n	800226e <output_ascii_cmdack+0x396>
 80021e2:	bf00      	nop
 80021e4:	0800a7dc 	.word	0x0800a7dc
 80021e8:	20000f64 	.word	0x20000f64
 80021ec:	0800a7e4 	.word	0x0800a7e4
 80021f0:	0800a7e8 	.word	0x0800a7e8
 80021f4:	0800a7f0 	.word	0x0800a7f0
 80021f8:	0800a7f4 	.word	0x0800a7f4
 80021fc:	003a573e 	.word	0x003a573e
 8002200:	003a453e 	.word	0x003a453e
 8002204:	0800a7f8 	.word	0x0800a7f8
 8002208:	0800a804 	.word	0x0800a804
 800220c:	0800a818 	.word	0x0800a818
 8002210:	0800a838 	.word	0x0800a838
 8002214:	0800a858 	.word	0x0800a858
 8002218:	0800a86c 	.word	0x0800a86c
 800221c:	0800a884 	.word	0x0800a884
 8002220:	0800a898 	.word	0x0800a898
 8002224:	0800a8a8 	.word	0x0800a8a8
 8002228:	0800a8c0 	.word	0x0800a8c0
 800222c:	0800a8d0 	.word	0x0800a8d0
 8002230:	0800a8e4 	.word	0x0800a8e4
 8002234:	0800a8fc 	.word	0x0800a8fc
 8002238:	0800a908 	.word	0x0800a908
 800223c:	0800a91c 	.word	0x0800a91c

				case CMR_MALFORMATTEDCOMMAND:
					strcpy(tmp, "Malformatted Command!");
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	4a31      	ldr	r2, [pc, #196]	@ (800230c <output_ascii_cmdack+0x434>)
 8002246:	461c      	mov	r4, r3
 8002248:	4615      	mov	r5, r2
 800224a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800224c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800224e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002252:	6020      	str	r0, [r4, #0]
 8002254:	3404      	adds	r4, #4
 8002256:	8021      	strh	r1, [r4, #0]
					break;
 8002258:	e009      	b.n	800226e <output_ascii_cmdack+0x396>

				default:
					sprintf(tmp, "%3.3u", (cmd_ack & 0x7F));
 800225a:	797b      	ldrb	r3, [r7, #5]
 800225c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	492a      	ldr	r1, [pc, #168]	@ (8002310 <output_ascii_cmdack+0x438>)
 8002266:	4618      	mov	r0, r3
 8002268:	f007 fde8 	bl	8009e3c <siprintf>
					break;
 800226c:	bf00      	nop
				}

				strcat(tmp2, tmp);
 800226e:	f107 020c 	add.w	r2, r7, #12
 8002272:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f007 fe07 	bl	8009e8c <strcat>
				strcat(tmp2, ";");
 800227e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002282:	4618      	mov	r0, r3
 8002284:	f7fd ffd6 	bl	8000234 <strlen>
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002290:	4413      	add	r3, r2
 8002292:	4920      	ldr	r1, [pc, #128]	@ (8002314 <output_ascii_cmdack+0x43c>)
 8002294:	461a      	mov	r2, r3
 8002296:	460b      	mov	r3, r1
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	8013      	strh	r3, [r2, #0]
				uartRB_Put(&usart3_rb, tmp2, strlen(tmp2));
 800229c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fd ffc7 	bl	8000234 <strlen>
 80022a6:	4603      	mov	r3, r0
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022ae:	4619      	mov	r1, r3
 80022b0:	4819      	ldr	r0, [pc, #100]	@ (8002318 <output_ascii_cmdack+0x440>)
 80022b2:	f001 f8d1 	bl	8003458 <uartRB_Put>
 80022b6:	e00e      	b.n	80022d6 <output_ascii_cmdack+0x3fe>
			}
		}
	} else {
		if (cmd_ack != STACK_CMDINSTACK) {
 80022b8:	797b      	ldrb	r3, [r7, #5]
 80022ba:	2b11      	cmp	r3, #17
 80022bc:	d00b      	beq.n	80022d6 <output_ascii_cmdack+0x3fe>
			//if (((cmd_ack & 0x80) == CMR_SUCCESSFULL))
			if ((cmd_ack == CMR_SEMICOLONONLY)
 80022be:	797b      	ldrb	r3, [r7, #5]
 80022c0:	2bff      	cmp	r3, #255	@ 0xff
 80022c2:	d003      	beq.n	80022cc <output_ascii_cmdack+0x3f4>
					|| ((cmd_ack & 0x80) == CMR_SUCCESSFULL))
 80022c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da04      	bge.n	80022d6 <output_ascii_cmdack+0x3fe>
				uartRB_Put(&usart3_rb, ";", 1);
 80022cc:	2201      	movs	r2, #1
 80022ce:	4911      	ldr	r1, [pc, #68]	@ (8002314 <output_ascii_cmdack+0x43c>)
 80022d0:	4811      	ldr	r0, [pc, #68]	@ (8002318 <output_ascii_cmdack+0x440>)
 80022d2:	f001 f8c1 	bl	8003458 <uartRB_Put>

		};
	}

	if ((crlf_flg & 0x01) > 0) {	//crlf_char= "\r";        //d.h. CR
 80022d6:	79bb      	ldrb	r3, [r7, #6]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	dd04      	ble.n	80022ea <output_ascii_cmdack+0x412>
		uartRB_Put(&usart3_rb, "\r", 1);
 80022e0:	2201      	movs	r2, #1
 80022e2:	490e      	ldr	r1, [pc, #56]	@ (800231c <output_ascii_cmdack+0x444>)
 80022e4:	480c      	ldr	r0, [pc, #48]	@ (8002318 <output_ascii_cmdack+0x440>)
 80022e6:	f001 f8b7 	bl	8003458 <uartRB_Put>
	}
	if ((crlf_flg & 0x02) > 0) {	//*crlf_char=";
 80022ea:	79bb      	ldrb	r3, [r7, #6]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	dd04      	ble.n	80022fe <output_ascii_cmdack+0x426>
		uartRB_Put(&usart3_rb, "\n", 1);
 80022f4:	2201      	movs	r2, #1
 80022f6:	490a      	ldr	r1, [pc, #40]	@ (8002320 <output_ascii_cmdack+0x448>)
 80022f8:	4807      	ldr	r0, [pc, #28]	@ (8002318 <output_ascii_cmdack+0x440>)
 80022fa:	f001 f8ad 	bl	8003458 <uartRB_Put>
	}
	uartRB_KickTx(&usart3_rb);
 80022fe:	4806      	ldr	r0, [pc, #24]	@ (8002318 <output_ascii_cmdack+0x440>)
 8002300:	f001 f864 	bl	80033cc <uartRB_KickTx>
}
 8002304:	bf00      	nop
 8002306:	3770      	adds	r7, #112	@ 0x70
 8002308:	46bd      	mov	sp, r7
 800230a:	bdb0      	pop	{r4, r5, r7, pc}
 800230c:	0800a93c 	.word	0x0800a93c
 8002310:	0800a7e8 	.word	0x0800a7e8
 8002314:	0800a7e4 	.word	0x0800a7e4
 8002318:	20000f64 	.word	0x20000f64
 800231c:	0800a954 	.word	0x0800a954
 8002320:	0800a958 	.word	0x0800a958

08002324 <Binary_Search>:

//Die interne Befehlnummer werden für den eingegebenen Befehl zurückgeliefert.
void Binary_Search(uint8_t ncmd, char *key, uint16_t *cmdindex) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	73fb      	strb	r3, [r7, #15]
	volatile uint16_t low = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	83fb      	strh	r3, [r7, #30]
	volatile uint16_t high = ncmd - 1;
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29b      	uxth	r3, r3
 800233e:	83bb      	strh	r3, [r7, #28]
	volatile uint16_t mid;
	volatile int sflag;
	volatile uint8_t flag = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	74fb      	strb	r3, [r7, #19]

	while ((low <= high) && (flag == 0)) {
 8002344:	e045      	b.n	80023d2 <Binary_Search+0xae>
		mid = ((low + high) >> 1);
 8002346:	8bfb      	ldrh	r3, [r7, #30]
 8002348:	b29b      	uxth	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	8bbb      	ldrh	r3, [r7, #28]
 800234e:	b29b      	uxth	r3, r3
 8002350:	4413      	add	r3, r2
 8002352:	105b      	asrs	r3, r3, #1
 8002354:	b29b      	uxth	r3, r3
 8002356:	837b      	strh	r3, [r7, #26]
		sflag = strcmp(key, (char*) &(ASCIICmdTable[mid].cmdline));
 8002358:	8b7b      	ldrh	r3, [r7, #26]
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	2316      	movs	r3, #22
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	4a27      	ldr	r2, [pc, #156]	@ (8002404 <Binary_Search+0xe0>)
 8002366:	4413      	add	r3, r2
 8002368:	4619      	mov	r1, r3
 800236a:	68b8      	ldr	r0, [r7, #8]
 800236c:	f7fd ff58 	bl	8000220 <strcmp>
 8002370:	4603      	mov	r3, r0
 8002372:	617b      	str	r3, [r7, #20]

		if (sflag < 0) {
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	da12      	bge.n	80023a0 <Binary_Search+0x7c>
			if (mid != 0) {
 800237a:	8b7b      	ldrh	r3, [r7, #26]
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <Binary_Search+0x6a>
				high = mid - 1;
 8002382:	8b7b      	ldrh	r3, [r7, #26]
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29b      	uxth	r3, r3
 800238a:	83bb      	strh	r3, [r7, #28]
 800238c:	e005      	b.n	800239a <Binary_Search+0x76>
			} else {
				if (low != 0) {
 800238e:	8bfb      	ldrh	r3, [r7, #30]
 8002390:	b29b      	uxth	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d028      	beq.n	80023e8 <Binary_Search+0xc4>
					high = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	83bb      	strh	r3, [r7, #28]
				} else {
					break;
				}
			}
			flag = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	74fb      	strb	r3, [r7, #19]
 800239e:	e018      	b.n	80023d2 <Binary_Search+0xae>
		} else if (sflag == 0) {
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10e      	bne.n	80023c4 <Binary_Search+0xa0>

			*cmdindex = ASCIICmdTable[mid].cmdindex;
 80023a6:	8b7b      	ldrh	r3, [r7, #26]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	4619      	mov	r1, r3
 80023ac:	4a15      	ldr	r2, [pc, #84]	@ (8002404 <Binary_Search+0xe0>)
 80023ae:	2316      	movs	r3, #22
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3314      	adds	r3, #20
 80023b8:	881a      	ldrh	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	801a      	strh	r2, [r3, #0]
			flag = 1;
 80023be:	2301      	movs	r3, #1
 80023c0:	74fb      	strb	r3, [r7, #19]
 80023c2:	e006      	b.n	80023d2 <Binary_Search+0xae>
		} else {
			low = mid + 1;
 80023c4:	8b7b      	ldrh	r3, [r7, #26]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	83fb      	strh	r3, [r7, #30]
			flag = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	74fb      	strb	r3, [r7, #19]
	while ((low <= high) && (flag == 0)) {
 80023d2:	8bfb      	ldrh	r3, [r7, #30]
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	8bbb      	ldrh	r3, [r7, #28]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	429a      	cmp	r2, r3
 80023dc:	d805      	bhi.n	80023ea <Binary_Search+0xc6>
 80023de:	7cfb      	ldrb	r3, [r7, #19]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0af      	beq.n	8002346 <Binary_Search+0x22>
 80023e6:	e000      	b.n	80023ea <Binary_Search+0xc6>
					break;
 80023e8:	bf00      	nop
		}

	};

	if (flag == 0)   //Falls die Tabelle diesen Befehl nicht enthältet,
 80023ea:	7cfb      	ldrb	r3, [r7, #19]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <Binary_Search+0xd6>
			{
		*cmdindex = BINARY_INDEX_MAX;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023f8:	801a      	strh	r2, [r3, #0]
	};
}
 80023fa:	bf00      	nop
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	0800a964 	.word	0x0800a964

08002408 <output_ascii_result>:

void output_ascii_result(uint8_t verbose_data, uint8_t crlf_data,
		stack_item *result_data) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	603a      	str	r2, [r7, #0]
 8002412:	71fb      	strb	r3, [r7, #7]
 8002414:	460b      	mov	r3, r1
 8002416:	71bb      	strb	r3, [r7, #6]
	//uart0_puts("output");
	switch (result_data->rwflg) {
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	7b9b      	ldrb	r3, [r3, #14]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d002      	beq.n	8002426 <output_ascii_result+0x1e>
 8002420:	2b02      	cmp	r3, #2
 8002422:	d029      	beq.n	8002478 <output_ascii_result+0x70>
		break;
	case WRITE:
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
		break;
	};
}
 8002424:	e030      	b.n	8002488 <output_ascii_result+0x80>
		switch (result_data->cmd_index) {
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	885b      	ldrh	r3, [r3, #2]
 800242a:	2b0c      	cmp	r3, #12
 800242c:	d017      	beq.n	800245e <output_ascii_result+0x56>
 800242e:	2b0e      	cmp	r3, #14
 8002430:	d017      	beq.n	8002462 <output_ascii_result+0x5a>
			if ((result_data->cmd_ack == CMR_SUCCESSFULL)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	791b      	ldrb	r3, [r3, #4]
 8002436:	2b80      	cmp	r3, #128	@ 0x80
 8002438:	d00b      	beq.n	8002452 <output_ascii_result+0x4a>
					|| (result_data->cmd_ack == CMR_PARAMETERCLIPEDMIN)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	791b      	ldrb	r3, [r3, #4]
 800243e:	2b82      	cmp	r3, #130	@ 0x82
 8002440:	d007      	beq.n	8002452 <output_ascii_result+0x4a>
					|| (result_data->cmd_ack == CMR_PARAMETERCLIPEDMAX)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	791b      	ldrb	r3, [r3, #4]
 8002446:	2b83      	cmp	r3, #131	@ 0x83
 8002448:	d003      	beq.n	8002452 <output_ascii_result+0x4a>
					|| (result_data->cmd_ack == CMR_PARAMETERADJUSTED)) {
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	791b      	ldrb	r3, [r3, #4]
 800244e:	2b8a      	cmp	r3, #138	@ 0x8a
 8002450:	d109      	bne.n	8002466 <output_ascii_result+0x5e>
				output_ascii(result_data->parameter);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f850 	bl	80024fc <output_ascii>
			break;
 800245c:	e003      	b.n	8002466 <output_ascii_result+0x5e>
			break;
 800245e:	bf00      	nop
 8002460:	e002      	b.n	8002468 <output_ascii_result+0x60>
			break;
 8002462:	bf00      	nop
 8002464:	e000      	b.n	8002468 <output_ascii_result+0x60>
			break;
 8002466:	bf00      	nop
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	791a      	ldrb	r2, [r3, #4]
 800246c:	79b9      	ldrb	r1, [r7, #6]
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fd31 	bl	8001ed8 <output_ascii_cmdack>
		break;
 8002476:	e007      	b.n	8002488 <output_ascii_result+0x80>
		output_ascii_cmdack(verbose_data, crlf_data, result_data->cmd_ack);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	791a      	ldrb	r2, [r3, #4]
 800247c:	79b9      	ldrb	r1, [r7, #6]
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fd29 	bl	8001ed8 <output_ascii_cmdack>
		break;
 8002486:	bf00      	nop
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <output_binary_result>:

void output_binary_result(stack_item *cmd) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	uint8_t buffer[7];
	uint16_t s_tmp = cmd->cmd_sender;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	82fb      	strh	r3, [r7, #22]
	uint16_t r_tmp = cmd->cmd_receiver;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	785b      	ldrb	r3, [r3, #1]
 80024a2:	82bb      	strh	r3, [r7, #20]
	int32_t param = cmd->parameter;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	613b      	str	r3, [r7, #16]

	buffer[0] = (s_tmp << 5) | (r_tmp << 3);
 80024aa:	8afb      	ldrh	r3, [r7, #22]
 80024ac:	015b      	lsls	r3, r3, #5
 80024ae:	b25a      	sxtb	r2, r3
 80024b0:	8abb      	ldrh	r3, [r7, #20]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	b25b      	sxtb	r3, r3
 80024b6:	4313      	orrs	r3, r2
 80024b8:	b25b      	sxtb	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	723b      	strb	r3, [r7, #8]
	buffer[1] = cmd->cmd_index;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	885b      	ldrh	r3, [r3, #2]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	727b      	strb	r3, [r7, #9]
	buffer[2] = cmd->cmd_ack;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	791b      	ldrb	r3, [r3, #4]
 80024ca:	72bb      	strb	r3, [r7, #10]
	buffer[3] = (param >> 24) & 0xFF;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	0e1b      	lsrs	r3, r3, #24
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	72fb      	strb	r3, [r7, #11]
	buffer[4] = (param >> 16) & 0xFF;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	141b      	asrs	r3, r3, #16
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	733b      	strb	r3, [r7, #12]
	buffer[5] = (param >> 8) & 0xFF;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	121b      	asrs	r3, r3, #8
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	737b      	strb	r3, [r7, #13]
	buffer[6] = param & 0xFF;
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	73bb      	strb	r3, [r7, #14]
	serialSendAnswer(buffer);
 80024ea:	f107 0308 	add.w	r3, r7, #8
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fc5e 	bl	8001db0 <serialSendAnswer>
}
 80024f4:	bf00      	nop
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <output_ascii>:

void output_ascii(int32_t val) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	@ 0x30
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	char tmp[34];
	sprintf(tmp, "%-ld", val);
 8002504:	f107 030c 	add.w	r3, r7, #12
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	490c      	ldr	r1, [pc, #48]	@ (800253c <output_ascii+0x40>)
 800250c:	4618      	mov	r0, r3
 800250e:	f007 fc95 	bl	8009e3c <siprintf>
	uartRB_Put(&usart3_rb, tmp, strlen(tmp));
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	4618      	mov	r0, r3
 8002518:	f7fd fe8c 	bl	8000234 <strlen>
 800251c:	4603      	mov	r3, r0
 800251e:	b2da      	uxtb	r2, r3
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	4619      	mov	r1, r3
 8002526:	4806      	ldr	r0, [pc, #24]	@ (8002540 <output_ascii+0x44>)
 8002528:	f000 ff96 	bl	8003458 <uartRB_Put>
	uartRB_KickTx(&usart3_rb);
 800252c:	4804      	ldr	r0, [pc, #16]	@ (8002540 <output_ascii+0x44>)
 800252e:	f000 ff4d 	bl	80033cc <uartRB_KickTx>
}
 8002532:	bf00      	nop
 8002534:	3730      	adds	r7, #48	@ 0x30
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	0800a95c 	.word	0x0800a95c
 8002540:	20000f64 	.word	0x20000f64

08002544 <remote_ascii_verbose>:

uint8_t remote_ascii_verbose(void) {
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
	return verbose;
 8002548:	4b03      	ldr	r3, [pc, #12]	@ (8002558 <remote_ascii_verbose+0x14>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	2000028d 	.word	0x2000028d

0800255c <remote_ascii_crlf>:

uint8_t remote_ascii_crlf(void) {
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
	return crlf;
 8002560:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <remote_ascii_crlf+0x14>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b2db      	uxtb	r3, r3
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	2000028e 	.word	0x2000028e

08002574 <resultQueue_init>:
//void output_touch_result(stack_item *cmd);
//void spi_SendAnswer(uint8_t *message);

//--------------FUNKTIONSDEFINITIONS-----------------------------------------------------------------------------------------
void resultQueue_init(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
	resultQueue_in = 0;
 8002578:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <resultQueue_init+0x1c>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
	resultQueue_out = 0;
 800257e:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <resultQueue_init+0x20>)
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	200006a0 	.word	0x200006a0
 8002594:	200006a1 	.word	0x200006a1

08002598 <get_anzFrei_resultQueue>:

uint8_t get_anzFrei_resultQueue(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
	int8_t x;
	//ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		x = resultQueue_in - resultQueue_out;
 800259e:	4b0d      	ldr	r3, [pc, #52]	@ (80025d4 <get_anzFrei_resultQueue+0x3c>)
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <get_anzFrei_resultQueue+0x40>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	71fb      	strb	r3, [r7, #7]
		if (x < 0) x = x + RESULT_QUEUE_SIZE;
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	da03      	bge.n	80025bc <get_anzFrei_resultQueue+0x24>
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	333c      	adds	r3, #60	@ 0x3c
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	71fb      	strb	r3, [r7, #7]
		x = RESULT_QUEUE_SIZE - x;
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	71fb      	strb	r3, [r7, #7]
	}
	return x;
 80025c6:	79fb      	ldrb	r3, [r7, #7]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	200006a0 	.word	0x200006a0
 80025d8:	200006a1 	.word	0x200006a1

080025dc <get_anzBes_resultQueue>:

uint8_t get_anzBes_resultQueue(void)
{	int8_t x;
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
	//ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		x = resultQueue_in - resultQueue_out;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <get_anzBes_resultQueue+0x34>)
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <get_anzBes_resultQueue+0x38>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	71fb      	strb	r3, [r7, #7]
		if (x < 0) x = x + RESULT_QUEUE_SIZE;
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	da03      	bge.n	8002600 <get_anzBes_resultQueue+0x24>
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	333c      	adds	r3, #60	@ 0x3c
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	71fb      	strb	r3, [r7, #7]
	}
	return x;
 8002600:	79fb      	ldrb	r3, [r7, #7]
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	200006a0 	.word	0x200006a0
 8002614:	200006a1 	.word	0x200006a1

08002618 <resultQueue_push>:

uint8_t resultQueue_push (stack_item  sitem)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	463c      	mov	r4, r7
 8002620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp = get_anzFrei_resultQueue();
 8002624:	f7ff ffb8 	bl	8002598 <get_anzFrei_resultQueue>
 8002628:	4603      	mov	r3, r0
 800262a:	75bb      	strb	r3, [r7, #22]

	uint8_t flag =0;  // der Flag bedeutet, ob das Hinfuegen des Commando in Queue erfolgreich ist: 0= Nicht erfolgreich, 1= Erfolgreich
 800262c:	2300      	movs	r3, #0
 800262e:	75fb      	strb	r3, [r7, #23]

	if (tmp > 1)
 8002630:	7dbb      	ldrb	r3, [r7, #22]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d919      	bls.n	800266a <resultQueue_push+0x52>
	{
		resultQueue[resultQueue_in] = sitem;
 8002636:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <resultQueue_push+0x60>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4a10      	ldr	r2, [pc, #64]	@ (800267c <resultQueue_push+0x64>)
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	4413      	add	r3, r2
 8002640:	461c      	mov	r4, r3
 8002642:	463b      	mov	r3, r7
 8002644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		resultQueue_in ++;
 800264a:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <resultQueue_push+0x60>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <resultQueue_push+0x60>)
 8002654:	701a      	strb	r2, [r3, #0]
		if (resultQueue_in >= RESULT_QUEUE_SIZE) resultQueue_in =0;
 8002656:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <resultQueue_push+0x60>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b3b      	cmp	r3, #59	@ 0x3b
 800265c:	d902      	bls.n	8002664 <resultQueue_push+0x4c>
 800265e:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <resultQueue_push+0x60>)
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8002664:	2301      	movs	r3, #1
 8002666:	75fb      	strb	r3, [r7, #23]
 8002668:	e001      	b.n	800266e <resultQueue_push+0x56>
	}
	else
	{
		flag = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	75fb      	strb	r3, [r7, #23]
	};
	return flag;
 800266e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002670:	4618      	mov	r0, r3
 8002672:	371c      	adds	r7, #28
 8002674:	46bd      	mov	sp, r7
 8002676:	bd90      	pop	{r4, r7, pc}
 8002678:	200006a0 	.word	0x200006a0
 800267c:	200002e0 	.word	0x200002e0

08002680 <resultQueue_pop>:

void resultQueue_pop(stack_item *sitem)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	uint8_t tmp =get_anzFrei_resultQueue();
 8002688:	f7ff ff86 	bl	8002598 <get_anzFrei_resultQueue>
 800268c:	4603      	mov	r3, r0
 800268e:	73fb      	strb	r3, [r7, #15]

	if (tmp < RESULT_QUEUE_SIZE )
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	2b3b      	cmp	r3, #59	@ 0x3b
 8002694:	d817      	bhi.n	80026c6 <resultQueue_pop+0x46>
	{
		*sitem = resultQueue[resultQueue_out];
 8002696:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <resultQueue_pop+0x50>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4a0d      	ldr	r2, [pc, #52]	@ (80026d4 <resultQueue_pop+0x54>)
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	4413      	add	r3, r2
 80026a2:	460c      	mov	r4, r1
 80026a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		resultQueue_out ++;
 80026aa:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <resultQueue_pop+0x50>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	3301      	adds	r3, #1
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4b07      	ldr	r3, [pc, #28]	@ (80026d0 <resultQueue_pop+0x50>)
 80026b4:	701a      	strb	r2, [r3, #0]
		if (resultQueue_out >= RESULT_QUEUE_SIZE) resultQueue_out = 0;
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <resultQueue_pop+0x50>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b3b      	cmp	r3, #59	@ 0x3b
 80026bc:	d903      	bls.n	80026c6 <resultQueue_pop+0x46>
 80026be:	4b04      	ldr	r3, [pc, #16]	@ (80026d0 <resultQueue_pop+0x50>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
	};
	return;
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
}
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd90      	pop	{r4, r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200006a1 	.word	0x200006a1
 80026d4:	200002e0 	.word	0x200002e0

080026d8 <result_get_sero>:

void result_get_sero(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
	stack_item cmd_tmp;
	uint8_t verbose_tmp = remote_ascii_verbose();
 80026de:	f7ff ff31 	bl	8002544 <remote_ascii_verbose>
 80026e2:	4603      	mov	r3, r0
 80026e4:	75fb      	strb	r3, [r7, #23]
	uint8_t crlf_tmp = remote_ascii_crlf();
 80026e6:	f7ff ff39 	bl	800255c <remote_ascii_crlf>
 80026ea:	4603      	mov	r3, r0
 80026ec:	75bb      	strb	r3, [r7, #22]

	while (get_anzBes_resultQueue() > 0 )
 80026ee:	e015      	b.n	800271c <result_get_sero+0x44>
	{
		resultQueue_pop(&cmd_tmp);
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ffc4 	bl	8002680 <resultQueue_pop>
		//uart0_puts("result");
		//uart0_puti(cmd_tmp.cmd_index);
		//uart0_puti(cmd_tmp.cmd_ack);
		//uart0_puti(cmd_tmp.parameter);
		switch (cmd_tmp.cmd_sender)
 80026f8:	793b      	ldrb	r3, [r7, #4]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d008      	beq.n	8002710 <result_get_sero+0x38>
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d10b      	bne.n	800271a <result_get_sero+0x42>
			//case Q_TOUCHPANEL:
				//output_touch_result(&cmd_tmp);
			//	break;
			case Q_RS232_ASCII:
				//uart0_puts("ASC");
				output_ascii_result(verbose_tmp, crlf_tmp, &cmd_tmp);
 8002702:	1d3a      	adds	r2, r7, #4
 8002704:	7db9      	ldrb	r1, [r7, #22]
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fe7d 	bl	8002408 <output_ascii_result>
				break;
 800270e:	e005      	b.n	800271c <result_get_sero+0x44>
			case Q_RS232_BINARY:
				output_binary_result(&cmd_tmp);
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff febc 	bl	8002490 <output_binary_result>
				break;
 8002718:	e000      	b.n	800271c <result_get_sero+0x44>
//				output_userport_result(&cmd_tmp);
//			case Q_ZENTRALE:
//				zentrale_match_get_sero(&cmd_tmp);
//				break;
			default:
				break;
 800271a:	bf00      	nop
	while (get_anzBes_resultQueue() > 0 )
 800271c:	f7ff ff5e 	bl	80025dc <get_anzBes_resultQueue>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1e4      	bne.n	80026f0 <result_get_sero+0x18>
		};
	};

	return;
 8002726:	bf00      	nop
}
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002734:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <MX_SPI1_Init+0x74>)
 8002736:	4a1c      	ldr	r2, [pc, #112]	@ (80027a8 <MX_SPI1_Init+0x78>)
 8002738:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800273a:	4b1a      	ldr	r3, [pc, #104]	@ (80027a4 <MX_SPI1_Init+0x74>)
 800273c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002740:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002742:	4b18      	ldr	r3, [pc, #96]	@ (80027a4 <MX_SPI1_Init+0x74>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002748:	4b16      	ldr	r3, [pc, #88]	@ (80027a4 <MX_SPI1_Init+0x74>)
 800274a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800274e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002750:	4b14      	ldr	r3, [pc, #80]	@ (80027a4 <MX_SPI1_Init+0x74>)
 8002752:	2202      	movs	r2, #2
 8002754:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002756:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <MX_SPI1_Init+0x74>)
 8002758:	2200      	movs	r2, #0
 800275a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800275c:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <MX_SPI1_Init+0x74>)
 800275e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002762:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002764:	4b0f      	ldr	r3, [pc, #60]	@ (80027a4 <MX_SPI1_Init+0x74>)
 8002766:	2220      	movs	r2, #32
 8002768:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800276a:	4b0e      	ldr	r3, [pc, #56]	@ (80027a4 <MX_SPI1_Init+0x74>)
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <MX_SPI1_Init+0x74>)
 8002772:	2200      	movs	r2, #0
 8002774:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002776:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <MX_SPI1_Init+0x74>)
 8002778:	2200      	movs	r2, #0
 800277a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800277c:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <MX_SPI1_Init+0x74>)
 800277e:	2207      	movs	r2, #7
 8002780:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002782:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <MX_SPI1_Init+0x74>)
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002788:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <MX_SPI1_Init+0x74>)
 800278a:	2200      	movs	r2, #0
 800278c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800278e:	4805      	ldr	r0, [pc, #20]	@ (80027a4 <MX_SPI1_Init+0x74>)
 8002790:	f004 fb52 	bl	8006e38 <HAL_SPI_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800279a:	f7fe fde2 	bl	8001362 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200006a4 	.word	0x200006a4
 80027a8:	40013000 	.word	0x40013000

080027ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	@ 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a17      	ldr	r2, [pc, #92]	@ (8002828 <HAL_SPI_MspInit+0x7c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d128      	bne.n	8002820 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027ce:	4b17      	ldr	r3, [pc, #92]	@ (800282c <HAL_SPI_MspInit+0x80>)
 80027d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d2:	4a16      	ldr	r2, [pc, #88]	@ (800282c <HAL_SPI_MspInit+0x80>)
 80027d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80027da:	4b14      	ldr	r3, [pc, #80]	@ (800282c <HAL_SPI_MspInit+0x80>)
 80027dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	4b11      	ldr	r3, [pc, #68]	@ (800282c <HAL_SPI_MspInit+0x80>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ea:	4a10      	ldr	r2, [pc, #64]	@ (800282c <HAL_SPI_MspInit+0x80>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027f2:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <HAL_SPI_MspInit+0x80>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027fe:	23e0      	movs	r3, #224	@ 0xe0
 8002800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800280e:	2305      	movs	r3, #5
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	4619      	mov	r1, r3
 8002818:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800281c:	f003 f82e 	bl	800587c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002820:	bf00      	nop
 8002822:	3728      	adds	r7, #40	@ 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40013000 	.word	0x40013000
 800282c:	40021000 	.word	0x40021000

08002830 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a08      	ldr	r2, [pc, #32]	@ (8002860 <HAL_SPI_MspDeInit+0x30>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10a      	bne.n	8002858 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002842:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <HAL_SPI_MspDeInit+0x34>)
 8002844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002846:	4a07      	ldr	r2, [pc, #28]	@ (8002864 <HAL_SPI_MspDeInit+0x34>)
 8002848:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800284c:	6613      	str	r3, [r2, #96]	@ 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800284e:	21e0      	movs	r1, #224	@ 0xe0
 8002850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002854:	f003 f994 	bl	8005b80 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40013000 	.word	0x40013000
 8002864:	40021000 	.word	0x40021000

08002868 <spiTransferWord>:

    // return the received data
    return rxData;
}

uint16_t spiTransferWord(uint16_t data) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af02      	add	r7, sp, #8
 800286e:	4603      	mov	r3, r0
 8002870:	80fb      	strh	r3, [r7, #6]
    uint16_t rxData = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	81fb      	strh	r3, [r7, #14]

    HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&data, (uint8_t *)&rxData, 2, 100);
 8002876:	f107 020e 	add.w	r2, r7, #14
 800287a:	1db9      	adds	r1, r7, #6
 800287c:	2364      	movs	r3, #100	@ 0x64
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	2302      	movs	r3, #2
 8002882:	4804      	ldr	r0, [pc, #16]	@ (8002894 <spiTransferWord+0x2c>)
 8002884:	f004 fbab 	bl	8006fde <HAL_SPI_TransmitReceive>

    // return the received data
    return rxData;
 8002888:	89fb      	ldrh	r3, [r7, #14]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200006a4 	.word	0x200006a4

08002898 <spi_access_device>:

void spi_access_device(uint8_t device)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
	 _spi_access_device(device, spi_select_device);
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	2101      	movs	r1, #1
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f812 	bl	80028d0 <_spi_access_device>
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <spi_release_device>:

void spi_release_device(uint8_t device)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
	 _spi_access_device(device, spi_deselect_device);
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f804 	bl	80028d0 <_spi_access_device>
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <_spi_access_device>:

void _spi_access_device(uint8_t device, uint8_t status) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	460a      	mov	r2, r1
 80028da:	71fb      	strb	r3, [r7, #7]
 80028dc:	4613      	mov	r3, r2
 80028de:	71bb      	strb	r3, [r7, #6]
	SPI_HandleTypeDef *spiHandle;

	if (status == spi_select_device) {
 80028e0:	79bb      	ldrb	r3, [r7, #6]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d157      	bne.n	8002996 <_spi_access_device+0xc6>
		spiHandle = &hspi1;
 80028e6:	4b35      	ldr	r3, [pc, #212]	@ (80029bc <_spi_access_device+0xec>)
 80028e8:	60fb      	str	r3, [r7, #12]
		/*Prior to changing the CPOL/CPHA bits the SPI must be disabled by resetting the SPE bit*/
		if (HAL_SPI_DeInit(spiHandle) != HAL_OK) {
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f004 fb4f 	bl	8006f8e <HAL_SPI_DeInit>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <_spi_access_device+0x2a>
			Error_Handler();
 80028f6:	f7fe fd34 	bl	8001362 <Error_Handler>
		}

		spiHandle->Instance = SPI1;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4a30      	ldr	r2, [pc, #192]	@ (80029c0 <_spi_access_device+0xf0>)
 80028fe:	601a      	str	r2, [r3, #0]
		spiHandle->Init.Mode = SPI_MODE_MASTER;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002906:	605a      	str	r2, [r3, #4]
		spiHandle->Init.Direction = SPI_DIRECTION_2LINES;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
		spiHandle->Init.DataSize = SPI_DATASIZE_8BIT;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002914:	60da      	str	r2, [r3, #12]
		spiHandle->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
		spiHandle->Init.CLKPhase = SPI_PHASE_1EDGE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	615a      	str	r2, [r3, #20]
		spiHandle->Init.NSS = SPI_NSS_SOFT;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002928:	619a      	str	r2, [r3, #24]
		spiHandle->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2210      	movs	r2, #16
 800292e:	61da      	str	r2, [r3, #28]
		spiHandle->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	621a      	str	r2, [r3, #32]
		spiHandle->Init.TIMode = SPI_TIMODE_DISABLE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	625a      	str	r2, [r3, #36]	@ 0x24
		spiHandle->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	629a      	str	r2, [r3, #40]	@ 0x28
		spiHandle->Init.CRCPolynomial = 7;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2207      	movs	r2, #7
 8002946:	62da      	str	r2, [r3, #44]	@ 0x2c
		spiHandle->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	631a      	str	r2, [r3, #48]	@ 0x30
		spiHandle->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2208      	movs	r2, #8
 8002952:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_SPI_Init(spiHandle) != HAL_OK) {
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f004 fa6f 	bl	8006e38 <HAL_SPI_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <_spi_access_device+0x94>
			Error_Handler();
 8002960:	f7fe fcff 	bl	8001362 <Error_Handler>
		}

		switch (device) {
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d00b      	beq.n	8002982 <_spi_access_device+0xb2>
 800296a:	2b03      	cmp	r3, #3
 800296c:	dc20      	bgt.n	80029b0 <_spi_access_device+0xe0>
 800296e:	2b01      	cmp	r3, #1
 8002970:	d002      	beq.n	8002978 <_spi_access_device+0xa8>
 8002972:	2b02      	cmp	r3, #2
 8002974:	d00a      	beq.n	800298c <_spi_access_device+0xbc>
		case spi_sps_out:
			spi_set_cs(spi_sps_out_cs, spi_select_device);
			break;

		default:
			break;
 8002976:	e01b      	b.n	80029b0 <_spi_access_device+0xe0>
			spi_set_cs(spi_mio_cs, spi_select_device);
 8002978:	2101      	movs	r1, #1
 800297a:	2001      	movs	r0, #1
 800297c:	f000 f822 	bl	80029c4 <spi_set_cs>
			break;
 8002980:	e017      	b.n	80029b2 <_spi_access_device+0xe2>
			spi_set_cs(spi_sps_in_cs, spi_select_device);
 8002982:	2101      	movs	r1, #1
 8002984:	2003      	movs	r0, #3
 8002986:	f000 f81d 	bl	80029c4 <spi_set_cs>
			break;
 800298a:	e012      	b.n	80029b2 <_spi_access_device+0xe2>
			spi_set_cs(spi_sps_out_cs, spi_select_device);
 800298c:	2101      	movs	r1, #1
 800298e:	2002      	movs	r0, #2
 8002990:	f000 f818 	bl	80029c4 <spi_set_cs>
			break;
 8002994:	e00d      	b.n	80029b2 <_spi_access_device+0xe2>
		}
	} else {
		spi_set_cs(spi_mio_cs, spi_deselect_device);
 8002996:	2100      	movs	r1, #0
 8002998:	2001      	movs	r0, #1
 800299a:	f000 f813 	bl	80029c4 <spi_set_cs>
		spi_set_cs(spi_sps_out_cs, spi_deselect_device);
 800299e:	2100      	movs	r1, #0
 80029a0:	2002      	movs	r0, #2
 80029a2:	f000 f80f 	bl	80029c4 <spi_set_cs>
		spi_set_cs(spi_sps_in_cs, spi_deselect_device);
 80029a6:	2100      	movs	r1, #0
 80029a8:	2003      	movs	r0, #3
 80029aa:	f000 f80b 	bl	80029c4 <spi_set_cs>
	}
}
 80029ae:	e000      	b.n	80029b2 <_spi_access_device+0xe2>
			break;
 80029b0:	bf00      	nop
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200006a4 	.word	0x200006a4
 80029c0:	40013000 	.word	0x40013000

080029c4 <spi_set_cs>:

void spi_set_cs(uint8_t cs, uint8_t state)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	460a      	mov	r2, r1
 80029ce:	71fb      	strb	r3, [r7, #7]
 80029d0:	4613      	mov	r3, r2
 80029d2:	71bb      	strb	r3, [r7, #6]
	if(state != spi_cs_all_off)
 80029d4:	79bb      	ldrb	r3, [r7, #6]
 80029d6:	2bff      	cmp	r3, #255	@ 0xff
 80029d8:	d038      	beq.n	8002a4c <spi_set_cs+0x88>
	{
		// Chipselect aktivieren
		switch(cs)
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d026      	beq.n	8002a2e <spi_set_cs+0x6a>
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	dc44      	bgt.n	8002a6e <spi_set_cs+0xaa>
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d002      	beq.n	80029ee <spi_set_cs+0x2a>
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d011      	beq.n	8002a10 <spi_set_cs+0x4c>
			else
				HAL_GPIO_WritePin(UC_CS_SPS_IN_GPIO_Port, UC_CS_SPS_IN_Pin,	GPIO_PIN_SET);
			break;

			default:
				break;
 80029ec:	e03f      	b.n	8002a6e <spi_set_cs+0xaa>
			if (state == spi_select_device)
 80029ee:	79bb      	ldrb	r3, [r7, #6]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d106      	bne.n	8002a02 <spi_set_cs+0x3e>
				HAL_GPIO_WritePin(UC_CS_AUX0_GPIO_Port, UC_CS_AUX0_Pin,	GPIO_PIN_RESET);
 80029f4:	2200      	movs	r2, #0
 80029f6:	2110      	movs	r1, #16
 80029f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029fc:	f003 f9ba 	bl	8005d74 <HAL_GPIO_WritePin>
			break;
 8002a00:	e036      	b.n	8002a70 <spi_set_cs+0xac>
				HAL_GPIO_WritePin(UC_CS_AUX0_GPIO_Port, UC_CS_AUX0_Pin,	GPIO_PIN_SET);
 8002a02:	2201      	movs	r2, #1
 8002a04:	2110      	movs	r1, #16
 8002a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a0a:	f003 f9b3 	bl	8005d74 <HAL_GPIO_WritePin>
			break;
 8002a0e:	e02f      	b.n	8002a70 <spi_set_cs+0xac>
			if (state == spi_select_device)
 8002a10:	79bb      	ldrb	r3, [r7, #6]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d105      	bne.n	8002a22 <spi_set_cs+0x5e>
				HAL_GPIO_WritePin(UC_CS_SPS_OUT_GPIO_Port, UC_CS_SPS_OUT_Pin,	GPIO_PIN_RESET);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2102      	movs	r1, #2
 8002a1a:	4817      	ldr	r0, [pc, #92]	@ (8002a78 <spi_set_cs+0xb4>)
 8002a1c:	f003 f9aa 	bl	8005d74 <HAL_GPIO_WritePin>
			break;
 8002a20:	e026      	b.n	8002a70 <spi_set_cs+0xac>
				HAL_GPIO_WritePin(UC_CS_SPS_OUT_GPIO_Port, UC_CS_SPS_OUT_Pin,	GPIO_PIN_SET);
 8002a22:	2201      	movs	r2, #1
 8002a24:	2102      	movs	r1, #2
 8002a26:	4814      	ldr	r0, [pc, #80]	@ (8002a78 <spi_set_cs+0xb4>)
 8002a28:	f003 f9a4 	bl	8005d74 <HAL_GPIO_WritePin>
			break;
 8002a2c:	e020      	b.n	8002a70 <spi_set_cs+0xac>
			if (state == spi_select_device)
 8002a2e:	79bb      	ldrb	r3, [r7, #6]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <spi_set_cs+0x7c>
				HAL_GPIO_WritePin(UC_CS_SPS_IN_GPIO_Port, UC_CS_SPS_IN_Pin,	GPIO_PIN_RESET);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2104      	movs	r1, #4
 8002a38:	480f      	ldr	r0, [pc, #60]	@ (8002a78 <spi_set_cs+0xb4>)
 8002a3a:	f003 f99b 	bl	8005d74 <HAL_GPIO_WritePin>
			break;
 8002a3e:	e017      	b.n	8002a70 <spi_set_cs+0xac>
				HAL_GPIO_WritePin(UC_CS_SPS_IN_GPIO_Port, UC_CS_SPS_IN_Pin,	GPIO_PIN_SET);
 8002a40:	2201      	movs	r2, #1
 8002a42:	2104      	movs	r1, #4
 8002a44:	480c      	ldr	r0, [pc, #48]	@ (8002a78 <spi_set_cs+0xb4>)
 8002a46:	f003 f995 	bl	8005d74 <HAL_GPIO_WritePin>
			break;
 8002a4a:	e011      	b.n	8002a70 <spi_set_cs+0xac>
		}
	}
	else
	{
		// Chip selects off
		HAL_GPIO_WritePin(UC_CS_AUX0_GPIO_Port, UC_CS_AUX0_Pin, GPIO_PIN_SET);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	2110      	movs	r1, #16
 8002a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a54:	f003 f98e 	bl	8005d74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(UC_CS_SPS_OUT_GPIO_Port, UC_CS_SPS_OUT_Pin,	GPIO_PIN_SET);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	4806      	ldr	r0, [pc, #24]	@ (8002a78 <spi_set_cs+0xb4>)
 8002a5e:	f003 f989 	bl	8005d74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(UC_CS_SPS_IN_GPIO_Port, UC_CS_SPS_IN_Pin,	GPIO_PIN_SET);
 8002a62:	2201      	movs	r2, #1
 8002a64:	2104      	movs	r1, #4
 8002a66:	4804      	ldr	r0, [pc, #16]	@ (8002a78 <spi_set_cs+0xb4>)
 8002a68:	f003 f984 	bl	8005d74 <HAL_GPIO_WritePin>
	}
}
 8002a6c:	e000      	b.n	8002a70 <spi_set_cs+0xac>
				break;
 8002a6e:	bf00      	nop
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	48000400 	.word	0x48000400

08002a7c <stacks_init>:
uint8_t zstackindex_list_act_get(void);
uint8_t mcstackindex_list_act_get(void);

//--- FUNKTIONSDEFINITIONS --------------------------------------------------------------------------------------------------
void stacks_init(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	71fb      	strb	r3, [r7, #7]

	zstackindex_list_act = Z_STACK_SIZE -1;        //alle Stackindexe sind frei
 8002a86:	4b20      	ldr	r3, [pc, #128]	@ (8002b08 <stacks_init+0x8c>)
 8002a88:	221d      	movs	r2, #29
 8002a8a:	701a      	strb	r2, [r3, #0]
	mcstackindex_list_act = MC_STACK_SIZE -1;
 8002a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002b0c <stacks_init+0x90>)
 8002a8e:	2213      	movs	r2, #19
 8002a90:	701a      	strb	r2, [r3, #0]
	mcstack_rest_length = MC_STACK_SIZE - MCSTACK_ZENTRALE_RESERVATION;
 8002a92:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <stacks_init+0x94>)
 8002a94:	2212      	movs	r2, #18
 8002a96:	701a      	strb	r2, [r3, #0]


	for (i = 0; i < Z_STACK_SIZE; i++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	71fb      	strb	r3, [r7, #7]
 8002a9c:	e011      	b.n	8002ac2 <stacks_init+0x46>
	{
		zentrale_stack[i].next = NONEXT;
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b14 <stacks_init+0x98>)
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	4413      	add	r3, r2
 8002aa6:	330c      	adds	r3, #12
 8002aa8:	22ff      	movs	r2, #255	@ 0xff
 8002aaa:	701a      	strb	r2, [r3, #0]
		zstackindex_list[i] = zstackindex_list_act - i;   //alle freien Stackindexe sind abwärts in die Stackindex-Liste(aufwärts) gelegt.
 8002aac:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <stacks_init+0x8c>)
 8002aae:	7819      	ldrb	r1, [r3, #0]
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	79fa      	ldrb	r2, [r7, #7]
 8002ab4:	1a8a      	subs	r2, r1, r2
 8002ab6:	b2d1      	uxtb	r1, r2
 8002ab8:	4a17      	ldr	r2, [pc, #92]	@ (8002b18 <stacks_init+0x9c>)
 8002aba:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < Z_STACK_SIZE; i++)
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	71fb      	strb	r3, [r7, #7]
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	2b1d      	cmp	r3, #29
 8002ac6:	d9ea      	bls.n	8002a9e <stacks_init+0x22>
	};

	for (i = 0; i < MC_STACK_SIZE; i++)
 8002ac8:	2300      	movs	r3, #0
 8002aca:	71fb      	strb	r3, [r7, #7]
 8002acc:	e011      	b.n	8002af2 <stacks_init+0x76>
	{
		mc_stack[i].next = NONEXT;
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	4a12      	ldr	r2, [pc, #72]	@ (8002b1c <stacks_init+0xa0>)
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	4413      	add	r3, r2
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	22ff      	movs	r2, #255	@ 0xff
 8002ada:	701a      	strb	r2, [r3, #0]
		mcstackindex_list[i] = mcstackindex_list_act - i;
 8002adc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <stacks_init+0x90>)
 8002ade:	7819      	ldrb	r1, [r3, #0]
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	79fa      	ldrb	r2, [r7, #7]
 8002ae4:	1a8a      	subs	r2, r1, r2
 8002ae6:	b2d1      	uxtb	r1, r2
 8002ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b20 <stacks_init+0xa4>)
 8002aea:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < MC_STACK_SIZE; i++)
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	3301      	adds	r3, #1
 8002af0:	71fb      	strb	r3, [r7, #7]
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	2b13      	cmp	r3, #19
 8002af6:	d9ea      	bls.n	8002ace <stacks_init+0x52>
	};
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000a5c 	.word	0x20000a5c
 8002b0c:	20000a5d 	.word	0x20000a5d
 8002b10:	20000a5e 	.word	0x20000a5e
 8002b14:	20000708 	.word	0x20000708
 8002b18:	20000a28 	.word	0x20000a28
 8002b1c:	200008e8 	.word	0x200008e8
 8002b20:	20000a48 	.word	0x20000a48

08002b24 <stacks_insert_cmd>:

uint8_t stacks_insert_cmd(stack_item stack[], uint8_t stack_length, uint8_t stackindex_list[], stack_item stack_data, uint8_t *stackindexlist_act, uint8_t *stackindex)
{
 8002b24:	b082      	sub	sp, #8
 8002b26:	b490      	push	{r4, r7}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b32:	460b      	mov	r3, r1
 8002b34:	72fb      	strb	r3, [r7, #11]
	uint8_t index_tmp;
	uint8_t flag;

	if ( (*stackindexlist_act >= 0)  && (*stackindexlist_act < stack_length) )          //wenn es einen freien Platz gibt,
 8002b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	7afa      	ldrb	r2, [r7, #11]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d923      	bls.n	8002b88 <stacks_insert_cmd+0x64>
	{
		index_tmp = *stackindexlist_act;
 8002b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	75bb      	strb	r3, [r7, #22]
		*stackindex = stackindex_list[index_tmp];                    //fügt einen Element in den Stack ein
 8002b46:	7dbb      	ldrb	r3, [r7, #22]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b50:	701a      	strb	r2, [r3, #0]
		stack[*stackindex] = stack_data;
 8002b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	461c      	mov	r4, r3
 8002b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if (index_tmp == 0 )                                     //d.h. es keine leer Platz mehr im Stack nach dem Einfügen gibt.
 8002b68:	7dbb      	ldrb	r3, [r7, #22]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <stacks_insert_cmd+0x52>
		{
			*stackindexlist_act = NONEXT;           //NONEXT bezeichnet: der Stack ist voll, weil die negative Zahl nicht erlaubt ist.
 8002b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b70:	22ff      	movs	r2, #255	@ 0xff
 8002b72:	701a      	strb	r2, [r3, #0]
 8002b74:	e005      	b.n	8002b82 <stacks_insert_cmd+0x5e>
		}
		else
		{
			index_tmp -=1;
 8002b76:	7dbb      	ldrb	r3, [r7, #22]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	75bb      	strb	r3, [r7, #22]
			*stackindexlist_act = index_tmp;
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7e:	7dba      	ldrb	r2, [r7, #22]
 8002b80:	701a      	strb	r2, [r3, #0]
		};
		flag = STACK_INTSERT_OK;
 8002b82:	2314      	movs	r3, #20
 8002b84:	75fb      	strb	r3, [r7, #23]
 8002b86:	e001      	b.n	8002b8c <stacks_insert_cmd+0x68>
	}
	else //Falls der Stack voll ist,
	{
		flag = CMR_UNITBUSY;
 8002b88:	2309      	movs	r3, #9
 8002b8a:	75fb      	strb	r3, [r7, #23]
	};

	return flag;
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc90      	pop	{r4, r7}
 8002b96:	b002      	add	sp, #8
 8002b98:	4770      	bx	lr
	...

08002b9c <z_mc_stack_insert>:

uint8_t z_mc_stack_insert(stack_item stack_data, uint8_t mc_flg)
{
 8002b9c:	b590      	push	{r4, r7, lr}
 8002b9e:	b091      	sub	sp, #68	@ 0x44
 8002ba0:	af06      	add	r7, sp, #24
 8002ba2:	463c      	mov	r4, r7
 8002ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t flag = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t push_result = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t prio_pushflg = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t stack_index = NONEXT;
 8002bba:	23ff      	movs	r3, #255	@ 0xff
 8002bbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t mc_push_enable = 0;  //=0: es ist nicht erlaubt, die Befehlen in den MC- Stack einlegen; > 1: es ist erlaubt; =1: die Befehlen aus der Zentrale;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	//=2: aus der anderen Quellen.

	stack_item stack_tmp;

	if (mc_flg)   // d.h. der Befehl ist für den MC
 8002bc6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d067      	beq.n	8002c9e <z_mc_stack_insert+0x102>
	{
		if (stack_data.cmd_sender == Q_ZENTRALE)
 8002bce:	783b      	ldrb	r3, [r7, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d103      	bne.n	8002bdc <z_mc_stack_insert+0x40>
		{
			mc_push_enable = 1;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002bda:	e00e      	b.n	8002bfa <z_mc_stack_insert+0x5e>
		}
		else
		{
			if (mcstack_rest_length  > 0)
 8002bdc:	4b51      	ldr	r3, [pc, #324]	@ (8002d24 <z_mc_stack_insert+0x188>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <z_mc_stack_insert+0x52>
			{
				mc_push_enable = 2;
 8002be6:	2302      	movs	r3, #2
 8002be8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002bec:	e005      	b.n	8002bfa <z_mc_stack_insert+0x5e>
			}
			else
			{
				mc_push_enable = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				flag = CMR_UNITBUSY;
 8002bf4:	2309      	movs	r3, #9
 8002bf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			};
		};

		if (mc_push_enable > 0)
 8002bfa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8089 	beq.w	8002d16 <z_mc_stack_insert+0x17a>
		{
			push_result = stacks_insert_cmd(mc_stack, MC_STACK_SIZE, mcstackindex_list, stack_data, &mcstackindex_list_act, &stack_index);
 8002c04:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8002c08:	9304      	str	r3, [sp, #16]
 8002c0a:	4b47      	ldr	r3, [pc, #284]	@ (8002d28 <z_mc_stack_insert+0x18c>)
 8002c0c:	9303      	str	r3, [sp, #12]
 8002c0e:	466c      	mov	r4, sp
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	4a43      	ldr	r2, [pc, #268]	@ (8002d2c <z_mc_stack_insert+0x190>)
 8002c1e:	2114      	movs	r1, #20
 8002c20:	4843      	ldr	r0, [pc, #268]	@ (8002d30 <z_mc_stack_insert+0x194>)
 8002c22:	f7ff ff7f 	bl	8002b24 <stacks_insert_cmd>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			if (push_result == STACK_INTSERT_OK)
 8002c2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c30:	2b14      	cmp	r3, #20
 8002c32:	d130      	bne.n	8002c96 <z_mc_stack_insert+0xfa>
			{
				prio_pushflg = priolist_push(mc_priolist, MC_STACK_SIZE, mc_priolevel_header,  &mcpriolist_firstunused_index, stack_index, stack_data.prio);
 8002c34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c38:	7b7a      	ldrb	r2, [r7, #13]
 8002c3a:	9201      	str	r2, [sp, #4]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d34 <z_mc_stack_insert+0x198>)
 8002c40:	4a3d      	ldr	r2, [pc, #244]	@ (8002d38 <z_mc_stack_insert+0x19c>)
 8002c42:	2114      	movs	r1, #20
 8002c44:	483d      	ldr	r0, [pc, #244]	@ (8002d3c <z_mc_stack_insert+0x1a0>)
 8002c46:	f7fe fb92 	bl	800136e <priolist_push>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				if (prio_pushflg )
 8002c50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <z_mc_stack_insert+0xe4>
				{
					flag = STACK_CMDINSTACK;
 8002c58:	2311      	movs	r3, #17
 8002c5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					if (mc_push_enable == 2)
 8002c5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d157      	bne.n	8002d16 <z_mc_stack_insert+0x17a>
					{
						if (mcstack_rest_length > 0)
 8002c66:	4b2f      	ldr	r3, [pc, #188]	@ (8002d24 <z_mc_stack_insert+0x188>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d052      	beq.n	8002d16 <z_mc_stack_insert+0x17a>
						{
							mcstack_rest_length -=1;                   //die Plätze für die Befehle aus den anderen Quelle ausser der Zentrale wird einen weniger sein.
 8002c70:	4b2c      	ldr	r3, [pc, #176]	@ (8002d24 <z_mc_stack_insert+0x188>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d24 <z_mc_stack_insert+0x188>)
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e04a      	b.n	8002d16 <z_mc_stack_insert+0x17a>

					};
				}
				else
				{
					mcstack_pop(&stack_tmp, stack_data.prio);
 8002c80:	7b7a      	ldrb	r2, [r7, #13]
 8002c82:	f107 0310 	add.w	r3, r7, #16
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 f87f 	bl	8002d8c <mcstack_pop>
					flag = STACK_PRIOLIST_ERROR;
 8002c8e:	2313      	movs	r3, #19
 8002c90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002c94:	e03f      	b.n	8002d16 <z_mc_stack_insert+0x17a>
				}
			}
			else
			{
				flag = CMR_UNITBUSY;
 8002c96:	2309      	movs	r3, #9
 8002c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002c9c:	e03b      	b.n	8002d16 <z_mc_stack_insert+0x17a>
		};
	}
	else //d.h. der Befehl wird an die Zentrale gesendet
	{

		push_result = stacks_insert_cmd(zentrale_stack, Z_STACK_SIZE, zstackindex_list, stack_data, &zstackindex_list_act, &stack_index);
 8002c9e:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8002ca2:	9304      	str	r3, [sp, #16]
 8002ca4:	4b26      	ldr	r3, [pc, #152]	@ (8002d40 <z_mc_stack_insert+0x1a4>)
 8002ca6:	9303      	str	r3, [sp, #12]
 8002ca8:	466c      	mov	r4, sp
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4a23      	ldr	r2, [pc, #140]	@ (8002d44 <z_mc_stack_insert+0x1a8>)
 8002cb8:	211e      	movs	r1, #30
 8002cba:	4823      	ldr	r0, [pc, #140]	@ (8002d48 <z_mc_stack_insert+0x1ac>)
 8002cbc:	f7ff ff32 	bl	8002b24 <stacks_insert_cmd>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		if (push_result == STACK_INTSERT_OK)
 8002cc6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002cca:	2b14      	cmp	r3, #20
 8002ccc:	d120      	bne.n	8002d10 <z_mc_stack_insert+0x174>
		{
			prio_pushflg = priolist_push(z_priolist, Z_STACK_SIZE, z_priolevel_header, &zpriolist_firstunused_index, stack_index, stack_data.prio);
 8002cce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002cd2:	7b7a      	ldrb	r2, [r7, #13]
 8002cd4:	9201      	str	r2, [sp, #4]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d4c <z_mc_stack_insert+0x1b0>)
 8002cda:	4a1d      	ldr	r2, [pc, #116]	@ (8002d50 <z_mc_stack_insert+0x1b4>)
 8002cdc:	211e      	movs	r1, #30
 8002cde:	481d      	ldr	r0, [pc, #116]	@ (8002d54 <z_mc_stack_insert+0x1b8>)
 8002ce0:	f7fe fb45 	bl	800136e <priolist_push>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			if (prio_pushflg )
 8002cea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <z_mc_stack_insert+0x15e>
			{
				flag = STACK_CMDINSTACK;
 8002cf2:	2311      	movs	r3, #17
 8002cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002cf8:	e00d      	b.n	8002d16 <z_mc_stack_insert+0x17a>
			}
			else
			{
				zstack_pop(&stack_tmp, stack_data.prio);
 8002cfa:	7b7a      	ldrb	r2, [r7, #13]
 8002cfc:	f107 0310 	add.w	r3, r7, #16
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f898 	bl	8002e38 <zstack_pop>
				flag = STACK_PRIOLIST_ERROR;
 8002d08:	2313      	movs	r3, #19
 8002d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002d0e:	e002      	b.n	8002d16 <z_mc_stack_insert+0x17a>
			} ;
		}
		else
		{

			flag = CMR_UNITBUSY;
 8002d10:	2309      	movs	r3, #9
 8002d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		};
	};
	return flag;
 8002d16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	372c      	adds	r7, #44	@ 0x2c
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd90      	pop	{r4, r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000a5e 	.word	0x20000a5e
 8002d28:	20000a5d 	.word	0x20000a5d
 8002d2c:	20000a48 	.word	0x20000a48
 8002d30:	200008e8 	.word	0x200008e8
 8002d34:	2000028c 	.word	0x2000028c
 8002d38:	20000288 	.word	0x20000288
 8002d3c:	2000025c 	.word	0x2000025c
 8002d40:	20000a5c 	.word	0x20000a5c
 8002d44:	20000a28 	.word	0x20000a28
 8002d48:	20000708 	.word	0x20000708
 8002d4c:	2000028b 	.word	0x2000028b
 8002d50:	20000284 	.word	0x20000284
 8002d54:	20000220 	.word	0x20000220

08002d58 <stack_insert_sero>:



uint8_t stack_insert_sero(stack_item stack_data)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b089      	sub	sp, #36	@ 0x24
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	463c      	mov	r4, r7
 8002d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t flag = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	75fb      	strb	r3, [r7, #23]
	uint8_t mc_flg = 0;                            //bezeichnet, dass der Befehl für die Zentrale ist, wenn es 0 ist; für den MC , wenn es 1 ist.
 8002d68:	2300      	movs	r3, #0
 8002d6a:	75bb      	strb	r3, [r7, #22]

	//hier gibt es nur die Befehle für die Zentrale,

	mc_flg = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	75bb      	strb	r3, [r7, #22]
	flag = z_mc_stack_insert(stack_data, mc_flg);
 8002d70:	7dbb      	ldrb	r3, [r7, #22]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	463b      	mov	r3, r7
 8002d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d78:	f7ff ff10 	bl	8002b9c <z_mc_stack_insert>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	75fb      	strb	r3, [r7, #23]
	return flag;
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}
	...

08002d8c <mcstack_pop>:


uint8_t mcstack_pop(stack_item *sitem, uint8_t priolevel)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	70fb      	strb	r3, [r7, #3]
	uint8_t flag = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]
	uint8_t sindex;

	sindex = priolist_pop(mc_priolist, mc_priolevel_header, &mcpriolist_firstunused_index, priolevel);
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8002e1c <mcstack_pop+0x90>)
 8002da0:	491f      	ldr	r1, [pc, #124]	@ (8002e20 <mcstack_pop+0x94>)
 8002da2:	4820      	ldr	r0, [pc, #128]	@ (8002e24 <mcstack_pop+0x98>)
 8002da4:	f7fe fb8f 	bl	80014c6 <priolist_pop>
 8002da8:	4603      	mov	r3, r0
 8002daa:	73bb      	strb	r3, [r7, #14]
	if (sindex == NONEXT)  // die zu der Priorität entsprechende MCStacklist ist leer
 8002dac:	7bbb      	ldrb	r3, [r7, #14]
 8002dae:	2bff      	cmp	r3, #255	@ 0xff
 8002db0:	d102      	bne.n	8002db8 <mcstack_pop+0x2c>
	{
		flag = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	73fb      	strb	r3, [r7, #15]
 8002db6:	e02c      	b.n	8002e12 <mcstack_pop+0x86>

	}
	else
	{

			*sitem = mc_stack[sindex];
 8002db8:	7bbb      	ldrb	r3, [r7, #14]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8002e28 <mcstack_pop+0x9c>)
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	4413      	add	r3, r2
 8002dc2:	460c      	mov	r4, r1
 8002dc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if (mcstackindex_list_act == NONEXT)
 8002dca:	4b18      	ldr	r3, [pc, #96]	@ (8002e2c <mcstack_pop+0xa0>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2bff      	cmp	r3, #255	@ 0xff
 8002dd0:	d103      	bne.n	8002dda <mcstack_pop+0x4e>
			{
				mcstackindex_list_act =0;
 8002dd2:	4b16      	ldr	r3, [pc, #88]	@ (8002e2c <mcstack_pop+0xa0>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e005      	b.n	8002de6 <mcstack_pop+0x5a>

			}
			else
			{
				mcstackindex_list_act +=1;
 8002dda:	4b14      	ldr	r3, [pc, #80]	@ (8002e2c <mcstack_pop+0xa0>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b12      	ldr	r3, [pc, #72]	@ (8002e2c <mcstack_pop+0xa0>)
 8002de4:	701a      	strb	r2, [r3, #0]

			};

			mcstackindex_list[mcstackindex_list_act] = sindex;
 8002de6:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <mcstack_pop+0xa0>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	4619      	mov	r1, r3
 8002dec:	4a10      	ldr	r2, [pc, #64]	@ (8002e30 <mcstack_pop+0xa4>)
 8002dee:	7bbb      	ldrb	r3, [r7, #14]
 8002df0:	5453      	strb	r3, [r2, r1]

			if (mc_stack[sindex].cmd_sender != Q_ZENTRALE)
 8002df2:	7bbb      	ldrb	r3, [r7, #14]
 8002df4:	4a0c      	ldr	r2, [pc, #48]	@ (8002e28 <mcstack_pop+0x9c>)
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	4413      	add	r3, r2
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d006      	beq.n	8002e0e <mcstack_pop+0x82>
			{
				mcstack_rest_length += 1;
 8002e00:	4b0c      	ldr	r3, [pc, #48]	@ (8002e34 <mcstack_pop+0xa8>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e34 <mcstack_pop+0xa8>)
 8002e0c:	701a      	strb	r2, [r3, #0]
			};

			flag = 1;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]

	};
	return flag;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd90      	pop	{r4, r7, pc}
 8002e1c:	2000028c 	.word	0x2000028c
 8002e20:	20000288 	.word	0x20000288
 8002e24:	2000025c 	.word	0x2000025c
 8002e28:	200008e8 	.word	0x200008e8
 8002e2c:	20000a5d 	.word	0x20000a5d
 8002e30:	20000a48 	.word	0x20000a48
 8002e34:	20000a5e 	.word	0x20000a5e

08002e38 <zstack_pop>:

uint8_t zstack_pop(stack_item *sitem, uint8_t priolevel)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	70fb      	strb	r3, [r7, #3]
	uint8_t flag = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
	uint8_t sindex;
	//uint8_t indexlist_tmp;

	sindex =  priolist_pop(z_priolist, z_priolevel_header, &zpriolist_firstunused_index, priolevel);
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	4a18      	ldr	r2, [pc, #96]	@ (8002eac <zstack_pop+0x74>)
 8002e4c:	4918      	ldr	r1, [pc, #96]	@ (8002eb0 <zstack_pop+0x78>)
 8002e4e:	4819      	ldr	r0, [pc, #100]	@ (8002eb4 <zstack_pop+0x7c>)
 8002e50:	f7fe fb39 	bl	80014c6 <priolist_pop>
 8002e54:	4603      	mov	r3, r0
 8002e56:	73bb      	strb	r3, [r7, #14]

	if (sindex == NONEXT)  // die zu der Priorität entsprechende MCStacklist ist leer
 8002e58:	7bbb      	ldrb	r3, [r7, #14]
 8002e5a:	2bff      	cmp	r3, #255	@ 0xff
 8002e5c:	d102      	bne.n	8002e64 <zstack_pop+0x2c>
	{
		flag = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73fb      	strb	r3, [r7, #15]
 8002e62:	e01e      	b.n	8002ea2 <zstack_pop+0x6a>

	}
	else
	{
		*sitem = zentrale_stack[sindex];
 8002e64:	7bbb      	ldrb	r3, [r7, #14]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4a13      	ldr	r2, [pc, #76]	@ (8002eb8 <zstack_pop+0x80>)
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	4413      	add	r3, r2
 8002e6e:	460c      	mov	r4, r1
 8002e70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		if (zstackindex_list_act == NONEXT)
 8002e76:	4b11      	ldr	r3, [pc, #68]	@ (8002ebc <zstack_pop+0x84>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2bff      	cmp	r3, #255	@ 0xff
 8002e7c:	d103      	bne.n	8002e86 <zstack_pop+0x4e>
		{
			zstackindex_list_act = 0;
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ebc <zstack_pop+0x84>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	e005      	b.n	8002e92 <zstack_pop+0x5a>
		}
		else
		{
			zstackindex_list_act +=1;
 8002e86:	4b0d      	ldr	r3, [pc, #52]	@ (8002ebc <zstack_pop+0x84>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <zstack_pop+0x84>)
 8002e90:	701a      	strb	r2, [r3, #0]
		};
		zstackindex_list[zstackindex_list_act] = sindex;
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <zstack_pop+0x84>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	4619      	mov	r1, r3
 8002e98:	4a09      	ldr	r2, [pc, #36]	@ (8002ec0 <zstack_pop+0x88>)
 8002e9a:	7bbb      	ldrb	r3, [r7, #14]
 8002e9c:	5453      	strb	r3, [r2, r1]

		flag = 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]

	};
	return flag;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}
 8002eac:	2000028b 	.word	0x2000028b
 8002eb0:	20000284 	.word	0x20000284
 8002eb4:	20000220 	.word	0x20000220
 8002eb8:	20000708 	.word	0x20000708
 8002ebc:	20000a5c 	.word	0x20000a5c
 8002ec0:	20000a28 	.word	0x20000a28

08002ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eca:	4b0f      	ldr	r3, [pc, #60]	@ (8002f08 <HAL_MspInit+0x44>)
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ece:	4a0e      	ldr	r2, [pc, #56]	@ (8002f08 <HAL_MspInit+0x44>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <HAL_MspInit+0x44>)
 8002ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	607b      	str	r3, [r7, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <HAL_MspInit+0x44>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee6:	4a08      	ldr	r2, [pc, #32]	@ (8002f08 <HAL_MspInit+0x44>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eee:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_MspInit+0x44>)
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002efa:	f003 f811 	bl	8005f20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000

08002f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f10:	bf00      	nop
 8002f12:	e7fd      	b.n	8002f10 <NMI_Handler+0x4>

08002f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <HardFault_Handler+0x4>

08002f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <MemManage_Handler+0x4>

08002f24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <BusFault_Handler+0x4>

08002f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f30:	bf00      	nop
 8002f32:	e7fd      	b.n	8002f30 <UsageFault_Handler+0x4>

08002f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f62:	f001 fb37 	bl	80045d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f74:	4a14      	ldr	r2, [pc, #80]	@ (8002fc8 <_sbrk+0x5c>)
 8002f76:	4b15      	ldr	r3, [pc, #84]	@ (8002fcc <_sbrk+0x60>)
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f80:	4b13      	ldr	r3, [pc, #76]	@ (8002fd0 <_sbrk+0x64>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f88:	4b11      	ldr	r3, [pc, #68]	@ (8002fd0 <_sbrk+0x64>)
 8002f8a:	4a12      	ldr	r2, [pc, #72]	@ (8002fd4 <_sbrk+0x68>)
 8002f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f8e:	4b10      	ldr	r3, [pc, #64]	@ (8002fd0 <_sbrk+0x64>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d207      	bcs.n	8002fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f9c:	f006 ff86 	bl	8009eac <__errno>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002faa:	e009      	b.n	8002fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fac:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <_sbrk+0x64>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fb2:	4b07      	ldr	r3, [pc, #28]	@ (8002fd0 <_sbrk+0x64>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	4a05      	ldr	r2, [pc, #20]	@ (8002fd0 <_sbrk+0x64>)
 8002fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20020000 	.word	0x20020000
 8002fcc:	00000400 	.word	0x00000400
 8002fd0:	20000a60 	.word	0x20000a60
 8002fd4:	20001530 	.word	0x20001530

08002fd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002fdc:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <SystemInit+0x20>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe2:	4a05      	ldr	r2, [pc, #20]	@ (8002ff8 <SystemInit+0x20>)
 8002fe4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fe8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08c      	sub	sp, #48	@ 0x30
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003002:	f107 0320 	add.w	r3, r7, #32
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003010:	f107 030c 	add.w	r3, r7, #12
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003020:	463b      	mov	r3, r7
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800302a:	4b27      	ldr	r3, [pc, #156]	@ (80030c8 <MX_TIM1_Init+0xcc>)
 800302c:	4a27      	ldr	r2, [pc, #156]	@ (80030cc <MX_TIM1_Init+0xd0>)
 800302e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8003030:	4b25      	ldr	r3, [pc, #148]	@ (80030c8 <MX_TIM1_Init+0xcc>)
 8003032:	22a0      	movs	r2, #160	@ 0xa0
 8003034:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003036:	4b24      	ldr	r3, [pc, #144]	@ (80030c8 <MX_TIM1_Init+0xcc>)
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59;
 800303c:	4b22      	ldr	r3, [pc, #136]	@ (80030c8 <MX_TIM1_Init+0xcc>)
 800303e:	223b      	movs	r2, #59	@ 0x3b
 8003040:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003042:	4b21      	ldr	r3, [pc, #132]	@ (80030c8 <MX_TIM1_Init+0xcc>)
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003048:	4b1f      	ldr	r3, [pc, #124]	@ (80030c8 <MX_TIM1_Init+0xcc>)
 800304a:	2200      	movs	r2, #0
 800304c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800304e:	4b1e      	ldr	r3, [pc, #120]	@ (80030c8 <MX_TIM1_Init+0xcc>)
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003054:	481c      	ldr	r0, [pc, #112]	@ (80030c8 <MX_TIM1_Init+0xcc>)
 8003056:	f004 fb45 	bl	80076e4 <HAL_TIM_Base_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8003060:	f7fe f97f 	bl	8001362 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003068:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800306a:	f107 0320 	add.w	r3, r7, #32
 800306e:	4619      	mov	r1, r3
 8003070:	4815      	ldr	r0, [pc, #84]	@ (80030c8 <MX_TIM1_Init+0xcc>)
 8003072:	f004 fb8f 	bl	8007794 <HAL_TIM_ConfigClockSource>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800307c:	f7fe f971 	bl	8001362 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003084:	2300      	movs	r3, #0
 8003086:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003088:	f107 030c 	add.w	r3, r7, #12
 800308c:	4619      	mov	r1, r3
 800308e:	480e      	ldr	r0, [pc, #56]	@ (80030c8 <MX_TIM1_Init+0xcc>)
 8003090:	f004 fc8c 	bl	80079ac <HAL_TIM_SlaveConfigSynchro>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800309a:	f7fe f962 	bl	8001362 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030a2:	2300      	movs	r3, #0
 80030a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030aa:	463b      	mov	r3, r7
 80030ac:	4619      	mov	r1, r3
 80030ae:	4806      	ldr	r0, [pc, #24]	@ (80030c8 <MX_TIM1_Init+0xcc>)
 80030b0:	f004 fee4 	bl	8007e7c <HAL_TIMEx_MasterConfigSynchronization>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80030ba:	f7fe f952 	bl	8001362 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80030be:	bf00      	nop
 80030c0:	3730      	adds	r7, #48	@ 0x30
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000a64 	.word	0x20000a64
 80030cc:	40012c00 	.word	0x40012c00

080030d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003108 <HAL_TIM_Base_MspInit+0x38>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10b      	bne.n	80030fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030e2:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <HAL_TIM_Base_MspInit+0x3c>)
 80030e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e6:	4a09      	ldr	r2, [pc, #36]	@ (800310c <HAL_TIM_Base_MspInit+0x3c>)
 80030e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ee:	4b07      	ldr	r3, [pc, #28]	@ (800310c <HAL_TIM_Base_MspInit+0x3c>)
 80030f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40012c00 	.word	0x40012c00
 800310c:	40021000 	.word	0x40021000

08003110 <set_ct_hbeat>:
    else return 0;
}

// HEARTBEAT Stoppuhr setzen
void set_ct_hbeat(uint16_t ct_hbeatval)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	80fb      	strh	r3, [r7, #6]
    ct_hbeat = ct_hbeatval;
 800311a:	4a04      	ldr	r2, [pc, #16]	@ (800312c <set_ct_hbeat+0x1c>)
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	8013      	strh	r3, [r2, #0]

}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	20000ab0 	.word	0x20000ab0

08003130 <ct_hbeat_null>:

// HEARTBEAT Stoppuhr abfragen
uint8_t ct_hbeat_null(void)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_hbeat;
 8003136:	4b07      	ldr	r3, [pc, #28]	@ (8003154 <ct_hbeat_null+0x24>)
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <ct_hbeat_null+0x16>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <ct_hbeat_null+0x18>
    else return 0;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	20000ab0 	.word	0x20000ab0

08003158 <ct_init_null>:

}

// INIT Stoppuhr abfragen
uint8_t ct_init_null(void)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
    uint16_t tmp = ct_init;
 800315e:	4b07      	ldr	r3, [pc, #28]	@ (800317c <ct_init_null+0x24>)
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	80fb      	strh	r3, [r7, #6]

    if (tmp <= 0) return 1;
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <ct_init_null+0x16>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <ct_init_null+0x18>
    else return 0;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	20000ab2 	.word	0x20000ab2

08003180 <HAL_UART_RxCpltCallback>:
int16_t rb_free_rx(UartRB *p);
int16_t rb_free_tx(UartRB *p);
//----- INTERRUPT ROUTINEN ----------------------------------------------------

// Reception interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	uartRB_OnRxCplt(&uart4_rb, huart);
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4807      	ldr	r0, [pc, #28]	@ (80031a8 <HAL_UART_RxCpltCallback+0x28>)
 800318c:	f000 f812 	bl	80031b4 <uartRB_OnRxCplt>
	uartRB_OnRxCplt(&uart5_rb, huart);
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4806      	ldr	r0, [pc, #24]	@ (80031ac <HAL_UART_RxCpltCallback+0x2c>)
 8003194:	f000 f80e 	bl	80031b4 <uartRB_OnRxCplt>
	uartRB_OnRxCplt(&usart1_rb, huart);
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4805      	ldr	r0, [pc, #20]	@ (80031b0 <HAL_UART_RxCpltCallback+0x30>)
 800319c:	f000 f80a 	bl	80031b4 <uartRB_OnRxCplt>
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000ab4 	.word	0x20000ab4
 80031ac:	20000c44 	.word	0x20000c44
 80031b0:	20000dd4 	.word	0x20000dd4

080031b4 <uartRB_OnRxCplt>:
	uartRB_OnTxCplt(&uart4_rb, huart);
	uartRB_OnTxCplt(&uart5_rb, huart);
	uartRB_OnTxCplt(&usart1_rb, huart);
}

void uartRB_OnRxCplt(UartRB *p, UART_HandleTypeDef *huart) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
	if (huart != p->huart)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d12d      	bne.n	8003224 <uartRB_OnRxCplt+0x70>
		return;

	if (1 < rb_free_rx(p))                        // noch Platz f�r ein Zeichen?
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f8ac 	bl	8003326 <rb_free_rx>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	dd19      	ble.n	8003208 <uartRB_OnRxCplt+0x54>
			{
		p->rx[p->rx_in] = p->it_rx;                      // Zeichen �bernehmen
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	895b      	ldrh	r3, [r3, #10]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	4619      	mov	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	440b      	add	r3, r1
 80031e6:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		p->rx_in++;                                       // Zeiger weiterr�cken
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	895b      	ldrh	r3, [r3, #10]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3301      	adds	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	815a      	strh	r2, [r3, #10]
		if (p->rx_in >= BUFLEN)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	895b      	ldrh	r3, [r3, #10]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b7e      	cmp	r3, #126	@ 0x7e
 8003200:	d902      	bls.n	8003208 <uartRB_OnRxCplt+0x54>
			p->rx_in = 0;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	815a      	strh	r2, [r3, #10]
	}

	while (HAL_UART_Receive_IT(p->huart, &p->it_rx, 1) != HAL_OK) {
 8003208:	bf00      	nop
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8003214:	2201      	movs	r2, #1
 8003216:	4619      	mov	r1, r3
 8003218:	f004 ffaa 	bl	8008170 <HAL_UART_Receive_IT>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f3      	bne.n	800320a <uartRB_OnRxCplt+0x56>
 8003222:	e000      	b.n	8003226 <uartRB_OnRxCplt+0x72>
		return;
 8003224:	bf00      	nop
	}
}
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <uart_initAll>:

//----- FUNKTIONSDEFINITIONEN -------------------------------------------------

/******************** RS232 ***********************/

void uart_initAll(void) {
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
	uartRB_Init(&uart4_rb, &huart4, UART4_IRQn);
 8003230:	2234      	movs	r2, #52	@ 0x34
 8003232:	490a      	ldr	r1, [pc, #40]	@ (800325c <uart_initAll+0x30>)
 8003234:	480a      	ldr	r0, [pc, #40]	@ (8003260 <uart_initAll+0x34>)
 8003236:	f000 f821 	bl	800327c <uartRB_Init>
	uartRB_Init(&uart5_rb, &huart5, UART5_IRQn);
 800323a:	2235      	movs	r2, #53	@ 0x35
 800323c:	4909      	ldr	r1, [pc, #36]	@ (8003264 <uart_initAll+0x38>)
 800323e:	480a      	ldr	r0, [pc, #40]	@ (8003268 <uart_initAll+0x3c>)
 8003240:	f000 f81c 	bl	800327c <uartRB_Init>
	uartRB_Init(&usart1_rb, &huart1, USART1_IRQn);
 8003244:	2225      	movs	r2, #37	@ 0x25
 8003246:	4909      	ldr	r1, [pc, #36]	@ (800326c <uart_initAll+0x40>)
 8003248:	4809      	ldr	r0, [pc, #36]	@ (8003270 <uart_initAll+0x44>)
 800324a:	f000 f817 	bl	800327c <uartRB_Init>
	uartRB_Init(&usart3_rb, &huart3, USART3_IRQn);
 800324e:	2227      	movs	r2, #39	@ 0x27
 8003250:	4908      	ldr	r1, [pc, #32]	@ (8003274 <uart_initAll+0x48>)
 8003252:	4809      	ldr	r0, [pc, #36]	@ (8003278 <uart_initAll+0x4c>)
 8003254:	f000 f812 	bl	800327c <uartRB_Init>
}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}
 800325c:	200010f4 	.word	0x200010f4
 8003260:	20000ab4 	.word	0x20000ab4
 8003264:	20001188 	.word	0x20001188
 8003268:	20000c44 	.word	0x20000c44
 800326c:	2000121c 	.word	0x2000121c
 8003270:	20000dd4 	.word	0x20000dd4
 8003274:	20001344 	.word	0x20001344
 8003278:	20000f64 	.word	0x20000f64

0800327c <uartRB_Init>:

void uartRB_Init(UartRB *p, UART_HandleTypeDef *huart, IRQn_Type irqn) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	4613      	mov	r3, r2
 8003288:	71fb      	strb	r3, [r7, #7]
	p->huart = huart;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	601a      	str	r2, [r3, #0]
	p->irqn = irqn;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	79fa      	ldrb	r2, [r7, #7]
 8003294:	711a      	strb	r2, [r3, #4]
	p->tx_in = p->tx_out = p->rx_in = p->rx_out = 0;
 8003296:	2200      	movs	r2, #0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4611      	mov	r1, r2
 800329c:	8199      	strh	r1, [r3, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4611      	mov	r1, r2
 80032a2:	8159      	strh	r1, [r3, #10]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4611      	mov	r1, r2
 80032a8:	8119      	strh	r1, [r3, #8]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	80da      	strh	r2, [r3, #6]
	HAL_UART_Receive_IT(p->huart, &p->it_rx, 1);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80032b8:	2201      	movs	r2, #1
 80032ba:	4619      	mov	r1, r3
 80032bc:	f004 ff58 	bl	8008170 <HAL_UART_Receive_IT>
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <rb_free_tx>:

int16_t rb_free_tx(UartRB *p) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
	int16_t x;
	HAL_NVIC_DisableIRQ(p->irqn);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f002 fab5 	bl	8005846 <HAL_NVIC_DisableIRQ>
	x = (int16_t) p->tx_in - (int8_t) p->tx_out;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	88db      	ldrh	r3, [r3, #6]
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	891b      	ldrh	r3, [r3, #8]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	b25b      	sxtb	r3, r3
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 80032f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	da03      	bge.n	8003302 <rb_free_tx+0x3a>
		x += BUFLEN;
 80032fa:	89fb      	ldrh	r3, [r7, #14]
 80032fc:	337f      	adds	r3, #127	@ 0x7f
 80032fe:	b29b      	uxth	r3, r3
 8003300:	81fb      	strh	r3, [r7, #14]
	x = BUFLEN - x;
 8003302:	89fb      	ldrh	r3, [r7, #14]
 8003304:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8003308:	b29b      	uxth	r3, r3
 800330a:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_EnableIRQ(p->irqn);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003312:	4618      	mov	r0, r3
 8003314:	f002 fa89 	bl	800582a <HAL_NVIC_EnableIRQ>
	return (uint8_t) x;
 8003318:	89fb      	ldrh	r3, [r7, #14]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	b21b      	sxth	r3, r3
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <rb_free_rx>:

int16_t rb_free_rx(UartRB *p) {
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
	int16_t x;
	HAL_NVIC_DisableIRQ(p->irqn);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003334:	4618      	mov	r0, r3
 8003336:	f002 fa86 	bl	8005846 <HAL_NVIC_DisableIRQ>
	x = p->rx_in - p->rx_out;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	895b      	ldrh	r3, [r3, #10]
 800333e:	b29a      	uxth	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	899b      	ldrh	r3, [r3, #12]
 8003344:	b29b      	uxth	r3, r3
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	b29b      	uxth	r3, r3
 800334a:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 800334c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003350:	2b00      	cmp	r3, #0
 8003352:	da03      	bge.n	800335c <rb_free_rx+0x36>
		x += BUFLEN;
 8003354:	89fb      	ldrh	r3, [r7, #14]
 8003356:	337f      	adds	r3, #127	@ 0x7f
 8003358:	b29b      	uxth	r3, r3
 800335a:	81fb      	strh	r3, [r7, #14]
	x = BUFLEN - x;
 800335c:	89fb      	ldrh	r3, [r7, #14]
 800335e:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8003362:	b29b      	uxth	r3, r3
 8003364:	81fb      	strh	r3, [r7, #14]
	HAL_NVIC_EnableIRQ(p->irqn);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800336c:	4618      	mov	r0, r3
 800336e:	f002 fa5c 	bl	800582a <HAL_NVIC_EnableIRQ>
	return x;
 8003372:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <rb_rx_used>:

int16_t rb_rx_used(const UartRB *p)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
	int16_t used;
    HAL_NVIC_DisableIRQ(p->irqn);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800338c:	4618      	mov	r0, r3
 800338e:	f002 fa5a 	bl	8005846 <HAL_NVIC_DisableIRQ>
    used = (int16_t)p->rx_in - (int32_t)p->rx_out;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	895b      	ldrh	r3, [r3, #10]
 8003396:	b29a      	uxth	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	899b      	ldrh	r3, [r3, #12]
 800339c:	b29b      	uxth	r3, r3
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	81fb      	strh	r3, [r7, #14]
    if (used < 0) used += BUFLEN;
 80033a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	da03      	bge.n	80033b4 <rb_rx_used+0x36>
 80033ac:	89fb      	ldrh	r3, [r7, #14]
 80033ae:	337f      	adds	r3, #127	@ 0x7f
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	81fb      	strh	r3, [r7, #14]
    HAL_NVIC_EnableIRQ(p->irqn);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f002 fa35 	bl	800582a <HAL_NVIC_EnableIRQ>
    return used;
 80033c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <uartRB_KickTx>:

// is this correct
void uartRB_KickTx(UartRB *p) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

	if (__HAL_UART_GET_FLAG(p->huart, UART_FLAG_TC) == 0)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e0:	2b40      	cmp	r3, #64	@ 0x40
 80033e2:	d134      	bne.n	800344e <uartRB_KickTx+0x82>
		return;
	HAL_NVIC_DisableIRQ(p->irqn);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f002 fa2b 	bl	8005846 <HAL_NVIC_DisableIRQ>
// No, we still have something to transmit?
	int16_t free = rb_free_tx(p);          // how many free slots in TX ring
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff69 	bl	80032c8 <rb_free_tx>
 80033f6:	4603      	mov	r3, r0
 80033f8:	81fb      	strh	r3, [r7, #14]
	int16_t tmpBuf_out = p->tx_out;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	891b      	ldrh	r3, [r3, #8]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	81bb      	strh	r3, [r7, #12]
	if (free < BUFLEN) {               // => there is at least 1 byte pending
 8003402:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003406:	2b7e      	cmp	r3, #126	@ 0x7e
 8003408:	dc1a      	bgt.n	8003440 <uartRB_KickTx+0x74>
		p->tx_out++;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	891b      	ldrh	r3, [r3, #8]
 800340e:	b29b      	uxth	r3, r3
 8003410:	3301      	adds	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	811a      	strh	r2, [r3, #8]
		if (p->tx_out >= BUFLEN) p->tx_out = 0;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	891b      	ldrh	r3, [r3, #8]
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b7e      	cmp	r3, #126	@ 0x7e
 8003420:	d902      	bls.n	8003428 <uartRB_KickTx+0x5c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	811a      	strh	r2, [r3, #8]
		HAL_UART_Transmit_IT(p->huart, &p->tx[tmpBuf_out], 1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003430:	3308      	adds	r3, #8
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	3306      	adds	r3, #6
 8003438:	2201      	movs	r2, #1
 800343a:	4619      	mov	r1, r3
 800343c:	f004 fe04 	bl	8008048 <HAL_UART_Transmit_IT>
	}
	HAL_NVIC_EnableIRQ(p->irqn);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003446:	4618      	mov	r0, r3
 8003448:	f002 f9ef 	bl	800582a <HAL_NVIC_EnableIRQ>
 800344c:	e000      	b.n	8003450 <uartRB_KickTx+0x84>
		return;
 800344e:	bf00      	nop
}
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <uartRB_Put>:

uint8_t uartRB_Put(UartRB *p, const void *buf, uint8_t n) {
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	4613      	mov	r3, r2
 8003464:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(p->irqn);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800346c:	4618      	mov	r0, r3
 800346e:	f002 f9ea 	bl	8005846 <HAL_NVIC_DisableIRQ>
	const uint8_t *src = (const uint8_t *)buf;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	613b      	str	r3, [r7, #16]
	if (n > rb_free_tx(p)){
 8003476:	79fc      	ldrb	r4, [r7, #7]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f7ff ff25 	bl	80032c8 <rb_free_tx>
 800347e:	4603      	mov	r3, r0
 8003480:	429c      	cmp	r4, r3
 8003482:	dd07      	ble.n	8003494 <uartRB_Put+0x3c>
		HAL_NVIC_EnableIRQ(p->irqn);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800348a:	4618      	mov	r0, r3
 800348c:	f002 f9cd 	bl	800582a <HAL_NVIC_EnableIRQ>
		return 0;
 8003490:	2300      	movs	r3, #0
 8003492:	e02f      	b.n	80034f4 <uartRB_Put+0x9c>
	}
	for (uint8_t i = 1; i <= n; i++) {
 8003494:	2301      	movs	r3, #1
 8003496:	75fb      	strb	r3, [r7, #23]
 8003498:	e021      	b.n	80034de <uartRB_Put+0x86>
		p->tx[p->tx_in] = src[i-1];
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	3b01      	subs	r3, #1
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4413      	add	r3, r2
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	88d2      	ldrh	r2, [r2, #6]
 80034a6:	b292      	uxth	r2, r2
 80034a8:	4611      	mov	r1, r2
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	440b      	add	r3, r1
 80034b0:	739a      	strb	r2, [r3, #14]
		p->tx_in = (uint8_t) ((p->tx_in + 1) % BUFLEN);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	88db      	ldrh	r3, [r3, #6]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <uartRB_Put+0xa4>)
 80034bc:	fb83 1302 	smull	r1, r3, r3, r2
 80034c0:	4413      	add	r3, r2
 80034c2:	1199      	asrs	r1, r3, #6
 80034c4:	17d3      	asrs	r3, r2, #31
 80034c6:	1ac9      	subs	r1, r1, r3
 80034c8:	460b      	mov	r3, r1
 80034ca:	01db      	lsls	r3, r3, #7
 80034cc:	1a5b      	subs	r3, r3, r1
 80034ce:	1ad1      	subs	r1, r2, r3
 80034d0:	b2cb      	uxtb	r3, r1
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	80da      	strh	r2, [r3, #6]
	for (uint8_t i = 1; i <= n; i++) {
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	3301      	adds	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
 80034de:	7dfa      	ldrb	r2, [r7, #23]
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d9d9      	bls.n	800349a <uartRB_Put+0x42>
	}
	HAL_NVIC_EnableIRQ(p->irqn);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f002 f99c 	bl	800582a <HAL_NVIC_EnableIRQ>
	return 1;
 80034f2:	2301      	movs	r3, #1
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	81020409 	.word	0x81020409

08003500 <uartRB_Getc>:

uint8_t uartRB_Getc(UartRB *p) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	uint8_t c;
	HAL_NVIC_DisableIRQ(p->irqn);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800350e:	4618      	mov	r0, r3
 8003510:	f002 f999 	bl	8005846 <HAL_NVIC_DisableIRQ>
	c = p->rx[p->rx_out];
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	899b      	ldrh	r3, [r3, #12]
 8003518:	b29b      	uxth	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4413      	add	r3, r2
 8003520:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8003524:	73fb      	strb	r3, [r7, #15]
	p->rx_out++;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	899b      	ldrh	r3, [r3, #12]
 800352a:	b29b      	uxth	r3, r3
 800352c:	3301      	adds	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	819a      	strh	r2, [r3, #12]
	if (p->rx_out >= BUFLEN) p->rx_out = 0;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	899b      	ldrh	r3, [r3, #12]
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b7e      	cmp	r3, #126	@ 0x7e
 800353c:	d902      	bls.n	8003544 <uartRB_Getc+0x44>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	819a      	strh	r2, [r3, #12]
	HAL_NVIC_EnableIRQ(p->irqn);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800354a:	4618      	mov	r0, r3
 800354c:	f002 f96d 	bl	800582a <HAL_NVIC_EnableIRQ>
	return c;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003560:	4b22      	ldr	r3, [pc, #136]	@ (80035ec <MX_UART4_Init+0x90>)
 8003562:	4a23      	ldr	r2, [pc, #140]	@ (80035f0 <MX_UART4_Init+0x94>)
 8003564:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 19200;
 8003566:	4b21      	ldr	r3, [pc, #132]	@ (80035ec <MX_UART4_Init+0x90>)
 8003568:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800356c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800356e:	4b1f      	ldr	r3, [pc, #124]	@ (80035ec <MX_UART4_Init+0x90>)
 8003570:	2200      	movs	r2, #0
 8003572:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003574:	4b1d      	ldr	r3, [pc, #116]	@ (80035ec <MX_UART4_Init+0x90>)
 8003576:	2200      	movs	r2, #0
 8003578:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800357a:	4b1c      	ldr	r3, [pc, #112]	@ (80035ec <MX_UART4_Init+0x90>)
 800357c:	2200      	movs	r2, #0
 800357e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003580:	4b1a      	ldr	r3, [pc, #104]	@ (80035ec <MX_UART4_Init+0x90>)
 8003582:	220c      	movs	r2, #12
 8003584:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003586:	4b19      	ldr	r3, [pc, #100]	@ (80035ec <MX_UART4_Init+0x90>)
 8003588:	2200      	movs	r2, #0
 800358a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800358c:	4b17      	ldr	r3, [pc, #92]	@ (80035ec <MX_UART4_Init+0x90>)
 800358e:	2200      	movs	r2, #0
 8003590:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003592:	4b16      	ldr	r3, [pc, #88]	@ (80035ec <MX_UART4_Init+0x90>)
 8003594:	2200      	movs	r2, #0
 8003596:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003598:	4b14      	ldr	r3, [pc, #80]	@ (80035ec <MX_UART4_Init+0x90>)
 800359a:	2200      	movs	r2, #0
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800359e:	4b13      	ldr	r3, [pc, #76]	@ (80035ec <MX_UART4_Init+0x90>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80035a4:	4811      	ldr	r0, [pc, #68]	@ (80035ec <MX_UART4_Init+0x90>)
 80035a6:	f004 fcff 	bl	8007fa8 <HAL_UART_Init>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80035b0:	f7fd fed7 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035b4:	2100      	movs	r1, #0
 80035b6:	480d      	ldr	r0, [pc, #52]	@ (80035ec <MX_UART4_Init+0x90>)
 80035b8:	f006 fb75 	bl	8009ca6 <HAL_UARTEx_SetTxFifoThreshold>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80035c2:	f7fd fece 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035c6:	2100      	movs	r1, #0
 80035c8:	4808      	ldr	r0, [pc, #32]	@ (80035ec <MX_UART4_Init+0x90>)
 80035ca:	f006 fbaa 	bl	8009d22 <HAL_UARTEx_SetRxFifoThreshold>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80035d4:	f7fd fec5 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80035d8:	4804      	ldr	r0, [pc, #16]	@ (80035ec <MX_UART4_Init+0x90>)
 80035da:	f006 fb2b 	bl	8009c34 <HAL_UARTEx_DisableFifoMode>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80035e4:	f7fd febd 	bl	8001362 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	200010f4 	.word	0x200010f4
 80035f0:	40004c00 	.word	0x40004c00

080035f4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80035f8:	4b22      	ldr	r3, [pc, #136]	@ (8003684 <MX_UART5_Init+0x90>)
 80035fa:	4a23      	ldr	r2, [pc, #140]	@ (8003688 <MX_UART5_Init+0x94>)
 80035fc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 80035fe:	4b21      	ldr	r3, [pc, #132]	@ (8003684 <MX_UART5_Init+0x90>)
 8003600:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003604:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003606:	4b1f      	ldr	r3, [pc, #124]	@ (8003684 <MX_UART5_Init+0x90>)
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800360c:	4b1d      	ldr	r3, [pc, #116]	@ (8003684 <MX_UART5_Init+0x90>)
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003612:	4b1c      	ldr	r3, [pc, #112]	@ (8003684 <MX_UART5_Init+0x90>)
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003618:	4b1a      	ldr	r3, [pc, #104]	@ (8003684 <MX_UART5_Init+0x90>)
 800361a:	220c      	movs	r2, #12
 800361c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800361e:	4b19      	ldr	r3, [pc, #100]	@ (8003684 <MX_UART5_Init+0x90>)
 8003620:	2200      	movs	r2, #0
 8003622:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003624:	4b17      	ldr	r3, [pc, #92]	@ (8003684 <MX_UART5_Init+0x90>)
 8003626:	2200      	movs	r2, #0
 8003628:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800362a:	4b16      	ldr	r3, [pc, #88]	@ (8003684 <MX_UART5_Init+0x90>)
 800362c:	2200      	movs	r2, #0
 800362e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003630:	4b14      	ldr	r3, [pc, #80]	@ (8003684 <MX_UART5_Init+0x90>)
 8003632:	2200      	movs	r2, #0
 8003634:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003636:	4b13      	ldr	r3, [pc, #76]	@ (8003684 <MX_UART5_Init+0x90>)
 8003638:	2200      	movs	r2, #0
 800363a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800363c:	4811      	ldr	r0, [pc, #68]	@ (8003684 <MX_UART5_Init+0x90>)
 800363e:	f004 fcb3 	bl	8007fa8 <HAL_UART_Init>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003648:	f7fd fe8b 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800364c:	2100      	movs	r1, #0
 800364e:	480d      	ldr	r0, [pc, #52]	@ (8003684 <MX_UART5_Init+0x90>)
 8003650:	f006 fb29 	bl	8009ca6 <HAL_UARTEx_SetTxFifoThreshold>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800365a:	f7fd fe82 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800365e:	2100      	movs	r1, #0
 8003660:	4808      	ldr	r0, [pc, #32]	@ (8003684 <MX_UART5_Init+0x90>)
 8003662:	f006 fb5e 	bl	8009d22 <HAL_UARTEx_SetRxFifoThreshold>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800366c:	f7fd fe79 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003670:	4804      	ldr	r0, [pc, #16]	@ (8003684 <MX_UART5_Init+0x90>)
 8003672:	f006 fadf 	bl	8009c34 <HAL_UARTEx_DisableFifoMode>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800367c:	f7fd fe71 	bl	8001362 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003680:	bf00      	nop
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20001188 	.word	0x20001188
 8003688:	40005000 	.word	0x40005000

0800368c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003690:	4b22      	ldr	r3, [pc, #136]	@ (800371c <MX_USART1_UART_Init+0x90>)
 8003692:	4a23      	ldr	r2, [pc, #140]	@ (8003720 <MX_USART1_UART_Init+0x94>)
 8003694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8003696:	4b21      	ldr	r3, [pc, #132]	@ (800371c <MX_USART1_UART_Init+0x90>)
 8003698:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800369c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800369e:	4b1f      	ldr	r3, [pc, #124]	@ (800371c <MX_USART1_UART_Init+0x90>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036a4:	4b1d      	ldr	r3, [pc, #116]	@ (800371c <MX_USART1_UART_Init+0x90>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036aa:	4b1c      	ldr	r3, [pc, #112]	@ (800371c <MX_USART1_UART_Init+0x90>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036b0:	4b1a      	ldr	r3, [pc, #104]	@ (800371c <MX_USART1_UART_Init+0x90>)
 80036b2:	220c      	movs	r2, #12
 80036b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036b6:	4b19      	ldr	r3, [pc, #100]	@ (800371c <MX_USART1_UART_Init+0x90>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036bc:	4b17      	ldr	r3, [pc, #92]	@ (800371c <MX_USART1_UART_Init+0x90>)
 80036be:	2200      	movs	r2, #0
 80036c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036c2:	4b16      	ldr	r3, [pc, #88]	@ (800371c <MX_USART1_UART_Init+0x90>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036c8:	4b14      	ldr	r3, [pc, #80]	@ (800371c <MX_USART1_UART_Init+0x90>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036ce:	4b13      	ldr	r3, [pc, #76]	@ (800371c <MX_USART1_UART_Init+0x90>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036d4:	4811      	ldr	r0, [pc, #68]	@ (800371c <MX_USART1_UART_Init+0x90>)
 80036d6:	f004 fc67 	bl	8007fa8 <HAL_UART_Init>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80036e0:	f7fd fe3f 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036e4:	2100      	movs	r1, #0
 80036e6:	480d      	ldr	r0, [pc, #52]	@ (800371c <MX_USART1_UART_Init+0x90>)
 80036e8:	f006 fadd 	bl	8009ca6 <HAL_UARTEx_SetTxFifoThreshold>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80036f2:	f7fd fe36 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036f6:	2100      	movs	r1, #0
 80036f8:	4808      	ldr	r0, [pc, #32]	@ (800371c <MX_USART1_UART_Init+0x90>)
 80036fa:	f006 fb12 	bl	8009d22 <HAL_UARTEx_SetRxFifoThreshold>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003704:	f7fd fe2d 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003708:	4804      	ldr	r0, [pc, #16]	@ (800371c <MX_USART1_UART_Init+0x90>)
 800370a:	f006 fa93 	bl	8009c34 <HAL_UARTEx_DisableFifoMode>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003714:	f7fd fe25 	bl	8001362 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003718:	bf00      	nop
 800371a:	bd80      	pop	{r7, pc}
 800371c:	2000121c 	.word	0x2000121c
 8003720:	40013800 	.word	0x40013800

08003724 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003728:	4b23      	ldr	r3, [pc, #140]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 800372a:	4a24      	ldr	r2, [pc, #144]	@ (80037bc <MX_USART2_UART_Init+0x98>)
 800372c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800372e:	4b22      	ldr	r3, [pc, #136]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 8003730:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003736:	4b20      	ldr	r3, [pc, #128]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800373c:	4b1e      	ldr	r3, [pc, #120]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 800373e:	2200      	movs	r2, #0
 8003740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003742:	4b1d      	ldr	r3, [pc, #116]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 8003744:	2200      	movs	r2, #0
 8003746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003748:	4b1b      	ldr	r3, [pc, #108]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 800374a:	220c      	movs	r2, #12
 800374c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800374e:	4b1a      	ldr	r3, [pc, #104]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 8003750:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003754:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003756:	4b18      	ldr	r3, [pc, #96]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 8003758:	2200      	movs	r2, #0
 800375a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800375c:	4b16      	ldr	r3, [pc, #88]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 800375e:	2200      	movs	r2, #0
 8003760:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003762:	4b15      	ldr	r3, [pc, #84]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 8003764:	2200      	movs	r2, #0
 8003766:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003768:	4b13      	ldr	r3, [pc, #76]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 800376a:	2200      	movs	r2, #0
 800376c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800376e:	4812      	ldr	r0, [pc, #72]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 8003770:	f004 fc1a 	bl	8007fa8 <HAL_UART_Init>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800377a:	f7fd fdf2 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800377e:	2100      	movs	r1, #0
 8003780:	480d      	ldr	r0, [pc, #52]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 8003782:	f006 fa90 	bl	8009ca6 <HAL_UARTEx_SetTxFifoThreshold>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 800378c:	f7fd fde9 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003790:	2100      	movs	r1, #0
 8003792:	4809      	ldr	r0, [pc, #36]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 8003794:	f006 fac5 	bl	8009d22 <HAL_UARTEx_SetRxFifoThreshold>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800379e:	f7fd fde0 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80037a2:	4805      	ldr	r0, [pc, #20]	@ (80037b8 <MX_USART2_UART_Init+0x94>)
 80037a4:	f006 fa46 	bl	8009c34 <HAL_UARTEx_DisableFifoMode>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80037ae:	f7fd fdd8 	bl	8001362 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	200012b0 	.word	0x200012b0
 80037bc:	40004400 	.word	0x40004400

080037c0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80037c4:	4b23      	ldr	r3, [pc, #140]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 80037c6:	4a24      	ldr	r2, [pc, #144]	@ (8003858 <MX_USART3_UART_Init+0x98>)
 80037c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 80037ca:	4b22      	ldr	r3, [pc, #136]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 80037cc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80037d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037d2:	4b20      	ldr	r3, [pc, #128]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 80037da:	2200      	movs	r2, #0
 80037dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037de:	4b1d      	ldr	r3, [pc, #116]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 80037e6:	220c      	movs	r2, #12
 80037e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80037ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 80037ec:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80037f0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037f2:	4b18      	ldr	r3, [pc, #96]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037f8:	4b16      	ldr	r3, [pc, #88]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80037fe:	4b15      	ldr	r3, [pc, #84]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 8003800:	2200      	movs	r2, #0
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003804:	4b13      	ldr	r3, [pc, #76]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 8003806:	2200      	movs	r2, #0
 8003808:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800380a:	4812      	ldr	r0, [pc, #72]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 800380c:	f004 fbcc 	bl	8007fa8 <HAL_UART_Init>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8003816:	f7fd fda4 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800381a:	2100      	movs	r1, #0
 800381c:	480d      	ldr	r0, [pc, #52]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 800381e:	f006 fa42 	bl	8009ca6 <HAL_UARTEx_SetTxFifoThreshold>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8003828:	f7fd fd9b 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800382c:	2100      	movs	r1, #0
 800382e:	4809      	ldr	r0, [pc, #36]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 8003830:	f006 fa77 	bl	8009d22 <HAL_UARTEx_SetRxFifoThreshold>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 800383a:	f7fd fd92 	bl	8001362 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800383e:	4805      	ldr	r0, [pc, #20]	@ (8003854 <MX_USART3_UART_Init+0x94>)
 8003840:	f006 f9f8 	bl	8009c34 <HAL_UARTEx_DisableFifoMode>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 800384a:	f7fd fd8a 	bl	8001362 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20001344 	.word	0x20001344
 8003858:	40004800 	.word	0x40004800

0800385c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b0aa      	sub	sp, #168	@ 0xa8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003864:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003874:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003878:	2254      	movs	r2, #84	@ 0x54
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f006 fafd 	bl	8009e7c <memset>
  if(uartHandle->Instance==UART4)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4aa3      	ldr	r2, [pc, #652]	@ (8003b14 <HAL_UART_MspInit+0x2b8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d13c      	bne.n	8003906 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800388c:	2308      	movs	r3, #8
 800388e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003890:	2300      	movs	r3, #0
 8003892:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003894:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003898:	4618      	mov	r0, r3
 800389a:	f003 f87f 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80038a4:	f7fd fd5d 	bl	8001362 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80038a8:	4b9b      	ldr	r3, [pc, #620]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 80038aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ac:	4a9a      	ldr	r2, [pc, #616]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 80038ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80038b4:	4b98      	ldr	r3, [pc, #608]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038c0:	4b95      	ldr	r3, [pc, #596]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 80038c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c4:	4a94      	ldr	r2, [pc, #592]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 80038c6:	f043 0304 	orr.w	r3, r3, #4
 80038ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038cc:	4b92      	ldr	r3, [pc, #584]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 80038ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80038d8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80038dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e0:	2302      	movs	r3, #2
 80038e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80038f2:	2305      	movs	r3, #5
 80038f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038f8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80038fc:	4619      	mov	r1, r3
 80038fe:	4887      	ldr	r0, [pc, #540]	@ (8003b1c <HAL_UART_MspInit+0x2c0>)
 8003900:	f001 ffbc 	bl	800587c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003904:	e177      	b.n	8003bf6 <HAL_UART_MspInit+0x39a>
  else if(uartHandle->Instance==UART5)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a85      	ldr	r2, [pc, #532]	@ (8003b20 <HAL_UART_MspInit+0x2c4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d15d      	bne.n	80039cc <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003910:	2310      	movs	r3, #16
 8003912:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003914:	2300      	movs	r3, #0
 8003916:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003918:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800391c:	4618      	mov	r0, r3
 800391e:	f003 f83d 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003928:	f7fd fd1b 	bl	8001362 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800392c:	4b7a      	ldr	r3, [pc, #488]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003930:	4a79      	ldr	r2, [pc, #484]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003936:	6593      	str	r3, [r2, #88]	@ 0x58
 8003938:	4b77      	ldr	r3, [pc, #476]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 800393a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003940:	637b      	str	r3, [r7, #52]	@ 0x34
 8003942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003944:	4b74      	ldr	r3, [pc, #464]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003948:	4a73      	ldr	r2, [pc, #460]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 800394a:	f043 0304 	orr.w	r3, r3, #4
 800394e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003950:	4b71      	ldr	r3, [pc, #452]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	633b      	str	r3, [r7, #48]	@ 0x30
 800395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800395c:	4b6e      	ldr	r3, [pc, #440]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 800395e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003960:	4a6d      	ldr	r2, [pc, #436]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003962:	f043 0308 	orr.w	r3, r3, #8
 8003966:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003968:	4b6b      	ldr	r3, [pc, #428]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 800396a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003974:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003978:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003982:	2300      	movs	r3, #0
 8003984:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800398e:	2305      	movs	r3, #5
 8003990:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003994:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003998:	4619      	mov	r1, r3
 800399a:	4860      	ldr	r0, [pc, #384]	@ (8003b1c <HAL_UART_MspInit+0x2c0>)
 800399c:	f001 ff6e 	bl	800587c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039a0:	2304      	movs	r3, #4
 80039a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a6:	2302      	movs	r3, #2
 80039a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80039b8:	2305      	movs	r3, #5
 80039ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039be:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80039c2:	4619      	mov	r1, r3
 80039c4:	4857      	ldr	r0, [pc, #348]	@ (8003b24 <HAL_UART_MspInit+0x2c8>)
 80039c6:	f001 ff59 	bl	800587c <HAL_GPIO_Init>
}
 80039ca:	e114      	b.n	8003bf6 <HAL_UART_MspInit+0x39a>
  else if(uartHandle->Instance==USART1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a55      	ldr	r2, [pc, #340]	@ (8003b28 <HAL_UART_MspInit+0x2cc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d13b      	bne.n	8003a4e <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80039d6:	2301      	movs	r3, #1
 80039d8:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80039da:	2300      	movs	r3, #0
 80039dc:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80039e2:	4618      	mov	r0, r3
 80039e4:	f002 ffda 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_UART_MspInit+0x196>
      Error_Handler();
 80039ee:	f7fd fcb8 	bl	8001362 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80039f2:	4b49      	ldr	r3, [pc, #292]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 80039f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f6:	4a48      	ldr	r2, [pc, #288]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 80039f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80039fe:	4b46      	ldr	r3, [pc, #280]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a0a:	4b43      	ldr	r3, [pc, #268]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0e:	4a42      	ldr	r2, [pc, #264]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003a10:	f043 0304 	orr.w	r3, r3, #4
 8003a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a16:	4b40      	ldr	r3, [pc, #256]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a22:	2330      	movs	r3, #48	@ 0x30
 8003a24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a3a:	2307      	movs	r3, #7
 8003a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a40:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003a44:	4619      	mov	r1, r3
 8003a46:	4835      	ldr	r0, [pc, #212]	@ (8003b1c <HAL_UART_MspInit+0x2c0>)
 8003a48:	f001 ff18 	bl	800587c <HAL_GPIO_Init>
}
 8003a4c:	e0d3      	b.n	8003bf6 <HAL_UART_MspInit+0x39a>
  else if(uartHandle->Instance==USART2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a36      	ldr	r2, [pc, #216]	@ (8003b2c <HAL_UART_MspInit+0x2d0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d16b      	bne.n	8003b30 <HAL_UART_MspInit+0x2d4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003a64:	4618      	mov	r0, r3
 8003a66:	f002 ff99 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8003a70:	f7fd fc77 	bl	8001362 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a74:	4b28      	ldr	r3, [pc, #160]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a78:	4a27      	ldr	r2, [pc, #156]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a80:	4b25      	ldr	r3, [pc, #148]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a88:	623b      	str	r3, [r7, #32]
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8c:	4b22      	ldr	r3, [pc, #136]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a90:	4a21      	ldr	r2, [pc, #132]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a98:	4b1f      	ldr	r3, [pc, #124]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003aaa:	f043 0308 	orr.w	r3, r3, #8
 8003aae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ab0:	4b19      	ldr	r3, [pc, #100]	@ (8003b18 <HAL_UART_MspInit+0x2bc>)
 8003ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003abc:	2307      	movs	r3, #7
 8003abe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ad4:	2307      	movs	r3, #7
 8003ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ada:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ae4:	f001 feca 	bl	800587c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ae8:	2340      	movs	r3, #64	@ 0x40
 8003aea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aee:	2302      	movs	r3, #2
 8003af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b00:	2307      	movs	r3, #7
 8003b02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b06:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4805      	ldr	r0, [pc, #20]	@ (8003b24 <HAL_UART_MspInit+0x2c8>)
 8003b0e:	f001 feb5 	bl	800587c <HAL_GPIO_Init>
}
 8003b12:	e070      	b.n	8003bf6 <HAL_UART_MspInit+0x39a>
 8003b14:	40004c00 	.word	0x40004c00
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	48000800 	.word	0x48000800
 8003b20:	40005000 	.word	0x40005000
 8003b24:	48000c00 	.word	0x48000c00
 8003b28:	40013800 	.word	0x40013800
 8003b2c:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a32      	ldr	r2, [pc, #200]	@ (8003c00 <HAL_UART_MspInit+0x3a4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d15d      	bne.n	8003bf6 <HAL_UART_MspInit+0x39a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b42:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003b46:	4618      	mov	r0, r3
 8003b48:	f002 ff28 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_UART_MspInit+0x2fa>
      Error_Handler();
 8003b52:	f7fd fc06 	bl	8001362 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b56:	4b2b      	ldr	r3, [pc, #172]	@ (8003c04 <HAL_UART_MspInit+0x3a8>)
 8003b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003c04 <HAL_UART_MspInit+0x3a8>)
 8003b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b62:	4b28      	ldr	r3, [pc, #160]	@ (8003c04 <HAL_UART_MspInit+0x3a8>)
 8003b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b6e:	4b25      	ldr	r3, [pc, #148]	@ (8003c04 <HAL_UART_MspInit+0x3a8>)
 8003b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b72:	4a24      	ldr	r2, [pc, #144]	@ (8003c04 <HAL_UART_MspInit+0x3a8>)
 8003b74:	f043 0310 	orr.w	r3, r3, #16
 8003b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b7a:	4b22      	ldr	r3, [pc, #136]	@ (8003c04 <HAL_UART_MspInit+0x3a8>)
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b86:	4b1f      	ldr	r3, [pc, #124]	@ (8003c04 <HAL_UART_MspInit+0x3a8>)
 8003b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003c04 <HAL_UART_MspInit+0x3a8>)
 8003b8c:	f043 0302 	orr.w	r3, r3, #2
 8003b90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b92:	4b1c      	ldr	r3, [pc, #112]	@ (8003c04 <HAL_UART_MspInit+0x3a8>)
 8003b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ba2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003bb8:	2307      	movs	r3, #7
 8003bba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bbe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4810      	ldr	r0, [pc, #64]	@ (8003c08 <HAL_UART_MspInit+0x3ac>)
 8003bc6:	f001 fe59 	bl	800587c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14;
 8003bca:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003bce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bde:	2300      	movs	r3, #0
 8003be0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003be4:	2307      	movs	r3, #7
 8003be6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bea:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4806      	ldr	r0, [pc, #24]	@ (8003c0c <HAL_UART_MspInit+0x3b0>)
 8003bf2:	f001 fe43 	bl	800587c <HAL_GPIO_Init>
}
 8003bf6:	bf00      	nop
 8003bf8:	37a8      	adds	r7, #168	@ 0xa8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40004800 	.word	0x40004800
 8003c04:	40021000 	.word	0x40021000
 8003c08:	48001000 	.word	0x48001000
 8003c0c:	48000400 	.word	0x48000400

08003c10 <zentrale_init>:


//-----------------FUNKTIONSDEFINITIONEN---------------------------------------

// Zentrale initialisieren.
void zentrale_init(void) {
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
	z_status = POWERON;
 8003c14:	4b09      	ldr	r3, [pc, #36]	@ (8003c3c <zentrale_init+0x2c>)
 8003c16:	2202      	movs	r2, #2
 8003c18:	701a      	strb	r2, [r3, #0]
	z_status_h = NOP;
 8003c1a:	4b09      	ldr	r3, [pc, #36]	@ (8003c40 <zentrale_init+0x30>)
 8003c1c:	22ff      	movs	r2, #255	@ 0xff
 8003c1e:	701a      	strb	r2, [r3, #0]
	z_status_tend = NOP;
 8003c20:	4b08      	ldr	r3, [pc, #32]	@ (8003c44 <zentrale_init+0x34>)
 8003c22:	22ff      	movs	r2, #255	@ 0xff
 8003c24:	701a      	strb	r2, [r3, #0]
	z_error_akt = 0;
 8003c26:	4b08      	ldr	r3, [pc, #32]	@ (8003c48 <zentrale_init+0x38>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	801a      	strh	r2, [r3, #0]
	z_error_kum = 0;
 8003c2c:	4b07      	ldr	r3, [pc, #28]	@ (8003c4c <zentrale_init+0x3c>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	801a      	strh	r2, [r3, #0]

}
 8003c32:	bf00      	nop
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	200013d8 	.word	0x200013d8
 8003c40:	200013d9 	.word	0x200013d9
 8003c44:	200013da 	.word	0x200013da
 8003c48:	200013dc 	.word	0x200013dc
 8003c4c:	200013de 	.word	0x200013de

08003c50 <z_update_power_errors>:

static void z_update_power_errors(void) {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
	// If you only have update_uok():
	if (!update_uok()) {
 8003c56:	f7fc fcf7 	bl	8000648 <update_uok>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d117      	bne.n	8003c90 <z_update_power_errors+0x40>
		// If you want individual bits, read pins directly (or add helpers):
		uint8_t ok5 = u_ok(UC__5VOK_GPIO_Port, UC__5VOK_Pin);
 8003c60:	2110      	movs	r1, #16
 8003c62:	480d      	ldr	r0, [pc, #52]	@ (8003c98 <z_update_power_errors+0x48>)
 8003c64:	f7fc fcd8 	bl	8000618 <u_ok>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	71fb      	strb	r3, [r7, #7]
		uint8_t ok12 = u_ok(UC__12VOK_GPIO_Port, UC__12VOK_Pin);
 8003c6c:	2120      	movs	r1, #32
 8003c6e:	480a      	ldr	r0, [pc, #40]	@ (8003c98 <z_update_power_errors+0x48>)
 8003c70:	f7fc fcd2 	bl	8000618 <u_ok>
 8003c74:	4603      	mov	r3, r0
 8003c76:	71bb      	strb	r3, [r7, #6]
		if (!ok5)
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <z_update_power_errors+0x34>
			z_set_error(SG_ERR_U5V);
 8003c7e:	2002      	movs	r0, #2
 8003c80:	f000 f90c 	bl	8003e9c <z_set_error>
		if (!ok12)
 8003c84:	79bb      	ldrb	r3, [r7, #6]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d102      	bne.n	8003c90 <z_update_power_errors+0x40>
			z_set_error(SG_ERR_U12V);
 8003c8a:	2003      	movs	r0, #3
 8003c8c:	f000 f906 	bl	8003e9c <z_set_error>
	}
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	48000c00 	.word	0x48000c00

08003c9c <zentrale>:

// Zentrale denken und entscheiden.
void zentrale(void) {	// ----- DENKEN -----
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0

	z_update_power_errors();
 8003ca0:	f7ff ffd6 	bl	8003c50 <z_update_power_errors>

	if (readPumpAlarm()) {
 8003ca4:	f7fc fd04 	bl	80006b0 <readPumpAlarm>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <zentrale+0x18>
		z_set_error(SG_ERR_PUMP_ALARM);
 8003cae:	2004      	movs	r0, #4
 8003cb0:	f000 f8f4 	bl	8003e9c <z_set_error>
	}
	if (readPumpWarning()) {
 8003cb4:	f7fc fce6 	bl	8000684 <readPumpWarning>
		//z_set_error(SG_ERR_PUMP_WARNING);
	}

	// Fehlerüberprüfung
	if (z_error_akt != 0)
 8003cb8:	4b66      	ldr	r3, [pc, #408]	@ (8003e54 <zentrale+0x1b8>)
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <zentrale+0x2a>
		z_set_status_tend(ZERROR);
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f000 f8d5 	bl	8003e70 <z_set_status_tend>

	switch (z_status)// Je nach aktuellem Systemzustand auf Anfragen zur Zustands�nderung
 8003cc6:	4b64      	ldr	r3, [pc, #400]	@ (8003e58 <zentrale+0x1bc>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	2b0a      	cmp	r3, #10
 8003cce:	f200 80ac 	bhi.w	8003e2a <zentrale+0x18e>
 8003cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd8 <zentrale+0x3c>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003d05 	.word	0x08003d05
 8003cdc:	08003d5d 	.word	0x08003d5d
 8003ce0:	08003e2b 	.word	0x08003e2b
 8003ce4:	08003e2b 	.word	0x08003e2b
 8003ce8:	08003e2b 	.word	0x08003e2b
 8003cec:	08003e2b 	.word	0x08003e2b
 8003cf0:	08003e2b 	.word	0x08003e2b
 8003cf4:	08003e2b 	.word	0x08003e2b
 8003cf8:	08003d95 	.word	0x08003d95
 8003cfc:	08003e2b 	.word	0x08003e2b
 8003d00:	08003de3 	.word	0x08003de3
	{// reagieren
	case ZERROR:
		if (z_status_h != ZERROR) {				// add what to do when error
 8003d04:	4b55      	ldr	r3, [pc, #340]	@ (8003e5c <zentrale+0x1c0>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d005      	beq.n	8003d18 <zentrale+0x7c>
			z_status_h = ZERROR;
 8003d0c:	4b53      	ldr	r3, [pc, #332]	@ (8003e5c <zentrale+0x1c0>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	701a      	strb	r2, [r3, #0]
			z_rf_state = 0;
 8003d12:	4b53      	ldr	r3, [pc, #332]	@ (8003e60 <zentrale+0x1c4>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
		}

		if ((z_error_akt) > 0) // Wenn aktuell noch ein Fehler mit Ausnahme des ERREXT vorliegt
 8003d18:	4b4e      	ldr	r3, [pc, #312]	@ (8003e54 <zentrale+0x1b8>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <zentrale+0x9a>
				{
			z_error_kum |= z_error_akt; // Wir aktualisieren hier schon mal den Kummulierten Fehler
 8003d20:	4b50      	ldr	r3, [pc, #320]	@ (8003e64 <zentrale+0x1c8>)
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	4b4b      	ldr	r3, [pc, #300]	@ (8003e54 <zentrale+0x1b8>)
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8003e64 <zentrale+0x1c8>)
 8003d2e:	801a      	strh	r2, [r3, #0]
			z_set_status_tend(ZERROR); // kann als Folgezustand nur der Zustand ERROR eingenommen werden!
 8003d30:	2001      	movs	r0, #1
 8003d32:	f000 f89d 	bl	8003e70 <z_set_status_tend>
		} else {       // Falls kein Fehler im Modul vorliegt schließen wir hier
		}

		switch (z_status_tend) // Wünsche bezüglich einer Zustandsänderung bearbeiten
 8003d36:	4b4c      	ldr	r3, [pc, #304]	@ (8003e68 <zentrale+0x1cc>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d002      	beq.n	8003d44 <zentrale+0xa8>
 8003d3e:	2b09      	cmp	r3, #9
 8003d40:	d004      	beq.n	8003d4c <zentrale+0xb0>
			break;
		case INACTIVE:
			z_status = INACTIVE;                // Zustand INACTIVE vorbereiten
			break;
		default:
			break;
 8003d42:	e007      	b.n	8003d54 <zentrale+0xb8>
			z_status = POWERON;
 8003d44:	4b44      	ldr	r3, [pc, #272]	@ (8003e58 <zentrale+0x1bc>)
 8003d46:	2202      	movs	r2, #2
 8003d48:	701a      	strb	r2, [r3, #0]
			break;
 8003d4a:	e003      	b.n	8003d54 <zentrale+0xb8>
			z_status = INACTIVE;                // Zustand INACTIVE vorbereiten
 8003d4c:	4b42      	ldr	r3, [pc, #264]	@ (8003e58 <zentrale+0x1bc>)
 8003d4e:	2209      	movs	r2, #9
 8003d50:	701a      	strb	r2, [r3, #0]
			break;
 8003d52:	bf00      	nop
		}
		z_status_tend = NOP;                         // Status_tend zurücksetzen
 8003d54:	4b44      	ldr	r3, [pc, #272]	@ (8003e68 <zentrale+0x1cc>)
 8003d56:	22ff      	movs	r2, #255	@ 0xff
 8003d58:	701a      	strb	r2, [r3, #0]
		break;
 8003d5a:	e06d      	b.n	8003e38 <zentrale+0x19c>
//			if(((z_error_kum && ((1<<SG_ERREN) + (1<<SG_ERRDTC))) != 0) && (adc7927_chk_en() != 1))
//				z_set_status_tend(Z_ERROR);


	case POWERON:// Startzustand nach Einschalten des Ger�tes. Keine Fehlerbehandlung!
		if (z_status_h != POWERON) {
 8003d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e5c <zentrale+0x1c0>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d008      	beq.n	8003d76 <zentrale+0xda>
			z_init_done = 0;
 8003d64:	4b41      	ldr	r3, [pc, #260]	@ (8003e6c <zentrale+0x1d0>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
			z_rf_state = 0;
 8003d6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e60 <zentrale+0x1c4>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
			z_status_h = POWERON;
 8003d70:	4b3a      	ldr	r3, [pc, #232]	@ (8003e5c <zentrale+0x1c0>)
 8003d72:	2202      	movs	r2, #2
 8003d74:	701a      	strb	r2, [r3, #0]
		}

		if (ct_init_null()) {
 8003d76:	f7ff f9ef 	bl	8003158 <ct_init_null>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <zentrale+0xf0>
			z_init_done = 1;
 8003d80:	4b3a      	ldr	r3, [pc, #232]	@ (8003e6c <zentrale+0x1d0>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]
			z_status = INACTIVE;
 8003d86:	4b34      	ldr	r3, [pc, #208]	@ (8003e58 <zentrale+0x1bc>)
 8003d88:	2209      	movs	r2, #9
 8003d8a:	701a      	strb	r2, [r3, #0]
		}

		z_status_tend = NOP;					// z_status_tend zur�cksetzen
 8003d8c:	4b36      	ldr	r3, [pc, #216]	@ (8003e68 <zentrale+0x1cc>)
 8003d8e:	22ff      	movs	r2, #255	@ 0xff
 8003d90:	701a      	strb	r2, [r3, #0]
		break;
 8003d92:	e051      	b.n	8003e38 <zentrale+0x19c>

	case INACTIVE:						//----- System im INACTIVE-Zustand

		if (z_status_h != INACTIVE) {
 8003d94:	4b31      	ldr	r3, [pc, #196]	@ (8003e5c <zentrale+0x1c0>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b09      	cmp	r3, #9
 8003d9a:	d008      	beq.n	8003dae <zentrale+0x112>
			z_error_kum = 0;
 8003d9c:	4b31      	ldr	r3, [pc, #196]	@ (8003e64 <zentrale+0x1c8>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	801a      	strh	r2, [r3, #0]
			z_rf_state = 0;
 8003da2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e60 <zentrale+0x1c4>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
			z_status_h = INACTIVE;
 8003da8:	4b2c      	ldr	r3, [pc, #176]	@ (8003e5c <zentrale+0x1c0>)
 8003daa:	2209      	movs	r2, #9
 8003dac:	701a      	strb	r2, [r3, #0]
		}

		if (z_error_akt != 0)
 8003dae:	4b29      	ldr	r3, [pc, #164]	@ (8003e54 <zentrale+0x1b8>)
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <zentrale+0x120>
			z_set_status_tend(ZERROR);
 8003db6:	2001      	movs	r0, #1
 8003db8:	f000 f85a 	bl	8003e70 <z_set_status_tend>

		switch (z_status_tend) {
 8003dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8003e68 <zentrale+0x1cc>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d002      	beq.n	8003dca <zentrale+0x12e>
 8003dc4:	2b0b      	cmp	r3, #11
 8003dc6:	d004      	beq.n	8003dd2 <zentrale+0x136>
			z_status = ZERROR;
			break;
		case ACTIVE:
			z_status = ACTIVE;
		default:
			break;
 8003dc8:	e006      	b.n	8003dd8 <zentrale+0x13c>
			z_status = ZERROR;
 8003dca:	4b23      	ldr	r3, [pc, #140]	@ (8003e58 <zentrale+0x1bc>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	701a      	strb	r2, [r3, #0]
			break;
 8003dd0:	e003      	b.n	8003dda <zentrale+0x13e>
			z_status = ACTIVE;
 8003dd2:	4b21      	ldr	r3, [pc, #132]	@ (8003e58 <zentrale+0x1bc>)
 8003dd4:	220b      	movs	r2, #11
 8003dd6:	701a      	strb	r2, [r3, #0]
			break;
 8003dd8:	bf00      	nop
		}
		z_status_tend = NOP;
 8003dda:	4b23      	ldr	r3, [pc, #140]	@ (8003e68 <zentrale+0x1cc>)
 8003ddc:	22ff      	movs	r2, #255	@ 0xff
 8003dde:	701a      	strb	r2, [r3, #0]
		break;
 8003de0:	e02a      	b.n	8003e38 <zentrale+0x19c>

	case ACTIVE:
		if (z_status_h != ACTIVE) {
 8003de2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e5c <zentrale+0x1c0>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b0b      	cmp	r3, #11
 8003de8:	d005      	beq.n	8003df6 <zentrale+0x15a>
			z_rf_state = 1;
 8003dea:	4b1d      	ldr	r3, [pc, #116]	@ (8003e60 <zentrale+0x1c4>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
			z_status_h = ACTIVE;
 8003df0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e5c <zentrale+0x1c0>)
 8003df2:	220b      	movs	r2, #11
 8003df4:	701a      	strb	r2, [r3, #0]
		}

		if (z_error_akt != 0)
 8003df6:	4b17      	ldr	r3, [pc, #92]	@ (8003e54 <zentrale+0x1b8>)
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <zentrale+0x168>
			z_set_status_tend(ZERROR);
 8003dfe:	2001      	movs	r0, #1
 8003e00:	f000 f836 	bl	8003e70 <z_set_status_tend>

		switch (z_status_tend) {
 8003e04:	4b18      	ldr	r3, [pc, #96]	@ (8003e68 <zentrale+0x1cc>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d002      	beq.n	8003e12 <zentrale+0x176>
 8003e0c:	2b09      	cmp	r3, #9
 8003e0e:	d004      	beq.n	8003e1a <zentrale+0x17e>
			z_status = ZERROR;
			break;
		case INACTIVE:
			z_status = INACTIVE;
		default:
			break;
 8003e10:	e006      	b.n	8003e20 <zentrale+0x184>
			z_status = ZERROR;
 8003e12:	4b11      	ldr	r3, [pc, #68]	@ (8003e58 <zentrale+0x1bc>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]
			break;
 8003e18:	e003      	b.n	8003e22 <zentrale+0x186>
			z_status = INACTIVE;
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e58 <zentrale+0x1bc>)
 8003e1c:	2209      	movs	r2, #9
 8003e1e:	701a      	strb	r2, [r3, #0]
			break;
 8003e20:	bf00      	nop
		}
		z_status_tend = NOP;
 8003e22:	4b11      	ldr	r3, [pc, #68]	@ (8003e68 <zentrale+0x1cc>)
 8003e24:	22ff      	movs	r2, #255	@ 0xff
 8003e26:	701a      	strb	r2, [r3, #0]
		break;
 8003e28:	e006      	b.n	8003e38 <zentrale+0x19c>

	default:
		z_status_tend = NOP;
 8003e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e68 <zentrale+0x1cc>)
 8003e2c:	22ff      	movs	r2, #255	@ 0xff
 8003e2e:	701a      	strb	r2, [r3, #0]
		z_status_h = NOP;
 8003e30:	4b0a      	ldr	r3, [pc, #40]	@ (8003e5c <zentrale+0x1c0>)
 8003e32:	22ff      	movs	r2, #255	@ 0xff
 8003e34:	701a      	strb	r2, [r3, #0]
		break;
 8003e36:	bf00      	nop
	}
	z_error_kum |= z_error_akt;	// Eventuell aufgetretenen neuen Fehler zur kummulierten
 8003e38:	4b0a      	ldr	r3, [pc, #40]	@ (8003e64 <zentrale+0x1c8>)
 8003e3a:	881a      	ldrh	r2, [r3, #0]
 8003e3c:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <zentrale+0x1b8>)
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	4b07      	ldr	r3, [pc, #28]	@ (8003e64 <zentrale+0x1c8>)
 8003e46:	801a      	strh	r2, [r3, #0]
	z_error_akt = 0;// Fehleranzeige für aktuell vorliegende Fehler zurücksetzen
 8003e48:	4b02      	ldr	r3, [pc, #8]	@ (8003e54 <zentrale+0x1b8>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	801a      	strh	r2, [r3, #0]

}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	200013dc 	.word	0x200013dc
 8003e58:	200013d8 	.word	0x200013d8
 8003e5c:	200013d9 	.word	0x200013d9
 8003e60:	200013e1 	.word	0x200013e1
 8003e64:	200013de 	.word	0x200013de
 8003e68:	200013da 	.word	0x200013da
 8003e6c:	200013e0 	.word	0x200013e0

08003e70 <z_set_status_tend>:


// Statuswunsch setzen
// Priorität:   error, inactive, start, active
void z_set_status_tend(uint8_t statnew) {
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
	if (z_status_tend > statnew)
 8003e7a:	4b07      	ldr	r3, [pc, #28]	@ (8003e98 <z_set_status_tend+0x28>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	79fa      	ldrb	r2, [r7, #7]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d203      	bcs.n	8003e8c <z_set_status_tend+0x1c>
		z_status_tend = statnew;    // nur Status höherer Priorität übernehmen
 8003e84:	4a04      	ldr	r2, [pc, #16]	@ (8003e98 <z_set_status_tend+0x28>)
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	7013      	strb	r3, [r2, #0]

	return;
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
}
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	200013da 	.word	0x200013da

08003e9c <z_set_error>:
uint16_t z_get_error(void) {
	return z_error_kum;
}

// Fehler an Zentrale melden
void z_set_error(uint8_t errnr) {
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
	if (errnr <= 15)
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	2b0f      	cmp	r3, #15
 8003eaa:	d80c      	bhi.n	8003ec6 <z_set_error+0x2a>
		z_error_akt |= (1 << errnr);
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	b21a      	sxth	r2, r3
 8003eb6:	4b07      	ldr	r3, [pc, #28]	@ (8003ed4 <z_set_error+0x38>)
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b21b      	sxth	r3, r3
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	b21b      	sxth	r3, r3
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	4b04      	ldr	r3, [pc, #16]	@ (8003ed4 <z_set_error+0x38>)
 8003ec4:	801a      	strh	r2, [r3, #0]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	200013dc 	.word	0x200013dc

08003ed8 <z_mfc_set>:
	}
	return CMR_SUCCESSFULL;
}


uint8_t z_mfc_set(uint8_t idx, uint16_t val) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	460a      	mov	r2, r1
 8003ee2:	71fb      	strb	r3, [r7, #7]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	80bb      	strh	r3, [r7, #4]
    GbReply r;
    return gasbox_xfer(kMfc[idx].cmd_set, val, &r, GB_TIMEOUT_MS) && (r.status == GB_STATUS_OK);
 8003ee8:	79fa      	ldrb	r2, [r7, #7]
 8003eea:	490d      	ldr	r1, [pc, #52]	@ (8003f20 <z_mfc_set+0x48>)
 8003eec:	4613      	mov	r3, r2
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	4413      	add	r3, r2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	7818      	ldrb	r0, [r3, #0]
 8003ef6:	f107 020c 	add.w	r2, r7, #12
 8003efa:	88b9      	ldrh	r1, [r7, #4]
 8003efc:	2302      	movs	r3, #2
 8003efe:	f7fd f87f 	bl	8001000 <gasbox_xfer>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d004      	beq.n	8003f12 <z_mfc_set+0x3a>
 8003f08:	7b7b      	ldrb	r3, [r7, #13]
 8003f0a:	2b80      	cmp	r3, #128	@ 0x80
 8003f0c:	d101      	bne.n	8003f12 <z_mfc_set+0x3a>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <z_mfc_set+0x3c>
 8003f12:	2300      	movs	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	0800aa84 	.word	0x0800aa84

08003f24 <z_mfc_get>:
uint8_t z_mfc_get(uint8_t idx, uint16_t *out) {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	6039      	str	r1, [r7, #0]
 8003f2e:	71fb      	strb	r3, [r7, #7]
    GbReply r;
    if (!gasbox_xfer(kMfc[idx].cmd_get, 0, &r, GB_TIMEOUT_MS) || r.status != GB_STATUS_OK) return 0;
 8003f30:	79fa      	ldrb	r2, [r7, #7]
 8003f32:	490e      	ldr	r1, [pc, #56]	@ (8003f6c <z_mfc_get+0x48>)
 8003f34:	4613      	mov	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	7818      	ldrb	r0, [r3, #0]
 8003f40:	f107 020c 	add.w	r2, r7, #12
 8003f44:	2302      	movs	r3, #2
 8003f46:	2100      	movs	r1, #0
 8003f48:	f7fd f85a 	bl	8001000 <gasbox_xfer>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <z_mfc_get+0x34>
 8003f52:	7b7b      	ldrb	r3, [r7, #13]
 8003f54:	2b80      	cmp	r3, #128	@ 0x80
 8003f56:	d001      	beq.n	8003f5c <z_mfc_get+0x38>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e003      	b.n	8003f64 <z_mfc_get+0x40>
    *out = r.value; return 1;
 8003f5c:	89fa      	ldrh	r2, [r7, #14]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	801a      	strh	r2, [r3, #0]
 8003f62:	2301      	movs	r3, #1
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	0800aa84 	.word	0x0800aa84

08003f70 <z_mfc_close>:
uint8_t z_mfc_close(uint8_t idx) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	71fb      	strb	r3, [r7, #7]
    GbReply r;
    return gasbox_xfer(kMfc[idx].cmd_close, 0, &r, GB_TIMEOUT_MS) && (r.status == GB_STATUS_OK);
 8003f7a:	79fa      	ldrb	r2, [r7, #7]
 8003f7c:	490d      	ldr	r1, [pc, #52]	@ (8003fb4 <z_mfc_close+0x44>)
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	440b      	add	r3, r1
 8003f86:	3302      	adds	r3, #2
 8003f88:	7818      	ldrb	r0, [r3, #0]
 8003f8a:	f107 020c 	add.w	r2, r7, #12
 8003f8e:	2302      	movs	r3, #2
 8003f90:	2100      	movs	r1, #0
 8003f92:	f7fd f835 	bl	8001000 <gasbox_xfer>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <z_mfc_close+0x36>
 8003f9c:	7b7b      	ldrb	r3, [r7, #13]
 8003f9e:	2b80      	cmp	r3, #128	@ 0x80
 8003fa0:	d101      	bne.n	8003fa6 <z_mfc_close+0x36>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <z_mfc_close+0x38>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	0800aa84 	.word	0x0800aa84

08003fb8 <gb_do>:

static inline uint8_t gb_do(uint8_t cmd, uint16_t param) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	460a      	mov	r2, r1
 8003fc2:	71fb      	strb	r3, [r7, #7]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	80bb      	strh	r3, [r7, #4]
    GbReply r;
    return gasbox_xfer(cmd, param, &r, GB_TIMEOUT_MS) && (r.status == GB_STATUS_OK);
 8003fc8:	f107 020c 	add.w	r2, r7, #12
 8003fcc:	88b9      	ldrh	r1, [r7, #4]
 8003fce:	79f8      	ldrb	r0, [r7, #7]
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	f7fd f815 	bl	8001000 <gasbox_xfer>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d004      	beq.n	8003fe6 <gb_do+0x2e>
 8003fdc:	7b7b      	ldrb	r3, [r7, #13]
 8003fde:	2b80      	cmp	r3, #128	@ 0x80
 8003fe0:	d101      	bne.n	8003fe6 <gb_do+0x2e>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <gb_do+0x30>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <gb_get16>:

static inline uint8_t gb_get16(uint8_t cmd, uint16_t *out) {
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	6039      	str	r1, [r7, #0]
 8003ffc:	71fb      	strb	r3, [r7, #7]
    GbReply r;
    if (!gasbox_xfer(cmd, 0, &r, GB_TIMEOUT_MS) || r.status != GB_STATUS_OK) return 0;
 8003ffe:	f107 020c 	add.w	r2, r7, #12
 8004002:	79f8      	ldrb	r0, [r7, #7]
 8004004:	2302      	movs	r3, #2
 8004006:	2100      	movs	r1, #0
 8004008:	f7fc fffa 	bl	8001000 <gasbox_xfer>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <gb_get16+0x26>
 8004012:	7b7b      	ldrb	r3, [r7, #13]
 8004014:	2b80      	cmp	r3, #128	@ 0x80
 8004016:	d001      	beq.n	800401c <gb_get16+0x2a>
 8004018:	2300      	movs	r3, #0
 800401a:	e003      	b.n	8004024 <gb_get16+0x32>
    *out = r.value; return 1;
 800401c:	89fa      	ldrh	r2, [r7, #14]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	801a      	strh	r2, [r3, #0]
 8004022:	2301      	movs	r3, #1
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <z_valve_open>:

uint8_t z_valve_open(uint8_t idx)  {
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	71fb      	strb	r3, [r7, #7]
	return gb_do(idx==3 ? GB_CMD_VALVE3_OPEN  : GB_CMD_VALVE4_OPEN, 0);
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	2b03      	cmp	r3, #3
 800403a:	d101      	bne.n	8004040 <z_valve_open+0x14>
 800403c:	230c      	movs	r3, #12
 800403e:	e000      	b.n	8004042 <z_valve_open+0x16>
 8004040:	230d      	movs	r3, #13
 8004042:	2100      	movs	r1, #0
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ffb7 	bl	8003fb8 <gb_do>
 800404a:	4603      	mov	r3, r0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <z_valve_close>:
uint8_t z_valve_close(uint8_t idx) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	71fb      	strb	r3, [r7, #7]
	return gb_do(idx==3 ? GB_CMD_VALVE3_CLOSE : GB_CMD_VALVE4_CLOSE, 0);
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d101      	bne.n	8004068 <z_valve_close+0x14>
 8004064:	230a      	movs	r3, #10
 8004066:	e000      	b.n	800406a <z_valve_close+0x16>
 8004068:	230b      	movs	r3, #11
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff ffa3 	bl	8003fb8 <gb_do>
 8004072:	4603      	mov	r3, r0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <z_valve_get>:
uint8_t z_valve_get(uint8_t idx, uint16_t *state) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	6039      	str	r1, [r7, #0]
 8004086:	71fb      	strb	r3, [r7, #7]
    return gb_get16(idx==3 ? GB_CMD_VALVE3_GET : GB_CMD_VALVE4_GET, state);
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	2b03      	cmp	r3, #3
 800408c:	d101      	bne.n	8004092 <z_valve_get+0x16>
 800408e:	230e      	movs	r3, #14
 8004090:	e000      	b.n	8004094 <z_valve_get+0x18>
 8004092:	230f      	movs	r3, #15
 8004094:	6839      	ldr	r1, [r7, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff ffab 	bl	8003ff2 <gb_get16>
 800409c:	4603      	mov	r3, r0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <z_gb_err_clr>:
uint8_t z_gb_err_clr(){
 80040a6:	b580      	push	{r7, lr}
 80040a8:	af00      	add	r7, sp, #0
	return gb_do(GB_CMD_CLR_ERR, 0) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80040aa:	2100      	movs	r1, #0
 80040ac:	2011      	movs	r0, #17
 80040ae:	f7ff ff83 	bl	8003fb8 <gb_do>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <z_gb_err_clr+0x16>
 80040b8:	2380      	movs	r3, #128	@ 0x80
 80040ba:	e000      	b.n	80040be <z_gb_err_clr+0x18>
 80040bc:	2307      	movs	r3, #7
}
 80040be:	4618      	mov	r0, r3
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <z_gb_err_get>:
uint8_t z_gb_err_get(uint16_t *out_err) {
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
    return gb_get16(GB_CMD_GET_ERR, out_err) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	2010      	movs	r0, #16
 80040ce:	f7ff ff90 	bl	8003ff2 <gb_get16>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <z_gb_err_get+0x1a>
 80040d8:	2380      	movs	r3, #128	@ 0x80
 80040da:	e000      	b.n	80040de <z_gb_err_get+0x1c>
 80040dc:	2307      	movs	r3, #7
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <z_cmd_scheduler>:

//--- FUNKTIONSDEKLARATIONS -------------------------------------------------------------------------------------------------
//die Mechanimus zur Verarbeitung der Befehle mit den unterschiedlichen Prioritäten
//--- FUNKTIONSDEFINITIONS --------------------------------------------------------------------------------------------------
void z_cmd_scheduler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
	uint8_t priolevel0_null_flg = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]
	uint8_t priolevel1_null_flg = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75bb      	strb	r3, [r7, #22]
	uint8_t priolevel2_null_flg = 0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	757b      	strb	r3, [r7, #21]

	uint8_t cmdcount = 0;                       //Zähler für die zu verarbeitenden Befehle
 80040fa:	2300      	movs	r3, #0
 80040fc:	753b      	strb	r3, [r7, #20]
	uint8_t cmd_flg = 0;                       //Falls cmd_flg = 1 ist, d.h. keinen Befehl zu verarbeiten; cmd_flg = 0, d.h. noch Befehl zu verarbeiten
 80040fe:	2300      	movs	r3, #0
 8004100:	74fb      	strb	r3, [r7, #19]
	stack_item cmd;

	uint8_t resultflg = get_anzFrei_resultQueue();
 8004102:	f7fe fa49 	bl	8002598 <get_anzFrei_resultQueue>
 8004106:	4603      	mov	r3, r0
 8004108:	74bb      	strb	r3, [r7, #18]

	if (resultflg > 1 )            //prüft, ob es noch freien Platz in resultqueue.
 800410a:	7cbb      	ldrb	r3, [r7, #18]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d953      	bls.n	80041b8 <z_cmd_scheduler+0xd0>
	{
		do
		{
			while ((cmdcount < Z_MAX_HIGHPRIO_NUM) && (priolevel0_null_flg == 0))
 8004110:	e012      	b.n	8004138 <z_cmd_scheduler+0x50>
			{
				if (z_priolevel_header[PRIO_LEVEL0] != NONEXT)
 8004112:	4b2b      	ldr	r3, [pc, #172]	@ (80041c0 <z_cmd_scheduler+0xd8>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2bff      	cmp	r3, #255	@ 0xff
 8004118:	d00c      	beq.n	8004134 <z_cmd_scheduler+0x4c>
				{
					zstack_pop(&cmd, PRIO_LEVEL0);
 800411a:	463b      	mov	r3, r7
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f7fe fe8a 	bl	8002e38 <zstack_pop>
					z_cmd_sero(cmd);
 8004124:	463b      	mov	r3, r7
 8004126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004128:	f000 f84c 	bl	80041c4 <z_cmd_sero>
					cmdcount++;
 800412c:	7d3b      	ldrb	r3, [r7, #20]
 800412e:	3301      	adds	r3, #1
 8004130:	753b      	strb	r3, [r7, #20]
 8004132:	e001      	b.n	8004138 <z_cmd_scheduler+0x50>

				}
				else
				{
					priolevel0_null_flg = 1;      //es gibt keinen Befehl in der Prioritätliste mit Level 0
 8004134:	2301      	movs	r3, #1
 8004136:	75fb      	strb	r3, [r7, #23]
			while ((cmdcount < Z_MAX_HIGHPRIO_NUM) && (priolevel0_null_flg == 0))
 8004138:	7d3b      	ldrb	r3, [r7, #20]
 800413a:	2b04      	cmp	r3, #4
 800413c:	d802      	bhi.n	8004144 <z_cmd_scheduler+0x5c>
 800413e:	7dfb      	ldrb	r3, [r7, #23]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0e6      	beq.n	8004112 <z_cmd_scheduler+0x2a>
				};
			};

			if (z_priolevel_header[PRIO_LEVEL1] != NONEXT)
 8004144:	4b1e      	ldr	r3, [pc, #120]	@ (80041c0 <z_cmd_scheduler+0xd8>)
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	2bff      	cmp	r3, #255	@ 0xff
 800414a:	d00f      	beq.n	800416c <z_cmd_scheduler+0x84>
			{
				if (cmdcount < Z_MAXCMD)
 800414c:	7d3b      	ldrb	r3, [r7, #20]
 800414e:	2b09      	cmp	r3, #9
 8004150:	d80e      	bhi.n	8004170 <z_cmd_scheduler+0x88>
				{
					zstack_pop(&cmd, PRIO_LEVEL1);
 8004152:	463b      	mov	r3, r7
 8004154:	2101      	movs	r1, #1
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe fe6e 	bl	8002e38 <zstack_pop>
					z_cmd_sero(cmd);
 800415c:	463b      	mov	r3, r7
 800415e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004160:	f000 f830 	bl	80041c4 <z_cmd_sero>
					cmdcount++;
 8004164:	7d3b      	ldrb	r3, [r7, #20]
 8004166:	3301      	adds	r3, #1
 8004168:	753b      	strb	r3, [r7, #20]
 800416a:	e001      	b.n	8004170 <z_cmd_scheduler+0x88>

				};
			}
			else
			{
				priolevel1_null_flg = 1;   //es gibt keinen Befehl in der Prioritätliste mit Level 1
 800416c:	2301      	movs	r3, #1
 800416e:	75bb      	strb	r3, [r7, #22]
			};

			if (z_priolevel_header[PRIO_LEVEL2] != NONEXT)
 8004170:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <z_cmd_scheduler+0xd8>)
 8004172:	789b      	ldrb	r3, [r3, #2]
 8004174:	2bff      	cmp	r3, #255	@ 0xff
 8004176:	d00f      	beq.n	8004198 <z_cmd_scheduler+0xb0>
			{
				if (cmdcount < Z_MAXCMD)
 8004178:	7d3b      	ldrb	r3, [r7, #20]
 800417a:	2b09      	cmp	r3, #9
 800417c:	d80e      	bhi.n	800419c <z_cmd_scheduler+0xb4>
				{
					zstack_pop(&cmd, PRIO_LEVEL2);
 800417e:	463b      	mov	r3, r7
 8004180:	2102      	movs	r1, #2
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe fe58 	bl	8002e38 <zstack_pop>
					z_cmd_sero(cmd);
 8004188:	463b      	mov	r3, r7
 800418a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800418c:	f000 f81a 	bl	80041c4 <z_cmd_sero>
					cmdcount++;
 8004190:	7d3b      	ldrb	r3, [r7, #20]
 8004192:	3301      	adds	r3, #1
 8004194:	753b      	strb	r3, [r7, #20]
 8004196:	e001      	b.n	800419c <z_cmd_scheduler+0xb4>
				};
			}
			else
			{
				priolevel2_null_flg = 1;   //es gibt keinen Befehl in der Prioritätliste mit Level 2
 8004198:	2301      	movs	r3, #1
 800419a:	757b      	strb	r3, [r7, #21]
			};

			//prüft, ob die drei Prioritätslisten alle leer sind.
			cmd_flg = priolevel0_null_flg & priolevel1_null_flg;
 800419c:	7dfa      	ldrb	r2, [r7, #23]
 800419e:	7dbb      	ldrb	r3, [r7, #22]
 80041a0:	4013      	ands	r3, r2
 80041a2:	74fb      	strb	r3, [r7, #19]
			cmd_flg &= priolevel2_null_flg;
 80041a4:	7cfa      	ldrb	r2, [r7, #19]
 80041a6:	7d7b      	ldrb	r3, [r7, #21]
 80041a8:	4013      	ands	r3, r2
 80041aa:	74fb      	strb	r3, [r7, #19]

		}while ( (cmdcount < Z_MAXCMD) && (cmd_flg == 0));
 80041ac:	7d3b      	ldrb	r3, [r7, #20]
 80041ae:	2b09      	cmp	r3, #9
 80041b0:	d802      	bhi.n	80041b8 <z_cmd_scheduler+0xd0>
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0bf      	beq.n	8004138 <z_cmd_scheduler+0x50>
	};

}
 80041b8:	bf00      	nop
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20000284 	.word	0x20000284

080041c4 <z_cmd_sero>:

void z_cmd_sero(stack_item cmd) {
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b08b      	sub	sp, #44	@ 0x2c
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	463c      	mov	r4, r7
 80041cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch (cmd.cmd_index) {
 80041d0:	887b      	ldrh	r3, [r7, #2]
 80041d2:	3b0a      	subs	r3, #10
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	f200 816d 	bhi.w	80044b4 <z_cmd_sero+0x2f0>
 80041da:	a201      	add	r2, pc, #4	@ (adr r2, 80041e0 <z_cmd_sero+0x1c>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	08004491 	.word	0x08004491
 80041e4:	080044ab 	.word	0x080044ab
 80041e8:	080044b5 	.word	0x080044b5
 80041ec:	080044b5 	.word	0x080044b5
 80041f0:	080044b5 	.word	0x080044b5
 80041f4:	080044b5 	.word	0x080044b5
 80041f8:	080044b5 	.word	0x080044b5
 80041fc:	080044b5 	.word	0x080044b5
 8004200:	080044b5 	.word	0x080044b5
 8004204:	080044b5 	.word	0x080044b5
 8004208:	0800439d 	.word	0x0800439d
 800420c:	080044b5 	.word	0x080044b5
 8004210:	080043b3 	.word	0x080043b3
 8004214:	080044b5 	.word	0x080044b5
 8004218:	08004265 	.word	0x08004265
 800421c:	080042fd 	.word	0x080042fd
 8004220:	0800428b 	.word	0x0800428b
 8004224:	08004325 	.word	0x08004325
 8004228:	080042b1 	.word	0x080042b1
 800422c:	0800434d 	.word	0x0800434d
 8004230:	080042d7 	.word	0x080042d7
 8004234:	08004375 	.word	0x08004375
 8004238:	0800440b 	.word	0x0800440b
 800423c:	08004421 	.word	0x08004421
 8004240:	080043f5 	.word	0x080043f5
 8004244:	080044b5 	.word	0x080044b5
 8004248:	08004459 	.word	0x08004459
 800424c:	0800446f 	.word	0x0800446f
 8004250:	08004443 	.word	0x08004443
 8004254:	080044b5 	.word	0x080044b5
 8004258:	080043c9 	.word	0x080043c9
 800425c:	080044b5 	.word	0x080044b5
 8004260:	080043df 	.word	0x080043df

	// MFC1..MFC4 SET
	case CMD_MFC1_SET: {
		uint16_t p = clamp16(cmd.parameter);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fc fca1 	bl	8000bae <clamp16>
 800426c:	4603      	mov	r3, r0
 800426e:	843b      	strh	r3, [r7, #32]
		cmd.cmd_ack = z_mfc_set(0, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8004270:	8c3b      	ldrh	r3, [r7, #32]
 8004272:	4619      	mov	r1, r3
 8004274:	2000      	movs	r0, #0
 8004276:	f7ff fe2f 	bl	8003ed8 <z_mfc_set>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <z_cmd_sero+0xc0>
 8004280:	2380      	movs	r3, #128	@ 0x80
 8004282:	e000      	b.n	8004286 <z_cmd_sero+0xc2>
 8004284:	2307      	movs	r3, #7
 8004286:	713b      	strb	r3, [r7, #4]
		break;
 8004288:	e120      	b.n	80044cc <z_cmd_sero+0x308>
	}
	case CMD_MFC2_SET: {
		uint16_t p = clamp16(cmd.parameter);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4618      	mov	r0, r3
 800428e:	f7fc fc8e 	bl	8000bae <clamp16>
 8004292:	4603      	mov	r3, r0
 8004294:	847b      	strh	r3, [r7, #34]	@ 0x22
		cmd.cmd_ack = z_mfc_set(1, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8004296:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004298:	4619      	mov	r1, r3
 800429a:	2001      	movs	r0, #1
 800429c:	f7ff fe1c 	bl	8003ed8 <z_mfc_set>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <z_cmd_sero+0xe6>
 80042a6:	2380      	movs	r3, #128	@ 0x80
 80042a8:	e000      	b.n	80042ac <z_cmd_sero+0xe8>
 80042aa:	2307      	movs	r3, #7
 80042ac:	713b      	strb	r3, [r7, #4]
		break;
 80042ae:	e10d      	b.n	80044cc <z_cmd_sero+0x308>
	}
	case CMD_MFC3_SET: {
		uint16_t p = clamp16(cmd.parameter);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc fc7b 	bl	8000bae <clamp16>
 80042b8:	4603      	mov	r3, r0
 80042ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
		cmd.cmd_ack = z_mfc_set(2, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80042bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042be:	4619      	mov	r1, r3
 80042c0:	2002      	movs	r0, #2
 80042c2:	f7ff fe09 	bl	8003ed8 <z_mfc_set>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <z_cmd_sero+0x10c>
 80042cc:	2380      	movs	r3, #128	@ 0x80
 80042ce:	e000      	b.n	80042d2 <z_cmd_sero+0x10e>
 80042d0:	2307      	movs	r3, #7
 80042d2:	713b      	strb	r3, [r7, #4]
		break;
 80042d4:	e0fa      	b.n	80044cc <z_cmd_sero+0x308>
	}
	case CMD_MFC4_SET: {
		uint16_t p = clamp16(cmd.parameter);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fc fc68 	bl	8000bae <clamp16>
 80042de:	4603      	mov	r3, r0
 80042e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
		cmd.cmd_ack = z_mfc_set(3, p) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80042e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80042e4:	4619      	mov	r1, r3
 80042e6:	2003      	movs	r0, #3
 80042e8:	f7ff fdf6 	bl	8003ed8 <z_mfc_set>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <z_cmd_sero+0x132>
 80042f2:	2380      	movs	r3, #128	@ 0x80
 80042f4:	e000      	b.n	80042f8 <z_cmd_sero+0x134>
 80042f6:	2307      	movs	r3, #7
 80042f8:	713b      	strb	r3, [r7, #4]
		break;
 80042fa:	e0e7      	b.n	80044cc <z_cmd_sero+0x308>
	}

	// MFC1..MFC4 GET
	case CMD_MFC1_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(0, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80042fc:	f107 031e 	add.w	r3, r7, #30
 8004300:	4619      	mov	r1, r3
 8004302:	2000      	movs	r0, #0
 8004304:	f7ff fe0e 	bl	8003f24 <z_mfc_get>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <z_cmd_sero+0x14e>
 800430e:	2380      	movs	r3, #128	@ 0x80
 8004310:	e000      	b.n	8004314 <z_cmd_sero+0x150>
 8004312:	2307      	movs	r3, #7
 8004314:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 8004316:	793b      	ldrb	r3, [r7, #4]
 8004318:	2b80      	cmp	r3, #128	@ 0x80
 800431a:	f040 80ce 	bne.w	80044ba <z_cmd_sero+0x2f6>
			cmd.parameter = v;
 800431e:	8bfb      	ldrh	r3, [r7, #30]
 8004320:	60bb      	str	r3, [r7, #8]
		break;
 8004322:	e0ca      	b.n	80044ba <z_cmd_sero+0x2f6>
	}
	case CMD_MFC2_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(1, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8004324:	f107 031c 	add.w	r3, r7, #28
 8004328:	4619      	mov	r1, r3
 800432a:	2001      	movs	r0, #1
 800432c:	f7ff fdfa 	bl	8003f24 <z_mfc_get>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <z_cmd_sero+0x176>
 8004336:	2380      	movs	r3, #128	@ 0x80
 8004338:	e000      	b.n	800433c <z_cmd_sero+0x178>
 800433a:	2307      	movs	r3, #7
 800433c:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 800433e:	793b      	ldrb	r3, [r7, #4]
 8004340:	2b80      	cmp	r3, #128	@ 0x80
 8004342:	f040 80bc 	bne.w	80044be <z_cmd_sero+0x2fa>
			cmd.parameter = v;
 8004346:	8bbb      	ldrh	r3, [r7, #28]
 8004348:	60bb      	str	r3, [r7, #8]
		break;
 800434a:	e0b8      	b.n	80044be <z_cmd_sero+0x2fa>
	}
	case CMD_MFC3_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(2, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 800434c:	f107 031a 	add.w	r3, r7, #26
 8004350:	4619      	mov	r1, r3
 8004352:	2002      	movs	r0, #2
 8004354:	f7ff fde6 	bl	8003f24 <z_mfc_get>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <z_cmd_sero+0x19e>
 800435e:	2380      	movs	r3, #128	@ 0x80
 8004360:	e000      	b.n	8004364 <z_cmd_sero+0x1a0>
 8004362:	2307      	movs	r3, #7
 8004364:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 8004366:	793b      	ldrb	r3, [r7, #4]
 8004368:	2b80      	cmp	r3, #128	@ 0x80
 800436a:	f040 80aa 	bne.w	80044c2 <z_cmd_sero+0x2fe>
			cmd.parameter = v;
 800436e:	8b7b      	ldrh	r3, [r7, #26]
 8004370:	60bb      	str	r3, [r7, #8]
		break;
 8004372:	e0a6      	b.n	80044c2 <z_cmd_sero+0x2fe>
	}
	case CMD_MFC4_GET: {
		uint16_t v;
		cmd.cmd_ack = z_mfc_get(3, &v) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8004374:	f107 0318 	add.w	r3, r7, #24
 8004378:	4619      	mov	r1, r3
 800437a:	2003      	movs	r0, #3
 800437c:	f7ff fdd2 	bl	8003f24 <z_mfc_get>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <z_cmd_sero+0x1c6>
 8004386:	2380      	movs	r3, #128	@ 0x80
 8004388:	e000      	b.n	800438c <z_cmd_sero+0x1c8>
 800438a:	2307      	movs	r3, #7
 800438c:	713b      	strb	r3, [r7, #4]
		if (cmd.cmd_ack == CMR_SUCCESSFULL)
 800438e:	793b      	ldrb	r3, [r7, #4]
 8004390:	2b80      	cmp	r3, #128	@ 0x80
 8004392:	f040 8098 	bne.w	80044c6 <z_cmd_sero+0x302>
			cmd.parameter = v;
 8004396:	8b3b      	ldrh	r3, [r7, #24]
 8004398:	60bb      	str	r3, [r7, #8]
		break;
 800439a:	e094      	b.n	80044c6 <z_cmd_sero+0x302>
	}

	// MFC1..MFC4 CLOSE
	case CMD_MFC1_CLOSE: {
		cmd.cmd_ack = z_mfc_close(0) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 800439c:	2000      	movs	r0, #0
 800439e:	f7ff fde7 	bl	8003f70 <z_mfc_close>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <z_cmd_sero+0x1e8>
 80043a8:	2380      	movs	r3, #128	@ 0x80
 80043aa:	e000      	b.n	80043ae <z_cmd_sero+0x1ea>
 80043ac:	2307      	movs	r3, #7
 80043ae:	713b      	strb	r3, [r7, #4]
		break;
 80043b0:	e08c      	b.n	80044cc <z_cmd_sero+0x308>
	}
	case CMD_MFC2_CLOSE: {
		cmd.cmd_ack = z_mfc_close(1) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80043b2:	2001      	movs	r0, #1
 80043b4:	f7ff fddc 	bl	8003f70 <z_mfc_close>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <z_cmd_sero+0x1fe>
 80043be:	2380      	movs	r3, #128	@ 0x80
 80043c0:	e000      	b.n	80043c4 <z_cmd_sero+0x200>
 80043c2:	2307      	movs	r3, #7
 80043c4:	713b      	strb	r3, [r7, #4]
		break;
 80043c6:	e081      	b.n	80044cc <z_cmd_sero+0x308>
	}
	case CMD_MFC3_CLOSE: {
		cmd.cmd_ack = z_mfc_close(2) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80043c8:	2002      	movs	r0, #2
 80043ca:	f7ff fdd1 	bl	8003f70 <z_mfc_close>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <z_cmd_sero+0x214>
 80043d4:	2380      	movs	r3, #128	@ 0x80
 80043d6:	e000      	b.n	80043da <z_cmd_sero+0x216>
 80043d8:	2307      	movs	r3, #7
 80043da:	713b      	strb	r3, [r7, #4]
		break;
 80043dc:	e076      	b.n	80044cc <z_cmd_sero+0x308>
	}
	case CMD_MFC4_CLOSE: {
		cmd.cmd_ack = z_mfc_close(3) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 80043de:	2003      	movs	r0, #3
 80043e0:	f7ff fdc6 	bl	8003f70 <z_mfc_close>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <z_cmd_sero+0x22a>
 80043ea:	2380      	movs	r3, #128	@ 0x80
 80043ec:	e000      	b.n	80043f0 <z_cmd_sero+0x22c>
 80043ee:	2307      	movs	r3, #7
 80043f0:	713b      	strb	r3, [r7, #4]
		break;
 80043f2:	e06b      	b.n	80044cc <z_cmd_sero+0x308>
	}

	// Valves OPEN-CLOSE-READ
	case CMD_V3_OPEN: {
	    cmd.cmd_ack = z_valve_open(3) ? CMR_SUCCESSFULL : CMR_UNITBUSY;
 80043f4:	2003      	movs	r0, #3
 80043f6:	f7ff fe19 	bl	800402c <z_valve_open>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <z_cmd_sero+0x240>
 8004400:	2380      	movs	r3, #128	@ 0x80
 8004402:	e000      	b.n	8004406 <z_cmd_sero+0x242>
 8004404:	2309      	movs	r3, #9
 8004406:	713b      	strb	r3, [r7, #4]
	    break;
 8004408:	e060      	b.n	80044cc <z_cmd_sero+0x308>
	}
	case CMD_V3_CLOSE: {
	    cmd.cmd_ack = z_valve_close(3) ? CMR_SUCCESSFULL : CMR_UNITBUSY;
 800440a:	2003      	movs	r0, #3
 800440c:	f7ff fe22 	bl	8004054 <z_valve_close>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <z_cmd_sero+0x256>
 8004416:	2380      	movs	r3, #128	@ 0x80
 8004418:	e000      	b.n	800441c <z_cmd_sero+0x258>
 800441a:	2309      	movs	r3, #9
 800441c:	713b      	strb	r3, [r7, #4]
	    break;
 800441e:	e055      	b.n	80044cc <z_cmd_sero+0x308>
	}
	case CMD_V3_READ: {
	    uint16_t st;
	    if (z_valve_get(3, &st)) { cmd.parameter = st; cmd.cmd_ack = CMR_SUCCESSFULL; }
 8004420:	f107 0316 	add.w	r3, r7, #22
 8004424:	4619      	mov	r1, r3
 8004426:	2003      	movs	r0, #3
 8004428:	f7ff fe28 	bl	800407c <z_valve_get>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d004      	beq.n	800443c <z_cmd_sero+0x278>
 8004432:	8afb      	ldrh	r3, [r7, #22]
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	2380      	movs	r3, #128	@ 0x80
 8004438:	713b      	strb	r3, [r7, #4]
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
	    break;
 800443a:	e047      	b.n	80044cc <z_cmd_sero+0x308>
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
 800443c:	2307      	movs	r3, #7
 800443e:	713b      	strb	r3, [r7, #4]
	    break;
 8004440:	e044      	b.n	80044cc <z_cmd_sero+0x308>
	}

	case CMD_V4_OPEN: {
	    cmd.cmd_ack = z_valve_open(4) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8004442:	2004      	movs	r0, #4
 8004444:	f7ff fdf2 	bl	800402c <z_valve_open>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <z_cmd_sero+0x28e>
 800444e:	2380      	movs	r3, #128	@ 0x80
 8004450:	e000      	b.n	8004454 <z_cmd_sero+0x290>
 8004452:	2307      	movs	r3, #7
 8004454:	713b      	strb	r3, [r7, #4]
	    break;
 8004456:	e039      	b.n	80044cc <z_cmd_sero+0x308>
	}
	case CMD_V4_CLOSE: {
	    cmd.cmd_ack = z_valve_close(4) ? CMR_SUCCESSFULL : CMR_COMMANDDENIED;
 8004458:	2004      	movs	r0, #4
 800445a:	f7ff fdfb 	bl	8004054 <z_valve_close>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <z_cmd_sero+0x2a4>
 8004464:	2380      	movs	r3, #128	@ 0x80
 8004466:	e000      	b.n	800446a <z_cmd_sero+0x2a6>
 8004468:	2307      	movs	r3, #7
 800446a:	713b      	strb	r3, [r7, #4]
	    break;
 800446c:	e02e      	b.n	80044cc <z_cmd_sero+0x308>
	}
	case CMD_V4_READ: {
	    uint16_t st;
	    if (z_valve_get(4, &st)) { cmd.parameter = st; cmd.cmd_ack = CMR_SUCCESSFULL; }
 800446e:	f107 0314 	add.w	r3, r7, #20
 8004472:	4619      	mov	r1, r3
 8004474:	2004      	movs	r0, #4
 8004476:	f7ff fe01 	bl	800407c <z_valve_get>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d004      	beq.n	800448a <z_cmd_sero+0x2c6>
 8004480:	8abb      	ldrh	r3, [r7, #20]
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	2380      	movs	r3, #128	@ 0x80
 8004486:	713b      	strb	r3, [r7, #4]
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
	    break;
 8004488:	e020      	b.n	80044cc <z_cmd_sero+0x308>
	    else                    { cmd.cmd_ack = CMR_COMMANDDENIED; }
 800448a:	2307      	movs	r3, #7
 800448c:	713b      	strb	r3, [r7, #4]
	    break;
 800448e:	e01d      	b.n	80044cc <z_cmd_sero+0x308>
	}

	// GET SET ERR GASBOX
	case CMD_GET_ERR_GB: {
	    uint16_t e;
	    cmd.cmd_ack = z_gb_err_get(&e);
 8004490:	f107 0312 	add.w	r3, r7, #18
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fe14 	bl	80040c2 <z_gb_err_get>
 800449a:	4603      	mov	r3, r0
 800449c:	713b      	strb	r3, [r7, #4]
	    if (cmd.cmd_ack == CMR_SUCCESSFULL) cmd.parameter = e;
 800449e:	793b      	ldrb	r3, [r7, #4]
 80044a0:	2b80      	cmp	r3, #128	@ 0x80
 80044a2:	d112      	bne.n	80044ca <z_cmd_sero+0x306>
 80044a4:	8a7b      	ldrh	r3, [r7, #18]
 80044a6:	60bb      	str	r3, [r7, #8]
	    break;
 80044a8:	e00f      	b.n	80044ca <z_cmd_sero+0x306>
	}
	case CMD_RESET_ERR_GB: {
	    cmd.cmd_ack = z_gb_err_clr();
 80044aa:	f7ff fdfc 	bl	80040a6 <z_gb_err_clr>
 80044ae:	4603      	mov	r3, r0
 80044b0:	713b      	strb	r3, [r7, #4]
	    break;
 80044b2:	e00b      	b.n	80044cc <z_cmd_sero+0x308>
	}


	default:
		cmd.cmd_ack = CMR_UNKNOWNCOMMAND;
 80044b4:	2306      	movs	r3, #6
 80044b6:	713b      	strb	r3, [r7, #4]
		break;
 80044b8:	e008      	b.n	80044cc <z_cmd_sero+0x308>
		break;
 80044ba:	bf00      	nop
 80044bc:	e006      	b.n	80044cc <z_cmd_sero+0x308>
		break;
 80044be:	bf00      	nop
 80044c0:	e004      	b.n	80044cc <z_cmd_sero+0x308>
		break;
 80044c2:	bf00      	nop
 80044c4:	e002      	b.n	80044cc <z_cmd_sero+0x308>
		break;
 80044c6:	bf00      	nop
 80044c8:	e000      	b.n	80044cc <z_cmd_sero+0x308>
	    break;
 80044ca:	bf00      	nop
	};
	resultQueue_push(cmd);
 80044cc:	463b      	mov	r3, r7
 80044ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044d0:	f7fe f8a2 	bl	8002618 <resultQueue_push>

}
 80044d4:	bf00      	nop
 80044d6:	372c      	adds	r7, #44	@ 0x2c
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd90      	pop	{r4, r7, pc}

080044dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044dc:	480d      	ldr	r0, [pc, #52]	@ (8004514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044de:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80044e0:	f7fe fd7a 	bl	8002fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044e4:	480c      	ldr	r0, [pc, #48]	@ (8004518 <LoopForever+0x6>)
  ldr r1, =_edata
 80044e6:	490d      	ldr	r1, [pc, #52]	@ (800451c <LoopForever+0xa>)
  ldr r2, =_sidata
 80044e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004520 <LoopForever+0xe>)
  movs r3, #0
 80044ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80044ec:	e002      	b.n	80044f4 <LoopCopyDataInit>

080044ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044f2:	3304      	adds	r3, #4

080044f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044f8:	d3f9      	bcc.n	80044ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80044fc:	4c0a      	ldr	r4, [pc, #40]	@ (8004528 <LoopForever+0x16>)
  movs r3, #0
 80044fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004500:	e001      	b.n	8004506 <LoopFillZerobss>

08004502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004504:	3204      	adds	r2, #4

08004506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004508:	d3fb      	bcc.n	8004502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800450a:	f005 fcd5 	bl	8009eb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800450e:	f7fc fe9f 	bl	8001250 <main>

08004512 <LoopForever>:

LoopForever:
    b LoopForever
 8004512:	e7fe      	b.n	8004512 <LoopForever>
  ldr   r0, =_estack
 8004514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800451c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8004520:	0800aafc 	.word	0x0800aafc
  ldr r2, =_sbss
 8004524:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8004528:	20001530 	.word	0x20001530

0800452c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800452c:	e7fe      	b.n	800452c <ADC1_2_IRQHandler>

0800452e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004538:	2003      	movs	r0, #3
 800453a:	f001 f951 	bl	80057e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800453e:	200f      	movs	r0, #15
 8004540:	f000 f80e 	bl	8004560 <HAL_InitTick>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	71fb      	strb	r3, [r7, #7]
 800454e:	e001      	b.n	8004554 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004550:	f7fe fcb8 	bl	8002ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004554:	79fb      	ldrb	r3, [r7, #7]

}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800456c:	4b16      	ldr	r3, [pc, #88]	@ (80045c8 <HAL_InitTick+0x68>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d022      	beq.n	80045ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004574:	4b15      	ldr	r3, [pc, #84]	@ (80045cc <HAL_InitTick+0x6c>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4b13      	ldr	r3, [pc, #76]	@ (80045c8 <HAL_InitTick+0x68>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004580:	fbb1 f3f3 	udiv	r3, r1, r3
 8004584:	fbb2 f3f3 	udiv	r3, r2, r3
 8004588:	4618      	mov	r0, r3
 800458a:	f001 f96a 	bl	8005862 <HAL_SYSTICK_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10f      	bne.n	80045b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b0f      	cmp	r3, #15
 8004598:	d809      	bhi.n	80045ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800459a:	2200      	movs	r2, #0
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	f04f 30ff 	mov.w	r0, #4294967295
 80045a2:	f001 f928 	bl	80057f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80045a6:	4a0a      	ldr	r2, [pc, #40]	@ (80045d0 <HAL_InitTick+0x70>)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	e007      	b.n	80045be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	73fb      	strb	r3, [r7, #15]
 80045b2:	e004      	b.n	80045be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
 80045b8:	e001      	b.n	80045be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80045be:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000010 	.word	0x20000010
 80045cc:	20000008 	.word	0x20000008
 80045d0:	2000000c 	.word	0x2000000c

080045d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045d8:	4b05      	ldr	r3, [pc, #20]	@ (80045f0 <HAL_IncTick+0x1c>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <HAL_IncTick+0x20>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4413      	add	r3, r2
 80045e2:	4a03      	ldr	r2, [pc, #12]	@ (80045f0 <HAL_IncTick+0x1c>)
 80045e4:	6013      	str	r3, [r2, #0]
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	200013e4 	.word	0x200013e4
 80045f4:	20000010 	.word	0x20000010

080045f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return uwTick;
 80045fc:	4b03      	ldr	r3, [pc, #12]	@ (800460c <HAL_GetTick+0x14>)
 80045fe:	681b      	ldr	r3, [r3, #0]
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	200013e4 	.word	0x200013e4

08004610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004618:	f7ff ffee 	bl	80045f8 <HAL_GetTick>
 800461c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d004      	beq.n	8004634 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800462a:	4b09      	ldr	r3, [pc, #36]	@ (8004650 <HAL_Delay+0x40>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4413      	add	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004634:	bf00      	nop
 8004636:	f7ff ffdf 	bl	80045f8 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	429a      	cmp	r2, r3
 8004644:	d8f7      	bhi.n	8004636 <HAL_Delay+0x26>
  {
  }
}
 8004646:	bf00      	nop
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000010 	.word	0x20000010

08004654 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	609a      	str	r2, [r3, #8]
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	609a      	str	r2, [r3, #8]
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3360      	adds	r3, #96	@ 0x60
 80046ce:	461a      	mov	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b08      	ldr	r3, [pc, #32]	@ (8004700 <LL_ADC_SetOffset+0x44>)
 80046de:	4013      	ands	r3, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80046f4:	bf00      	nop
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	03fff000 	.word	0x03fff000

08004704 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3360      	adds	r3, #96	@ 0x60
 8004712:	461a      	mov	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3360      	adds	r3, #96	@ 0x60
 8004740:	461a      	mov	r2, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	431a      	orrs	r2, r3
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004766:	b480      	push	{r7}
 8004768:	b087      	sub	sp, #28
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3360      	adds	r3, #96	@ 0x60
 8004776:	461a      	mov	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	431a      	orrs	r2, r3
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3360      	adds	r3, #96	@ 0x60
 80047ac:	461a      	mov	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80047c6:	bf00      	nop
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	615a      	str	r2, [r3, #20]
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3330      	adds	r3, #48	@ 0x30
 8004808:	461a      	mov	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	0a1b      	lsrs	r3, r3, #8
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	f003 030c 	and.w	r3, r3, #12
 8004814:	4413      	add	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	211f      	movs	r1, #31
 8004824:	fa01 f303 	lsl.w	r3, r1, r3
 8004828:	43db      	mvns	r3, r3
 800482a:	401a      	ands	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	0e9b      	lsrs	r3, r3, #26
 8004830:	f003 011f 	and.w	r1, r3, #31
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 031f 	and.w	r3, r3, #31
 800483a:	fa01 f303 	lsl.w	r3, r1, r3
 800483e:	431a      	orrs	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3314      	adds	r3, #20
 8004860:	461a      	mov	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	0e5b      	lsrs	r3, r3, #25
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	4413      	add	r3, r2
 800486e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	0d1b      	lsrs	r3, r3, #20
 8004878:	f003 031f 	and.w	r3, r3, #31
 800487c:	2107      	movs	r1, #7
 800487e:	fa01 f303 	lsl.w	r3, r1, r3
 8004882:	43db      	mvns	r3, r3
 8004884:	401a      	ands	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	0d1b      	lsrs	r3, r3, #20
 800488a:	f003 031f 	and.w	r3, r3, #31
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	fa01 f303 	lsl.w	r3, r1, r3
 8004894:	431a      	orrs	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c0:	43db      	mvns	r3, r3
 80048c2:	401a      	ands	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f003 0318 	and.w	r3, r3, #24
 80048ca:	4908      	ldr	r1, [pc, #32]	@ (80048ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80048cc:	40d9      	lsrs	r1, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	400b      	ands	r3, r1
 80048d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d6:	431a      	orrs	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	0007ffff 	.word	0x0007ffff

080048f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004900:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6093      	str	r3, [r2, #8]
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004928:	d101      	bne.n	800492e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800494c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004950:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004974:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004978:	d101      	bne.n	800497e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <LL_ADC_IsEnabled+0x18>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <LL_ADC_IsEnabled+0x1a>
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d101      	bne.n	80049ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d101      	bne.n	80049f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a00:	b590      	push	{r4, r7, lr}
 8004a02:	b089      	sub	sp, #36	@ 0x24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e1a9      	b.n	8004d6e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d109      	bne.n	8004a3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7fc f83f 	bl	8000aac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff ff67 	bl	8004914 <LL_ADC_IsDeepPowerDownEnabled>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff ff4d 	bl	80048f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff ff82 	bl	8004964 <LL_ADC_IsInternalRegulatorEnabled>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d115      	bne.n	8004a92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff ff66 	bl	800493c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a70:	4b9c      	ldr	r3, [pc, #624]	@ (8004ce4 <HAL_ADC_Init+0x2e4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	099b      	lsrs	r3, r3, #6
 8004a76:	4a9c      	ldr	r2, [pc, #624]	@ (8004ce8 <HAL_ADC_Init+0x2e8>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	099b      	lsrs	r3, r3, #6
 8004a7e:	3301      	adds	r3, #1
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a84:	e002      	b.n	8004a8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f9      	bne.n	8004a86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff ff64 	bl	8004964 <LL_ADC_IsInternalRegulatorEnabled>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10d      	bne.n	8004abe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa6:	f043 0210 	orr.w	r2, r3, #16
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab2:	f043 0201 	orr.w	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff ff75 	bl	80049b2 <LL_ADC_REG_IsConversionOngoing>
 8004ac8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f040 8142 	bne.w	8004d5c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f040 813e 	bne.w	8004d5c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004ae8:	f043 0202 	orr.w	r2, r3, #2
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff ff49 	bl	800498c <LL_ADC_IsEnabled>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d141      	bne.n	8004b84 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b08:	d004      	beq.n	8004b14 <HAL_ADC_Init+0x114>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a77      	ldr	r2, [pc, #476]	@ (8004cec <HAL_ADC_Init+0x2ec>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d10f      	bne.n	8004b34 <HAL_ADC_Init+0x134>
 8004b14:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004b18:	f7ff ff38 	bl	800498c <LL_ADC_IsEnabled>
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	4873      	ldr	r0, [pc, #460]	@ (8004cec <HAL_ADC_Init+0x2ec>)
 8004b20:	f7ff ff34 	bl	800498c <LL_ADC_IsEnabled>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4323      	orrs	r3, r4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf0c      	ite	eq
 8004b2c:	2301      	moveq	r3, #1
 8004b2e:	2300      	movne	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e012      	b.n	8004b5a <HAL_ADC_Init+0x15a>
 8004b34:	486e      	ldr	r0, [pc, #440]	@ (8004cf0 <HAL_ADC_Init+0x2f0>)
 8004b36:	f7ff ff29 	bl	800498c <LL_ADC_IsEnabled>
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	486d      	ldr	r0, [pc, #436]	@ (8004cf4 <HAL_ADC_Init+0x2f4>)
 8004b3e:	f7ff ff25 	bl	800498c <LL_ADC_IsEnabled>
 8004b42:	4603      	mov	r3, r0
 8004b44:	431c      	orrs	r4, r3
 8004b46:	486c      	ldr	r0, [pc, #432]	@ (8004cf8 <HAL_ADC_Init+0x2f8>)
 8004b48:	f7ff ff20 	bl	800498c <LL_ADC_IsEnabled>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4323      	orrs	r3, r4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bf0c      	ite	eq
 8004b54:	2301      	moveq	r3, #1
 8004b56:	2300      	movne	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d012      	beq.n	8004b84 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b66:	d004      	beq.n	8004b72 <HAL_ADC_Init+0x172>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a5f      	ldr	r2, [pc, #380]	@ (8004cec <HAL_ADC_Init+0x2ec>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d101      	bne.n	8004b76 <HAL_ADC_Init+0x176>
 8004b72:	4a62      	ldr	r2, [pc, #392]	@ (8004cfc <HAL_ADC_Init+0x2fc>)
 8004b74:	e000      	b.n	8004b78 <HAL_ADC_Init+0x178>
 8004b76:	4a62      	ldr	r2, [pc, #392]	@ (8004d00 <HAL_ADC_Init+0x300>)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f7ff fd68 	bl	8004654 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	7f5b      	ldrb	r3, [r3, #29]
 8004b88:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b8e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004b94:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004b9a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ba2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d106      	bne.n	8004bc0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	045b      	lsls	r3, r3, #17
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d009      	beq.n	8004bdc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bcc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	4b48      	ldr	r3, [pc, #288]	@ (8004d04 <HAL_ADC_Init+0x304>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	69b9      	ldr	r1, [r7, #24]
 8004bec:	430b      	orrs	r3, r1
 8004bee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fee4 	bl	80049d8 <LL_ADC_INJ_IsConversionOngoing>
 8004c10:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d17f      	bne.n	8004d18 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d17c      	bne.n	8004d18 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c22:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c2a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c3a:	f023 0302 	bic.w	r3, r3, #2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	69b9      	ldr	r1, [r7, #24]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d017      	beq.n	8004c80 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004c5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004c68:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004c6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6911      	ldr	r1, [r2, #16]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004c7e:	e013      	b.n	8004ca8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004c8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ca0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ca4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d12a      	bne.n	8004d08 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004cbc:	f023 0304 	bic.w	r3, r3, #4
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cc8:	4311      	orrs	r1, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004cce:	4311      	orrs	r1, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0201 	orr.w	r2, r2, #1
 8004ce0:	611a      	str	r2, [r3, #16]
 8004ce2:	e019      	b.n	8004d18 <HAL_ADC_Init+0x318>
 8004ce4:	20000008 	.word	0x20000008
 8004ce8:	053e2d63 	.word	0x053e2d63
 8004cec:	50000100 	.word	0x50000100
 8004cf0:	50000400 	.word	0x50000400
 8004cf4:	50000500 	.word	0x50000500
 8004cf8:	50000600 	.word	0x50000600
 8004cfc:	50000300 	.word	0x50000300
 8004d00:	50000700 	.word	0x50000700
 8004d04:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0201 	bic.w	r2, r2, #1
 8004d16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d10c      	bne.n	8004d3a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d26:	f023 010f 	bic.w	r1, r3, #15
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	1e5a      	subs	r2, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d38:	e007      	b.n	8004d4a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 020f 	bic.w	r2, r2, #15
 8004d48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4e:	f023 0303 	bic.w	r3, r3, #3
 8004d52:	f043 0201 	orr.w	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d5a:	e007      	b.n	8004d6c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d60:	f043 0210 	orr.w	r2, r3, #16
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3724      	adds	r7, #36	@ 0x24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd90      	pop	{r4, r7, pc}
 8004d76:	bf00      	nop

08004d78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b0b6      	sub	sp, #216	@ 0xd8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d102      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x24>
 8004d96:	2302      	movs	r3, #2
 8004d98:	f000 bc13 	b.w	80055c2 <HAL_ADC_ConfigChannel+0x84a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff fe02 	bl	80049b2 <LL_ADC_REG_IsConversionOngoing>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f040 83f3 	bne.w	800559c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	6859      	ldr	r1, [r3, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f7ff fd18 	bl	80047f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff fdf0 	bl	80049b2 <LL_ADC_REG_IsConversionOngoing>
 8004dd2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff fdfc 	bl	80049d8 <LL_ADC_INJ_IsConversionOngoing>
 8004de0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004de4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f040 81d9 	bne.w	80051a0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004dee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f040 81d4 	bne.w	80051a0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e00:	d10f      	bne.n	8004e22 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	f7ff fd1f 	bl	8004850 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fcd9 	bl	80047d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004e20:	e00e      	b.n	8004e40 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6819      	ldr	r1, [r3, #0]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f7ff fd0e 	bl	8004850 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff fcc9 	bl	80047d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	695a      	ldr	r2, [r3, #20]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	08db      	lsrs	r3, r3, #3
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d022      	beq.n	8004ea8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6919      	ldr	r1, [r3, #16]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004e72:	f7ff fc23 	bl	80046bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6919      	ldr	r1, [r3, #16]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f7ff fc6f 	bl	8004766 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d102      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x126>
 8004e98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e9c:	e000      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x128>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f7ff fc7b 	bl	800479c <LL_ADC_SetOffsetSaturation>
 8004ea6:	e17b      	b.n	80051a0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2100      	movs	r1, #0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fc28 	bl	8004704 <LL_ADC_GetOffsetChannel>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x15c>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff fc1d 	bl	8004704 <LL_ADC_GetOffsetChannel>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	0e9b      	lsrs	r3, r3, #26
 8004ece:	f003 021f 	and.w	r2, r3, #31
 8004ed2:	e01e      	b.n	8004f12 <HAL_ADC_ConfigChannel+0x19a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff fc12 	bl	8004704 <LL_ADC_GetOffsetChannel>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004eea:	fa93 f3a3 	rbit	r3, r3
 8004eee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ef2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004f02:	2320      	movs	r3, #32
 8004f04:	e004      	b.n	8004f10 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004f06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f0a:	fab3 f383 	clz	r3, r3
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d105      	bne.n	8004f2a <HAL_ADC_ConfigChannel+0x1b2>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	0e9b      	lsrs	r3, r3, #26
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	e018      	b.n	8004f5c <HAL_ADC_ConfigChannel+0x1e4>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004f36:	fa93 f3a3 	rbit	r3, r3
 8004f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004f46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004f4e:	2320      	movs	r3, #32
 8004f50:	e004      	b.n	8004f5c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f56:	fab3 f383 	clz	r3, r3
 8004f5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d106      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2200      	movs	r2, #0
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fbe1 	bl	8004730 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2101      	movs	r1, #1
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff fbc5 	bl	8004704 <LL_ADC_GetOffsetChannel>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10a      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x222>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2101      	movs	r1, #1
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fbba 	bl	8004704 <LL_ADC_GetOffsetChannel>
 8004f90:	4603      	mov	r3, r0
 8004f92:	0e9b      	lsrs	r3, r3, #26
 8004f94:	f003 021f 	and.w	r2, r3, #31
 8004f98:	e01e      	b.n	8004fd8 <HAL_ADC_ConfigChannel+0x260>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fbaf 	bl	8004704 <LL_ADC_GetOffsetChannel>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004fb0:	fa93 f3a3 	rbit	r3, r3
 8004fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004fb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004fc8:	2320      	movs	r3, #32
 8004fca:	e004      	b.n	8004fd6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004fd0:	fab3 f383 	clz	r3, r3
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d105      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x278>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	0e9b      	lsrs	r3, r3, #26
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	e018      	b.n	8005022 <HAL_ADC_ConfigChannel+0x2aa>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ffc:	fa93 f3a3 	rbit	r3, r3
 8005000:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005004:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005008:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800500c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005014:	2320      	movs	r3, #32
 8005016:	e004      	b.n	8005022 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005018:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800501c:	fab3 f383 	clz	r3, r3
 8005020:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005022:	429a      	cmp	r2, r3
 8005024:	d106      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2200      	movs	r2, #0
 800502c:	2101      	movs	r1, #1
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fb7e 	bl	8004730 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2102      	movs	r1, #2
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff fb62 	bl	8004704 <LL_ADC_GetOffsetChannel>
 8005040:	4603      	mov	r3, r0
 8005042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10a      	bne.n	8005060 <HAL_ADC_ConfigChannel+0x2e8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2102      	movs	r1, #2
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff fb57 	bl	8004704 <LL_ADC_GetOffsetChannel>
 8005056:	4603      	mov	r3, r0
 8005058:	0e9b      	lsrs	r3, r3, #26
 800505a:	f003 021f 	and.w	r2, r3, #31
 800505e:	e01e      	b.n	800509e <HAL_ADC_ConfigChannel+0x326>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2102      	movs	r1, #2
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff fb4c 	bl	8004704 <LL_ADC_GetOffsetChannel>
 800506c:	4603      	mov	r3, r0
 800506e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005072:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005076:	fa93 f3a3 	rbit	r3, r3
 800507a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800507e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005082:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005086:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800508e:	2320      	movs	r3, #32
 8005090:	e004      	b.n	800509c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005092:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005096:	fab3 f383 	clz	r3, r3
 800509a:	b2db      	uxtb	r3, r3
 800509c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d105      	bne.n	80050b6 <HAL_ADC_ConfigChannel+0x33e>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	0e9b      	lsrs	r3, r3, #26
 80050b0:	f003 031f 	and.w	r3, r3, #31
 80050b4:	e016      	b.n	80050e4 <HAL_ADC_ConfigChannel+0x36c>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80050c2:	fa93 f3a3 	rbit	r3, r3
 80050c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80050c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80050ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80050d6:	2320      	movs	r3, #32
 80050d8:	e004      	b.n	80050e4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80050da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050de:	fab3 f383 	clz	r3, r3
 80050e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d106      	bne.n	80050f6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2200      	movs	r2, #0
 80050ee:	2102      	movs	r1, #2
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff fb1d 	bl	8004730 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2103      	movs	r1, #3
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff fb01 	bl	8004704 <LL_ADC_GetOffsetChannel>
 8005102:	4603      	mov	r3, r0
 8005104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <HAL_ADC_ConfigChannel+0x3aa>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2103      	movs	r1, #3
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff faf6 	bl	8004704 <LL_ADC_GetOffsetChannel>
 8005118:	4603      	mov	r3, r0
 800511a:	0e9b      	lsrs	r3, r3, #26
 800511c:	f003 021f 	and.w	r2, r3, #31
 8005120:	e017      	b.n	8005152 <HAL_ADC_ConfigChannel+0x3da>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2103      	movs	r1, #3
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff faeb 	bl	8004704 <LL_ADC_GetOffsetChannel>
 800512e:	4603      	mov	r3, r0
 8005130:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005134:	fa93 f3a3 	rbit	r3, r3
 8005138:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800513a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800513c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800513e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005144:	2320      	movs	r3, #32
 8005146:	e003      	b.n	8005150 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005148:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800514a:	fab3 f383 	clz	r3, r3
 800514e:	b2db      	uxtb	r3, r3
 8005150:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800515a:	2b00      	cmp	r3, #0
 800515c:	d105      	bne.n	800516a <HAL_ADC_ConfigChannel+0x3f2>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	0e9b      	lsrs	r3, r3, #26
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	e011      	b.n	800518e <HAL_ADC_ConfigChannel+0x416>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005170:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005172:	fa93 f3a3 	rbit	r3, r3
 8005176:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800517a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800517c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005182:	2320      	movs	r3, #32
 8005184:	e003      	b.n	800518e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005188:	fab3 f383 	clz	r3, r3
 800518c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800518e:	429a      	cmp	r2, r3
 8005190:	d106      	bne.n	80051a0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	2103      	movs	r1, #3
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fac8 	bl	8004730 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fbf1 	bl	800498c <LL_ADC_IsEnabled>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f040 813d 	bne.w	800542c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6819      	ldr	r1, [r3, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	461a      	mov	r2, r3
 80051c0:	f7ff fb72 	bl	80048a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	4aa2      	ldr	r2, [pc, #648]	@ (8005454 <HAL_ADC_ConfigChannel+0x6dc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	f040 812e 	bne.w	800542c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10b      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0x480>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	0e9b      	lsrs	r3, r3, #26
 80051e6:	3301      	adds	r3, #1
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	2b09      	cmp	r3, #9
 80051ee:	bf94      	ite	ls
 80051f0:	2301      	movls	r3, #1
 80051f2:	2300      	movhi	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	e019      	b.n	800522c <HAL_ADC_ConfigChannel+0x4b4>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005200:	fa93 f3a3 	rbit	r3, r3
 8005204:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005206:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005208:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800520a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005210:	2320      	movs	r3, #32
 8005212:	e003      	b.n	800521c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005214:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005216:	fab3 f383 	clz	r3, r3
 800521a:	b2db      	uxtb	r3, r3
 800521c:	3301      	adds	r3, #1
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	2b09      	cmp	r3, #9
 8005224:	bf94      	ite	ls
 8005226:	2301      	movls	r3, #1
 8005228:	2300      	movhi	r3, #0
 800522a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800522c:	2b00      	cmp	r3, #0
 800522e:	d079      	beq.n	8005324 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005238:	2b00      	cmp	r3, #0
 800523a:	d107      	bne.n	800524c <HAL_ADC_ConfigChannel+0x4d4>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	0e9b      	lsrs	r3, r3, #26
 8005242:	3301      	adds	r3, #1
 8005244:	069b      	lsls	r3, r3, #26
 8005246:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800524a:	e015      	b.n	8005278 <HAL_ADC_ConfigChannel+0x500>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005254:	fa93 f3a3 	rbit	r3, r3
 8005258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800525a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800525c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800525e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005264:	2320      	movs	r3, #32
 8005266:	e003      	b.n	8005270 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800526a:	fab3 f383 	clz	r3, r3
 800526e:	b2db      	uxtb	r3, r3
 8005270:	3301      	adds	r3, #1
 8005272:	069b      	lsls	r3, r3, #26
 8005274:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005280:	2b00      	cmp	r3, #0
 8005282:	d109      	bne.n	8005298 <HAL_ADC_ConfigChannel+0x520>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	0e9b      	lsrs	r3, r3, #26
 800528a:	3301      	adds	r3, #1
 800528c:	f003 031f 	and.w	r3, r3, #31
 8005290:	2101      	movs	r1, #1
 8005292:	fa01 f303 	lsl.w	r3, r1, r3
 8005296:	e017      	b.n	80052c8 <HAL_ADC_ConfigChannel+0x550>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052a0:	fa93 f3a3 	rbit	r3, r3
 80052a4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80052a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80052aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80052b0:	2320      	movs	r3, #32
 80052b2:	e003      	b.n	80052bc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80052b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052b6:	fab3 f383 	clz	r3, r3
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	3301      	adds	r3, #1
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	2101      	movs	r1, #1
 80052c4:	fa01 f303 	lsl.w	r3, r1, r3
 80052c8:	ea42 0103 	orr.w	r1, r2, r3
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <HAL_ADC_ConfigChannel+0x576>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	0e9b      	lsrs	r3, r3, #26
 80052de:	3301      	adds	r3, #1
 80052e0:	f003 021f 	and.w	r2, r3, #31
 80052e4:	4613      	mov	r3, r2
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	4413      	add	r3, r2
 80052ea:	051b      	lsls	r3, r3, #20
 80052ec:	e018      	b.n	8005320 <HAL_ADC_ConfigChannel+0x5a8>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f6:	fa93 f3a3 	rbit	r3, r3
 80052fa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80052fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005306:	2320      	movs	r3, #32
 8005308:	e003      	b.n	8005312 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800530a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800530c:	fab3 f383 	clz	r3, r3
 8005310:	b2db      	uxtb	r3, r3
 8005312:	3301      	adds	r3, #1
 8005314:	f003 021f 	and.w	r2, r3, #31
 8005318:	4613      	mov	r3, r2
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	4413      	add	r3, r2
 800531e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005320:	430b      	orrs	r3, r1
 8005322:	e07e      	b.n	8005422 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800532c:	2b00      	cmp	r3, #0
 800532e:	d107      	bne.n	8005340 <HAL_ADC_ConfigChannel+0x5c8>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	0e9b      	lsrs	r3, r3, #26
 8005336:	3301      	adds	r3, #1
 8005338:	069b      	lsls	r3, r3, #26
 800533a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800533e:	e015      	b.n	800536c <HAL_ADC_ConfigChannel+0x5f4>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005348:	fa93 f3a3 	rbit	r3, r3
 800534c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800534e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005350:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005358:	2320      	movs	r3, #32
 800535a:	e003      	b.n	8005364 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800535c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535e:	fab3 f383 	clz	r3, r3
 8005362:	b2db      	uxtb	r3, r3
 8005364:	3301      	adds	r3, #1
 8005366:	069b      	lsls	r3, r3, #26
 8005368:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005374:	2b00      	cmp	r3, #0
 8005376:	d109      	bne.n	800538c <HAL_ADC_ConfigChannel+0x614>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	0e9b      	lsrs	r3, r3, #26
 800537e:	3301      	adds	r3, #1
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	2101      	movs	r1, #1
 8005386:	fa01 f303 	lsl.w	r3, r1, r3
 800538a:	e017      	b.n	80053bc <HAL_ADC_ConfigChannel+0x644>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	fa93 f3a3 	rbit	r3, r3
 8005398:	61fb      	str	r3, [r7, #28]
  return result;
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80053a4:	2320      	movs	r3, #32
 80053a6:	e003      	b.n	80053b0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	fab3 f383 	clz	r3, r3
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	3301      	adds	r3, #1
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	2101      	movs	r1, #1
 80053b8:	fa01 f303 	lsl.w	r3, r1, r3
 80053bc:	ea42 0103 	orr.w	r1, r2, r3
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10d      	bne.n	80053e8 <HAL_ADC_ConfigChannel+0x670>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	0e9b      	lsrs	r3, r3, #26
 80053d2:	3301      	adds	r3, #1
 80053d4:	f003 021f 	and.w	r2, r3, #31
 80053d8:	4613      	mov	r3, r2
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	4413      	add	r3, r2
 80053de:	3b1e      	subs	r3, #30
 80053e0:	051b      	lsls	r3, r3, #20
 80053e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80053e6:	e01b      	b.n	8005420 <HAL_ADC_ConfigChannel+0x6a8>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	fa93 f3a3 	rbit	r3, r3
 80053f4:	613b      	str	r3, [r7, #16]
  return result;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005400:	2320      	movs	r3, #32
 8005402:	e003      	b.n	800540c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	fab3 f383 	clz	r3, r3
 800540a:	b2db      	uxtb	r3, r3
 800540c:	3301      	adds	r3, #1
 800540e:	f003 021f 	and.w	r2, r3, #31
 8005412:	4613      	mov	r3, r2
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	4413      	add	r3, r2
 8005418:	3b1e      	subs	r3, #30
 800541a:	051b      	lsls	r3, r3, #20
 800541c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005420:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005426:	4619      	mov	r1, r3
 8005428:	f7ff fa12 	bl	8004850 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4b09      	ldr	r3, [pc, #36]	@ (8005458 <HAL_ADC_ConfigChannel+0x6e0>)
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 80be 	beq.w	80055b6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005442:	d004      	beq.n	800544e <HAL_ADC_ConfigChannel+0x6d6>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a04      	ldr	r2, [pc, #16]	@ (800545c <HAL_ADC_ConfigChannel+0x6e4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d10a      	bne.n	8005464 <HAL_ADC_ConfigChannel+0x6ec>
 800544e:	4b04      	ldr	r3, [pc, #16]	@ (8005460 <HAL_ADC_ConfigChannel+0x6e8>)
 8005450:	e009      	b.n	8005466 <HAL_ADC_ConfigChannel+0x6ee>
 8005452:	bf00      	nop
 8005454:	407f0000 	.word	0x407f0000
 8005458:	80080000 	.word	0x80080000
 800545c:	50000100 	.word	0x50000100
 8005460:	50000300 	.word	0x50000300
 8005464:	4b59      	ldr	r3, [pc, #356]	@ (80055cc <HAL_ADC_ConfigChannel+0x854>)
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff f91a 	bl	80046a0 <LL_ADC_GetCommonPathInternalCh>
 800546c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a56      	ldr	r2, [pc, #344]	@ (80055d0 <HAL_ADC_ConfigChannel+0x858>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_ADC_ConfigChannel+0x70c>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a55      	ldr	r2, [pc, #340]	@ (80055d4 <HAL_ADC_ConfigChannel+0x85c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d13a      	bne.n	80054fa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005488:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d134      	bne.n	80054fa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005498:	d005      	beq.n	80054a6 <HAL_ADC_ConfigChannel+0x72e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a4e      	ldr	r2, [pc, #312]	@ (80055d8 <HAL_ADC_ConfigChannel+0x860>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	f040 8085 	bne.w	80055b0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054ae:	d004      	beq.n	80054ba <HAL_ADC_ConfigChannel+0x742>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a49      	ldr	r2, [pc, #292]	@ (80055dc <HAL_ADC_ConfigChannel+0x864>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d101      	bne.n	80054be <HAL_ADC_ConfigChannel+0x746>
 80054ba:	4a49      	ldr	r2, [pc, #292]	@ (80055e0 <HAL_ADC_ConfigChannel+0x868>)
 80054bc:	e000      	b.n	80054c0 <HAL_ADC_ConfigChannel+0x748>
 80054be:	4a43      	ldr	r2, [pc, #268]	@ (80055cc <HAL_ADC_ConfigChannel+0x854>)
 80054c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80054c8:	4619      	mov	r1, r3
 80054ca:	4610      	mov	r0, r2
 80054cc:	f7ff f8d5 	bl	800467a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054d0:	4b44      	ldr	r3, [pc, #272]	@ (80055e4 <HAL_ADC_ConfigChannel+0x86c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	099b      	lsrs	r3, r3, #6
 80054d6:	4a44      	ldr	r2, [pc, #272]	@ (80055e8 <HAL_ADC_ConfigChannel+0x870>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	099b      	lsrs	r3, r3, #6
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	4613      	mov	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054ea:	e002      	b.n	80054f2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1f9      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054f8:	e05a      	b.n	80055b0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a3b      	ldr	r2, [pc, #236]	@ (80055ec <HAL_ADC_ConfigChannel+0x874>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d125      	bne.n	8005550 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005504:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005508:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d11f      	bne.n	8005550 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a31      	ldr	r2, [pc, #196]	@ (80055dc <HAL_ADC_ConfigChannel+0x864>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d104      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x7ac>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a34      	ldr	r2, [pc, #208]	@ (80055f0 <HAL_ADC_ConfigChannel+0x878>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d047      	beq.n	80055b4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800552c:	d004      	beq.n	8005538 <HAL_ADC_ConfigChannel+0x7c0>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a2a      	ldr	r2, [pc, #168]	@ (80055dc <HAL_ADC_ConfigChannel+0x864>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d101      	bne.n	800553c <HAL_ADC_ConfigChannel+0x7c4>
 8005538:	4a29      	ldr	r2, [pc, #164]	@ (80055e0 <HAL_ADC_ConfigChannel+0x868>)
 800553a:	e000      	b.n	800553e <HAL_ADC_ConfigChannel+0x7c6>
 800553c:	4a23      	ldr	r2, [pc, #140]	@ (80055cc <HAL_ADC_ConfigChannel+0x854>)
 800553e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005542:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f7ff f896 	bl	800467a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800554e:	e031      	b.n	80055b4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a27      	ldr	r2, [pc, #156]	@ (80055f4 <HAL_ADC_ConfigChannel+0x87c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d12d      	bne.n	80055b6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800555a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800555e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d127      	bne.n	80055b6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1c      	ldr	r2, [pc, #112]	@ (80055dc <HAL_ADC_ConfigChannel+0x864>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d022      	beq.n	80055b6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005578:	d004      	beq.n	8005584 <HAL_ADC_ConfigChannel+0x80c>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a17      	ldr	r2, [pc, #92]	@ (80055dc <HAL_ADC_ConfigChannel+0x864>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d101      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x810>
 8005584:	4a16      	ldr	r2, [pc, #88]	@ (80055e0 <HAL_ADC_ConfigChannel+0x868>)
 8005586:	e000      	b.n	800558a <HAL_ADC_ConfigChannel+0x812>
 8005588:	4a10      	ldr	r2, [pc, #64]	@ (80055cc <HAL_ADC_ConfigChannel+0x854>)
 800558a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800558e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005592:	4619      	mov	r1, r3
 8005594:	4610      	mov	r0, r2
 8005596:	f7ff f870 	bl	800467a <LL_ADC_SetCommonPathInternalCh>
 800559a:	e00c      	b.n	80055b6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a0:	f043 0220 	orr.w	r2, r3, #32
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80055ae:	e002      	b.n	80055b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055b0:	bf00      	nop
 80055b2:	e000      	b.n	80055b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80055be:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	37d8      	adds	r7, #216	@ 0xd8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	50000700 	.word	0x50000700
 80055d0:	c3210000 	.word	0xc3210000
 80055d4:	90c00010 	.word	0x90c00010
 80055d8:	50000600 	.word	0x50000600
 80055dc:	50000100 	.word	0x50000100
 80055e0:	50000300 	.word	0x50000300
 80055e4:	20000008 	.word	0x20000008
 80055e8:	053e2d63 	.word	0x053e2d63
 80055ec:	c7520000 	.word	0xc7520000
 80055f0:	50000500 	.word	0x50000500
 80055f4:	cb840000 	.word	0xcb840000

080055f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005608:	4b0c      	ldr	r3, [pc, #48]	@ (800563c <__NVIC_SetPriorityGrouping+0x44>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005614:	4013      	ands	r3, r2
 8005616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005620:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800562a:	4a04      	ldr	r2, [pc, #16]	@ (800563c <__NVIC_SetPriorityGrouping+0x44>)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	60d3      	str	r3, [r2, #12]
}
 8005630:	bf00      	nop
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	e000ed00 	.word	0xe000ed00

08005640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005644:	4b04      	ldr	r3, [pc, #16]	@ (8005658 <__NVIC_GetPriorityGrouping+0x18>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	0a1b      	lsrs	r3, r3, #8
 800564a:	f003 0307 	and.w	r3, r3, #7
}
 800564e:	4618      	mov	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	e000ed00 	.word	0xe000ed00

0800565c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566a:	2b00      	cmp	r3, #0
 800566c:	db0b      	blt.n	8005686 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	f003 021f 	and.w	r2, r3, #31
 8005674:	4907      	ldr	r1, [pc, #28]	@ (8005694 <__NVIC_EnableIRQ+0x38>)
 8005676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	2001      	movs	r0, #1
 800567e:	fa00 f202 	lsl.w	r2, r0, r2
 8005682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	e000e100 	.word	0xe000e100

08005698 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	db12      	blt.n	80056d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	f003 021f 	and.w	r2, r3, #31
 80056b0:	490a      	ldr	r1, [pc, #40]	@ (80056dc <__NVIC_DisableIRQ+0x44>)
 80056b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	2001      	movs	r0, #1
 80056ba:	fa00 f202 	lsl.w	r2, r0, r2
 80056be:	3320      	adds	r3, #32
 80056c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80056c4:	f3bf 8f4f 	dsb	sy
}
 80056c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80056ca:	f3bf 8f6f 	isb	sy
}
 80056ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	e000e100 	.word	0xe000e100

080056e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	6039      	str	r1, [r7, #0]
 80056ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	db0a      	blt.n	800570a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	490c      	ldr	r1, [pc, #48]	@ (800572c <__NVIC_SetPriority+0x4c>)
 80056fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fe:	0112      	lsls	r2, r2, #4
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	440b      	add	r3, r1
 8005704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005708:	e00a      	b.n	8005720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	b2da      	uxtb	r2, r3
 800570e:	4908      	ldr	r1, [pc, #32]	@ (8005730 <__NVIC_SetPriority+0x50>)
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	3b04      	subs	r3, #4
 8005718:	0112      	lsls	r2, r2, #4
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	440b      	add	r3, r1
 800571e:	761a      	strb	r2, [r3, #24]
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	e000e100 	.word	0xe000e100
 8005730:	e000ed00 	.word	0xe000ed00

08005734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005734:	b480      	push	{r7}
 8005736:	b089      	sub	sp, #36	@ 0x24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f1c3 0307 	rsb	r3, r3, #7
 800574e:	2b04      	cmp	r3, #4
 8005750:	bf28      	it	cs
 8005752:	2304      	movcs	r3, #4
 8005754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	3304      	adds	r3, #4
 800575a:	2b06      	cmp	r3, #6
 800575c:	d902      	bls.n	8005764 <NVIC_EncodePriority+0x30>
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	3b03      	subs	r3, #3
 8005762:	e000      	b.n	8005766 <NVIC_EncodePriority+0x32>
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005768:	f04f 32ff 	mov.w	r2, #4294967295
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	43da      	mvns	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	401a      	ands	r2, r3
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800577c:	f04f 31ff 	mov.w	r1, #4294967295
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	fa01 f303 	lsl.w	r3, r1, r3
 8005786:	43d9      	mvns	r1, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800578c:	4313      	orrs	r3, r2
         );
}
 800578e:	4618      	mov	r0, r3
 8005790:	3724      	adds	r7, #36	@ 0x24
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
	...

0800579c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057ac:	d301      	bcc.n	80057b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057ae:	2301      	movs	r3, #1
 80057b0:	e00f      	b.n	80057d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057b2:	4a0a      	ldr	r2, [pc, #40]	@ (80057dc <SysTick_Config+0x40>)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057ba:	210f      	movs	r1, #15
 80057bc:	f04f 30ff 	mov.w	r0, #4294967295
 80057c0:	f7ff ff8e 	bl	80056e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057c4:	4b05      	ldr	r3, [pc, #20]	@ (80057dc <SysTick_Config+0x40>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ca:	4b04      	ldr	r3, [pc, #16]	@ (80057dc <SysTick_Config+0x40>)
 80057cc:	2207      	movs	r2, #7
 80057ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	e000e010 	.word	0xe000e010

080057e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff ff05 	bl	80055f8 <__NVIC_SetPriorityGrouping>
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b086      	sub	sp, #24
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	4603      	mov	r3, r0
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005804:	f7ff ff1c 	bl	8005640 <__NVIC_GetPriorityGrouping>
 8005808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	6978      	ldr	r0, [r7, #20]
 8005810:	f7ff ff90 	bl	8005734 <NVIC_EncodePriority>
 8005814:	4602      	mov	r2, r0
 8005816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800581a:	4611      	mov	r1, r2
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff ff5f 	bl	80056e0 <__NVIC_SetPriority>
}
 8005822:	bf00      	nop
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	4603      	mov	r3, r0
 8005832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff ff0f 	bl	800565c <__NVIC_EnableIRQ>
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b082      	sub	sp, #8
 800584a:	af00      	add	r7, sp, #0
 800584c:	4603      	mov	r3, r0
 800584e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff ff1f 	bl	8005698 <__NVIC_DisableIRQ>
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff ff96 	bl	800579c <SysTick_Config>
 8005870:	4603      	mov	r3, r0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800588a:	e15a      	b.n	8005b42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	2101      	movs	r1, #1
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	fa01 f303 	lsl.w	r3, r1, r3
 8005898:	4013      	ands	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 814c 	beq.w	8005b3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 0303 	and.w	r3, r3, #3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d005      	beq.n	80058bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d130      	bne.n	800591e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	2203      	movs	r2, #3
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	43db      	mvns	r3, r3
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4013      	ands	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058f2:	2201      	movs	r2, #1
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	091b      	lsrs	r3, r3, #4
 8005908:	f003 0201 	and.w	r2, r3, #1
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	2b03      	cmp	r3, #3
 8005928:	d017      	beq.n	800595a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	2203      	movs	r2, #3
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	43db      	mvns	r3, r3
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4013      	ands	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d123      	bne.n	80059ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	08da      	lsrs	r2, r3, #3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3208      	adds	r2, #8
 800596e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	220f      	movs	r2, #15
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	43db      	mvns	r3, r3
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4013      	ands	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	08da      	lsrs	r2, r3, #3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3208      	adds	r2, #8
 80059a8:	6939      	ldr	r1, [r7, #16]
 80059aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	2203      	movs	r2, #3
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	43db      	mvns	r3, r3
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4013      	ands	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f003 0203 	and.w	r2, r3, #3
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80a6 	beq.w	8005b3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059f0:	4b5b      	ldr	r3, [pc, #364]	@ (8005b60 <HAL_GPIO_Init+0x2e4>)
 80059f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059f4:	4a5a      	ldr	r2, [pc, #360]	@ (8005b60 <HAL_GPIO_Init+0x2e4>)
 80059f6:	f043 0301 	orr.w	r3, r3, #1
 80059fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80059fc:	4b58      	ldr	r3, [pc, #352]	@ (8005b60 <HAL_GPIO_Init+0x2e4>)
 80059fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a08:	4a56      	ldr	r2, [pc, #344]	@ (8005b64 <HAL_GPIO_Init+0x2e8>)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	089b      	lsrs	r3, r3, #2
 8005a0e:	3302      	adds	r3, #2
 8005a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f003 0303 	and.w	r3, r3, #3
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	220f      	movs	r2, #15
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005a32:	d01f      	beq.n	8005a74 <HAL_GPIO_Init+0x1f8>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a4c      	ldr	r2, [pc, #304]	@ (8005b68 <HAL_GPIO_Init+0x2ec>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d019      	beq.n	8005a70 <HAL_GPIO_Init+0x1f4>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a4b      	ldr	r2, [pc, #300]	@ (8005b6c <HAL_GPIO_Init+0x2f0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <HAL_GPIO_Init+0x1f0>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a4a      	ldr	r2, [pc, #296]	@ (8005b70 <HAL_GPIO_Init+0x2f4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00d      	beq.n	8005a68 <HAL_GPIO_Init+0x1ec>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a49      	ldr	r2, [pc, #292]	@ (8005b74 <HAL_GPIO_Init+0x2f8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d007      	beq.n	8005a64 <HAL_GPIO_Init+0x1e8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a48      	ldr	r2, [pc, #288]	@ (8005b78 <HAL_GPIO_Init+0x2fc>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d101      	bne.n	8005a60 <HAL_GPIO_Init+0x1e4>
 8005a5c:	2305      	movs	r3, #5
 8005a5e:	e00a      	b.n	8005a76 <HAL_GPIO_Init+0x1fa>
 8005a60:	2306      	movs	r3, #6
 8005a62:	e008      	b.n	8005a76 <HAL_GPIO_Init+0x1fa>
 8005a64:	2304      	movs	r3, #4
 8005a66:	e006      	b.n	8005a76 <HAL_GPIO_Init+0x1fa>
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e004      	b.n	8005a76 <HAL_GPIO_Init+0x1fa>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e002      	b.n	8005a76 <HAL_GPIO_Init+0x1fa>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <HAL_GPIO_Init+0x1fa>
 8005a74:	2300      	movs	r3, #0
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	f002 0203 	and.w	r2, r2, #3
 8005a7c:	0092      	lsls	r2, r2, #2
 8005a7e:	4093      	lsls	r3, r2
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a86:	4937      	ldr	r1, [pc, #220]	@ (8005b64 <HAL_GPIO_Init+0x2e8>)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	089b      	lsrs	r3, r3, #2
 8005a8c:	3302      	adds	r3, #2
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a94:	4b39      	ldr	r3, [pc, #228]	@ (8005b7c <HAL_GPIO_Init+0x300>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ab8:	4a30      	ldr	r2, [pc, #192]	@ (8005b7c <HAL_GPIO_Init+0x300>)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005abe:	4b2f      	ldr	r3, [pc, #188]	@ (8005b7c <HAL_GPIO_Init+0x300>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4013      	ands	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ae2:	4a26      	ldr	r2, [pc, #152]	@ (8005b7c <HAL_GPIO_Init+0x300>)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005ae8:	4b24      	ldr	r3, [pc, #144]	@ (8005b7c <HAL_GPIO_Init+0x300>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	43db      	mvns	r3, r3
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4013      	ands	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005b7c <HAL_GPIO_Init+0x300>)
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005b12:	4b1a      	ldr	r3, [pc, #104]	@ (8005b7c <HAL_GPIO_Init+0x300>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005b36:	4a11      	ldr	r2, [pc, #68]	@ (8005b7c <HAL_GPIO_Init+0x300>)
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f47f ae9d 	bne.w	800588c <HAL_GPIO_Init+0x10>
  }
}
 8005b52:	bf00      	nop
 8005b54:	bf00      	nop
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	40021000 	.word	0x40021000
 8005b64:	40010000 	.word	0x40010000
 8005b68:	48000400 	.word	0x48000400
 8005b6c:	48000800 	.word	0x48000800
 8005b70:	48000c00 	.word	0x48000c00
 8005b74:	48001000 	.word	0x48001000
 8005b78:	48001400 	.word	0x48001400
 8005b7c:	40010400 	.word	0x40010400

08005b80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8005b8e:	e0bd      	b.n	8005d0c <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8005b90:	2201      	movs	r2, #1
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 80b0 	beq.w	8005d06 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8005ba6:	4a60      	ldr	r2, [pc, #384]	@ (8005d28 <HAL_GPIO_DeInit+0x1a8>)
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	089b      	lsrs	r3, r3, #2
 8005bac:	3302      	adds	r3, #2
 8005bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	220f      	movs	r2, #15
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005bce:	d01f      	beq.n	8005c10 <HAL_GPIO_DeInit+0x90>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a56      	ldr	r2, [pc, #344]	@ (8005d2c <HAL_GPIO_DeInit+0x1ac>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d019      	beq.n	8005c0c <HAL_GPIO_DeInit+0x8c>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a55      	ldr	r2, [pc, #340]	@ (8005d30 <HAL_GPIO_DeInit+0x1b0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d013      	beq.n	8005c08 <HAL_GPIO_DeInit+0x88>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a54      	ldr	r2, [pc, #336]	@ (8005d34 <HAL_GPIO_DeInit+0x1b4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00d      	beq.n	8005c04 <HAL_GPIO_DeInit+0x84>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a53      	ldr	r2, [pc, #332]	@ (8005d38 <HAL_GPIO_DeInit+0x1b8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <HAL_GPIO_DeInit+0x80>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a52      	ldr	r2, [pc, #328]	@ (8005d3c <HAL_GPIO_DeInit+0x1bc>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d101      	bne.n	8005bfc <HAL_GPIO_DeInit+0x7c>
 8005bf8:	2305      	movs	r3, #5
 8005bfa:	e00a      	b.n	8005c12 <HAL_GPIO_DeInit+0x92>
 8005bfc:	2306      	movs	r3, #6
 8005bfe:	e008      	b.n	8005c12 <HAL_GPIO_DeInit+0x92>
 8005c00:	2304      	movs	r3, #4
 8005c02:	e006      	b.n	8005c12 <HAL_GPIO_DeInit+0x92>
 8005c04:	2303      	movs	r3, #3
 8005c06:	e004      	b.n	8005c12 <HAL_GPIO_DeInit+0x92>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e002      	b.n	8005c12 <HAL_GPIO_DeInit+0x92>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e000      	b.n	8005c12 <HAL_GPIO_DeInit+0x92>
 8005c10:	2300      	movs	r3, #0
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	f002 0203 	and.w	r2, r2, #3
 8005c18:	0092      	lsls	r2, r2, #2
 8005c1a:	4093      	lsls	r3, r2
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d132      	bne.n	8005c88 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005c22:	4b47      	ldr	r3, [pc, #284]	@ (8005d40 <HAL_GPIO_DeInit+0x1c0>)
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	4945      	ldr	r1, [pc, #276]	@ (8005d40 <HAL_GPIO_DeInit+0x1c0>)
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005c30:	4b43      	ldr	r3, [pc, #268]	@ (8005d40 <HAL_GPIO_DeInit+0x1c0>)
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	43db      	mvns	r3, r3
 8005c38:	4941      	ldr	r1, [pc, #260]	@ (8005d40 <HAL_GPIO_DeInit+0x1c0>)
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005c3e:	4b40      	ldr	r3, [pc, #256]	@ (8005d40 <HAL_GPIO_DeInit+0x1c0>)
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	43db      	mvns	r3, r3
 8005c46:	493e      	ldr	r1, [pc, #248]	@ (8005d40 <HAL_GPIO_DeInit+0x1c0>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005c4c:	4b3c      	ldr	r3, [pc, #240]	@ (8005d40 <HAL_GPIO_DeInit+0x1c0>)
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	43db      	mvns	r3, r3
 8005c54:	493a      	ldr	r1, [pc, #232]	@ (8005d40 <HAL_GPIO_DeInit+0x1c0>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	220f      	movs	r2, #15
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8005d28 <HAL_GPIO_DeInit+0x1a8>)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	089b      	lsrs	r3, r3, #2
 8005c70:	3302      	adds	r3, #2
 8005c72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	43da      	mvns	r2, r3
 8005c7a:	482b      	ldr	r0, [pc, #172]	@ (8005d28 <HAL_GPIO_DeInit+0x1a8>)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	089b      	lsrs	r3, r3, #2
 8005c80:	400a      	ands	r2, r1
 8005c82:	3302      	adds	r3, #2
 8005c84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	2103      	movs	r1, #3
 8005c92:	fa01 f303 	lsl.w	r3, r1, r3
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	08da      	lsrs	r2, r3, #3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3208      	adds	r2, #8
 8005ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	220f      	movs	r2, #15
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	08d2      	lsrs	r2, r2, #3
 8005cbc:	4019      	ands	r1, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3208      	adds	r2, #8
 8005cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	2103      	movs	r1, #3
 8005cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	401a      	ands	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	401a      	ands	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	2103      	movs	r1, #3
 8005cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfe:	43db      	mvns	r3, r3
 8005d00:	401a      	ands	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	fa22 f303 	lsr.w	r3, r2, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f47f af3b 	bne.w	8005b90 <HAL_GPIO_DeInit+0x10>
  }
}
 8005d1a:	bf00      	nop
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	48000400 	.word	0x48000400
 8005d30:	48000800 	.word	0x48000800
 8005d34:	48000c00 	.word	0x48000c00
 8005d38:	48001000 	.word	0x48001000
 8005d3c:	48001400 	.word	0x48001400
 8005d40:	40010400 	.word	0x40010400

08005d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	887b      	ldrh	r3, [r7, #2]
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
 8005d60:	e001      	b.n	8005d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d62:	2300      	movs	r3, #0
 8005d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	807b      	strh	r3, [r7, #2]
 8005d80:	4613      	mov	r3, r2
 8005d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d84:	787b      	ldrb	r3, [r7, #1]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d8a:	887a      	ldrh	r2, [r7, #2]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d90:	e002      	b.n	8005d98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d92:	887a      	ldrh	r2, [r7, #2]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005db6:	887a      	ldrh	r2, [r7, #2]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	041a      	lsls	r2, r3, #16
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	43d9      	mvns	r1, r3
 8005dc2:	887b      	ldrh	r3, [r7, #2]
 8005dc4:	400b      	ands	r3, r1
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	619a      	str	r2, [r3, #24]
}
 8005dcc:	bf00      	nop
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d141      	bne.n	8005e6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005de6:	4b4b      	ldr	r3, [pc, #300]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005df2:	d131      	bne.n	8005e58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005df4:	4b47      	ldr	r3, [pc, #284]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dfa:	4a46      	ldr	r2, [pc, #280]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e04:	4b43      	ldr	r3, [pc, #268]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e0c:	4a41      	ldr	r2, [pc, #260]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e14:	4b40      	ldr	r3, [pc, #256]	@ (8005f18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2232      	movs	r2, #50	@ 0x32
 8005e1a:	fb02 f303 	mul.w	r3, r2, r3
 8005e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8005f1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e20:	fba2 2303 	umull	r2, r3, r2, r3
 8005e24:	0c9b      	lsrs	r3, r3, #18
 8005e26:	3301      	adds	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e2a:	e002      	b.n	8005e32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e32:	4b38      	ldr	r3, [pc, #224]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e3e:	d102      	bne.n	8005e46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f2      	bne.n	8005e2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e46:	4b33      	ldr	r3, [pc, #204]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e52:	d158      	bne.n	8005f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e057      	b.n	8005f08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e58:	4b2e      	ldr	r3, [pc, #184]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005e68:	e04d      	b.n	8005f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e70:	d141      	bne.n	8005ef6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e72:	4b28      	ldr	r3, [pc, #160]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e7e:	d131      	bne.n	8005ee4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e80:	4b24      	ldr	r3, [pc, #144]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e86:	4a23      	ldr	r2, [pc, #140]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e90:	4b20      	ldr	r3, [pc, #128]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e98:	4a1e      	ldr	r2, [pc, #120]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2232      	movs	r2, #50	@ 0x32
 8005ea6:	fb02 f303 	mul.w	r3, r2, r3
 8005eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8005f1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	0c9b      	lsrs	r3, r3, #18
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005eb6:	e002      	b.n	8005ebe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ebe:	4b15      	ldr	r3, [pc, #84]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eca:	d102      	bne.n	8005ed2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f2      	bne.n	8005eb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ed2:	4b10      	ldr	r3, [pc, #64]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ede:	d112      	bne.n	8005f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e011      	b.n	8005f08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eea:	4a0a      	ldr	r2, [pc, #40]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ef0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ef4:	e007      	b.n	8005f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ef6:	4b07      	ldr	r3, [pc, #28]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005efe:	4a05      	ldr	r2, [pc, #20]	@ (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	40007000 	.word	0x40007000
 8005f18:	20000008 	.word	0x20000008
 8005f1c:	431bde83 	.word	0x431bde83

08005f20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005f24:	4b05      	ldr	r3, [pc, #20]	@ (8005f3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	4a04      	ldr	r2, [pc, #16]	@ (8005f3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f2e:	6093      	str	r3, [r2, #8]
}
 8005f30:	bf00      	nop
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40007000 	.word	0x40007000

08005f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e2fe      	b.n	8006550 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d075      	beq.n	800604a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f5e:	4b97      	ldr	r3, [pc, #604]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 030c 	and.w	r3, r3, #12
 8005f66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f68:	4b94      	ldr	r3, [pc, #592]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0303 	and.w	r3, r3, #3
 8005f70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	2b0c      	cmp	r3, #12
 8005f76:	d102      	bne.n	8005f7e <HAL_RCC_OscConfig+0x3e>
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d002      	beq.n	8005f84 <HAL_RCC_OscConfig+0x44>
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d10b      	bne.n	8005f9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f84:	4b8d      	ldr	r3, [pc, #564]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d05b      	beq.n	8006048 <HAL_RCC_OscConfig+0x108>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d157      	bne.n	8006048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e2d9      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fa4:	d106      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x74>
 8005fa6:	4b85      	ldr	r3, [pc, #532]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a84      	ldr	r2, [pc, #528]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8005fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e01d      	b.n	8005ff0 <HAL_RCC_OscConfig+0xb0>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fbc:	d10c      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x98>
 8005fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8005fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	4b7c      	ldr	r3, [pc, #496]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a7b      	ldr	r2, [pc, #492]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8005fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	e00b      	b.n	8005ff0 <HAL_RCC_OscConfig+0xb0>
 8005fd8:	4b78      	ldr	r3, [pc, #480]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a77      	ldr	r2, [pc, #476]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	4b75      	ldr	r3, [pc, #468]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a74      	ldr	r2, [pc, #464]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8005fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d013      	beq.n	8006020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff8:	f7fe fafe 	bl	80045f8 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006000:	f7fe fafa 	bl	80045f8 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b64      	cmp	r3, #100	@ 0x64
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e29e      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006012:	4b6a      	ldr	r3, [pc, #424]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0xc0>
 800601e:	e014      	b.n	800604a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fe faea 	bl	80045f8 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006028:	f7fe fae6 	bl	80045f8 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	@ 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e28a      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800603a:	4b60      	ldr	r3, [pc, #384]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f0      	bne.n	8006028 <HAL_RCC_OscConfig+0xe8>
 8006046:	e000      	b.n	800604a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d075      	beq.n	8006142 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006056:	4b59      	ldr	r3, [pc, #356]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 030c 	and.w	r3, r3, #12
 800605e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006060:	4b56      	ldr	r3, [pc, #344]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b0c      	cmp	r3, #12
 800606e:	d102      	bne.n	8006076 <HAL_RCC_OscConfig+0x136>
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d002      	beq.n	800607c <HAL_RCC_OscConfig+0x13c>
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b04      	cmp	r3, #4
 800607a:	d11f      	bne.n	80060bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800607c:	4b4f      	ldr	r3, [pc, #316]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <HAL_RCC_OscConfig+0x154>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e25d      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006094:	4b49      	ldr	r3, [pc, #292]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	061b      	lsls	r3, r3, #24
 80060a2:	4946      	ldr	r1, [pc, #280]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80060a8:	4b45      	ldr	r3, [pc, #276]	@ (80061c0 <HAL_RCC_OscConfig+0x280>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fe fa57 	bl	8004560 <HAL_InitTick>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d043      	beq.n	8006140 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e249      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d023      	beq.n	800610c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060c4:	4b3d      	ldr	r3, [pc, #244]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a3c      	ldr	r2, [pc, #240]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 80060ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fe fa92 	bl	80045f8 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060d8:	f7fe fa8e 	bl	80045f8 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e232      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060ea:	4b34      	ldr	r3, [pc, #208]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0f0      	beq.n	80060d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f6:	4b31      	ldr	r3, [pc, #196]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	061b      	lsls	r3, r3, #24
 8006104:	492d      	ldr	r1, [pc, #180]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8006106:	4313      	orrs	r3, r2
 8006108:	604b      	str	r3, [r1, #4]
 800610a:	e01a      	b.n	8006142 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800610c:	4b2b      	ldr	r3, [pc, #172]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a2a      	ldr	r2, [pc, #168]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8006112:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006118:	f7fe fa6e 	bl	80045f8 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006120:	f7fe fa6a 	bl	80045f8 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e20e      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006132:	4b22      	ldr	r3, [pc, #136]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1f0      	bne.n	8006120 <HAL_RCC_OscConfig+0x1e0>
 800613e:	e000      	b.n	8006142 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006140:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d041      	beq.n	80061d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d01c      	beq.n	8006190 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006156:	4b19      	ldr	r3, [pc, #100]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8006158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800615c:	4a17      	ldr	r2, [pc, #92]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006166:	f7fe fa47 	bl	80045f8 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800616c:	e008      	b.n	8006180 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800616e:	f7fe fa43 	bl	80045f8 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e1e7      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006180:	4b0e      	ldr	r3, [pc, #56]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8006182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0ef      	beq.n	800616e <HAL_RCC_OscConfig+0x22e>
 800618e:	e020      	b.n	80061d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006190:	4b0a      	ldr	r3, [pc, #40]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8006192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006196:	4a09      	ldr	r2, [pc, #36]	@ (80061bc <HAL_RCC_OscConfig+0x27c>)
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a0:	f7fe fa2a 	bl	80045f8 <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061a6:	e00d      	b.n	80061c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a8:	f7fe fa26 	bl	80045f8 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d906      	bls.n	80061c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e1ca      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
 80061ba:	bf00      	nop
 80061bc:	40021000 	.word	0x40021000
 80061c0:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061c4:	4b8c      	ldr	r3, [pc, #560]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 80061c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1ea      	bne.n	80061a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80a6 	beq.w	800632c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061e0:	2300      	movs	r3, #0
 80061e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80061e4:	4b84      	ldr	r3, [pc, #528]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 80061e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_RCC_OscConfig+0x2b4>
 80061f0:	2301      	movs	r3, #1
 80061f2:	e000      	b.n	80061f6 <HAL_RCC_OscConfig+0x2b6>
 80061f4:	2300      	movs	r3, #0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00d      	beq.n	8006216 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061fa:	4b7f      	ldr	r3, [pc, #508]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 80061fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061fe:	4a7e      	ldr	r2, [pc, #504]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 8006200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006204:	6593      	str	r3, [r2, #88]	@ 0x58
 8006206:	4b7c      	ldr	r3, [pc, #496]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 8006208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800620a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006212:	2301      	movs	r3, #1
 8006214:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006216:	4b79      	ldr	r3, [pc, #484]	@ (80063fc <HAL_RCC_OscConfig+0x4bc>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800621e:	2b00      	cmp	r3, #0
 8006220:	d118      	bne.n	8006254 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006222:	4b76      	ldr	r3, [pc, #472]	@ (80063fc <HAL_RCC_OscConfig+0x4bc>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a75      	ldr	r2, [pc, #468]	@ (80063fc <HAL_RCC_OscConfig+0x4bc>)
 8006228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800622c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800622e:	f7fe f9e3 	bl	80045f8 <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006236:	f7fe f9df 	bl	80045f8 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e183      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006248:	4b6c      	ldr	r3, [pc, #432]	@ (80063fc <HAL_RCC_OscConfig+0x4bc>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0f0      	beq.n	8006236 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d108      	bne.n	800626e <HAL_RCC_OscConfig+0x32e>
 800625c:	4b66      	ldr	r3, [pc, #408]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006262:	4a65      	ldr	r2, [pc, #404]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 8006264:	f043 0301 	orr.w	r3, r3, #1
 8006268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800626c:	e024      	b.n	80062b8 <HAL_RCC_OscConfig+0x378>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	2b05      	cmp	r3, #5
 8006274:	d110      	bne.n	8006298 <HAL_RCC_OscConfig+0x358>
 8006276:	4b60      	ldr	r3, [pc, #384]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 8006278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627c:	4a5e      	ldr	r2, [pc, #376]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 800627e:	f043 0304 	orr.w	r3, r3, #4
 8006282:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006286:	4b5c      	ldr	r3, [pc, #368]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 8006288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800628c:	4a5a      	ldr	r2, [pc, #360]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 800628e:	f043 0301 	orr.w	r3, r3, #1
 8006292:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006296:	e00f      	b.n	80062b8 <HAL_RCC_OscConfig+0x378>
 8006298:	4b57      	ldr	r3, [pc, #348]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629e:	4a56      	ldr	r2, [pc, #344]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 80062a0:	f023 0301 	bic.w	r3, r3, #1
 80062a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062a8:	4b53      	ldr	r3, [pc, #332]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 80062aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ae:	4a52      	ldr	r2, [pc, #328]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 80062b0:	f023 0304 	bic.w	r3, r3, #4
 80062b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d016      	beq.n	80062ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c0:	f7fe f99a 	bl	80045f8 <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062c6:	e00a      	b.n	80062de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c8:	f7fe f996 	bl	80045f8 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e138      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062de:	4b46      	ldr	r3, [pc, #280]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 80062e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0ed      	beq.n	80062c8 <HAL_RCC_OscConfig+0x388>
 80062ec:	e015      	b.n	800631a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ee:	f7fe f983 	bl	80045f8 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062f4:	e00a      	b.n	800630c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f6:	f7fe f97f 	bl	80045f8 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006304:	4293      	cmp	r3, r2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e121      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800630c:	4b3a      	ldr	r3, [pc, #232]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 800630e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1ed      	bne.n	80062f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800631a:	7ffb      	ldrb	r3, [r7, #31]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d105      	bne.n	800632c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006320:	4b35      	ldr	r3, [pc, #212]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 8006322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006324:	4a34      	ldr	r2, [pc, #208]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 8006326:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800632a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d03c      	beq.n	80063b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d01c      	beq.n	800637a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006340:	4b2d      	ldr	r3, [pc, #180]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 8006342:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006346:	4a2c      	ldr	r2, [pc, #176]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 8006348:	f043 0301 	orr.w	r3, r3, #1
 800634c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006350:	f7fe f952 	bl	80045f8 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006358:	f7fe f94e 	bl	80045f8 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e0f2      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800636a:	4b23      	ldr	r3, [pc, #140]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 800636c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0ef      	beq.n	8006358 <HAL_RCC_OscConfig+0x418>
 8006378:	e01b      	b.n	80063b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800637a:	4b1f      	ldr	r3, [pc, #124]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 800637c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006380:	4a1d      	ldr	r2, [pc, #116]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 8006382:	f023 0301 	bic.w	r3, r3, #1
 8006386:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800638a:	f7fe f935 	bl	80045f8 <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006392:	f7fe f931 	bl	80045f8 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e0d5      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063a4:	4b14      	ldr	r3, [pc, #80]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 80063a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1ef      	bne.n	8006392 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 80c9 	beq.w	800654e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063bc:	4b0e      	ldr	r3, [pc, #56]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f003 030c 	and.w	r3, r3, #12
 80063c4:	2b0c      	cmp	r3, #12
 80063c6:	f000 8083 	beq.w	80064d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d15e      	bne.n	8006490 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d2:	4b09      	ldr	r3, [pc, #36]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a08      	ldr	r2, [pc, #32]	@ (80063f8 <HAL_RCC_OscConfig+0x4b8>)
 80063d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063de:	f7fe f90b 	bl	80045f8 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063e4:	e00c      	b.n	8006400 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e6:	f7fe f907 	bl	80045f8 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d905      	bls.n	8006400 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e0ab      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
 80063f8:	40021000 	.word	0x40021000
 80063fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006400:	4b55      	ldr	r3, [pc, #340]	@ (8006558 <HAL_RCC_OscConfig+0x618>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1ec      	bne.n	80063e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800640c:	4b52      	ldr	r3, [pc, #328]	@ (8006558 <HAL_RCC_OscConfig+0x618>)
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	4b52      	ldr	r3, [pc, #328]	@ (800655c <HAL_RCC_OscConfig+0x61c>)
 8006412:	4013      	ands	r3, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6a11      	ldr	r1, [r2, #32]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800641c:	3a01      	subs	r2, #1
 800641e:	0112      	lsls	r2, r2, #4
 8006420:	4311      	orrs	r1, r2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006426:	0212      	lsls	r2, r2, #8
 8006428:	4311      	orrs	r1, r2
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800642e:	0852      	lsrs	r2, r2, #1
 8006430:	3a01      	subs	r2, #1
 8006432:	0552      	lsls	r2, r2, #21
 8006434:	4311      	orrs	r1, r2
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800643a:	0852      	lsrs	r2, r2, #1
 800643c:	3a01      	subs	r2, #1
 800643e:	0652      	lsls	r2, r2, #25
 8006440:	4311      	orrs	r1, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006446:	06d2      	lsls	r2, r2, #27
 8006448:	430a      	orrs	r2, r1
 800644a:	4943      	ldr	r1, [pc, #268]	@ (8006558 <HAL_RCC_OscConfig+0x618>)
 800644c:	4313      	orrs	r3, r2
 800644e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006450:	4b41      	ldr	r3, [pc, #260]	@ (8006558 <HAL_RCC_OscConfig+0x618>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a40      	ldr	r2, [pc, #256]	@ (8006558 <HAL_RCC_OscConfig+0x618>)
 8006456:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800645a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800645c:	4b3e      	ldr	r3, [pc, #248]	@ (8006558 <HAL_RCC_OscConfig+0x618>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	4a3d      	ldr	r2, [pc, #244]	@ (8006558 <HAL_RCC_OscConfig+0x618>)
 8006462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006466:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006468:	f7fe f8c6 	bl	80045f8 <HAL_GetTick>
 800646c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006470:	f7fe f8c2 	bl	80045f8 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e066      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006482:	4b35      	ldr	r3, [pc, #212]	@ (8006558 <HAL_RCC_OscConfig+0x618>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0f0      	beq.n	8006470 <HAL_RCC_OscConfig+0x530>
 800648e:	e05e      	b.n	800654e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006490:	4b31      	ldr	r3, [pc, #196]	@ (8006558 <HAL_RCC_OscConfig+0x618>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a30      	ldr	r2, [pc, #192]	@ (8006558 <HAL_RCC_OscConfig+0x618>)
 8006496:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800649a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649c:	f7fe f8ac 	bl	80045f8 <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a4:	f7fe f8a8 	bl	80045f8 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e04c      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064b6:	4b28      	ldr	r3, [pc, #160]	@ (8006558 <HAL_RCC_OscConfig+0x618>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f0      	bne.n	80064a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80064c2:	4b25      	ldr	r3, [pc, #148]	@ (8006558 <HAL_RCC_OscConfig+0x618>)
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	4924      	ldr	r1, [pc, #144]	@ (8006558 <HAL_RCC_OscConfig+0x618>)
 80064c8:	4b25      	ldr	r3, [pc, #148]	@ (8006560 <HAL_RCC_OscConfig+0x620>)
 80064ca:	4013      	ands	r3, r2
 80064cc:	60cb      	str	r3, [r1, #12]
 80064ce:	e03e      	b.n	800654e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e039      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80064dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006558 <HAL_RCC_OscConfig+0x618>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f003 0203 	and.w	r2, r3, #3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d12c      	bne.n	800654a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fa:	3b01      	subs	r3, #1
 80064fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064fe:	429a      	cmp	r2, r3
 8006500:	d123      	bne.n	800654a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800650e:	429a      	cmp	r2, r3
 8006510:	d11b      	bne.n	800654a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800651e:	429a      	cmp	r2, r3
 8006520:	d113      	bne.n	800654a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	3b01      	subs	r3, #1
 8006530:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006532:	429a      	cmp	r2, r3
 8006534:	d109      	bne.n	800654a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006540:	085b      	lsrs	r3, r3, #1
 8006542:	3b01      	subs	r3, #1
 8006544:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006546:	429a      	cmp	r2, r3
 8006548:	d001      	beq.n	800654e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3720      	adds	r7, #32
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40021000 	.word	0x40021000
 800655c:	019f800c 	.word	0x019f800c
 8006560:	feeefffc 	.word	0xfeeefffc

08006564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e11e      	b.n	80067ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800657c:	4b91      	ldr	r3, [pc, #580]	@ (80067c4 <HAL_RCC_ClockConfig+0x260>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d910      	bls.n	80065ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658a:	4b8e      	ldr	r3, [pc, #568]	@ (80067c4 <HAL_RCC_ClockConfig+0x260>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f023 020f 	bic.w	r2, r3, #15
 8006592:	498c      	ldr	r1, [pc, #560]	@ (80067c4 <HAL_RCC_ClockConfig+0x260>)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	4313      	orrs	r3, r2
 8006598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800659a:	4b8a      	ldr	r3, [pc, #552]	@ (80067c4 <HAL_RCC_ClockConfig+0x260>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d001      	beq.n	80065ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e106      	b.n	80067ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d073      	beq.n	80066a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d129      	bne.n	8006614 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065c0:	4b81      	ldr	r3, [pc, #516]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e0f4      	b.n	80067ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80065d0:	f000 f99e 	bl	8006910 <RCC_GetSysClockFreqFromPLLSource>
 80065d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	4a7c      	ldr	r2, [pc, #496]	@ (80067cc <HAL_RCC_ClockConfig+0x268>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d93f      	bls.n	800665e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80065de:	4b7a      	ldr	r3, [pc, #488]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d009      	beq.n	80065fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d033      	beq.n	800665e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d12f      	bne.n	800665e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80065fe:	4b72      	ldr	r3, [pc, #456]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006606:	4a70      	ldr	r2, [pc, #448]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 8006608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800660c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800660e:	2380      	movs	r3, #128	@ 0x80
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	e024      	b.n	800665e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b02      	cmp	r3, #2
 800661a:	d107      	bne.n	800662c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800661c:	4b6a      	ldr	r3, [pc, #424]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d109      	bne.n	800663c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e0c6      	b.n	80067ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800662c:	4b66      	ldr	r3, [pc, #408]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e0be      	b.n	80067ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800663c:	f000 f8ce 	bl	80067dc <HAL_RCC_GetSysClockFreq>
 8006640:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	4a61      	ldr	r2, [pc, #388]	@ (80067cc <HAL_RCC_ClockConfig+0x268>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d909      	bls.n	800665e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800664a:	4b5f      	ldr	r3, [pc, #380]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006652:	4a5d      	ldr	r2, [pc, #372]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 8006654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006658:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800665a:	2380      	movs	r3, #128	@ 0x80
 800665c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800665e:	4b5a      	ldr	r3, [pc, #360]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f023 0203 	bic.w	r2, r3, #3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	4957      	ldr	r1, [pc, #348]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 800666c:	4313      	orrs	r3, r2
 800666e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006670:	f7fd ffc2 	bl	80045f8 <HAL_GetTick>
 8006674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006676:	e00a      	b.n	800668e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006678:	f7fd ffbe 	bl	80045f8 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006686:	4293      	cmp	r3, r2
 8006688:	d901      	bls.n	800668e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e095      	b.n	80067ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800668e:	4b4e      	ldr	r3, [pc, #312]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 020c 	and.w	r2, r3, #12
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	429a      	cmp	r2, r3
 800669e:	d1eb      	bne.n	8006678 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d023      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066b8:	4b43      	ldr	r3, [pc, #268]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	4a42      	ldr	r2, [pc, #264]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 80066be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80066c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d007      	beq.n	80066e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80066d0:	4b3d      	ldr	r3, [pc, #244]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80066d8:	4a3b      	ldr	r2, [pc, #236]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 80066da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80066de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066e0:	4b39      	ldr	r3, [pc, #228]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	4936      	ldr	r1, [pc, #216]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	608b      	str	r3, [r1, #8]
 80066f2:	e008      	b.n	8006706 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2b80      	cmp	r3, #128	@ 0x80
 80066f8:	d105      	bne.n	8006706 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80066fa:	4b33      	ldr	r3, [pc, #204]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	4a32      	ldr	r2, [pc, #200]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 8006700:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006704:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006706:	4b2f      	ldr	r3, [pc, #188]	@ (80067c4 <HAL_RCC_ClockConfig+0x260>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d21d      	bcs.n	8006750 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006714:	4b2b      	ldr	r3, [pc, #172]	@ (80067c4 <HAL_RCC_ClockConfig+0x260>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f023 020f 	bic.w	r2, r3, #15
 800671c:	4929      	ldr	r1, [pc, #164]	@ (80067c4 <HAL_RCC_ClockConfig+0x260>)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	4313      	orrs	r3, r2
 8006722:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006724:	f7fd ff68 	bl	80045f8 <HAL_GetTick>
 8006728:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800672a:	e00a      	b.n	8006742 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800672c:	f7fd ff64 	bl	80045f8 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800673a:	4293      	cmp	r3, r2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e03b      	b.n	80067ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006742:	4b20      	ldr	r3, [pc, #128]	@ (80067c4 <HAL_RCC_ClockConfig+0x260>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	429a      	cmp	r2, r3
 800674e:	d1ed      	bne.n	800672c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b00      	cmp	r3, #0
 800675a:	d008      	beq.n	800676e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800675c:	4b1a      	ldr	r3, [pc, #104]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	4917      	ldr	r1, [pc, #92]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 800676a:	4313      	orrs	r3, r2
 800676c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0308 	and.w	r3, r3, #8
 8006776:	2b00      	cmp	r3, #0
 8006778:	d009      	beq.n	800678e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800677a:	4b13      	ldr	r3, [pc, #76]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	490f      	ldr	r1, [pc, #60]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 800678a:	4313      	orrs	r3, r2
 800678c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800678e:	f000 f825 	bl	80067dc <HAL_RCC_GetSysClockFreq>
 8006792:	4602      	mov	r2, r0
 8006794:	4b0c      	ldr	r3, [pc, #48]	@ (80067c8 <HAL_RCC_ClockConfig+0x264>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	091b      	lsrs	r3, r3, #4
 800679a:	f003 030f 	and.w	r3, r3, #15
 800679e:	490c      	ldr	r1, [pc, #48]	@ (80067d0 <HAL_RCC_ClockConfig+0x26c>)
 80067a0:	5ccb      	ldrb	r3, [r1, r3]
 80067a2:	f003 031f 	and.w	r3, r3, #31
 80067a6:	fa22 f303 	lsr.w	r3, r2, r3
 80067aa:	4a0a      	ldr	r2, [pc, #40]	@ (80067d4 <HAL_RCC_ClockConfig+0x270>)
 80067ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80067ae:	4b0a      	ldr	r3, [pc, #40]	@ (80067d8 <HAL_RCC_ClockConfig+0x274>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fd fed4 	bl	8004560 <HAL_InitTick>
 80067b8:	4603      	mov	r3, r0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	40022000 	.word	0x40022000
 80067c8:	40021000 	.word	0x40021000
 80067cc:	04c4b400 	.word	0x04c4b400
 80067d0:	0800aa6c 	.word	0x0800aa6c
 80067d4:	20000008 	.word	0x20000008
 80067d8:	2000000c 	.word	0x2000000c

080067dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80067e2:	4b2c      	ldr	r3, [pc, #176]	@ (8006894 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 030c 	and.w	r3, r3, #12
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	d102      	bne.n	80067f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80067ee:	4b2a      	ldr	r3, [pc, #168]	@ (8006898 <HAL_RCC_GetSysClockFreq+0xbc>)
 80067f0:	613b      	str	r3, [r7, #16]
 80067f2:	e047      	b.n	8006884 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80067f4:	4b27      	ldr	r3, [pc, #156]	@ (8006894 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f003 030c 	and.w	r3, r3, #12
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d102      	bne.n	8006806 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006800:	4b26      	ldr	r3, [pc, #152]	@ (800689c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	e03e      	b.n	8006884 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006806:	4b23      	ldr	r3, [pc, #140]	@ (8006894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 030c 	and.w	r3, r3, #12
 800680e:	2b0c      	cmp	r3, #12
 8006810:	d136      	bne.n	8006880 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006812:	4b20      	ldr	r3, [pc, #128]	@ (8006894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800681c:	4b1d      	ldr	r3, [pc, #116]	@ (8006894 <HAL_RCC_GetSysClockFreq+0xb8>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	3301      	adds	r3, #1
 8006828:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d10c      	bne.n	800684a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006830:	4a1a      	ldr	r2, [pc, #104]	@ (800689c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	fbb2 f3f3 	udiv	r3, r2, r3
 8006838:	4a16      	ldr	r2, [pc, #88]	@ (8006894 <HAL_RCC_GetSysClockFreq+0xb8>)
 800683a:	68d2      	ldr	r2, [r2, #12]
 800683c:	0a12      	lsrs	r2, r2, #8
 800683e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006842:	fb02 f303 	mul.w	r3, r2, r3
 8006846:	617b      	str	r3, [r7, #20]
      break;
 8006848:	e00c      	b.n	8006864 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800684a:	4a13      	ldr	r2, [pc, #76]	@ (8006898 <HAL_RCC_GetSysClockFreq+0xbc>)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006852:	4a10      	ldr	r2, [pc, #64]	@ (8006894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006854:	68d2      	ldr	r2, [r2, #12]
 8006856:	0a12      	lsrs	r2, r2, #8
 8006858:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800685c:	fb02 f303 	mul.w	r3, r2, r3
 8006860:	617b      	str	r3, [r7, #20]
      break;
 8006862:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006864:	4b0b      	ldr	r3, [pc, #44]	@ (8006894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	0e5b      	lsrs	r3, r3, #25
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	3301      	adds	r3, #1
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	fbb2 f3f3 	udiv	r3, r2, r3
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	e001      	b.n	8006884 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006884:	693b      	ldr	r3, [r7, #16]
}
 8006886:	4618      	mov	r0, r3
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40021000 	.word	0x40021000
 8006898:	00f42400 	.word	0x00f42400
 800689c:	007a1200 	.word	0x007a1200

080068a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068a4:	4b03      	ldr	r3, [pc, #12]	@ (80068b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80068a6:	681b      	ldr	r3, [r3, #0]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	20000008 	.word	0x20000008

080068b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80068bc:	f7ff fff0 	bl	80068a0 <HAL_RCC_GetHCLKFreq>
 80068c0:	4602      	mov	r2, r0
 80068c2:	4b06      	ldr	r3, [pc, #24]	@ (80068dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	0a1b      	lsrs	r3, r3, #8
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	4904      	ldr	r1, [pc, #16]	@ (80068e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068ce:	5ccb      	ldrb	r3, [r1, r3]
 80068d0:	f003 031f 	and.w	r3, r3, #31
 80068d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068d8:	4618      	mov	r0, r3
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	40021000 	.word	0x40021000
 80068e0:	0800aa7c 	.word	0x0800aa7c

080068e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80068e8:	f7ff ffda 	bl	80068a0 <HAL_RCC_GetHCLKFreq>
 80068ec:	4602      	mov	r2, r0
 80068ee:	4b06      	ldr	r3, [pc, #24]	@ (8006908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	0adb      	lsrs	r3, r3, #11
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	4904      	ldr	r1, [pc, #16]	@ (800690c <HAL_RCC_GetPCLK2Freq+0x28>)
 80068fa:	5ccb      	ldrb	r3, [r1, r3]
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006904:	4618      	mov	r0, r3
 8006906:	bd80      	pop	{r7, pc}
 8006908:	40021000 	.word	0x40021000
 800690c:	0800aa7c 	.word	0x0800aa7c

08006910 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006916:	4b1e      	ldr	r3, [pc, #120]	@ (8006990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006920:	4b1b      	ldr	r3, [pc, #108]	@ (8006990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	091b      	lsrs	r3, r3, #4
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	3301      	adds	r3, #1
 800692c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b03      	cmp	r3, #3
 8006932:	d10c      	bne.n	800694e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006934:	4a17      	ldr	r2, [pc, #92]	@ (8006994 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	fbb2 f3f3 	udiv	r3, r2, r3
 800693c:	4a14      	ldr	r2, [pc, #80]	@ (8006990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800693e:	68d2      	ldr	r2, [r2, #12]
 8006940:	0a12      	lsrs	r2, r2, #8
 8006942:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	617b      	str	r3, [r7, #20]
    break;
 800694c:	e00c      	b.n	8006968 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800694e:	4a12      	ldr	r2, [pc, #72]	@ (8006998 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	fbb2 f3f3 	udiv	r3, r2, r3
 8006956:	4a0e      	ldr	r2, [pc, #56]	@ (8006990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006958:	68d2      	ldr	r2, [r2, #12]
 800695a:	0a12      	lsrs	r2, r2, #8
 800695c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006960:	fb02 f303 	mul.w	r3, r2, r3
 8006964:	617b      	str	r3, [r7, #20]
    break;
 8006966:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006968:	4b09      	ldr	r3, [pc, #36]	@ (8006990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	0e5b      	lsrs	r3, r3, #25
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	3301      	adds	r3, #1
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006980:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006982:	687b      	ldr	r3, [r7, #4]
}
 8006984:	4618      	mov	r0, r3
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	40021000 	.word	0x40021000
 8006994:	007a1200 	.word	0x007a1200
 8006998:	00f42400 	.word	0x00f42400

0800699c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069a4:	2300      	movs	r3, #0
 80069a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069a8:	2300      	movs	r3, #0
 80069aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 8098 	beq.w	8006aea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069ba:	2300      	movs	r3, #0
 80069bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069be:	4b43      	ldr	r3, [pc, #268]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10d      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069ca:	4b40      	ldr	r3, [pc, #256]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ce:	4a3f      	ldr	r2, [pc, #252]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80069d6:	4b3d      	ldr	r3, [pc, #244]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069de:	60bb      	str	r3, [r7, #8]
 80069e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069e2:	2301      	movs	r3, #1
 80069e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069e6:	4b3a      	ldr	r3, [pc, #232]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a39      	ldr	r2, [pc, #228]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069f2:	f7fd fe01 	bl	80045f8 <HAL_GetTick>
 80069f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069f8:	e009      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069fa:	f7fd fdfd 	bl	80045f8 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d902      	bls.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	74fb      	strb	r3, [r7, #19]
        break;
 8006a0c:	e005      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a0e:	4b30      	ldr	r3, [pc, #192]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0ef      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a1a:	7cfb      	ldrb	r3, [r7, #19]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d159      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a20:	4b2a      	ldr	r3, [pc, #168]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d01e      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d019      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a3c:	4b23      	ldr	r3, [pc, #140]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a48:	4b20      	ldr	r3, [pc, #128]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a58:	4b1c      	ldr	r3, [pc, #112]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a68:	4a18      	ldr	r2, [pc, #96]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d016      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7a:	f7fd fdbd 	bl	80045f8 <HAL_GetTick>
 8006a7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a80:	e00b      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a82:	f7fd fdb9 	bl	80045f8 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d902      	bls.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	74fb      	strb	r3, [r7, #19]
            break;
 8006a98:	e006      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0ec      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006aa8:	7cfb      	ldrb	r3, [r7, #19]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10b      	bne.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aae:	4b07      	ldr	r3, [pc, #28]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ab4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006abc:	4903      	ldr	r1, [pc, #12]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ac6:	7cfb      	ldrb	r3, [r7, #19]
 8006ac8:	74bb      	strb	r3, [r7, #18]
 8006aca:	e005      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad4:	7cfb      	ldrb	r3, [r7, #19]
 8006ad6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ad8:	7c7b      	ldrb	r3, [r7, #17]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d105      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ade:	4ba7      	ldr	r3, [pc, #668]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae2:	4aa6      	ldr	r2, [pc, #664]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ae8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00a      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006af6:	4ba1      	ldr	r3, [pc, #644]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006afc:	f023 0203 	bic.w	r2, r3, #3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	499d      	ldr	r1, [pc, #628]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00a      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b18:	4b98      	ldr	r3, [pc, #608]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1e:	f023 020c 	bic.w	r2, r3, #12
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	4995      	ldr	r1, [pc, #596]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b3a:	4b90      	ldr	r3, [pc, #576]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	498c      	ldr	r1, [pc, #560]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0308 	and.w	r3, r3, #8
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b5c:	4b87      	ldr	r3, [pc, #540]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	4984      	ldr	r1, [pc, #528]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0310 	and.w	r3, r3, #16
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b7e:	4b7f      	ldr	r3, [pc, #508]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	497b      	ldr	r1, [pc, #492]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0320 	and.w	r3, r3, #32
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00a      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ba0:	4b76      	ldr	r3, [pc, #472]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	4973      	ldr	r1, [pc, #460]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bc2:	4b6e      	ldr	r3, [pc, #440]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	496a      	ldr	r1, [pc, #424]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006be4:	4b65      	ldr	r3, [pc, #404]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	4962      	ldr	r1, [pc, #392]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c06:	4b5d      	ldr	r3, [pc, #372]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c14:	4959      	ldr	r1, [pc, #356]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c28:	4b54      	ldr	r3, [pc, #336]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c2e:	f023 0203 	bic.w	r2, r3, #3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c36:	4951      	ldr	r1, [pc, #324]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c58:	4948      	ldr	r1, [pc, #288]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d015      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c6c:	4b43      	ldr	r3, [pc, #268]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c7a:	4940      	ldr	r1, [pc, #256]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c8a:	d105      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	4a3a      	ldr	r2, [pc, #232]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c96:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d015      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ca4:	4b35      	ldr	r3, [pc, #212]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006caa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb2:	4932      	ldr	r1, [pc, #200]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cc2:	d105      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4a2c      	ldr	r2, [pc, #176]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d015      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006cdc:	4b27      	ldr	r3, [pc, #156]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cea:	4924      	ldr	r1, [pc, #144]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cfa:	d105      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	4a1e      	ldr	r2, [pc, #120]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d015      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d14:	4b19      	ldr	r3, [pc, #100]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d22:	4916      	ldr	r1, [pc, #88]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d32:	d105      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d34:	4b11      	ldr	r3, [pc, #68]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	4a10      	ldr	r2, [pc, #64]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d019      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5a:	4908      	ldr	r1, [pc, #32]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d6a:	d109      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d6c:	4b03      	ldr	r3, [pc, #12]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	4a02      	ldr	r2, [pc, #8]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d76:	60d3      	str	r3, [r2, #12]
 8006d78:	e002      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006d7a:	bf00      	nop
 8006d7c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d015      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006d8c:	4b29      	ldr	r3, [pc, #164]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d9a:	4926      	ldr	r1, [pc, #152]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006daa:	d105      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006dac:	4b21      	ldr	r3, [pc, #132]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	4a20      	ldr	r2, [pc, #128]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006db6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d015      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dd2:	4918      	ldr	r1, [pc, #96]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006de2:	d105      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006de4:	4b13      	ldr	r3, [pc, #76]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	4a12      	ldr	r2, [pc, #72]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d015      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e0a:	490a      	ldr	r1, [pc, #40]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e1a:	d105      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e1c:	4b05      	ldr	r3, [pc, #20]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	4a04      	ldr	r2, [pc, #16]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006e28:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	40021000 	.word	0x40021000

08006e38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e09d      	b.n	8006f86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d108      	bne.n	8006e64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e5a:	d009      	beq.n	8006e70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	61da      	str	r2, [r3, #28]
 8006e62:	e005      	b.n	8006e70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fb fc8e 	bl	80027ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ea6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006eb0:	d902      	bls.n	8006eb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	e002      	b.n	8006ebe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ebc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006ec6:	d007      	beq.n	8006ed8 <HAL_SPI_Init+0xa0>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ed0:	d002      	beq.n	8006ed8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	431a      	orrs	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f10:	431a      	orrs	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f1a:	ea42 0103 	orr.w	r1, r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f22:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	0c1b      	lsrs	r3, r3, #16
 8006f34:	f003 0204 	and.w	r2, r3, #4
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3c:	f003 0310 	and.w	r3, r3, #16
 8006f40:	431a      	orrs	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006f54:	ea42 0103 	orr.w	r1, r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69da      	ldr	r2, [r3, #28]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b082      	sub	sp, #8
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e01a      	b.n	8006fd6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fb6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7fb fc39 	bl	8002830 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b08a      	sub	sp, #40	@ 0x28
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	607a      	str	r2, [r7, #4]
 8006fea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006fec:	2301      	movs	r3, #1
 8006fee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ff0:	f7fd fb02 	bl	80045f8 <HAL_GetTick>
 8006ff4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ffc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007004:	887b      	ldrh	r3, [r7, #2]
 8007006:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007008:	887b      	ldrh	r3, [r7, #2]
 800700a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800700c:	7ffb      	ldrb	r3, [r7, #31]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d00c      	beq.n	800702c <HAL_SPI_TransmitReceive+0x4e>
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007018:	d106      	bne.n	8007028 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d102      	bne.n	8007028 <HAL_SPI_TransmitReceive+0x4a>
 8007022:	7ffb      	ldrb	r3, [r7, #31]
 8007024:	2b04      	cmp	r3, #4
 8007026:	d001      	beq.n	800702c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007028:	2302      	movs	r3, #2
 800702a:	e1f3      	b.n	8007414 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <HAL_SPI_TransmitReceive+0x60>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <HAL_SPI_TransmitReceive+0x60>
 8007038:	887b      	ldrh	r3, [r7, #2]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e1e8      	b.n	8007414 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_SPI_TransmitReceive+0x72>
 800704c:	2302      	movs	r3, #2
 800704e:	e1e1      	b.n	8007414 <HAL_SPI_TransmitReceive+0x436>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b04      	cmp	r3, #4
 8007062:	d003      	beq.n	800706c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2205      	movs	r2, #5
 8007068:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	887a      	ldrh	r2, [r7, #2]
 800707c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	887a      	ldrh	r2, [r7, #2]
 8007084:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	887a      	ldrh	r2, [r7, #2]
 8007092:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	887a      	ldrh	r2, [r7, #2]
 8007098:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070ae:	d802      	bhi.n	80070b6 <HAL_SPI_TransmitReceive+0xd8>
 80070b0:	8abb      	ldrh	r3, [r7, #20]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d908      	bls.n	80070c8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80070c4:	605a      	str	r2, [r3, #4]
 80070c6:	e007      	b.n	80070d8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e2:	2b40      	cmp	r3, #64	@ 0x40
 80070e4:	d007      	beq.n	80070f6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070fe:	f240 8083 	bls.w	8007208 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <HAL_SPI_TransmitReceive+0x132>
 800710a:	8afb      	ldrh	r3, [r7, #22]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d16f      	bne.n	80071f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007114:	881a      	ldrh	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007120:	1c9a      	adds	r2, r3, #2
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007134:	e05c      	b.n	80071f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f003 0302 	and.w	r3, r3, #2
 8007140:	2b02      	cmp	r3, #2
 8007142:	d11b      	bne.n	800717c <HAL_SPI_TransmitReceive+0x19e>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d016      	beq.n	800717c <HAL_SPI_TransmitReceive+0x19e>
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	2b01      	cmp	r3, #1
 8007152:	d113      	bne.n	800717c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007158:	881a      	ldrh	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007164:	1c9a      	adds	r2, r3, #2
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800716e:	b29b      	uxth	r3, r3
 8007170:	3b01      	subs	r3, #1
 8007172:	b29a      	uxth	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b01      	cmp	r3, #1
 8007188:	d11c      	bne.n	80071c4 <HAL_SPI_TransmitReceive+0x1e6>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d016      	beq.n	80071c4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a0:	b292      	uxth	r2, r2
 80071a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a8:	1c9a      	adds	r2, r3, #2
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	3b01      	subs	r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071c0:	2301      	movs	r3, #1
 80071c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80071c4:	f7fd fa18 	bl	80045f8 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d80d      	bhi.n	80071f0 <HAL_SPI_TransmitReceive+0x212>
 80071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071da:	d009      	beq.n	80071f0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e111      	b.n	8007414 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d19d      	bne.n	8007136 <HAL_SPI_TransmitReceive+0x158>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007200:	b29b      	uxth	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d197      	bne.n	8007136 <HAL_SPI_TransmitReceive+0x158>
 8007206:	e0e5      	b.n	80073d4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <HAL_SPI_TransmitReceive+0x23a>
 8007210:	8afb      	ldrh	r3, [r7, #22]
 8007212:	2b01      	cmp	r3, #1
 8007214:	f040 80d1 	bne.w	80073ba <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800721c:	b29b      	uxth	r3, r3
 800721e:	2b01      	cmp	r3, #1
 8007220:	d912      	bls.n	8007248 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007226:	881a      	ldrh	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007232:	1c9a      	adds	r2, r3, #2
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800723c:	b29b      	uxth	r3, r3
 800723e:	3b02      	subs	r3, #2
 8007240:	b29a      	uxth	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007246:	e0b8      	b.n	80073ba <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007264:	b29b      	uxth	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	b29a      	uxth	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800726e:	e0a4      	b.n	80073ba <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b02      	cmp	r3, #2
 800727c:	d134      	bne.n	80072e8 <HAL_SPI_TransmitReceive+0x30a>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007282:	b29b      	uxth	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	d02f      	beq.n	80072e8 <HAL_SPI_TransmitReceive+0x30a>
 8007288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728a:	2b01      	cmp	r3, #1
 800728c:	d12c      	bne.n	80072e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007292:	b29b      	uxth	r3, r3
 8007294:	2b01      	cmp	r3, #1
 8007296:	d912      	bls.n	80072be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729c:	881a      	ldrh	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a8:	1c9a      	adds	r2, r3, #2
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	3b02      	subs	r3, #2
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80072bc:	e012      	b.n	80072e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	330c      	adds	r3, #12
 80072c8:	7812      	ldrb	r2, [r2, #0]
 80072ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072da:	b29b      	uxth	r3, r3
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d148      	bne.n	8007388 <HAL_SPI_TransmitReceive+0x3aa>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d042      	beq.n	8007388 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b01      	cmp	r3, #1
 800730c:	d923      	bls.n	8007356 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007318:	b292      	uxth	r2, r2
 800731a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007320:	1c9a      	adds	r2, r3, #2
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800732c:	b29b      	uxth	r3, r3
 800732e:	3b02      	subs	r3, #2
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800733e:	b29b      	uxth	r3, r3
 8007340:	2b01      	cmp	r3, #1
 8007342:	d81f      	bhi.n	8007384 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007352:	605a      	str	r2, [r3, #4]
 8007354:	e016      	b.n	8007384 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f103 020c 	add.w	r2, r3, #12
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007362:	7812      	ldrb	r2, [r2, #0]
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007384:	2301      	movs	r3, #1
 8007386:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007388:	f7fd f936 	bl	80045f8 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007394:	429a      	cmp	r2, r3
 8007396:	d803      	bhi.n	80073a0 <HAL_SPI_TransmitReceive+0x3c2>
 8007398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739e:	d102      	bne.n	80073a6 <HAL_SPI_TransmitReceive+0x3c8>
 80073a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e02c      	b.n	8007414 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073be:	b29b      	uxth	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f47f af55 	bne.w	8007270 <HAL_SPI_TransmitReceive+0x292>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f47f af4e 	bne.w	8007270 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073d4:	6a3a      	ldr	r2, [r7, #32]
 80073d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 f93d 	bl	8007658 <SPI_EndRxTxTransaction>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d008      	beq.n	80073f6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2220      	movs	r2, #32
 80073e8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e00e      	b.n	8007414 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e000      	b.n	8007414 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007412:	2300      	movs	r3, #0
  }
}
 8007414:	4618      	mov	r0, r3
 8007416:	3728      	adds	r7, #40	@ 0x28
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	4613      	mov	r3, r2
 800742a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800742c:	f7fd f8e4 	bl	80045f8 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	4413      	add	r3, r2
 800743a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800743c:	f7fd f8dc 	bl	80045f8 <HAL_GetTick>
 8007440:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007442:	4b39      	ldr	r3, [pc, #228]	@ (8007528 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	015b      	lsls	r3, r3, #5
 8007448:	0d1b      	lsrs	r3, r3, #20
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	fb02 f303 	mul.w	r3, r2, r3
 8007450:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007452:	e054      	b.n	80074fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745a:	d050      	beq.n	80074fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800745c:	f7fd f8cc 	bl	80045f8 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	429a      	cmp	r2, r3
 800746a:	d902      	bls.n	8007472 <SPI_WaitFlagStateUntilTimeout+0x56>
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d13d      	bne.n	80074ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007480:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800748a:	d111      	bne.n	80074b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007494:	d004      	beq.n	80074a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800749e:	d107      	bne.n	80074b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074b8:	d10f      	bne.n	80074da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e017      	b.n	800751e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	4013      	ands	r3, r2
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	429a      	cmp	r2, r3
 800750c:	bf0c      	ite	eq
 800750e:	2301      	moveq	r3, #1
 8007510:	2300      	movne	r3, #0
 8007512:	b2db      	uxtb	r3, r3
 8007514:	461a      	mov	r2, r3
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	429a      	cmp	r2, r3
 800751a:	d19b      	bne.n	8007454 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3720      	adds	r7, #32
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20000008 	.word	0x20000008

0800752c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b08a      	sub	sp, #40	@ 0x28
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800753e:	f7fd f85b 	bl	80045f8 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007546:	1a9b      	subs	r3, r3, r2
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	4413      	add	r3, r2
 800754c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800754e:	f7fd f853 	bl	80045f8 <HAL_GetTick>
 8007552:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800755c:	4b3d      	ldr	r3, [pc, #244]	@ (8007654 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	00da      	lsls	r2, r3, #3
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	0d1b      	lsrs	r3, r3, #20
 800756c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800756e:	fb02 f303 	mul.w	r3, r2, r3
 8007572:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007574:	e060      	b.n	8007638 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800757c:	d107      	bne.n	800758e <SPI_WaitFifoStateUntilTimeout+0x62>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d104      	bne.n	800758e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800758c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007594:	d050      	beq.n	8007638 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007596:	f7fd f82f 	bl	80045f8 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d902      	bls.n	80075ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80075a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d13d      	bne.n	8007628 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80075ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075c4:	d111      	bne.n	80075ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075ce:	d004      	beq.n	80075da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d8:	d107      	bne.n	80075ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075f2:	d10f      	bne.n	8007614 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007612:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e010      	b.n	800764a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	3b01      	subs	r3, #1
 8007636:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689a      	ldr	r2, [r3, #8]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	4013      	ands	r3, r2
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	d196      	bne.n	8007576 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3728      	adds	r7, #40	@ 0x28
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20000008 	.word	0x20000008

08007658 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af02      	add	r7, sp, #8
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2200      	movs	r2, #0
 800766c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f7ff ff5b 	bl	800752c <SPI_WaitFifoStateUntilTimeout>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d007      	beq.n	800768c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007680:	f043 0220 	orr.w	r2, r3, #32
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e027      	b.n	80076dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2200      	movs	r2, #0
 8007694:	2180      	movs	r1, #128	@ 0x80
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7ff fec0 	bl	800741c <SPI_WaitFlagStateUntilTimeout>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d007      	beq.n	80076b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076a6:	f043 0220 	orr.w	r2, r3, #32
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e014      	b.n	80076dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f7ff ff34 	bl	800752c <SPI_WaitFifoStateUntilTimeout>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d007      	beq.n	80076da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076ce:	f043 0220 	orr.w	r2, r3, #32
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e000      	b.n	80076dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e049      	b.n	800778a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d106      	bne.n	8007710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fb fce0 	bl	80030d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3304      	adds	r3, #4
 8007720:	4619      	mov	r1, r3
 8007722:	4610      	mov	r0, r2
 8007724:	f000 f984 	bl	8007a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d101      	bne.n	80077b0 <HAL_TIM_ConfigClockSource+0x1c>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e0ee      	b.n	800798e <HAL_TIM_ConfigClockSource+0x1fa>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80077ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80077d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a6b      	ldr	r2, [pc, #428]	@ (8007998 <HAL_TIM_ConfigClockSource+0x204>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	f000 80b9 	beq.w	8007962 <HAL_TIM_ConfigClockSource+0x1ce>
 80077f0:	4a69      	ldr	r2, [pc, #420]	@ (8007998 <HAL_TIM_ConfigClockSource+0x204>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	f200 80be 	bhi.w	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 80077f8:	4a68      	ldr	r2, [pc, #416]	@ (800799c <HAL_TIM_ConfigClockSource+0x208>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	f000 80b1 	beq.w	8007962 <HAL_TIM_ConfigClockSource+0x1ce>
 8007800:	4a66      	ldr	r2, [pc, #408]	@ (800799c <HAL_TIM_ConfigClockSource+0x208>)
 8007802:	4293      	cmp	r3, r2
 8007804:	f200 80b6 	bhi.w	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 8007808:	4a65      	ldr	r2, [pc, #404]	@ (80079a0 <HAL_TIM_ConfigClockSource+0x20c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	f000 80a9 	beq.w	8007962 <HAL_TIM_ConfigClockSource+0x1ce>
 8007810:	4a63      	ldr	r2, [pc, #396]	@ (80079a0 <HAL_TIM_ConfigClockSource+0x20c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	f200 80ae 	bhi.w	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 8007818:	4a62      	ldr	r2, [pc, #392]	@ (80079a4 <HAL_TIM_ConfigClockSource+0x210>)
 800781a:	4293      	cmp	r3, r2
 800781c:	f000 80a1 	beq.w	8007962 <HAL_TIM_ConfigClockSource+0x1ce>
 8007820:	4a60      	ldr	r2, [pc, #384]	@ (80079a4 <HAL_TIM_ConfigClockSource+0x210>)
 8007822:	4293      	cmp	r3, r2
 8007824:	f200 80a6 	bhi.w	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 8007828:	4a5f      	ldr	r2, [pc, #380]	@ (80079a8 <HAL_TIM_ConfigClockSource+0x214>)
 800782a:	4293      	cmp	r3, r2
 800782c:	f000 8099 	beq.w	8007962 <HAL_TIM_ConfigClockSource+0x1ce>
 8007830:	4a5d      	ldr	r2, [pc, #372]	@ (80079a8 <HAL_TIM_ConfigClockSource+0x214>)
 8007832:	4293      	cmp	r3, r2
 8007834:	f200 809e 	bhi.w	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 8007838:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800783c:	f000 8091 	beq.w	8007962 <HAL_TIM_ConfigClockSource+0x1ce>
 8007840:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007844:	f200 8096 	bhi.w	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 8007848:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800784c:	f000 8089 	beq.w	8007962 <HAL_TIM_ConfigClockSource+0x1ce>
 8007850:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007854:	f200 808e 	bhi.w	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 8007858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800785c:	d03e      	beq.n	80078dc <HAL_TIM_ConfigClockSource+0x148>
 800785e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007862:	f200 8087 	bhi.w	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 8007866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800786a:	f000 8086 	beq.w	800797a <HAL_TIM_ConfigClockSource+0x1e6>
 800786e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007872:	d87f      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 8007874:	2b70      	cmp	r3, #112	@ 0x70
 8007876:	d01a      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0x11a>
 8007878:	2b70      	cmp	r3, #112	@ 0x70
 800787a:	d87b      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 800787c:	2b60      	cmp	r3, #96	@ 0x60
 800787e:	d050      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x18e>
 8007880:	2b60      	cmp	r3, #96	@ 0x60
 8007882:	d877      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 8007884:	2b50      	cmp	r3, #80	@ 0x50
 8007886:	d03c      	beq.n	8007902 <HAL_TIM_ConfigClockSource+0x16e>
 8007888:	2b50      	cmp	r3, #80	@ 0x50
 800788a:	d873      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 800788c:	2b40      	cmp	r3, #64	@ 0x40
 800788e:	d058      	beq.n	8007942 <HAL_TIM_ConfigClockSource+0x1ae>
 8007890:	2b40      	cmp	r3, #64	@ 0x40
 8007892:	d86f      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 8007894:	2b30      	cmp	r3, #48	@ 0x30
 8007896:	d064      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x1ce>
 8007898:	2b30      	cmp	r3, #48	@ 0x30
 800789a:	d86b      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 800789c:	2b20      	cmp	r3, #32
 800789e:	d060      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x1ce>
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	d867      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d05c      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x1ce>
 80078a8:	2b10      	cmp	r3, #16
 80078aa:	d05a      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x1ce>
 80078ac:	e062      	b.n	8007974 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078be:	f000 fabd 	bl	8007e3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	609a      	str	r2, [r3, #8]
      break;
 80078da:	e04f      	b.n	800797c <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078ec:	f000 faa6 	bl	8007e3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078fe:	609a      	str	r2, [r3, #8]
      break;
 8007900:	e03c      	b.n	800797c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800790e:	461a      	mov	r2, r3
 8007910:	f000 fa18 	bl	8007d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2150      	movs	r1, #80	@ 0x50
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fa71 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 8007920:	e02c      	b.n	800797c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800792e:	461a      	mov	r2, r3
 8007930:	f000 fa37 	bl	8007da2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2160      	movs	r1, #96	@ 0x60
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fa61 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 8007940:	e01c      	b.n	800797c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800794e:	461a      	mov	r2, r3
 8007950:	f000 f9f8 	bl	8007d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2140      	movs	r1, #64	@ 0x40
 800795a:	4618      	mov	r0, r3
 800795c:	f000 fa51 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 8007960:	e00c      	b.n	800797c <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4619      	mov	r1, r3
 800796c:	4610      	mov	r0, r2
 800796e:	f000 fa48 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 8007972:	e003      	b.n	800797c <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	73fb      	strb	r3, [r7, #15]
      break;
 8007978:	e000      	b.n	800797c <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800797a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	00100070 	.word	0x00100070
 800799c:	00100050 	.word	0x00100050
 80079a0:	00100040 	.word	0x00100040
 80079a4:	00100030 	.word	0x00100030
 80079a8:	00100020 	.word	0x00100020

080079ac <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e031      	b.n	8007a28 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f8de 	bl	8007b98 <TIM_SlaveTimer_SetConfig>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e018      	b.n	8007a28 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a04:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a14:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a4c      	ldr	r2, [pc, #304]	@ (8007b74 <TIM_Base_SetConfig+0x144>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d017      	beq.n	8007a78 <TIM_Base_SetConfig+0x48>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a4e:	d013      	beq.n	8007a78 <TIM_Base_SetConfig+0x48>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a49      	ldr	r2, [pc, #292]	@ (8007b78 <TIM_Base_SetConfig+0x148>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00f      	beq.n	8007a78 <TIM_Base_SetConfig+0x48>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a48      	ldr	r2, [pc, #288]	@ (8007b7c <TIM_Base_SetConfig+0x14c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00b      	beq.n	8007a78 <TIM_Base_SetConfig+0x48>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a47      	ldr	r2, [pc, #284]	@ (8007b80 <TIM_Base_SetConfig+0x150>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d007      	beq.n	8007a78 <TIM_Base_SetConfig+0x48>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a46      	ldr	r2, [pc, #280]	@ (8007b84 <TIM_Base_SetConfig+0x154>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d003      	beq.n	8007a78 <TIM_Base_SetConfig+0x48>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a45      	ldr	r2, [pc, #276]	@ (8007b88 <TIM_Base_SetConfig+0x158>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d108      	bne.n	8007a8a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a39      	ldr	r2, [pc, #228]	@ (8007b74 <TIM_Base_SetConfig+0x144>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d023      	beq.n	8007ada <TIM_Base_SetConfig+0xaa>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a98:	d01f      	beq.n	8007ada <TIM_Base_SetConfig+0xaa>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a36      	ldr	r2, [pc, #216]	@ (8007b78 <TIM_Base_SetConfig+0x148>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d01b      	beq.n	8007ada <TIM_Base_SetConfig+0xaa>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a35      	ldr	r2, [pc, #212]	@ (8007b7c <TIM_Base_SetConfig+0x14c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d017      	beq.n	8007ada <TIM_Base_SetConfig+0xaa>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a34      	ldr	r2, [pc, #208]	@ (8007b80 <TIM_Base_SetConfig+0x150>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d013      	beq.n	8007ada <TIM_Base_SetConfig+0xaa>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a33      	ldr	r2, [pc, #204]	@ (8007b84 <TIM_Base_SetConfig+0x154>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d00f      	beq.n	8007ada <TIM_Base_SetConfig+0xaa>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a33      	ldr	r2, [pc, #204]	@ (8007b8c <TIM_Base_SetConfig+0x15c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d00b      	beq.n	8007ada <TIM_Base_SetConfig+0xaa>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a32      	ldr	r2, [pc, #200]	@ (8007b90 <TIM_Base_SetConfig+0x160>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d007      	beq.n	8007ada <TIM_Base_SetConfig+0xaa>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a31      	ldr	r2, [pc, #196]	@ (8007b94 <TIM_Base_SetConfig+0x164>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d003      	beq.n	8007ada <TIM_Base_SetConfig+0xaa>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a2c      	ldr	r2, [pc, #176]	@ (8007b88 <TIM_Base_SetConfig+0x158>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d108      	bne.n	8007aec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a18      	ldr	r2, [pc, #96]	@ (8007b74 <TIM_Base_SetConfig+0x144>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d013      	beq.n	8007b40 <TIM_Base_SetConfig+0x110>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8007b84 <TIM_Base_SetConfig+0x154>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d00f      	beq.n	8007b40 <TIM_Base_SetConfig+0x110>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a1a      	ldr	r2, [pc, #104]	@ (8007b8c <TIM_Base_SetConfig+0x15c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00b      	beq.n	8007b40 <TIM_Base_SetConfig+0x110>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a19      	ldr	r2, [pc, #100]	@ (8007b90 <TIM_Base_SetConfig+0x160>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d007      	beq.n	8007b40 <TIM_Base_SetConfig+0x110>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a18      	ldr	r2, [pc, #96]	@ (8007b94 <TIM_Base_SetConfig+0x164>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d003      	beq.n	8007b40 <TIM_Base_SetConfig+0x110>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a13      	ldr	r2, [pc, #76]	@ (8007b88 <TIM_Base_SetConfig+0x158>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d103      	bne.n	8007b48 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d105      	bne.n	8007b66 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	f023 0201 	bic.w	r2, r3, #1
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	611a      	str	r2, [r3, #16]
  }
}
 8007b66:	bf00      	nop
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	40012c00 	.word	0x40012c00
 8007b78:	40000400 	.word	0x40000400
 8007b7c:	40000800 	.word	0x40000800
 8007b80:	40000c00 	.word	0x40000c00
 8007b84:	40013400 	.word	0x40013400
 8007b88:	40015000 	.word	0x40015000
 8007b8c:	40014000 	.word	0x40014000
 8007b90:	40014400 	.word	0x40014400
 8007b94:	40014800 	.word	0x40014800

08007b98 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bb8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bca:	f023 0307 	bic.w	r3, r3, #7
 8007bce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	4a52      	ldr	r2, [pc, #328]	@ (8007d30 <TIM_SlaveTimer_SetConfig+0x198>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	f000 809a 	beq.w	8007d22 <TIM_SlaveTimer_SetConfig+0x18a>
 8007bee:	4a50      	ldr	r2, [pc, #320]	@ (8007d30 <TIM_SlaveTimer_SetConfig+0x198>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	f200 8093 	bhi.w	8007d1c <TIM_SlaveTimer_SetConfig+0x184>
 8007bf6:	4a4f      	ldr	r2, [pc, #316]	@ (8007d34 <TIM_SlaveTimer_SetConfig+0x19c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	f000 8092 	beq.w	8007d22 <TIM_SlaveTimer_SetConfig+0x18a>
 8007bfe:	4a4d      	ldr	r2, [pc, #308]	@ (8007d34 <TIM_SlaveTimer_SetConfig+0x19c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	f200 808b 	bhi.w	8007d1c <TIM_SlaveTimer_SetConfig+0x184>
 8007c06:	4a4c      	ldr	r2, [pc, #304]	@ (8007d38 <TIM_SlaveTimer_SetConfig+0x1a0>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	f000 808a 	beq.w	8007d22 <TIM_SlaveTimer_SetConfig+0x18a>
 8007c0e:	4a4a      	ldr	r2, [pc, #296]	@ (8007d38 <TIM_SlaveTimer_SetConfig+0x1a0>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	f200 8083 	bhi.w	8007d1c <TIM_SlaveTimer_SetConfig+0x184>
 8007c16:	4a49      	ldr	r2, [pc, #292]	@ (8007d3c <TIM_SlaveTimer_SetConfig+0x1a4>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	f000 8082 	beq.w	8007d22 <TIM_SlaveTimer_SetConfig+0x18a>
 8007c1e:	4a47      	ldr	r2, [pc, #284]	@ (8007d3c <TIM_SlaveTimer_SetConfig+0x1a4>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d87b      	bhi.n	8007d1c <TIM_SlaveTimer_SetConfig+0x184>
 8007c24:	4a46      	ldr	r2, [pc, #280]	@ (8007d40 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d07b      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x18a>
 8007c2a:	4a45      	ldr	r2, [pc, #276]	@ (8007d40 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d875      	bhi.n	8007d1c <TIM_SlaveTimer_SetConfig+0x184>
 8007c30:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007c34:	d075      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x18a>
 8007c36:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007c3a:	d86f      	bhi.n	8007d1c <TIM_SlaveTimer_SetConfig+0x184>
 8007c3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c40:	d06f      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x18a>
 8007c42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c46:	d869      	bhi.n	8007d1c <TIM_SlaveTimer_SetConfig+0x184>
 8007c48:	2b70      	cmp	r3, #112	@ 0x70
 8007c4a:	d01a      	beq.n	8007c82 <TIM_SlaveTimer_SetConfig+0xea>
 8007c4c:	2b70      	cmp	r3, #112	@ 0x70
 8007c4e:	d865      	bhi.n	8007d1c <TIM_SlaveTimer_SetConfig+0x184>
 8007c50:	2b60      	cmp	r3, #96	@ 0x60
 8007c52:	d059      	beq.n	8007d08 <TIM_SlaveTimer_SetConfig+0x170>
 8007c54:	2b60      	cmp	r3, #96	@ 0x60
 8007c56:	d861      	bhi.n	8007d1c <TIM_SlaveTimer_SetConfig+0x184>
 8007c58:	2b50      	cmp	r3, #80	@ 0x50
 8007c5a:	d04b      	beq.n	8007cf4 <TIM_SlaveTimer_SetConfig+0x15c>
 8007c5c:	2b50      	cmp	r3, #80	@ 0x50
 8007c5e:	d85d      	bhi.n	8007d1c <TIM_SlaveTimer_SetConfig+0x184>
 8007c60:	2b40      	cmp	r3, #64	@ 0x40
 8007c62:	d019      	beq.n	8007c98 <TIM_SlaveTimer_SetConfig+0x100>
 8007c64:	2b40      	cmp	r3, #64	@ 0x40
 8007c66:	d859      	bhi.n	8007d1c <TIM_SlaveTimer_SetConfig+0x184>
 8007c68:	2b30      	cmp	r3, #48	@ 0x30
 8007c6a:	d05a      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x18a>
 8007c6c:	2b30      	cmp	r3, #48	@ 0x30
 8007c6e:	d855      	bhi.n	8007d1c <TIM_SlaveTimer_SetConfig+0x184>
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d056      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x18a>
 8007c74:	2b20      	cmp	r3, #32
 8007c76:	d851      	bhi.n	8007d1c <TIM_SlaveTimer_SetConfig+0x184>
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d052      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x18a>
 8007c7c:	2b10      	cmp	r3, #16
 8007c7e:	d050      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x18a>
 8007c80:	e04c      	b.n	8007d1c <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007c92:	f000 f8d3 	bl	8007e3c <TIM_ETR_SetConfig>
      break;
 8007c96:	e045      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b05      	cmp	r3, #5
 8007c9e:	d004      	beq.n	8007caa <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8007ca4:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8007ca8:	d101      	bne.n	8007cae <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e03b      	b.n	8007d26 <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6a1a      	ldr	r2, [r3, #32]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0201 	bic.w	r2, r2, #1
 8007cc4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cd4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	011b      	lsls	r3, r3, #4
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	621a      	str	r2, [r3, #32]
      break;
 8007cf2:	e017      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d00:	461a      	mov	r2, r3
 8007d02:	f000 f81f 	bl	8007d44 <TIM_TI1_ConfigInputStage>
      break;
 8007d06:	e00d      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d14:	461a      	mov	r2, r3
 8007d16:	f000 f844 	bl	8007da2 <TIM_TI2_ConfigInputStage>
      break;
 8007d1a:	e003      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d20:	e000      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 8007d22:	bf00      	nop
  }

  return status;
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	00100070 	.word	0x00100070
 8007d34:	00100050 	.word	0x00100050
 8007d38:	00100040 	.word	0x00100040
 8007d3c:	00100030 	.word	0x00100030
 8007d40:	00100020 	.word	0x00100020

08007d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	f023 0201 	bic.w	r2, r3, #1
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f023 030a 	bic.w	r3, r3, #10
 8007d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	621a      	str	r2, [r3, #32]
}
 8007d96:	bf00      	nop
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b087      	sub	sp, #28
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	f023 0210 	bic.w	r2, r3, #16
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	031b      	lsls	r3, r3, #12
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007dde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	621a      	str	r2, [r3, #32]
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	f043 0307 	orr.w	r3, r3, #7
 8007e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	609a      	str	r2, [r3, #8]
}
 8007e30:	bf00      	nop
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	021a      	lsls	r2, r3, #8
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	609a      	str	r2, [r3, #8]
}
 8007e70:	bf00      	nop
 8007e72:	371c      	adds	r7, #28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d101      	bne.n	8007e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e90:	2302      	movs	r3, #2
 8007e92:	e074      	b.n	8007f7e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a34      	ldr	r2, [pc, #208]	@ (8007f8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d009      	beq.n	8007ed2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a33      	ldr	r2, [pc, #204]	@ (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d004      	beq.n	8007ed2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a31      	ldr	r2, [pc, #196]	@ (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d108      	bne.n	8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007ed8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a21      	ldr	r2, [pc, #132]	@ (8007f8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d022      	beq.n	8007f52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f14:	d01d      	beq.n	8007f52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8007f98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d018      	beq.n	8007f52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a1d      	ldr	r2, [pc, #116]	@ (8007f9c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d013      	beq.n	8007f52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8007fa0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00e      	beq.n	8007f52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a15      	ldr	r2, [pc, #84]	@ (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d009      	beq.n	8007f52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a18      	ldr	r2, [pc, #96]	@ (8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d004      	beq.n	8007f52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a11      	ldr	r2, [pc, #68]	@ (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d10c      	bne.n	8007f6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	40012c00 	.word	0x40012c00
 8007f90:	40013400 	.word	0x40013400
 8007f94:	40015000 	.word	0x40015000
 8007f98:	40000400 	.word	0x40000400
 8007f9c:	40000800 	.word	0x40000800
 8007fa0:	40000c00 	.word	0x40000c00
 8007fa4:	40014000 	.word	0x40014000

08007fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e042      	b.n	8008040 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d106      	bne.n	8007fd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7fb fc45 	bl	800385c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2224      	movs	r2, #36	@ 0x24
 8007fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0201 	bic.w	r2, r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fc1a 	bl	800882c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f91b 	bl	8008234 <UART_SetConfig>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e01b      	b.n	8008040 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fc99 	bl	8008970 <UART_CheckIdleState>
 800803e:	4603      	mov	r3, r0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008048:	b480      	push	{r7}
 800804a:	b091      	sub	sp, #68	@ 0x44
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	4613      	mov	r3, r2
 8008054:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800805c:	2b20      	cmp	r3, #32
 800805e:	d178      	bne.n	8008152 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d002      	beq.n	800806c <HAL_UART_Transmit_IT+0x24>
 8008066:	88fb      	ldrh	r3, [r7, #6]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e071      	b.n	8008154 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	88fa      	ldrh	r2, [r7, #6]
 800807a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	88fa      	ldrh	r2, [r7, #6]
 8008082:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2221      	movs	r2, #33	@ 0x21
 8008098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080a4:	d12a      	bne.n	80080fc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080ae:	d107      	bne.n	80080c0 <HAL_UART_Transmit_IT+0x78>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d103      	bne.n	80080c0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4a29      	ldr	r2, [pc, #164]	@ (8008160 <HAL_UART_Transmit_IT+0x118>)
 80080bc:	679a      	str	r2, [r3, #120]	@ 0x78
 80080be:	e002      	b.n	80080c6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4a28      	ldr	r2, [pc, #160]	@ (8008164 <HAL_UART_Transmit_IT+0x11c>)
 80080c4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3308      	adds	r3, #8
 80080cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80080dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3308      	adds	r3, #8
 80080e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080e6:	637a      	str	r2, [r7, #52]	@ 0x34
 80080e8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80080f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1e5      	bne.n	80080c6 <HAL_UART_Transmit_IT+0x7e>
 80080fa:	e028      	b.n	800814e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008104:	d107      	bne.n	8008116 <HAL_UART_Transmit_IT+0xce>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d103      	bne.n	8008116 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4a15      	ldr	r2, [pc, #84]	@ (8008168 <HAL_UART_Transmit_IT+0x120>)
 8008112:	679a      	str	r2, [r3, #120]	@ 0x78
 8008114:	e002      	b.n	800811c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4a14      	ldr	r2, [pc, #80]	@ (800816c <HAL_UART_Transmit_IT+0x124>)
 800811a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	e853 3f00 	ldrex	r3, [r3]
 8008128:	613b      	str	r3, [r7, #16]
   return(result);
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008130:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800813a:	623b      	str	r3, [r7, #32]
 800813c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	69f9      	ldr	r1, [r7, #28]
 8008140:	6a3a      	ldr	r2, [r7, #32]
 8008142:	e841 2300 	strex	r3, r2, [r1]
 8008146:	61bb      	str	r3, [r7, #24]
   return(result);
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e6      	bne.n	800811c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	e000      	b.n	8008154 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008152:	2302      	movs	r3, #2
  }
}
 8008154:	4618      	mov	r0, r3
 8008156:	3744      	adds	r7, #68	@ 0x44
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	0800910b 	.word	0x0800910b
 8008164:	0800902b 	.word	0x0800902b
 8008168:	08008f69 	.word	0x08008f69
 800816c:	08008eb1 	.word	0x08008eb1

08008170 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08a      	sub	sp, #40	@ 0x28
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008184:	2b20      	cmp	r3, #32
 8008186:	d137      	bne.n	80081f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <HAL_UART_Receive_IT+0x24>
 800818e:	88fb      	ldrh	r3, [r7, #6]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e030      	b.n	80081fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a18      	ldr	r2, [pc, #96]	@ (8008204 <HAL_UART_Receive_IT+0x94>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d01f      	beq.n	80081e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d018      	beq.n	80081e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	613b      	str	r3, [r7, #16]
   return(result);
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	623b      	str	r3, [r7, #32]
 80081d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d8:	69f9      	ldr	r1, [r7, #28]
 80081da:	6a3a      	ldr	r2, [r7, #32]
 80081dc:	e841 2300 	strex	r3, r2, [r1]
 80081e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e6      	bne.n	80081b6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80081e8:	88fb      	ldrh	r3, [r7, #6]
 80081ea:	461a      	mov	r2, r3
 80081ec:	68b9      	ldr	r1, [r7, #8]
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f000 fcd6 	bl	8008ba0 <UART_Start_Receive_IT>
 80081f4:	4603      	mov	r3, r0
 80081f6:	e000      	b.n	80081fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081f8:	2302      	movs	r3, #2
  }
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3728      	adds	r7, #40	@ 0x28
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	40008000 	.word	0x40008000

08008208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008238:	b08c      	sub	sp, #48	@ 0x30
 800823a:	af00      	add	r7, sp, #0
 800823c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	431a      	orrs	r2, r3
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	431a      	orrs	r2, r3
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	4313      	orrs	r3, r2
 800825a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	4baa      	ldr	r3, [pc, #680]	@ (800850c <UART_SetConfig+0x2d8>)
 8008264:	4013      	ands	r3, r2
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	6812      	ldr	r2, [r2, #0]
 800826a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800826c:	430b      	orrs	r3, r1
 800826e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a9f      	ldr	r2, [pc, #636]	@ (8008510 <UART_SetConfig+0x2dc>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d004      	beq.n	80082a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800829c:	4313      	orrs	r3, r2
 800829e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80082aa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	6812      	ldr	r2, [r2, #0]
 80082b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082b4:	430b      	orrs	r3, r1
 80082b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082be:	f023 010f 	bic.w	r1, r3, #15
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a90      	ldr	r2, [pc, #576]	@ (8008514 <UART_SetConfig+0x2e0>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d125      	bne.n	8008324 <UART_SetConfig+0xf0>
 80082d8:	4b8f      	ldr	r3, [pc, #572]	@ (8008518 <UART_SetConfig+0x2e4>)
 80082da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d81a      	bhi.n	800831c <UART_SetConfig+0xe8>
 80082e6:	a201      	add	r2, pc, #4	@ (adr r2, 80082ec <UART_SetConfig+0xb8>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	080082fd 	.word	0x080082fd
 80082f0:	0800830d 	.word	0x0800830d
 80082f4:	08008305 	.word	0x08008305
 80082f8:	08008315 	.word	0x08008315
 80082fc:	2301      	movs	r3, #1
 80082fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008302:	e116      	b.n	8008532 <UART_SetConfig+0x2fe>
 8008304:	2302      	movs	r3, #2
 8008306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800830a:	e112      	b.n	8008532 <UART_SetConfig+0x2fe>
 800830c:	2304      	movs	r3, #4
 800830e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008312:	e10e      	b.n	8008532 <UART_SetConfig+0x2fe>
 8008314:	2308      	movs	r3, #8
 8008316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800831a:	e10a      	b.n	8008532 <UART_SetConfig+0x2fe>
 800831c:	2310      	movs	r3, #16
 800831e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008322:	e106      	b.n	8008532 <UART_SetConfig+0x2fe>
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a7c      	ldr	r2, [pc, #496]	@ (800851c <UART_SetConfig+0x2e8>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d138      	bne.n	80083a0 <UART_SetConfig+0x16c>
 800832e:	4b7a      	ldr	r3, [pc, #488]	@ (8008518 <UART_SetConfig+0x2e4>)
 8008330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008334:	f003 030c 	and.w	r3, r3, #12
 8008338:	2b0c      	cmp	r3, #12
 800833a:	d82d      	bhi.n	8008398 <UART_SetConfig+0x164>
 800833c:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <UART_SetConfig+0x110>)
 800833e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008342:	bf00      	nop
 8008344:	08008379 	.word	0x08008379
 8008348:	08008399 	.word	0x08008399
 800834c:	08008399 	.word	0x08008399
 8008350:	08008399 	.word	0x08008399
 8008354:	08008389 	.word	0x08008389
 8008358:	08008399 	.word	0x08008399
 800835c:	08008399 	.word	0x08008399
 8008360:	08008399 	.word	0x08008399
 8008364:	08008381 	.word	0x08008381
 8008368:	08008399 	.word	0x08008399
 800836c:	08008399 	.word	0x08008399
 8008370:	08008399 	.word	0x08008399
 8008374:	08008391 	.word	0x08008391
 8008378:	2300      	movs	r3, #0
 800837a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800837e:	e0d8      	b.n	8008532 <UART_SetConfig+0x2fe>
 8008380:	2302      	movs	r3, #2
 8008382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008386:	e0d4      	b.n	8008532 <UART_SetConfig+0x2fe>
 8008388:	2304      	movs	r3, #4
 800838a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800838e:	e0d0      	b.n	8008532 <UART_SetConfig+0x2fe>
 8008390:	2308      	movs	r3, #8
 8008392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008396:	e0cc      	b.n	8008532 <UART_SetConfig+0x2fe>
 8008398:	2310      	movs	r3, #16
 800839a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800839e:	e0c8      	b.n	8008532 <UART_SetConfig+0x2fe>
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a5e      	ldr	r2, [pc, #376]	@ (8008520 <UART_SetConfig+0x2ec>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d125      	bne.n	80083f6 <UART_SetConfig+0x1c2>
 80083aa:	4b5b      	ldr	r3, [pc, #364]	@ (8008518 <UART_SetConfig+0x2e4>)
 80083ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80083b4:	2b30      	cmp	r3, #48	@ 0x30
 80083b6:	d016      	beq.n	80083e6 <UART_SetConfig+0x1b2>
 80083b8:	2b30      	cmp	r3, #48	@ 0x30
 80083ba:	d818      	bhi.n	80083ee <UART_SetConfig+0x1ba>
 80083bc:	2b20      	cmp	r3, #32
 80083be:	d00a      	beq.n	80083d6 <UART_SetConfig+0x1a2>
 80083c0:	2b20      	cmp	r3, #32
 80083c2:	d814      	bhi.n	80083ee <UART_SetConfig+0x1ba>
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <UART_SetConfig+0x19a>
 80083c8:	2b10      	cmp	r3, #16
 80083ca:	d008      	beq.n	80083de <UART_SetConfig+0x1aa>
 80083cc:	e00f      	b.n	80083ee <UART_SetConfig+0x1ba>
 80083ce:	2300      	movs	r3, #0
 80083d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083d4:	e0ad      	b.n	8008532 <UART_SetConfig+0x2fe>
 80083d6:	2302      	movs	r3, #2
 80083d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083dc:	e0a9      	b.n	8008532 <UART_SetConfig+0x2fe>
 80083de:	2304      	movs	r3, #4
 80083e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083e4:	e0a5      	b.n	8008532 <UART_SetConfig+0x2fe>
 80083e6:	2308      	movs	r3, #8
 80083e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ec:	e0a1      	b.n	8008532 <UART_SetConfig+0x2fe>
 80083ee:	2310      	movs	r3, #16
 80083f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083f4:	e09d      	b.n	8008532 <UART_SetConfig+0x2fe>
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a4a      	ldr	r2, [pc, #296]	@ (8008524 <UART_SetConfig+0x2f0>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d125      	bne.n	800844c <UART_SetConfig+0x218>
 8008400:	4b45      	ldr	r3, [pc, #276]	@ (8008518 <UART_SetConfig+0x2e4>)
 8008402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008406:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800840a:	2bc0      	cmp	r3, #192	@ 0xc0
 800840c:	d016      	beq.n	800843c <UART_SetConfig+0x208>
 800840e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008410:	d818      	bhi.n	8008444 <UART_SetConfig+0x210>
 8008412:	2b80      	cmp	r3, #128	@ 0x80
 8008414:	d00a      	beq.n	800842c <UART_SetConfig+0x1f8>
 8008416:	2b80      	cmp	r3, #128	@ 0x80
 8008418:	d814      	bhi.n	8008444 <UART_SetConfig+0x210>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <UART_SetConfig+0x1f0>
 800841e:	2b40      	cmp	r3, #64	@ 0x40
 8008420:	d008      	beq.n	8008434 <UART_SetConfig+0x200>
 8008422:	e00f      	b.n	8008444 <UART_SetConfig+0x210>
 8008424:	2300      	movs	r3, #0
 8008426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800842a:	e082      	b.n	8008532 <UART_SetConfig+0x2fe>
 800842c:	2302      	movs	r3, #2
 800842e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008432:	e07e      	b.n	8008532 <UART_SetConfig+0x2fe>
 8008434:	2304      	movs	r3, #4
 8008436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800843a:	e07a      	b.n	8008532 <UART_SetConfig+0x2fe>
 800843c:	2308      	movs	r3, #8
 800843e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008442:	e076      	b.n	8008532 <UART_SetConfig+0x2fe>
 8008444:	2310      	movs	r3, #16
 8008446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800844a:	e072      	b.n	8008532 <UART_SetConfig+0x2fe>
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a35      	ldr	r2, [pc, #212]	@ (8008528 <UART_SetConfig+0x2f4>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d12a      	bne.n	80084ac <UART_SetConfig+0x278>
 8008456:	4b30      	ldr	r3, [pc, #192]	@ (8008518 <UART_SetConfig+0x2e4>)
 8008458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800845c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008460:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008464:	d01a      	beq.n	800849c <UART_SetConfig+0x268>
 8008466:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800846a:	d81b      	bhi.n	80084a4 <UART_SetConfig+0x270>
 800846c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008470:	d00c      	beq.n	800848c <UART_SetConfig+0x258>
 8008472:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008476:	d815      	bhi.n	80084a4 <UART_SetConfig+0x270>
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <UART_SetConfig+0x250>
 800847c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008480:	d008      	beq.n	8008494 <UART_SetConfig+0x260>
 8008482:	e00f      	b.n	80084a4 <UART_SetConfig+0x270>
 8008484:	2300      	movs	r3, #0
 8008486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800848a:	e052      	b.n	8008532 <UART_SetConfig+0x2fe>
 800848c:	2302      	movs	r3, #2
 800848e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008492:	e04e      	b.n	8008532 <UART_SetConfig+0x2fe>
 8008494:	2304      	movs	r3, #4
 8008496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800849a:	e04a      	b.n	8008532 <UART_SetConfig+0x2fe>
 800849c:	2308      	movs	r3, #8
 800849e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084a2:	e046      	b.n	8008532 <UART_SetConfig+0x2fe>
 80084a4:	2310      	movs	r3, #16
 80084a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084aa:	e042      	b.n	8008532 <UART_SetConfig+0x2fe>
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a17      	ldr	r2, [pc, #92]	@ (8008510 <UART_SetConfig+0x2dc>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d13a      	bne.n	800852c <UART_SetConfig+0x2f8>
 80084b6:	4b18      	ldr	r3, [pc, #96]	@ (8008518 <UART_SetConfig+0x2e4>)
 80084b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80084c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084c4:	d01a      	beq.n	80084fc <UART_SetConfig+0x2c8>
 80084c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084ca:	d81b      	bhi.n	8008504 <UART_SetConfig+0x2d0>
 80084cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084d0:	d00c      	beq.n	80084ec <UART_SetConfig+0x2b8>
 80084d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084d6:	d815      	bhi.n	8008504 <UART_SetConfig+0x2d0>
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <UART_SetConfig+0x2b0>
 80084dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084e0:	d008      	beq.n	80084f4 <UART_SetConfig+0x2c0>
 80084e2:	e00f      	b.n	8008504 <UART_SetConfig+0x2d0>
 80084e4:	2300      	movs	r3, #0
 80084e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ea:	e022      	b.n	8008532 <UART_SetConfig+0x2fe>
 80084ec:	2302      	movs	r3, #2
 80084ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084f2:	e01e      	b.n	8008532 <UART_SetConfig+0x2fe>
 80084f4:	2304      	movs	r3, #4
 80084f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084fa:	e01a      	b.n	8008532 <UART_SetConfig+0x2fe>
 80084fc:	2308      	movs	r3, #8
 80084fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008502:	e016      	b.n	8008532 <UART_SetConfig+0x2fe>
 8008504:	2310      	movs	r3, #16
 8008506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800850a:	e012      	b.n	8008532 <UART_SetConfig+0x2fe>
 800850c:	cfff69f3 	.word	0xcfff69f3
 8008510:	40008000 	.word	0x40008000
 8008514:	40013800 	.word	0x40013800
 8008518:	40021000 	.word	0x40021000
 800851c:	40004400 	.word	0x40004400
 8008520:	40004800 	.word	0x40004800
 8008524:	40004c00 	.word	0x40004c00
 8008528:	40005000 	.word	0x40005000
 800852c:	2310      	movs	r3, #16
 800852e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4aae      	ldr	r2, [pc, #696]	@ (80087f0 <UART_SetConfig+0x5bc>)
 8008538:	4293      	cmp	r3, r2
 800853a:	f040 8097 	bne.w	800866c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800853e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008542:	2b08      	cmp	r3, #8
 8008544:	d823      	bhi.n	800858e <UART_SetConfig+0x35a>
 8008546:	a201      	add	r2, pc, #4	@ (adr r2, 800854c <UART_SetConfig+0x318>)
 8008548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854c:	08008571 	.word	0x08008571
 8008550:	0800858f 	.word	0x0800858f
 8008554:	08008579 	.word	0x08008579
 8008558:	0800858f 	.word	0x0800858f
 800855c:	0800857f 	.word	0x0800857f
 8008560:	0800858f 	.word	0x0800858f
 8008564:	0800858f 	.word	0x0800858f
 8008568:	0800858f 	.word	0x0800858f
 800856c:	08008587 	.word	0x08008587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008570:	f7fe f9a2 	bl	80068b8 <HAL_RCC_GetPCLK1Freq>
 8008574:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008576:	e010      	b.n	800859a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008578:	4b9e      	ldr	r3, [pc, #632]	@ (80087f4 <UART_SetConfig+0x5c0>)
 800857a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800857c:	e00d      	b.n	800859a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800857e:	f7fe f92d 	bl	80067dc <HAL_RCC_GetSysClockFreq>
 8008582:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008584:	e009      	b.n	800859a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800858a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800858c:	e005      	b.n	800859a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800858e:	2300      	movs	r3, #0
 8008590:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008598:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800859a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 8130 	beq.w	8008802 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a6:	4a94      	ldr	r2, [pc, #592]	@ (80087f8 <UART_SetConfig+0x5c4>)
 80085a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ac:	461a      	mov	r2, r3
 80085ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80085b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	4613      	mov	r3, r2
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	4413      	add	r3, r2
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d305      	bcc.n	80085d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d903      	bls.n	80085da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80085d8:	e113      	b.n	8008802 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085dc:	2200      	movs	r2, #0
 80085de:	60bb      	str	r3, [r7, #8]
 80085e0:	60fa      	str	r2, [r7, #12]
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e6:	4a84      	ldr	r2, [pc, #528]	@ (80087f8 <UART_SetConfig+0x5c4>)
 80085e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	2200      	movs	r2, #0
 80085f0:	603b      	str	r3, [r7, #0]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085fc:	f7f7 fe78 	bl	80002f0 <__aeabi_uldivmod>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4610      	mov	r0, r2
 8008606:	4619      	mov	r1, r3
 8008608:	f04f 0200 	mov.w	r2, #0
 800860c:	f04f 0300 	mov.w	r3, #0
 8008610:	020b      	lsls	r3, r1, #8
 8008612:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008616:	0202      	lsls	r2, r0, #8
 8008618:	6979      	ldr	r1, [r7, #20]
 800861a:	6849      	ldr	r1, [r1, #4]
 800861c:	0849      	lsrs	r1, r1, #1
 800861e:	2000      	movs	r0, #0
 8008620:	460c      	mov	r4, r1
 8008622:	4605      	mov	r5, r0
 8008624:	eb12 0804 	adds.w	r8, r2, r4
 8008628:	eb43 0905 	adc.w	r9, r3, r5
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	469a      	mov	sl, r3
 8008634:	4693      	mov	fp, r2
 8008636:	4652      	mov	r2, sl
 8008638:	465b      	mov	r3, fp
 800863a:	4640      	mov	r0, r8
 800863c:	4649      	mov	r1, r9
 800863e:	f7f7 fe57 	bl	80002f0 <__aeabi_uldivmod>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	4613      	mov	r3, r2
 8008648:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008650:	d308      	bcc.n	8008664 <UART_SetConfig+0x430>
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008658:	d204      	bcs.n	8008664 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6a3a      	ldr	r2, [r7, #32]
 8008660:	60da      	str	r2, [r3, #12]
 8008662:	e0ce      	b.n	8008802 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800866a:	e0ca      	b.n	8008802 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008674:	d166      	bne.n	8008744 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008676:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800867a:	2b08      	cmp	r3, #8
 800867c:	d827      	bhi.n	80086ce <UART_SetConfig+0x49a>
 800867e:	a201      	add	r2, pc, #4	@ (adr r2, 8008684 <UART_SetConfig+0x450>)
 8008680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008684:	080086a9 	.word	0x080086a9
 8008688:	080086b1 	.word	0x080086b1
 800868c:	080086b9 	.word	0x080086b9
 8008690:	080086cf 	.word	0x080086cf
 8008694:	080086bf 	.word	0x080086bf
 8008698:	080086cf 	.word	0x080086cf
 800869c:	080086cf 	.word	0x080086cf
 80086a0:	080086cf 	.word	0x080086cf
 80086a4:	080086c7 	.word	0x080086c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086a8:	f7fe f906 	bl	80068b8 <HAL_RCC_GetPCLK1Freq>
 80086ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086ae:	e014      	b.n	80086da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086b0:	f7fe f918 	bl	80068e4 <HAL_RCC_GetPCLK2Freq>
 80086b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086b6:	e010      	b.n	80086da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086b8:	4b4e      	ldr	r3, [pc, #312]	@ (80087f4 <UART_SetConfig+0x5c0>)
 80086ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086bc:	e00d      	b.n	80086da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086be:	f7fe f88d 	bl	80067dc <HAL_RCC_GetSysClockFreq>
 80086c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086c4:	e009      	b.n	80086da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086cc:	e005      	b.n	80086da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80086ce:	2300      	movs	r3, #0
 80086d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80086d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 8090 	beq.w	8008802 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e6:	4a44      	ldr	r2, [pc, #272]	@ (80087f8 <UART_SetConfig+0x5c4>)
 80086e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ec:	461a      	mov	r2, r3
 80086ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086f4:	005a      	lsls	r2, r3, #1
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	085b      	lsrs	r3, r3, #1
 80086fc:	441a      	add	r2, r3
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	fbb2 f3f3 	udiv	r3, r2, r3
 8008706:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	2b0f      	cmp	r3, #15
 800870c:	d916      	bls.n	800873c <UART_SetConfig+0x508>
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008714:	d212      	bcs.n	800873c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	b29b      	uxth	r3, r3
 800871a:	f023 030f 	bic.w	r3, r3, #15
 800871e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	085b      	lsrs	r3, r3, #1
 8008724:	b29b      	uxth	r3, r3
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	b29a      	uxth	r2, r3
 800872c:	8bfb      	ldrh	r3, [r7, #30]
 800872e:	4313      	orrs	r3, r2
 8008730:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	8bfa      	ldrh	r2, [r7, #30]
 8008738:	60da      	str	r2, [r3, #12]
 800873a:	e062      	b.n	8008802 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008742:	e05e      	b.n	8008802 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008744:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008748:	2b08      	cmp	r3, #8
 800874a:	d828      	bhi.n	800879e <UART_SetConfig+0x56a>
 800874c:	a201      	add	r2, pc, #4	@ (adr r2, 8008754 <UART_SetConfig+0x520>)
 800874e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008752:	bf00      	nop
 8008754:	08008779 	.word	0x08008779
 8008758:	08008781 	.word	0x08008781
 800875c:	08008789 	.word	0x08008789
 8008760:	0800879f 	.word	0x0800879f
 8008764:	0800878f 	.word	0x0800878f
 8008768:	0800879f 	.word	0x0800879f
 800876c:	0800879f 	.word	0x0800879f
 8008770:	0800879f 	.word	0x0800879f
 8008774:	08008797 	.word	0x08008797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008778:	f7fe f89e 	bl	80068b8 <HAL_RCC_GetPCLK1Freq>
 800877c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800877e:	e014      	b.n	80087aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008780:	f7fe f8b0 	bl	80068e4 <HAL_RCC_GetPCLK2Freq>
 8008784:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008786:	e010      	b.n	80087aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008788:	4b1a      	ldr	r3, [pc, #104]	@ (80087f4 <UART_SetConfig+0x5c0>)
 800878a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800878c:	e00d      	b.n	80087aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800878e:	f7fe f825 	bl	80067dc <HAL_RCC_GetSysClockFreq>
 8008792:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008794:	e009      	b.n	80087aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800879a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800879c:	e005      	b.n	80087aa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80087a8:	bf00      	nop
    }

    if (pclk != 0U)
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d028      	beq.n	8008802 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b4:	4a10      	ldr	r2, [pc, #64]	@ (80087f8 <UART_SetConfig+0x5c4>)
 80087b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087ba:	461a      	mov	r2, r3
 80087bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087be:	fbb3 f2f2 	udiv	r2, r3, r2
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	085b      	lsrs	r3, r3, #1
 80087c8:	441a      	add	r2, r3
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	2b0f      	cmp	r3, #15
 80087d8:	d910      	bls.n	80087fc <UART_SetConfig+0x5c8>
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087e0:	d20c      	bcs.n	80087fc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	60da      	str	r2, [r3, #12]
 80087ec:	e009      	b.n	8008802 <UART_SetConfig+0x5ce>
 80087ee:	bf00      	nop
 80087f0:	40008000 	.word	0x40008000
 80087f4:	00f42400 	.word	0x00f42400
 80087f8:	0800aa90 	.word	0x0800aa90
      }
      else
      {
        ret = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2201      	movs	r2, #1
 8008806:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2201      	movs	r2, #1
 800880e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2200      	movs	r2, #0
 8008816:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	2200      	movs	r2, #0
 800881c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800881e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008822:	4618      	mov	r0, r3
 8008824:	3730      	adds	r7, #48	@ 0x30
 8008826:	46bd      	mov	sp, r7
 8008828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800882c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008838:	f003 0308 	and.w	r3, r3, #8
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00a      	beq.n	8008856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	430a      	orrs	r2, r1
 8008854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00a      	beq.n	8008878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	430a      	orrs	r2, r1
 8008876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800887c:	f003 0302 	and.w	r3, r3, #2
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00a      	beq.n	800889a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	430a      	orrs	r2, r1
 8008898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800889e:	f003 0304 	and.w	r3, r3, #4
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00a      	beq.n	80088bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	430a      	orrs	r2, r1
 80088ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c0:	f003 0310 	and.w	r3, r3, #16
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e2:	f003 0320 	and.w	r3, r3, #32
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008908:	2b00      	cmp	r3, #0
 800890a:	d01a      	beq.n	8008942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800892a:	d10a      	bne.n	8008942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	430a      	orrs	r2, r1
 8008940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00a      	beq.n	8008964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	430a      	orrs	r2, r1
 8008962:	605a      	str	r2, [r3, #4]
  }
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b098      	sub	sp, #96	@ 0x60
 8008974:	af02      	add	r7, sp, #8
 8008976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008980:	f7fb fe3a 	bl	80045f8 <HAL_GetTick>
 8008984:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0308 	and.w	r3, r3, #8
 8008990:	2b08      	cmp	r3, #8
 8008992:	d12f      	bne.n	80089f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008994:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800899c:	2200      	movs	r2, #0
 800899e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f88e 	bl	8008ac4 <UART_WaitOnFlagUntilTimeout>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d022      	beq.n	80089f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b6:	e853 3f00 	ldrex	r3, [r3]
 80089ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	461a      	mov	r2, r3
 80089ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80089ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089d4:	e841 2300 	strex	r3, r2, [r1]
 80089d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1e6      	bne.n	80089ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2220      	movs	r2, #32
 80089e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e063      	b.n	8008abc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0304 	and.w	r3, r3, #4
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	d149      	bne.n	8008a96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f857 	bl	8008ac4 <UART_WaitOnFlagUntilTimeout>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d03c      	beq.n	8008a96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	623b      	str	r3, [r7, #32]
   return(result);
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a42:	e841 2300 	strex	r3, r2, [r1]
 8008a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e6      	bne.n	8008a1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3308      	adds	r3, #8
 8008a54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	e853 3f00 	ldrex	r3, [r3]
 8008a5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f023 0301 	bic.w	r3, r3, #1
 8008a64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a6e:	61fa      	str	r2, [r7, #28]
 8008a70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a72:	69b9      	ldr	r1, [r7, #24]
 8008a74:	69fa      	ldr	r2, [r7, #28]
 8008a76:	e841 2300 	strex	r3, r2, [r1]
 8008a7a:	617b      	str	r3, [r7, #20]
   return(result);
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1e5      	bne.n	8008a4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2220      	movs	r2, #32
 8008a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e012      	b.n	8008abc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3758      	adds	r7, #88	@ 0x58
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	603b      	str	r3, [r7, #0]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ad4:	e04f      	b.n	8008b76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008adc:	d04b      	beq.n	8008b76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ade:	f7fb fd8b 	bl	80045f8 <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d302      	bcc.n	8008af4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e04e      	b.n	8008b96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0304 	and.w	r3, r3, #4
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d037      	beq.n	8008b76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2b80      	cmp	r3, #128	@ 0x80
 8008b0a:	d034      	beq.n	8008b76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b40      	cmp	r3, #64	@ 0x40
 8008b10:	d031      	beq.n	8008b76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	69db      	ldr	r3, [r3, #28]
 8008b18:	f003 0308 	and.w	r3, r3, #8
 8008b1c:	2b08      	cmp	r3, #8
 8008b1e:	d110      	bne.n	8008b42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2208      	movs	r2, #8
 8008b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 f95b 	bl	8008de4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2208      	movs	r2, #8
 8008b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e029      	b.n	8008b96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b50:	d111      	bne.n	8008b76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 f941 	bl	8008de4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2220      	movs	r2, #32
 8008b66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e00f      	b.n	8008b96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	69da      	ldr	r2, [r3, #28]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	4013      	ands	r3, r2
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	bf0c      	ite	eq
 8008b86:	2301      	moveq	r3, #1
 8008b88:	2300      	movne	r3, #0
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	79fb      	ldrb	r3, [r7, #7]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d0a0      	beq.n	8008ad6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b0a3      	sub	sp, #140	@ 0x8c
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	4613      	mov	r3, r2
 8008bac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	88fa      	ldrh	r2, [r7, #6]
 8008bb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	88fa      	ldrh	r2, [r7, #6]
 8008bc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bd2:	d10e      	bne.n	8008bf2 <UART_Start_Receive_IT+0x52>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d105      	bne.n	8008be8 <UART_Start_Receive_IT+0x48>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008be2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008be6:	e02d      	b.n	8008c44 <UART_Start_Receive_IT+0xa4>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	22ff      	movs	r2, #255	@ 0xff
 8008bec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bf0:	e028      	b.n	8008c44 <UART_Start_Receive_IT+0xa4>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10d      	bne.n	8008c16 <UART_Start_Receive_IT+0x76>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d104      	bne.n	8008c0c <UART_Start_Receive_IT+0x6c>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	22ff      	movs	r2, #255	@ 0xff
 8008c06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c0a:	e01b      	b.n	8008c44 <UART_Start_Receive_IT+0xa4>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	227f      	movs	r2, #127	@ 0x7f
 8008c10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c14:	e016      	b.n	8008c44 <UART_Start_Receive_IT+0xa4>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c1e:	d10d      	bne.n	8008c3c <UART_Start_Receive_IT+0x9c>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d104      	bne.n	8008c32 <UART_Start_Receive_IT+0x92>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	227f      	movs	r2, #127	@ 0x7f
 8008c2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c30:	e008      	b.n	8008c44 <UART_Start_Receive_IT+0xa4>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	223f      	movs	r2, #63	@ 0x3f
 8008c36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c3a:	e003      	b.n	8008c44 <UART_Start_Receive_IT+0xa4>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2222      	movs	r2, #34	@ 0x22
 8008c50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3308      	adds	r3, #8
 8008c5a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c5e:	e853 3f00 	ldrex	r3, [r3]
 8008c62:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008c64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c66:	f043 0301 	orr.w	r3, r3, #1
 8008c6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3308      	adds	r3, #8
 8008c74:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008c78:	673a      	str	r2, [r7, #112]	@ 0x70
 8008c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008c7e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008c80:	e841 2300 	strex	r3, r2, [r1]
 8008c84:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008c86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e3      	bne.n	8008c54 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c94:	d14f      	bne.n	8008d36 <UART_Start_Receive_IT+0x196>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c9c:	88fa      	ldrh	r2, [r7, #6]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d349      	bcc.n	8008d36 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008caa:	d107      	bne.n	8008cbc <UART_Start_Receive_IT+0x11c>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d103      	bne.n	8008cbc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4a47      	ldr	r2, [pc, #284]	@ (8008dd4 <UART_Start_Receive_IT+0x234>)
 8008cb8:	675a      	str	r2, [r3, #116]	@ 0x74
 8008cba:	e002      	b.n	8008cc2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4a46      	ldr	r2, [pc, #280]	@ (8008dd8 <UART_Start_Receive_IT+0x238>)
 8008cc0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d01a      	beq.n	8008d00 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cd2:	e853 3f00 	ldrex	r3, [r3]
 8008cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cee:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008cf2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008cf4:	e841 2300 	strex	r3, r2, [r1]
 8008cf8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1e4      	bne.n	8008cca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3308      	adds	r3, #8
 8008d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d0a:	e853 3f00 	ldrex	r3, [r3]
 8008d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d20:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008d22:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d24:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d28:	e841 2300 	strex	r3, r2, [r1]
 8008d2c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1e5      	bne.n	8008d00 <UART_Start_Receive_IT+0x160>
 8008d34:	e046      	b.n	8008dc4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d3e:	d107      	bne.n	8008d50 <UART_Start_Receive_IT+0x1b0>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d103      	bne.n	8008d50 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	4a24      	ldr	r2, [pc, #144]	@ (8008ddc <UART_Start_Receive_IT+0x23c>)
 8008d4c:	675a      	str	r2, [r3, #116]	@ 0x74
 8008d4e:	e002      	b.n	8008d56 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4a23      	ldr	r2, [pc, #140]	@ (8008de0 <UART_Start_Receive_IT+0x240>)
 8008d54:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d019      	beq.n	8008d92 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d66:	e853 3f00 	ldrex	r3, [r3]
 8008d6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008d72:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d7e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e6      	bne.n	8008d5e <UART_Start_Receive_IT+0x1be>
 8008d90:	e018      	b.n	8008dc4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	e853 3f00 	ldrex	r3, [r3]
 8008d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f043 0320 	orr.w	r3, r3, #32
 8008da6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	461a      	mov	r2, r3
 8008dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008db0:	623b      	str	r3, [r7, #32]
 8008db2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db4:	69f9      	ldr	r1, [r7, #28]
 8008db6:	6a3a      	ldr	r2, [r7, #32]
 8008db8:	e841 2300 	strex	r3, r2, [r1]
 8008dbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1e6      	bne.n	8008d92 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	378c      	adds	r7, #140	@ 0x8c
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	080098c9 	.word	0x080098c9
 8008dd8:	08009565 	.word	0x08009565
 8008ddc:	080093ad 	.word	0x080093ad
 8008de0:	080091f5 	.word	0x080091f5

08008de4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b095      	sub	sp, #84	@ 0x54
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e6      	bne.n	8008dec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3308      	adds	r3, #8
 8008e24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	e853 3f00 	ldrex	r3, [r3]
 8008e2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e34:	f023 0301 	bic.w	r3, r3, #1
 8008e38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3308      	adds	r3, #8
 8008e40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e3      	bne.n	8008e1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d118      	bne.n	8008e90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	e853 3f00 	ldrex	r3, [r3]
 8008e6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f023 0310 	bic.w	r3, r3, #16
 8008e72:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e7c:	61bb      	str	r3, [r7, #24]
 8008e7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e80:	6979      	ldr	r1, [r7, #20]
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	e841 2300 	strex	r3, r2, [r1]
 8008e88:	613b      	str	r3, [r7, #16]
   return(result);
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1e6      	bne.n	8008e5e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2220      	movs	r2, #32
 8008e94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008ea4:	bf00      	nop
 8008ea6:	3754      	adds	r7, #84	@ 0x54
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b08f      	sub	sp, #60	@ 0x3c
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ebe:	2b21      	cmp	r3, #33	@ 0x21
 8008ec0:	d14c      	bne.n	8008f5c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d132      	bne.n	8008f34 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	e853 3f00 	ldrex	r3, [r3]
 8008eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008eee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ef4:	e841 2300 	strex	r3, r2, [r1]
 8008ef8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1e6      	bne.n	8008ece <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	e853 3f00 	ldrex	r3, [r3]
 8008f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1e:	61bb      	str	r3, [r7, #24]
 8008f20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f22:	6979      	ldr	r1, [r7, #20]
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	e841 2300 	strex	r3, r2, [r1]
 8008f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1e6      	bne.n	8008f00 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008f32:	e013      	b.n	8008f5c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f38:	781a      	ldrb	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	3b01      	subs	r3, #1
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008f5c:	bf00      	nop
 8008f5e:	373c      	adds	r7, #60	@ 0x3c
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b091      	sub	sp, #68	@ 0x44
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f76:	2b21      	cmp	r3, #33	@ 0x21
 8008f78:	d151      	bne.n	800901e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d132      	bne.n	8008fec <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8e:	e853 3f00 	ldrex	r3, [r3]
 8008f92:	623b      	str	r3, [r7, #32]
   return(result);
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fac:	e841 2300 	strex	r3, r2, [r1]
 8008fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e6      	bne.n	8008f86 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd6:	61fb      	str	r3, [r7, #28]
 8008fd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	69b9      	ldr	r1, [r7, #24]
 8008fdc:	69fa      	ldr	r2, [r7, #28]
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	617b      	str	r3, [r7, #20]
   return(result);
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e6      	bne.n	8008fb8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008fea:	e018      	b.n	800901e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff4:	881b      	ldrh	r3, [r3, #0]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009000:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009006:	1c9a      	adds	r2, r3, #2
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009012:	b29b      	uxth	r3, r3
 8009014:	3b01      	subs	r3, #1
 8009016:	b29a      	uxth	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800901e:	bf00      	nop
 8009020:	3744      	adds	r7, #68	@ 0x44
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800902a:	b480      	push	{r7}
 800902c:	b091      	sub	sp, #68	@ 0x44
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009038:	2b21      	cmp	r3, #33	@ 0x21
 800903a:	d160      	bne.n	80090fe <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009042:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009044:	e057      	b.n	80090f6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800904c:	b29b      	uxth	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d133      	bne.n	80090ba <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3308      	adds	r3, #8
 8009058:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905c:	e853 3f00 	ldrex	r3, [r3]
 8009060:	623b      	str	r3, [r7, #32]
   return(result);
 8009062:	6a3b      	ldr	r3, [r7, #32]
 8009064:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009068:	63bb      	str	r3, [r7, #56]	@ 0x38
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3308      	adds	r3, #8
 8009070:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009072:	633a      	str	r2, [r7, #48]	@ 0x30
 8009074:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009076:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e5      	bne.n	8009052 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	e853 3f00 	ldrex	r3, [r3]
 8009092:	60fb      	str	r3, [r7, #12]
   return(result);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800909a:	637b      	str	r3, [r7, #52]	@ 0x34
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	461a      	mov	r2, r3
 80090a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a4:	61fb      	str	r3, [r7, #28]
 80090a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a8:	69b9      	ldr	r1, [r7, #24]
 80090aa:	69fa      	ldr	r2, [r7, #28]
 80090ac:	e841 2300 	strex	r3, r2, [r1]
 80090b0:	617b      	str	r3, [r7, #20]
   return(result);
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1e6      	bne.n	8009086 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80090b8:	e021      	b.n	80090fe <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d013      	beq.n	80090f0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090cc:	781a      	ldrb	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d8:	1c5a      	adds	r2, r3, #1
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	3b01      	subs	r3, #1
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80090f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80090f2:	3b01      	subs	r3, #1
 80090f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80090f6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1a4      	bne.n	8009046 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80090fc:	e7ff      	b.n	80090fe <UART_TxISR_8BIT_FIFOEN+0xd4>
 80090fe:	bf00      	nop
 8009100:	3744      	adds	r7, #68	@ 0x44
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800910a:	b480      	push	{r7}
 800910c:	b091      	sub	sp, #68	@ 0x44
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009118:	2b21      	cmp	r3, #33	@ 0x21
 800911a:	d165      	bne.n	80091e8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009122:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009124:	e05c      	b.n	80091e0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800912c:	b29b      	uxth	r3, r3
 800912e:	2b00      	cmp	r3, #0
 8009130:	d133      	bne.n	800919a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	3308      	adds	r3, #8
 8009138:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	61fb      	str	r3, [r7, #28]
   return(result);
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009148:	637b      	str	r3, [r7, #52]	@ 0x34
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3308      	adds	r3, #8
 8009150:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009152:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009154:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009158:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e5      	bne.n	8009132 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	e853 3f00 	ldrex	r3, [r3]
 8009172:	60bb      	str	r3, [r7, #8]
   return(result);
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800917a:	633b      	str	r3, [r7, #48]	@ 0x30
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	461a      	mov	r2, r3
 8009182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009184:	61bb      	str	r3, [r7, #24]
 8009186:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009188:	6979      	ldr	r1, [r7, #20]
 800918a:	69ba      	ldr	r2, [r7, #24]
 800918c:	e841 2300 	strex	r3, r2, [r1]
 8009190:	613b      	str	r3, [r7, #16]
   return(result);
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1e6      	bne.n	8009166 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009198:	e026      	b.n	80091e8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d018      	beq.n	80091da <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ac:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80091ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	461a      	mov	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091bc:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091c2:	1c9a      	adds	r2, r3, #2
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	3b01      	subs	r3, #1
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80091da:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80091dc:	3b01      	subs	r3, #1
 80091de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80091e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d19f      	bne.n	8009126 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80091e6:	e7ff      	b.n	80091e8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80091e8:	bf00      	nop
 80091ea:	3744      	adds	r7, #68	@ 0x44
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b09c      	sub	sp, #112	@ 0x70
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009202:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800920c:	2b22      	cmp	r3, #34	@ 0x22
 800920e:	f040 80be 	bne.w	800938e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009218:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800921c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009220:	b2d9      	uxtb	r1, r3
 8009222:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009226:	b2da      	uxtb	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800922c:	400a      	ands	r2, r1
 800922e:	b2d2      	uxtb	r2, r2
 8009230:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009242:	b29b      	uxth	r3, r3
 8009244:	3b01      	subs	r3, #1
 8009246:	b29a      	uxth	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009254:	b29b      	uxth	r3, r3
 8009256:	2b00      	cmp	r3, #0
 8009258:	f040 80a1 	bne.w	800939e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009264:	e853 3f00 	ldrex	r3, [r3]
 8009268:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800926a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800926c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009270:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800927a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800927c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009280:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009282:	e841 2300 	strex	r3, r2, [r1]
 8009286:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1e6      	bne.n	800925c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3308      	adds	r3, #8
 8009294:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800929e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092a0:	f023 0301 	bic.w	r3, r3, #1
 80092a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	3308      	adds	r3, #8
 80092ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80092ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80092b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e5      	bne.n	800928e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2220      	movs	r2, #32
 80092c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a33      	ldr	r2, [pc, #204]	@ (80093a8 <UART_RxISR_8BIT+0x1b4>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d01f      	beq.n	8009320 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d018      	beq.n	8009320 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f6:	e853 3f00 	ldrex	r3, [r3]
 80092fa:	623b      	str	r3, [r7, #32]
   return(result);
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009302:	663b      	str	r3, [r7, #96]	@ 0x60
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800930c:	633b      	str	r3, [r7, #48]	@ 0x30
 800930e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009310:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009314:	e841 2300 	strex	r3, r2, [r1]
 8009318:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800931a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1e6      	bne.n	80092ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009324:	2b01      	cmp	r3, #1
 8009326:	d12e      	bne.n	8009386 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	60fb      	str	r3, [r7, #12]
   return(result);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f023 0310 	bic.w	r3, r3, #16
 8009342:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
 800934a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800934c:	61fb      	str	r3, [r7, #28]
 800934e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	69b9      	ldr	r1, [r7, #24]
 8009352:	69fa      	ldr	r2, [r7, #28]
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	617b      	str	r3, [r7, #20]
   return(result);
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e6      	bne.n	800932e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	f003 0310 	and.w	r3, r3, #16
 800936a:	2b10      	cmp	r3, #16
 800936c:	d103      	bne.n	8009376 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2210      	movs	r2, #16
 8009374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7fe ff4c 	bl	800821c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009384:	e00b      	b.n	800939e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7f9 fefa 	bl	8003180 <HAL_UART_RxCpltCallback>
}
 800938c:	e007      	b.n	800939e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	699a      	ldr	r2, [r3, #24]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f042 0208 	orr.w	r2, r2, #8
 800939c:	619a      	str	r2, [r3, #24]
}
 800939e:	bf00      	nop
 80093a0:	3770      	adds	r7, #112	@ 0x70
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	40008000 	.word	0x40008000

080093ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b09c      	sub	sp, #112	@ 0x70
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80093ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093c4:	2b22      	cmp	r3, #34	@ 0x22
 80093c6:	f040 80be 	bne.w	8009546 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80093da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80093de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80093e2:	4013      	ands	r3, r2
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ee:	1c9a      	adds	r2, r3, #2
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b29a      	uxth	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800940c:	b29b      	uxth	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	f040 80a1 	bne.w	8009556 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800941c:	e853 3f00 	ldrex	r3, [r3]
 8009420:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009428:	667b      	str	r3, [r7, #100]	@ 0x64
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009432:	657b      	str	r3, [r7, #84]	@ 0x54
 8009434:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009436:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009438:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800943a:	e841 2300 	strex	r3, r2, [r1]
 800943e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1e6      	bne.n	8009414 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3308      	adds	r3, #8
 800944c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009458:	f023 0301 	bic.w	r3, r3, #1
 800945c:	663b      	str	r3, [r7, #96]	@ 0x60
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3308      	adds	r3, #8
 8009464:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009466:	643a      	str	r2, [r7, #64]	@ 0x40
 8009468:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800946c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800946e:	e841 2300 	strex	r3, r2, [r1]
 8009472:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1e5      	bne.n	8009446 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2220      	movs	r2, #32
 800947e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a33      	ldr	r2, [pc, #204]	@ (8009560 <UART_RxISR_16BIT+0x1b4>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d01f      	beq.n	80094d8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d018      	beq.n	80094d8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	e853 3f00 	ldrex	r3, [r3]
 80094b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80094ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	461a      	mov	r2, r3
 80094c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094c6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094cc:	e841 2300 	strex	r3, r2, [r1]
 80094d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1e6      	bne.n	80094a6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d12e      	bne.n	800953e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	e853 3f00 	ldrex	r3, [r3]
 80094f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	f023 0310 	bic.w	r3, r3, #16
 80094fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	461a      	mov	r2, r3
 8009502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009504:	61bb      	str	r3, [r7, #24]
 8009506:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009508:	6979      	ldr	r1, [r7, #20]
 800950a:	69ba      	ldr	r2, [r7, #24]
 800950c:	e841 2300 	strex	r3, r2, [r1]
 8009510:	613b      	str	r3, [r7, #16]
   return(result);
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1e6      	bne.n	80094e6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	f003 0310 	and.w	r3, r3, #16
 8009522:	2b10      	cmp	r3, #16
 8009524:	d103      	bne.n	800952e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2210      	movs	r2, #16
 800952c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7fe fe70 	bl	800821c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800953c:	e00b      	b.n	8009556 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7f9 fe1e 	bl	8003180 <HAL_UART_RxCpltCallback>
}
 8009544:	e007      	b.n	8009556 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	699a      	ldr	r2, [r3, #24]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f042 0208 	orr.w	r2, r2, #8
 8009554:	619a      	str	r2, [r3, #24]
}
 8009556:	bf00      	nop
 8009558:	3770      	adds	r7, #112	@ 0x70
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	40008000 	.word	0x40008000

08009564 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b0ac      	sub	sp, #176	@ 0xb0
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009572:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	69db      	ldr	r3, [r3, #28]
 800957c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800959a:	2b22      	cmp	r3, #34	@ 0x22
 800959c:	f040 8183 	bne.w	80098a6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80095a6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095aa:	e126      	b.n	80097fa <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095b6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80095ba:	b2d9      	uxtb	r1, r3
 80095bc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095c6:	400a      	ands	r2, r1
 80095c8:	b2d2      	uxtb	r2, r2
 80095ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095d0:	1c5a      	adds	r2, r3, #1
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095dc:	b29b      	uxth	r3, r3
 80095de:	3b01      	subs	r3, #1
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80095f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095f6:	f003 0307 	and.w	r3, r3, #7
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d053      	beq.n	80096a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	2b00      	cmp	r3, #0
 8009608:	d011      	beq.n	800962e <UART_RxISR_8BIT_FIFOEN+0xca>
 800960a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800960e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00b      	beq.n	800962e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2201      	movs	r2, #1
 800961c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009624:	f043 0201 	orr.w	r2, r3, #1
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800962e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009632:	f003 0302 	and.w	r3, r3, #2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d011      	beq.n	800965e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800963a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00b      	beq.n	800965e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2202      	movs	r2, #2
 800964c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009654:	f043 0204 	orr.w	r2, r3, #4
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800965e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009662:	f003 0304 	and.w	r3, r3, #4
 8009666:	2b00      	cmp	r3, #0
 8009668:	d011      	beq.n	800968e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800966a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00b      	beq.n	800968e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2204      	movs	r2, #4
 800967c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009684:	f043 0202 	orr.w	r2, r3, #2
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009694:	2b00      	cmp	r3, #0
 8009696:	d006      	beq.n	80096a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7fe fdb5 	bl	8008208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f040 80a3 	bne.w	80097fa <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096bc:	e853 3f00 	ldrex	r3, [r3]
 80096c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80096c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	461a      	mov	r2, r3
 80096d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80096d8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80096dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80096e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e4      	bne.n	80096b4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3308      	adds	r3, #8
 80096f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096f4:	e853 3f00 	ldrex	r3, [r3]
 80096f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80096fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009700:	f023 0301 	bic.w	r3, r3, #1
 8009704:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3308      	adds	r3, #8
 800970e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009712:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009714:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009716:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009718:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009720:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e1      	bne.n	80096ea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2220      	movs	r2, #32
 800972a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a60      	ldr	r2, [pc, #384]	@ (80098c0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d021      	beq.n	8009788 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800974e:	2b00      	cmp	r3, #0
 8009750:	d01a      	beq.n	8009788 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800975a:	e853 3f00 	ldrex	r3, [r3]
 800975e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009762:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009766:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009774:	657b      	str	r3, [r7, #84]	@ 0x54
 8009776:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009778:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800977a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800977c:	e841 2300 	strex	r3, r2, [r1]
 8009780:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1e4      	bne.n	8009752 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800978c:	2b01      	cmp	r3, #1
 800978e:	d130      	bne.n	80097f2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800979e:	e853 3f00 	ldrex	r3, [r3]
 80097a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a6:	f023 0310 	bic.w	r3, r3, #16
 80097aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80097ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097c0:	e841 2300 	strex	r3, r2, [r1]
 80097c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1e4      	bne.n	8009796 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	f003 0310 	and.w	r3, r3, #16
 80097d6:	2b10      	cmp	r3, #16
 80097d8:	d103      	bne.n	80097e2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2210      	movs	r2, #16
 80097e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7fe fd16 	bl	800821c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80097f0:	e00e      	b.n	8009810 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7f9 fcc4 	bl	8003180 <HAL_UART_RxCpltCallback>
        break;
 80097f8:	e00a      	b.n	8009810 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097fa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d006      	beq.n	8009810 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8009802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009806:	f003 0320 	and.w	r3, r3, #32
 800980a:	2b00      	cmp	r3, #0
 800980c:	f47f aece 	bne.w	80095ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009816:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800981a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800981e:	2b00      	cmp	r3, #0
 8009820:	d049      	beq.n	80098b6 <UART_RxISR_8BIT_FIFOEN+0x352>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009828:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800982c:	429a      	cmp	r2, r3
 800982e:	d242      	bcs.n	80098b6 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3308      	adds	r3, #8
 8009836:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	e853 3f00 	ldrex	r3, [r3]
 800983e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009846:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3308      	adds	r3, #8
 8009850:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009856:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800985a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800985c:	e841 2300 	strex	r3, r2, [r1]
 8009860:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1e3      	bne.n	8009830 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a16      	ldr	r2, [pc, #88]	@ (80098c4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800986c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	e853 3f00 	ldrex	r3, [r3]
 800987a:	60bb      	str	r3, [r7, #8]
   return(result);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f043 0320 	orr.w	r3, r3, #32
 8009882:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009890:	61bb      	str	r3, [r7, #24]
 8009892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009894:	6979      	ldr	r1, [r7, #20]
 8009896:	69ba      	ldr	r2, [r7, #24]
 8009898:	e841 2300 	strex	r3, r2, [r1]
 800989c:	613b      	str	r3, [r7, #16]
   return(result);
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e4      	bne.n	800986e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098a4:	e007      	b.n	80098b6 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	699a      	ldr	r2, [r3, #24]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f042 0208 	orr.w	r2, r2, #8
 80098b4:	619a      	str	r2, [r3, #24]
}
 80098b6:	bf00      	nop
 80098b8:	37b0      	adds	r7, #176	@ 0xb0
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	40008000 	.word	0x40008000
 80098c4:	080091f5 	.word	0x080091f5

080098c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b0ae      	sub	sp, #184	@ 0xb8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80098d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	69db      	ldr	r3, [r3, #28]
 80098e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098fe:	2b22      	cmp	r3, #34	@ 0x22
 8009900:	f040 8187 	bne.w	8009c12 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800990a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800990e:	e12a      	b.n	8009b66 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009916:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800991e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009922:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009926:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800992a:	4013      	ands	r3, r2
 800992c:	b29a      	uxth	r2, r3
 800992e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009932:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009938:	1c9a      	adds	r2, r3, #2
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009944:	b29b      	uxth	r3, r3
 8009946:	3b01      	subs	r3, #1
 8009948:	b29a      	uxth	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800995a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800995e:	f003 0307 	and.w	r3, r3, #7
 8009962:	2b00      	cmp	r3, #0
 8009964:	d053      	beq.n	8009a0e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009966:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	2b00      	cmp	r3, #0
 8009970:	d011      	beq.n	8009996 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00b      	beq.n	8009996 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2201      	movs	r2, #1
 8009984:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800998c:	f043 0201 	orr.w	r2, r3, #1
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800999a:	f003 0302 	and.w	r3, r3, #2
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d011      	beq.n	80099c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80099a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00b      	beq.n	80099c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2202      	movs	r2, #2
 80099b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099bc:	f043 0204 	orr.w	r2, r3, #4
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80099ca:	f003 0304 	and.w	r3, r3, #4
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d011      	beq.n	80099f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80099d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00b      	beq.n	80099f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2204      	movs	r2, #4
 80099e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099ec:	f043 0202 	orr.w	r2, r3, #2
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d006      	beq.n	8009a0e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7fe fc01 	bl	8008208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f040 80a5 	bne.w	8009b66 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a24:	e853 3f00 	ldrex	r3, [r3]
 8009a28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009a2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a42:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a4a:	e841 2300 	strex	r3, r2, [r1]
 8009a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1e2      	bne.n	8009a1c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3308      	adds	r3, #8
 8009a5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a60:	e853 3f00 	ldrex	r3, [r3]
 8009a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a6c:	f023 0301 	bic.w	r3, r3, #1
 8009a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3308      	adds	r3, #8
 8009a7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009a7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e1      	bne.n	8009a56 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2220      	movs	r2, #32
 8009a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a60      	ldr	r2, [pc, #384]	@ (8009c2c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d021      	beq.n	8009af4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d01a      	beq.n	8009af4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ac6:	e853 3f00 	ldrex	r3, [r3]
 8009aca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ace:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	461a      	mov	r2, r3
 8009adc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ae2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ae6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ae8:	e841 2300 	strex	r3, r2, [r1]
 8009aec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1e4      	bne.n	8009abe <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d130      	bne.n	8009b5e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0a:	e853 3f00 	ldrex	r3, [r3]
 8009b0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b12:	f023 0310 	bic.w	r3, r3, #16
 8009b16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b2c:	e841 2300 	strex	r3, r2, [r1]
 8009b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1e4      	bne.n	8009b02 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	f003 0310 	and.w	r3, r3, #16
 8009b42:	2b10      	cmp	r3, #16
 8009b44:	d103      	bne.n	8009b4e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2210      	movs	r2, #16
 8009b4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b54:	4619      	mov	r1, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7fe fb60 	bl	800821c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009b5c:	e00e      	b.n	8009b7c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7f9 fb0e 	bl	8003180 <HAL_UART_RxCpltCallback>
        break;
 8009b64:	e00a      	b.n	8009b7c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b66:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d006      	beq.n	8009b7c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8009b6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009b72:	f003 0320 	and.w	r3, r3, #32
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f47f aeca 	bne.w	8009910 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b82:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b86:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d049      	beq.n	8009c22 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b94:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d242      	bcs.n	8009c22 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba6:	e853 3f00 	ldrex	r3, [r3]
 8009baa:	623b      	str	r3, [r7, #32]
   return(result);
 8009bac:	6a3b      	ldr	r3, [r7, #32]
 8009bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3308      	adds	r3, #8
 8009bbc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009bc0:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bc8:	e841 2300 	strex	r3, r2, [r1]
 8009bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e3      	bne.n	8009b9c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a16      	ldr	r2, [pc, #88]	@ (8009c30 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009bd8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	e853 3f00 	ldrex	r3, [r3]
 8009be6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f043 0320 	orr.w	r3, r3, #32
 8009bee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009bfc:	61fb      	str	r3, [r7, #28]
 8009bfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c00:	69b9      	ldr	r1, [r7, #24]
 8009c02:	69fa      	ldr	r2, [r7, #28]
 8009c04:	e841 2300 	strex	r3, r2, [r1]
 8009c08:	617b      	str	r3, [r7, #20]
   return(result);
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1e4      	bne.n	8009bda <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c10:	e007      	b.n	8009c22 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	699a      	ldr	r2, [r3, #24]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f042 0208 	orr.w	r2, r2, #8
 8009c20:	619a      	str	r2, [r3, #24]
}
 8009c22:	bf00      	nop
 8009c24:	37b8      	adds	r7, #184	@ 0xb8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	40008000 	.word	0x40008000
 8009c30:	080093ad 	.word	0x080093ad

08009c34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d101      	bne.n	8009c4a <HAL_UARTEx_DisableFifoMode+0x16>
 8009c46:	2302      	movs	r3, #2
 8009c48:	e027      	b.n	8009c9a <HAL_UARTEx_DisableFifoMode+0x66>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2224      	movs	r2, #36	@ 0x24
 8009c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f022 0201 	bic.w	r2, r2, #1
 8009c70:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009c78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b084      	sub	sp, #16
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d101      	bne.n	8009cbe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009cba:	2302      	movs	r3, #2
 8009cbc:	e02d      	b.n	8009d1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2224      	movs	r2, #36	@ 0x24
 8009cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f022 0201 	bic.w	r2, r2, #1
 8009ce4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	683a      	ldr	r2, [r7, #0]
 8009cf6:	430a      	orrs	r2, r1
 8009cf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f850 	bl	8009da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d101      	bne.n	8009d3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d36:	2302      	movs	r3, #2
 8009d38:	e02d      	b.n	8009d96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2224      	movs	r2, #36	@ 0x24
 8009d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f022 0201 	bic.w	r2, r2, #1
 8009d60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	430a      	orrs	r2, r1
 8009d74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f812 	bl	8009da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d108      	bne.n	8009dc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009dc0:	e031      	b.n	8009e26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009dc2:	2308      	movs	r3, #8
 8009dc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009dc6:	2308      	movs	r3, #8
 8009dc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	0e5b      	lsrs	r3, r3, #25
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	f003 0307 	and.w	r3, r3, #7
 8009dd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	0f5b      	lsrs	r3, r3, #29
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	f003 0307 	and.w	r3, r3, #7
 8009de8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009dea:	7bbb      	ldrb	r3, [r7, #14]
 8009dec:	7b3a      	ldrb	r2, [r7, #12]
 8009dee:	4911      	ldr	r1, [pc, #68]	@ (8009e34 <UARTEx_SetNbDataToProcess+0x94>)
 8009df0:	5c8a      	ldrb	r2, [r1, r2]
 8009df2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009df6:	7b3a      	ldrb	r2, [r7, #12]
 8009df8:	490f      	ldr	r1, [pc, #60]	@ (8009e38 <UARTEx_SetNbDataToProcess+0x98>)
 8009dfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
 8009e0a:	7b7a      	ldrb	r2, [r7, #13]
 8009e0c:	4909      	ldr	r1, [pc, #36]	@ (8009e34 <UARTEx_SetNbDataToProcess+0x94>)
 8009e0e:	5c8a      	ldrb	r2, [r1, r2]
 8009e10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e14:	7b7a      	ldrb	r2, [r7, #13]
 8009e16:	4908      	ldr	r1, [pc, #32]	@ (8009e38 <UARTEx_SetNbDataToProcess+0x98>)
 8009e18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009e26:	bf00      	nop
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	0800aaa8 	.word	0x0800aaa8
 8009e38:	0800aab0 	.word	0x0800aab0

08009e3c <siprintf>:
 8009e3c:	b40e      	push	{r1, r2, r3}
 8009e3e:	b500      	push	{lr}
 8009e40:	b09c      	sub	sp, #112	@ 0x70
 8009e42:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e44:	9002      	str	r0, [sp, #8]
 8009e46:	9006      	str	r0, [sp, #24]
 8009e48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e4c:	4809      	ldr	r0, [pc, #36]	@ (8009e74 <siprintf+0x38>)
 8009e4e:	9107      	str	r1, [sp, #28]
 8009e50:	9104      	str	r1, [sp, #16]
 8009e52:	4909      	ldr	r1, [pc, #36]	@ (8009e78 <siprintf+0x3c>)
 8009e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e58:	9105      	str	r1, [sp, #20]
 8009e5a:	6800      	ldr	r0, [r0, #0]
 8009e5c:	9301      	str	r3, [sp, #4]
 8009e5e:	a902      	add	r1, sp, #8
 8009e60:	f000 f9a4 	bl	800a1ac <_svfiprintf_r>
 8009e64:	9b02      	ldr	r3, [sp, #8]
 8009e66:	2200      	movs	r2, #0
 8009e68:	701a      	strb	r2, [r3, #0]
 8009e6a:	b01c      	add	sp, #112	@ 0x70
 8009e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e70:	b003      	add	sp, #12
 8009e72:	4770      	bx	lr
 8009e74:	20000014 	.word	0x20000014
 8009e78:	ffff0208 	.word	0xffff0208

08009e7c <memset>:
 8009e7c:	4402      	add	r2, r0
 8009e7e:	4603      	mov	r3, r0
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d100      	bne.n	8009e86 <memset+0xa>
 8009e84:	4770      	bx	lr
 8009e86:	f803 1b01 	strb.w	r1, [r3], #1
 8009e8a:	e7f9      	b.n	8009e80 <memset+0x4>

08009e8c <strcat>:
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	4602      	mov	r2, r0
 8009e90:	7814      	ldrb	r4, [r2, #0]
 8009e92:	4613      	mov	r3, r2
 8009e94:	3201      	adds	r2, #1
 8009e96:	2c00      	cmp	r4, #0
 8009e98:	d1fa      	bne.n	8009e90 <strcat+0x4>
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ea0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ea4:	2a00      	cmp	r2, #0
 8009ea6:	d1f9      	bne.n	8009e9c <strcat+0x10>
 8009ea8:	bd10      	pop	{r4, pc}
	...

08009eac <__errno>:
 8009eac:	4b01      	ldr	r3, [pc, #4]	@ (8009eb4 <__errno+0x8>)
 8009eae:	6818      	ldr	r0, [r3, #0]
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	20000014 	.word	0x20000014

08009eb8 <__libc_init_array>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	4d0d      	ldr	r5, [pc, #52]	@ (8009ef0 <__libc_init_array+0x38>)
 8009ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8009ef4 <__libc_init_array+0x3c>)
 8009ebe:	1b64      	subs	r4, r4, r5
 8009ec0:	10a4      	asrs	r4, r4, #2
 8009ec2:	2600      	movs	r6, #0
 8009ec4:	42a6      	cmp	r6, r4
 8009ec6:	d109      	bne.n	8009edc <__libc_init_array+0x24>
 8009ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8009ef8 <__libc_init_array+0x40>)
 8009eca:	4c0c      	ldr	r4, [pc, #48]	@ (8009efc <__libc_init_array+0x44>)
 8009ecc:	f000 fc66 	bl	800a79c <_init>
 8009ed0:	1b64      	subs	r4, r4, r5
 8009ed2:	10a4      	asrs	r4, r4, #2
 8009ed4:	2600      	movs	r6, #0
 8009ed6:	42a6      	cmp	r6, r4
 8009ed8:	d105      	bne.n	8009ee6 <__libc_init_array+0x2e>
 8009eda:	bd70      	pop	{r4, r5, r6, pc}
 8009edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee0:	4798      	blx	r3
 8009ee2:	3601      	adds	r6, #1
 8009ee4:	e7ee      	b.n	8009ec4 <__libc_init_array+0xc>
 8009ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eea:	4798      	blx	r3
 8009eec:	3601      	adds	r6, #1
 8009eee:	e7f2      	b.n	8009ed6 <__libc_init_array+0x1e>
 8009ef0:	0800aaf4 	.word	0x0800aaf4
 8009ef4:	0800aaf4 	.word	0x0800aaf4
 8009ef8:	0800aaf4 	.word	0x0800aaf4
 8009efc:	0800aaf8 	.word	0x0800aaf8

08009f00 <__retarget_lock_acquire_recursive>:
 8009f00:	4770      	bx	lr

08009f02 <__retarget_lock_release_recursive>:
 8009f02:	4770      	bx	lr

08009f04 <_free_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4605      	mov	r5, r0
 8009f08:	2900      	cmp	r1, #0
 8009f0a:	d041      	beq.n	8009f90 <_free_r+0x8c>
 8009f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f10:	1f0c      	subs	r4, r1, #4
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	bfb8      	it	lt
 8009f16:	18e4      	addlt	r4, r4, r3
 8009f18:	f000 f8e0 	bl	800a0dc <__malloc_lock>
 8009f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8009f94 <_free_r+0x90>)
 8009f1e:	6813      	ldr	r3, [r2, #0]
 8009f20:	b933      	cbnz	r3, 8009f30 <_free_r+0x2c>
 8009f22:	6063      	str	r3, [r4, #4]
 8009f24:	6014      	str	r4, [r2, #0]
 8009f26:	4628      	mov	r0, r5
 8009f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f2c:	f000 b8dc 	b.w	800a0e8 <__malloc_unlock>
 8009f30:	42a3      	cmp	r3, r4
 8009f32:	d908      	bls.n	8009f46 <_free_r+0x42>
 8009f34:	6820      	ldr	r0, [r4, #0]
 8009f36:	1821      	adds	r1, r4, r0
 8009f38:	428b      	cmp	r3, r1
 8009f3a:	bf01      	itttt	eq
 8009f3c:	6819      	ldreq	r1, [r3, #0]
 8009f3e:	685b      	ldreq	r3, [r3, #4]
 8009f40:	1809      	addeq	r1, r1, r0
 8009f42:	6021      	streq	r1, [r4, #0]
 8009f44:	e7ed      	b.n	8009f22 <_free_r+0x1e>
 8009f46:	461a      	mov	r2, r3
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	b10b      	cbz	r3, 8009f50 <_free_r+0x4c>
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	d9fa      	bls.n	8009f46 <_free_r+0x42>
 8009f50:	6811      	ldr	r1, [r2, #0]
 8009f52:	1850      	adds	r0, r2, r1
 8009f54:	42a0      	cmp	r0, r4
 8009f56:	d10b      	bne.n	8009f70 <_free_r+0x6c>
 8009f58:	6820      	ldr	r0, [r4, #0]
 8009f5a:	4401      	add	r1, r0
 8009f5c:	1850      	adds	r0, r2, r1
 8009f5e:	4283      	cmp	r3, r0
 8009f60:	6011      	str	r1, [r2, #0]
 8009f62:	d1e0      	bne.n	8009f26 <_free_r+0x22>
 8009f64:	6818      	ldr	r0, [r3, #0]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	6053      	str	r3, [r2, #4]
 8009f6a:	4408      	add	r0, r1
 8009f6c:	6010      	str	r0, [r2, #0]
 8009f6e:	e7da      	b.n	8009f26 <_free_r+0x22>
 8009f70:	d902      	bls.n	8009f78 <_free_r+0x74>
 8009f72:	230c      	movs	r3, #12
 8009f74:	602b      	str	r3, [r5, #0]
 8009f76:	e7d6      	b.n	8009f26 <_free_r+0x22>
 8009f78:	6820      	ldr	r0, [r4, #0]
 8009f7a:	1821      	adds	r1, r4, r0
 8009f7c:	428b      	cmp	r3, r1
 8009f7e:	bf04      	itt	eq
 8009f80:	6819      	ldreq	r1, [r3, #0]
 8009f82:	685b      	ldreq	r3, [r3, #4]
 8009f84:	6063      	str	r3, [r4, #4]
 8009f86:	bf04      	itt	eq
 8009f88:	1809      	addeq	r1, r1, r0
 8009f8a:	6021      	streq	r1, [r4, #0]
 8009f8c:	6054      	str	r4, [r2, #4]
 8009f8e:	e7ca      	b.n	8009f26 <_free_r+0x22>
 8009f90:	bd38      	pop	{r3, r4, r5, pc}
 8009f92:	bf00      	nop
 8009f94:	2000152c 	.word	0x2000152c

08009f98 <sbrk_aligned>:
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	4e0f      	ldr	r6, [pc, #60]	@ (8009fd8 <sbrk_aligned+0x40>)
 8009f9c:	460c      	mov	r4, r1
 8009f9e:	6831      	ldr	r1, [r6, #0]
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	b911      	cbnz	r1, 8009faa <sbrk_aligned+0x12>
 8009fa4:	f000 fba6 	bl	800a6f4 <_sbrk_r>
 8009fa8:	6030      	str	r0, [r6, #0]
 8009faa:	4621      	mov	r1, r4
 8009fac:	4628      	mov	r0, r5
 8009fae:	f000 fba1 	bl	800a6f4 <_sbrk_r>
 8009fb2:	1c43      	adds	r3, r0, #1
 8009fb4:	d103      	bne.n	8009fbe <sbrk_aligned+0x26>
 8009fb6:	f04f 34ff 	mov.w	r4, #4294967295
 8009fba:	4620      	mov	r0, r4
 8009fbc:	bd70      	pop	{r4, r5, r6, pc}
 8009fbe:	1cc4      	adds	r4, r0, #3
 8009fc0:	f024 0403 	bic.w	r4, r4, #3
 8009fc4:	42a0      	cmp	r0, r4
 8009fc6:	d0f8      	beq.n	8009fba <sbrk_aligned+0x22>
 8009fc8:	1a21      	subs	r1, r4, r0
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f000 fb92 	bl	800a6f4 <_sbrk_r>
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d1f2      	bne.n	8009fba <sbrk_aligned+0x22>
 8009fd4:	e7ef      	b.n	8009fb6 <sbrk_aligned+0x1e>
 8009fd6:	bf00      	nop
 8009fd8:	20001528 	.word	0x20001528

08009fdc <_malloc_r>:
 8009fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe0:	1ccd      	adds	r5, r1, #3
 8009fe2:	f025 0503 	bic.w	r5, r5, #3
 8009fe6:	3508      	adds	r5, #8
 8009fe8:	2d0c      	cmp	r5, #12
 8009fea:	bf38      	it	cc
 8009fec:	250c      	movcc	r5, #12
 8009fee:	2d00      	cmp	r5, #0
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	db01      	blt.n	8009ff8 <_malloc_r+0x1c>
 8009ff4:	42a9      	cmp	r1, r5
 8009ff6:	d904      	bls.n	800a002 <_malloc_r+0x26>
 8009ff8:	230c      	movs	r3, #12
 8009ffa:	6033      	str	r3, [r6, #0]
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a002:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0d8 <_malloc_r+0xfc>
 800a006:	f000 f869 	bl	800a0dc <__malloc_lock>
 800a00a:	f8d8 3000 	ldr.w	r3, [r8]
 800a00e:	461c      	mov	r4, r3
 800a010:	bb44      	cbnz	r4, 800a064 <_malloc_r+0x88>
 800a012:	4629      	mov	r1, r5
 800a014:	4630      	mov	r0, r6
 800a016:	f7ff ffbf 	bl	8009f98 <sbrk_aligned>
 800a01a:	1c43      	adds	r3, r0, #1
 800a01c:	4604      	mov	r4, r0
 800a01e:	d158      	bne.n	800a0d2 <_malloc_r+0xf6>
 800a020:	f8d8 4000 	ldr.w	r4, [r8]
 800a024:	4627      	mov	r7, r4
 800a026:	2f00      	cmp	r7, #0
 800a028:	d143      	bne.n	800a0b2 <_malloc_r+0xd6>
 800a02a:	2c00      	cmp	r4, #0
 800a02c:	d04b      	beq.n	800a0c6 <_malloc_r+0xea>
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	4639      	mov	r1, r7
 800a032:	4630      	mov	r0, r6
 800a034:	eb04 0903 	add.w	r9, r4, r3
 800a038:	f000 fb5c 	bl	800a6f4 <_sbrk_r>
 800a03c:	4581      	cmp	r9, r0
 800a03e:	d142      	bne.n	800a0c6 <_malloc_r+0xea>
 800a040:	6821      	ldr	r1, [r4, #0]
 800a042:	1a6d      	subs	r5, r5, r1
 800a044:	4629      	mov	r1, r5
 800a046:	4630      	mov	r0, r6
 800a048:	f7ff ffa6 	bl	8009f98 <sbrk_aligned>
 800a04c:	3001      	adds	r0, #1
 800a04e:	d03a      	beq.n	800a0c6 <_malloc_r+0xea>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	442b      	add	r3, r5
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	f8d8 3000 	ldr.w	r3, [r8]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	bb62      	cbnz	r2, 800a0b8 <_malloc_r+0xdc>
 800a05e:	f8c8 7000 	str.w	r7, [r8]
 800a062:	e00f      	b.n	800a084 <_malloc_r+0xa8>
 800a064:	6822      	ldr	r2, [r4, #0]
 800a066:	1b52      	subs	r2, r2, r5
 800a068:	d420      	bmi.n	800a0ac <_malloc_r+0xd0>
 800a06a:	2a0b      	cmp	r2, #11
 800a06c:	d917      	bls.n	800a09e <_malloc_r+0xc2>
 800a06e:	1961      	adds	r1, r4, r5
 800a070:	42a3      	cmp	r3, r4
 800a072:	6025      	str	r5, [r4, #0]
 800a074:	bf18      	it	ne
 800a076:	6059      	strne	r1, [r3, #4]
 800a078:	6863      	ldr	r3, [r4, #4]
 800a07a:	bf08      	it	eq
 800a07c:	f8c8 1000 	streq.w	r1, [r8]
 800a080:	5162      	str	r2, [r4, r5]
 800a082:	604b      	str	r3, [r1, #4]
 800a084:	4630      	mov	r0, r6
 800a086:	f000 f82f 	bl	800a0e8 <__malloc_unlock>
 800a08a:	f104 000b 	add.w	r0, r4, #11
 800a08e:	1d23      	adds	r3, r4, #4
 800a090:	f020 0007 	bic.w	r0, r0, #7
 800a094:	1ac2      	subs	r2, r0, r3
 800a096:	bf1c      	itt	ne
 800a098:	1a1b      	subne	r3, r3, r0
 800a09a:	50a3      	strne	r3, [r4, r2]
 800a09c:	e7af      	b.n	8009ffe <_malloc_r+0x22>
 800a09e:	6862      	ldr	r2, [r4, #4]
 800a0a0:	42a3      	cmp	r3, r4
 800a0a2:	bf0c      	ite	eq
 800a0a4:	f8c8 2000 	streq.w	r2, [r8]
 800a0a8:	605a      	strne	r2, [r3, #4]
 800a0aa:	e7eb      	b.n	800a084 <_malloc_r+0xa8>
 800a0ac:	4623      	mov	r3, r4
 800a0ae:	6864      	ldr	r4, [r4, #4]
 800a0b0:	e7ae      	b.n	800a010 <_malloc_r+0x34>
 800a0b2:	463c      	mov	r4, r7
 800a0b4:	687f      	ldr	r7, [r7, #4]
 800a0b6:	e7b6      	b.n	800a026 <_malloc_r+0x4a>
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	42a3      	cmp	r3, r4
 800a0be:	d1fb      	bne.n	800a0b8 <_malloc_r+0xdc>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	6053      	str	r3, [r2, #4]
 800a0c4:	e7de      	b.n	800a084 <_malloc_r+0xa8>
 800a0c6:	230c      	movs	r3, #12
 800a0c8:	6033      	str	r3, [r6, #0]
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f000 f80c 	bl	800a0e8 <__malloc_unlock>
 800a0d0:	e794      	b.n	8009ffc <_malloc_r+0x20>
 800a0d2:	6005      	str	r5, [r0, #0]
 800a0d4:	e7d6      	b.n	800a084 <_malloc_r+0xa8>
 800a0d6:	bf00      	nop
 800a0d8:	2000152c 	.word	0x2000152c

0800a0dc <__malloc_lock>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	@ (800a0e4 <__malloc_lock+0x8>)
 800a0de:	f7ff bf0f 	b.w	8009f00 <__retarget_lock_acquire_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	20001524 	.word	0x20001524

0800a0e8 <__malloc_unlock>:
 800a0e8:	4801      	ldr	r0, [pc, #4]	@ (800a0f0 <__malloc_unlock+0x8>)
 800a0ea:	f7ff bf0a 	b.w	8009f02 <__retarget_lock_release_recursive>
 800a0ee:	bf00      	nop
 800a0f0:	20001524 	.word	0x20001524

0800a0f4 <__ssputs_r>:
 800a0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f8:	688e      	ldr	r6, [r1, #8]
 800a0fa:	461f      	mov	r7, r3
 800a0fc:	42be      	cmp	r6, r7
 800a0fe:	680b      	ldr	r3, [r1, #0]
 800a100:	4682      	mov	sl, r0
 800a102:	460c      	mov	r4, r1
 800a104:	4690      	mov	r8, r2
 800a106:	d82d      	bhi.n	800a164 <__ssputs_r+0x70>
 800a108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a10c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a110:	d026      	beq.n	800a160 <__ssputs_r+0x6c>
 800a112:	6965      	ldr	r5, [r4, #20]
 800a114:	6909      	ldr	r1, [r1, #16]
 800a116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a11a:	eba3 0901 	sub.w	r9, r3, r1
 800a11e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a122:	1c7b      	adds	r3, r7, #1
 800a124:	444b      	add	r3, r9
 800a126:	106d      	asrs	r5, r5, #1
 800a128:	429d      	cmp	r5, r3
 800a12a:	bf38      	it	cc
 800a12c:	461d      	movcc	r5, r3
 800a12e:	0553      	lsls	r3, r2, #21
 800a130:	d527      	bpl.n	800a182 <__ssputs_r+0x8e>
 800a132:	4629      	mov	r1, r5
 800a134:	f7ff ff52 	bl	8009fdc <_malloc_r>
 800a138:	4606      	mov	r6, r0
 800a13a:	b360      	cbz	r0, 800a196 <__ssputs_r+0xa2>
 800a13c:	6921      	ldr	r1, [r4, #16]
 800a13e:	464a      	mov	r2, r9
 800a140:	f000 fae8 	bl	800a714 <memcpy>
 800a144:	89a3      	ldrh	r3, [r4, #12]
 800a146:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a14a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a14e:	81a3      	strh	r3, [r4, #12]
 800a150:	6126      	str	r6, [r4, #16]
 800a152:	6165      	str	r5, [r4, #20]
 800a154:	444e      	add	r6, r9
 800a156:	eba5 0509 	sub.w	r5, r5, r9
 800a15a:	6026      	str	r6, [r4, #0]
 800a15c:	60a5      	str	r5, [r4, #8]
 800a15e:	463e      	mov	r6, r7
 800a160:	42be      	cmp	r6, r7
 800a162:	d900      	bls.n	800a166 <__ssputs_r+0x72>
 800a164:	463e      	mov	r6, r7
 800a166:	6820      	ldr	r0, [r4, #0]
 800a168:	4632      	mov	r2, r6
 800a16a:	4641      	mov	r1, r8
 800a16c:	f000 faa8 	bl	800a6c0 <memmove>
 800a170:	68a3      	ldr	r3, [r4, #8]
 800a172:	1b9b      	subs	r3, r3, r6
 800a174:	60a3      	str	r3, [r4, #8]
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	4433      	add	r3, r6
 800a17a:	6023      	str	r3, [r4, #0]
 800a17c:	2000      	movs	r0, #0
 800a17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a182:	462a      	mov	r2, r5
 800a184:	f000 fad4 	bl	800a730 <_realloc_r>
 800a188:	4606      	mov	r6, r0
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d1e0      	bne.n	800a150 <__ssputs_r+0x5c>
 800a18e:	6921      	ldr	r1, [r4, #16]
 800a190:	4650      	mov	r0, sl
 800a192:	f7ff feb7 	bl	8009f04 <_free_r>
 800a196:	230c      	movs	r3, #12
 800a198:	f8ca 3000 	str.w	r3, [sl]
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a8:	e7e9      	b.n	800a17e <__ssputs_r+0x8a>
	...

0800a1ac <_svfiprintf_r>:
 800a1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b0:	4698      	mov	r8, r3
 800a1b2:	898b      	ldrh	r3, [r1, #12]
 800a1b4:	061b      	lsls	r3, r3, #24
 800a1b6:	b09d      	sub	sp, #116	@ 0x74
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	460d      	mov	r5, r1
 800a1bc:	4614      	mov	r4, r2
 800a1be:	d510      	bpl.n	800a1e2 <_svfiprintf_r+0x36>
 800a1c0:	690b      	ldr	r3, [r1, #16]
 800a1c2:	b973      	cbnz	r3, 800a1e2 <_svfiprintf_r+0x36>
 800a1c4:	2140      	movs	r1, #64	@ 0x40
 800a1c6:	f7ff ff09 	bl	8009fdc <_malloc_r>
 800a1ca:	6028      	str	r0, [r5, #0]
 800a1cc:	6128      	str	r0, [r5, #16]
 800a1ce:	b930      	cbnz	r0, 800a1de <_svfiprintf_r+0x32>
 800a1d0:	230c      	movs	r3, #12
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d8:	b01d      	add	sp, #116	@ 0x74
 800a1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1de:	2340      	movs	r3, #64	@ 0x40
 800a1e0:	616b      	str	r3, [r5, #20]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1e6:	2320      	movs	r3, #32
 800a1e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1f0:	2330      	movs	r3, #48	@ 0x30
 800a1f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a390 <_svfiprintf_r+0x1e4>
 800a1f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1fa:	f04f 0901 	mov.w	r9, #1
 800a1fe:	4623      	mov	r3, r4
 800a200:	469a      	mov	sl, r3
 800a202:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a206:	b10a      	cbz	r2, 800a20c <_svfiprintf_r+0x60>
 800a208:	2a25      	cmp	r2, #37	@ 0x25
 800a20a:	d1f9      	bne.n	800a200 <_svfiprintf_r+0x54>
 800a20c:	ebba 0b04 	subs.w	fp, sl, r4
 800a210:	d00b      	beq.n	800a22a <_svfiprintf_r+0x7e>
 800a212:	465b      	mov	r3, fp
 800a214:	4622      	mov	r2, r4
 800a216:	4629      	mov	r1, r5
 800a218:	4638      	mov	r0, r7
 800a21a:	f7ff ff6b 	bl	800a0f4 <__ssputs_r>
 800a21e:	3001      	adds	r0, #1
 800a220:	f000 80a7 	beq.w	800a372 <_svfiprintf_r+0x1c6>
 800a224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a226:	445a      	add	r2, fp
 800a228:	9209      	str	r2, [sp, #36]	@ 0x24
 800a22a:	f89a 3000 	ldrb.w	r3, [sl]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f000 809f 	beq.w	800a372 <_svfiprintf_r+0x1c6>
 800a234:	2300      	movs	r3, #0
 800a236:	f04f 32ff 	mov.w	r2, #4294967295
 800a23a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a23e:	f10a 0a01 	add.w	sl, sl, #1
 800a242:	9304      	str	r3, [sp, #16]
 800a244:	9307      	str	r3, [sp, #28]
 800a246:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a24a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a24c:	4654      	mov	r4, sl
 800a24e:	2205      	movs	r2, #5
 800a250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a254:	484e      	ldr	r0, [pc, #312]	@ (800a390 <_svfiprintf_r+0x1e4>)
 800a256:	f7f5 fffb 	bl	8000250 <memchr>
 800a25a:	9a04      	ldr	r2, [sp, #16]
 800a25c:	b9d8      	cbnz	r0, 800a296 <_svfiprintf_r+0xea>
 800a25e:	06d0      	lsls	r0, r2, #27
 800a260:	bf44      	itt	mi
 800a262:	2320      	movmi	r3, #32
 800a264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a268:	0711      	lsls	r1, r2, #28
 800a26a:	bf44      	itt	mi
 800a26c:	232b      	movmi	r3, #43	@ 0x2b
 800a26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a272:	f89a 3000 	ldrb.w	r3, [sl]
 800a276:	2b2a      	cmp	r3, #42	@ 0x2a
 800a278:	d015      	beq.n	800a2a6 <_svfiprintf_r+0xfa>
 800a27a:	9a07      	ldr	r2, [sp, #28]
 800a27c:	4654      	mov	r4, sl
 800a27e:	2000      	movs	r0, #0
 800a280:	f04f 0c0a 	mov.w	ip, #10
 800a284:	4621      	mov	r1, r4
 800a286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a28a:	3b30      	subs	r3, #48	@ 0x30
 800a28c:	2b09      	cmp	r3, #9
 800a28e:	d94b      	bls.n	800a328 <_svfiprintf_r+0x17c>
 800a290:	b1b0      	cbz	r0, 800a2c0 <_svfiprintf_r+0x114>
 800a292:	9207      	str	r2, [sp, #28]
 800a294:	e014      	b.n	800a2c0 <_svfiprintf_r+0x114>
 800a296:	eba0 0308 	sub.w	r3, r0, r8
 800a29a:	fa09 f303 	lsl.w	r3, r9, r3
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	9304      	str	r3, [sp, #16]
 800a2a2:	46a2      	mov	sl, r4
 800a2a4:	e7d2      	b.n	800a24c <_svfiprintf_r+0xa0>
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	1d19      	adds	r1, r3, #4
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	9103      	str	r1, [sp, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	bfbb      	ittet	lt
 800a2b2:	425b      	neglt	r3, r3
 800a2b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a2b8:	9307      	strge	r3, [sp, #28]
 800a2ba:	9307      	strlt	r3, [sp, #28]
 800a2bc:	bfb8      	it	lt
 800a2be:	9204      	strlt	r2, [sp, #16]
 800a2c0:	7823      	ldrb	r3, [r4, #0]
 800a2c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2c4:	d10a      	bne.n	800a2dc <_svfiprintf_r+0x130>
 800a2c6:	7863      	ldrb	r3, [r4, #1]
 800a2c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2ca:	d132      	bne.n	800a332 <_svfiprintf_r+0x186>
 800a2cc:	9b03      	ldr	r3, [sp, #12]
 800a2ce:	1d1a      	adds	r2, r3, #4
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	9203      	str	r2, [sp, #12]
 800a2d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2d8:	3402      	adds	r4, #2
 800a2da:	9305      	str	r3, [sp, #20]
 800a2dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a3a0 <_svfiprintf_r+0x1f4>
 800a2e0:	7821      	ldrb	r1, [r4, #0]
 800a2e2:	2203      	movs	r2, #3
 800a2e4:	4650      	mov	r0, sl
 800a2e6:	f7f5 ffb3 	bl	8000250 <memchr>
 800a2ea:	b138      	cbz	r0, 800a2fc <_svfiprintf_r+0x150>
 800a2ec:	9b04      	ldr	r3, [sp, #16]
 800a2ee:	eba0 000a 	sub.w	r0, r0, sl
 800a2f2:	2240      	movs	r2, #64	@ 0x40
 800a2f4:	4082      	lsls	r2, r0
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	3401      	adds	r4, #1
 800a2fa:	9304      	str	r3, [sp, #16]
 800a2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a300:	4824      	ldr	r0, [pc, #144]	@ (800a394 <_svfiprintf_r+0x1e8>)
 800a302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a306:	2206      	movs	r2, #6
 800a308:	f7f5 ffa2 	bl	8000250 <memchr>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d036      	beq.n	800a37e <_svfiprintf_r+0x1d2>
 800a310:	4b21      	ldr	r3, [pc, #132]	@ (800a398 <_svfiprintf_r+0x1ec>)
 800a312:	bb1b      	cbnz	r3, 800a35c <_svfiprintf_r+0x1b0>
 800a314:	9b03      	ldr	r3, [sp, #12]
 800a316:	3307      	adds	r3, #7
 800a318:	f023 0307 	bic.w	r3, r3, #7
 800a31c:	3308      	adds	r3, #8
 800a31e:	9303      	str	r3, [sp, #12]
 800a320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a322:	4433      	add	r3, r6
 800a324:	9309      	str	r3, [sp, #36]	@ 0x24
 800a326:	e76a      	b.n	800a1fe <_svfiprintf_r+0x52>
 800a328:	fb0c 3202 	mla	r2, ip, r2, r3
 800a32c:	460c      	mov	r4, r1
 800a32e:	2001      	movs	r0, #1
 800a330:	e7a8      	b.n	800a284 <_svfiprintf_r+0xd8>
 800a332:	2300      	movs	r3, #0
 800a334:	3401      	adds	r4, #1
 800a336:	9305      	str	r3, [sp, #20]
 800a338:	4619      	mov	r1, r3
 800a33a:	f04f 0c0a 	mov.w	ip, #10
 800a33e:	4620      	mov	r0, r4
 800a340:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a344:	3a30      	subs	r2, #48	@ 0x30
 800a346:	2a09      	cmp	r2, #9
 800a348:	d903      	bls.n	800a352 <_svfiprintf_r+0x1a6>
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d0c6      	beq.n	800a2dc <_svfiprintf_r+0x130>
 800a34e:	9105      	str	r1, [sp, #20]
 800a350:	e7c4      	b.n	800a2dc <_svfiprintf_r+0x130>
 800a352:	fb0c 2101 	mla	r1, ip, r1, r2
 800a356:	4604      	mov	r4, r0
 800a358:	2301      	movs	r3, #1
 800a35a:	e7f0      	b.n	800a33e <_svfiprintf_r+0x192>
 800a35c:	ab03      	add	r3, sp, #12
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	462a      	mov	r2, r5
 800a362:	4b0e      	ldr	r3, [pc, #56]	@ (800a39c <_svfiprintf_r+0x1f0>)
 800a364:	a904      	add	r1, sp, #16
 800a366:	4638      	mov	r0, r7
 800a368:	f3af 8000 	nop.w
 800a36c:	1c42      	adds	r2, r0, #1
 800a36e:	4606      	mov	r6, r0
 800a370:	d1d6      	bne.n	800a320 <_svfiprintf_r+0x174>
 800a372:	89ab      	ldrh	r3, [r5, #12]
 800a374:	065b      	lsls	r3, r3, #25
 800a376:	f53f af2d 	bmi.w	800a1d4 <_svfiprintf_r+0x28>
 800a37a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a37c:	e72c      	b.n	800a1d8 <_svfiprintf_r+0x2c>
 800a37e:	ab03      	add	r3, sp, #12
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	462a      	mov	r2, r5
 800a384:	4b05      	ldr	r3, [pc, #20]	@ (800a39c <_svfiprintf_r+0x1f0>)
 800a386:	a904      	add	r1, sp, #16
 800a388:	4638      	mov	r0, r7
 800a38a:	f000 f879 	bl	800a480 <_printf_i>
 800a38e:	e7ed      	b.n	800a36c <_svfiprintf_r+0x1c0>
 800a390:	0800aab8 	.word	0x0800aab8
 800a394:	0800aac2 	.word	0x0800aac2
 800a398:	00000000 	.word	0x00000000
 800a39c:	0800a0f5 	.word	0x0800a0f5
 800a3a0:	0800aabe 	.word	0x0800aabe

0800a3a4 <_printf_common>:
 800a3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a8:	4616      	mov	r6, r2
 800a3aa:	4698      	mov	r8, r3
 800a3ac:	688a      	ldr	r2, [r1, #8]
 800a3ae:	690b      	ldr	r3, [r1, #16]
 800a3b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	bfb8      	it	lt
 800a3b8:	4613      	movlt	r3, r2
 800a3ba:	6033      	str	r3, [r6, #0]
 800a3bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3c0:	4607      	mov	r7, r0
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	b10a      	cbz	r2, 800a3ca <_printf_common+0x26>
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	6033      	str	r3, [r6, #0]
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	0699      	lsls	r1, r3, #26
 800a3ce:	bf42      	ittt	mi
 800a3d0:	6833      	ldrmi	r3, [r6, #0]
 800a3d2:	3302      	addmi	r3, #2
 800a3d4:	6033      	strmi	r3, [r6, #0]
 800a3d6:	6825      	ldr	r5, [r4, #0]
 800a3d8:	f015 0506 	ands.w	r5, r5, #6
 800a3dc:	d106      	bne.n	800a3ec <_printf_common+0x48>
 800a3de:	f104 0a19 	add.w	sl, r4, #25
 800a3e2:	68e3      	ldr	r3, [r4, #12]
 800a3e4:	6832      	ldr	r2, [r6, #0]
 800a3e6:	1a9b      	subs	r3, r3, r2
 800a3e8:	42ab      	cmp	r3, r5
 800a3ea:	dc26      	bgt.n	800a43a <_printf_common+0x96>
 800a3ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3f0:	6822      	ldr	r2, [r4, #0]
 800a3f2:	3b00      	subs	r3, #0
 800a3f4:	bf18      	it	ne
 800a3f6:	2301      	movne	r3, #1
 800a3f8:	0692      	lsls	r2, r2, #26
 800a3fa:	d42b      	bmi.n	800a454 <_printf_common+0xb0>
 800a3fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a400:	4641      	mov	r1, r8
 800a402:	4638      	mov	r0, r7
 800a404:	47c8      	blx	r9
 800a406:	3001      	adds	r0, #1
 800a408:	d01e      	beq.n	800a448 <_printf_common+0xa4>
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	6922      	ldr	r2, [r4, #16]
 800a40e:	f003 0306 	and.w	r3, r3, #6
 800a412:	2b04      	cmp	r3, #4
 800a414:	bf02      	ittt	eq
 800a416:	68e5      	ldreq	r5, [r4, #12]
 800a418:	6833      	ldreq	r3, [r6, #0]
 800a41a:	1aed      	subeq	r5, r5, r3
 800a41c:	68a3      	ldr	r3, [r4, #8]
 800a41e:	bf0c      	ite	eq
 800a420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a424:	2500      	movne	r5, #0
 800a426:	4293      	cmp	r3, r2
 800a428:	bfc4      	itt	gt
 800a42a:	1a9b      	subgt	r3, r3, r2
 800a42c:	18ed      	addgt	r5, r5, r3
 800a42e:	2600      	movs	r6, #0
 800a430:	341a      	adds	r4, #26
 800a432:	42b5      	cmp	r5, r6
 800a434:	d11a      	bne.n	800a46c <_printf_common+0xc8>
 800a436:	2000      	movs	r0, #0
 800a438:	e008      	b.n	800a44c <_printf_common+0xa8>
 800a43a:	2301      	movs	r3, #1
 800a43c:	4652      	mov	r2, sl
 800a43e:	4641      	mov	r1, r8
 800a440:	4638      	mov	r0, r7
 800a442:	47c8      	blx	r9
 800a444:	3001      	adds	r0, #1
 800a446:	d103      	bne.n	800a450 <_printf_common+0xac>
 800a448:	f04f 30ff 	mov.w	r0, #4294967295
 800a44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a450:	3501      	adds	r5, #1
 800a452:	e7c6      	b.n	800a3e2 <_printf_common+0x3e>
 800a454:	18e1      	adds	r1, r4, r3
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	2030      	movs	r0, #48	@ 0x30
 800a45a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a45e:	4422      	add	r2, r4
 800a460:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a464:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a468:	3302      	adds	r3, #2
 800a46a:	e7c7      	b.n	800a3fc <_printf_common+0x58>
 800a46c:	2301      	movs	r3, #1
 800a46e:	4622      	mov	r2, r4
 800a470:	4641      	mov	r1, r8
 800a472:	4638      	mov	r0, r7
 800a474:	47c8      	blx	r9
 800a476:	3001      	adds	r0, #1
 800a478:	d0e6      	beq.n	800a448 <_printf_common+0xa4>
 800a47a:	3601      	adds	r6, #1
 800a47c:	e7d9      	b.n	800a432 <_printf_common+0x8e>
	...

0800a480 <_printf_i>:
 800a480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a484:	7e0f      	ldrb	r7, [r1, #24]
 800a486:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a488:	2f78      	cmp	r7, #120	@ 0x78
 800a48a:	4691      	mov	r9, r2
 800a48c:	4680      	mov	r8, r0
 800a48e:	460c      	mov	r4, r1
 800a490:	469a      	mov	sl, r3
 800a492:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a496:	d807      	bhi.n	800a4a8 <_printf_i+0x28>
 800a498:	2f62      	cmp	r7, #98	@ 0x62
 800a49a:	d80a      	bhi.n	800a4b2 <_printf_i+0x32>
 800a49c:	2f00      	cmp	r7, #0
 800a49e:	f000 80d2 	beq.w	800a646 <_printf_i+0x1c6>
 800a4a2:	2f58      	cmp	r7, #88	@ 0x58
 800a4a4:	f000 80b9 	beq.w	800a61a <_printf_i+0x19a>
 800a4a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4b0:	e03a      	b.n	800a528 <_printf_i+0xa8>
 800a4b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4b6:	2b15      	cmp	r3, #21
 800a4b8:	d8f6      	bhi.n	800a4a8 <_printf_i+0x28>
 800a4ba:	a101      	add	r1, pc, #4	@ (adr r1, 800a4c0 <_printf_i+0x40>)
 800a4bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4c0:	0800a519 	.word	0x0800a519
 800a4c4:	0800a52d 	.word	0x0800a52d
 800a4c8:	0800a4a9 	.word	0x0800a4a9
 800a4cc:	0800a4a9 	.word	0x0800a4a9
 800a4d0:	0800a4a9 	.word	0x0800a4a9
 800a4d4:	0800a4a9 	.word	0x0800a4a9
 800a4d8:	0800a52d 	.word	0x0800a52d
 800a4dc:	0800a4a9 	.word	0x0800a4a9
 800a4e0:	0800a4a9 	.word	0x0800a4a9
 800a4e4:	0800a4a9 	.word	0x0800a4a9
 800a4e8:	0800a4a9 	.word	0x0800a4a9
 800a4ec:	0800a62d 	.word	0x0800a62d
 800a4f0:	0800a557 	.word	0x0800a557
 800a4f4:	0800a5e7 	.word	0x0800a5e7
 800a4f8:	0800a4a9 	.word	0x0800a4a9
 800a4fc:	0800a4a9 	.word	0x0800a4a9
 800a500:	0800a64f 	.word	0x0800a64f
 800a504:	0800a4a9 	.word	0x0800a4a9
 800a508:	0800a557 	.word	0x0800a557
 800a50c:	0800a4a9 	.word	0x0800a4a9
 800a510:	0800a4a9 	.word	0x0800a4a9
 800a514:	0800a5ef 	.word	0x0800a5ef
 800a518:	6833      	ldr	r3, [r6, #0]
 800a51a:	1d1a      	adds	r2, r3, #4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6032      	str	r2, [r6, #0]
 800a520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a524:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a528:	2301      	movs	r3, #1
 800a52a:	e09d      	b.n	800a668 <_printf_i+0x1e8>
 800a52c:	6833      	ldr	r3, [r6, #0]
 800a52e:	6820      	ldr	r0, [r4, #0]
 800a530:	1d19      	adds	r1, r3, #4
 800a532:	6031      	str	r1, [r6, #0]
 800a534:	0606      	lsls	r6, r0, #24
 800a536:	d501      	bpl.n	800a53c <_printf_i+0xbc>
 800a538:	681d      	ldr	r5, [r3, #0]
 800a53a:	e003      	b.n	800a544 <_printf_i+0xc4>
 800a53c:	0645      	lsls	r5, r0, #25
 800a53e:	d5fb      	bpl.n	800a538 <_printf_i+0xb8>
 800a540:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a544:	2d00      	cmp	r5, #0
 800a546:	da03      	bge.n	800a550 <_printf_i+0xd0>
 800a548:	232d      	movs	r3, #45	@ 0x2d
 800a54a:	426d      	negs	r5, r5
 800a54c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a550:	4859      	ldr	r0, [pc, #356]	@ (800a6b8 <_printf_i+0x238>)
 800a552:	230a      	movs	r3, #10
 800a554:	e011      	b.n	800a57a <_printf_i+0xfa>
 800a556:	6821      	ldr	r1, [r4, #0]
 800a558:	6833      	ldr	r3, [r6, #0]
 800a55a:	0608      	lsls	r0, r1, #24
 800a55c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a560:	d402      	bmi.n	800a568 <_printf_i+0xe8>
 800a562:	0649      	lsls	r1, r1, #25
 800a564:	bf48      	it	mi
 800a566:	b2ad      	uxthmi	r5, r5
 800a568:	2f6f      	cmp	r7, #111	@ 0x6f
 800a56a:	4853      	ldr	r0, [pc, #332]	@ (800a6b8 <_printf_i+0x238>)
 800a56c:	6033      	str	r3, [r6, #0]
 800a56e:	bf14      	ite	ne
 800a570:	230a      	movne	r3, #10
 800a572:	2308      	moveq	r3, #8
 800a574:	2100      	movs	r1, #0
 800a576:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a57a:	6866      	ldr	r6, [r4, #4]
 800a57c:	60a6      	str	r6, [r4, #8]
 800a57e:	2e00      	cmp	r6, #0
 800a580:	bfa2      	ittt	ge
 800a582:	6821      	ldrge	r1, [r4, #0]
 800a584:	f021 0104 	bicge.w	r1, r1, #4
 800a588:	6021      	strge	r1, [r4, #0]
 800a58a:	b90d      	cbnz	r5, 800a590 <_printf_i+0x110>
 800a58c:	2e00      	cmp	r6, #0
 800a58e:	d04b      	beq.n	800a628 <_printf_i+0x1a8>
 800a590:	4616      	mov	r6, r2
 800a592:	fbb5 f1f3 	udiv	r1, r5, r3
 800a596:	fb03 5711 	mls	r7, r3, r1, r5
 800a59a:	5dc7      	ldrb	r7, [r0, r7]
 800a59c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5a0:	462f      	mov	r7, r5
 800a5a2:	42bb      	cmp	r3, r7
 800a5a4:	460d      	mov	r5, r1
 800a5a6:	d9f4      	bls.n	800a592 <_printf_i+0x112>
 800a5a8:	2b08      	cmp	r3, #8
 800a5aa:	d10b      	bne.n	800a5c4 <_printf_i+0x144>
 800a5ac:	6823      	ldr	r3, [r4, #0]
 800a5ae:	07df      	lsls	r7, r3, #31
 800a5b0:	d508      	bpl.n	800a5c4 <_printf_i+0x144>
 800a5b2:	6923      	ldr	r3, [r4, #16]
 800a5b4:	6861      	ldr	r1, [r4, #4]
 800a5b6:	4299      	cmp	r1, r3
 800a5b8:	bfde      	ittt	le
 800a5ba:	2330      	movle	r3, #48	@ 0x30
 800a5bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5c4:	1b92      	subs	r2, r2, r6
 800a5c6:	6122      	str	r2, [r4, #16]
 800a5c8:	f8cd a000 	str.w	sl, [sp]
 800a5cc:	464b      	mov	r3, r9
 800a5ce:	aa03      	add	r2, sp, #12
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	f7ff fee6 	bl	800a3a4 <_printf_common>
 800a5d8:	3001      	adds	r0, #1
 800a5da:	d14a      	bne.n	800a672 <_printf_i+0x1f2>
 800a5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e0:	b004      	add	sp, #16
 800a5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	f043 0320 	orr.w	r3, r3, #32
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	4833      	ldr	r0, [pc, #204]	@ (800a6bc <_printf_i+0x23c>)
 800a5f0:	2778      	movs	r7, #120	@ 0x78
 800a5f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	6831      	ldr	r1, [r6, #0]
 800a5fa:	061f      	lsls	r7, r3, #24
 800a5fc:	f851 5b04 	ldr.w	r5, [r1], #4
 800a600:	d402      	bmi.n	800a608 <_printf_i+0x188>
 800a602:	065f      	lsls	r7, r3, #25
 800a604:	bf48      	it	mi
 800a606:	b2ad      	uxthmi	r5, r5
 800a608:	6031      	str	r1, [r6, #0]
 800a60a:	07d9      	lsls	r1, r3, #31
 800a60c:	bf44      	itt	mi
 800a60e:	f043 0320 	orrmi.w	r3, r3, #32
 800a612:	6023      	strmi	r3, [r4, #0]
 800a614:	b11d      	cbz	r5, 800a61e <_printf_i+0x19e>
 800a616:	2310      	movs	r3, #16
 800a618:	e7ac      	b.n	800a574 <_printf_i+0xf4>
 800a61a:	4827      	ldr	r0, [pc, #156]	@ (800a6b8 <_printf_i+0x238>)
 800a61c:	e7e9      	b.n	800a5f2 <_printf_i+0x172>
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	f023 0320 	bic.w	r3, r3, #32
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	e7f6      	b.n	800a616 <_printf_i+0x196>
 800a628:	4616      	mov	r6, r2
 800a62a:	e7bd      	b.n	800a5a8 <_printf_i+0x128>
 800a62c:	6833      	ldr	r3, [r6, #0]
 800a62e:	6825      	ldr	r5, [r4, #0]
 800a630:	6961      	ldr	r1, [r4, #20]
 800a632:	1d18      	adds	r0, r3, #4
 800a634:	6030      	str	r0, [r6, #0]
 800a636:	062e      	lsls	r6, r5, #24
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	d501      	bpl.n	800a640 <_printf_i+0x1c0>
 800a63c:	6019      	str	r1, [r3, #0]
 800a63e:	e002      	b.n	800a646 <_printf_i+0x1c6>
 800a640:	0668      	lsls	r0, r5, #25
 800a642:	d5fb      	bpl.n	800a63c <_printf_i+0x1bc>
 800a644:	8019      	strh	r1, [r3, #0]
 800a646:	2300      	movs	r3, #0
 800a648:	6123      	str	r3, [r4, #16]
 800a64a:	4616      	mov	r6, r2
 800a64c:	e7bc      	b.n	800a5c8 <_printf_i+0x148>
 800a64e:	6833      	ldr	r3, [r6, #0]
 800a650:	1d1a      	adds	r2, r3, #4
 800a652:	6032      	str	r2, [r6, #0]
 800a654:	681e      	ldr	r6, [r3, #0]
 800a656:	6862      	ldr	r2, [r4, #4]
 800a658:	2100      	movs	r1, #0
 800a65a:	4630      	mov	r0, r6
 800a65c:	f7f5 fdf8 	bl	8000250 <memchr>
 800a660:	b108      	cbz	r0, 800a666 <_printf_i+0x1e6>
 800a662:	1b80      	subs	r0, r0, r6
 800a664:	6060      	str	r0, [r4, #4]
 800a666:	6863      	ldr	r3, [r4, #4]
 800a668:	6123      	str	r3, [r4, #16]
 800a66a:	2300      	movs	r3, #0
 800a66c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a670:	e7aa      	b.n	800a5c8 <_printf_i+0x148>
 800a672:	6923      	ldr	r3, [r4, #16]
 800a674:	4632      	mov	r2, r6
 800a676:	4649      	mov	r1, r9
 800a678:	4640      	mov	r0, r8
 800a67a:	47d0      	blx	sl
 800a67c:	3001      	adds	r0, #1
 800a67e:	d0ad      	beq.n	800a5dc <_printf_i+0x15c>
 800a680:	6823      	ldr	r3, [r4, #0]
 800a682:	079b      	lsls	r3, r3, #30
 800a684:	d413      	bmi.n	800a6ae <_printf_i+0x22e>
 800a686:	68e0      	ldr	r0, [r4, #12]
 800a688:	9b03      	ldr	r3, [sp, #12]
 800a68a:	4298      	cmp	r0, r3
 800a68c:	bfb8      	it	lt
 800a68e:	4618      	movlt	r0, r3
 800a690:	e7a6      	b.n	800a5e0 <_printf_i+0x160>
 800a692:	2301      	movs	r3, #1
 800a694:	4632      	mov	r2, r6
 800a696:	4649      	mov	r1, r9
 800a698:	4640      	mov	r0, r8
 800a69a:	47d0      	blx	sl
 800a69c:	3001      	adds	r0, #1
 800a69e:	d09d      	beq.n	800a5dc <_printf_i+0x15c>
 800a6a0:	3501      	adds	r5, #1
 800a6a2:	68e3      	ldr	r3, [r4, #12]
 800a6a4:	9903      	ldr	r1, [sp, #12]
 800a6a6:	1a5b      	subs	r3, r3, r1
 800a6a8:	42ab      	cmp	r3, r5
 800a6aa:	dcf2      	bgt.n	800a692 <_printf_i+0x212>
 800a6ac:	e7eb      	b.n	800a686 <_printf_i+0x206>
 800a6ae:	2500      	movs	r5, #0
 800a6b0:	f104 0619 	add.w	r6, r4, #25
 800a6b4:	e7f5      	b.n	800a6a2 <_printf_i+0x222>
 800a6b6:	bf00      	nop
 800a6b8:	0800aac9 	.word	0x0800aac9
 800a6bc:	0800aada 	.word	0x0800aada

0800a6c0 <memmove>:
 800a6c0:	4288      	cmp	r0, r1
 800a6c2:	b510      	push	{r4, lr}
 800a6c4:	eb01 0402 	add.w	r4, r1, r2
 800a6c8:	d902      	bls.n	800a6d0 <memmove+0x10>
 800a6ca:	4284      	cmp	r4, r0
 800a6cc:	4623      	mov	r3, r4
 800a6ce:	d807      	bhi.n	800a6e0 <memmove+0x20>
 800a6d0:	1e43      	subs	r3, r0, #1
 800a6d2:	42a1      	cmp	r1, r4
 800a6d4:	d008      	beq.n	800a6e8 <memmove+0x28>
 800a6d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6de:	e7f8      	b.n	800a6d2 <memmove+0x12>
 800a6e0:	4402      	add	r2, r0
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	428a      	cmp	r2, r1
 800a6e6:	d100      	bne.n	800a6ea <memmove+0x2a>
 800a6e8:	bd10      	pop	{r4, pc}
 800a6ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6f2:	e7f7      	b.n	800a6e4 <memmove+0x24>

0800a6f4 <_sbrk_r>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	4d06      	ldr	r5, [pc, #24]	@ (800a710 <_sbrk_r+0x1c>)
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	4608      	mov	r0, r1
 800a6fe:	602b      	str	r3, [r5, #0]
 800a700:	f7f8 fc34 	bl	8002f6c <_sbrk>
 800a704:	1c43      	adds	r3, r0, #1
 800a706:	d102      	bne.n	800a70e <_sbrk_r+0x1a>
 800a708:	682b      	ldr	r3, [r5, #0]
 800a70a:	b103      	cbz	r3, 800a70e <_sbrk_r+0x1a>
 800a70c:	6023      	str	r3, [r4, #0]
 800a70e:	bd38      	pop	{r3, r4, r5, pc}
 800a710:	20001520 	.word	0x20001520

0800a714 <memcpy>:
 800a714:	440a      	add	r2, r1
 800a716:	4291      	cmp	r1, r2
 800a718:	f100 33ff 	add.w	r3, r0, #4294967295
 800a71c:	d100      	bne.n	800a720 <memcpy+0xc>
 800a71e:	4770      	bx	lr
 800a720:	b510      	push	{r4, lr}
 800a722:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a72a:	4291      	cmp	r1, r2
 800a72c:	d1f9      	bne.n	800a722 <memcpy+0xe>
 800a72e:	bd10      	pop	{r4, pc}

0800a730 <_realloc_r>:
 800a730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a734:	4680      	mov	r8, r0
 800a736:	4615      	mov	r5, r2
 800a738:	460c      	mov	r4, r1
 800a73a:	b921      	cbnz	r1, 800a746 <_realloc_r+0x16>
 800a73c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a740:	4611      	mov	r1, r2
 800a742:	f7ff bc4b 	b.w	8009fdc <_malloc_r>
 800a746:	b92a      	cbnz	r2, 800a754 <_realloc_r+0x24>
 800a748:	f7ff fbdc 	bl	8009f04 <_free_r>
 800a74c:	2400      	movs	r4, #0
 800a74e:	4620      	mov	r0, r4
 800a750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a754:	f000 f81a 	bl	800a78c <_malloc_usable_size_r>
 800a758:	4285      	cmp	r5, r0
 800a75a:	4606      	mov	r6, r0
 800a75c:	d802      	bhi.n	800a764 <_realloc_r+0x34>
 800a75e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a762:	d8f4      	bhi.n	800a74e <_realloc_r+0x1e>
 800a764:	4629      	mov	r1, r5
 800a766:	4640      	mov	r0, r8
 800a768:	f7ff fc38 	bl	8009fdc <_malloc_r>
 800a76c:	4607      	mov	r7, r0
 800a76e:	2800      	cmp	r0, #0
 800a770:	d0ec      	beq.n	800a74c <_realloc_r+0x1c>
 800a772:	42b5      	cmp	r5, r6
 800a774:	462a      	mov	r2, r5
 800a776:	4621      	mov	r1, r4
 800a778:	bf28      	it	cs
 800a77a:	4632      	movcs	r2, r6
 800a77c:	f7ff ffca 	bl	800a714 <memcpy>
 800a780:	4621      	mov	r1, r4
 800a782:	4640      	mov	r0, r8
 800a784:	f7ff fbbe 	bl	8009f04 <_free_r>
 800a788:	463c      	mov	r4, r7
 800a78a:	e7e0      	b.n	800a74e <_realloc_r+0x1e>

0800a78c <_malloc_usable_size_r>:
 800a78c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a790:	1f18      	subs	r0, r3, #4
 800a792:	2b00      	cmp	r3, #0
 800a794:	bfbc      	itt	lt
 800a796:	580b      	ldrlt	r3, [r1, r0]
 800a798:	18c0      	addlt	r0, r0, r3
 800a79a:	4770      	bx	lr

0800a79c <_init>:
 800a79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79e:	bf00      	nop
 800a7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a2:	bc08      	pop	{r3}
 800a7a4:	469e      	mov	lr, r3
 800a7a6:	4770      	bx	lr

0800a7a8 <_fini>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	bf00      	nop
 800a7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ae:	bc08      	pop	{r3}
 800a7b0:	469e      	mov	lr, r3
 800a7b2:	4770      	bx	lr
